   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"acc_func.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.acc_init,"ax",%progbits
  16              		.align	1
  17              		.global	acc_init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	acc_init:
  24              	.LFB3:
  25              		.file 1 "../source/acc_func.c"
   1:../source/acc_func.c **** /*
   2:../source/acc_func.c ****  * acc_func.c
   3:../source/acc_func.c ****  *
   4:../source/acc_func.c ****  *  Created on: Feb 9, 2018
   5:../source/acc_func.c ****  *      Author: nks
   6:../source/acc_func.c ****  */
   7:../source/acc_func.c **** 
   8:../source/acc_func.c **** #include <stdint.h>
   9:../source/acc_func.c **** #include <stdio.h>
  10:../source/acc_func.c **** #include "i2c_func.h"
  11:../source/acc_func.c **** //#define X_AXIS 	0
  12:../source/acc_func.c **** //#define Y_AXIS 	1
  13:../source/acc_func.c **** //#define Z_AXIS 	2
  14:../source/acc_func.c **** 
  15:../source/acc_func.c **** #include "adc_func.h"
  16:../source/acc_func.c **** #include "acc_func.h"
  17:../source/acc_func.c **** 
  18:../source/acc_func.c **** unsigned char buffer[50];
  19:../source/acc_func.c **** 
  20:../source/acc_func.c **** void acc_init() {
  26              		.loc 1 20 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  21:../source/acc_func.c **** 	accWriteReg(0x2a, 0x1d); //write accelerometer CTRL_REG1 (active mode)
  34              		.loc 1 21 0
  35 0002 1D21     		movs	r1, #29
  36 0004 2A20     		movs	r0, #42
  37 0006 FFF7FEFF 		bl	accWriteReg
  38              	.LVL0:
  22:../source/acc_func.c **** 	accWriteReg(0x5B, 0x03); //Acc temperature sensor enable
  39              		.loc 1 22 0
  40 000a 0321     		movs	r1, #3
  41 000c 5B20     		movs	r0, #91
  42 000e FFF7FEFF 		bl	accWriteReg
  43              	.LVL1:
  23:../source/acc_func.c **** 
  24:../source/acc_func.c **** }
  44              		.loc 1 24 0
  45              		@ sp needed
  46 0012 10BD     		pop	{r4, pc}
  47              		.cfi_endproc
  48              	.LFE3:
  50              		.section	.text.configure_acc,"ax",%progbits
  51              		.align	1
  52              		.global	configure_acc
  53              		.syntax unified
  54              		.code	16
  55              		.thumb_func
  56              		.fpu softvfp
  58              	configure_acc:
  59              	.LFB4:
  25:../source/acc_func.c **** 
  26:../source/acc_func.c **** void configure_acc() {
  60              		.loc 1 26 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64 0000 10B5     		push	{r4, lr}
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 4, -8
  67              		.cfi_offset 14, -4
  68              	.LVL2:
  27:../source/acc_func.c **** 
  28:../source/acc_func.c **** 	uint8_t tmp = 0;
  29:../source/acc_func.c **** 
  30:../source/acc_func.c **** 	tmp = accReadReg(FXOS8700Q_CTRL_REG4); //read old contents of CTRL REG 4 to tmp
  69              		.loc 1 30 0
  70 0002 2D20     		movs	r0, #45
  71 0004 FFF7FEFF 		bl	accReadReg
  72              	.LVL3:
  31:../source/acc_func.c **** 	tmp |= 0x84; //make changes to it
  73              		.loc 1 31 0
  74 0008 7C21     		movs	r1, #124
  75 000a 4942     		rsbs	r1, r1, #0
  76 000c 0143     		orrs	r1, r0
  77 000e C9B2     		uxtb	r1, r1
  78              	.LVL4:
  32:../source/acc_func.c **** 	accWriteReg(FXOS8700Q_CTRL_REG4, tmp); //write it back
  79              		.loc 1 32 0
  80 0010 2D20     		movs	r0, #45
  81 0012 FFF7FEFF 		bl	accWriteReg
  82              	.LVL5:
  33:../source/acc_func.c **** 
  34:../source/acc_func.c **** 	tmp = accReadReg(FXOS8700Q_CTRL_REG5);
  83              		.loc 1 34 0
  84 0016 2E20     		movs	r0, #46
  85 0018 FFF7FEFF 		bl	accReadReg
  86              	.LVL6:
  35:../source/acc_func.c **** 	tmp |= 0x04;
  87              		.loc 1 35 0
  88 001c 0421     		movs	r1, #4
  89 001e 0143     		orrs	r1, r0
  90 0020 C9B2     		uxtb	r1, r1
  91              	.LVL7:
  36:../source/acc_func.c **** 	accWriteReg(FXOS8700Q_CTRL_REG5, tmp);
  92              		.loc 1 36 0
  93 0022 2E20     		movs	r0, #46
  94 0024 FFF7FEFF 		bl	accWriteReg
  95              	.LVL8:
  37:../source/acc_func.c **** 
  38:../source/acc_func.c **** 	tmp = accReadReg(FXOS8700Q_CTRL_REG3);
  96              		.loc 1 38 0
  97 0028 2C20     		movs	r0, #44
  98 002a FFF7FEFF 		bl	accReadReg
  99              	.LVL9:
  39:../source/acc_func.c **** 	tmp |= 0x08;
 100              		.loc 1 39 0
 101 002e 0821     		movs	r1, #8
 102 0030 0143     		orrs	r1, r0
 103 0032 C9B2     		uxtb	r1, r1
 104              	.LVL10:
  40:../source/acc_func.c **** 	accWriteReg(FXOS8700Q_CTRL_REG3, tmp);
 105              		.loc 1 40 0
 106 0034 2C20     		movs	r0, #44
 107 0036 FFF7FEFF 		bl	accWriteReg
 108              	.LVL11:
  41:../source/acc_func.c **** 
  42:../source/acc_func.c **** 	tmp = accReadReg( FXOS8700Q_A_FFMT_CFG);
 109              		.loc 1 42 0
 110 003a 1520     		movs	r0, #21
 111 003c FFF7FEFF 		bl	accReadReg
 112              	.LVL12:
  43:../source/acc_func.c **** 	tmp |= 0x78;
 113              		.loc 1 43 0
 114 0040 7821     		movs	r1, #120
 115 0042 0143     		orrs	r1, r0
 116 0044 C9B2     		uxtb	r1, r1
 117              	.LVL13:
  44:../source/acc_func.c **** 	accWriteReg(FXOS8700Q_A_FFMT_CFG, tmp);
 118              		.loc 1 44 0
 119 0046 1520     		movs	r0, #21
 120 0048 FFF7FEFF 		bl	accWriteReg
 121              	.LVL14:
  45:../source/acc_func.c **** 
  46:../source/acc_func.c **** 	tmp = accReadReg( FXOS8700Q_A_FFMT_THS);
 122              		.loc 1 46 0
 123 004c 1720     		movs	r0, #23
 124 004e FFF7FEFF 		bl	accReadReg
 125              	.LVL15:
  47:../source/acc_func.c **** 	tmp |= 0x8F;
 126              		.loc 1 47 0
 127 0052 7121     		movs	r1, #113
 128 0054 4942     		rsbs	r1, r1, #0
 129 0056 0143     		orrs	r1, r0
 130 0058 C9B2     		uxtb	r1, r1
 131              	.LVL16:
  48:../source/acc_func.c **** 	accWriteReg(FXOS8700Q_A_FFMT_THS, tmp);
 132              		.loc 1 48 0
 133 005a 1720     		movs	r0, #23
 134 005c FFF7FEFF 		bl	accWriteReg
 135              	.LVL17:
  49:../source/acc_func.c **** 
  50:../source/acc_func.c **** }
 136              		.loc 1 50 0
 137              		@ sp needed
 138 0060 10BD     		pop	{r4, pc}
 139              		.cfi_endproc
 140              	.LFE4:
 142              		.section	.text.read_acc_axis,"ax",%progbits
 143              		.align	1
 144              		.global	read_acc_axis
 145              		.syntax unified
 146              		.code	16
 147              		.thumb_func
 148              		.fpu softvfp
 150              	read_acc_axis:
 151              	.LFB5:
  51:../source/acc_func.c **** 
  52:../source/acc_func.c **** int16_t read_acc_axis(uint8_t axis) {
 152              		.loc 1 52 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL18:
 157 0000 70B5     		push	{r4, r5, r6, lr}
 158              		.cfi_def_cfa_offset 16
 159              		.cfi_offset 4, -16
 160              		.cfi_offset 5, -12
 161              		.cfi_offset 6, -8
 162              		.cfi_offset 14, -4
 163 0002 0500     		movs	r5, r0
 164              	.LVL19:
  53:../source/acc_func.c **** 	int8_t acc_temp = 0;
  54:../source/acc_func.c **** 
  55:../source/acc_func.c **** 	switch (axis) {
 165              		.loc 1 55 0
 166 0004 0128     		cmp	r0, #1
 167 0006 19D0     		beq	.L5
 168 0008 0028     		cmp	r0, #0
 169 000a 21D0     		beq	.L11
 170 000c 0228     		cmp	r0, #2
 171 000e 17D0     		beq	.L7
 172 0010 0328     		cmp	r0, #3
 173 0012 17D0     		beq	.L8
 174              	.LVL20:
 175              	.L6:
  56:../source/acc_func.c **** 	case 0:
  57:../source/acc_func.c **** 		axis = 0x01;
  58:../source/acc_func.c **** 		break;
  59:../source/acc_func.c **** 
  60:../source/acc_func.c **** 	case 1:
  61:../source/acc_func.c **** 		axis = 0x03;
  62:../source/acc_func.c **** 		break;
  63:../source/acc_func.c **** 
  64:../source/acc_func.c **** 	case 2:
  65:../source/acc_func.c **** 		axis = 0x05;
  66:../source/acc_func.c **** 		break;
  67:../source/acc_func.c **** 
  68:../source/acc_func.c **** 	case 3:
  69:../source/acc_func.c **** 		acc_temp = accReadReg(0x51);
  70:../source/acc_func.c **** 		return (int16_t) acc_temp;
  71:../source/acc_func.c **** 		break;
  72:../source/acc_func.c **** 
  73:../source/acc_func.c **** 	}
  74:../source/acc_func.c **** 
  75:../source/acc_func.c **** 	uint16_t acc_val = 0; //init a 16-bit variable to store 14-bit acceleration value
  76:../source/acc_func.c **** 
  77:../source/acc_func.c **** 	uint8_t acc_buf = accReadReg(axis); //read MSB bits of acceleration value
 176              		.loc 1 77 0
 177 0014 2800     		movs	r0, r5
 178 0016 FFF7FEFF 		bl	accReadReg
 179              	.LVL21:
  78:../source/acc_func.c **** 
  79:../source/acc_func.c **** 	acc_val = acc_buf; //read MSB bits to the 16 bit variable
 180              		.loc 1 79 0
 181 001a 80B2     		uxth	r0, r0
 182              	.LVL22:
  80:../source/acc_func.c **** 
  81:../source/acc_func.c **** 	//0000 0000 MMMM MMMM at this stage acc_val looks like this in memory
  82:../source/acc_func.c **** 
  83:../source/acc_func.c **** 	acc_val <<= 8; // shift MSB bits left to have them in right place
 183              		.loc 1 83 0
 184 001c 0002     		lsls	r0, r0, #8
 185              	.LVL23:
 186 001e 84B2     		uxth	r4, r0
 187              	.LVL24:
  84:../source/acc_func.c **** 
  85:../source/acc_func.c **** 	//MMMM MMMM 0000 0000
  86:../source/acc_func.c **** 
  87:../source/acc_func.c **** 	acc_buf = accReadReg(axis + 1); //read LSB values to buffer
 188              		.loc 1 87 0
 189 0020 0135     		adds	r5, r5, #1
 190              	.LVL25:
 191 0022 E8B2     		uxtb	r0, r5
 192 0024 FFF7FEFF 		bl	accReadReg
 193              	.LVL26:
  88:../source/acc_func.c **** 	acc_val |= acc_buf; //OR LSB values to the acc_value
 194              		.loc 1 88 0
 195 0028 2043     		orrs	r0, r4
 196              	.LVL27:
 197 002a 80B2     		uxth	r0, r0
 198              	.LVL28:
  89:../source/acc_func.c **** 
  90:../source/acc_func.c **** 	//MMMM MMMM LLLL LL00
  91:../source/acc_func.c **** 	acc_val >>= 2; //shift right 2 bits to right-justify
 199              		.loc 1 91 0
 200 002c 8008     		lsrs	r0, r0, #2
 201              	.LVL29:
  92:../source/acc_func.c **** 
  93:../source/acc_func.c **** 	//00MM MMMM MMLL LLLLpaskaa
  94:../source/acc_func.c **** 
  95:../source/acc_func.c **** 	int16_t out = 0;
  96:../source/acc_func.c **** 
  97:../source/acc_func.c **** 	if (acc_val & (1 << 13)) //test if value is negative by masking 14th bit
 202              		.loc 1 97 0
 203 002e 8023     		movs	r3, #128
 204 0030 9B01     		lsls	r3, r3, #6
 205 0032 1842     		tst	r0, r3
 206 0034 0ED1     		bne	.L12
  98:../source/acc_func.c **** 			{
  99:../source/acc_func.c **** 		acc_val = 0xffff - acc_val + 1;
 100:../source/acc_func.c **** 		out = 0 - (acc_val & 0x1fff);
 101:../source/acc_func.c **** 
 102:../source/acc_func.c **** 	}
 103:../source/acc_func.c **** 
 104:../source/acc_func.c **** 	else {
 105:../source/acc_func.c **** 		out = acc_val & 0x1fff;
 207              		.loc 1 105 0
 208 0036 C004     		lsls	r0, r0, #19
 209              	.LVL30:
 210 0038 C00C     		lsrs	r0, r0, #19
 211              	.LVL31:
 212              	.L9:
 106:../source/acc_func.c **** 	}
 107:../source/acc_func.c **** 	return out;
 108:../source/acc_func.c **** }
 213              		.loc 1 108 0
 214              		@ sp needed
 215 003a 70BD     		pop	{r4, r5, r6, pc}
 216              	.LVL32:
 217              	.L5:
  61:../source/acc_func.c **** 		break;
 218              		.loc 1 61 0
 219 003c 0325     		movs	r5, #3
  62:../source/acc_func.c **** 
 220              		.loc 1 62 0
 221 003e E9E7     		b	.L6
 222              	.LVL33:
 223              	.L7:
  65:../source/acc_func.c **** 		break;
 224              		.loc 1 65 0
 225 0040 0525     		movs	r5, #5
  66:../source/acc_func.c **** 
 226              		.loc 1 66 0
 227 0042 E7E7     		b	.L6
 228              	.LVL34:
 229              	.L8:
  69:../source/acc_func.c **** 		return (int16_t) acc_temp;
 230              		.loc 1 69 0
 231 0044 5120     		movs	r0, #81
 232              	.LVL35:
 233 0046 FFF7FEFF 		bl	accReadReg
 234              	.LVL36:
 235 004a 40B2     		sxtb	r0, r0
 236              	.LVL37:
  70:../source/acc_func.c **** 		break;
 237              		.loc 1 70 0
 238 004c 00B2     		sxth	r0, r0
 239              	.LVL38:
 240 004e F4E7     		b	.L9
 241              	.LVL39:
 242              	.L11:
  57:../source/acc_func.c **** 		break;
 243              		.loc 1 57 0
 244 0050 0125     		movs	r5, #1
 245 0052 DFE7     		b	.L6
 246              	.LVL40:
 247              	.L12:
  99:../source/acc_func.c **** 		out = 0 - (acc_val & 0x1fff);
 248              		.loc 1 99 0
 249 0054 4042     		rsbs	r0, r0, #0
 250              	.LVL41:
 100:../source/acc_func.c **** 
 251              		.loc 1 100 0
 252 0056 C004     		lsls	r0, r0, #19
 253              	.LVL42:
 254 0058 C00C     		lsrs	r0, r0, #19
 255 005a 4042     		rsbs	r0, r0, #0
 256 005c 00B2     		sxth	r0, r0
 257              	.LVL43:
 258 005e ECE7     		b	.L9
 259              		.cfi_endproc
 260              	.LFE5:
 262              		.comm	buffer,50,4
 263              		.text
 264              	.Letext0:
 265              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 266              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 267              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 268              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 269              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 270              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 271              		.file 8 "../source/i2c_func.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 acc_func.c
     /tmp/ccwXluAY.s:16     .text.acc_init:0000000000000000 $t
     /tmp/ccwXluAY.s:23     .text.acc_init:0000000000000000 acc_init
     /tmp/ccwXluAY.s:51     .text.configure_acc:0000000000000000 $t
     /tmp/ccwXluAY.s:58     .text.configure_acc:0000000000000000 configure_acc
     /tmp/ccwXluAY.s:143    .text.read_acc_axis:0000000000000000 $t
     /tmp/ccwXluAY.s:150    .text.read_acc_axis:0000000000000000 read_acc_axis
                            *COM*:0000000000000032 buffer

UNDEFINED SYMBOLS
accWriteReg
accReadReg
