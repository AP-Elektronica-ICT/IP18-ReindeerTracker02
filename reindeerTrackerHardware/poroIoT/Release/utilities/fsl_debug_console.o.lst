   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_debug_console.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.DbgConsole_RelocateLog,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	DbgConsole_RelocateLog:
  23              	.LFB60:
  24              		.file 1 "../utilities/fsl_debug_console.c"
   1:../utilities/fsl_debug_console.c **** /*
   2:../utilities/fsl_debug_console.c ****  * This is a modified version of the file printf.c, which was distributed
   3:../utilities/fsl_debug_console.c ****  * by Motorola as part of the M5407C3BOOT.zip package used to initialize
   4:../utilities/fsl_debug_console.c ****  * the M5407C3 evaluation board.
   5:../utilities/fsl_debug_console.c ****  *
   6:../utilities/fsl_debug_console.c ****  * Copyright:
   7:../utilities/fsl_debug_console.c ****  *      1999-2000 MOTOROLA, INC. All Rights Reserved.
   8:../utilities/fsl_debug_console.c ****  *  You are hereby granted a copyright license to use, modify, and
   9:../utilities/fsl_debug_console.c ****  *  distribute the SOFTWARE so long as this entire notice is
  10:../utilities/fsl_debug_console.c ****  *  retained without alteration in any modified and/or redistributed
  11:../utilities/fsl_debug_console.c ****  *  versions, and that such modified versions are clearly identified
  12:../utilities/fsl_debug_console.c ****  *  as such. No licenses are granted by implication, estoppel or
  13:../utilities/fsl_debug_console.c ****  *  otherwise under any patents or trademarks of Motorola, Inc. This
  14:../utilities/fsl_debug_console.c ****  *  software is provided on an "AS IS" basis and without warranty.
  15:../utilities/fsl_debug_console.c ****  *
  16:../utilities/fsl_debug_console.c ****  *  To the maximum extent permitted by applicable law, MOTOROLA
  17:../utilities/fsl_debug_console.c ****  *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
  18:../utilities/fsl_debug_console.c ****  *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
  19:../utilities/fsl_debug_console.c ****  *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
  20:../utilities/fsl_debug_console.c ****  *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
  21:../utilities/fsl_debug_console.c ****  *  ACCOMPANYING WRITTEN MATERIALS.
  22:../utilities/fsl_debug_console.c ****  *
  23:../utilities/fsl_debug_console.c ****  *  To the maximum extent permitted by applicable law, IN NO EVENT
  24:../utilities/fsl_debug_console.c ****  *  SHALL MOTOROLA BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
  25:../utilities/fsl_debug_console.c ****  *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
  26:../utilities/fsl_debug_console.c ****  *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
  27:../utilities/fsl_debug_console.c ****  *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
  28:../utilities/fsl_debug_console.c ****  *
  29:../utilities/fsl_debug_console.c ****  *  Motorola assumes no responsibility for the maintenance and support
  30:../utilities/fsl_debug_console.c ****  *  of this software
  31:../utilities/fsl_debug_console.c **** 
  32:../utilities/fsl_debug_console.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
  33:../utilities/fsl_debug_console.c ****  * Copyright 2016-2017 NXP
  34:../utilities/fsl_debug_console.c ****  *
  35:../utilities/fsl_debug_console.c ****  * Redistribution and use in source and binary forms, with or without modification,
  36:../utilities/fsl_debug_console.c ****  * are permitted provided that the following conditions are met:
  37:../utilities/fsl_debug_console.c ****  *
  38:../utilities/fsl_debug_console.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  39:../utilities/fsl_debug_console.c ****  *   of conditions and the following disclaimer.
  40:../utilities/fsl_debug_console.c ****  *
  41:../utilities/fsl_debug_console.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  42:../utilities/fsl_debug_console.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  43:../utilities/fsl_debug_console.c ****  *   other materials provided with the distribution.
  44:../utilities/fsl_debug_console.c ****  *
  45:../utilities/fsl_debug_console.c ****  * o Neither the name of the copyright holder nor the names of its
  46:../utilities/fsl_debug_console.c ****  *   contributors may be used to endorse or promote products derived from this
  47:../utilities/fsl_debug_console.c ****  *   software without specific prior written permission.
  48:../utilities/fsl_debug_console.c ****  *
  49:../utilities/fsl_debug_console.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  50:../utilities/fsl_debug_console.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  51:../utilities/fsl_debug_console.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  52:../utilities/fsl_debug_console.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  53:../utilities/fsl_debug_console.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  54:../utilities/fsl_debug_console.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  55:../utilities/fsl_debug_console.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  56:../utilities/fsl_debug_console.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  57:../utilities/fsl_debug_console.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  58:../utilities/fsl_debug_console.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  59:../utilities/fsl_debug_console.c ****  */
  60:../utilities/fsl_debug_console.c **** 
  61:../utilities/fsl_debug_console.c **** #include <stdarg.h>
  62:../utilities/fsl_debug_console.c **** #include <stdlib.h>
  63:../utilities/fsl_debug_console.c **** #if defined(__CC_ARM)
  64:../utilities/fsl_debug_console.c **** #include <stdio.h>
  65:../utilities/fsl_debug_console.c **** #endif
  66:../utilities/fsl_debug_console.c **** 
  67:../utilities/fsl_debug_console.c **** #include "fsl_debug_console.h"
  68:../utilities/fsl_debug_console.c **** #include "fsl_debug_console_conf.h"
  69:../utilities/fsl_debug_console.c **** #include "fsl_log.h"
  70:../utilities/fsl_debug_console.c **** #include "fsl_str.h"
  71:../utilities/fsl_debug_console.c **** 
  72:../utilities/fsl_debug_console.c **** /*******************************************************************************
  73:../utilities/fsl_debug_console.c ****  * Definitions
  74:../utilities/fsl_debug_console.c ****  ******************************************************************************/
  75:../utilities/fsl_debug_console.c **** 
  76:../utilities/fsl_debug_console.c **** /*******************************************************************************
  77:../utilities/fsl_debug_console.c ****  * Variables
  78:../utilities/fsl_debug_console.c ****  ******************************************************************************/
  79:../utilities/fsl_debug_console.c **** 
  80:../utilities/fsl_debug_console.c **** /*******************************************************************************
  81:../utilities/fsl_debug_console.c ****  * Prototypes
  82:../utilities/fsl_debug_console.c ****  ******************************************************************************/
  83:../utilities/fsl_debug_console.c **** /*!
  84:../utilities/fsl_debug_console.c ****  * @brief This is a printf call back function which is used to relocate the log to buffer
  85:../utilities/fsl_debug_console.c ****  * or print the log immediately when the local buffer is full.
  86:../utilities/fsl_debug_console.c ****  *
  87:../utilities/fsl_debug_console.c ****  * @param[in] buf   Buffer to store log.
  88:../utilities/fsl_debug_console.c ****  * @param[in] indicator Buffer index.
  89:../utilities/fsl_debug_console.c ****  * @param[in] val Target character to store.
  90:../utilities/fsl_debug_console.c ****  * @param[in] len length of the character
  91:../utilities/fsl_debug_console.c ****  *
  92:../utilities/fsl_debug_console.c ****  */
  93:../utilities/fsl_debug_console.c **** #if SDK_DEBUGCONSOLE
  94:../utilities/fsl_debug_console.c **** static void DbgConsole_RelocateLog(char *buf, int32_t *indicator, char val, int len);
  95:../utilities/fsl_debug_console.c **** #endif
  96:../utilities/fsl_debug_console.c **** /*******************************************************************************
  97:../utilities/fsl_debug_console.c ****  * Code
  98:../utilities/fsl_debug_console.c ****  ******************************************************************************/
  99:../utilities/fsl_debug_console.c **** 
 100:../utilities/fsl_debug_console.c **** /*************Code for DbgConsole Init, Deinit, Printf, Scanf *******************************/
 101:../utilities/fsl_debug_console.c **** 
 102:../utilities/fsl_debug_console.c **** /* See fsl_debug_console.h for documentation of this function. */
 103:../utilities/fsl_debug_console.c **** status_t DbgConsole_Init(uint32_t baseAddr, uint32_t baudRate, uint8_t device, uint32_t clkSrcFreq)
 104:../utilities/fsl_debug_console.c **** {
 105:../utilities/fsl_debug_console.c ****     assert(device != DEBUG_CONSOLE_DEVICE_TYPE_NONE);
 106:../utilities/fsl_debug_console.c **** 
 107:../utilities/fsl_debug_console.c ****     return LOG_Init(baseAddr, device, baudRate, clkSrcFreq);
 108:../utilities/fsl_debug_console.c **** }
 109:../utilities/fsl_debug_console.c **** 
 110:../utilities/fsl_debug_console.c **** /* See fsl_debug_console.h for documentation of this function. */
 111:../utilities/fsl_debug_console.c **** status_t DbgConsole_Deinit(void)
 112:../utilities/fsl_debug_console.c **** {
 113:../utilities/fsl_debug_console.c ****     /* LOG deinit */
 114:../utilities/fsl_debug_console.c ****     LOG_Deinit();
 115:../utilities/fsl_debug_console.c **** 
 116:../utilities/fsl_debug_console.c ****     return kStatus_Success;
 117:../utilities/fsl_debug_console.c **** }
 118:../utilities/fsl_debug_console.c **** 
 119:../utilities/fsl_debug_console.c **** status_t DbgConsole_Flush(void)
 120:../utilities/fsl_debug_console.c **** {
 121:../utilities/fsl_debug_console.c ****     /* wait log and io idle */
 122:../utilities/fsl_debug_console.c ****     return LOG_WaitIdle();
 123:../utilities/fsl_debug_console.c **** }
 124:../utilities/fsl_debug_console.c **** 
 125:../utilities/fsl_debug_console.c **** #if SDK_DEBUGCONSOLE
 126:../utilities/fsl_debug_console.c **** /* See fsl_debug_console.h for documentation of this function. */
 127:../utilities/fsl_debug_console.c **** int DbgConsole_Printf(const char *fmt_s, ...)
 128:../utilities/fsl_debug_console.c **** {
 129:../utilities/fsl_debug_console.c ****     va_list ap;
 130:../utilities/fsl_debug_console.c ****     int logLength = 0U, result = 0U;
 131:../utilities/fsl_debug_console.c ****     char printBuf[DEBUG_CONSOLE_PRINTF_MAX_LOG_LEN] = {0U};
 132:../utilities/fsl_debug_console.c **** 
 133:../utilities/fsl_debug_console.c ****     va_start(ap, fmt_s);
 134:../utilities/fsl_debug_console.c ****     /* format print log first */
 135:../utilities/fsl_debug_console.c ****     logLength = StrFormatPrintf(fmt_s, ap, printBuf, DbgConsole_RelocateLog);
 136:../utilities/fsl_debug_console.c ****     /* print log */
 137:../utilities/fsl_debug_console.c ****     result = LOG_Push((uint8_t *)printBuf, logLength);
 138:../utilities/fsl_debug_console.c **** 
 139:../utilities/fsl_debug_console.c ****     va_end(ap);
 140:../utilities/fsl_debug_console.c **** 
 141:../utilities/fsl_debug_console.c ****     return result;
 142:../utilities/fsl_debug_console.c **** }
 143:../utilities/fsl_debug_console.c **** 
 144:../utilities/fsl_debug_console.c **** /* See fsl_debug_console.h for documentation of this function. */
 145:../utilities/fsl_debug_console.c **** int DbgConsole_Putchar(int ch)
 146:../utilities/fsl_debug_console.c **** {
 147:../utilities/fsl_debug_console.c ****     /* print char */
 148:../utilities/fsl_debug_console.c ****     return LOG_Push((uint8_t *)&ch, 1U);
 149:../utilities/fsl_debug_console.c **** }
 150:../utilities/fsl_debug_console.c **** 
 151:../utilities/fsl_debug_console.c **** /* See fsl_debug_console.h for documentation of this function. */
 152:../utilities/fsl_debug_console.c **** int DbgConsole_Scanf(char *fmt_ptr, ...)
 153:../utilities/fsl_debug_console.c **** {
 154:../utilities/fsl_debug_console.c ****     va_list ap;
 155:../utilities/fsl_debug_console.c ****     int result;
 156:../utilities/fsl_debug_console.c ****     char scanfBuf[DEBUG_CONSOLE_SCANF_MAX_LOG_LEN + 1U] = {0U};
 157:../utilities/fsl_debug_console.c **** 
 158:../utilities/fsl_debug_console.c ****     /* scanf log */
 159:../utilities/fsl_debug_console.c ****     LOG_ReadLine((uint8_t *)scanfBuf, DEBUG_CONSOLE_SCANF_MAX_LOG_LEN);
 160:../utilities/fsl_debug_console.c ****     /* get va_list */
 161:../utilities/fsl_debug_console.c ****     va_start(ap, fmt_ptr);
 162:../utilities/fsl_debug_console.c ****     /* format scanf log */
 163:../utilities/fsl_debug_console.c ****     result = StrFormatScanf(scanfBuf, fmt_ptr, ap);
 164:../utilities/fsl_debug_console.c **** 
 165:../utilities/fsl_debug_console.c ****     va_end(ap);
 166:../utilities/fsl_debug_console.c **** 
 167:../utilities/fsl_debug_console.c ****     return result;
 168:../utilities/fsl_debug_console.c **** }
 169:../utilities/fsl_debug_console.c **** 
 170:../utilities/fsl_debug_console.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 171:../utilities/fsl_debug_console.c **** status_t DbgConsole_TryGetchar(char *ch)
 172:../utilities/fsl_debug_console.c **** {
 173:../utilities/fsl_debug_console.c ****     if (NULL != ch)
 174:../utilities/fsl_debug_console.c ****     {
 175:../utilities/fsl_debug_console.c ****         return LOG_TryReadCharacter((uint8_t *)ch);
 176:../utilities/fsl_debug_console.c ****     }
 177:../utilities/fsl_debug_console.c **** 
 178:../utilities/fsl_debug_console.c ****     return kStatus_Fail;
 179:../utilities/fsl_debug_console.c **** }
 180:../utilities/fsl_debug_console.c **** #endif
 181:../utilities/fsl_debug_console.c **** 
 182:../utilities/fsl_debug_console.c **** /* See fsl_debug_console.h for documentation of this function. */
 183:../utilities/fsl_debug_console.c **** int DbgConsole_Getchar(void)
 184:../utilities/fsl_debug_console.c **** {
 185:../utilities/fsl_debug_console.c ****     uint8_t ch;
 186:../utilities/fsl_debug_console.c **** 
 187:../utilities/fsl_debug_console.c ****     /* Get char */
 188:../utilities/fsl_debug_console.c ****     LOG_ReadCharacter(&ch);
 189:../utilities/fsl_debug_console.c **** 
 190:../utilities/fsl_debug_console.c ****     return ch;
 191:../utilities/fsl_debug_console.c **** }
 192:../utilities/fsl_debug_console.c **** 
 193:../utilities/fsl_debug_console.c **** static void DbgConsole_RelocateLog(char *buf, int32_t *indicator, char val, int len)
 194:../utilities/fsl_debug_console.c **** {
  25              		.loc 1 194 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 C646     		mov	lr, r8
  38 0004 00B5     		push	{lr}
  39              		.cfi_def_cfa_offset 24
  40              		.cfi_offset 8, -24
  41 0006 0600     		movs	r6, r0
  42 0008 0C00     		movs	r4, r1
  43 000a 9046     		mov	r8, r2
  44 000c 1F00     		movs	r7, r3
  45              	.LVL1:
 195:../utilities/fsl_debug_console.c ****     int i = 0;
 196:../utilities/fsl_debug_console.c **** 
 197:../utilities/fsl_debug_console.c ****     for (i = 0; i < len; i++)
  46              		.loc 1 197 0
  47 000e 0025     		movs	r5, #0
  48 0010 06E0     		b	.L2
  49              	.LVL2:
  50              	.L3:
 198:../utilities/fsl_debug_console.c ****     {
 199:../utilities/fsl_debug_console.c ****         if ((*indicator + 1) >= DEBUG_CONSOLE_PRINTF_MAX_LOG_LEN)
 200:../utilities/fsl_debug_console.c ****         {
 201:../utilities/fsl_debug_console.c ****             LOG_Push((uint8_t *)buf, *indicator);
 202:../utilities/fsl_debug_console.c ****             *indicator = 0U;
 203:../utilities/fsl_debug_console.c ****         }
 204:../utilities/fsl_debug_console.c **** 
 205:../utilities/fsl_debug_console.c ****         buf[*indicator] = val;
  51              		.loc 1 205 0 discriminator 2
  52 0012 2368     		ldr	r3, [r4]
  53 0014 4246     		mov	r2, r8
  54 0016 F254     		strb	r2, [r6, r3]
 206:../utilities/fsl_debug_console.c ****         (*indicator)++;
  55              		.loc 1 206 0 discriminator 2
  56 0018 2368     		ldr	r3, [r4]
  57 001a 0133     		adds	r3, r3, #1
  58 001c 2360     		str	r3, [r4]
 197:../utilities/fsl_debug_console.c ****     {
  59              		.loc 1 197 0 discriminator 2
  60 001e 0135     		adds	r5, r5, #1
  61              	.LVL3:
  62              	.L2:
 197:../utilities/fsl_debug_console.c ****     {
  63              		.loc 1 197 0 is_stmt 0 discriminator 1
  64 0020 BD42     		cmp	r5, r7
  65 0022 09DA     		bge	.L5
 199:../utilities/fsl_debug_console.c ****         {
  66              		.loc 1 199 0 is_stmt 1
  67 0024 2168     		ldr	r1, [r4]
  68 0026 4B1C     		adds	r3, r1, #1
  69 0028 7F2B     		cmp	r3, #127
  70 002a F2D9     		bls	.L3
 201:../utilities/fsl_debug_console.c ****             *indicator = 0U;
  71              		.loc 1 201 0
  72 002c 3000     		movs	r0, r6
  73 002e FFF7FEFF 		bl	LOG_Push
  74              	.LVL4:
 202:../utilities/fsl_debug_console.c ****         }
  75              		.loc 1 202 0
  76 0032 0023     		movs	r3, #0
  77 0034 2360     		str	r3, [r4]
  78 0036 ECE7     		b	.L3
  79              	.L5:
 207:../utilities/fsl_debug_console.c ****     }
 208:../utilities/fsl_debug_console.c **** }
  80              		.loc 1 208 0
  81              		@ sp needed
  82              	.LVL5:
  83              	.LVL6:
  84              	.LVL7:
  85              	.LVL8:
  86 0038 04BC     		pop	{r2}
  87 003a 9046     		mov	r8, r2
  88 003c F0BD     		pop	{r4, r5, r6, r7, pc}
  89              		.cfi_endproc
  90              	.LFE60:
  92              		.section	.text.DbgConsole_Init,"ax",%progbits
  93              		.align	1
  94              		.global	DbgConsole_Init
  95              		.syntax unified
  96              		.code	16
  97              		.thumb_func
  98              		.fpu softvfp
 100              	DbgConsole_Init:
 101              	.LFB53:
 104:../utilities/fsl_debug_console.c ****     assert(device != DEBUG_CONSOLE_DEVICE_TYPE_NONE);
 102              		.loc 1 104 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              	.LVL9:
 107 0000 10B5     		push	{r4, lr}
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 4, -8
 110              		.cfi_offset 14, -4
 111 0002 0C00     		movs	r4, r1
 112 0004 1100     		movs	r1, r2
 113              	.LVL10:
 107:../utilities/fsl_debug_console.c **** }
 114              		.loc 1 107 0
 115 0006 2200     		movs	r2, r4
 116              	.LVL11:
 117 0008 FFF7FEFF 		bl	LOG_Init
 118              	.LVL12:
 108:../utilities/fsl_debug_console.c **** 
 119              		.loc 1 108 0
 120              		@ sp needed
 121              	.LVL13:
 122 000c 10BD     		pop	{r4, pc}
 123              		.cfi_endproc
 124              	.LFE53:
 126              		.section	.text.DbgConsole_Deinit,"ax",%progbits
 127              		.align	1
 128              		.global	DbgConsole_Deinit
 129              		.syntax unified
 130              		.code	16
 131              		.thumb_func
 132              		.fpu softvfp
 134              	DbgConsole_Deinit:
 135              	.LFB54:
 112:../utilities/fsl_debug_console.c ****     /* LOG deinit */
 136              		.loc 1 112 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 10B5     		push	{r4, lr}
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 4, -8
 143              		.cfi_offset 14, -4
 114:../utilities/fsl_debug_console.c **** 
 144              		.loc 1 114 0
 145 0002 FFF7FEFF 		bl	LOG_Deinit
 146              	.LVL14:
 117:../utilities/fsl_debug_console.c **** 
 147              		.loc 1 117 0
 148 0006 0020     		movs	r0, #0
 149              		@ sp needed
 150 0008 10BD     		pop	{r4, pc}
 151              		.cfi_endproc
 152              	.LFE54:
 154              		.section	.text.DbgConsole_Flush,"ax",%progbits
 155              		.align	1
 156              		.global	DbgConsole_Flush
 157              		.syntax unified
 158              		.code	16
 159              		.thumb_func
 160              		.fpu softvfp
 162              	DbgConsole_Flush:
 163              	.LFB55:
 120:../utilities/fsl_debug_console.c ****     /* wait log and io idle */
 164              		.loc 1 120 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 4, -8
 171              		.cfi_offset 14, -4
 122:../utilities/fsl_debug_console.c **** }
 172              		.loc 1 122 0
 173 0002 FFF7FEFF 		bl	LOG_WaitIdle
 174              	.LVL15:
 123:../utilities/fsl_debug_console.c **** 
 175              		.loc 1 123 0
 176              		@ sp needed
 177 0006 10BD     		pop	{r4, pc}
 178              		.cfi_endproc
 179              	.LFE55:
 181              		.section	.text.DbgConsole_Printf,"ax",%progbits
 182              		.align	1
 183              		.global	DbgConsole_Printf
 184              		.syntax unified
 185              		.code	16
 186              		.thumb_func
 187              		.fpu softvfp
 189              	DbgConsole_Printf:
 190              	.LFB56:
 128:../utilities/fsl_debug_console.c ****     va_list ap;
 191              		.loc 1 128 0
 192              		.cfi_startproc
 193              		@ args = 4, pretend = 16, frame = 136
 194              		@ frame_needed = 0, uses_anonymous_args = 1
 195              	.LVL16:
 196 0000 0FB4     		push	{r0, r1, r2, r3}
 197              		.cfi_def_cfa_offset 16
 198 0002 30B5     		push	{r4, r5, lr}
 199              		.cfi_def_cfa_offset 28
 200              		.cfi_offset 4, -28
 201              		.cfi_offset 5, -24
 202              		.cfi_offset 14, -20
 203 0004 A3B0     		sub	sp, sp, #140
 204              		.cfi_def_cfa_offset 168
 205 0006 26AC     		add	r4, sp, #152
 206 0008 20CC     		ldmia	r4!, {r5}
 207              	.LVL17:
 131:../utilities/fsl_debug_console.c **** 
 208              		.loc 1 131 0
 209 000a 8022     		movs	r2, #128
 210 000c 0021     		movs	r1, #0
 211 000e 01A8     		add	r0, sp, #4
 212 0010 FFF7FEFF 		bl	memset
 213              	.LVL18:
 133:../utilities/fsl_debug_console.c ****     /* format print log first */
 214              		.loc 1 133 0
 215 0014 2194     		str	r4, [sp, #132]
 135:../utilities/fsl_debug_console.c ****     /* print log */
 216              		.loc 1 135 0
 217 0016 074B     		ldr	r3, .L10
 218 0018 01AA     		add	r2, sp, #4
 219 001a 2100     		movs	r1, r4
 220 001c 2800     		movs	r0, r5
 221 001e FFF7FEFF 		bl	StrFormatPrintf
 222              	.LVL19:
 223 0022 0100     		movs	r1, r0
 224              	.LVL20:
 137:../utilities/fsl_debug_console.c **** 
 225              		.loc 1 137 0
 226 0024 01A8     		add	r0, sp, #4
 227              	.LVL21:
 228 0026 FFF7FEFF 		bl	LOG_Push
 229              	.LVL22:
 142:../utilities/fsl_debug_console.c **** 
 230              		.loc 1 142 0
 231 002a 23B0     		add	sp, sp, #140
 232              		@ sp needed
 233 002c 30BC     		pop	{r4, r5}
 234 002e 08BC     		pop	{r3}
 235 0030 04B0     		add	sp, sp, #16
 236 0032 1847     		bx	r3
 237              	.L11:
 238              		.align	2
 239              	.L10:
 240 0034 00000000 		.word	DbgConsole_RelocateLog
 241              		.cfi_endproc
 242              	.LFE56:
 244              		.section	.text.DbgConsole_Putchar,"ax",%progbits
 245              		.align	1
 246              		.global	DbgConsole_Putchar
 247              		.syntax unified
 248              		.code	16
 249              		.thumb_func
 250              		.fpu softvfp
 252              	DbgConsole_Putchar:
 253              	.LFB57:
 146:../utilities/fsl_debug_console.c ****     /* print char */
 254              		.loc 1 146 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 8
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              	.LVL23:
 259 0000 00B5     		push	{lr}
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 14, -4
 262 0002 83B0     		sub	sp, sp, #12
 263              		.cfi_def_cfa_offset 16
 264 0004 0190     		str	r0, [sp, #4]
 148:../utilities/fsl_debug_console.c **** }
 265              		.loc 1 148 0
 266 0006 0121     		movs	r1, #1
 267 0008 01A8     		add	r0, sp, #4
 268              	.LVL24:
 269 000a FFF7FEFF 		bl	LOG_Push
 270              	.LVL25:
 149:../utilities/fsl_debug_console.c **** 
 271              		.loc 1 149 0
 272 000e 03B0     		add	sp, sp, #12
 273              		@ sp needed
 274 0010 00BD     		pop	{pc}
 275              		.cfi_endproc
 276              	.LFE57:
 278              		.section	.text.DbgConsole_Scanf,"ax",%progbits
 279              		.align	1
 280              		.global	DbgConsole_Scanf
 281              		.syntax unified
 282              		.code	16
 283              		.thumb_func
 284              		.fpu softvfp
 286              	DbgConsole_Scanf:
 287              	.LFB58:
 153:../utilities/fsl_debug_console.c ****     va_list ap;
 288              		.loc 1 153 0
 289              		.cfi_startproc
 290              		@ args = 4, pretend = 16, frame = 32
 291              		@ frame_needed = 0, uses_anonymous_args = 1
 292              	.LVL26:
 293 0000 0FB4     		push	{r0, r1, r2, r3}
 294              		.cfi_def_cfa_offset 16
 295 0002 30B5     		push	{r4, r5, lr}
 296              		.cfi_def_cfa_offset 28
 297              		.cfi_offset 4, -28
 298              		.cfi_offset 5, -24
 299              		.cfi_offset 14, -20
 300 0004 89B0     		sub	sp, sp, #36
 301              		.cfi_def_cfa_offset 64
 302 0006 0CAC     		add	r4, sp, #48
 303 0008 20CC     		ldmia	r4!, {r5}
 156:../utilities/fsl_debug_console.c **** 
 304              		.loc 1 156 0
 305 000a 1522     		movs	r2, #21
 306 000c 0021     		movs	r1, #0
 307 000e 01A8     		add	r0, sp, #4
 308 0010 FFF7FEFF 		bl	memset
 309              	.LVL27:
 159:../utilities/fsl_debug_console.c ****     /* get va_list */
 310              		.loc 1 159 0
 311 0014 1421     		movs	r1, #20
 312 0016 01A8     		add	r0, sp, #4
 313 0018 FFF7FEFF 		bl	LOG_ReadLine
 314              	.LVL28:
 161:../utilities/fsl_debug_console.c ****     /* format scanf log */
 315              		.loc 1 161 0
 316 001c 0794     		str	r4, [sp, #28]
 163:../utilities/fsl_debug_console.c **** 
 317              		.loc 1 163 0
 318 001e 2200     		movs	r2, r4
 319 0020 2900     		movs	r1, r5
 320 0022 01A8     		add	r0, sp, #4
 321 0024 FFF7FEFF 		bl	StrFormatScanf
 322              	.LVL29:
 168:../utilities/fsl_debug_console.c **** 
 323              		.loc 1 168 0
 324 0028 09B0     		add	sp, sp, #36
 325              		@ sp needed
 326 002a 30BC     		pop	{r4, r5}
 327 002c 08BC     		pop	{r3}
 328 002e 04B0     		add	sp, sp, #16
 329 0030 1847     		bx	r3
 330              		.cfi_endproc
 331              	.LFE58:
 333              		.section	.text.DbgConsole_Getchar,"ax",%progbits
 334              		.align	1
 335              		.global	DbgConsole_Getchar
 336              		.syntax unified
 337              		.code	16
 338              		.thumb_func
 339              		.fpu softvfp
 341              	DbgConsole_Getchar:
 342              	.LFB59:
 184:../utilities/fsl_debug_console.c ****     uint8_t ch;
 343              		.loc 1 184 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 8
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347 0000 10B5     		push	{r4, lr}
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 4, -8
 350              		.cfi_offset 14, -4
 351 0002 82B0     		sub	sp, sp, #8
 352              		.cfi_def_cfa_offset 16
 188:../utilities/fsl_debug_console.c **** 
 353              		.loc 1 188 0
 354 0004 6B46     		mov	r3, sp
 355 0006 DC1D     		adds	r4, r3, #7
 356 0008 2000     		movs	r0, r4
 357 000a FFF7FEFF 		bl	LOG_ReadCharacter
 358              	.LVL30:
 190:../utilities/fsl_debug_console.c **** }
 359              		.loc 1 190 0
 360 000e 2078     		ldrb	r0, [r4]
 191:../utilities/fsl_debug_console.c **** 
 361              		.loc 1 191 0
 362 0010 02B0     		add	sp, sp, #8
 363              		@ sp needed
 364 0012 10BD     		pop	{r4, pc}
 365              		.cfi_endproc
 366              	.LFE59:
 368              		.section	.text._write,"ax",%progbits
 369              		.align	1
 370              		.weak	_write
 371              		.syntax unified
 372              		.code	16
 373              		.thumb_func
 374              		.fpu softvfp
 376              	_write:
 377              	.LFB61:
 209:../utilities/fsl_debug_console.c **** 
 210:../utilities/fsl_debug_console.c **** #endif /* SDK_DEBUGCONSOLE */
 211:../utilities/fsl_debug_console.c **** /*************Code to support toolchain's printf, scanf *******************************/
 212:../utilities/fsl_debug_console.c **** /* These function __write and __read is used to support IAR toolchain to printf and scanf*/
 213:../utilities/fsl_debug_console.c **** #if (defined(__ICCARM__))
 214:../utilities/fsl_debug_console.c **** #pragma weak __write
 215:../utilities/fsl_debug_console.c **** size_t __write(int handle, const unsigned char *buffer, size_t size)
 216:../utilities/fsl_debug_console.c **** {
 217:../utilities/fsl_debug_console.c ****     if (buffer == 0)
 218:../utilities/fsl_debug_console.c ****     {
 219:../utilities/fsl_debug_console.c ****         /*
 220:../utilities/fsl_debug_console.c ****          * This means that we should flush internal buffers.  Since we don't we just return.
 221:../utilities/fsl_debug_console.c ****          * (Remember, "handle" == -1 means that all handles should be flushed.)
 222:../utilities/fsl_debug_console.c ****          */
 223:../utilities/fsl_debug_console.c ****         return 0;
 224:../utilities/fsl_debug_console.c ****     }
 225:../utilities/fsl_debug_console.c **** 
 226:../utilities/fsl_debug_console.c ****     /* This function only writes to "standard out" and "standard err" for all other file handles it
 227:../utilities/fsl_debug_console.c ****     if ((handle != 1) && (handle != 2))
 228:../utilities/fsl_debug_console.c ****     {
 229:../utilities/fsl_debug_console.c ****         return ((size_t)-1);
 230:../utilities/fsl_debug_console.c ****     }
 231:../utilities/fsl_debug_console.c **** 
 232:../utilities/fsl_debug_console.c ****     /* Send data. */
 233:../utilities/fsl_debug_console.c ****     LOG_Push((uint8_t *)buffer, 1U);
 234:../utilities/fsl_debug_console.c **** 
 235:../utilities/fsl_debug_console.c ****     return size;
 236:../utilities/fsl_debug_console.c **** }
 237:../utilities/fsl_debug_console.c **** 
 238:../utilities/fsl_debug_console.c **** #pragma weak __read
 239:../utilities/fsl_debug_console.c **** size_t __read(int handle, unsigned char *buffer, size_t size)
 240:../utilities/fsl_debug_console.c **** {
 241:../utilities/fsl_debug_console.c ****     /* This function only reads from "standard in", for all other file  handles it returns failure.
 242:../utilities/fsl_debug_console.c ****     if (handle != 0)
 243:../utilities/fsl_debug_console.c ****     {
 244:../utilities/fsl_debug_console.c ****         return ((size_t)-1);
 245:../utilities/fsl_debug_console.c ****     }
 246:../utilities/fsl_debug_console.c **** 
 247:../utilities/fsl_debug_console.c ****     /* Receive data.*/
 248:../utilities/fsl_debug_console.c ****     LOG_ReadLine(buffer, size);
 249:../utilities/fsl_debug_console.c **** 
 250:../utilities/fsl_debug_console.c ****     return size;
 251:../utilities/fsl_debug_console.c **** }
 252:../utilities/fsl_debug_console.c **** 
 253:../utilities/fsl_debug_console.c **** /* support LPC Xpresso with RedLib */
 254:../utilities/fsl_debug_console.c **** #elif(defined(__REDLIB__))
 255:../utilities/fsl_debug_console.c **** 
 256:../utilities/fsl_debug_console.c **** #if (!SDK_DEBUGCONSOLE) && (defined(SDK_DEBUGCONSOLE_UART))
 257:../utilities/fsl_debug_console.c **** int __attribute__((weak)) __sys_write(int handle, char *buffer, int size)
 258:../utilities/fsl_debug_console.c **** {
 259:../utilities/fsl_debug_console.c ****     if (buffer == 0)
 260:../utilities/fsl_debug_console.c ****     {
 261:../utilities/fsl_debug_console.c ****         /* return -1 if error. */
 262:../utilities/fsl_debug_console.c ****         return -1;
 263:../utilities/fsl_debug_console.c ****     }
 264:../utilities/fsl_debug_console.c **** 
 265:../utilities/fsl_debug_console.c ****     /* This function only writes to "standard out" and "standard err" for all other file handles it
 266:../utilities/fsl_debug_console.c ****     if ((handle != 1) && (handle != 2))
 267:../utilities/fsl_debug_console.c ****     {
 268:../utilities/fsl_debug_console.c ****         return -1;
 269:../utilities/fsl_debug_console.c ****     }
 270:../utilities/fsl_debug_console.c **** 
 271:../utilities/fsl_debug_console.c ****     /* Send data. */
 272:../utilities/fsl_debug_console.c ****     LOG_Push((uint8_t *)buffer, size);
 273:../utilities/fsl_debug_console.c **** 
 274:../utilities/fsl_debug_console.c ****     return 0;
 275:../utilities/fsl_debug_console.c **** }
 276:../utilities/fsl_debug_console.c **** 
 277:../utilities/fsl_debug_console.c **** int __attribute__((weak)) __sys_readc(void)
 278:../utilities/fsl_debug_console.c **** {
 279:../utilities/fsl_debug_console.c ****     char tmp;
 280:../utilities/fsl_debug_console.c **** 
 281:../utilities/fsl_debug_console.c ****     /* Receive data. */
 282:../utilities/fsl_debug_console.c ****     LOG_ReadCharacter((uint8_t *)&tmp);
 283:../utilities/fsl_debug_console.c **** 
 284:../utilities/fsl_debug_console.c ****     return tmp;
 285:../utilities/fsl_debug_console.c **** }
 286:../utilities/fsl_debug_console.c **** #endif
 287:../utilities/fsl_debug_console.c **** 
 288:../utilities/fsl_debug_console.c **** /* These function __write and __read is used to support ARM_GCC, KDS, Atollic toolchains to printf 
 289:../utilities/fsl_debug_console.c **** #elif(defined(__GNUC__))
 290:../utilities/fsl_debug_console.c **** 
 291:../utilities/fsl_debug_console.c **** #if ((defined(__GNUC__) && (!defined(__MCUXPRESSO))) || \
 292:../utilities/fsl_debug_console.c ****      (defined(__MCUXPRESSO) && (!SDK_DEBUGCONSOLE) && (defined(SDK_DEBUGCONSOLE_UART))))
 293:../utilities/fsl_debug_console.c **** 
 294:../utilities/fsl_debug_console.c **** int __attribute__((weak)) _write(int handle, char *buffer, int size)
 295:../utilities/fsl_debug_console.c **** {
 378              		.loc 1 295 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              	.LVL31:
 383 0000 10B5     		push	{r4, lr}
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 4, -8
 386              		.cfi_offset 14, -4
 387 0002 0B00     		movs	r3, r1
 388 0004 1400     		movs	r4, r2
 296:../utilities/fsl_debug_console.c ****     if (buffer == 0)
 389              		.loc 1 296 0
 390 0006 0029     		cmp	r1, #0
 391 0008 08D0     		beq	.L17
 297:../utilities/fsl_debug_console.c ****     {
 298:../utilities/fsl_debug_console.c ****         /* return -1 if error. */
 299:../utilities/fsl_debug_console.c ****         return -1;
 300:../utilities/fsl_debug_console.c ****     }
 301:../utilities/fsl_debug_console.c **** 
 302:../utilities/fsl_debug_console.c ****     /* This function only writes to "standard out" and "standard err" for all other file handles it
 303:../utilities/fsl_debug_console.c ****     if ((handle != 1) && (handle != 2))
 392              		.loc 1 303 0
 393 000a 0138     		subs	r0, r0, #1
 394              	.LVL32:
 395 000c 0128     		cmp	r0, #1
 396 000e 08D8     		bhi	.L18
 304:../utilities/fsl_debug_console.c ****     {
 305:../utilities/fsl_debug_console.c ****         return -1;
 306:../utilities/fsl_debug_console.c ****     }
 307:../utilities/fsl_debug_console.c **** 
 308:../utilities/fsl_debug_console.c ****     /* Send data. */
 309:../utilities/fsl_debug_console.c ****     LOG_Push((uint8_t *)buffer, size);
 397              		.loc 1 309 0
 398 0010 1100     		movs	r1, r2
 399              	.LVL33:
 400 0012 1800     		movs	r0, r3
 401              	.LVL34:
 402 0014 FFF7FEFF 		bl	LOG_Push
 403              	.LVL35:
 310:../utilities/fsl_debug_console.c **** 
 311:../utilities/fsl_debug_console.c ****     return size;
 404              		.loc 1 311 0
 405 0018 2000     		movs	r0, r4
 406              	.L15:
 312:../utilities/fsl_debug_console.c **** }
 407              		.loc 1 312 0
 408              		@ sp needed
 409              	.LVL36:
 410 001a 10BD     		pop	{r4, pc}
 411              	.LVL37:
 412              	.L17:
 299:../utilities/fsl_debug_console.c ****     }
 413              		.loc 1 299 0
 414 001c 0120     		movs	r0, #1
 415              	.LVL38:
 416 001e 4042     		rsbs	r0, r0, #0
 417 0020 FBE7     		b	.L15
 418              	.L18:
 305:../utilities/fsl_debug_console.c ****     }
 419              		.loc 1 305 0
 420 0022 0120     		movs	r0, #1
 421 0024 4042     		rsbs	r0, r0, #0
 422 0026 F8E7     		b	.L15
 423              		.cfi_endproc
 424              	.LFE61:
 426              		.section	.text._read,"ax",%progbits
 427              		.align	1
 428              		.weak	_read
 429              		.syntax unified
 430              		.code	16
 431              		.thumb_func
 432              		.fpu softvfp
 434              	_read:
 435              	.LFB62:
 313:../utilities/fsl_debug_console.c **** 
 314:../utilities/fsl_debug_console.c **** int __attribute__((weak)) _read(int handle, char *buffer, int size)
 315:../utilities/fsl_debug_console.c **** {
 436              		.loc 1 315 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              	.LVL39:
 441 0000 10B5     		push	{r4, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 4, -8
 444              		.cfi_offset 14, -4
 445 0002 0B00     		movs	r3, r1
 316:../utilities/fsl_debug_console.c ****     /* This function only reads from "standard in", for all other file handles it returns failure. 
 317:../utilities/fsl_debug_console.c ****     if (handle != 0)
 446              		.loc 1 317 0
 447 0004 0028     		cmp	r0, #0
 448 0006 04D1     		bne	.L21
 318:../utilities/fsl_debug_console.c ****     {
 319:../utilities/fsl_debug_console.c ****         return -1;
 320:../utilities/fsl_debug_console.c ****     }
 321:../utilities/fsl_debug_console.c **** 
 322:../utilities/fsl_debug_console.c ****     /* Receive data. */
 323:../utilities/fsl_debug_console.c ****     return LOG_ReadLine((uint8_t *)buffer, size);
 449              		.loc 1 323 0
 450 0008 1100     		movs	r1, r2
 451              	.LVL40:
 452 000a 1800     		movs	r0, r3
 453              	.LVL41:
 454 000c FFF7FEFF 		bl	LOG_ReadLine
 455              	.LVL42:
 456              	.L19:
 324:../utilities/fsl_debug_console.c **** }
 457              		.loc 1 324 0
 458              		@ sp needed
 459 0010 10BD     		pop	{r4, pc}
 460              	.LVL43:
 461              	.L21:
 319:../utilities/fsl_debug_console.c ****     }
 462              		.loc 1 319 0
 463 0012 0120     		movs	r0, #1
 464              	.LVL44:
 465 0014 4042     		rsbs	r0, r0, #0
 466 0016 FBE7     		b	.L19
 467              		.cfi_endproc
 468              	.LFE62:
 470              		.text
 471              	.Letext0:
 472              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h"
 473              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 474              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 475              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 476              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 477              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 478              		.file 8 "<built-in>"
 479              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdlib.h"
 480              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 481              		.file 11 "../CMSIS/system_MKL17Z4.h"
 482              		.file 12 "../drivers/fsl_common.h"
 483              		.file 13 "../drivers/fsl_clock.h"
 484              		.file 14 "../utilities/fsl_log.h"
 485              		.file 15 "../utilities/fsl_str.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_debug_console.c
     /tmp/ccRV4k0L.s:16     .text.DbgConsole_RelocateLog:0000000000000000 $t
     /tmp/ccRV4k0L.s:22     .text.DbgConsole_RelocateLog:0000000000000000 DbgConsole_RelocateLog
     /tmp/ccRV4k0L.s:93     .text.DbgConsole_Init:0000000000000000 $t
     /tmp/ccRV4k0L.s:100    .text.DbgConsole_Init:0000000000000000 DbgConsole_Init
     /tmp/ccRV4k0L.s:127    .text.DbgConsole_Deinit:0000000000000000 $t
     /tmp/ccRV4k0L.s:134    .text.DbgConsole_Deinit:0000000000000000 DbgConsole_Deinit
     /tmp/ccRV4k0L.s:155    .text.DbgConsole_Flush:0000000000000000 $t
     /tmp/ccRV4k0L.s:162    .text.DbgConsole_Flush:0000000000000000 DbgConsole_Flush
     /tmp/ccRV4k0L.s:182    .text.DbgConsole_Printf:0000000000000000 $t
     /tmp/ccRV4k0L.s:189    .text.DbgConsole_Printf:0000000000000000 DbgConsole_Printf
     /tmp/ccRV4k0L.s:240    .text.DbgConsole_Printf:0000000000000034 $d
     /tmp/ccRV4k0L.s:245    .text.DbgConsole_Putchar:0000000000000000 $t
     /tmp/ccRV4k0L.s:252    .text.DbgConsole_Putchar:0000000000000000 DbgConsole_Putchar
     /tmp/ccRV4k0L.s:279    .text.DbgConsole_Scanf:0000000000000000 $t
     /tmp/ccRV4k0L.s:286    .text.DbgConsole_Scanf:0000000000000000 DbgConsole_Scanf
     /tmp/ccRV4k0L.s:334    .text.DbgConsole_Getchar:0000000000000000 $t
     /tmp/ccRV4k0L.s:341    .text.DbgConsole_Getchar:0000000000000000 DbgConsole_Getchar
     /tmp/ccRV4k0L.s:369    .text._write:0000000000000000 $t
     /tmp/ccRV4k0L.s:376    .text._write:0000000000000000 _write
     /tmp/ccRV4k0L.s:427    .text._read:0000000000000000 $t
     /tmp/ccRV4k0L.s:434    .text._read:0000000000000000 _read

UNDEFINED SYMBOLS
LOG_Push
LOG_Init
LOG_Deinit
LOG_WaitIdle
memset
StrFormatPrintf
LOG_ReadLine
StrFormatScanf
LOG_ReadCharacter
