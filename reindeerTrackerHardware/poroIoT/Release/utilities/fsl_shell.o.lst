   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_shell.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HelpCommand,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	HelpCommand:
  23              	.LFB55:
  24              		.file 1 "../utilities/fsl_shell.c"
   1:../utilities/fsl_shell.c **** /*
   2:../utilities/fsl_shell.c ****  * The Clear BSD License
   3:../utilities/fsl_shell.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../utilities/fsl_shell.c ****  * Copyright 2016-2017 NXP
   5:../utilities/fsl_shell.c ****  * All rights reserved.
   6:../utilities/fsl_shell.c ****  *
   7:../utilities/fsl_shell.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../utilities/fsl_shell.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../utilities/fsl_shell.c ****  * that the following conditions are met:
  10:../utilities/fsl_shell.c ****  *
  11:../utilities/fsl_shell.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../utilities/fsl_shell.c ****  *   of conditions and the following disclaimer.
  13:../utilities/fsl_shell.c ****  *
  14:../utilities/fsl_shell.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../utilities/fsl_shell.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../utilities/fsl_shell.c ****  *   other materials provided with the distribution.
  17:../utilities/fsl_shell.c ****  *
  18:../utilities/fsl_shell.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../utilities/fsl_shell.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../utilities/fsl_shell.c ****  *   software without specific prior written permission.
  21:../utilities/fsl_shell.c ****  *
  22:../utilities/fsl_shell.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../utilities/fsl_shell.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../utilities/fsl_shell.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../utilities/fsl_shell.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../utilities/fsl_shell.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../utilities/fsl_shell.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../utilities/fsl_shell.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../utilities/fsl_shell.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../utilities/fsl_shell.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../utilities/fsl_shell.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../utilities/fsl_shell.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../utilities/fsl_shell.c ****  *
  34:../utilities/fsl_shell.c ****  * POSIX getopt for Windows
  35:../utilities/fsl_shell.c ****  * Code given out at the 1985 UNIFORUM conference in Dallas.
  36:../utilities/fsl_shell.c ****  *
  37:../utilities/fsl_shell.c ****  * From std-unix@ut-sally.UUCP (Moderator, John Quarterman) Sun Nov  3 14:34:15 1985
  38:../utilities/fsl_shell.c ****  * Relay-Version: version B 2.10.3 4.3bsd-beta 6/6/85; site gatech.CSNET
  39:../utilities/fsl_shell.c ****  * Posting-Version: version B 2.10.2 9/18/84; site ut-sally.UUCP
  40:../utilities/fsl_shell.c ****  * Path: gatech!akgua!mhuxv!mhuxt!mhuxr!ulysses!allegra!mit-eddie!genrad!panda!talcott!harvard!seis
  41:../utilities/fsl_shell.c ****  * From: std-unix@ut-sally.UUCP (Moderator, John Quarterman)
  42:../utilities/fsl_shell.c ****  * Newsgroups: mod.std.unix
  43:../utilities/fsl_shell.c ****  * Subject: public domain AT&T getopt source
  44:../utilities/fsl_shell.c ****  * Message-ID: <3352@ut-sally.UUCP>
  45:../utilities/fsl_shell.c ****  * Date: 3 Nov 85 19:34:15 GMT
  46:../utilities/fsl_shell.c ****  * Date-Received: 4 Nov 85 12:25:09 GMT
  47:../utilities/fsl_shell.c ****  * Organization: IEEE/P1003 Portable Operating System Environment Committee
  48:../utilities/fsl_shell.c ****  * Lines: 91
  49:../utilities/fsl_shell.c ****  * Approved: jsq@ut-sally.UUC
  50:../utilities/fsl_shell.c ****  * Here's something you've all been waiting for:  the AT&T public domain
  51:../utilities/fsl_shell.c ****  * source for getopt(3).  It is the code which was given out at the 1985
  52:../utilities/fsl_shell.c ****  * UNIFORUM conference in Dallas.  I obtained it by electronic mail
  53:../utilities/fsl_shell.c ****  * directly from AT&T.  The people there assure me that it is indeed
  54:../utilities/fsl_shell.c ****  * in the public domain
  55:../utilities/fsl_shell.c ****  * There is no manual page.  That is because the one they gave out at
  56:../utilities/fsl_shell.c ****  * UNIFORUM was slightly different from the current System V Release 2
  57:../utilities/fsl_shell.c ****  * manual page.  The difference apparently involved a note about the
  58:../utilities/fsl_shell.c ****  * famous rules 5 and 6, recommending using white space between an option
  59:../utilities/fsl_shell.c ****  * and its first argument, and not grouping options that have arguments.
  60:../utilities/fsl_shell.c ****  * Getopt itself is currently lenient about both of these things White
  61:../utilities/fsl_shell.c ****  * space is allowed, but not mandatory, and the last option in a group can
  62:../utilities/fsl_shell.c ****  * have an argument.  That particular version of the man page evidently
  63:../utilities/fsl_shell.c ****  * has no official existence, and my source at AT&T did not send a copy.
  64:../utilities/fsl_shell.c ****  * The current SVR2 man page reflects the actual behavor of this getopt.
  65:../utilities/fsl_shell.c ****  * However, I am not about to post a copy of anything licensed by AT&T.
  66:../utilities/fsl_shell.c ****  */
  67:../utilities/fsl_shell.c **** 
  68:../utilities/fsl_shell.c **** #include <assert.h>
  69:../utilities/fsl_shell.c **** #include "fsl_shell.h"
  70:../utilities/fsl_shell.c **** 
  71:../utilities/fsl_shell.c **** /*******************************************************************************
  72:../utilities/fsl_shell.c ****  * Definitions
  73:../utilities/fsl_shell.c ****  ******************************************************************************/
  74:../utilities/fsl_shell.c **** #define KEY_ESC (0x1BU)
  75:../utilities/fsl_shell.c **** #define KET_DEL (0x7FU)
  76:../utilities/fsl_shell.c **** 
  77:../utilities/fsl_shell.c **** /*******************************************************************************
  78:../utilities/fsl_shell.c ****  * Prototypes
  79:../utilities/fsl_shell.c ****  ******************************************************************************/
  80:../utilities/fsl_shell.c **** static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv); /*!< help command
  81:../utilities/fsl_shell.c **** 
  82:../utilities/fsl_shell.c **** static int32_t ExitCommand(p_shell_context_t context, int32_t argc, char **argv); /*!< exit command
  83:../utilities/fsl_shell.c **** 
  84:../utilities/fsl_shell.c **** static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS]); /*!< parse lin
  85:../utilities/fsl_shell.c **** 
  86:../utilities/fsl_shell.c **** static int32_t StrCompare(const char *str1, const char *str2, int32_t count); /*!< compare string c
  87:../utilities/fsl_shell.c **** 
  88:../utilities/fsl_shell.c **** static void ProcessCommand(p_shell_context_t context, const char *cmd); /*!< process a command */
  89:../utilities/fsl_shell.c **** 
  90:../utilities/fsl_shell.c **** static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos); /*!< get commands histo
  91:../utilities/fsl_shell.c **** 
  92:../utilities/fsl_shell.c **** static void AutoComplete(p_shell_context_t context); /*!< auto complete command */
  93:../utilities/fsl_shell.c **** 
  94:../utilities/fsl_shell.c **** static uint8_t GetChar(p_shell_context_t context); /*!< get a char from communication interface */
  95:../utilities/fsl_shell.c **** 
  96:../utilities/fsl_shell.c **** static int32_t StrLen(const char *str); /*!< get string length */
  97:../utilities/fsl_shell.c **** 
  98:../utilities/fsl_shell.c **** static char *StrCopy(char *dest, const char *src, int32_t count); /*!< string copy */
  99:../utilities/fsl_shell.c **** 
 100:../utilities/fsl_shell.c **** /*******************************************************************************
 101:../utilities/fsl_shell.c ****  * Variables
 102:../utilities/fsl_shell.c ****  ******************************************************************************/
 103:../utilities/fsl_shell.c **** static const shell_command_context_t xHelpCommand = {"help", "\r\n\"help\": Lists all the registere
 104:../utilities/fsl_shell.c ****                                                      HelpCommand, 0};
 105:../utilities/fsl_shell.c **** 
 106:../utilities/fsl_shell.c **** static const shell_command_context_t xExitCommand = {"exit", "\r\n\"exit\": Exit program\r\n", Exit
 107:../utilities/fsl_shell.c **** 
 108:../utilities/fsl_shell.c **** static shell_command_context_list_t g_RegisteredCommands;
 109:../utilities/fsl_shell.c **** 
 110:../utilities/fsl_shell.c **** static char g_paramBuffer[SHELL_BUFFER_SIZE];
 111:../utilities/fsl_shell.c **** 
 112:../utilities/fsl_shell.c **** /*******************************************************************************
 113:../utilities/fsl_shell.c ****  * Code
 114:../utilities/fsl_shell.c ****  ******************************************************************************/
 115:../utilities/fsl_shell.c **** void SHELL_Init(
 116:../utilities/fsl_shell.c ****     p_shell_context_t context, send_data_cb_t send_cb, recv_data_cb_t recv_cb, printf_data_t shell_
 117:../utilities/fsl_shell.c **** {
 118:../utilities/fsl_shell.c ****     assert(send_cb != NULL);
 119:../utilities/fsl_shell.c ****     assert(recv_cb != NULL);
 120:../utilities/fsl_shell.c ****     assert(prompt != NULL);
 121:../utilities/fsl_shell.c ****     assert(shell_printf != NULL);
 122:../utilities/fsl_shell.c **** 
 123:../utilities/fsl_shell.c ****     /* Memset for context */
 124:../utilities/fsl_shell.c ****     memset(context, 0, sizeof(shell_context_struct));
 125:../utilities/fsl_shell.c ****     context->send_data_func = send_cb;
 126:../utilities/fsl_shell.c ****     context->recv_data_func = recv_cb;
 127:../utilities/fsl_shell.c ****     context->printf_data_func = shell_printf;
 128:../utilities/fsl_shell.c ****     context->prompt = prompt;
 129:../utilities/fsl_shell.c **** 
 130:../utilities/fsl_shell.c ****     SHELL_RegisterCommand(&xHelpCommand);
 131:../utilities/fsl_shell.c ****     SHELL_RegisterCommand(&xExitCommand);
 132:../utilities/fsl_shell.c **** }
 133:../utilities/fsl_shell.c **** 
 134:../utilities/fsl_shell.c **** int32_t SHELL_Main(p_shell_context_t context)
 135:../utilities/fsl_shell.c **** {
 136:../utilities/fsl_shell.c ****     uint8_t ch;
 137:../utilities/fsl_shell.c ****     int32_t i;
 138:../utilities/fsl_shell.c **** 
 139:../utilities/fsl_shell.c ****     if (!context)
 140:../utilities/fsl_shell.c ****     {
 141:../utilities/fsl_shell.c ****         return -1;
 142:../utilities/fsl_shell.c ****     }
 143:../utilities/fsl_shell.c **** 
 144:../utilities/fsl_shell.c ****     context->exit = false;
 145:../utilities/fsl_shell.c ****     context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 146:../utilities/fsl_shell.c ****     context->printf_data_func("Copyright (c) 2017 NXP Semiconductor\r\n");
 147:../utilities/fsl_shell.c ****     context->printf_data_func(context->prompt);
 148:../utilities/fsl_shell.c **** 
 149:../utilities/fsl_shell.c ****     while (1)
 150:../utilities/fsl_shell.c ****     {
 151:../utilities/fsl_shell.c ****         if (context->exit)
 152:../utilities/fsl_shell.c ****         {
 153:../utilities/fsl_shell.c ****             break;
 154:../utilities/fsl_shell.c ****         }
 155:../utilities/fsl_shell.c ****         ch = GetChar(context);
 156:../utilities/fsl_shell.c ****         /* If error occured when getting a char, continue to receive a new char. */
 157:../utilities/fsl_shell.c ****         if ((uint8_t)(-1) == ch)
 158:../utilities/fsl_shell.c ****         {
 159:../utilities/fsl_shell.c ****             continue;
 160:../utilities/fsl_shell.c ****         }
 161:../utilities/fsl_shell.c ****         /* Special key */
 162:../utilities/fsl_shell.c ****         if (ch == KEY_ESC)
 163:../utilities/fsl_shell.c ****         {
 164:../utilities/fsl_shell.c ****             context->stat = kSHELL_Special;
 165:../utilities/fsl_shell.c ****             continue;
 166:../utilities/fsl_shell.c ****         }
 167:../utilities/fsl_shell.c ****         else if (context->stat == kSHELL_Special)
 168:../utilities/fsl_shell.c ****         {
 169:../utilities/fsl_shell.c ****             /* Function key */
 170:../utilities/fsl_shell.c ****             if (ch == '[')
 171:../utilities/fsl_shell.c ****             {
 172:../utilities/fsl_shell.c ****                 context->stat = kSHELL_Function;
 173:../utilities/fsl_shell.c ****                 continue;
 174:../utilities/fsl_shell.c ****             }
 175:../utilities/fsl_shell.c ****             context->stat = kSHELL_Normal;
 176:../utilities/fsl_shell.c ****         }
 177:../utilities/fsl_shell.c ****         else if (context->stat == kSHELL_Function)
 178:../utilities/fsl_shell.c ****         {
 179:../utilities/fsl_shell.c ****             context->stat = kSHELL_Normal;
 180:../utilities/fsl_shell.c **** 
 181:../utilities/fsl_shell.c ****             switch ((uint8_t)ch)
 182:../utilities/fsl_shell.c ****             {
 183:../utilities/fsl_shell.c ****                 /* History operation here */
 184:../utilities/fsl_shell.c ****                 case 'A': /* Up key */
 185:../utilities/fsl_shell.c ****                     GetHistoryCommand(context, context->hist_current);
 186:../utilities/fsl_shell.c ****                     if (context->hist_current < (context->hist_count - 1))
 187:../utilities/fsl_shell.c ****                     {
 188:../utilities/fsl_shell.c ****                         context->hist_current++;
 189:../utilities/fsl_shell.c ****                     }
 190:../utilities/fsl_shell.c ****                     break;
 191:../utilities/fsl_shell.c ****                 case 'B': /* Down key */
 192:../utilities/fsl_shell.c ****                     GetHistoryCommand(context, context->hist_current);
 193:../utilities/fsl_shell.c ****                     if (context->hist_current > 0)
 194:../utilities/fsl_shell.c ****                     {
 195:../utilities/fsl_shell.c ****                         context->hist_current--;
 196:../utilities/fsl_shell.c ****                     }
 197:../utilities/fsl_shell.c ****                     break;
 198:../utilities/fsl_shell.c ****                 case 'D': /* Left key */
 199:../utilities/fsl_shell.c ****                     if (context->c_pos)
 200:../utilities/fsl_shell.c ****                     {
 201:../utilities/fsl_shell.c ****                         context->printf_data_func("\b");
 202:../utilities/fsl_shell.c ****                         context->c_pos--;
 203:../utilities/fsl_shell.c ****                     }
 204:../utilities/fsl_shell.c ****                     break;
 205:../utilities/fsl_shell.c ****                 case 'C': /* Right key */
 206:../utilities/fsl_shell.c ****                     if (context->c_pos < context->l_pos)
 207:../utilities/fsl_shell.c ****                     {
 208:../utilities/fsl_shell.c ****                         context->printf_data_func("%c", context->line[context->c_pos]);
 209:../utilities/fsl_shell.c ****                         context->c_pos++;
 210:../utilities/fsl_shell.c ****                     }
 211:../utilities/fsl_shell.c ****                     break;
 212:../utilities/fsl_shell.c ****                 default:
 213:../utilities/fsl_shell.c ****                     break;
 214:../utilities/fsl_shell.c ****             }
 215:../utilities/fsl_shell.c ****             continue;
 216:../utilities/fsl_shell.c ****         }
 217:../utilities/fsl_shell.c ****         /* Handle tab key */
 218:../utilities/fsl_shell.c ****         else if (ch == '\t')
 219:../utilities/fsl_shell.c ****         {
 220:../utilities/fsl_shell.c **** #if SHELL_AUTO_COMPLETE
 221:../utilities/fsl_shell.c ****             /* Move the cursor to the beginning of line */
 222:../utilities/fsl_shell.c ****             for (i = 0; i < context->c_pos; i++)
 223:../utilities/fsl_shell.c ****             {
 224:../utilities/fsl_shell.c ****                 context->printf_data_func("\b");
 225:../utilities/fsl_shell.c ****             }
 226:../utilities/fsl_shell.c ****             /* Do auto complete */
 227:../utilities/fsl_shell.c ****             AutoComplete(context);
 228:../utilities/fsl_shell.c ****             /* Move position to end */
 229:../utilities/fsl_shell.c ****             context->c_pos = context->l_pos = StrLen(context->line);
 230:../utilities/fsl_shell.c **** #endif
 231:../utilities/fsl_shell.c ****             continue;
 232:../utilities/fsl_shell.c ****         }
 233:../utilities/fsl_shell.c **** #if SHELL_SEARCH_IN_HIST
 234:../utilities/fsl_shell.c ****         /* Search command in history */
 235:../utilities/fsl_shell.c ****         else if ((ch == '`') && (context->l_pos == 0) && (context->line[0] == 0x00))
 236:../utilities/fsl_shell.c ****         {
 237:../utilities/fsl_shell.c ****         }
 238:../utilities/fsl_shell.c **** #endif
 239:../utilities/fsl_shell.c ****         /* Handle backspace key */
 240:../utilities/fsl_shell.c ****         else if ((ch == KET_DEL) || (ch == '\b'))
 241:../utilities/fsl_shell.c ****         {
 242:../utilities/fsl_shell.c ****             /* There must be at last one char */
 243:../utilities/fsl_shell.c ****             if (context->c_pos == 0)
 244:../utilities/fsl_shell.c ****             {
 245:../utilities/fsl_shell.c ****                 continue;
 246:../utilities/fsl_shell.c ****             }
 247:../utilities/fsl_shell.c **** 
 248:../utilities/fsl_shell.c ****             context->l_pos--;
 249:../utilities/fsl_shell.c ****             context->c_pos--;
 250:../utilities/fsl_shell.c **** 
 251:../utilities/fsl_shell.c ****             if (context->l_pos > context->c_pos)
 252:../utilities/fsl_shell.c ****             {
 253:../utilities/fsl_shell.c ****                 memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 254:../utilities/fsl_shell.c ****                         context->l_pos - context->c_pos);
 255:../utilities/fsl_shell.c ****                 context->line[context->l_pos] = 0;
 256:../utilities/fsl_shell.c ****                 context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 257:../utilities/fsl_shell.c **** 
 258:../utilities/fsl_shell.c ****                 /* Reset position */
 259:../utilities/fsl_shell.c ****                 for (i = context->c_pos; i <= context->l_pos; i++)
 260:../utilities/fsl_shell.c ****                 {
 261:../utilities/fsl_shell.c ****                     context->printf_data_func("\b");
 262:../utilities/fsl_shell.c ****                 }
 263:../utilities/fsl_shell.c ****             }
 264:../utilities/fsl_shell.c ****             else /* Normal backspace operation */
 265:../utilities/fsl_shell.c ****             {
 266:../utilities/fsl_shell.c ****                 context->printf_data_func("\b \b");
 267:../utilities/fsl_shell.c ****                 context->line[context->l_pos] = 0;
 268:../utilities/fsl_shell.c ****             }
 269:../utilities/fsl_shell.c ****             continue;
 270:../utilities/fsl_shell.c ****         }
 271:../utilities/fsl_shell.c ****         else
 272:../utilities/fsl_shell.c ****         {
 273:../utilities/fsl_shell.c ****         }
 274:../utilities/fsl_shell.c **** 
 275:../utilities/fsl_shell.c ****         /* Input too long */
 276:../utilities/fsl_shell.c ****         if (context->l_pos >= (SHELL_BUFFER_SIZE - 1))
 277:../utilities/fsl_shell.c ****         {
 278:../utilities/fsl_shell.c ****             context->l_pos = 0;
 279:../utilities/fsl_shell.c ****         }
 280:../utilities/fsl_shell.c **** 
 281:../utilities/fsl_shell.c ****         /* Handle end of line, break */
 282:../utilities/fsl_shell.c ****         if ((ch == '\r') || (ch == '\n'))
 283:../utilities/fsl_shell.c ****         {
 284:../utilities/fsl_shell.c ****             static char endoflinechar = 0U;
 285:../utilities/fsl_shell.c **** 
 286:../utilities/fsl_shell.c ****             if ((endoflinechar != 0U) && (endoflinechar != ch))
 287:../utilities/fsl_shell.c ****             {
 288:../utilities/fsl_shell.c ****                 continue;
 289:../utilities/fsl_shell.c ****             }
 290:../utilities/fsl_shell.c ****             else
 291:../utilities/fsl_shell.c ****             {
 292:../utilities/fsl_shell.c ****                 endoflinechar = ch;
 293:../utilities/fsl_shell.c ****                 context->printf_data_func("\r\n");
 294:../utilities/fsl_shell.c ****                 /* If command line is NULL, will start a new transfer */
 295:../utilities/fsl_shell.c ****                 if (0U == StrLen(context->line))
 296:../utilities/fsl_shell.c ****                 {
 297:../utilities/fsl_shell.c ****                     context->printf_data_func(context->prompt);
 298:../utilities/fsl_shell.c ****                     continue;
 299:../utilities/fsl_shell.c ****                 }
 300:../utilities/fsl_shell.c ****                 ProcessCommand(context, context->line);
 301:../utilities/fsl_shell.c ****                 /* Reset all params */
 302:../utilities/fsl_shell.c ****                 context->c_pos = context->l_pos = 0;
 303:../utilities/fsl_shell.c ****                 context->hist_current = 0;
 304:../utilities/fsl_shell.c ****                 context->printf_data_func(context->prompt);
 305:../utilities/fsl_shell.c ****                 memset(context->line, 0, sizeof(context->line));
 306:../utilities/fsl_shell.c ****                 continue;
 307:../utilities/fsl_shell.c ****             }
 308:../utilities/fsl_shell.c ****         }
 309:../utilities/fsl_shell.c **** 
 310:../utilities/fsl_shell.c ****         /* Normal character */
 311:../utilities/fsl_shell.c ****         if (context->c_pos < context->l_pos)
 312:../utilities/fsl_shell.c ****         {
 313:../utilities/fsl_shell.c ****             memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 314:../utilities/fsl_shell.c ****                     context->l_pos - context->c_pos);
 315:../utilities/fsl_shell.c ****             context->line[context->c_pos] = ch;
 316:../utilities/fsl_shell.c ****             context->printf_data_func("%s", &context->line[context->c_pos]);
 317:../utilities/fsl_shell.c ****             /* Move the cursor to new position */
 318:../utilities/fsl_shell.c ****             for (i = context->c_pos; i < context->l_pos; i++)
 319:../utilities/fsl_shell.c ****             {
 320:../utilities/fsl_shell.c ****                 context->printf_data_func("\b");
 321:../utilities/fsl_shell.c ****             }
 322:../utilities/fsl_shell.c ****         }
 323:../utilities/fsl_shell.c ****         else
 324:../utilities/fsl_shell.c ****         {
 325:../utilities/fsl_shell.c ****             context->line[context->l_pos] = ch;
 326:../utilities/fsl_shell.c ****             context->printf_data_func("%c", ch);
 327:../utilities/fsl_shell.c ****         }
 328:../utilities/fsl_shell.c **** 
 329:../utilities/fsl_shell.c ****         ch = 0;
 330:../utilities/fsl_shell.c ****         context->l_pos++;
 331:../utilities/fsl_shell.c ****         context->c_pos++;
 332:../utilities/fsl_shell.c ****     }
 333:../utilities/fsl_shell.c ****     return 0;
 334:../utilities/fsl_shell.c **** }
 335:../utilities/fsl_shell.c **** 
 336:../utilities/fsl_shell.c **** static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv)
 337:../utilities/fsl_shell.c **** {
  25              		.loc 1 337 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              		.cfi_def_cfa_offset 16
  32              		.cfi_offset 4, -16
  33              		.cfi_offset 5, -12
  34              		.cfi_offset 6, -8
  35              		.cfi_offset 14, -4
  36 0002 0500     		movs	r5, r0
  37              	.LVL1:
 338:../utilities/fsl_shell.c ****     uint8_t i = 0;
 339:../utilities/fsl_shell.c **** 
 340:../utilities/fsl_shell.c ****     for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
  38              		.loc 1 340 0
  39 0004 0024     		movs	r4, #0
  40 0006 07E0     		b	.L2
  41              	.LVL2:
  42              	.L3:
 341:../utilities/fsl_shell.c ****     {
 342:../utilities/fsl_shell.c ****         context->printf_data_func(g_RegisteredCommands.CommandList[i]->pcHelpString);
  43              		.loc 1 342 0 discriminator 3
  44 0008 A200     		lsls	r2, r4, #2
  45 000a 074B     		ldr	r3, .L4
  46 000c D358     		ldr	r3, [r2, r3]
  47 000e 5868     		ldr	r0, [r3, #4]
  48 0010 2B6D     		ldr	r3, [r5, #80]
  49 0012 9847     		blx	r3
  50              	.LVL3:
 340:../utilities/fsl_shell.c ****     {
  51              		.loc 1 340 0 discriminator 3
  52 0014 0134     		adds	r4, r4, #1
  53              	.LVL4:
  54 0016 E4B2     		uxtb	r4, r4
  55              	.LVL5:
  56              	.L2:
 340:../utilities/fsl_shell.c ****     {
  57              		.loc 1 340 0 is_stmt 0 discriminator 1
  58 0018 034A     		ldr	r2, .L4
  59 001a 5023     		movs	r3, #80
  60 001c D35C     		ldrb	r3, [r2, r3]
  61 001e A342     		cmp	r3, r4
  62 0020 F2D8     		bhi	.L3
 343:../utilities/fsl_shell.c ****     }
 344:../utilities/fsl_shell.c ****     return 0;
 345:../utilities/fsl_shell.c **** }
  63              		.loc 1 345 0 is_stmt 1
  64 0022 0020     		movs	r0, #0
  65              		@ sp needed
  66              	.LVL6:
  67              	.LVL7:
  68 0024 70BD     		pop	{r4, r5, r6, pc}
  69              	.L5:
  70 0026 C046     		.align	2
  71              	.L4:
  72 0028 00000000 		.word	.LANCHOR0
  73              		.cfi_endproc
  74              	.LFE55:
  76              		.section	.text.ExitCommand,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.code	16
  80              		.thumb_func
  81              		.fpu softvfp
  83              	ExitCommand:
  84              	.LFB56:
 346:../utilities/fsl_shell.c **** 
 347:../utilities/fsl_shell.c **** static int32_t ExitCommand(p_shell_context_t context, int32_t argc, char **argv)
 348:../utilities/fsl_shell.c **** {
  85              		.loc 1 348 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              	.LVL8:
  90 0000 10B5     		push	{r4, lr}
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 4, -8
  93              		.cfi_offset 14, -4
  94 0002 0400     		movs	r4, r0
 349:../utilities/fsl_shell.c ****     /* Skip warning */
 350:../utilities/fsl_shell.c ****     context->printf_data_func("\r\nSHELL exited\r\n");
  95              		.loc 1 350 0
  96 0004 0448     		ldr	r0, .L7
  97              	.LVL9:
  98 0006 236D     		ldr	r3, [r4, #80]
  99 0008 9847     		blx	r3
 100              	.LVL10:
 351:../utilities/fsl_shell.c ****     context->exit = true;
 101              		.loc 1 351 0
 102 000a 8C23     		movs	r3, #140
 103 000c 5B00     		lsls	r3, r3, #1
 104 000e 0122     		movs	r2, #1
 105 0010 E254     		strb	r2, [r4, r3]
 352:../utilities/fsl_shell.c ****     return 0;
 353:../utilities/fsl_shell.c **** }
 106              		.loc 1 353 0
 107 0012 0020     		movs	r0, #0
 108              		@ sp needed
 109              	.LVL11:
 110 0014 10BD     		pop	{r4, pc}
 111              	.L8:
 112 0016 C046     		.align	2
 113              	.L7:
 114 0018 00000000 		.word	.LC1
 115              		.cfi_endproc
 116              	.LFE56:
 118              		.section	.text.StrCopy,"ax",%progbits
 119              		.align	1
 120              		.syntax unified
 121              		.code	16
 122              		.thumb_func
 123              		.fpu softvfp
 125              	StrCopy:
 126              	.LFB60:
 354:../utilities/fsl_shell.c **** 
 355:../utilities/fsl_shell.c **** static void ProcessCommand(p_shell_context_t context, const char *cmd)
 356:../utilities/fsl_shell.c **** {
 357:../utilities/fsl_shell.c ****     static const shell_command_context_t *tmpCommand = NULL;
 358:../utilities/fsl_shell.c ****     static const char *tmpCommandString;
 359:../utilities/fsl_shell.c ****     int32_t argc;
 360:../utilities/fsl_shell.c ****     char *argv[SHELL_BUFFER_SIZE];
 361:../utilities/fsl_shell.c ****     uint8_t flag = 1;
 362:../utilities/fsl_shell.c ****     uint8_t tmpCommandLen;
 363:../utilities/fsl_shell.c ****     uint8_t tmpLen;
 364:../utilities/fsl_shell.c ****     uint8_t i = 0;
 365:../utilities/fsl_shell.c **** 
 366:../utilities/fsl_shell.c ****     tmpLen = StrLen(cmd);
 367:../utilities/fsl_shell.c ****     argc = ParseLine(cmd, tmpLen, argv);
 368:../utilities/fsl_shell.c **** 
 369:../utilities/fsl_shell.c ****     if ((tmpCommand == NULL) && (argc > 0))
 370:../utilities/fsl_shell.c ****     {
 371:../utilities/fsl_shell.c ****         for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 372:../utilities/fsl_shell.c ****         {
 373:../utilities/fsl_shell.c ****             tmpCommand = g_RegisteredCommands.CommandList[i];
 374:../utilities/fsl_shell.c ****             tmpCommandString = tmpCommand->pcCommand;
 375:../utilities/fsl_shell.c ****             tmpCommandLen = StrLen(tmpCommandString);
 376:../utilities/fsl_shell.c ****             /* Compare with space or end of string */
 377:../utilities/fsl_shell.c ****             if ((cmd[tmpCommandLen] == ' ') || (cmd[tmpCommandLen] == 0x00))
 378:../utilities/fsl_shell.c ****             {
 379:../utilities/fsl_shell.c ****                 if (StrCompare(tmpCommandString, argv[0], tmpCommandLen) == 0)
 380:../utilities/fsl_shell.c ****                 {
 381:../utilities/fsl_shell.c ****                     /* support commands with optional number of parameters */
 382:../utilities/fsl_shell.c ****                     if (tmpCommand->cExpectedNumberOfParameters == SHELL_OPTIONAL_PARAMS)
 383:../utilities/fsl_shell.c ****                     {
 384:../utilities/fsl_shell.c ****                         flag = 0;
 385:../utilities/fsl_shell.c ****                     }
 386:../utilities/fsl_shell.c ****                     else if ((tmpCommand->cExpectedNumberOfParameters == 0) && (argc == 1))
 387:../utilities/fsl_shell.c ****                     {
 388:../utilities/fsl_shell.c ****                         flag = 0;
 389:../utilities/fsl_shell.c ****                     }
 390:../utilities/fsl_shell.c ****                     else if (tmpCommand->cExpectedNumberOfParameters > 0)
 391:../utilities/fsl_shell.c ****                     {
 392:../utilities/fsl_shell.c ****                         if ((argc - 1) == tmpCommand->cExpectedNumberOfParameters)
 393:../utilities/fsl_shell.c ****                         {
 394:../utilities/fsl_shell.c ****                             flag = 0;
 395:../utilities/fsl_shell.c ****                         }
 396:../utilities/fsl_shell.c ****                     }
 397:../utilities/fsl_shell.c ****                     else
 398:../utilities/fsl_shell.c ****                     {
 399:../utilities/fsl_shell.c ****                         flag = 1;
 400:../utilities/fsl_shell.c ****                     }
 401:../utilities/fsl_shell.c ****                     break;
 402:../utilities/fsl_shell.c ****                 }
 403:../utilities/fsl_shell.c ****             }
 404:../utilities/fsl_shell.c ****         }
 405:../utilities/fsl_shell.c ****     }
 406:../utilities/fsl_shell.c **** 
 407:../utilities/fsl_shell.c ****     if ((tmpCommand != NULL) && (flag == 1U))
 408:../utilities/fsl_shell.c ****     {
 409:../utilities/fsl_shell.c ****         context->printf_data_func(
 410:../utilities/fsl_shell.c ****             "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available comman
 411:../utilities/fsl_shell.c ****         tmpCommand = NULL;
 412:../utilities/fsl_shell.c ****     }
 413:../utilities/fsl_shell.c ****     else if (tmpCommand != NULL)
 414:../utilities/fsl_shell.c ****     {
 415:../utilities/fsl_shell.c ****         tmpLen = StrLen(cmd);
 416:../utilities/fsl_shell.c ****         /* Compare with last command. Push back to history buffer if different */
 417:../utilities/fsl_shell.c ****         if (tmpLen != StrCompare(cmd, context->hist_buf[0], StrLen(cmd)))
 418:../utilities/fsl_shell.c ****         {
 419:../utilities/fsl_shell.c ****             for (i = SHELL_HIST_MAX - 1; i > 0; i--)
 420:../utilities/fsl_shell.c ****             {
 421:../utilities/fsl_shell.c ****                 memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 422:../utilities/fsl_shell.c ****                 tmpLen = StrLen(context->hist_buf[i - 1]);
 423:../utilities/fsl_shell.c ****                 StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 424:../utilities/fsl_shell.c ****             }
 425:../utilities/fsl_shell.c ****             memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 426:../utilities/fsl_shell.c ****             tmpLen = StrLen(cmd);
 427:../utilities/fsl_shell.c ****             StrCopy(context->hist_buf[0], cmd, tmpLen);
 428:../utilities/fsl_shell.c ****             if (context->hist_count < SHELL_HIST_MAX)
 429:../utilities/fsl_shell.c ****             {
 430:../utilities/fsl_shell.c ****                 context->hist_count++;
 431:../utilities/fsl_shell.c ****             }
 432:../utilities/fsl_shell.c ****         }
 433:../utilities/fsl_shell.c ****         tmpCommand->pFuncCallBack(context, argc, argv);
 434:../utilities/fsl_shell.c ****         tmpCommand = NULL;
 435:../utilities/fsl_shell.c ****     }
 436:../utilities/fsl_shell.c ****     else
 437:../utilities/fsl_shell.c ****     {
 438:../utilities/fsl_shell.c ****         context->printf_data_func(
 439:../utilities/fsl_shell.c ****             "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\
 440:../utilities/fsl_shell.c ****         tmpCommand = NULL;
 441:../utilities/fsl_shell.c ****     }
 442:../utilities/fsl_shell.c **** }
 443:../utilities/fsl_shell.c **** 
 444:../utilities/fsl_shell.c **** static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos)
 445:../utilities/fsl_shell.c **** {
 446:../utilities/fsl_shell.c ****     uint8_t i;
 447:../utilities/fsl_shell.c ****     uint32_t tmp;
 448:../utilities/fsl_shell.c **** 
 449:../utilities/fsl_shell.c ****     if (context->hist_buf[0][0] == '\0')
 450:../utilities/fsl_shell.c ****     {
 451:../utilities/fsl_shell.c ****         context->hist_current = 0;
 452:../utilities/fsl_shell.c ****         return;
 453:../utilities/fsl_shell.c ****     }
 454:../utilities/fsl_shell.c ****     if (hist_pos >= SHELL_HIST_MAX)
 455:../utilities/fsl_shell.c ****     {
 456:../utilities/fsl_shell.c ****         hist_pos = SHELL_HIST_MAX - 1;
 457:../utilities/fsl_shell.c ****     }
 458:../utilities/fsl_shell.c ****     tmp = StrLen(context->line);
 459:../utilities/fsl_shell.c ****     /* Clear current if have */
 460:../utilities/fsl_shell.c ****     if (tmp > 0)
 461:../utilities/fsl_shell.c ****     {
 462:../utilities/fsl_shell.c ****         memset(context->line, '\0', tmp);
 463:../utilities/fsl_shell.c ****         for (i = 0; i < tmp; i++)
 464:../utilities/fsl_shell.c ****         {
 465:../utilities/fsl_shell.c ****             context->printf_data_func("\b \b");
 466:../utilities/fsl_shell.c ****         }
 467:../utilities/fsl_shell.c ****     }
 468:../utilities/fsl_shell.c **** 
 469:../utilities/fsl_shell.c ****     context->l_pos = StrLen(context->hist_buf[hist_pos]);
 470:../utilities/fsl_shell.c ****     context->c_pos = context->l_pos;
 471:../utilities/fsl_shell.c ****     StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 472:../utilities/fsl_shell.c ****     context->printf_data_func(context->hist_buf[hist_pos]);
 473:../utilities/fsl_shell.c **** }
 474:../utilities/fsl_shell.c **** 
 475:../utilities/fsl_shell.c **** static void AutoComplete(p_shell_context_t context)
 476:../utilities/fsl_shell.c **** {
 477:../utilities/fsl_shell.c ****     int32_t len;
 478:../utilities/fsl_shell.c ****     int32_t minLen;
 479:../utilities/fsl_shell.c ****     uint8_t i = 0;
 480:../utilities/fsl_shell.c ****     const shell_command_context_t *tmpCommand = NULL;
 481:../utilities/fsl_shell.c ****     const char *namePtr;
 482:../utilities/fsl_shell.c ****     const char *cmdName;
 483:../utilities/fsl_shell.c **** 
 484:../utilities/fsl_shell.c ****     minLen = 0;
 485:../utilities/fsl_shell.c ****     namePtr = NULL;
 486:../utilities/fsl_shell.c **** 
 487:../utilities/fsl_shell.c ****     if (!StrLen(context->line))
 488:../utilities/fsl_shell.c ****     {
 489:../utilities/fsl_shell.c ****         return;
 490:../utilities/fsl_shell.c ****     }
 491:../utilities/fsl_shell.c ****     context->printf_data_func("\r\n");
 492:../utilities/fsl_shell.c ****     /* Empty tab, list all commands */
 493:../utilities/fsl_shell.c ****     if (context->line[0] == '\0')
 494:../utilities/fsl_shell.c ****     {
 495:../utilities/fsl_shell.c ****         HelpCommand(context, 0, NULL);
 496:../utilities/fsl_shell.c ****         return;
 497:../utilities/fsl_shell.c ****     }
 498:../utilities/fsl_shell.c ****     /* Do auto complete */
 499:../utilities/fsl_shell.c ****     for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++)
 500:../utilities/fsl_shell.c ****     {
 501:../utilities/fsl_shell.c ****         tmpCommand = g_RegisteredCommands.CommandList[i];
 502:../utilities/fsl_shell.c ****         cmdName = tmpCommand->pcCommand;
 503:../utilities/fsl_shell.c ****         if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0)
 504:../utilities/fsl_shell.c ****         {
 505:../utilities/fsl_shell.c ****             if (minLen == 0)
 506:../utilities/fsl_shell.c ****             {
 507:../utilities/fsl_shell.c ****                 namePtr = cmdName;
 508:../utilities/fsl_shell.c ****                 minLen = StrLen(namePtr);
 509:../utilities/fsl_shell.c ****                 /* Show possible matches */
 510:../utilities/fsl_shell.c ****                 context->printf_data_func("%s\r\n", cmdName);
 511:../utilities/fsl_shell.c ****                 continue;
 512:../utilities/fsl_shell.c ****             }
 513:../utilities/fsl_shell.c ****             len = StrCompare(namePtr, cmdName, StrLen(namePtr));
 514:../utilities/fsl_shell.c ****             if (len < 0)
 515:../utilities/fsl_shell.c ****             {
 516:../utilities/fsl_shell.c ****                 len = len * (-1);
 517:../utilities/fsl_shell.c ****             }
 518:../utilities/fsl_shell.c ****             if (len < minLen)
 519:../utilities/fsl_shell.c ****             {
 520:../utilities/fsl_shell.c ****                 minLen = len;
 521:../utilities/fsl_shell.c ****             }
 522:../utilities/fsl_shell.c ****         }
 523:../utilities/fsl_shell.c ****     }
 524:../utilities/fsl_shell.c ****     /* Auto complete string */
 525:../utilities/fsl_shell.c ****     if (namePtr)
 526:../utilities/fsl_shell.c ****     {
 527:../utilities/fsl_shell.c ****         StrCopy(context->line, namePtr, minLen);
 528:../utilities/fsl_shell.c ****     }
 529:../utilities/fsl_shell.c ****     context->printf_data_func("%s%s", context->prompt, context->line);
 530:../utilities/fsl_shell.c ****     return;
 531:../utilities/fsl_shell.c **** }
 532:../utilities/fsl_shell.c **** 
 533:../utilities/fsl_shell.c **** static char *StrCopy(char *dest, const char *src, int32_t count)
 534:../utilities/fsl_shell.c **** {
 127              		.loc 1 534 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              	.LVL12:
 132 0000 10B5     		push	{r4, lr}
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 4, -8
 135              		.cfi_offset 14, -4
 136              	.LVL13:
 535:../utilities/fsl_shell.c ****     char *ret = dest;
 536:../utilities/fsl_shell.c ****     int32_t i = 0;
 537:../utilities/fsl_shell.c **** 
 538:../utilities/fsl_shell.c ****     for (i = 0; i < count; i++)
 137              		.loc 1 538 0
 138 0002 0023     		movs	r3, #0
 139 0004 02E0     		b	.L10
 140              	.LVL14:
 141              	.L11:
 539:../utilities/fsl_shell.c ****     {
 540:../utilities/fsl_shell.c ****         dest[i] = src[i];
 142              		.loc 1 540 0 discriminator 3
 143 0006 CC56     		ldrsb	r4, [r1, r3]
 144 0008 C454     		strb	r4, [r0, r3]
 538:../utilities/fsl_shell.c ****     {
 145              		.loc 1 538 0 discriminator 3
 146 000a 0133     		adds	r3, r3, #1
 147              	.LVL15:
 148              	.L10:
 538:../utilities/fsl_shell.c ****     {
 149              		.loc 1 538 0 is_stmt 0 discriminator 1
 150 000c 9342     		cmp	r3, r2
 151 000e FADB     		blt	.L11
 541:../utilities/fsl_shell.c ****     }
 542:../utilities/fsl_shell.c **** 
 543:../utilities/fsl_shell.c ****     return ret;
 544:../utilities/fsl_shell.c **** }
 152              		.loc 1 544 0 is_stmt 1
 153              		@ sp needed
 154 0010 10BD     		pop	{r4, pc}
 155              		.cfi_endproc
 156              	.LFE60:
 158              		.section	.text.StrLen,"ax",%progbits
 159              		.align	1
 160              		.syntax unified
 161              		.code	16
 162              		.thumb_func
 163              		.fpu softvfp
 165              	StrLen:
 166              	.LFB61:
 545:../utilities/fsl_shell.c **** 
 546:../utilities/fsl_shell.c **** static int32_t StrLen(const char *str)
 547:../utilities/fsl_shell.c **** {
 167              		.loc 1 547 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172              	.LVL16:
 173 0000 0300     		movs	r3, r0
 174              	.LVL17:
 548:../utilities/fsl_shell.c ****     int32_t i = 0;
 175              		.loc 1 548 0
 176 0002 0020     		movs	r0, #0
 177              	.LVL18:
 549:../utilities/fsl_shell.c **** 
 550:../utilities/fsl_shell.c ****     while (*str)
 178              		.loc 1 550 0
 179 0004 01E0     		b	.L13
 180              	.LVL19:
 181              	.L14:
 551:../utilities/fsl_shell.c ****     {
 552:../utilities/fsl_shell.c ****         str++;
 182              		.loc 1 552 0
 183 0006 0133     		adds	r3, r3, #1
 184              	.LVL20:
 553:../utilities/fsl_shell.c ****         i++;
 185              		.loc 1 553 0
 186 0008 0130     		adds	r0, r0, #1
 187              	.LVL21:
 188              	.L13:
 550:../utilities/fsl_shell.c ****     {
 189              		.loc 1 550 0
 190 000a 0022     		movs	r2, #0
 191 000c 9A56     		ldrsb	r2, [r3, r2]
 192 000e 002A     		cmp	r2, #0
 193 0010 F9D1     		bne	.L14
 554:../utilities/fsl_shell.c ****     }
 555:../utilities/fsl_shell.c ****     return i;
 556:../utilities/fsl_shell.c **** }
 194              		.loc 1 556 0
 195              		@ sp needed
 196 0012 7047     		bx	lr
 197              		.cfi_endproc
 198              	.LFE61:
 200              		.section	.text.StrCompare,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.code	16
 204              		.thumb_func
 205              		.fpu softvfp
 207              	StrCompare:
 208              	.LFB62:
 557:../utilities/fsl_shell.c **** 
 558:../utilities/fsl_shell.c **** static int32_t StrCompare(const char *str1, const char *str2, int32_t count)
 559:../utilities/fsl_shell.c **** {
 209              		.loc 1 559 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL22:
 214 0000 70B5     		push	{r4, r5, r6, lr}
 215              		.cfi_def_cfa_offset 16
 216              		.cfi_offset 4, -16
 217              		.cfi_offset 5, -12
 218              		.cfi_offset 6, -8
 219              		.cfi_offset 14, -4
 220              	.L16:
 560:../utilities/fsl_shell.c ****     while (count--)
 221              		.loc 1 560 0
 222 0002 541E     		subs	r4, r2, #1
 223              	.LVL23:
 224 0004 002A     		cmp	r2, #0
 225 0006 0ED0     		beq	.L17
 561:../utilities/fsl_shell.c ****     {
 562:../utilities/fsl_shell.c ****         if (*str1++ != *str2++)
 226              		.loc 1 562 0
 227 0008 451C     		adds	r5, r0, #1
 228              	.LVL24:
 229 000a 0078     		ldrb	r0, [r0]
 230 000c 40B2     		sxtb	r0, r0
 231 000e 4E1C     		adds	r6, r1, #1
 232              	.LVL25:
 233 0010 0023     		movs	r3, #0
 234 0012 CB56     		ldrsb	r3, [r1, r3]
 560:../utilities/fsl_shell.c ****     while (count--)
 235              		.loc 1 560 0
 236 0014 2200     		movs	r2, r4
 237              		.loc 1 562 0
 238 0016 9842     		cmp	r0, r3
 239 0018 02D1     		bne	.L20
 240 001a 3100     		movs	r1, r6
 241 001c 2800     		movs	r0, r5
 242 001e F0E7     		b	.L16
 243              	.L20:
 563:../utilities/fsl_shell.c ****         {
 564:../utilities/fsl_shell.c ****             return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 244              		.loc 1 564 0
 245 0020 C0B2     		uxtb	r0, r0
 246 0022 DAB2     		uxtb	r2, r3
 247 0024 821A     		subs	r2, r0, r2
 248              	.LVL26:
 249              	.L17:
 565:../utilities/fsl_shell.c ****         }
 566:../utilities/fsl_shell.c ****     }
 567:../utilities/fsl_shell.c ****     return 0;
 568:../utilities/fsl_shell.c **** }
 250              		.loc 1 568 0
 251 0026 1000     		movs	r0, r2
 252              		@ sp needed
 253              	.LVL27:
 254 0028 70BD     		pop	{r4, r5, r6, pc}
 255              		.cfi_endproc
 256              	.LFE62:
 258              		.section	.text.AutoComplete,"ax",%progbits
 259              		.align	1
 260              		.syntax unified
 261              		.code	16
 262              		.thumb_func
 263              		.fpu softvfp
 265              	AutoComplete:
 266              	.LFB59:
 476:../utilities/fsl_shell.c ****     int32_t len;
 267              		.loc 1 476 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 8
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              	.LVL28:
 272 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 273              		.cfi_def_cfa_offset 20
 274              		.cfi_offset 4, -20
 275              		.cfi_offset 5, -16
 276              		.cfi_offset 6, -12
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279 0002 83B0     		sub	sp, sp, #12
 280              		.cfi_def_cfa_offset 32
 281 0004 0600     		movs	r6, r0
 282              	.LVL29:
 487:../utilities/fsl_shell.c ****     {
 283              		.loc 1 487 0
 284 0006 431D     		adds	r3, r0, #5
 285 0008 0093     		str	r3, [sp]
 286 000a 1800     		movs	r0, r3
 287              	.LVL30:
 288 000c FFF7FEFF 		bl	StrLen
 289              	.LVL31:
 290 0010 0028     		cmp	r0, #0
 291 0012 4ED0     		beq	.L21
 491:../utilities/fsl_shell.c ****     /* Empty tab, list all commands */
 292              		.loc 1 491 0
 293 0014 2848     		ldr	r0, .L35
 294 0016 336D     		ldr	r3, [r6, #80]
 295 0018 9847     		blx	r3
 296              	.LVL32:
 493:../utilities/fsl_shell.c ****     {
 297              		.loc 1 493 0
 298 001a 0523     		movs	r3, #5
 299 001c F356     		ldrsb	r3, [r6, r3]
 300 001e 002B     		cmp	r3, #0
 301 0020 04D0     		beq	.L31
 485:../utilities/fsl_shell.c **** 
 302              		.loc 1 485 0
 303 0022 0023     		movs	r3, #0
 304 0024 0193     		str	r3, [sp, #4]
 499:../utilities/fsl_shell.c ****     {
 305              		.loc 1 499 0
 306 0026 0024     		movs	r4, #0
 484:../utilities/fsl_shell.c ****     namePtr = NULL;
 307              		.loc 1 484 0
 308 0028 0025     		movs	r5, #0
 309 002a 10E0     		b	.L23
 310              	.L31:
 495:../utilities/fsl_shell.c ****         return;
 311              		.loc 1 495 0
 312 002c 0022     		movs	r2, #0
 313 002e 0021     		movs	r1, #0
 314 0030 3000     		movs	r0, r6
 315 0032 FFF7FEFF 		bl	HelpCommand
 316              	.LVL33:
 496:../utilities/fsl_shell.c ****     }
 317              		.loc 1 496 0
 318 0036 3CE0     		b	.L21
 319              	.LVL34:
 320              	.L33:
 508:../utilities/fsl_shell.c ****                 /* Show possible matches */
 321              		.loc 1 508 0
 322 0038 3800     		movs	r0, r7
 323 003a FFF7FEFF 		bl	StrLen
 324              	.LVL35:
 325 003e 0500     		movs	r5, r0
 326              	.LVL36:
 510:../utilities/fsl_shell.c ****                 continue;
 327              		.loc 1 510 0
 328 0040 3900     		movs	r1, r7
 329 0042 1E48     		ldr	r0, .L35+4
 330              	.LVL37:
 331 0044 336D     		ldr	r3, [r6, #80]
 332 0046 9847     		blx	r3
 333              	.LVL38:
 507:../utilities/fsl_shell.c ****                 minLen = StrLen(namePtr);
 334              		.loc 1 507 0
 335 0048 0197     		str	r7, [sp, #4]
 336              	.LVL39:
 337              	.L24:
 499:../utilities/fsl_shell.c ****     {
 338              		.loc 1 499 0 discriminator 2
 339 004a 0134     		adds	r4, r4, #1
 340              	.LVL40:
 341 004c E4B2     		uxtb	r4, r4
 342              	.LVL41:
 343              	.L23:
 499:../utilities/fsl_shell.c ****     {
 344              		.loc 1 499 0 is_stmt 0 discriminator 1
 345 004e 1C4A     		ldr	r2, .L35+8
 346 0050 5023     		movs	r3, #80
 347 0052 D35C     		ldrb	r3, [r2, r3]
 348 0054 A342     		cmp	r3, r4
 349 0056 1FD9     		bls	.L32
 501:../utilities/fsl_shell.c ****         cmdName = tmpCommand->pcCommand;
 350              		.loc 1 501 0 is_stmt 1
 351 0058 A300     		lsls	r3, r4, #2
 352 005a 194A     		ldr	r2, .L35+8
 353 005c 9B58     		ldr	r3, [r3, r2]
 354              	.LVL42:
 502:../utilities/fsl_shell.c ****         if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0)
 355              		.loc 1 502 0
 356 005e 1F68     		ldr	r7, [r3]
 357              	.LVL43:
 503:../utilities/fsl_shell.c ****         {
 358              		.loc 1 503 0
 359 0060 0098     		ldr	r0, [sp]
 360 0062 FFF7FEFF 		bl	StrLen
 361              	.LVL44:
 362 0066 0200     		movs	r2, r0
 363 0068 3900     		movs	r1, r7
 364 006a 0098     		ldr	r0, [sp]
 365 006c FFF7FEFF 		bl	StrCompare
 366              	.LVL45:
 367 0070 0028     		cmp	r0, #0
 368 0072 EAD1     		bne	.L24
 505:../utilities/fsl_shell.c ****             {
 369              		.loc 1 505 0
 370 0074 002D     		cmp	r5, #0
 371 0076 DFD0     		beq	.L33
 513:../utilities/fsl_shell.c ****             if (len < 0)
 372              		.loc 1 513 0
 373 0078 0198     		ldr	r0, [sp, #4]
 374 007a FFF7FEFF 		bl	StrLen
 375              	.LVL46:
 376 007e 0200     		movs	r2, r0
 377 0080 3900     		movs	r1, r7
 378 0082 0198     		ldr	r0, [sp, #4]
 379 0084 FFF7FEFF 		bl	StrCompare
 380              	.LVL47:
 514:../utilities/fsl_shell.c ****             {
 381              		.loc 1 514 0
 382 0088 0028     		cmp	r0, #0
 383 008a 03DB     		blt	.L34
 384              	.L26:
 518:../utilities/fsl_shell.c ****             {
 385              		.loc 1 518 0
 386 008c A842     		cmp	r0, r5
 387 008e DCDA     		bge	.L24
 520:../utilities/fsl_shell.c ****             }
 388              		.loc 1 520 0
 389 0090 0500     		movs	r5, r0
 390              	.LVL48:
 391 0092 DAE7     		b	.L24
 392              	.LVL49:
 393              	.L34:
 516:../utilities/fsl_shell.c ****             }
 394              		.loc 1 516 0
 395 0094 4042     		rsbs	r0, r0, #0
 396              	.LVL50:
 397 0096 F9E7     		b	.L26
 398              	.LVL51:
 399              	.L32:
 525:../utilities/fsl_shell.c ****     {
 400              		.loc 1 525 0
 401 0098 019B     		ldr	r3, [sp, #4]
 402 009a 002B     		cmp	r3, #0
 403 009c 04D0     		beq	.L28
 527:../utilities/fsl_shell.c ****     }
 404              		.loc 1 527 0
 405 009e 2A00     		movs	r2, r5
 406 00a0 1900     		movs	r1, r3
 407 00a2 0098     		ldr	r0, [sp]
 408 00a4 FFF7FEFF 		bl	StrCopy
 409              	.LVL52:
 410              	.L28:
 529:../utilities/fsl_shell.c ****     return;
 411              		.loc 1 529 0
 412 00a8 336D     		ldr	r3, [r6, #80]
 413 00aa 3168     		ldr	r1, [r6]
 414 00ac 009A     		ldr	r2, [sp]
 415 00ae 0548     		ldr	r0, .L35+12
 416 00b0 9847     		blx	r3
 417              	.LVL53:
 418              	.L21:
 531:../utilities/fsl_shell.c **** 
 419              		.loc 1 531 0
 420 00b2 03B0     		add	sp, sp, #12
 421              		@ sp needed
 422              	.LVL54:
 423 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 424              	.L36:
 425 00b6 C046     		.align	2
 426              	.L35:
 427 00b8 00000000 		.word	.LC3
 428 00bc 04000000 		.word	.LC6
 429 00c0 00000000 		.word	.LANCHOR0
 430 00c4 0C000000 		.word	.LC8
 431              		.cfi_endproc
 432              	.LFE59:
 434              		.section	.text.GetChar,"ax",%progbits
 435              		.align	1
 436              		.syntax unified
 437              		.code	16
 438              		.thumb_func
 439              		.fpu softvfp
 441              	GetChar:
 442              	.LFB65:
 569:../utilities/fsl_shell.c **** 
 570:../utilities/fsl_shell.c **** static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
 571:../utilities/fsl_shell.c **** {
 572:../utilities/fsl_shell.c ****     uint32_t argc;
 573:../utilities/fsl_shell.c ****     char *p;
 574:../utilities/fsl_shell.c ****     uint32_t position;
 575:../utilities/fsl_shell.c **** 
 576:../utilities/fsl_shell.c ****     /* Init params */
 577:../utilities/fsl_shell.c ****     memset(g_paramBuffer, '\0', len + 1);
 578:../utilities/fsl_shell.c ****     StrCopy(g_paramBuffer, cmd, len);
 579:../utilities/fsl_shell.c **** 
 580:../utilities/fsl_shell.c ****     p = g_paramBuffer;
 581:../utilities/fsl_shell.c ****     position = 0;
 582:../utilities/fsl_shell.c ****     argc = 0;
 583:../utilities/fsl_shell.c **** 
 584:../utilities/fsl_shell.c ****     while (position < len)
 585:../utilities/fsl_shell.c ****     {
 586:../utilities/fsl_shell.c ****         /* Skip all blanks */
 587:../utilities/fsl_shell.c ****         while (((char)(*p) == ' ') && (position < len))
 588:../utilities/fsl_shell.c ****         {
 589:../utilities/fsl_shell.c ****             *p = '\0';
 590:../utilities/fsl_shell.c ****             p++;
 591:../utilities/fsl_shell.c ****             position++;
 592:../utilities/fsl_shell.c ****         }
 593:../utilities/fsl_shell.c ****         /* Process begin of a string */
 594:../utilities/fsl_shell.c ****         if (*p == '"')
 595:../utilities/fsl_shell.c ****         {
 596:../utilities/fsl_shell.c ****             p++;
 597:../utilities/fsl_shell.c ****             position++;
 598:../utilities/fsl_shell.c ****             argv[argc] = p;
 599:../utilities/fsl_shell.c ****             argc++;
 600:../utilities/fsl_shell.c ****             /* Skip this string */
 601:../utilities/fsl_shell.c ****             while ((*p != '"') && (position < len))
 602:../utilities/fsl_shell.c ****             {
 603:../utilities/fsl_shell.c ****                 p++;
 604:../utilities/fsl_shell.c ****                 position++;
 605:../utilities/fsl_shell.c ****             }
 606:../utilities/fsl_shell.c ****             /* Skip '"' */
 607:../utilities/fsl_shell.c ****             *p = '\0';
 608:../utilities/fsl_shell.c ****             p++;
 609:../utilities/fsl_shell.c ****             position++;
 610:../utilities/fsl_shell.c ****         }
 611:../utilities/fsl_shell.c ****         else /* Normal char */
 612:../utilities/fsl_shell.c ****         {
 613:../utilities/fsl_shell.c ****             argv[argc] = p;
 614:../utilities/fsl_shell.c ****             argc++;
 615:../utilities/fsl_shell.c ****             while (((char)*p != ' ') && ((char)*p != '\t') && (position < len))
 616:../utilities/fsl_shell.c ****             {
 617:../utilities/fsl_shell.c ****                 p++;
 618:../utilities/fsl_shell.c ****                 position++;
 619:../utilities/fsl_shell.c ****             }
 620:../utilities/fsl_shell.c ****         }
 621:../utilities/fsl_shell.c ****     }
 622:../utilities/fsl_shell.c ****     return argc;
 623:../utilities/fsl_shell.c **** }
 624:../utilities/fsl_shell.c **** 
 625:../utilities/fsl_shell.c **** int32_t SHELL_RegisterCommand(const shell_command_context_t *command_context)
 626:../utilities/fsl_shell.c **** {
 627:../utilities/fsl_shell.c ****     int32_t result = 0;
 628:../utilities/fsl_shell.c **** 
 629:../utilities/fsl_shell.c ****     /* If have room  in command list */
 630:../utilities/fsl_shell.c ****     if (g_RegisteredCommands.numberOfCommandInList < SHELL_MAX_CMD)
 631:../utilities/fsl_shell.c ****     {
 632:../utilities/fsl_shell.c ****         g_RegisteredCommands.CommandList[g_RegisteredCommands.numberOfCommandInList++] = command_co
 633:../utilities/fsl_shell.c ****     }
 634:../utilities/fsl_shell.c ****     else
 635:../utilities/fsl_shell.c ****     {
 636:../utilities/fsl_shell.c ****         result = -1;
 637:../utilities/fsl_shell.c ****     }
 638:../utilities/fsl_shell.c ****     return result;
 639:../utilities/fsl_shell.c **** }
 640:../utilities/fsl_shell.c **** 
 641:../utilities/fsl_shell.c **** static uint8_t GetChar(p_shell_context_t context)
 642:../utilities/fsl_shell.c **** {
 443              		.loc 1 642 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 8
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              	.LVL55:
 448 0000 10B5     		push	{r4, lr}
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 4, -8
 451              		.cfi_offset 14, -4
 452 0002 82B0     		sub	sp, sp, #8
 453              		.cfi_def_cfa_offset 16
 643:../utilities/fsl_shell.c ****     uint8_t ch;
 644:../utilities/fsl_shell.c **** 
 645:../utilities/fsl_shell.c **** #if SHELL_USE_FILE_STREAM
 646:../utilities/fsl_shell.c ****     ch = fgetc(context->STDIN);
 647:../utilities/fsl_shell.c **** #else
 648:../utilities/fsl_shell.c ****     context->recv_data_func(&ch, 1U);
 454              		.loc 1 648 0
 455 0004 C36C     		ldr	r3, [r0, #76]
 456 0006 6A46     		mov	r2, sp
 457 0008 D41D     		adds	r4, r2, #7
 458 000a 0121     		movs	r1, #1
 459 000c 2000     		movs	r0, r4
 460              	.LVL56:
 461 000e 9847     		blx	r3
 462              	.LVL57:
 649:../utilities/fsl_shell.c **** #endif
 650:../utilities/fsl_shell.c ****     return ch;
 463              		.loc 1 650 0
 464 0010 2078     		ldrb	r0, [r4]
 651:../utilities/fsl_shell.c **** }
 465              		.loc 1 651 0
 466 0012 02B0     		add	sp, sp, #8
 467              		@ sp needed
 468 0014 10BD     		pop	{r4, pc}
 469              		.cfi_endproc
 470              	.LFE65:
 472              		.section	.text.GetHistoryCommand,"ax",%progbits
 473              		.align	1
 474              		.syntax unified
 475              		.code	16
 476              		.thumb_func
 477              		.fpu softvfp
 479              	GetHistoryCommand:
 480              	.LFB58:
 445:../utilities/fsl_shell.c ****     uint8_t i;
 481              		.loc 1 445 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 8
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              	.LVL58:
 486 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 487              		.cfi_def_cfa_offset 20
 488              		.cfi_offset 4, -20
 489              		.cfi_offset 5, -16
 490              		.cfi_offset 6, -12
 491              		.cfi_offset 7, -8
 492              		.cfi_offset 14, -4
 493 0002 83B0     		sub	sp, sp, #12
 494              		.cfi_def_cfa_offset 32
 495 0004 0700     		movs	r7, r0
 496 0006 0D00     		movs	r5, r1
 449:../utilities/fsl_shell.c ****     {
 497              		.loc 1 449 0
 498 0008 5823     		movs	r3, #88
 499 000a C356     		ldrsb	r3, [r0, r3]
 500 000c 002B     		cmp	r3, #0
 501 000e 1DD0     		beq	.L46
 454:../utilities/fsl_shell.c ****     {
 502              		.loc 1 454 0
 503 0010 0229     		cmp	r1, #2
 504 0012 00D9     		bls	.L41
 456:../utilities/fsl_shell.c ****     }
 505              		.loc 1 456 0
 506 0014 0225     		movs	r5, #2
 507              	.L41:
 508              	.LVL59:
 458:../utilities/fsl_shell.c ****     /* Clear current if have */
 509              		.loc 1 458 0
 510 0016 7B1D     		adds	r3, r7, #5
 511 0018 0193     		str	r3, [sp, #4]
 512 001a 1800     		movs	r0, r3
 513              	.LVL60:
 514 001c FFF7FEFF 		bl	StrLen
 515              	.LVL61:
 516 0020 061E     		subs	r6, r0, #0
 517              	.LVL62:
 460:../utilities/fsl_shell.c ****     {
 518              		.loc 1 460 0
 519 0022 17D1     		bne	.L47
 520              	.LVL63:
 521              	.L42:
 469:../utilities/fsl_shell.c ****     context->c_pos = context->l_pos;
 522              		.loc 1 469 0
 523 0024 AD01     		lsls	r5, r5, #6
 524              	.LVL64:
 525 0026 5835     		adds	r5, r5, #88
 526 0028 7D19     		adds	r5, r7, r5
 527 002a 2800     		movs	r0, r5
 528 002c FFF7FEFF 		bl	StrLen
 529              	.LVL65:
 530 0030 C2B2     		uxtb	r2, r0
 531 0032 4623     		movs	r3, #70
 532 0034 FA54     		strb	r2, [r7, r3]
 470:../utilities/fsl_shell.c ****     StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 533              		.loc 1 470 0
 534 0036 0133     		adds	r3, r3, #1
 535 0038 FA54     		strb	r2, [r7, r3]
 471:../utilities/fsl_shell.c ****     context->printf_data_func(context->hist_buf[hist_pos]);
 536              		.loc 1 471 0
 537 003a 2900     		movs	r1, r5
 538 003c 0198     		ldr	r0, [sp, #4]
 539 003e FFF7FEFF 		bl	StrCopy
 540              	.LVL66:
 472:../utilities/fsl_shell.c **** }
 541              		.loc 1 472 0
 542 0042 3B6D     		ldr	r3, [r7, #80]
 543 0044 2800     		movs	r0, r5
 544 0046 9847     		blx	r3
 545              	.LVL67:
 546              	.L38:
 473:../utilities/fsl_shell.c **** 
 547              		.loc 1 473 0
 548 0048 03B0     		add	sp, sp, #12
 549              		@ sp needed
 550              	.LVL68:
 551 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 552              	.LVL69:
 553              	.L46:
 451:../utilities/fsl_shell.c ****         return;
 554              		.loc 1 451 0
 555 004c 5433     		adds	r3, r3, #84
 556 004e 0022     		movs	r2, #0
 557 0050 C252     		strh	r2, [r0, r3]
 452:../utilities/fsl_shell.c ****     }
 558              		.loc 1 452 0
 559 0052 F9E7     		b	.L38
 560              	.LVL70:
 561              	.L47:
 462:../utilities/fsl_shell.c ****         for (i = 0; i < tmp; i++)
 562              		.loc 1 462 0
 563 0054 0200     		movs	r2, r0
 564 0056 0021     		movs	r1, #0
 565 0058 0198     		ldr	r0, [sp, #4]
 566              	.LVL71:
 567 005a FFF7FEFF 		bl	memset
 568              	.LVL72:
 463:../utilities/fsl_shell.c ****         {
 569              		.loc 1 463 0
 570 005e 0024     		movs	r4, #0
 571 0060 04E0     		b	.L43
 572              	.LVL73:
 573              	.L44:
 465:../utilities/fsl_shell.c ****         }
 574              		.loc 1 465 0 discriminator 3
 575 0062 0448     		ldr	r0, .L48
 576 0064 3B6D     		ldr	r3, [r7, #80]
 577 0066 9847     		blx	r3
 578              	.LVL74:
 463:../utilities/fsl_shell.c ****         {
 579              		.loc 1 463 0 discriminator 3
 580 0068 0134     		adds	r4, r4, #1
 581              	.LVL75:
 582 006a E4B2     		uxtb	r4, r4
 583              	.LVL76:
 584              	.L43:
 463:../utilities/fsl_shell.c ****         {
 585              		.loc 1 463 0 is_stmt 0 discriminator 1
 586 006c B442     		cmp	r4, r6
 587 006e F8D3     		bcc	.L44
 588 0070 D8E7     		b	.L42
 589              	.L49:
 590 0072 C046     		.align	2
 591              	.L48:
 592 0074 00000000 		.word	.LC10
 593              		.cfi_endproc
 594              	.LFE58:
 596              		.section	.text.ParseLine,"ax",%progbits
 597              		.align	1
 598              		.syntax unified
 599              		.code	16
 600              		.thumb_func
 601              		.fpu softvfp
 603              	ParseLine:
 604              	.LFB63:
 571:../utilities/fsl_shell.c ****     uint32_t argc;
 605              		.loc 1 571 0 is_stmt 1
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              	.LVL77:
 610 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 611              		.cfi_def_cfa_offset 24
 612              		.cfi_offset 3, -24
 613              		.cfi_offset 4, -20
 614              		.cfi_offset 5, -16
 615              		.cfi_offset 6, -12
 616              		.cfi_offset 7, -8
 617              		.cfi_offset 14, -4
 618 0002 0700     		movs	r7, r0
 619 0004 0D00     		movs	r5, r1
 620 0006 1600     		movs	r6, r2
 577:../utilities/fsl_shell.c ****     StrCopy(g_paramBuffer, cmd, len);
 621              		.loc 1 577 0
 622 0008 4A1C     		adds	r2, r1, #1
 623              	.LVL78:
 624 000a 1E4C     		ldr	r4, .L63
 625 000c 0021     		movs	r1, #0
 626              	.LVL79:
 627 000e 2000     		movs	r0, r4
 628              	.LVL80:
 629 0010 FFF7FEFF 		bl	memset
 630              	.LVL81:
 578:../utilities/fsl_shell.c **** 
 631              		.loc 1 578 0
 632 0014 2A00     		movs	r2, r5
 633 0016 3900     		movs	r1, r7
 634 0018 2000     		movs	r0, r4
 635 001a FFF7FEFF 		bl	StrCopy
 636              	.LVL82:
 581:../utilities/fsl_shell.c ****     argc = 0;
 637              		.loc 1 581 0
 638 001e 0022     		movs	r2, #0
 580:../utilities/fsl_shell.c ****     position = 0;
 639              		.loc 1 580 0
 640 0020 2300     		movs	r3, r4
 582:../utilities/fsl_shell.c **** 
 641              		.loc 1 582 0
 642 0022 0020     		movs	r0, #0
 584:../utilities/fsl_shell.c ****     {
 643              		.loc 1 584 0
 644 0024 2BE0     		b	.L51
 645              	.LVL83:
 646              	.L53:
 589:../utilities/fsl_shell.c ****             p++;
 647              		.loc 1 589 0
 648 0026 0021     		movs	r1, #0
 649 0028 1970     		strb	r1, [r3]
 590:../utilities/fsl_shell.c ****             position++;
 650              		.loc 1 590 0
 651 002a 0133     		adds	r3, r3, #1
 652              	.LVL84:
 591:../utilities/fsl_shell.c ****         }
 653              		.loc 1 591 0
 654 002c 0132     		adds	r2, r2, #1
 655              	.LVL85:
 656              	.L61:
 587:../utilities/fsl_shell.c ****         {
 657              		.loc 1 587 0
 658 002e 0021     		movs	r1, #0
 659 0030 5956     		ldrsb	r1, [r3, r1]
 660 0032 2029     		cmp	r1, #32
 661 0034 01D1     		bne	.L52
 587:../utilities/fsl_shell.c ****         {
 662              		.loc 1 587 0 is_stmt 0 discriminator 1
 663 0036 AA42     		cmp	r2, r5
 664 0038 F5D3     		bcc	.L53
 665              	.L52:
 594:../utilities/fsl_shell.c ****         {
 666              		.loc 1 594 0 is_stmt 1
 667 003a 2229     		cmp	r1, #34
 668 003c 0DD0     		beq	.L62
 613:../utilities/fsl_shell.c ****             argc++;
 669              		.loc 1 613 0
 670 003e 8100     		lsls	r1, r0, #2
 671 0040 7350     		str	r3, [r6, r1]
 614:../utilities/fsl_shell.c ****             while (((char)*p != ' ') && ((char)*p != '\t') && (position < len))
 672              		.loc 1 614 0
 673 0042 0130     		adds	r0, r0, #1
 674              	.LVL86:
 675              	.L59:
 615:../utilities/fsl_shell.c ****             {
 676              		.loc 1 615 0
 677 0044 0021     		movs	r1, #0
 678 0046 5956     		ldrsb	r1, [r3, r1]
 679 0048 2029     		cmp	r1, #32
 680 004a 18D0     		beq	.L51
 615:../utilities/fsl_shell.c ****             {
 681              		.loc 1 615 0 is_stmt 0 discriminator 1
 682 004c 0929     		cmp	r1, #9
 683 004e 16D0     		beq	.L51
 615:../utilities/fsl_shell.c ****             {
 684              		.loc 1 615 0 discriminator 2
 685 0050 AA42     		cmp	r2, r5
 686 0052 14D2     		bcs	.L51
 617:../utilities/fsl_shell.c ****                 position++;
 687              		.loc 1 617 0 is_stmt 1
 688 0054 0133     		adds	r3, r3, #1
 689              	.LVL87:
 618:../utilities/fsl_shell.c ****             }
 690              		.loc 1 618 0
 691 0056 0132     		adds	r2, r2, #1
 692              	.LVL88:
 693 0058 F4E7     		b	.L59
 694              	.L62:
 596:../utilities/fsl_shell.c ****             position++;
 695              		.loc 1 596 0
 696 005a 0133     		adds	r3, r3, #1
 697              	.LVL89:
 597:../utilities/fsl_shell.c ****             argv[argc] = p;
 698              		.loc 1 597 0
 699 005c 0132     		adds	r2, r2, #1
 700              	.LVL90:
 598:../utilities/fsl_shell.c ****             argc++;
 701              		.loc 1 598 0
 702 005e 8100     		lsls	r1, r0, #2
 703 0060 7350     		str	r3, [r6, r1]
 599:../utilities/fsl_shell.c ****             /* Skip this string */
 704              		.loc 1 599 0
 705 0062 0130     		adds	r0, r0, #1
 706              	.LVL91:
 601:../utilities/fsl_shell.c ****             {
 707              		.loc 1 601 0
 708 0064 01E0     		b	.L55
 709              	.L57:
 603:../utilities/fsl_shell.c ****                 position++;
 710              		.loc 1 603 0
 711 0066 0133     		adds	r3, r3, #1
 712              	.LVL92:
 604:../utilities/fsl_shell.c ****             }
 713              		.loc 1 604 0
 714 0068 0132     		adds	r2, r2, #1
 715              	.LVL93:
 716              	.L55:
 601:../utilities/fsl_shell.c ****             {
 717              		.loc 1 601 0
 718 006a 0021     		movs	r1, #0
 719 006c 5956     		ldrsb	r1, [r3, r1]
 720 006e 2229     		cmp	r1, #34
 721 0070 01D0     		beq	.L56
 601:../utilities/fsl_shell.c ****             {
 722              		.loc 1 601 0 is_stmt 0 discriminator 1
 723 0072 AA42     		cmp	r2, r5
 724 0074 F7D3     		bcc	.L57
 725              	.L56:
 607:../utilities/fsl_shell.c ****             p++;
 726              		.loc 1 607 0 is_stmt 1
 727 0076 0021     		movs	r1, #0
 728 0078 1970     		strb	r1, [r3]
 608:../utilities/fsl_shell.c ****             position++;
 729              		.loc 1 608 0
 730 007a 0133     		adds	r3, r3, #1
 731              	.LVL94:
 609:../utilities/fsl_shell.c ****         }
 732              		.loc 1 609 0
 733 007c 0132     		adds	r2, r2, #1
 734              	.LVL95:
 735              	.L51:
 584:../utilities/fsl_shell.c ****     {
 736              		.loc 1 584 0
 737 007e AA42     		cmp	r2, r5
 738 0080 D5D3     		bcc	.L61
 623:../utilities/fsl_shell.c **** 
 739              		.loc 1 623 0
 740              		@ sp needed
 741              	.LVL96:
 742              	.LVL97:
 743              	.LVL98:
 744 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 745              	.L64:
 746              		.align	2
 747              	.L63:
 748 0084 00000000 		.word	.LANCHOR1
 749              		.cfi_endproc
 750              	.LFE63:
 752              		.section	.text.ProcessCommand,"ax",%progbits
 753              		.align	1
 754              		.syntax unified
 755              		.code	16
 756              		.thumb_func
 757              		.fpu softvfp
 759              	ProcessCommand:
 760              	.LFB57:
 356:../utilities/fsl_shell.c ****     static const shell_command_context_t *tmpCommand = NULL;
 761              		.loc 1 356 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 264
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              	.LVL99:
 766 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 767              		.cfi_def_cfa_offset 20
 768              		.cfi_offset 4, -20
 769              		.cfi_offset 5, -16
 770              		.cfi_offset 6, -12
 771              		.cfi_offset 7, -8
 772              		.cfi_offset 14, -4
 773 0002 CE46     		mov	lr, r9
 774 0004 00B5     		push	{lr}
 775              		.cfi_def_cfa_offset 24
 776              		.cfi_offset 9, -24
 777 0006 C2B0     		sub	sp, sp, #264
 778              		.cfi_def_cfa_offset 288
 779 0008 0500     		movs	r5, r0
 780 000a 0C00     		movs	r4, r1
 781              	.LVL100:
 366:../utilities/fsl_shell.c ****     argc = ParseLine(cmd, tmpLen, argv);
 782              		.loc 1 366 0
 783 000c 0800     		movs	r0, r1
 784              	.LVL101:
 785 000e FFF7FEFF 		bl	StrLen
 786              	.LVL102:
 367:../utilities/fsl_shell.c **** 
 787              		.loc 1 367 0
 788 0012 FF21     		movs	r1, #255
 789 0014 0140     		ands	r1, r0
 790 0016 02AA     		add	r2, sp, #8
 791 0018 2000     		movs	r0, r4
 792              	.LVL103:
 793 001a FFF7FEFF 		bl	ParseLine
 794              	.LVL104:
 795 001e 0190     		str	r0, [sp, #4]
 796              	.LVL105:
 369:../utilities/fsl_shell.c ****     {
 797              		.loc 1 369 0
 798 0020 554B     		ldr	r3, .L91
 799 0022 1B68     		ldr	r3, [r3]
 800 0024 002B     		cmp	r3, #0
 801 0026 10D0     		beq	.L85
 361:../utilities/fsl_shell.c ****     uint8_t tmpCommandLen;
 802              		.loc 1 361 0
 803 0028 0122     		movs	r2, #1
 804              	.LVL106:
 805              	.L66:
 407:../utilities/fsl_shell.c ****     {
 806              		.loc 1 407 0
 807 002a 534B     		ldr	r3, .L91
 808 002c 1B68     		ldr	r3, [r3]
 809 002e 002B     		cmp	r3, #0
 810 0030 4AD0     		beq	.L72
 407:../utilities/fsl_shell.c ****     {
 811              		.loc 1 407 0 is_stmt 0 discriminator 1
 812 0032 012A     		cmp	r2, #1
 813 0034 48D1     		bne	.L72
 409:../utilities/fsl_shell.c ****             "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available comman
 814              		.loc 1 409 0 is_stmt 1
 815 0036 2B6D     		ldr	r3, [r5, #80]
 816 0038 5048     		ldr	r0, .L91+4
 817 003a 9847     		blx	r3
 818              	.LVL107:
 411:../utilities/fsl_shell.c ****     }
 819              		.loc 1 411 0
 820 003c 4E4B     		ldr	r3, .L91
 821 003e 0022     		movs	r2, #0
 822 0040 1A60     		str	r2, [r3]
 823              	.LVL108:
 824              	.L65:
 442:../utilities/fsl_shell.c **** 
 825              		.loc 1 442 0
 826 0042 42B0     		add	sp, sp, #264
 827              		@ sp needed
 828              	.LVL109:
 829 0044 04BC     		pop	{r2}
 830 0046 9146     		mov	r9, r2
 831 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 832              	.LVL110:
 833              	.L85:
 369:../utilities/fsl_shell.c ****     {
 834              		.loc 1 369 0 discriminator 1
 835 004a 0028     		cmp	r0, #0
 836 004c 01DD     		ble	.L86
 371:../utilities/fsl_shell.c ****         {
 837              		.loc 1 371 0
 838 004e 0026     		movs	r6, #0
 839 0050 09E0     		b	.L67
 840              	.L86:
 361:../utilities/fsl_shell.c ****     uint8_t tmpCommandLen;
 841              		.loc 1 361 0
 842 0052 0122     		movs	r2, #1
 843 0054 E9E7     		b	.L66
 844              	.LVL111:
 845              	.L68:
 379:../utilities/fsl_shell.c ****                 {
 846              		.loc 1 379 0
 847 0056 0299     		ldr	r1, [sp, #8]
 848 0058 0098     		ldr	r0, [sp]
 849              	.LVL112:
 850 005a FFF7FEFF 		bl	StrCompare
 851              	.LVL113:
 852 005e 0028     		cmp	r0, #0
 853 0060 18D0     		beq	.L87
 854              	.L69:
 371:../utilities/fsl_shell.c ****         {
 855              		.loc 1 371 0 discriminator 2
 856 0062 0136     		adds	r6, r6, #1
 857              	.LVL114:
 858 0064 F6B2     		uxtb	r6, r6
 859              	.LVL115:
 860              	.L67:
 371:../utilities/fsl_shell.c ****         {
 861              		.loc 1 371 0 is_stmt 0 discriminator 1
 862 0066 464A     		ldr	r2, .L91+8
 863 0068 5023     		movs	r3, #80
 864 006a D35C     		ldrb	r3, [r2, r3]
 865 006c B342     		cmp	r3, r6
 866 006e 21D9     		bls	.L88
 373:../utilities/fsl_shell.c ****             tmpCommandString = tmpCommand->pcCommand;
 867              		.loc 1 373 0 is_stmt 1
 868 0070 B300     		lsls	r3, r6, #2
 869 0072 434A     		ldr	r2, .L91+8
 870 0074 9F58     		ldr	r7, [r3, r2]
 871 0076 404B     		ldr	r3, .L91
 872 0078 1F60     		str	r7, [r3]
 374:../utilities/fsl_shell.c ****             tmpCommandLen = StrLen(tmpCommandString);
 873              		.loc 1 374 0
 874 007a 3B68     		ldr	r3, [r7]
 875 007c 0093     		str	r3, [sp]
 375:../utilities/fsl_shell.c ****             /* Compare with space or end of string */
 876              		.loc 1 375 0
 877 007e 1800     		movs	r0, r3
 878 0080 FFF7FEFF 		bl	StrLen
 879              	.LVL116:
 880 0084 FF22     		movs	r2, #255
 881 0086 0240     		ands	r2, r0
 377:../utilities/fsl_shell.c ****             {
 882              		.loc 1 377 0
 883 0088 A356     		ldrsb	r3, [r4, r2]
 884 008a 202B     		cmp	r3, #32
 885 008c E3D0     		beq	.L68
 377:../utilities/fsl_shell.c ****             {
 886              		.loc 1 377 0 is_stmt 0 discriminator 1
 887 008e 002B     		cmp	r3, #0
 888 0090 E7D1     		bne	.L69
 889 0092 E0E7     		b	.L68
 890              	.LVL117:
 891              	.L87:
 382:../utilities/fsl_shell.c ****                     {
 892              		.loc 1 382 0 is_stmt 1
 893 0094 3B7B     		ldrb	r3, [r7, #12]
 894 0096 FF2B     		cmp	r3, #255
 895 0098 0ED0     		beq	.L80
 386:../utilities/fsl_shell.c ****                     {
 896              		.loc 1 386 0
 897 009a 002B     		cmp	r3, #0
 898 009c 02D1     		bne	.L70
 386:../utilities/fsl_shell.c ****                     {
 899              		.loc 1 386 0 is_stmt 0 discriminator 1
 900 009e 019A     		ldr	r2, [sp, #4]
 901 00a0 012A     		cmp	r2, #1
 902 00a2 0BD0     		beq	.L81
 903              	.L70:
 390:../utilities/fsl_shell.c ****                     {
 904              		.loc 1 390 0 is_stmt 1
 905 00a4 002B     		cmp	r3, #0
 906 00a6 0BD0     		beq	.L82
 392:../utilities/fsl_shell.c ****                         {
 907              		.loc 1 392 0
 908 00a8 019A     		ldr	r2, [sp, #4]
 909 00aa 013A     		subs	r2, r2, #1
 910 00ac 9A42     		cmp	r2, r3
 911 00ae 09D0     		beq	.L83
 361:../utilities/fsl_shell.c ****     uint8_t tmpCommandLen;
 912              		.loc 1 361 0
 913 00b0 0122     		movs	r2, #1
 914 00b2 BAE7     		b	.L66
 915              	.L88:
 916 00b4 0122     		movs	r2, #1
 917 00b6 B8E7     		b	.L66
 918              	.L80:
 384:../utilities/fsl_shell.c ****                     }
 919              		.loc 1 384 0
 920 00b8 0022     		movs	r2, #0
 921 00ba B6E7     		b	.L66
 922              	.L81:
 388:../utilities/fsl_shell.c ****                     }
 923              		.loc 1 388 0
 924 00bc 0022     		movs	r2, #0
 925 00be B4E7     		b	.L66
 926              	.L82:
 399:../utilities/fsl_shell.c ****                     }
 927              		.loc 1 399 0
 928 00c0 0122     		movs	r2, #1
 929 00c2 B2E7     		b	.L66
 930              	.L83:
 394:../utilities/fsl_shell.c ****                         }
 931              		.loc 1 394 0
 932 00c4 0022     		movs	r2, #0
 933 00c6 B0E7     		b	.L66
 934              	.LVL118:
 935              	.L72:
 413:../utilities/fsl_shell.c ****     {
 936              		.loc 1 413 0
 937 00c8 002B     		cmp	r3, #0
 938 00ca 06D1     		bne	.L89
 438:../utilities/fsl_shell.c ****             "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\
 939              		.loc 1 438 0
 940 00cc 2B6D     		ldr	r3, [r5, #80]
 941 00ce 2D48     		ldr	r0, .L91+12
 942 00d0 9847     		blx	r3
 943              	.LVL119:
 440:../utilities/fsl_shell.c ****     }
 944              		.loc 1 440 0
 945 00d2 294B     		ldr	r3, .L91
 946 00d4 0022     		movs	r2, #0
 947 00d6 1A60     		str	r2, [r3]
 442:../utilities/fsl_shell.c **** 
 948              		.loc 1 442 0
 949 00d8 B3E7     		b	.L65
 950              	.LVL120:
 951              	.L89:
 415:../utilities/fsl_shell.c ****         /* Compare with last command. Push back to history buffer if different */
 952              		.loc 1 415 0
 953 00da 2000     		movs	r0, r4
 954 00dc FFF7FEFF 		bl	StrLen
 955              	.LVL121:
 956 00e0 0600     		movs	r6, r0
 957              	.LVL122:
 417:../utilities/fsl_shell.c ****         {
 958              		.loc 1 417 0
 959 00e2 5823     		movs	r3, #88
 960 00e4 9C46     		mov	ip, r3
 961 00e6 AC44     		add	ip, ip, r5
 962 00e8 6346     		mov	r3, ip
 963 00ea 0093     		str	r3, [sp]
 964 00ec 0200     		movs	r2, r0
 965 00ee 6146     		mov	r1, ip
 966 00f0 2000     		movs	r0, r4
 967              	.LVL123:
 968 00f2 FFF7FEFF 		bl	StrCompare
 969              	.LVL124:
 970 00f6 FF23     		movs	r3, #255
 971 00f8 1E40     		ands	r6, r3
 972 00fa B042     		cmp	r0, r6
 973 00fc 31D0     		beq	.L76
 419:../utilities/fsl_shell.c ****             {
 974              		.loc 1 419 0
 975 00fe 0227     		movs	r7, #2
 976              	.L75:
 977              	.LVL125:
 419:../utilities/fsl_shell.c ****             {
 978              		.loc 1 419 0 is_stmt 0 discriminator 1
 979 0100 002F     		cmp	r7, #0
 980 0102 18D0     		beq	.L90
 421:../utilities/fsl_shell.c ****                 tmpLen = StrLen(context->hist_buf[i - 1]);
 981              		.loc 1 421 0 is_stmt 1 discriminator 3
 982 0104 BE01     		lsls	r6, r7, #6
 983 0106 5836     		adds	r6, r6, #88
 984 0108 AE19     		adds	r6, r5, r6
 985 010a 4022     		movs	r2, #64
 986 010c 0021     		movs	r1, #0
 987 010e 3000     		movs	r0, r6
 988 0110 FFF7FEFF 		bl	memset
 989              	.LVL126:
 422:../utilities/fsl_shell.c ****                 StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 990              		.loc 1 422 0 discriminator 3
 991 0114 7B1E     		subs	r3, r7, #1
 992 0116 9946     		mov	r9, r3
 993 0118 9F01     		lsls	r7, r3, #6
 994              	.LVL127:
 995 011a 5837     		adds	r7, r7, #88
 996 011c EF19     		adds	r7, r5, r7
 997 011e 3800     		movs	r0, r7
 998 0120 FFF7FEFF 		bl	StrLen
 999              	.LVL128:
 423:../utilities/fsl_shell.c ****             }
 1000              		.loc 1 423 0 discriminator 3
 1001 0124 FF22     		movs	r2, #255
 1002 0126 0240     		ands	r2, r0
 1003 0128 3900     		movs	r1, r7
 1004 012a 3000     		movs	r0, r6
 1005              	.LVL129:
 1006 012c FFF7FEFF 		bl	StrCopy
 1007              	.LVL130:
 419:../utilities/fsl_shell.c ****             {
 1008              		.loc 1 419 0 discriminator 3
 1009 0130 4B46     		mov	r3, r9
 1010 0132 DFB2     		uxtb	r7, r3
 1011              	.LVL131:
 1012 0134 E4E7     		b	.L75
 1013              	.L90:
 425:../utilities/fsl_shell.c ****             tmpLen = StrLen(cmd);
 1014              		.loc 1 425 0
 1015 0136 4022     		movs	r2, #64
 1016 0138 0021     		movs	r1, #0
 1017 013a 009E     		ldr	r6, [sp]
 1018 013c 3000     		movs	r0, r6
 1019 013e FFF7FEFF 		bl	memset
 1020              	.LVL132:
 426:../utilities/fsl_shell.c ****             StrCopy(context->hist_buf[0], cmd, tmpLen);
 1021              		.loc 1 426 0
 1022 0142 2000     		movs	r0, r4
 1023 0144 FFF7FEFF 		bl	StrLen
 1024              	.LVL133:
 427:../utilities/fsl_shell.c ****             if (context->hist_count < SHELL_HIST_MAX)
 1025              		.loc 1 427 0
 1026 0148 FF22     		movs	r2, #255
 1027 014a 0240     		ands	r2, r0
 1028 014c 2100     		movs	r1, r4
 1029 014e 3000     		movs	r0, r6
 1030              	.LVL134:
 1031 0150 FFF7FEFF 		bl	StrCopy
 1032              	.LVL135:
 428:../utilities/fsl_shell.c ****             {
 1033              		.loc 1 428 0
 1034 0154 5623     		movs	r3, #86
 1035 0156 EB5A     		ldrh	r3, [r5, r3]
 1036 0158 022B     		cmp	r3, #2
 1037 015a 02D8     		bhi	.L76
 430:../utilities/fsl_shell.c ****             }
 1038              		.loc 1 430 0
 1039 015c 0133     		adds	r3, r3, #1
 1040 015e 5622     		movs	r2, #86
 1041 0160 AB52     		strh	r3, [r5, r2]
 1042              	.LVL136:
 1043              	.L76:
 433:../utilities/fsl_shell.c ****         tmpCommand = NULL;
 1044              		.loc 1 433 0
 1045 0162 054C     		ldr	r4, .L91
 1046              	.LVL137:
 1047 0164 2368     		ldr	r3, [r4]
 1048 0166 9B68     		ldr	r3, [r3, #8]
 1049 0168 02AA     		add	r2, sp, #8
 1050 016a 0199     		ldr	r1, [sp, #4]
 1051 016c 2800     		movs	r0, r5
 1052 016e 9847     		blx	r3
 1053              	.LVL138:
 434:../utilities/fsl_shell.c ****     }
 1054              		.loc 1 434 0
 1055 0170 0023     		movs	r3, #0
 1056 0172 2360     		str	r3, [r4]
 1057 0174 65E7     		b	.L65
 1058              	.L92:
 1059 0176 C046     		.align	2
 1060              	.L91:
 1061 0178 00000000 		.word	.LANCHOR2
 1062 017c 00000000 		.word	.LC15
 1063 0180 00000000 		.word	.LANCHOR0
 1064 0184 5C000000 		.word	.LC17
 1065              		.cfi_endproc
 1066              	.LFE57:
 1068              		.section	.text.SHELL_Main,"ax",%progbits
 1069              		.align	1
 1070              		.global	SHELL_Main
 1071              		.syntax unified
 1072              		.code	16
 1073              		.thumb_func
 1074              		.fpu softvfp
 1076              	SHELL_Main:
 1077              	.LFB54:
 135:../utilities/fsl_shell.c ****     uint8_t ch;
 1078              		.loc 1 135 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              	.LVL139:
 1083 0000 70B5     		push	{r4, r5, r6, lr}
 1084              		.cfi_def_cfa_offset 16
 1085              		.cfi_offset 4, -16
 1086              		.cfi_offset 5, -12
 1087              		.cfi_offset 6, -8
 1088              		.cfi_offset 14, -4
 1089 0002 041E     		subs	r4, r0, #0
 139:../utilities/fsl_shell.c ****     {
 1090              		.loc 1 139 0
 1091 0004 00D1     		bne	.LCB1132
 1092 0006 3DE1     		b	.L126	@long jump
 1093              	.LCB1132:
 144:../utilities/fsl_shell.c ****     context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 1094              		.loc 1 144 0
 1095 0008 8C23     		movs	r3, #140
 1096 000a 5B00     		lsls	r3, r3, #1
 1097 000c 0022     		movs	r2, #0
 1098 000e C254     		strb	r2, [r0, r3]
 145:../utilities/fsl_shell.c ****     context->printf_data_func("Copyright (c) 2017 NXP Semiconductor\r\n");
 1099              		.loc 1 145 0
 1100 0010 9F49     		ldr	r1, .L140
 1101 0012 A048     		ldr	r0, .L140+4
 1102              	.LVL140:
 1103 0014 236D     		ldr	r3, [r4, #80]
 1104 0016 9847     		blx	r3
 1105              	.LVL141:
 146:../utilities/fsl_shell.c ****     context->printf_data_func(context->prompt);
 1106              		.loc 1 146 0
 1107 0018 9F48     		ldr	r0, .L140+8
 1108 001a 236D     		ldr	r3, [r4, #80]
 1109 001c 9847     		blx	r3
 1110              	.LVL142:
 147:../utilities/fsl_shell.c **** 
 1111              		.loc 1 147 0
 1112 001e 2068     		ldr	r0, [r4]
 1113 0020 236D     		ldr	r3, [r4, #80]
 1114 0022 9847     		blx	r3
 1115              	.LVL143:
 1116              	.L95:
 151:../utilities/fsl_shell.c ****         {
 1117              		.loc 1 151 0
 1118 0024 8C23     		movs	r3, #140
 1119 0026 5B00     		lsls	r3, r3, #1
 1120 0028 E35C     		ldrb	r3, [r4, r3]
 1121 002a 002B     		cmp	r3, #0
 1122 002c 00D0     		beq	.LCB1161
 1123 002e 2CE1     		b	.L127	@long jump
 1124              	.LCB1161:
 155:../utilities/fsl_shell.c ****         /* If error occured when getting a char, continue to receive a new char. */
 1125              		.loc 1 155 0
 1126 0030 2000     		movs	r0, r4
 1127 0032 FFF7FEFF 		bl	GetChar
 1128              	.LVL144:
 1129 0036 0500     		movs	r5, r0
 1130 0038 0300     		movs	r3, r0
 1131              	.LVL145:
 157:../utilities/fsl_shell.c ****         {
 1132              		.loc 1 157 0
 1133 003a FF28     		cmp	r0, #255
 1134 003c F2D0     		beq	.L95
 162:../utilities/fsl_shell.c ****         {
 1135              		.loc 1 162 0
 1136 003e 1B28     		cmp	r0, #27
 1137 0040 27D0     		beq	.L130
 167:../utilities/fsl_shell.c ****         {
 1138              		.loc 1 167 0
 1139 0042 2279     		ldrb	r2, [r4, #4]
 1140 0044 012A     		cmp	r2, #1
 1141 0046 27D0     		beq	.L131
 177:../utilities/fsl_shell.c ****         {
 1142              		.loc 1 177 0
 1143 0048 022A     		cmp	r2, #2
 1144 004a 4FD0     		beq	.L132
 218:../utilities/fsl_shell.c ****         {
 1145              		.loc 1 218 0
 1146 004c 0928     		cmp	r0, #9
 1147 004e 00D1     		bne	.LCB1178
 1148 0050 A6E0     		b	.L133	@long jump
 1149              	.LCB1178:
 235:../utilities/fsl_shell.c ****         {
 1150              		.loc 1 235 0
 1151 0052 6028     		cmp	r0, #96
 1152 0054 00D1     		bne	.LCB1180
 1153 0056 A5E0     		b	.L134	@long jump
 1154              	.LCB1180:
 1155              	.L111:
 240:../utilities/fsl_shell.c ****         {
 1156              		.loc 1 240 0
 1157 0058 7F2B     		cmp	r3, #127
 1158 005a 01D0     		beq	.L112
 240:../utilities/fsl_shell.c ****         {
 1159              		.loc 1 240 0 is_stmt 0 discriminator 1
 1160 005c 082B     		cmp	r3, #8
 1161 005e 1FD1     		bne	.L100
 1162              	.L112:
 243:../utilities/fsl_shell.c ****             {
 1163              		.loc 1 243 0 is_stmt 1
 1164 0060 4723     		movs	r3, #71
 1165 0062 E25C     		ldrb	r2, [r4, r3]
 1166 0064 002A     		cmp	r2, #0
 1167 0066 DDD0     		beq	.L95
 248:../utilities/fsl_shell.c ****             context->c_pos--;
 1168              		.loc 1 248 0
 1169 0068 4621     		movs	r1, #70
 1170 006a 635C     		ldrb	r3, [r4, r1]
 1171 006c 013B     		subs	r3, r3, #1
 1172 006e DBB2     		uxtb	r3, r3
 1173 0070 6354     		strb	r3, [r4, r1]
 249:../utilities/fsl_shell.c **** 
 1174              		.loc 1 249 0
 1175 0072 013A     		subs	r2, r2, #1
 1176 0074 D2B2     		uxtb	r2, r2
 1177 0076 0131     		adds	r1, r1, #1
 1178 0078 6254     		strb	r2, [r4, r1]
 251:../utilities/fsl_shell.c ****             {
 1179              		.loc 1 251 0
 1180 007a 9342     		cmp	r3, r2
 1181 007c 00D9     		bls	.LCB1201
 1182 007e 9CE0     		b	.L135	@long jump
 1183              	.LCB1201:
 266:../utilities/fsl_shell.c ****                 context->line[context->l_pos] = 0;
 1184              		.loc 1 266 0
 1185 0080 8648     		ldr	r0, .L140+12
 1186              	.LVL146:
 1187 0082 236D     		ldr	r3, [r4, #80]
 1188 0084 9847     		blx	r3
 1189              	.LVL147:
 267:../utilities/fsl_shell.c ****             }
 1190              		.loc 1 267 0
 1191 0086 4623     		movs	r3, #70
 1192 0088 E35C     		ldrb	r3, [r4, r3]
 1193 008a E318     		adds	r3, r4, r3
 1194 008c 0022     		movs	r2, #0
 1195 008e 5A71     		strb	r2, [r3, #5]
 269:../utilities/fsl_shell.c ****         }
 1196              		.loc 1 269 0
 1197 0090 C8E7     		b	.L95
 1198              	.LVL148:
 1199              	.L130:
 164:../utilities/fsl_shell.c ****             continue;
 1200              		.loc 1 164 0
 1201 0092 1A3B     		subs	r3, r3, #26
 1202 0094 2371     		strb	r3, [r4, #4]
 165:../utilities/fsl_shell.c ****         }
 1203              		.loc 1 165 0
 1204 0096 C5E7     		b	.L95
 1205              	.L131:
 170:../utilities/fsl_shell.c ****             {
 1206              		.loc 1 170 0
 1207 0098 5B28     		cmp	r0, #91
 1208 009a 24D0     		beq	.L136
 175:../utilities/fsl_shell.c ****         }
 1209              		.loc 1 175 0
 1210 009c 0022     		movs	r2, #0
 1211 009e 2271     		strb	r2, [r4, #4]
 1212              	.L100:
 276:../utilities/fsl_shell.c ****         {
 1213              		.loc 1 276 0
 1214 00a0 4622     		movs	r2, #70
 1215 00a2 A25C     		ldrb	r2, [r4, r2]
 1216 00a4 3E2A     		cmp	r2, #62
 1217 00a6 02D9     		bls	.L117
 278:../utilities/fsl_shell.c ****         }
 1218              		.loc 1 278 0
 1219 00a8 4622     		movs	r2, #70
 1220 00aa 0021     		movs	r1, #0
 1221 00ac A154     		strb	r1, [r4, r2]
 1222              	.L117:
 282:../utilities/fsl_shell.c ****         {
 1223              		.loc 1 282 0
 1224 00ae 0D2B     		cmp	r3, #13
 1225 00b0 00D1     		bne	.LCB1243
 1226 00b2 A1E0     		b	.L118	@long jump
 1227              	.LCB1243:
 282:../utilities/fsl_shell.c ****         {
 1228              		.loc 1 282 0 is_stmt 0 discriminator 1
 1229 00b4 0A2B     		cmp	r3, #10
 1230 00b6 00D1     		bne	.LCB1245
 1231 00b8 9EE0     		b	.L118	@long jump
 1232              	.LCB1245:
 311:../utilities/fsl_shell.c ****         {
 1233              		.loc 1 311 0 is_stmt 1
 1234 00ba 4723     		movs	r3, #71
 1235 00bc E35C     		ldrb	r3, [r4, r3]
 1236 00be 4622     		movs	r2, #70
 1237 00c0 A25C     		ldrb	r2, [r4, r2]
 1238 00c2 9342     		cmp	r3, r2
 1239 00c4 00D2     		bcs	.LCB1251
 1240 00c6 C2E0     		b	.L137	@long jump
 1241              	.LCB1251:
 325:../utilities/fsl_shell.c ****             context->printf_data_func("%c", ch);
 1242              		.loc 1 325 0
 1243 00c8 A218     		adds	r2, r4, r2
 1244 00ca 5571     		strb	r5, [r2, #5]
 326:../utilities/fsl_shell.c ****         }
 1245              		.loc 1 326 0
 1246 00cc 2900     		movs	r1, r5
 1247 00ce 7448     		ldr	r0, .L140+16
 1248              	.LVL149:
 1249 00d0 236D     		ldr	r3, [r4, #80]
 1250 00d2 9847     		blx	r3
 1251              	.LVL150:
 1252              	.L125:
 330:../utilities/fsl_shell.c ****         context->c_pos++;
 1253              		.loc 1 330 0
 1254 00d4 4622     		movs	r2, #70
 1255 00d6 A35C     		ldrb	r3, [r4, r2]
 1256 00d8 0133     		adds	r3, r3, #1
 1257 00da A354     		strb	r3, [r4, r2]
 331:../utilities/fsl_shell.c ****     }
 1258              		.loc 1 331 0
 1259 00dc 0132     		adds	r2, r2, #1
 1260 00de A35C     		ldrb	r3, [r4, r2]
 1261 00e0 0133     		adds	r3, r3, #1
 1262 00e2 A354     		strb	r3, [r4, r2]
 1263 00e4 9EE7     		b	.L95
 1264              	.LVL151:
 1265              	.L136:
 172:../utilities/fsl_shell.c ****                 continue;
 1266              		.loc 1 172 0
 1267 00e6 593B     		subs	r3, r3, #89
 1268 00e8 2371     		strb	r3, [r4, #4]
 173:../utilities/fsl_shell.c ****             }
 1269              		.loc 1 173 0
 1270 00ea 9BE7     		b	.L95
 1271              	.L132:
 179:../utilities/fsl_shell.c **** 
 1272              		.loc 1 179 0
 1273 00ec 0022     		movs	r2, #0
 1274 00ee 2271     		strb	r2, [r4, #4]
 181:../utilities/fsl_shell.c ****             {
 1275              		.loc 1 181 0
 1276 00f0 4228     		cmp	r0, #66
 1277 00f2 22D0     		beq	.L103
 1278 00f4 0FD9     		bls	.L138
 1279 00f6 4328     		cmp	r0, #67
 1280 00f8 2CD0     		beq	.L106
 1281 00fa 4428     		cmp	r0, #68
 1282 00fc 92D1     		bne	.L95
 199:../utilities/fsl_shell.c ****                     {
 1283              		.loc 1 199 0
 1284 00fe 4723     		movs	r3, #71
 1285 0100 E35C     		ldrb	r3, [r4, r3]
 1286 0102 002B     		cmp	r3, #0
 1287 0104 8ED0     		beq	.L95
 201:../utilities/fsl_shell.c ****                         context->c_pos--;
 1288              		.loc 1 201 0
 1289 0106 6748     		ldr	r0, .L140+20
 1290              	.LVL152:
 1291 0108 236D     		ldr	r3, [r4, #80]
 1292 010a 9847     		blx	r3
 1293              	.LVL153:
 202:../utilities/fsl_shell.c ****                     }
 1294              		.loc 1 202 0
 1295 010c 4722     		movs	r2, #71
 1296 010e A35C     		ldrb	r3, [r4, r2]
 1297 0110 013B     		subs	r3, r3, #1
 1298 0112 A354     		strb	r3, [r4, r2]
 1299 0114 86E7     		b	.L95
 1300              	.LVL154:
 1301              	.L138:
 181:../utilities/fsl_shell.c ****             {
 1302              		.loc 1 181 0
 1303 0116 4128     		cmp	r0, #65
 1304 0118 84D1     		bne	.L95
 185:../utilities/fsl_shell.c ****                     if (context->hist_current < (context->hist_count - 1))
 1305              		.loc 1 185 0
 1306 011a 5425     		movs	r5, #84
 1307 011c 615D     		ldrb	r1, [r4, r5]
 1308 011e 2000     		movs	r0, r4
 1309              	.LVL155:
 1310 0120 FFF7FEFF 		bl	GetHistoryCommand
 1311              	.LVL156:
 186:../utilities/fsl_shell.c ****                     {
 1312              		.loc 1 186 0
 1313 0124 625B     		ldrh	r2, [r4, r5]
 1314 0126 5623     		movs	r3, #86
 1315 0128 E35A     		ldrh	r3, [r4, r3]
 1316 012a 013B     		subs	r3, r3, #1
 1317 012c 9A42     		cmp	r2, r3
 1318 012e 00DB     		blt	.LCB1328
 1319 0130 78E7     		b	.L95	@long jump
 1320              	.LCB1328:
 188:../utilities/fsl_shell.c ****                     }
 1321              		.loc 1 188 0
 1322 0132 0132     		adds	r2, r2, #1
 1323 0134 5423     		movs	r3, #84
 1324 0136 E252     		strh	r2, [r4, r3]
 1325 0138 74E7     		b	.L95
 1326              	.LVL157:
 1327              	.L103:
 192:../utilities/fsl_shell.c ****                     if (context->hist_current > 0)
 1328              		.loc 1 192 0
 1329 013a 5425     		movs	r5, #84
 1330 013c 615D     		ldrb	r1, [r4, r5]
 1331 013e 2000     		movs	r0, r4
 1332              	.LVL158:
 1333 0140 FFF7FEFF 		bl	GetHistoryCommand
 1334              	.LVL159:
 193:../utilities/fsl_shell.c ****                     {
 1335              		.loc 1 193 0
 1336 0144 635B     		ldrh	r3, [r4, r5]
 1337 0146 002B     		cmp	r3, #0
 1338 0148 00D1     		bne	.LCB1347
 1339 014a 6BE7     		b	.L95	@long jump
 1340              	.LCB1347:
 195:../utilities/fsl_shell.c ****                     }
 1341              		.loc 1 195 0
 1342 014c 013B     		subs	r3, r3, #1
 1343 014e 5422     		movs	r2, #84
 1344 0150 A352     		strh	r3, [r4, r2]
 1345 0152 67E7     		b	.L95
 1346              	.LVL160:
 1347              	.L106:
 206:../utilities/fsl_shell.c ****                     {
 1348              		.loc 1 206 0
 1349 0154 4723     		movs	r3, #71
 1350 0156 E35C     		ldrb	r3, [r4, r3]
 1351 0158 4622     		movs	r2, #70
 1352 015a A25C     		ldrb	r2, [r4, r2]
 1353 015c 9342     		cmp	r3, r2
 1354 015e 00D3     		bcc	.LCB1362
 1355 0160 60E7     		b	.L95	@long jump
 1356              	.LCB1362:
 208:../utilities/fsl_shell.c ****                         context->c_pos++;
 1357              		.loc 1 208 0
 1358 0162 E318     		adds	r3, r4, r3
 1359 0164 0521     		movs	r1, #5
 1360 0166 5956     		ldrsb	r1, [r3, r1]
 1361 0168 4D48     		ldr	r0, .L140+16
 1362              	.LVL161:
 1363 016a 236D     		ldr	r3, [r4, #80]
 1364 016c 9847     		blx	r3
 1365              	.LVL162:
 209:../utilities/fsl_shell.c ****                     }
 1366              		.loc 1 209 0
 1367 016e 4722     		movs	r2, #71
 1368 0170 A35C     		ldrb	r3, [r4, r2]
 1369 0172 0133     		adds	r3, r3, #1
 1370 0174 A354     		strb	r3, [r4, r2]
 215:../utilities/fsl_shell.c ****         }
 1371              		.loc 1 215 0
 1372 0176 55E7     		b	.L95
 1373              	.LVL163:
 1374              	.L110:
 224:../utilities/fsl_shell.c ****             }
 1375              		.loc 1 224 0 discriminator 3
 1376 0178 4A48     		ldr	r0, .L140+20
 1377 017a 236D     		ldr	r3, [r4, #80]
 1378 017c 9847     		blx	r3
 1379              	.LVL164:
 222:../utilities/fsl_shell.c ****             {
 1380              		.loc 1 222 0 discriminator 3
 1381 017e 0135     		adds	r5, r5, #1
 1382              	.LVL165:
 1383              	.L108:
 222:../utilities/fsl_shell.c ****             {
 1384              		.loc 1 222 0 is_stmt 0 discriminator 1
 1385 0180 4723     		movs	r3, #71
 1386 0182 E35C     		ldrb	r3, [r4, r3]
 1387 0184 AB42     		cmp	r3, r5
 1388 0186 F7DC     		bgt	.L110
 227:../utilities/fsl_shell.c ****             /* Move position to end */
 1389              		.loc 1 227 0 is_stmt 1
 1390 0188 2000     		movs	r0, r4
 1391 018a FFF7FEFF 		bl	AutoComplete
 1392              	.LVL166:
 229:../utilities/fsl_shell.c **** #endif
 1393              		.loc 1 229 0
 1394 018e 601D     		adds	r0, r4, #5
 1395 0190 FFF7FEFF 		bl	StrLen
 1396              	.LVL167:
 1397 0194 C0B2     		uxtb	r0, r0
 1398 0196 4623     		movs	r3, #70
 1399 0198 E054     		strb	r0, [r4, r3]
 1400 019a 0133     		adds	r3, r3, #1
 1401 019c E054     		strb	r0, [r4, r3]
 231:../utilities/fsl_shell.c ****         }
 1402              		.loc 1 231 0
 1403 019e 41E7     		b	.L95
 1404              	.LVL168:
 1405              	.L133:
 222:../utilities/fsl_shell.c ****             {
 1406              		.loc 1 222 0
 1407 01a0 0025     		movs	r5, #0
 1408 01a2 EDE7     		b	.L108
 1409              	.L134:
 235:../utilities/fsl_shell.c ****         {
 1410              		.loc 1 235 0 discriminator 1
 1411 01a4 4622     		movs	r2, #70
 1412 01a6 A25C     		ldrb	r2, [r4, r2]
 1413 01a8 002A     		cmp	r2, #0
 1414 01aa 00D0     		beq	.LCB1425
 1415 01ac 54E7     		b	.L111	@long jump
 1416              	.LCB1425:
 235:../utilities/fsl_shell.c ****         {
 1417              		.loc 1 235 0 is_stmt 0 discriminator 2
 1418 01ae 0522     		movs	r2, #5
 1419 01b0 A256     		ldrsb	r2, [r4, r2]
 1420 01b2 002A     		cmp	r2, #0
 1421 01b4 00D1     		bne	.LCB1429
 1422 01b6 73E7     		b	.L100	@long jump
 1423              	.LCB1429:
 1424 01b8 4EE7     		b	.L111
 1425              	.L135:
 253:../utilities/fsl_shell.c ****                         context->l_pos - context->c_pos);
 1426              		.loc 1 253 0 is_stmt 1
 1427 01ba A018     		adds	r0, r4, r2
 1428              	.LVL169:
 1429 01bc 0530     		adds	r0, r0, #5
 1430 01be 511C     		adds	r1, r2, #1
 1431 01c0 6118     		adds	r1, r4, r1
 1432 01c2 0531     		adds	r1, r1, #5
 254:../utilities/fsl_shell.c ****                 context->line[context->l_pos] = 0;
 1433              		.loc 1 254 0
 1434 01c4 9A1A     		subs	r2, r3, r2
 253:../utilities/fsl_shell.c ****                         context->l_pos - context->c_pos);
 1435              		.loc 1 253 0
 1436 01c6 FFF7FEFF 		bl	memmove
 1437              	.LVL170:
 255:../utilities/fsl_shell.c ****                 context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 1438              		.loc 1 255 0
 1439 01ca 4623     		movs	r3, #70
 1440 01cc E35C     		ldrb	r3, [r4, r3]
 1441 01ce E318     		adds	r3, r4, r3
 1442 01d0 0022     		movs	r2, #0
 1443 01d2 5A71     		strb	r2, [r3, #5]
 256:../utilities/fsl_shell.c **** 
 1444              		.loc 1 256 0
 1445 01d4 4725     		movs	r5, #71
 1446 01d6 615D     		ldrb	r1, [r4, r5]
 1447 01d8 6118     		adds	r1, r4, r1
 1448 01da 0531     		adds	r1, r1, #5
 1449 01dc 3248     		ldr	r0, .L140+24
 1450 01de 236D     		ldr	r3, [r4, #80]
 1451 01e0 9847     		blx	r3
 1452              	.LVL171:
 259:../utilities/fsl_shell.c ****                 {
 1453              		.loc 1 259 0
 1454 01e2 655D     		ldrb	r5, [r4, r5]
 1455              	.LVL172:
 1456 01e4 03E0     		b	.L114
 1457              	.L115:
 261:../utilities/fsl_shell.c ****                 }
 1458              		.loc 1 261 0 discriminator 3
 1459 01e6 2F48     		ldr	r0, .L140+20
 1460 01e8 236D     		ldr	r3, [r4, #80]
 1461 01ea 9847     		blx	r3
 1462              	.LVL173:
 259:../utilities/fsl_shell.c ****                 {
 1463              		.loc 1 259 0 discriminator 3
 1464 01ec 0135     		adds	r5, r5, #1
 1465              	.LVL174:
 1466              	.L114:
 259:../utilities/fsl_shell.c ****                 {
 1467              		.loc 1 259 0 is_stmt 0 discriminator 1
 1468 01ee 4623     		movs	r3, #70
 1469 01f0 E35C     		ldrb	r3, [r4, r3]
 1470 01f2 AB42     		cmp	r3, r5
 1471 01f4 F7DA     		bge	.L115
 1472 01f6 15E7     		b	.L95
 1473              	.LVL175:
 1474              	.L118:
 1475              	.LBB2:
 286:../utilities/fsl_shell.c ****             {
 1476              		.loc 1 286 0 is_stmt 1
 1477 01f8 2C4A     		ldr	r2, .L140+28
 1478 01fa 1278     		ldrb	r2, [r2]
 1479 01fc 52B2     		sxtb	r2, r2
 1480 01fe 002A     		cmp	r2, #0
 1481 0200 0ED1     		bne	.L139
 1482              	.L120:
 292:../utilities/fsl_shell.c ****                 context->printf_data_func("\r\n");
 1483              		.loc 1 292 0
 1484 0202 2A4B     		ldr	r3, .L140+28
 1485 0204 1D70     		strb	r5, [r3]
 293:../utilities/fsl_shell.c ****                 /* If command line is NULL, will start a new transfer */
 1486              		.loc 1 293 0
 1487 0206 2A48     		ldr	r0, .L140+32
 1488              	.LVL176:
 1489 0208 236D     		ldr	r3, [r4, #80]
 1490 020a 9847     		blx	r3
 1491              	.LVL177:
 295:../utilities/fsl_shell.c ****                 {
 1492              		.loc 1 295 0
 1493 020c 651D     		adds	r5, r4, #5
 1494 020e 2800     		movs	r0, r5
 1495 0210 FFF7FEFF 		bl	StrLen
 1496              	.LVL178:
 1497 0214 0028     		cmp	r0, #0
 1498 0216 06D1     		bne	.L121
 297:../utilities/fsl_shell.c ****                     continue;
 1499              		.loc 1 297 0
 1500 0218 2068     		ldr	r0, [r4]
 1501 021a 236D     		ldr	r3, [r4, #80]
 1502 021c 9847     		blx	r3
 1503              	.LVL179:
 298:../utilities/fsl_shell.c ****                 }
 1504              		.loc 1 298 0
 1505 021e 01E7     		b	.L95
 1506              	.LVL180:
 1507              	.L139:
 286:../utilities/fsl_shell.c ****             {
 1508              		.loc 1 286 0 discriminator 1
 1509 0220 9A42     		cmp	r2, r3
 1510 0222 EED0     		beq	.L120
 1511 0224 FEE6     		b	.L95
 1512              	.LVL181:
 1513              	.L121:
 300:../utilities/fsl_shell.c ****                 /* Reset all params */
 1514              		.loc 1 300 0
 1515 0226 2900     		movs	r1, r5
 1516 0228 2000     		movs	r0, r4
 1517 022a FFF7FEFF 		bl	ProcessCommand
 1518              	.LVL182:
 302:../utilities/fsl_shell.c ****                 context->hist_current = 0;
 1519              		.loc 1 302 0
 1520 022e 0023     		movs	r3, #0
 1521 0230 4622     		movs	r2, #70
 1522 0232 A354     		strb	r3, [r4, r2]
 1523 0234 0132     		adds	r2, r2, #1
 1524 0236 A354     		strb	r3, [r4, r2]
 303:../utilities/fsl_shell.c ****                 context->printf_data_func(context->prompt);
 1525              		.loc 1 303 0
 1526 0238 0D32     		adds	r2, r2, #13
 1527 023a A352     		strh	r3, [r4, r2]
 304:../utilities/fsl_shell.c ****                 memset(context->line, 0, sizeof(context->line));
 1528              		.loc 1 304 0
 1529 023c 2068     		ldr	r0, [r4]
 1530 023e 236D     		ldr	r3, [r4, #80]
 1531 0240 9847     		blx	r3
 1532              	.LVL183:
 305:../utilities/fsl_shell.c ****                 continue;
 1533              		.loc 1 305 0
 1534 0242 4022     		movs	r2, #64
 1535 0244 0021     		movs	r1, #0
 1536 0246 2800     		movs	r0, r5
 1537 0248 FFF7FEFF 		bl	memset
 1538              	.LVL184:
 306:../utilities/fsl_shell.c ****             }
 1539              		.loc 1 306 0
 1540 024c EAE6     		b	.L95
 1541              	.LVL185:
 1542              	.L137:
 1543              	.LBE2:
 313:../utilities/fsl_shell.c ****                     context->l_pos - context->c_pos);
 1544              		.loc 1 313 0
 1545 024e 581C     		adds	r0, r3, #1
 1546              	.LVL186:
 1547 0250 2018     		adds	r0, r4, r0
 1548 0252 0530     		adds	r0, r0, #5
 1549 0254 E118     		adds	r1, r4, r3
 1550 0256 0531     		adds	r1, r1, #5
 314:../utilities/fsl_shell.c ****             context->line[context->c_pos] = ch;
 1551              		.loc 1 314 0
 1552 0258 D21A     		subs	r2, r2, r3
 313:../utilities/fsl_shell.c ****                     context->l_pos - context->c_pos);
 1553              		.loc 1 313 0
 1554 025a FFF7FEFF 		bl	memmove
 1555              	.LVL187:
 315:../utilities/fsl_shell.c ****             context->printf_data_func("%s", &context->line[context->c_pos]);
 1556              		.loc 1 315 0
 1557 025e 4726     		movs	r6, #71
 1558 0260 A15D     		ldrb	r1, [r4, r6]
 1559 0262 6118     		adds	r1, r4, r1
 1560 0264 4D71     		strb	r5, [r1, #5]
 316:../utilities/fsl_shell.c ****             /* Move the cursor to new position */
 1561              		.loc 1 316 0
 1562 0266 0531     		adds	r1, r1, #5
 1563 0268 1248     		ldr	r0, .L140+36
 1564 026a 236D     		ldr	r3, [r4, #80]
 1565 026c 9847     		blx	r3
 1566              	.LVL188:
 318:../utilities/fsl_shell.c ****             {
 1567              		.loc 1 318 0
 1568 026e A55D     		ldrb	r5, [r4, r6]
 1569              	.LVL189:
 1570 0270 03E0     		b	.L123
 1571              	.L124:
 320:../utilities/fsl_shell.c ****             }
 1572              		.loc 1 320 0 discriminator 3
 1573 0272 0C48     		ldr	r0, .L140+20
 1574 0274 236D     		ldr	r3, [r4, #80]
 1575 0276 9847     		blx	r3
 1576              	.LVL190:
 318:../utilities/fsl_shell.c ****             {
 1577              		.loc 1 318 0 discriminator 3
 1578 0278 0135     		adds	r5, r5, #1
 1579              	.LVL191:
 1580              	.L123:
 318:../utilities/fsl_shell.c ****             {
 1581              		.loc 1 318 0 is_stmt 0 discriminator 1
 1582 027a 4623     		movs	r3, #70
 1583 027c E35C     		ldrb	r3, [r4, r3]
 1584 027e AB42     		cmp	r3, r5
 1585 0280 F7DC     		bgt	.L124
 1586 0282 27E7     		b	.L125
 1587              	.LVL192:
 1588              	.L126:
 141:../utilities/fsl_shell.c ****     }
 1589              		.loc 1 141 0 is_stmt 1
 1590 0284 0120     		movs	r0, #1
 1591              	.LVL193:
 1592 0286 4042     		rsbs	r0, r0, #0
 1593 0288 00E0     		b	.L93
 1594              	.L127:
 333:../utilities/fsl_shell.c **** }
 1595              		.loc 1 333 0
 1596 028a 0020     		movs	r0, #0
 1597              	.L93:
 334:../utilities/fsl_shell.c **** 
 1598              		.loc 1 334 0
 1599              		@ sp needed
 1600              	.LVL194:
 1601 028c 70BD     		pop	{r4, r5, r6, pc}
 1602              	.L141:
 1603 028e C046     		.align	2
 1604              	.L140:
 1605 0290 00000000 		.word	.LC19
 1606 0294 0C000000 		.word	.LC21
 1607 0298 24000000 		.word	.LC23
 1608 029c 00000000 		.word	.LC10
 1609 02a0 50000000 		.word	.LC27
 1610 02a4 4C000000 		.word	.LC25
 1611 02a8 54000000 		.word	.LC29
 1612 02ac 00000000 		.word	.LANCHOR3
 1613 02b0 00000000 		.word	.LC3
 1614 02b4 5C000000 		.word	.LC34
 1615              		.cfi_endproc
 1616              	.LFE54:
 1618              		.section	.text.SHELL_RegisterCommand,"ax",%progbits
 1619              		.align	1
 1620              		.global	SHELL_RegisterCommand
 1621              		.syntax unified
 1622              		.code	16
 1623              		.thumb_func
 1624              		.fpu softvfp
 1626              	SHELL_RegisterCommand:
 1627              	.LFB64:
 626:../utilities/fsl_shell.c ****     int32_t result = 0;
 1628              		.loc 1 626 0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              	.LVL195:
 1633 0000 10B5     		push	{r4, lr}
 1634              		.cfi_def_cfa_offset 8
 1635              		.cfi_offset 4, -8
 1636              		.cfi_offset 14, -4
 1637              	.LVL196:
 630:../utilities/fsl_shell.c ****     {
 1638              		.loc 1 630 0
 1639 0002 074A     		ldr	r2, .L145
 1640 0004 5023     		movs	r3, #80
 1641 0006 D35C     		ldrb	r3, [r2, r3]
 1642 0008 132B     		cmp	r3, #19
 1643 000a 06D8     		bhi	.L144
 632:../utilities/fsl_shell.c ****     }
 1644              		.loc 1 632 0
 1645 000c 5C1C     		adds	r4, r3, #1
 1646 000e 5021     		movs	r1, #80
 1647 0010 5454     		strb	r4, [r2, r1]
 1648 0012 9B00     		lsls	r3, r3, #2
 1649 0014 9850     		str	r0, [r3, r2]
 627:../utilities/fsl_shell.c **** 
 1650              		.loc 1 627 0
 1651 0016 0020     		movs	r0, #0
 1652              	.LVL197:
 1653              	.L142:
 639:../utilities/fsl_shell.c **** 
 1654              		.loc 1 639 0
 1655              		@ sp needed
 1656 0018 10BD     		pop	{r4, pc}
 1657              	.LVL198:
 1658              	.L144:
 636:../utilities/fsl_shell.c ****     }
 1659              		.loc 1 636 0
 1660 001a 0120     		movs	r0, #1
 1661              	.LVL199:
 1662 001c 4042     		rsbs	r0, r0, #0
 1663              	.LVL200:
 638:../utilities/fsl_shell.c **** }
 1664              		.loc 1 638 0
 1665 001e FBE7     		b	.L142
 1666              	.L146:
 1667              		.align	2
 1668              	.L145:
 1669 0020 00000000 		.word	.LANCHOR0
 1670              		.cfi_endproc
 1671              	.LFE64:
 1673              		.section	.text.SHELL_Init,"ax",%progbits
 1674              		.align	1
 1675              		.global	SHELL_Init
 1676              		.syntax unified
 1677              		.code	16
 1678              		.thumb_func
 1679              		.fpu softvfp
 1681              	SHELL_Init:
 1682              	.LFB53:
 117:../utilities/fsl_shell.c ****     assert(send_cb != NULL);
 1683              		.loc 1 117 0
 1684              		.cfi_startproc
 1685              		@ args = 4, pretend = 0, frame = 0
 1686              		@ frame_needed = 0, uses_anonymous_args = 0
 1687              	.LVL201:
 1688 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1689              		.cfi_def_cfa_offset 24
 1690              		.cfi_offset 3, -24
 1691              		.cfi_offset 4, -20
 1692              		.cfi_offset 5, -16
 1693              		.cfi_offset 6, -12
 1694              		.cfi_offset 7, -8
 1695              		.cfi_offset 14, -4
 1696 0002 0400     		movs	r4, r0
 1697 0004 0F00     		movs	r7, r1
 1698 0006 1600     		movs	r6, r2
 1699 0008 1D00     		movs	r5, r3
 124:../utilities/fsl_shell.c ****     context->send_data_func = send_cb;
 1700              		.loc 1 124 0
 1701 000a 8E22     		movs	r2, #142
 1702              	.LVL202:
 1703 000c 5200     		lsls	r2, r2, #1
 1704 000e 0021     		movs	r1, #0
 1705              	.LVL203:
 1706 0010 FFF7FEFF 		bl	memset
 1707              	.LVL204:
 125:../utilities/fsl_shell.c ****     context->recv_data_func = recv_cb;
 1708              		.loc 1 125 0
 1709 0014 A764     		str	r7, [r4, #72]
 126:../utilities/fsl_shell.c ****     context->printf_data_func = shell_printf;
 1710              		.loc 1 126 0
 1711 0016 E664     		str	r6, [r4, #76]
 127:../utilities/fsl_shell.c ****     context->prompt = prompt;
 1712              		.loc 1 127 0
 1713 0018 2565     		str	r5, [r4, #80]
 128:../utilities/fsl_shell.c **** 
 1714              		.loc 1 128 0
 1715 001a 069B     		ldr	r3, [sp, #24]
 1716 001c 2360     		str	r3, [r4]
 130:../utilities/fsl_shell.c ****     SHELL_RegisterCommand(&xExitCommand);
 1717              		.loc 1 130 0
 1718 001e 0348     		ldr	r0, .L148
 1719 0020 FFF7FEFF 		bl	SHELL_RegisterCommand
 1720              	.LVL205:
 131:../utilities/fsl_shell.c **** }
 1721              		.loc 1 131 0
 1722 0024 0248     		ldr	r0, .L148+4
 1723 0026 FFF7FEFF 		bl	SHELL_RegisterCommand
 1724              	.LVL206:
 132:../utilities/fsl_shell.c **** 
 1725              		.loc 1 132 0
 1726              		@ sp needed
 1727              	.LVL207:
 1728              	.LVL208:
 1729              	.LVL209:
 1730              	.LVL210:
 1731 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1732              	.L149:
 1733              		.align	2
 1734              	.L148:
 1735 002c 00000000 		.word	.LANCHOR4
 1736 0030 00000000 		.word	.LANCHOR5
 1737              		.cfi_endproc
 1738              	.LFE53:
 1740              		.section	.bss.endoflinechar.5752,"aw",%nobits
 1741              		.set	.LANCHOR3,. + 0
 1744              	endoflinechar.5752:
 1745 0000 00       		.space	1
 1746              		.section	.bss.g_RegisteredCommands,"aw",%nobits
 1747              		.align	2
 1748              		.set	.LANCHOR0,. + 0
 1751              	g_RegisteredCommands:
 1752 0000 00000000 		.space	84
 1752      00000000 
 1752      00000000 
 1752      00000000 
 1752      00000000 
 1753              		.section	.bss.g_paramBuffer,"aw",%nobits
 1754              		.align	2
 1755              		.set	.LANCHOR1,. + 0
 1758              	g_paramBuffer:
 1759 0000 00000000 		.space	64
 1759      00000000 
 1759      00000000 
 1759      00000000 
 1759      00000000 
 1760              		.section	.bss.tmpCommand.5775,"aw",%nobits
 1761              		.align	2
 1762              		.set	.LANCHOR2,. + 0
 1765              	tmpCommand.5775:
 1766 0000 00000000 		.space	4
 1767              		.section	.rodata.AutoComplete.str1.4,"aMS",%progbits,1
 1768              		.align	2
 1769              	.LC3:
 1770 0000 0D0A00   		.ascii	"\015\012\000"
 1771 0003 00       		.space	1
 1772              	.LC6:
 1773 0004 25730D0A 		.ascii	"%s\015\012\000"
 1773      00
 1774 0009 000000   		.space	3
 1775              	.LC8:
 1776 000c 25732573 		.ascii	"%s%s\000"
 1776      00
 1777              		.section	.rodata.ExitCommand.str1.4,"aMS",%progbits,1
 1778              		.align	2
 1779              	.LC1:
 1780 0000 0D0A5348 		.ascii	"\015\012SHELL exited\015\012\000"
 1780      454C4C20 
 1780      65786974 
 1780      65640D0A 
 1780      00
 1781              		.section	.rodata.GetHistoryCommand.str1.4,"aMS",%progbits,1
 1782              		.align	2
 1783              	.LC10:
 1784 0000 08200800 		.ascii	"\010 \010\000"
 1785              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 1786              		.align	2
 1787              	.LC15:
 1788 0000 0D0A496E 		.ascii	"\015\012Incorrect command parameter(s).  Enter \"he"
 1788      636F7272 
 1788      65637420 
 1788      636F6D6D 
 1788      616E6420 
 1789 002c 6C702220 		.ascii	"lp\" to view a list of available commands.\015\012\015"
 1789      746F2076 
 1789      69657720 
 1789      61206C69 
 1789      7374206F 
 1790 0058 0A00     		.ascii	"\012\000"
 1791 005a 0000     		.space	2
 1792              	.LC17:
 1793 005c 0D0A436F 		.ascii	"\015\012Command not recognised.  Enter 'help' to vi"
 1793      6D6D616E 
 1793      64206E6F 
 1793      74207265 
 1793      636F676E 
 1794 0089 65772061 		.ascii	"ew a list of available commands.\015\012\015\012\000"
 1794      206C6973 
 1794      74206F66 
 1794      20617661 
 1794      696C6162 
 1795              		.section	.rodata.SHELL_Main.str1.4,"aMS",%progbits,1
 1796              		.align	2
 1797              	.LC19:
 1798 0000 41707220 		.ascii	"Apr  3 2018\000"
 1798      20332032 
 1798      30313800 
 1799              	.LC21:
 1800 000c 0D0A5348 		.ascii	"\015\012SHELL (build: %s)\015\012\000"
 1800      454C4C20 
 1800      28627569 
 1800      6C643A20 
 1800      2573290D 
 1801 0022 0000     		.space	2
 1802              	.LC23:
 1803 0024 436F7079 		.ascii	"Copyright (c) 2017 NXP Semiconductor\015\012\000"
 1803      72696768 
 1803      74202863 
 1803      29203230 
 1803      3137204E 
 1804 004b 00       		.space	1
 1805              	.LC25:
 1806 004c 0800     		.ascii	"\010\000"
 1807 004e 0000     		.space	2
 1808              	.LC27:
 1809 0050 256300   		.ascii	"%c\000"
 1810 0053 00       		.space	1
 1811              	.LC29:
 1812 0054 08257320 		.ascii	"\010%s  \010\000"
 1812      200800
 1813 005b 00       		.space	1
 1814              	.LC34:
 1815 005c 257300   		.ascii	"%s\000"
 1816              		.section	.rodata.str1.4,"aMS",%progbits,1
 1817              		.align	2
 1818              	.LC39:
 1819 0000 65786974 		.ascii	"exit\000"
 1819      00
 1820 0005 000000   		.space	3
 1821              	.LC40:
 1822 0008 0D0A2265 		.ascii	"\015\012\"exit\": Exit program\015\012\000"
 1822      78697422 
 1822      3A204578 
 1822      69742070 
 1822      726F6772 
 1823 0021 000000   		.space	3
 1824              	.LC41:
 1825 0024 68656C70 		.ascii	"help\000"
 1825      00
 1826 0029 000000   		.space	3
 1827              	.LC42:
 1828 002c 0D0A2268 		.ascii	"\015\012\"help\": Lists all the registered commands"
 1828      656C7022 
 1828      3A204C69 
 1828      73747320 
 1828      616C6C20 
 1829 0057 0D0A00   		.ascii	"\015\012\000"
 1830              		.section	.rodata.xExitCommand,"a",%progbits
 1831              		.align	2
 1832              		.set	.LANCHOR5,. + 0
 1835              	xExitCommand:
 1836 0000 00000000 		.word	.LC39
 1837 0004 08000000 		.word	.LC40
 1838 0008 00000000 		.word	ExitCommand
 1839 000c 00       		.byte	0
 1840 000d 000000   		.space	3
 1841              		.section	.rodata.xHelpCommand,"a",%progbits
 1842              		.align	2
 1843              		.set	.LANCHOR4,. + 0
 1846              	xHelpCommand:
 1847 0000 24000000 		.word	.LC41
 1848 0004 2C000000 		.word	.LC42
 1849 0008 00000000 		.word	HelpCommand
 1850 000c 00       		.byte	0
 1851 000d 000000   		.space	3
 1852              		.text
 1853              	.Letext0:
 1854              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 1855              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1856              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 1857              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 1858              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 1859              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 1860              		.file 8 "../CMSIS/system_MKL17Z4.h"
 1861              		.file 9 "../drivers/fsl_clock.h"
 1862              		.file 10 "../utilities/fsl_shell.h"
 1863              		.file 11 "../drivers/fsl_common.h"
 1864              		.file 12 "<built-in>"
 1865              		.file 13 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_shell.c
     /tmp/ccP1ODcW.s:16     .text.HelpCommand:0000000000000000 $t
     /tmp/ccP1ODcW.s:22     .text.HelpCommand:0000000000000000 HelpCommand
     /tmp/ccP1ODcW.s:72     .text.HelpCommand:0000000000000028 $d
     /tmp/ccP1ODcW.s:77     .text.ExitCommand:0000000000000000 $t
     /tmp/ccP1ODcW.s:83     .text.ExitCommand:0000000000000000 ExitCommand
     /tmp/ccP1ODcW.s:114    .text.ExitCommand:0000000000000018 $d
     /tmp/ccP1ODcW.s:119    .text.StrCopy:0000000000000000 $t
     /tmp/ccP1ODcW.s:125    .text.StrCopy:0000000000000000 StrCopy
     /tmp/ccP1ODcW.s:159    .text.StrLen:0000000000000000 $t
     /tmp/ccP1ODcW.s:165    .text.StrLen:0000000000000000 StrLen
     /tmp/ccP1ODcW.s:201    .text.StrCompare:0000000000000000 $t
     /tmp/ccP1ODcW.s:207    .text.StrCompare:0000000000000000 StrCompare
     /tmp/ccP1ODcW.s:259    .text.AutoComplete:0000000000000000 $t
     /tmp/ccP1ODcW.s:265    .text.AutoComplete:0000000000000000 AutoComplete
     /tmp/ccP1ODcW.s:427    .text.AutoComplete:00000000000000b8 $d
     /tmp/ccP1ODcW.s:435    .text.GetChar:0000000000000000 $t
     /tmp/ccP1ODcW.s:441    .text.GetChar:0000000000000000 GetChar
     /tmp/ccP1ODcW.s:473    .text.GetHistoryCommand:0000000000000000 $t
     /tmp/ccP1ODcW.s:479    .text.GetHistoryCommand:0000000000000000 GetHistoryCommand
     /tmp/ccP1ODcW.s:592    .text.GetHistoryCommand:0000000000000074 $d
     /tmp/ccP1ODcW.s:597    .text.ParseLine:0000000000000000 $t
     /tmp/ccP1ODcW.s:603    .text.ParseLine:0000000000000000 ParseLine
     /tmp/ccP1ODcW.s:748    .text.ParseLine:0000000000000084 $d
     /tmp/ccP1ODcW.s:753    .text.ProcessCommand:0000000000000000 $t
     /tmp/ccP1ODcW.s:759    .text.ProcessCommand:0000000000000000 ProcessCommand
     /tmp/ccP1ODcW.s:1061   .text.ProcessCommand:0000000000000178 $d
     /tmp/ccP1ODcW.s:1069   .text.SHELL_Main:0000000000000000 $t
     /tmp/ccP1ODcW.s:1076   .text.SHELL_Main:0000000000000000 SHELL_Main
     /tmp/ccP1ODcW.s:1605   .text.SHELL_Main:0000000000000290 $d
     /tmp/ccP1ODcW.s:1619   .text.SHELL_RegisterCommand:0000000000000000 $t
     /tmp/ccP1ODcW.s:1626   .text.SHELL_RegisterCommand:0000000000000000 SHELL_RegisterCommand
     /tmp/ccP1ODcW.s:1669   .text.SHELL_RegisterCommand:0000000000000020 $d
     /tmp/ccP1ODcW.s:1674   .text.SHELL_Init:0000000000000000 $t
     /tmp/ccP1ODcW.s:1681   .text.SHELL_Init:0000000000000000 SHELL_Init
     /tmp/ccP1ODcW.s:1735   .text.SHELL_Init:000000000000002c $d
     /tmp/ccP1ODcW.s:1744   .bss.endoflinechar.5752:0000000000000000 endoflinechar.5752
     /tmp/ccP1ODcW.s:1745   .bss.endoflinechar.5752:0000000000000000 $d
     /tmp/ccP1ODcW.s:1747   .bss.g_RegisteredCommands:0000000000000000 $d
     /tmp/ccP1ODcW.s:1751   .bss.g_RegisteredCommands:0000000000000000 g_RegisteredCommands
     /tmp/ccP1ODcW.s:1754   .bss.g_paramBuffer:0000000000000000 $d
     /tmp/ccP1ODcW.s:1758   .bss.g_paramBuffer:0000000000000000 g_paramBuffer
     /tmp/ccP1ODcW.s:1761   .bss.tmpCommand.5775:0000000000000000 $d
     /tmp/ccP1ODcW.s:1765   .bss.tmpCommand.5775:0000000000000000 tmpCommand.5775
     /tmp/ccP1ODcW.s:1768   .rodata.AutoComplete.str1.4:0000000000000000 $d
     /tmp/ccP1ODcW.s:1778   .rodata.ExitCommand.str1.4:0000000000000000 $d
     /tmp/ccP1ODcW.s:1782   .rodata.GetHistoryCommand.str1.4:0000000000000000 $d
     /tmp/ccP1ODcW.s:1786   .rodata.ProcessCommand.str1.4:0000000000000000 $d
     /tmp/ccP1ODcW.s:1796   .rodata.SHELL_Main.str1.4:0000000000000000 $d
     /tmp/ccP1ODcW.s:1817   .rodata.str1.4:0000000000000000 $d
     /tmp/ccP1ODcW.s:1831   .rodata.xExitCommand:0000000000000000 $d
     /tmp/ccP1ODcW.s:1835   .rodata.xExitCommand:0000000000000000 xExitCommand
     /tmp/ccP1ODcW.s:1842   .rodata.xHelpCommand:0000000000000000 $d
     /tmp/ccP1ODcW.s:1846   .rodata.xHelpCommand:0000000000000000 xHelpCommand

UNDEFINED SYMBOLS
memset
memmove
