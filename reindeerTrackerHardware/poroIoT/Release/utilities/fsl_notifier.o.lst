   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_notifier.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NOTIFIER_CreateHandle,"ax",%progbits
  16              		.align	1
  17              		.global	NOTIFIER_CreateHandle
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NOTIFIER_CreateHandle:
  24              	.LFB53:
  25              		.file 1 "../utilities/fsl_notifier.c"
   1:../utilities/fsl_notifier.c **** /*
   2:../utilities/fsl_notifier.c ****  * The Clear BSD License
   3:../utilities/fsl_notifier.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../utilities/fsl_notifier.c ****  * Copyright 2016-2017 NXP
   5:../utilities/fsl_notifier.c ****  * All rights reserved.
   6:../utilities/fsl_notifier.c ****  *
   7:../utilities/fsl_notifier.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../utilities/fsl_notifier.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../utilities/fsl_notifier.c ****  * that the following conditions are met:
  10:../utilities/fsl_notifier.c ****  *
  11:../utilities/fsl_notifier.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../utilities/fsl_notifier.c ****  *   of conditions and the following disclaimer.
  13:../utilities/fsl_notifier.c ****  *
  14:../utilities/fsl_notifier.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../utilities/fsl_notifier.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../utilities/fsl_notifier.c ****  *   other materials provided with the distribution.
  17:../utilities/fsl_notifier.c ****  *
  18:../utilities/fsl_notifier.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../utilities/fsl_notifier.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../utilities/fsl_notifier.c ****  *   software without specific prior written permission.
  21:../utilities/fsl_notifier.c ****  *
  22:../utilities/fsl_notifier.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../utilities/fsl_notifier.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../utilities/fsl_notifier.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../utilities/fsl_notifier.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../utilities/fsl_notifier.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../utilities/fsl_notifier.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../utilities/fsl_notifier.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../utilities/fsl_notifier.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../utilities/fsl_notifier.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../utilities/fsl_notifier.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../utilities/fsl_notifier.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../utilities/fsl_notifier.c ****  */
  34:../utilities/fsl_notifier.c **** 
  35:../utilities/fsl_notifier.c **** #include "fsl_notifier.h"
  36:../utilities/fsl_notifier.c **** 
  37:../utilities/fsl_notifier.c **** /*******************************************************************************
  38:../utilities/fsl_notifier.c ****  * Definitions
  39:../utilities/fsl_notifier.c ****  ******************************************************************************/
  40:../utilities/fsl_notifier.c **** 
  41:../utilities/fsl_notifier.c **** /*******************************************************************************
  42:../utilities/fsl_notifier.c ****  * Prototypes
  43:../utilities/fsl_notifier.c ****  ******************************************************************************/
  44:../utilities/fsl_notifier.c **** 
  45:../utilities/fsl_notifier.c **** /*******************************************************************************
  46:../utilities/fsl_notifier.c ****  * Variables
  47:../utilities/fsl_notifier.c ****  ******************************************************************************/
  48:../utilities/fsl_notifier.c **** 
  49:../utilities/fsl_notifier.c **** /*******************************************************************************
  50:../utilities/fsl_notifier.c ****  * Code
  51:../utilities/fsl_notifier.c ****  ******************************************************************************/
  52:../utilities/fsl_notifier.c **** 
  53:../utilities/fsl_notifier.c **** status_t NOTIFIER_CreateHandle(notifier_handle_t *notifierHandle,
  54:../utilities/fsl_notifier.c ****                                notifier_user_config_t **configs,
  55:../utilities/fsl_notifier.c ****                                uint8_t configsNumber,
  56:../utilities/fsl_notifier.c ****                                notifier_callback_config_t *callbacks,
  57:../utilities/fsl_notifier.c ****                                uint8_t callbacksNumber,
  58:../utilities/fsl_notifier.c ****                                notifier_user_function_t userFunction,
  59:../utilities/fsl_notifier.c ****                                void *userData)
  60:../utilities/fsl_notifier.c **** {
  26              		.loc 1 60 0
  27              		.cfi_startproc
  28              		@ args = 12, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              		.cfi_def_cfa_offset 32
  40 0004 0400     		movs	r4, r0
  41 0006 0D00     		movs	r5, r1
  42 0008 1700     		movs	r7, r2
  43 000a 0193     		str	r3, [sp, #4]
  44 000c 08AB     		add	r3, sp, #32
  45              	.LVL1:
  46 000e 1E78     		ldrb	r6, [r3]
  61:../utilities/fsl_notifier.c ****     /* Check input parameter - at least one configuration is required and userFunction must exist *
  62:../utilities/fsl_notifier.c ****     if ((configs == NULL) || (configsNumber == 0U) || (userFunction == NULL))
  47              		.loc 1 62 0
  48 0010 0029     		cmp	r1, #0
  49 0012 17D0     		beq	.L4
  50              		.loc 1 62 0 is_stmt 0 discriminator 1
  51 0014 002A     		cmp	r2, #0
  52 0016 17D0     		beq	.L5
  53              		.loc 1 62 0 discriminator 2
  54 0018 099A     		ldr	r2, [sp, #36]
  55              	.LVL2:
  56 001a 002A     		cmp	r2, #0
  57 001c 17D0     		beq	.L6
  63:../utilities/fsl_notifier.c ****     {
  64:../utilities/fsl_notifier.c ****         return kStatus_Fail;
  65:../utilities/fsl_notifier.c ****     }
  66:../utilities/fsl_notifier.c ****     /* Initialize handle structure */
  67:../utilities/fsl_notifier.c ****     memset(notifierHandle, 0, sizeof(notifier_handle_t));
  58              		.loc 1 67 0 is_stmt 1
  59 001e 0430     		adds	r0, r0, #4
  60              	.LVL3:
  61 0020 1422     		movs	r2, #20
  62 0022 0021     		movs	r1, #0
  63              	.LVL4:
  64 0024 FFF7FEFF 		bl	memset
  65              	.LVL5:
  68:../utilities/fsl_notifier.c ****     /* Store references to user-defined configurations */
  69:../utilities/fsl_notifier.c ****     notifierHandle->configsTable = configs;
  66              		.loc 1 69 0
  67 0028 2560     		str	r5, [r4]
  70:../utilities/fsl_notifier.c ****     notifierHandle->configsNumber = configsNumber;
  68              		.loc 1 70 0
  69 002a 2771     		strb	r7, [r4, #4]
  71:../utilities/fsl_notifier.c ****     /* Store references to user-defined callback configurations */
  72:../utilities/fsl_notifier.c ****     if (callbacks != NULL)
  70              		.loc 1 72 0
  71 002c 019B     		ldr	r3, [sp, #4]
  72 002e 002B     		cmp	r3, #0
  73 0030 02D0     		beq	.L3
  73:../utilities/fsl_notifier.c ****     {
  74:../utilities/fsl_notifier.c ****         notifierHandle->callbacksTable = callbacks;
  74              		.loc 1 74 0
  75 0032 A360     		str	r3, [r4, #8]
  75:../utilities/fsl_notifier.c ****         notifierHandle->callbacksNumber = callbacksNumber;
  76              		.loc 1 75 0
  77 0034 2673     		strb	r6, [r4, #12]
  76:../utilities/fsl_notifier.c ****         /* If all callbacks return success, then the errorCallbackIndex is callbacksNumber */
  77:../utilities/fsl_notifier.c ****         notifierHandle->errorCallbackIndex = callbacksNumber;
  78              		.loc 1 77 0
  79 0036 6673     		strb	r6, [r4, #13]
  80              	.L3:
  78:../utilities/fsl_notifier.c ****     }
  79:../utilities/fsl_notifier.c ****     notifierHandle->userFunction = userFunction;
  81              		.loc 1 79 0
  82 0038 099B     		ldr	r3, [sp, #36]
  83 003a 2361     		str	r3, [r4, #16]
  80:../utilities/fsl_notifier.c ****     notifierHandle->userData = userData;
  84              		.loc 1 80 0
  85 003c 0A9B     		ldr	r3, [sp, #40]
  86 003e 6361     		str	r3, [r4, #20]
  81:../utilities/fsl_notifier.c **** 
  82:../utilities/fsl_notifier.c ****     return kStatus_Success;
  87              		.loc 1 82 0
  88 0040 0020     		movs	r0, #0
  89 0042 02E0     		b	.L1
  90              	.LVL6:
  91              	.L4:
  64:../utilities/fsl_notifier.c ****     }
  92              		.loc 1 64 0
  93 0044 0120     		movs	r0, #1
  94              	.LVL7:
  95 0046 00E0     		b	.L1
  96              	.LVL8:
  97              	.L5:
  98 0048 0120     		movs	r0, #1
  99              	.LVL9:
 100              	.L1:
  83:../utilities/fsl_notifier.c **** }
 101              		.loc 1 83 0
 102 004a 03B0     		add	sp, sp, #12
 103              		@ sp needed
 104              	.LVL10:
 105              	.LVL11:
 106 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 107              	.LVL12:
 108              	.L6:
  64:../utilities/fsl_notifier.c ****     }
 109              		.loc 1 64 0
 110 004e 0120     		movs	r0, #1
 111              	.LVL13:
 112 0050 FBE7     		b	.L1
 113              		.cfi_endproc
 114              	.LFE53:
 116              		.section	.text.NOTIFIER_SwitchConfig,"ax",%progbits
 117              		.align	1
 118              		.global	NOTIFIER_SwitchConfig
 119              		.syntax unified
 120              		.code	16
 121              		.thumb_func
 122              		.fpu softvfp
 124              	NOTIFIER_SwitchConfig:
 125              	.LFB54:
  84:../utilities/fsl_notifier.c **** 
  85:../utilities/fsl_notifier.c **** status_t NOTIFIER_SwitchConfig(notifier_handle_t *notifierHandle, uint8_t configIndex, notifier_pol
  86:../utilities/fsl_notifier.c **** {
 126              		.loc 1 86 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 8
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              	.LVL14:
 131 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 132              		.cfi_def_cfa_offset 20
 133              		.cfi_offset 4, -20
 134              		.cfi_offset 5, -16
 135              		.cfi_offset 6, -12
 136              		.cfi_offset 7, -8
 137              		.cfi_offset 14, -4
 138 0002 CE46     		mov	lr, r9
 139 0004 4746     		mov	r7, r8
 140 0006 80B5     		push	{r7, lr}
 141              		.cfi_def_cfa_offset 28
 142              		.cfi_offset 8, -28
 143              		.cfi_offset 9, -24
 144 0008 83B0     		sub	sp, sp, #12
 145              		.cfi_def_cfa_offset 40
 146 000a 0500     		movs	r5, r0
 147 000c 8846     		mov	r8, r1
 148 000e 1700     		movs	r7, r2
 149              	.LVL15:
  87:../utilities/fsl_notifier.c ****     uint8_t currentStaticCallback = 0U;    /* Index to array of statically registered call-backs */
  88:../utilities/fsl_notifier.c ****     status_t returnCode = kStatus_Success; /* Function return */
  89:../utilities/fsl_notifier.c **** 
  90:../utilities/fsl_notifier.c ****     notifier_notification_block_t notifyBlock;  /*  Callback notification block */
  91:../utilities/fsl_notifier.c ****     notifier_callback_config_t *callbackConfig; /* Pointer to callback configuration */
  92:../utilities/fsl_notifier.c **** 
  93:../utilities/fsl_notifier.c ****     /* Set errorcallbackindex as callbacksNumber, which means no callback error now */
  94:../utilities/fsl_notifier.c ****     notifierHandle->errorCallbackIndex = notifierHandle->callbacksNumber;
 150              		.loc 1 94 0
 151 0010 037B     		ldrb	r3, [r0, #12]
 152 0012 4373     		strb	r3, [r0, #13]
  95:../utilities/fsl_notifier.c **** 
  96:../utilities/fsl_notifier.c ****     /* Requested configuration availability check */
  97:../utilities/fsl_notifier.c ****     if (configIndex >= notifierHandle->configsNumber)
 153              		.loc 1 97 0
 154 0014 0379     		ldrb	r3, [r0, #4]
 155 0016 8B42     		cmp	r3, r1
 156 0018 69D9     		bls	.L21
  98:../utilities/fsl_notifier.c ****     {
  99:../utilities/fsl_notifier.c ****         return kStatus_OutOfRange;
 100:../utilities/fsl_notifier.c ****     }
 101:../utilities/fsl_notifier.c **** 
 102:../utilities/fsl_notifier.c ****     /* Initialization of local variables from the Notifier handle structure */
 103:../utilities/fsl_notifier.c **** 
 104:../utilities/fsl_notifier.c ****     notifyBlock.policy = policy;
 157              		.loc 1 104 0
 158 001a 6B46     		mov	r3, sp
 159 001c 1A71     		strb	r2, [r3, #4]
 105:../utilities/fsl_notifier.c ****     notifyBlock.targetConfig = notifierHandle->configsTable[configIndex];
 160              		.loc 1 105 0
 161 001e 0368     		ldr	r3, [r0]
 162 0020 8A00     		lsls	r2, r1, #2
 163              	.LVL16:
 164 0022 9146     		mov	r9, r2
 165 0024 9B58     		ldr	r3, [r3, r2]
 166 0026 0093     		str	r3, [sp]
 106:../utilities/fsl_notifier.c ****     notifyBlock.notifyType = kNOTIFIER_NotifyBefore;
 167              		.loc 1 106 0
 168 0028 0123     		movs	r3, #1
 169 002a 6A46     		mov	r2, sp
 170 002c 5371     		strb	r3, [r2, #5]
  88:../utilities/fsl_notifier.c **** 
 171              		.loc 1 88 0
 172 002e 0026     		movs	r6, #0
 107:../utilities/fsl_notifier.c **** 
 108:../utilities/fsl_notifier.c ****     /* From all statically registered call-backs... */
 109:../utilities/fsl_notifier.c ****     for (currentStaticCallback = 0U; currentStaticCallback < notifierHandle->callbacksNumber; curre
 173              		.loc 1 109 0
 174 0030 0024     		movs	r4, #0
 175 0032 01E0     		b	.L9
 176              	.LVL17:
 177              	.L10:
 178              		.loc 1 109 0 is_stmt 0 discriminator 2
 179 0034 0134     		adds	r4, r4, #1
 180              	.LVL18:
 181 0036 E4B2     		uxtb	r4, r4
 182              	.LVL19:
 183              	.L9:
 184              		.loc 1 109 0 discriminator 1
 185 0038 2B7B     		ldrb	r3, [r5, #12]
 186 003a A342     		cmp	r3, r4
 187 003c 14D9     		bls	.L11
 110:../utilities/fsl_notifier.c ****     {
 111:../utilities/fsl_notifier.c ****         callbackConfig = &(notifierHandle->callbacksTable[currentStaticCallback]);
 188              		.loc 1 111 0 is_stmt 1
 189 003e 6200     		lsls	r2, r4, #1
 190 0040 1219     		adds	r2, r2, r4
 191 0042 9300     		lsls	r3, r2, #2
 192 0044 AA68     		ldr	r2, [r5, #8]
 193 0046 9446     		mov	ip, r2
 194 0048 6344     		add	r3, r3, ip
 195              	.LVL20:
 112:../utilities/fsl_notifier.c ****         /* ...notify only those which asked to be called before the configuration switch */
 113:../utilities/fsl_notifier.c ****         if (((uint32_t)callbackConfig->callbackType) & kNOTIFIER_CallbackBefore)
 196              		.loc 1 113 0
 197 004a 1A79     		ldrb	r2, [r3, #4]
 198 004c D207     		lsls	r2, r2, #31
 199 004e F1D5     		bpl	.L10
 114:../utilities/fsl_notifier.c ****         {
 115:../utilities/fsl_notifier.c ****             /* In case that call-back returned error code mark it, store the call-back handle and e
 116:../utilities/fsl_notifier.c ****             * the configuration switch */
 117:../utilities/fsl_notifier.c ****             if (callbackConfig->callback(&notifyBlock, callbackConfig->callbackData) != kStatus_Suc
 200              		.loc 1 117 0
 201 0050 1A68     		ldr	r2, [r3]
 202 0052 9968     		ldr	r1, [r3, #8]
 203 0054 6846     		mov	r0, sp
 204 0056 9047     		blx	r2
 205              	.LVL21:
 206 0058 0028     		cmp	r0, #0
 207 005a EBD0     		beq	.L10
 208              	.LVL22:
 118:../utilities/fsl_notifier.c ****             {
 119:../utilities/fsl_notifier.c ****                 returnCode = kStatus_NOTIFIER_ErrorNotificationBefore;
 120:../utilities/fsl_notifier.c ****                 notifierHandle->errorCallbackIndex = currentStaticCallback;
 209              		.loc 1 120 0
 210 005c 6C73     		strb	r4, [r5, #13]
 121:../utilities/fsl_notifier.c ****                 /* If not forcing configuration switch, call all already notified call-backs to rev
 122:../utilities/fsl_notifier.c ****                 * as the switch is canceled */
 123:../utilities/fsl_notifier.c ****                 if (policy != kNOTIFIER_PolicyForcible)
 211              		.loc 1 123 0
 212 005e 012F     		cmp	r7, #1
 213 0060 01D1     		bne	.L22
 119:../utilities/fsl_notifier.c ****                 notifierHandle->errorCallbackIndex = currentStaticCallback;
 214              		.loc 1 119 0
 215 0062 274E     		ldr	r6, .L25
 216 0064 E6E7     		b	.L10
 217              	.L22:
 218 0066 264E     		ldr	r6, .L25
 219              	.LVL23:
 220              	.L11:
 124:../utilities/fsl_notifier.c ****                 {
 125:../utilities/fsl_notifier.c ****                     break;
 126:../utilities/fsl_notifier.c ****                 }
 127:../utilities/fsl_notifier.c ****             }
 128:../utilities/fsl_notifier.c ****         }
 129:../utilities/fsl_notifier.c ****     }
 130:../utilities/fsl_notifier.c **** 
 131:../utilities/fsl_notifier.c ****     /* Set configuration */
 132:../utilities/fsl_notifier.c **** 
 133:../utilities/fsl_notifier.c ****     /* In case that any call-back returned error code and  policy doesn't force the configuration s
 134:../utilities/fsl_notifier.c ****      * switch call-backs */
 135:../utilities/fsl_notifier.c ****     if ((policy == kNOTIFIER_PolicyForcible) || (returnCode == kStatus_Success))
 221              		.loc 1 135 0
 222 0068 012F     		cmp	r7, #1
 223 006a 0ED1     		bne	.L24
 224              	.L13:
 136:../utilities/fsl_notifier.c ****     {
 137:../utilities/fsl_notifier.c ****         returnCode = notifierHandle->userFunction(notifierHandle->configsTable[configIndex], notifi
 225              		.loc 1 137 0
 226 006c 2B68     		ldr	r3, [r5]
 227 006e 4A46     		mov	r2, r9
 228 0070 9858     		ldr	r0, [r3, r2]
 229 0072 6969     		ldr	r1, [r5, #20]
 230 0074 2B69     		ldr	r3, [r5, #16]
 231 0076 9847     		blx	r3
 232              	.LVL24:
 233 0078 061E     		subs	r6, r0, #0
 234              	.LVL25:
 138:../utilities/fsl_notifier.c ****         if (returnCode != kStatus_Success)
 235              		.loc 1 138 0
 236 007a 39D1     		bne	.L7
 139:../utilities/fsl_notifier.c ****         {
 140:../utilities/fsl_notifier.c ****             return returnCode;
 141:../utilities/fsl_notifier.c ****         }
 142:../utilities/fsl_notifier.c ****         /* Update current configuration index */
 143:../utilities/fsl_notifier.c ****         notifierHandle->currentConfigIndex = configIndex;
 237              		.loc 1 143 0
 238 007c 4346     		mov	r3, r8
 239 007e AB73     		strb	r3, [r5, #14]
 144:../utilities/fsl_notifier.c ****         notifyBlock.notifyType = kNOTIFIER_NotifyAfter;
 240              		.loc 1 144 0
 241 0080 0223     		movs	r3, #2
 242 0082 6A46     		mov	r2, sp
 243 0084 5371     		strb	r3, [r2, #5]
 244              	.LVL26:
 145:../utilities/fsl_notifier.c ****         /* From all statically registered call-backs... */
 146:../utilities/fsl_notifier.c ****         for (currentStaticCallback = 0U; currentStaticCallback < notifierHandle->callbacksNumber;
 245              		.loc 1 146 0
 246 0086 0024     		movs	r4, #0
 247 0088 07E0     		b	.L15
 248              	.LVL27:
 249              	.L24:
 135:../utilities/fsl_notifier.c ****     {
 250              		.loc 1 135 0 discriminator 1
 251 008a 002E     		cmp	r6, #0
 252 008c EED0     		beq	.L13
 147:../utilities/fsl_notifier.c ****              currentStaticCallback++)
 148:../utilities/fsl_notifier.c ****         {
 149:../utilities/fsl_notifier.c ****             callbackConfig = &(notifierHandle->callbacksTable[currentStaticCallback]);
 150:../utilities/fsl_notifier.c ****             /* ...notify only those which asked to be called after the configruation switch */
 151:../utilities/fsl_notifier.c ****             if (((uint32_t)callbackConfig->callbackType) & kNOTIFIER_CallbackAfter)
 152:../utilities/fsl_notifier.c ****             {
 153:../utilities/fsl_notifier.c ****                 /* In case that call-back returned error code mark it and store the call-back handl
 154:../utilities/fsl_notifier.c ****                 if (callbackConfig->callback(&notifyBlock, callbackConfig->callbackData) != kStatus
 155:../utilities/fsl_notifier.c ****                 {
 156:../utilities/fsl_notifier.c ****                     returnCode = kStatus_NOTIFIER_ErrorNotificationAfter;
 157:../utilities/fsl_notifier.c ****                     notifierHandle->errorCallbackIndex = currentStaticCallback;
 158:../utilities/fsl_notifier.c ****                     if (policy != kNOTIFIER_PolicyForcible)
 159:../utilities/fsl_notifier.c ****                     {
 160:../utilities/fsl_notifier.c ****                         break;
 161:../utilities/fsl_notifier.c ****                     }
 162:../utilities/fsl_notifier.c ****                 }
 163:../utilities/fsl_notifier.c ****             }
 164:../utilities/fsl_notifier.c ****         }
 165:../utilities/fsl_notifier.c ****     }
 166:../utilities/fsl_notifier.c ****     else
 167:../utilities/fsl_notifier.c ****     {
 168:../utilities/fsl_notifier.c ****         /* End of unsuccessful switch */
 169:../utilities/fsl_notifier.c ****         notifyBlock.notifyType = kNOTIFIER_NotifyRecover;
 253              		.loc 1 169 0
 254 008e 0023     		movs	r3, #0
 255 0090 6A46     		mov	r2, sp
 256 0092 5371     		strb	r3, [r2, #5]
 170:../utilities/fsl_notifier.c ****         while (currentStaticCallback--)
 257              		.loc 1 170 0
 258 0094 19E0     		b	.L18
 259              	.LVL28:
 260              	.L16:
 147:../utilities/fsl_notifier.c ****              currentStaticCallback++)
 261              		.loc 1 147 0
 262 0096 0134     		adds	r4, r4, #1
 263              	.LVL29:
 264 0098 E4B2     		uxtb	r4, r4
 265              	.LVL30:
 266              	.L15:
 146:../utilities/fsl_notifier.c ****              currentStaticCallback++)
 267              		.loc 1 146 0 discriminator 1
 268 009a 2B7B     		ldrb	r3, [r5, #12]
 269 009c A342     		cmp	r3, r4
 270 009e 27D9     		bls	.L7
 149:../utilities/fsl_notifier.c ****             /* ...notify only those which asked to be called after the configruation switch */
 271              		.loc 1 149 0
 272 00a0 6200     		lsls	r2, r4, #1
 273 00a2 1219     		adds	r2, r2, r4
 274 00a4 9300     		lsls	r3, r2, #2
 275 00a6 AA68     		ldr	r2, [r5, #8]
 276 00a8 9446     		mov	ip, r2
 277 00aa 6344     		add	r3, r3, ip
 278              	.LVL31:
 151:../utilities/fsl_notifier.c ****             {
 279              		.loc 1 151 0
 280 00ac 1A79     		ldrb	r2, [r3, #4]
 281 00ae 9207     		lsls	r2, r2, #30
 282 00b0 F1D5     		bpl	.L16
 154:../utilities/fsl_notifier.c ****                 {
 283              		.loc 1 154 0
 284 00b2 1A68     		ldr	r2, [r3]
 285 00b4 9968     		ldr	r1, [r3, #8]
 286 00b6 6846     		mov	r0, sp
 287 00b8 9047     		blx	r2
 288              	.LVL32:
 289 00ba 0028     		cmp	r0, #0
 290 00bc EBD0     		beq	.L16
 291              	.LVL33:
 157:../utilities/fsl_notifier.c ****                     if (policy != kNOTIFIER_PolicyForcible)
 292              		.loc 1 157 0
 293 00be 6C73     		strb	r4, [r5, #13]
 158:../utilities/fsl_notifier.c ****                     {
 294              		.loc 1 158 0
 295 00c0 012F     		cmp	r7, #1
 296 00c2 1BD1     		bne	.L23
 156:../utilities/fsl_notifier.c ****                     notifierHandle->errorCallbackIndex = currentStaticCallback;
 297              		.loc 1 156 0
 298 00c4 0F4E     		ldr	r6, .L25+4
 299 00c6 E6E7     		b	.L16
 300              	.LVL34:
 301              	.L19:
 146:../utilities/fsl_notifier.c ****              currentStaticCallback++)
 302              		.loc 1 146 0
 303 00c8 3C00     		movs	r4, r7
 304              	.LVL35:
 305              	.L18:
 306              		.loc 1 170 0
 307 00ca 671E     		subs	r7, r4, #1
 308 00cc FFB2     		uxtb	r7, r7
 309              	.LVL36:
 310 00ce 002C     		cmp	r4, #0
 311 00d0 0ED0     		beq	.L7
 171:../utilities/fsl_notifier.c ****         {
 172:../utilities/fsl_notifier.c ****             callbackConfig = &(notifierHandle->callbacksTable[currentStaticCallback]);
 312              		.loc 1 172 0
 313 00d2 7A00     		lsls	r2, r7, #1
 314 00d4 D219     		adds	r2, r2, r7
 315 00d6 9300     		lsls	r3, r2, #2
 316 00d8 AA68     		ldr	r2, [r5, #8]
 317 00da 9446     		mov	ip, r2
 318 00dc 6344     		add	r3, r3, ip
 319              	.LVL37:
 173:../utilities/fsl_notifier.c ****             if (((uint32_t)callbackConfig->callbackType) & kNOTIFIER_CallbackBefore)
 320              		.loc 1 173 0
 321 00de 1A79     		ldrb	r2, [r3, #4]
 322 00e0 D207     		lsls	r2, r2, #31
 323 00e2 F1D5     		bpl	.L19
 174:../utilities/fsl_notifier.c ****             {
 175:../utilities/fsl_notifier.c ****                 callbackConfig->callback(&notifyBlock, callbackConfig->callbackData);
 324              		.loc 1 175 0
 325 00e4 1A68     		ldr	r2, [r3]
 326 00e6 9968     		ldr	r1, [r3, #8]
 327 00e8 6846     		mov	r0, sp
 328 00ea 9047     		blx	r2
 329              	.LVL38:
 330 00ec ECE7     		b	.L19
 331              	.LVL39:
 332              	.L21:
  99:../utilities/fsl_notifier.c ****     }
 333              		.loc 1 99 0
 334 00ee 0326     		movs	r6, #3
 335              	.LVL40:
 336              	.L7:
 176:../utilities/fsl_notifier.c ****             }
 177:../utilities/fsl_notifier.c ****         }
 178:../utilities/fsl_notifier.c ****     }
 179:../utilities/fsl_notifier.c **** 
 180:../utilities/fsl_notifier.c ****     return returnCode;
 181:../utilities/fsl_notifier.c **** }
 337              		.loc 1 181 0
 338 00f0 3000     		movs	r0, r6
 339 00f2 03B0     		add	sp, sp, #12
 340              		@ sp needed
 341              	.LVL41:
 342 00f4 0CBC     		pop	{r2, r3}
 343 00f6 9046     		mov	r8, r2
 344 00f8 9946     		mov	r9, r3
 345 00fa F0BD     		pop	{r4, r5, r6, r7, pc}
 346              	.LVL42:
 347              	.L23:
 156:../utilities/fsl_notifier.c ****                     notifierHandle->errorCallbackIndex = currentStaticCallback;
 348              		.loc 1 156 0
 349 00fc 014E     		ldr	r6, .L25+4
 350 00fe F7E7     		b	.L7
 351              	.L26:
 352              		.align	2
 353              	.L25:
 354 0100 48260000 		.word	9800
 355 0104 49260000 		.word	9801
 356              		.cfi_endproc
 357              	.LFE54:
 359              		.section	.text.NOTIFIER_GetErrorCallbackIndex,"ax",%progbits
 360              		.align	1
 361              		.global	NOTIFIER_GetErrorCallbackIndex
 362              		.syntax unified
 363              		.code	16
 364              		.thumb_func
 365              		.fpu softvfp
 367              	NOTIFIER_GetErrorCallbackIndex:
 368              	.LFB55:
 182:../utilities/fsl_notifier.c **** 
 183:../utilities/fsl_notifier.c **** uint8_t NOTIFIER_GetErrorCallbackIndex(notifier_handle_t *notifierHandle)
 184:../utilities/fsl_notifier.c **** {
 369              		.loc 1 184 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374              	.LVL43:
 185:../utilities/fsl_notifier.c ****     return notifierHandle->errorCallbackIndex;
 375              		.loc 1 185 0
 376 0000 407B     		ldrb	r0, [r0, #13]
 377              	.LVL44:
 186:../utilities/fsl_notifier.c **** }
 378              		.loc 1 186 0
 379              		@ sp needed
 380 0002 7047     		bx	lr
 381              		.cfi_endproc
 382              	.LFE55:
 384              		.text
 385              	.Letext0:
 386              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 387              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 388              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 389              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 390              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 391              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 392              		.file 8 "../CMSIS/system_MKL17Z4.h"
 393              		.file 9 "../drivers/fsl_common.h"
 394              		.file 10 "../drivers/fsl_clock.h"
 395              		.file 11 "../utilities/fsl_notifier.h"
 396              		.file 12 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_notifier.c
     /tmp/ccd5YYHX.s:16     .text.NOTIFIER_CreateHandle:0000000000000000 $t
     /tmp/ccd5YYHX.s:23     .text.NOTIFIER_CreateHandle:0000000000000000 NOTIFIER_CreateHandle
     /tmp/ccd5YYHX.s:117    .text.NOTIFIER_SwitchConfig:0000000000000000 $t
     /tmp/ccd5YYHX.s:124    .text.NOTIFIER_SwitchConfig:0000000000000000 NOTIFIER_SwitchConfig
     /tmp/ccd5YYHX.s:354    .text.NOTIFIER_SwitchConfig:0000000000000100 $d
     /tmp/ccd5YYHX.s:360    .text.NOTIFIER_GetErrorCallbackIndex:0000000000000000 $t
     /tmp/ccd5YYHX.s:367    .text.NOTIFIER_GetErrorCallbackIndex:0000000000000000 NOTIFIER_GetErrorCallbackIndex

UNDEFINED SYMBOLS
memset
