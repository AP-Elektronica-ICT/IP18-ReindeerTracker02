   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_str.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ScanIgnoreWhiteSpace,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	ScanIgnoreWhiteSpace:
  23              	.LFB53:
  24              		.file 1 "../utilities/fsl_str.c"
   1:../utilities/fsl_str.c **** /*
   2:../utilities/fsl_str.c ****  * The Clear BSD License
   3:../utilities/fsl_str.c ****  * Copyright 2017 NXP
   4:../utilities/fsl_str.c ****  * All rights reserved.
   5:../utilities/fsl_str.c ****  *
   6:../utilities/fsl_str.c ****  *
   7:../utilities/fsl_str.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../utilities/fsl_str.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../utilities/fsl_str.c ****  * that the following conditions are met:
  10:../utilities/fsl_str.c ****  *
  11:../utilities/fsl_str.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../utilities/fsl_str.c ****  *   of conditions and the following disclaimer.
  13:../utilities/fsl_str.c ****  *
  14:../utilities/fsl_str.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../utilities/fsl_str.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../utilities/fsl_str.c ****  *   other materials provided with the distribution.
  17:../utilities/fsl_str.c ****  *
  18:../utilities/fsl_str.c ****  * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  19:../utilities/fsl_str.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../utilities/fsl_str.c ****  *   software without specific prior written permission.
  21:../utilities/fsl_str.c ****  *
  22:../utilities/fsl_str.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../utilities/fsl_str.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../utilities/fsl_str.c ****  * ANY EPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../utilities/fsl_str.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../utilities/fsl_str.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../utilities/fsl_str.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../utilities/fsl_str.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../utilities/fsl_str.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../utilities/fsl_str.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../utilities/fsl_str.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../utilities/fsl_str.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../utilities/fsl_str.c ****  *
  34:../utilities/fsl_str.c ****  */
  35:../utilities/fsl_str.c **** #include <math.h>
  36:../utilities/fsl_str.c **** #include <stdarg.h>
  37:../utilities/fsl_str.c **** #include <stdlib.h>
  38:../utilities/fsl_str.c **** #include "fsl_str.h"
  39:../utilities/fsl_str.c **** #include "fsl_debug_console_conf.h"
  40:../utilities/fsl_str.c **** 
  41:../utilities/fsl_str.c **** /*******************************************************************************
  42:../utilities/fsl_str.c ****  * Definitions
  43:../utilities/fsl_str.c ****  ******************************************************************************/
  44:../utilities/fsl_str.c **** 
  45:../utilities/fsl_str.c **** /*! @brief The overflow value.*/
  46:../utilities/fsl_str.c **** #ifndef HUGE_VAL
  47:../utilities/fsl_str.c **** #define HUGE_VAL (99.e99)
  48:../utilities/fsl_str.c **** #endif /* HUGE_VAL */
  49:../utilities/fsl_str.c **** 
  50:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
  51:../utilities/fsl_str.c **** static double fnum = 0.0;
  52:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
  53:../utilities/fsl_str.c **** 
  54:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
  55:../utilities/fsl_str.c **** /*! @brief Specification modifier flags for printf. */
  56:../utilities/fsl_str.c **** enum _debugconsole_printf_flag
  57:../utilities/fsl_str.c **** {
  58:../utilities/fsl_str.c ****     kPRINTF_Minus = 0x01U,              /*!< Minus FLag. */
  59:../utilities/fsl_str.c ****     kPRINTF_Plus = 0x02U,               /*!< Plus Flag. */
  60:../utilities/fsl_str.c ****     kPRINTF_Space = 0x04U,              /*!< Space Flag. */
  61:../utilities/fsl_str.c ****     kPRINTF_Zero = 0x08U,               /*!< Zero Flag. */
  62:../utilities/fsl_str.c ****     kPRINTF_Pound = 0x10U,              /*!< Pound Flag. */
  63:../utilities/fsl_str.c ****     kPRINTF_LengthChar = 0x20U,         /*!< Length: Char Flag. */
  64:../utilities/fsl_str.c ****     kPRINTF_LengthShortInt = 0x40U,     /*!< Length: Short Int Flag. */
  65:../utilities/fsl_str.c ****     kPRINTF_LengthLongInt = 0x80U,      /*!< Length: Long Int Flag. */
  66:../utilities/fsl_str.c ****     kPRINTF_LengthLongLongInt = 0x100U, /*!< Length: Long Long Int Flag. */
  67:../utilities/fsl_str.c **** };
  68:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
  69:../utilities/fsl_str.c **** 
  70:../utilities/fsl_str.c **** /*! @brief Specification modifier flags for scanf. */
  71:../utilities/fsl_str.c **** enum _debugconsole_scanf_flag
  72:../utilities/fsl_str.c **** {
  73:../utilities/fsl_str.c ****     kSCANF_Suppress = 0x2U,      /*!< Suppress Flag. */
  74:../utilities/fsl_str.c ****     kSCANF_DestMask = 0x7cU,     /*!< Destination Mask. */
  75:../utilities/fsl_str.c ****     kSCANF_DestChar = 0x4U,      /*!< Destination Char Flag. */
  76:../utilities/fsl_str.c ****     kSCANF_DestString = 0x8U,    /*!< Destination String FLag. */
  77:../utilities/fsl_str.c ****     kSCANF_DestSet = 0x10U,      /*!< Destination Set Flag. */
  78:../utilities/fsl_str.c ****     kSCANF_DestInt = 0x20U,      /*!< Destination Int Flag. */
  79:../utilities/fsl_str.c ****     kSCANF_DestFloat = 0x30U,    /*!< Destination Float Flag. */
  80:../utilities/fsl_str.c ****     kSCANF_LengthMask = 0x1f00U, /*!< Length Mask Flag. */
  81:../utilities/fsl_str.c **** #if SCANF_ADVANCED_ENABLE
  82:../utilities/fsl_str.c ****     kSCANF_LengthChar = 0x100U,        /*!< Length Char Flag. */
  83:../utilities/fsl_str.c ****     kSCANF_LengthShortInt = 0x200U,    /*!< Length ShortInt Flag. */
  84:../utilities/fsl_str.c ****     kSCANF_LengthLongInt = 0x400U,     /*!< Length LongInt Flag. */
  85:../utilities/fsl_str.c ****     kSCANF_LengthLongLongInt = 0x800U, /*!< Length LongLongInt Flag. */
  86:../utilities/fsl_str.c **** #endif                                 /* SCANF_ADVANCED_ENABLE */
  87:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
  88:../utilities/fsl_str.c ****     kSCANF_LengthLongLongDouble = 0x1000U, /*!< Length LongLongDuoble Flag. */
  89:../utilities/fsl_str.c **** #endif                                     /*PRINTF_FLOAT_ENABLE */
  90:../utilities/fsl_str.c ****     kSCANF_TypeSinged = 0x2000U,           /*!< TypeSinged Flag. */
  91:../utilities/fsl_str.c **** };
  92:../utilities/fsl_str.c **** 
  93:../utilities/fsl_str.c **** /*! @brief Keil: suppress ellipsis warning in va_arg usage below. */
  94:../utilities/fsl_str.c **** #if defined(__CC_ARM)
  95:../utilities/fsl_str.c **** #pragma diag_suppress 1256
  96:../utilities/fsl_str.c **** #endif /* __CC_ARM */
  97:../utilities/fsl_str.c **** 
  98:../utilities/fsl_str.c **** /*******************************************************************************
  99:../utilities/fsl_str.c ****  * Prototypes
 100:../utilities/fsl_str.c ****  ******************************************************************************/
 101:../utilities/fsl_str.c **** /*!
 102:../utilities/fsl_str.c ****  * @brief Scanline function which ignores white spaces.
 103:../utilities/fsl_str.c ****  *
 104:../utilities/fsl_str.c ****  * @param[in]   s The address of the string pointer to update.
 105:../utilities/fsl_str.c ****  * @return      String without white spaces.
 106:../utilities/fsl_str.c ****  */
 107:../utilities/fsl_str.c **** static uint32_t ScanIgnoreWhiteSpace(const char **s);
 108:../utilities/fsl_str.c **** 
 109:../utilities/fsl_str.c **** /*!
 110:../utilities/fsl_str.c ****  * @brief Converts a radix number to a string and return its length.
 111:../utilities/fsl_str.c ****  *
 112:../utilities/fsl_str.c ****  * @param[in] numstr    Converted string of the number.
 113:../utilities/fsl_str.c ****  * @param[in] nump      Pointer to the number.
 114:../utilities/fsl_str.c ****  * @param[in] neg       Polarity of the number.
 115:../utilities/fsl_str.c ****  * @param[in] radix     The radix to be converted to.
 116:../utilities/fsl_str.c ****  * @param[in] use_caps  Used to identify %x/X output format.
 117:../utilities/fsl_str.c **** 
 118:../utilities/fsl_str.c ****  * @return Length of the converted string.
 119:../utilities/fsl_str.c ****  */
 120:../utilities/fsl_str.c **** static int32_t ConvertRadixNumToString(char *numstr, void *nump, int32_t neg, int32_t radix, bool u
 121:../utilities/fsl_str.c **** 
 122:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 123:../utilities/fsl_str.c **** /*!
 124:../utilities/fsl_str.c ****  * @brief Converts a floating radix number to a string and return its length.
 125:../utilities/fsl_str.c ****  *
 126:../utilities/fsl_str.c ****  * @param[in] numstr            Converted string of the number.
 127:../utilities/fsl_str.c ****  * @param[in] nump              Pointer to the number.
 128:../utilities/fsl_str.c ****  * @param[in] radix             The radix to be converted to.
 129:../utilities/fsl_str.c ****  * @param[in] precision_width   Specify the precision width.
 130:../utilities/fsl_str.c **** 
 131:../utilities/fsl_str.c ****  * @return Length of the converted string.
 132:../utilities/fsl_str.c ****  */
 133:../utilities/fsl_str.c **** static int32_t ConvertFloatRadixNumToString(char *numstr, void *nump, int32_t radix, uint32_t preci
 134:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 135:../utilities/fsl_str.c **** 
 136:../utilities/fsl_str.c **** /*!
 137:../utilities/fsl_str.c **** *
 138:../utilities/fsl_str.c ****  */
 139:../utilities/fsl_str.c **** double modf(double input_dbl, double *intpart_ptr);
 140:../utilities/fsl_str.c **** 
 141:../utilities/fsl_str.c **** /*************Code for process formatted data*******************************/
 142:../utilities/fsl_str.c **** 
 143:../utilities/fsl_str.c **** static uint32_t ScanIgnoreWhiteSpace(const char **s)
 144:../utilities/fsl_str.c **** {
  25              		.loc 1 144 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  31 0000 0200     		movs	r2, r0
  32              	.LVL1:
 145:../utilities/fsl_str.c ****     uint8_t count = 0;
 146:../utilities/fsl_str.c ****     uint8_t c;
 147:../utilities/fsl_str.c **** 
 148:../utilities/fsl_str.c ****     c = **s;
  33              		.loc 1 148 0
  34 0002 0368     		ldr	r3, [r0]
  35 0004 1B78     		ldrb	r3, [r3]
  36              	.LVL2:
 145:../utilities/fsl_str.c ****     uint8_t count = 0;
  37              		.loc 1 145 0
  38 0006 0020     		movs	r0, #0
  39              	.LVL3:
 149:../utilities/fsl_str.c ****     while ((c == ' ') || (c == '\t') || (c == '\n') || (c == '\r') || (c == '\v') || (c == '\f'))
  40              		.loc 1 149 0
  41 0008 05E0     		b	.L2
  42              	.LVL4:
  43              	.L3:
 150:../utilities/fsl_str.c ****     {
 151:../utilities/fsl_str.c ****         count++;
  44              		.loc 1 151 0
  45 000a 0130     		adds	r0, r0, #1
  46              	.LVL5:
  47 000c C0B2     		uxtb	r0, r0
  48              	.LVL6:
 152:../utilities/fsl_str.c ****         (*s)++;
  49              		.loc 1 152 0
  50 000e 1368     		ldr	r3, [r2]
  51              	.LVL7:
  52 0010 591C     		adds	r1, r3, #1
  53 0012 1160     		str	r1, [r2]
 153:../utilities/fsl_str.c ****         c = **s;
  54              		.loc 1 153 0
  55 0014 5B78     		ldrb	r3, [r3, #1]
  56              	.LVL8:
  57              	.L2:
 149:../utilities/fsl_str.c ****     {
  58              		.loc 1 149 0
  59 0016 202B     		cmp	r3, #32
  60 0018 F7D0     		beq	.L3
 149:../utilities/fsl_str.c ****     {
  61              		.loc 1 149 0 is_stmt 0 discriminator 1
  62 001a 092B     		cmp	r3, #9
  63 001c F5D0     		beq	.L3
 149:../utilities/fsl_str.c ****     {
  64              		.loc 1 149 0 discriminator 2
  65 001e 0A2B     		cmp	r3, #10
  66 0020 F3D0     		beq	.L3
 149:../utilities/fsl_str.c ****     {
  67              		.loc 1 149 0 discriminator 3
  68 0022 0D2B     		cmp	r3, #13
  69 0024 F1D0     		beq	.L3
 149:../utilities/fsl_str.c ****     {
  70              		.loc 1 149 0 discriminator 4
  71 0026 0B2B     		cmp	r3, #11
  72 0028 EFD0     		beq	.L3
 149:../utilities/fsl_str.c ****     {
  73              		.loc 1 149 0 discriminator 5
  74 002a 0C2B     		cmp	r3, #12
  75 002c EDD0     		beq	.L3
 154:../utilities/fsl_str.c ****     }
 155:../utilities/fsl_str.c ****     return count;
 156:../utilities/fsl_str.c **** }
  76              		.loc 1 156 0 is_stmt 1
  77              		@ sp needed
  78 002e 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE53:
  82              		.global	__aeabi_idiv
  83              		.global	__aeabi_idivmod
  84              		.global	__aeabi_uidiv
  85              		.section	.text.ConvertRadixNumToString,"ax",%progbits
  86              		.align	1
  87              		.syntax unified
  88              		.code	16
  89              		.thumb_func
  90              		.fpu softvfp
  92              	ConvertRadixNumToString:
  93              	.LFB54:
 157:../utilities/fsl_str.c **** 
 158:../utilities/fsl_str.c **** static int32_t ConvertRadixNumToString(char *numstr, void *nump, int32_t neg, int32_t radix, bool u
 159:../utilities/fsl_str.c **** {
  94              		.loc 1 159 0
  95              		.cfi_startproc
  96              		@ args = 4, pretend = 0, frame = 8
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL9:
  99 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 100              		.cfi_def_cfa_offset 20
 101              		.cfi_offset 4, -20
 102              		.cfi_offset 5, -16
 103              		.cfi_offset 6, -12
 104              		.cfi_offset 7, -8
 105              		.cfi_offset 14, -4
 106 0002 C646     		mov	lr, r8
 107 0004 00B5     		push	{lr}
 108              		.cfi_def_cfa_offset 24
 109              		.cfi_offset 8, -24
 110 0006 82B0     		sub	sp, sp, #8
 111              		.cfi_def_cfa_offset 32
 112 0008 1500     		movs	r5, r2
 113 000a 1E00     		movs	r6, r3
 114 000c 08AB     		add	r3, sp, #32
 115              	.LVL10:
 116 000e 1B78     		ldrb	r3, [r3]
 117              	.LVL11:
 118 0010 9846     		mov	r8, r3
 119              	.LVL12:
 160:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 161:../utilities/fsl_str.c ****     int64_t a;
 162:../utilities/fsl_str.c ****     int64_t b;
 163:../utilities/fsl_str.c ****     int64_t c;
 164:../utilities/fsl_str.c **** 
 165:../utilities/fsl_str.c ****     uint64_t ua;
 166:../utilities/fsl_str.c ****     uint64_t ub;
 167:../utilities/fsl_str.c ****     uint64_t uc;
 168:../utilities/fsl_str.c **** #else
 169:../utilities/fsl_str.c ****     int32_t a;
 170:../utilities/fsl_str.c ****     int32_t b;
 171:../utilities/fsl_str.c ****     int32_t c;
 172:../utilities/fsl_str.c **** 
 173:../utilities/fsl_str.c ****     uint32_t ua;
 174:../utilities/fsl_str.c ****     uint32_t ub;
 175:../utilities/fsl_str.c ****     uint32_t uc;
 176:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 177:../utilities/fsl_str.c **** 
 178:../utilities/fsl_str.c ****     int32_t nlen;
 179:../utilities/fsl_str.c ****     char *nstrp;
 180:../utilities/fsl_str.c **** 
 181:../utilities/fsl_str.c ****     nlen = 0;
 182:../utilities/fsl_str.c ****     nstrp = numstr;
 183:../utilities/fsl_str.c ****     *nstrp++ = '\0';
 120              		.loc 1 183 0
 121 0012 471C     		adds	r7, r0, #1
 122              	.LVL13:
 123 0014 0023     		movs	r3, #0
 124 0016 0370     		strb	r3, [r0]
 184:../utilities/fsl_str.c **** 
 185:../utilities/fsl_str.c ****     if (neg)
 125              		.loc 1 185 0
 126 0018 002A     		cmp	r2, #0
 127 001a 21D0     		beq	.L5
 186:../utilities/fsl_str.c ****     {
 187:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 188:../utilities/fsl_str.c ****         a = *(int64_t *)nump;
 189:../utilities/fsl_str.c **** #else
 190:../utilities/fsl_str.c ****         a = *(int32_t *)nump;
 128              		.loc 1 190 0
 129 001c 0C68     		ldr	r4, [r1]
 130              	.LVL14:
 191:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 192:../utilities/fsl_str.c ****         if (a == 0)
 131              		.loc 1 192 0
 132 001e 002C     		cmp	r4, #0
 133 0020 01D0     		beq	.L18
 181:../utilities/fsl_str.c ****     nstrp = numstr;
 134              		.loc 1 181 0
 135 0022 0025     		movs	r5, #0
 136 0024 0DE0     		b	.L6
 137              	.L18:
 193:../utilities/fsl_str.c ****         {
 194:../utilities/fsl_str.c ****             *nstrp = '0';
 138              		.loc 1 194 0
 139 0026 3033     		adds	r3, r3, #48
 140 0028 4370     		strb	r3, [r0, #1]
 141              	.LVL15:
 195:../utilities/fsl_str.c ****             ++nlen;
 196:../utilities/fsl_str.c ****             return nlen;
 142              		.loc 1 196 0
 143 002a 0125     		movs	r5, #1
 144              	.LVL16:
 145              	.L4:
 197:../utilities/fsl_str.c ****         }
 198:../utilities/fsl_str.c ****         while (a != 0)
 199:../utilities/fsl_str.c ****         {
 200:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 201:../utilities/fsl_str.c ****             b = (int64_t)a / (int64_t)radix;
 202:../utilities/fsl_str.c ****             c = (int64_t)a - ((int64_t)b * (int64_t)radix);
 203:../utilities/fsl_str.c ****             if (c < 0)
 204:../utilities/fsl_str.c ****             {
 205:../utilities/fsl_str.c ****                 uc = (uint64_t)c;
 206:../utilities/fsl_str.c ****                 c = (int64_t)(~uc) + 1 + '0';
 207:../utilities/fsl_str.c ****             }
 208:../utilities/fsl_str.c **** #else
 209:../utilities/fsl_str.c ****             b = a / radix;
 210:../utilities/fsl_str.c ****             c = a - (b * radix);
 211:../utilities/fsl_str.c ****             if (c < 0)
 212:../utilities/fsl_str.c ****             {
 213:../utilities/fsl_str.c ****                 uc = (uint32_t)c;
 214:../utilities/fsl_str.c ****                 c = (uint32_t)(~uc) + 1 + '0';
 215:../utilities/fsl_str.c ****             }
 216:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 217:../utilities/fsl_str.c ****             else
 218:../utilities/fsl_str.c ****             {
 219:../utilities/fsl_str.c ****                 c = c + '0';
 220:../utilities/fsl_str.c ****             }
 221:../utilities/fsl_str.c ****             a = b;
 222:../utilities/fsl_str.c ****             *nstrp++ = (char)c;
 223:../utilities/fsl_str.c ****             ++nlen;
 224:../utilities/fsl_str.c ****         }
 225:../utilities/fsl_str.c ****     }
 226:../utilities/fsl_str.c ****     else
 227:../utilities/fsl_str.c ****     {
 228:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 229:../utilities/fsl_str.c ****         ua = *(uint64_t *)nump;
 230:../utilities/fsl_str.c **** #else
 231:../utilities/fsl_str.c ****         ua = *(uint32_t *)nump;
 232:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 233:../utilities/fsl_str.c ****         if (ua == 0)
 234:../utilities/fsl_str.c ****         {
 235:../utilities/fsl_str.c ****             *nstrp = '0';
 236:../utilities/fsl_str.c ****             ++nlen;
 237:../utilities/fsl_str.c ****             return nlen;
 238:../utilities/fsl_str.c ****         }
 239:../utilities/fsl_str.c ****         while (ua != 0)
 240:../utilities/fsl_str.c ****         {
 241:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 242:../utilities/fsl_str.c ****             ub = (uint64_t)ua / (uint64_t)radix;
 243:../utilities/fsl_str.c ****             uc = (uint64_t)ua - ((uint64_t)ub * (uint64_t)radix);
 244:../utilities/fsl_str.c **** #else
 245:../utilities/fsl_str.c ****             ub = ua / (uint32_t)radix;
 246:../utilities/fsl_str.c ****             uc = ua - (ub * (uint32_t)radix);
 247:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 248:../utilities/fsl_str.c **** 
 249:../utilities/fsl_str.c ****             if (uc < 10)
 250:../utilities/fsl_str.c ****             {
 251:../utilities/fsl_str.c ****                 uc = uc + '0';
 252:../utilities/fsl_str.c ****             }
 253:../utilities/fsl_str.c ****             else
 254:../utilities/fsl_str.c ****             {
 255:../utilities/fsl_str.c ****                 uc = uc - 10 + (use_caps ? 'A' : 'a');
 256:../utilities/fsl_str.c ****             }
 257:../utilities/fsl_str.c ****             ua = ub;
 258:../utilities/fsl_str.c ****             *nstrp++ = (char)uc;
 259:../utilities/fsl_str.c ****             ++nlen;
 260:../utilities/fsl_str.c ****         }
 261:../utilities/fsl_str.c ****     }
 262:../utilities/fsl_str.c ****     return nlen;
 263:../utilities/fsl_str.c **** }
 146              		.loc 1 263 0
 147 002c 2800     		movs	r0, r5
 148 002e 02B0     		add	sp, sp, #8
 149              		@ sp needed
 150              	.LVL17:
 151              	.LVL18:
 152 0030 04BC     		pop	{r2}
 153 0032 9046     		mov	r8, r2
 154 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 155              	.LVL19:
 156              	.L19:
 214:../utilities/fsl_str.c ****             }
 157              		.loc 1 214 0
 158 0036 3023     		movs	r3, #48
 159 0038 591A     		subs	r1, r3, r1
 160              	.LVL20:
 161              	.L9:
 222:../utilities/fsl_str.c ****             ++nlen;
 162              		.loc 1 222 0
 163 003a 3970     		strb	r1, [r7]
 223:../utilities/fsl_str.c ****         }
 164              		.loc 1 223 0
 165 003c 0135     		adds	r5, r5, #1
 166              	.LVL21:
 222:../utilities/fsl_str.c ****             ++nlen;
 167              		.loc 1 222 0
 168 003e 0137     		adds	r7, r7, #1
 169              	.LVL22:
 221:../utilities/fsl_str.c ****             *nstrp++ = (char)c;
 170              		.loc 1 221 0
 171 0040 019C     		ldr	r4, [sp, #4]
 172              	.LVL23:
 173              	.L6:
 198:../utilities/fsl_str.c ****         {
 174              		.loc 1 198 0
 175 0042 002C     		cmp	r4, #0
 176 0044 F2D0     		beq	.L4
 209:../utilities/fsl_str.c ****             c = a - (b * radix);
 177              		.loc 1 209 0
 178 0046 3100     		movs	r1, r6
 179 0048 2000     		movs	r0, r4
 180 004a FFF7FEFF 		bl	__aeabi_idiv
 181              	.LVL24:
 182 004e 0190     		str	r0, [sp, #4]
 183              	.LVL25:
 184 0050 3100     		movs	r1, r6
 185 0052 2000     		movs	r0, r4
 186              	.LVL26:
 187 0054 FFF7FEFF 		bl	__aeabi_idivmod
 188              	.LVL27:
 211:../utilities/fsl_str.c ****             {
 189              		.loc 1 211 0
 190 0058 0029     		cmp	r1, #0
 191 005a ECDB     		blt	.L19
 219:../utilities/fsl_str.c ****             }
 192              		.loc 1 219 0
 193 005c 3031     		adds	r1, r1, #48
 194              	.LVL28:
 195 005e ECE7     		b	.L9
 196              	.LVL29:
 197              	.L5:
 231:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 198              		.loc 1 231 0
 199 0060 0C68     		ldr	r4, [r1]
 200              	.LVL30:
 233:../utilities/fsl_str.c ****         {
 201              		.loc 1 233 0
 202 0062 002C     		cmp	r4, #0
 203 0064 0DD1     		bne	.L11
 235:../utilities/fsl_str.c ****             ++nlen;
 204              		.loc 1 235 0
 205 0066 3023     		movs	r3, #48
 206 0068 4370     		strb	r3, [r0, #1]
 207              	.LVL31:
 237:../utilities/fsl_str.c ****         }
 208              		.loc 1 237 0
 209 006a 0125     		movs	r5, #1
 210 006c DEE7     		b	.L4
 211              	.LVL32:
 212              	.L12:
 255:../utilities/fsl_str.c ****             }
 213              		.loc 1 255 0
 214 006e 4346     		mov	r3, r8
 215 0070 002B     		cmp	r3, #0
 216 0072 13D0     		beq	.L17
 217 0074 4123     		movs	r3, #65
 218              	.L14:
 255:../utilities/fsl_str.c ****             }
 219              		.loc 1 255 0 is_stmt 0 discriminator 4
 220 0076 1C19     		adds	r4, r3, r4
 221              	.LVL33:
 222 0078 0A3C     		subs	r4, r4, #10
 223              	.LVL34:
 224              	.L13:
 258:../utilities/fsl_str.c ****             ++nlen;
 225              		.loc 1 258 0 is_stmt 1
 226 007a 3C70     		strb	r4, [r7]
 259:../utilities/fsl_str.c ****         }
 227              		.loc 1 259 0
 228 007c 0135     		adds	r5, r5, #1
 229              	.LVL35:
 258:../utilities/fsl_str.c ****             ++nlen;
 230              		.loc 1 258 0
 231 007e 0137     		adds	r7, r7, #1
 232              	.LVL36:
 257:../utilities/fsl_str.c ****             *nstrp++ = (char)uc;
 233              		.loc 1 257 0
 234 0080 0400     		movs	r4, r0
 235              	.LVL37:
 236              	.L11:
 239:../utilities/fsl_str.c ****         {
 237              		.loc 1 239 0
 238 0082 002C     		cmp	r4, #0
 239 0084 D2D0     		beq	.L4
 245:../utilities/fsl_str.c ****             uc = ua - (ub * (uint32_t)radix);
 240              		.loc 1 245 0
 241 0086 3100     		movs	r1, r6
 242 0088 2000     		movs	r0, r4
 243 008a FFF7FEFF 		bl	__aeabi_uidiv
 244              	.LVL38:
 246:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 245              		.loc 1 246 0
 246 008e 0300     		movs	r3, r0
 247 0090 7343     		muls	r3, r6
 248 0092 E41A     		subs	r4, r4, r3
 249              	.LVL39:
 249:../utilities/fsl_str.c ****             {
 250              		.loc 1 249 0
 251 0094 092C     		cmp	r4, #9
 252 0096 EAD8     		bhi	.L12
 251:../utilities/fsl_str.c ****             }
 253              		.loc 1 251 0
 254 0098 3034     		adds	r4, r4, #48
 255              	.LVL40:
 256 009a EEE7     		b	.L13
 257              	.L17:
 255:../utilities/fsl_str.c ****             }
 258              		.loc 1 255 0
 259 009c 6123     		movs	r3, #97
 260 009e EAE7     		b	.L14
 261              		.cfi_endproc
 262              	.LFE54:
 264              		.section	.text.StrFormatPrintf,"ax",%progbits
 265              		.align	1
 266              		.global	StrFormatPrintf
 267              		.syntax unified
 268              		.code	16
 269              		.thumb_func
 270              		.fpu softvfp
 272              	StrFormatPrintf:
 273              	.LFB55:
 264:../utilities/fsl_str.c **** 
 265:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 266:../utilities/fsl_str.c **** static int32_t ConvertFloatRadixNumToString(char *numstr, void *nump, int32_t radix, uint32_t preci
 267:../utilities/fsl_str.c **** {
 268:../utilities/fsl_str.c ****     int32_t a;
 269:../utilities/fsl_str.c ****     int32_t b;
 270:../utilities/fsl_str.c ****     int32_t c;
 271:../utilities/fsl_str.c ****     int32_t i;
 272:../utilities/fsl_str.c ****     uint32_t uc;
 273:../utilities/fsl_str.c ****     double fa;
 274:../utilities/fsl_str.c ****     double dc;
 275:../utilities/fsl_str.c ****     double fb;
 276:../utilities/fsl_str.c ****     double r;
 277:../utilities/fsl_str.c ****     double fractpart;
 278:../utilities/fsl_str.c ****     double intpart;
 279:../utilities/fsl_str.c **** 
 280:../utilities/fsl_str.c ****     int32_t nlen;
 281:../utilities/fsl_str.c ****     char *nstrp;
 282:../utilities/fsl_str.c ****     nlen = 0;
 283:../utilities/fsl_str.c ****     nstrp = numstr;
 284:../utilities/fsl_str.c ****     *nstrp++ = '\0';
 285:../utilities/fsl_str.c ****     r = *(double *)nump;
 286:../utilities/fsl_str.c ****     if (!r)
 287:../utilities/fsl_str.c ****     {
 288:../utilities/fsl_str.c ****         *nstrp = '0';
 289:../utilities/fsl_str.c ****         ++nlen;
 290:../utilities/fsl_str.c ****         return nlen;
 291:../utilities/fsl_str.c ****     }
 292:../utilities/fsl_str.c ****     fractpart = modf((double)r, (double *)&intpart);
 293:../utilities/fsl_str.c ****     /* Process fractional part. */
 294:../utilities/fsl_str.c ****     for (i = 0; i < precision_width; i++)
 295:../utilities/fsl_str.c ****     {
 296:../utilities/fsl_str.c ****         fractpart *= radix;
 297:../utilities/fsl_str.c ****     }
 298:../utilities/fsl_str.c ****     if (r >= 0)
 299:../utilities/fsl_str.c ****     {
 300:../utilities/fsl_str.c ****         fa = fractpart + (double)0.5;
 301:../utilities/fsl_str.c ****         if (fa >= pow(10, precision_width))
 302:../utilities/fsl_str.c ****         {
 303:../utilities/fsl_str.c ****             intpart++;
 304:../utilities/fsl_str.c ****         }
 305:../utilities/fsl_str.c ****     }
 306:../utilities/fsl_str.c ****     else
 307:../utilities/fsl_str.c ****     {
 308:../utilities/fsl_str.c ****         fa = fractpart - (double)0.5;
 309:../utilities/fsl_str.c ****         if (fa <= -pow(10, precision_width))
 310:../utilities/fsl_str.c ****         {
 311:../utilities/fsl_str.c ****             intpart--;
 312:../utilities/fsl_str.c ****         }
 313:../utilities/fsl_str.c ****     }
 314:../utilities/fsl_str.c ****     for (i = 0; i < precision_width; i++)
 315:../utilities/fsl_str.c ****     {
 316:../utilities/fsl_str.c ****         fb = fa / (int32_t)radix;
 317:../utilities/fsl_str.c ****         dc = (fa - (int64_t)fb * (int32_t)radix);
 318:../utilities/fsl_str.c ****         c = (int32_t)dc;
 319:../utilities/fsl_str.c ****         if (c < 0)
 320:../utilities/fsl_str.c ****         {
 321:../utilities/fsl_str.c ****             uc = (uint32_t)c;
 322:../utilities/fsl_str.c ****             c = (int32_t)(~uc) + 1 + '0';
 323:../utilities/fsl_str.c ****         }
 324:../utilities/fsl_str.c ****         else
 325:../utilities/fsl_str.c ****         {
 326:../utilities/fsl_str.c ****             c = c + '0';
 327:../utilities/fsl_str.c ****         }
 328:../utilities/fsl_str.c ****         fa = fb;
 329:../utilities/fsl_str.c ****         *nstrp++ = (char)c;
 330:../utilities/fsl_str.c ****         ++nlen;
 331:../utilities/fsl_str.c ****     }
 332:../utilities/fsl_str.c ****     *nstrp++ = (char)'.';
 333:../utilities/fsl_str.c ****     ++nlen;
 334:../utilities/fsl_str.c ****     a = (int32_t)intpart;
 335:../utilities/fsl_str.c ****     if (a == 0)
 336:../utilities/fsl_str.c ****     {
 337:../utilities/fsl_str.c ****         *nstrp++ = '0';
 338:../utilities/fsl_str.c ****         ++nlen;
 339:../utilities/fsl_str.c ****     }
 340:../utilities/fsl_str.c ****     else
 341:../utilities/fsl_str.c ****     {
 342:../utilities/fsl_str.c ****         while (a != 0)
 343:../utilities/fsl_str.c ****         {
 344:../utilities/fsl_str.c ****             b = (int32_t)a / (int32_t)radix;
 345:../utilities/fsl_str.c ****             c = (int32_t)a - ((int32_t)b * (int32_t)radix);
 346:../utilities/fsl_str.c ****             if (c < 0)
 347:../utilities/fsl_str.c ****             {
 348:../utilities/fsl_str.c ****                 uc = (uint32_t)c;
 349:../utilities/fsl_str.c ****                 c = (int32_t)(~uc) + 1 + '0';
 350:../utilities/fsl_str.c ****             }
 351:../utilities/fsl_str.c ****             else
 352:../utilities/fsl_str.c ****             {
 353:../utilities/fsl_str.c ****                 c = c + '0';
 354:../utilities/fsl_str.c ****             }
 355:../utilities/fsl_str.c ****             a = b;
 356:../utilities/fsl_str.c ****             *nstrp++ = (char)c;
 357:../utilities/fsl_str.c ****             ++nlen;
 358:../utilities/fsl_str.c ****         }
 359:../utilities/fsl_str.c ****     }
 360:../utilities/fsl_str.c ****     return nlen;
 361:../utilities/fsl_str.c **** }
 362:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 363:../utilities/fsl_str.c **** 
 364:../utilities/fsl_str.c **** int StrFormatPrintf(const char *fmt, va_list ap, char *buf, printfCb cb)
 365:../utilities/fsl_str.c **** {
 274              		.loc 1 365 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 64
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              	.LVL41:
 279 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 280              		.cfi_def_cfa_offset 20
 281              		.cfi_offset 4, -20
 282              		.cfi_offset 5, -16
 283              		.cfi_offset 6, -12
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 DE46     		mov	lr, fp
 287 0004 5746     		mov	r7, r10
 288 0006 4E46     		mov	r6, r9
 289 0008 4546     		mov	r5, r8
 290 000a E0B5     		push	{r5, r6, r7, lr}
 291              		.cfi_def_cfa_offset 36
 292              		.cfi_offset 8, -36
 293              		.cfi_offset 9, -32
 294              		.cfi_offset 10, -28
 295              		.cfi_offset 11, -24
 296 000c 93B0     		sub	sp, sp, #76
 297              		.cfi_def_cfa_offset 112
 298 000e 0400     		movs	r4, r0
 299 0010 0591     		str	r1, [sp, #20]
 300 0012 0392     		str	r2, [sp, #12]
 301 0014 1F00     		movs	r7, r3
 302              	.LVL42:
 366:../utilities/fsl_str.c ****     /* va_list ap; */
 367:../utilities/fsl_str.c ****     char *p;
 368:../utilities/fsl_str.c ****     int32_t c;
 369:../utilities/fsl_str.c **** 
 370:../utilities/fsl_str.c ****     char vstr[33];
 371:../utilities/fsl_str.c ****     char *vstrp = NULL;
 372:../utilities/fsl_str.c ****     int32_t vlen = 0;
 373:../utilities/fsl_str.c **** 
 374:../utilities/fsl_str.c ****     int32_t done;
 375:../utilities/fsl_str.c ****     int32_t count = 0;
 303              		.loc 1 375 0
 304 0016 0023     		movs	r3, #0
 305              	.LVL43:
 306 0018 0893     		str	r3, [sp, #32]
 307              	.LVL44:
 376:../utilities/fsl_str.c **** 
 377:../utilities/fsl_str.c ****     uint32_t field_width;
 378:../utilities/fsl_str.c ****     uint32_t precision_width;
 379:../utilities/fsl_str.c ****     char *sval;
 380:../utilities/fsl_str.c ****     int32_t cval;
 381:../utilities/fsl_str.c ****     bool use_caps;
 382:../utilities/fsl_str.c ****     uint8_t radix = 0;
 383:../utilities/fsl_str.c **** 
 384:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 385:../utilities/fsl_str.c ****     uint32_t flags_used;
 386:../utilities/fsl_str.c ****     int32_t schar, dschar;
 387:../utilities/fsl_str.c ****     int64_t ival;
 388:../utilities/fsl_str.c ****     uint64_t uval = 0;
 389:../utilities/fsl_str.c ****     bool valid_precision_width;
 390:../utilities/fsl_str.c **** #else
 391:../utilities/fsl_str.c ****     int32_t ival;
 392:../utilities/fsl_str.c ****     uint32_t uval = 0;
 308              		.loc 1 392 0
 309 001a 0693     		str	r3, [sp, #24]
 310              	.LVL45:
 382:../utilities/fsl_str.c **** 
 311              		.loc 1 382 0
 312 001c 9A46     		mov	r10, r3
 372:../utilities/fsl_str.c **** 
 313              		.loc 1 372 0
 314 001e 0493     		str	r3, [sp, #16]
 371:../utilities/fsl_str.c ****     int32_t vlen = 0;
 315              		.loc 1 371 0
 316 0020 0026     		movs	r6, #0
 393:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 394:../utilities/fsl_str.c **** 
 395:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 396:../utilities/fsl_str.c ****     double fval;
 397:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 398:../utilities/fsl_str.c **** 
 399:../utilities/fsl_str.c ****     /* Start parsing apart the format string and display appropriate formats and data. */
 400:../utilities/fsl_str.c ****     for (p = (char *)fmt; (c = *p) != 0; p++)
 317              		.loc 1 400 0
 318 0022 C7E0     		b	.L21
 319              	.LVL46:
 320              	.L52:
 401:../utilities/fsl_str.c ****     {
 402:../utilities/fsl_str.c ****         /*
 403:../utilities/fsl_str.c ****          * All formats begin with a '%' marker.  Special chars like
 404:../utilities/fsl_str.c ****          * '\n' or '\t' are normally converted to the appropriate
 405:../utilities/fsl_str.c ****          * character by the __compiler__.  Thus, no need for this
 406:../utilities/fsl_str.c ****          * routine to account for the '\' character.
 407:../utilities/fsl_str.c ****          */
 408:../utilities/fsl_str.c ****         if (c != '%')
 409:../utilities/fsl_str.c ****         {
 410:../utilities/fsl_str.c ****             cb(buf, &count, c, 1);
 411:../utilities/fsl_str.c ****             /* By using 'continue', the next iteration of the loop is used, skipping the code that 
 412:../utilities/fsl_str.c ****             continue;
 413:../utilities/fsl_str.c ****         }
 414:../utilities/fsl_str.c **** 
 415:../utilities/fsl_str.c ****         use_caps = true;
 416:../utilities/fsl_str.c **** 
 417:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 418:../utilities/fsl_str.c ****         /* First check for specification modifier flags. */
 419:../utilities/fsl_str.c ****         flags_used = 0;
 420:../utilities/fsl_str.c ****         done = false;
 421:../utilities/fsl_str.c ****         while (!done)
 422:../utilities/fsl_str.c ****         {
 423:../utilities/fsl_str.c ****             switch (*++p)
 424:../utilities/fsl_str.c ****             {
 425:../utilities/fsl_str.c ****                 case '-':
 426:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Minus;
 427:../utilities/fsl_str.c ****                     break;
 428:../utilities/fsl_str.c ****                 case '+':
 429:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Plus;
 430:../utilities/fsl_str.c ****                     break;
 431:../utilities/fsl_str.c ****                 case ' ':
 432:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Space;
 433:../utilities/fsl_str.c ****                     break;
 434:../utilities/fsl_str.c ****                 case '0':
 435:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Zero;
 436:../utilities/fsl_str.c ****                     break;
 437:../utilities/fsl_str.c ****                 case '#':
 438:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Pound;
 439:../utilities/fsl_str.c ****                     break;
 440:../utilities/fsl_str.c ****                 default:
 441:../utilities/fsl_str.c ****                     /* We've gone one char too far. */
 442:../utilities/fsl_str.c ****                     --p;
 443:../utilities/fsl_str.c ****                     done = true;
 444:../utilities/fsl_str.c ****                     break;
 445:../utilities/fsl_str.c ****             }
 446:../utilities/fsl_str.c ****         }
 447:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 448:../utilities/fsl_str.c **** 
 449:../utilities/fsl_str.c ****         /* Next check for minimum field width. */
 450:../utilities/fsl_str.c ****         field_width = 0;
 321              		.loc 1 450 0
 322 0024 0025     		movs	r5, #0
 451:../utilities/fsl_str.c ****         done = false;
 323              		.loc 1 451 0
 324 0026 0020     		movs	r0, #0
 325 0028 00E0     		b	.L24
 326              	.LVL47:
 327              	.L53:
 452:../utilities/fsl_str.c ****         while (!done)
 453:../utilities/fsl_str.c ****         {
 454:../utilities/fsl_str.c ****             c = *++p;
 455:../utilities/fsl_str.c ****             if ((c >= '0') && (c <= '9'))
 456:../utilities/fsl_str.c ****             {
 457:../utilities/fsl_str.c ****                 field_width = (field_width * 10) + (c - '0');
 458:../utilities/fsl_str.c ****             }
 459:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 460:../utilities/fsl_str.c ****             else if (c == '*')
 461:../utilities/fsl_str.c ****             {
 462:../utilities/fsl_str.c ****                 field_width = (uint32_t)va_arg(ap, uint32_t);
 463:../utilities/fsl_str.c ****             }
 464:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 465:../utilities/fsl_str.c ****             else
 466:../utilities/fsl_str.c ****             {
 467:../utilities/fsl_str.c ****                 /* We've gone one char too far. */
 468:../utilities/fsl_str.c ****                 --p;
 469:../utilities/fsl_str.c ****                 done = true;
 328              		.loc 1 469 0
 329 002a 0120     		movs	r0, #1
 330              	.LVL48:
 331              	.L24:
 452:../utilities/fsl_str.c ****         while (!done)
 332              		.loc 1 452 0
 333 002c 0028     		cmp	r0, #0
 334 002e 0ED1     		bne	.L59
 454:../utilities/fsl_str.c ****             if ((c >= '0') && (c <= '9'))
 335              		.loc 1 454 0
 336 0030 611C     		adds	r1, r4, #1
 337              	.LVL49:
 338 0032 0122     		movs	r2, #1
 339 0034 A256     		ldrsb	r2, [r4, r2]
 455:../utilities/fsl_str.c ****             {
 340              		.loc 1 455 0
 341 0036 1300     		movs	r3, r2
 342 0038 303B     		subs	r3, r3, #48
 343 003a 092B     		cmp	r3, #9
 344 003c F5D8     		bhi	.L53
 457:../utilities/fsl_str.c ****             }
 345              		.loc 1 457 0
 346 003e AB00     		lsls	r3, r5, #2
 347 0040 5D19     		adds	r5, r3, r5
 348              	.LVL50:
 349 0042 6B00     		lsls	r3, r5, #1
 350 0044 D218     		adds	r2, r2, r3
 351 0046 303A     		subs	r2, r2, #48
 352 0048 1500     		movs	r5, r2
 353              	.LVL51:
 454:../utilities/fsl_str.c ****             if ((c >= '0') && (c <= '9'))
 354              		.loc 1 454 0
 355 004a 0C00     		movs	r4, r1
 356 004c EEE7     		b	.L24
 357              	.LVL52:
 358              	.L59:
 470:../utilities/fsl_str.c ****             }
 471:../utilities/fsl_str.c ****         }
 472:../utilities/fsl_str.c ****         /* Next check for the width and precision field separator. */
 473:../utilities/fsl_str.c ****         precision_width = 6;
 474:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 475:../utilities/fsl_str.c ****         valid_precision_width = false;
 476:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 477:../utilities/fsl_str.c ****         if (*++p == '.')
 359              		.loc 1 477 0
 360 004e 611C     		adds	r1, r4, #1
 361              	.LVL53:
 362 0050 0123     		movs	r3, #1
 363 0052 E356     		ldrsb	r3, [r4, r3]
 364 0054 2E2B     		cmp	r3, #46
 365 0056 27D0     		beq	.L54
 478:../utilities/fsl_str.c ****         {
 479:../utilities/fsl_str.c ****             /* Must get precision field width, if present. */
 480:../utilities/fsl_str.c ****             precision_width = 0;
 481:../utilities/fsl_str.c ****             done = false;
 482:../utilities/fsl_str.c ****             while (!done)
 483:../utilities/fsl_str.c ****             {
 484:../utilities/fsl_str.c ****                 c = *++p;
 485:../utilities/fsl_str.c ****                 if ((c >= '0') && (c <= '9'))
 486:../utilities/fsl_str.c ****                 {
 487:../utilities/fsl_str.c ****                     precision_width = (precision_width * 10) + (c - '0');
 488:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 489:../utilities/fsl_str.c ****                     valid_precision_width = true;
 490:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 491:../utilities/fsl_str.c ****                 }
 492:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 493:../utilities/fsl_str.c ****                 else if (c == '*')
 494:../utilities/fsl_str.c ****                 {
 495:../utilities/fsl_str.c ****                     precision_width = (uint32_t)va_arg(ap, uint32_t);
 496:../utilities/fsl_str.c ****                     valid_precision_width = true;
 497:../utilities/fsl_str.c ****                 }
 498:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 499:../utilities/fsl_str.c ****                 else
 500:../utilities/fsl_str.c ****                 {
 501:../utilities/fsl_str.c ****                     /* We've gone one char too far. */
 502:../utilities/fsl_str.c ****                     --p;
 503:../utilities/fsl_str.c ****                     done = true;
 504:../utilities/fsl_str.c ****                 }
 505:../utilities/fsl_str.c ****             }
 506:../utilities/fsl_str.c ****         }
 507:../utilities/fsl_str.c ****         else
 508:../utilities/fsl_str.c ****         {
 509:../utilities/fsl_str.c ****             /* We've gone one char too far. */
 510:../utilities/fsl_str.c ****             --p;
 366              		.loc 1 510 0
 367 0058 2200     		movs	r2, r4
 368              	.LVL54:
 369              	.L27:
 511:../utilities/fsl_str.c ****         }
 512:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 513:../utilities/fsl_str.c ****         /*
 514:../utilities/fsl_str.c ****          * Check for the length modifier.
 515:../utilities/fsl_str.c ****          */
 516:../utilities/fsl_str.c ****         switch (/* c = */ *++p)
 517:../utilities/fsl_str.c ****         {
 518:../utilities/fsl_str.c ****             case 'h':
 519:../utilities/fsl_str.c ****                 if (*++p != 'h')
 520:../utilities/fsl_str.c ****                 {
 521:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthShortInt;
 522:../utilities/fsl_str.c ****                     --p;
 523:../utilities/fsl_str.c ****                 }
 524:../utilities/fsl_str.c ****                 else
 525:../utilities/fsl_str.c ****                 {
 526:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthChar;
 527:../utilities/fsl_str.c ****                 }
 528:../utilities/fsl_str.c ****                 break;
 529:../utilities/fsl_str.c ****             case 'l':
 530:../utilities/fsl_str.c ****                 if (*++p != 'l')
 531:../utilities/fsl_str.c ****                 {
 532:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthLongInt;
 533:../utilities/fsl_str.c ****                     --p;
 534:../utilities/fsl_str.c ****                 }
 535:../utilities/fsl_str.c ****                 else
 536:../utilities/fsl_str.c ****                 {
 537:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthLongLongInt;
 538:../utilities/fsl_str.c ****                 }
 539:../utilities/fsl_str.c ****                 break;
 540:../utilities/fsl_str.c ****             default:
 541:../utilities/fsl_str.c ****                 /* we've gone one char too far */
 542:../utilities/fsl_str.c ****                 --p;
 543:../utilities/fsl_str.c ****                 break;
 544:../utilities/fsl_str.c ****         }
 545:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 546:../utilities/fsl_str.c ****         /* Now we're ready to examine the format. */
 547:../utilities/fsl_str.c ****         c = *++p;
 370              		.loc 1 547 0
 371 005a 541C     		adds	r4, r2, #1
 372              	.LVL55:
 373 005c 0123     		movs	r3, #1
 374 005e D356     		ldrsb	r3, [r2, r3]
 375 0060 9B46     		mov	fp, r3
 376 0062 9946     		mov	r9, r3
 377              	.LVL56:
 548:../utilities/fsl_str.c ****         {
 549:../utilities/fsl_str.c ****             if ((c == 'd') || (c == 'i') || (c == 'f') || (c == 'F') || (c == 'x') || (c == 'X') ||
 378              		.loc 1 549 0
 379 0064 642B     		cmp	r3, #100
 380 0066 2BD0     		beq	.L30
 381              		.loc 1 549 0 is_stmt 0 discriminator 1
 382 0068 692B     		cmp	r3, #105
 383 006a 29D0     		beq	.L30
 384              		.loc 1 549 0 discriminator 2
 385 006c 662B     		cmp	r3, #102
 386 006e 27D0     		beq	.L30
 387              		.loc 1 549 0 discriminator 3
 388 0070 462B     		cmp	r3, #70
 389 0072 25D0     		beq	.L30
 390              		.loc 1 549 0 discriminator 4
 391 0074 782B     		cmp	r3, #120
 392 0076 23D0     		beq	.L30
 393              		.loc 1 549 0 discriminator 5
 394 0078 582B     		cmp	r3, #88
 395 007a 21D0     		beq	.L30
 396              		.loc 1 549 0 discriminator 6
 397 007c 6F2B     		cmp	r3, #111
 398 007e 1FD0     		beq	.L30
 399              		.loc 1 549 0 discriminator 7
 400 0080 622B     		cmp	r3, #98
 401 0082 1DD0     		beq	.L30
 550:../utilities/fsl_str.c ****                 (c == 'b') || (c == 'p') || (c == 'u'))
 402              		.loc 1 550 0 is_stmt 1
 403 0084 702B     		cmp	r3, #112
 404 0086 1BD0     		beq	.L30
 405              		.loc 1 550 0 is_stmt 0 discriminator 1
 406 0088 752B     		cmp	r3, #117
 407 008a 19D0     		beq	.L30
 551:../utilities/fsl_str.c ****             {
 552:../utilities/fsl_str.c ****                 if ((c == 'd') || (c == 'i'))
 553:../utilities/fsl_str.c ****                 {
 554:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 555:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_LengthLongLongInt)
 556:../utilities/fsl_str.c ****                     {
 557:../utilities/fsl_str.c ****                         ival = (int64_t)va_arg(ap, int64_t);
 558:../utilities/fsl_str.c ****                     }
 559:../utilities/fsl_str.c ****                     else
 560:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 561:../utilities/fsl_str.c ****                     {
 562:../utilities/fsl_str.c ****                         ival = (int32_t)va_arg(ap, int32_t);
 563:../utilities/fsl_str.c ****                     }
 564:../utilities/fsl_str.c ****                     vlen = ConvertRadixNumToString(vstr, &ival, true, 10, use_caps);
 565:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 566:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 567:../utilities/fsl_str.c ****                     if (ival < 0)
 568:../utilities/fsl_str.c ****                     {
 569:../utilities/fsl_str.c ****                         schar = '-';
 570:../utilities/fsl_str.c ****                         ++vlen;
 571:../utilities/fsl_str.c ****                     }
 572:../utilities/fsl_str.c ****                     else
 573:../utilities/fsl_str.c ****                     {
 574:../utilities/fsl_str.c ****                         if (flags_used & kPRINTF_Plus)
 575:../utilities/fsl_str.c ****                         {
 576:../utilities/fsl_str.c ****                             schar = '+';
 577:../utilities/fsl_str.c ****                             ++vlen;
 578:../utilities/fsl_str.c ****                         }
 579:../utilities/fsl_str.c ****                         else
 580:../utilities/fsl_str.c ****                         {
 581:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Space)
 582:../utilities/fsl_str.c ****                             {
 583:../utilities/fsl_str.c ****                                 schar = ' ';
 584:../utilities/fsl_str.c ****                                 ++vlen;
 585:../utilities/fsl_str.c ****                             }
 586:../utilities/fsl_str.c ****                             else
 587:../utilities/fsl_str.c ****                             {
 588:../utilities/fsl_str.c ****                                 schar = 0;
 589:../utilities/fsl_str.c ****                             }
 590:../utilities/fsl_str.c ****                         }
 591:../utilities/fsl_str.c ****                     }
 592:../utilities/fsl_str.c ****                     dschar = false;
 593:../utilities/fsl_str.c ****                     /* Do the ZERO pad. */
 594:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 595:../utilities/fsl_str.c ****                     {
 596:../utilities/fsl_str.c ****                         if (schar)
 597:../utilities/fsl_str.c ****                         {
 598:../utilities/fsl_str.c ****                             cb(buf, &count, schar, 1);
 599:../utilities/fsl_str.c ****                         }
 600:../utilities/fsl_str.c ****                         dschar = true;
 601:../utilities/fsl_str.c **** 
 602:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 603:../utilities/fsl_str.c ****                         vlen = field_width;
 604:../utilities/fsl_str.c ****                     }
 605:../utilities/fsl_str.c ****                     else
 606:../utilities/fsl_str.c ****                     {
 607:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 608:../utilities/fsl_str.c ****                         {
 609:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 610:../utilities/fsl_str.c ****                             if (schar)
 611:../utilities/fsl_str.c ****                             {
 612:../utilities/fsl_str.c ****                                 cb(buf, &count, schar, 1);
 613:../utilities/fsl_str.c ****                             }
 614:../utilities/fsl_str.c ****                             dschar = true;
 615:../utilities/fsl_str.c ****                         }
 616:../utilities/fsl_str.c ****                     }
 617:../utilities/fsl_str.c ****                     /* The string was built in reverse order, now display in correct order. */
 618:../utilities/fsl_str.c ****                     if ((!dschar) && schar)
 619:../utilities/fsl_str.c ****                     {
 620:../utilities/fsl_str.c ****                         cb(buf, &count, schar, 1);
 621:../utilities/fsl_str.c ****                     }
 622:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 623:../utilities/fsl_str.c ****                 }
 624:../utilities/fsl_str.c **** 
 625:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 626:../utilities/fsl_str.c ****                 if ((c == 'f') || (c == 'F'))
 627:../utilities/fsl_str.c ****                 {
 628:../utilities/fsl_str.c ****                     fval = (double)va_arg(ap, double);
 629:../utilities/fsl_str.c ****                     vlen = ConvertFloatRadixNumToString(vstr, &fval, 10, precision_width);
 630:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 631:../utilities/fsl_str.c **** 
 632:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 633:../utilities/fsl_str.c ****                     if (fval < 0)
 634:../utilities/fsl_str.c ****                     {
 635:../utilities/fsl_str.c ****                         schar = '-';
 636:../utilities/fsl_str.c ****                         ++vlen;
 637:../utilities/fsl_str.c ****                     }
 638:../utilities/fsl_str.c ****                     else
 639:../utilities/fsl_str.c ****                     {
 640:../utilities/fsl_str.c ****                         if (flags_used & kPRINTF_Plus)
 641:../utilities/fsl_str.c ****                         {
 642:../utilities/fsl_str.c ****                             schar = '+';
 643:../utilities/fsl_str.c ****                             ++vlen;
 644:../utilities/fsl_str.c ****                         }
 645:../utilities/fsl_str.c ****                         else
 646:../utilities/fsl_str.c ****                         {
 647:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Space)
 648:../utilities/fsl_str.c ****                             {
 649:../utilities/fsl_str.c ****                                 schar = ' ';
 650:../utilities/fsl_str.c ****                                 ++vlen;
 651:../utilities/fsl_str.c ****                             }
 652:../utilities/fsl_str.c ****                             else
 653:../utilities/fsl_str.c ****                             {
 654:../utilities/fsl_str.c ****                                 schar = 0;
 655:../utilities/fsl_str.c ****                             }
 656:../utilities/fsl_str.c ****                         }
 657:../utilities/fsl_str.c ****                     }
 658:../utilities/fsl_str.c ****                     dschar = false;
 659:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 660:../utilities/fsl_str.c ****                     {
 661:../utilities/fsl_str.c ****                         if (schar)
 662:../utilities/fsl_str.c ****                         {
 663:../utilities/fsl_str.c ****                             cb(buf, &count, schar, 1);
 664:../utilities/fsl_str.c ****                         }
 665:../utilities/fsl_str.c ****                         dschar = true;
 666:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 667:../utilities/fsl_str.c ****                         vlen = field_width;
 668:../utilities/fsl_str.c ****                     }
 669:../utilities/fsl_str.c ****                     else
 670:../utilities/fsl_str.c ****                     {
 671:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 672:../utilities/fsl_str.c ****                         {
 673:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 674:../utilities/fsl_str.c ****                             if (schar)
 675:../utilities/fsl_str.c ****                             {
 676:../utilities/fsl_str.c ****                                 cb(buf, &count, schar, 1);
 677:../utilities/fsl_str.c ****                             }
 678:../utilities/fsl_str.c ****                             dschar = true;
 679:../utilities/fsl_str.c ****                         }
 680:../utilities/fsl_str.c ****                     }
 681:../utilities/fsl_str.c ****                     if ((!dschar) && schar)
 682:../utilities/fsl_str.c ****                     {
 683:../utilities/fsl_str.c ****                         cb(buf, &count, schar, 1);
 684:../utilities/fsl_str.c ****                     }
 685:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 686:../utilities/fsl_str.c ****                 }
 687:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 688:../utilities/fsl_str.c ****                 if ((c == 'X') || (c == 'x'))
 689:../utilities/fsl_str.c ****                 {
 690:../utilities/fsl_str.c ****                     if (c == 'x')
 691:../utilities/fsl_str.c ****                     {
 692:../utilities/fsl_str.c ****                         use_caps = false;
 693:../utilities/fsl_str.c ****                     }
 694:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 695:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_LengthLongLongInt)
 696:../utilities/fsl_str.c ****                     {
 697:../utilities/fsl_str.c ****                         uval = (uint64_t)va_arg(ap, uint64_t);
 698:../utilities/fsl_str.c ****                     }
 699:../utilities/fsl_str.c ****                     else
 700:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 701:../utilities/fsl_str.c ****                     {
 702:../utilities/fsl_str.c ****                         uval = (uint32_t)va_arg(ap, uint32_t);
 703:../utilities/fsl_str.c ****                     }
 704:../utilities/fsl_str.c ****                     vlen = ConvertRadixNumToString(vstr, &uval, false, 16, use_caps);
 705:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 706:../utilities/fsl_str.c **** 
 707:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 708:../utilities/fsl_str.c ****                     dschar = false;
 709:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 710:../utilities/fsl_str.c ****                     {
 711:../utilities/fsl_str.c ****                         if (flags_used & kPRINTF_Pound)
 712:../utilities/fsl_str.c ****                         {
 713:../utilities/fsl_str.c ****                             cb(buf, &count, '0', 1);
 714:../utilities/fsl_str.c ****                             cb(buf, &count, (use_caps ? 'X' : 'x'), 1);
 715:../utilities/fsl_str.c ****                             dschar = true;
 716:../utilities/fsl_str.c ****                         }
 717:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 718:../utilities/fsl_str.c ****                         vlen = field_width;
 719:../utilities/fsl_str.c ****                     }
 720:../utilities/fsl_str.c ****                     else
 721:../utilities/fsl_str.c ****                     {
 722:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 723:../utilities/fsl_str.c ****                         {
 724:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Pound)
 725:../utilities/fsl_str.c ****                             {
 726:../utilities/fsl_str.c ****                                 vlen += 2;
 727:../utilities/fsl_str.c ****                             }
 728:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 729:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Pound)
 730:../utilities/fsl_str.c ****                             {
 731:../utilities/fsl_str.c ****                                 cb(buf, &count, '0', 1);
 732:../utilities/fsl_str.c ****                                 cb(buf, &count, (use_caps ? 'X' : 'x'), 1);
 733:../utilities/fsl_str.c ****                                 dschar = true;
 734:../utilities/fsl_str.c ****                             }
 735:../utilities/fsl_str.c ****                         }
 736:../utilities/fsl_str.c ****                     }
 737:../utilities/fsl_str.c **** 
 738:../utilities/fsl_str.c ****                     if ((flags_used & kPRINTF_Pound) && (!dschar))
 739:../utilities/fsl_str.c ****                     {
 740:../utilities/fsl_str.c ****                         cb(buf, &count, '0', 1);
 741:../utilities/fsl_str.c ****                         cb(buf, &count, (use_caps ? 'X' : 'x'), 1);
 742:../utilities/fsl_str.c ****                         vlen += 2;
 743:../utilities/fsl_str.c ****                     }
 744:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 745:../utilities/fsl_str.c ****                 }
 746:../utilities/fsl_str.c ****                 if ((c == 'o') || (c == 'b') || (c == 'p') || (c == 'u'))
 747:../utilities/fsl_str.c ****                 {
 748:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 749:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_LengthLongLongInt)
 750:../utilities/fsl_str.c ****                     {
 751:../utilities/fsl_str.c ****                         uval = (uint64_t)va_arg(ap, uint64_t);
 752:../utilities/fsl_str.c ****                     }
 753:../utilities/fsl_str.c ****                     else
 754:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 755:../utilities/fsl_str.c ****                     {
 756:../utilities/fsl_str.c ****                         uval = (uint32_t)va_arg(ap, uint32_t);
 757:../utilities/fsl_str.c ****                     }
 758:../utilities/fsl_str.c ****                     switch (c)
 759:../utilities/fsl_str.c ****                     {
 760:../utilities/fsl_str.c ****                         case 'o':
 761:../utilities/fsl_str.c ****                             radix = 8;
 762:../utilities/fsl_str.c ****                             break;
 763:../utilities/fsl_str.c ****                         case 'b':
 764:../utilities/fsl_str.c ****                             radix = 2;
 765:../utilities/fsl_str.c ****                             break;
 766:../utilities/fsl_str.c ****                         case 'p':
 767:../utilities/fsl_str.c ****                             radix = 16;
 768:../utilities/fsl_str.c ****                             break;
 769:../utilities/fsl_str.c ****                         case 'u':
 770:../utilities/fsl_str.c ****                             radix = 10;
 771:../utilities/fsl_str.c ****                             break;
 772:../utilities/fsl_str.c ****                     }
 773:../utilities/fsl_str.c ****                     vlen = ConvertRadixNumToString(vstr, &uval, false, radix, use_caps);
 774:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 775:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 776:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 777:../utilities/fsl_str.c ****                     {
 778:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 779:../utilities/fsl_str.c ****                         vlen = field_width;
 780:../utilities/fsl_str.c ****                     }
 781:../utilities/fsl_str.c ****                     else
 782:../utilities/fsl_str.c ****                     {
 783:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 784:../utilities/fsl_str.c ****                         {
 785:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 786:../utilities/fsl_str.c ****                         }
 787:../utilities/fsl_str.c ****                     }
 788:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 789:../utilities/fsl_str.c ****                 }
 790:../utilities/fsl_str.c **** #if !PRINTF_ADVANCED_ENABLE
 791:../utilities/fsl_str.c ****                 cb(buf, &count, ' ', field_width - vlen);
 792:../utilities/fsl_str.c **** #endif /* !PRINTF_ADVANCED_ENABLE */
 793:../utilities/fsl_str.c ****                 if (vstrp != NULL)
 794:../utilities/fsl_str.c ****                 {
 795:../utilities/fsl_str.c ****                     while (*vstrp)
 796:../utilities/fsl_str.c ****                     {
 797:../utilities/fsl_str.c ****                         cb(buf, &count, *vstrp--, 1);
 798:../utilities/fsl_str.c ****                     }
 799:../utilities/fsl_str.c ****                 }
 800:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 801:../utilities/fsl_str.c ****                 if (flags_used & kPRINTF_Minus)
 802:../utilities/fsl_str.c ****                 {
 803:../utilities/fsl_str.c ****                     cb(buf, &count, ' ', field_width - vlen);
 804:../utilities/fsl_str.c ****                 }
 805:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 806:../utilities/fsl_str.c ****             }
 807:../utilities/fsl_str.c ****             else if (c == 'c')
 408              		.loc 1 807 0 is_stmt 1
 409 008c 5B46     		mov	r3, fp
 410 008e 632B     		cmp	r3, #99
 411 0090 00D0     		beq	.LCB437
 412 0092 9BE0     		b	.L47	@long jump
 413              	.LCB437:
 808:../utilities/fsl_str.c ****             {
 809:../utilities/fsl_str.c ****                 cval = (char)va_arg(ap, uint32_t);
 414              		.loc 1 809 0
 415 0094 059B     		ldr	r3, [sp, #20]
 416              	.LVL57:
 417 0096 1A1D     		adds	r2, r3, #4
 418 0098 0592     		str	r2, [sp, #20]
 419 009a 0022     		movs	r2, #0
 420 009c 9A56     		ldrsb	r2, [r3, r2]
 421              	.LVL58:
 810:../utilities/fsl_str.c ****                 cb(buf, &count, cval, 1);
 422              		.loc 1 810 0
 423 009e 0123     		movs	r3, #1
 424 00a0 08A9     		add	r1, sp, #32
 425 00a2 0398     		ldr	r0, [sp, #12]
 426 00a4 B847     		blx	r7
 427              	.LVL59:
 428 00a6 84E0     		b	.L23
 429              	.LVL60:
 430              	.L54:
 481:../utilities/fsl_str.c ****             while (!done)
 431              		.loc 1 481 0
 432 00a8 0024     		movs	r4, #0
 433              	.LVL61:
 434              	.L26:
 435 00aa 0A00     		movs	r2, r1
 436              	.L28:
 437              	.LVL62:
 482:../utilities/fsl_str.c ****             {
 438              		.loc 1 482 0
 439 00ac 002C     		cmp	r4, #0
 440 00ae D4D1     		bne	.L27
 484:../utilities/fsl_str.c ****                 if ((c >= '0') && (c <= '9'))
 441              		.loc 1 484 0
 442 00b0 511C     		adds	r1, r2, #1
 443              	.LVL63:
 444 00b2 0123     		movs	r3, #1
 445 00b4 D356     		ldrsb	r3, [r2, r3]
 446              	.LVL64:
 485:../utilities/fsl_str.c ****                 {
 447              		.loc 1 485 0
 448 00b6 303B     		subs	r3, r3, #48
 449              	.LVL65:
 450 00b8 092B     		cmp	r3, #9
 451 00ba F6D9     		bls	.L26
 503:../utilities/fsl_str.c ****                 }
 452              		.loc 1 503 0
 453 00bc 0400     		movs	r4, r0
 454              	.LVL66:
 455 00be F5E7     		b	.L28
 456              	.LVL67:
 457              	.L30:
 552:../utilities/fsl_str.c ****                 {
 458              		.loc 1 552 0
 459 00c0 4B46     		mov	r3, r9
 460              	.LVL68:
 461 00c2 642B     		cmp	r3, #100
 462 00c4 09D0     		beq	.L32
 463              	.LVL69:
 552:../utilities/fsl_str.c ****                 {
 464              		.loc 1 552 0 is_stmt 0 discriminator 1
 465 00c6 692B     		cmp	r3, #105
 466 00c8 07D0     		beq	.L32
 467              	.LVL70:
 468              	.L33:
 688:../utilities/fsl_str.c ****                 {
 469              		.loc 1 688 0 is_stmt 1
 470 00ca 4B46     		mov	r3, r9
 471 00cc 582B     		cmp	r3, #88
 472 00ce 16D0     		beq	.L34
 473              	.LVL71:
 688:../utilities/fsl_str.c ****                 {
 474              		.loc 1 688 0 is_stmt 0 discriminator 1
 475 00d0 782B     		cmp	r3, #120
 476 00d2 14D0     		beq	.L34
 415:../utilities/fsl_str.c **** 
 477              		.loc 1 415 0 is_stmt 1
 478 00d4 0123     		movs	r3, #1
 479              	.LVL72:
 480 00d6 9846     		mov	r8, r3
 481 00d8 27E0     		b	.L35
 482              	.LVL73:
 483              	.L32:
 562:../utilities/fsl_str.c ****                     }
 484              		.loc 1 562 0
 485 00da 059B     		ldr	r3, [sp, #20]
 486              	.LVL74:
 487 00dc 1A1D     		adds	r2, r3, #4
 488 00de 0592     		str	r2, [sp, #20]
 489 00e0 1B68     		ldr	r3, [r3]
 490 00e2 0793     		str	r3, [sp, #28]
 564:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 491              		.loc 1 564 0
 492 00e4 0123     		movs	r3, #1
 493 00e6 0093     		str	r3, [sp]
 494 00e8 0933     		adds	r3, r3, #9
 495 00ea 0122     		movs	r2, #1
 496 00ec 07A9     		add	r1, sp, #28
 497 00ee 09A8     		add	r0, sp, #36
 498 00f0 FFF7FEFF 		bl	ConvertRadixNumToString
 499              	.LVL75:
 500 00f4 0490     		str	r0, [sp, #16]
 501              	.LVL76:
 565:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 502              		.loc 1 565 0
 503 00f6 09AE     		add	r6, sp, #36
 504              	.LVL77:
 505 00f8 8446     		mov	ip, r0
 506 00fa 6644     		add	r6, r6, ip
 507              	.LVL78:
 508 00fc E5E7     		b	.L33
 509              	.LVL79:
 510              	.L34:
 690:../utilities/fsl_str.c ****                     {
 511              		.loc 1 690 0
 512 00fe 4B46     		mov	r3, r9
 513              	.LVL80:
 514 0100 782B     		cmp	r3, #120
 515 0102 2BD0     		beq	.L57
 516              	.LVL81:
 415:../utilities/fsl_str.c **** 
 517              		.loc 1 415 0
 518 0104 0123     		movs	r3, #1
 519              	.LVL82:
 520 0106 9846     		mov	r8, r3
 521              	.L36:
 522              	.LVL83:
 702:../utilities/fsl_str.c ****                     }
 523              		.loc 1 702 0
 524 0108 059B     		ldr	r3, [sp, #20]
 525 010a 1A1D     		adds	r2, r3, #4
 526 010c 0592     		str	r2, [sp, #20]
 527 010e 1B68     		ldr	r3, [r3]
 528 0110 0693     		str	r3, [sp, #24]
 704:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 529              		.loc 1 704 0
 530 0112 4346     		mov	r3, r8
 531 0114 0093     		str	r3, [sp]
 532 0116 1023     		movs	r3, #16
 533 0118 0022     		movs	r2, #0
 534 011a 06A9     		add	r1, sp, #24
 535 011c 09A8     		add	r0, sp, #36
 536 011e FFF7FEFF 		bl	ConvertRadixNumToString
 537              	.LVL84:
 538 0122 0490     		str	r0, [sp, #16]
 539              	.LVL85:
 705:../utilities/fsl_str.c **** 
 540              		.loc 1 705 0
 541 0124 09AE     		add	r6, sp, #36
 542              	.LVL86:
 543 0126 8446     		mov	ip, r0
 544 0128 6644     		add	r6, r6, ip
 545              	.LVL87:
 546              	.L35:
 746:../utilities/fsl_str.c ****                 {
 547              		.loc 1 746 0
 548 012a 4B46     		mov	r3, r9
 549 012c 6F2B     		cmp	r3, #111
 550 012e 05D0     		beq	.L37
 551              	.LVL88:
 746:../utilities/fsl_str.c ****                 {
 552              		.loc 1 746 0 is_stmt 0 discriminator 1
 553 0130 622B     		cmp	r3, #98
 554 0132 03D0     		beq	.L37
 746:../utilities/fsl_str.c ****                 {
 555              		.loc 1 746 0 discriminator 2
 556 0134 702B     		cmp	r3, #112
 557 0136 01D0     		beq	.L37
 746:../utilities/fsl_str.c ****                 {
 558              		.loc 1 746 0 discriminator 3
 559 0138 752B     		cmp	r3, #117
 560 013a 22D1     		bne	.L38
 561              	.L37:
 756:../utilities/fsl_str.c ****                     }
 562              		.loc 1 756 0 is_stmt 1
 563 013c 059B     		ldr	r3, [sp, #20]
 564              	.LVL89:
 565 013e 1A1D     		adds	r2, r3, #4
 566 0140 0592     		str	r2, [sp, #20]
 567 0142 1B68     		ldr	r3, [r3]
 568 0144 0693     		str	r3, [sp, #24]
 758:../utilities/fsl_str.c ****                     {
 569              		.loc 1 758 0
 570 0146 5B46     		mov	r3, fp
 571 0148 6F2B     		cmp	r3, #111
 572 014a 26D0     		beq	.L58
 573              	.LVL90:
 574 014c 09DD     		ble	.L60
 575 014e 702B     		cmp	r3, #112
 576 0150 20D0     		beq	.L43
 577 0152 752B     		cmp	r3, #117
 578 0154 09D1     		bne	.L40
 579              	.LVL91:
 770:../utilities/fsl_str.c ****                             break;
 580              		.loc 1 770 0
 581 0156 0A23     		movs	r3, #10
 582              	.LVL92:
 583 0158 9A46     		mov	r10, r3
 771:../utilities/fsl_str.c ****                     }
 584              		.loc 1 771 0
 585 015a 06E0     		b	.L40
 586              	.LVL93:
 587              	.L57:
 692:../utilities/fsl_str.c ****                     }
 588              		.loc 1 692 0
 589 015c 0023     		movs	r3, #0
 590              	.LVL94:
 591 015e 9846     		mov	r8, r3
 592 0160 D2E7     		b	.L36
 593              	.LVL95:
 594              	.L60:
 758:../utilities/fsl_str.c ****                     {
 595              		.loc 1 758 0
 596 0162 622B     		cmp	r3, #98
 597 0164 01D1     		bne	.L40
 598              	.LVL96:
 764:../utilities/fsl_str.c ****                             break;
 599              		.loc 1 764 0
 600 0166 0223     		movs	r3, #2
 601              	.LVL97:
 602 0168 9A46     		mov	r10, r3
 603              	.LVL98:
 604              	.L40:
 773:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 605              		.loc 1 773 0
 606 016a 4346     		mov	r3, r8
 607 016c 0093     		str	r3, [sp]
 608 016e 5346     		mov	r3, r10
 609 0170 0022     		movs	r2, #0
 610 0172 06A9     		add	r1, sp, #24
 611 0174 09A8     		add	r0, sp, #36
 612 0176 FFF7FEFF 		bl	ConvertRadixNumToString
 613              	.LVL99:
 614 017a 0490     		str	r0, [sp, #16]
 615              	.LVL100:
 774:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 616              		.loc 1 774 0
 617 017c 09AE     		add	r6, sp, #36
 618              	.LVL101:
 619 017e 8446     		mov	ip, r0
 620 0180 6644     		add	r6, r6, ip
 621              	.LVL102:
 622              	.L38:
 791:../utilities/fsl_str.c **** #endif /* !PRINTF_ADVANCED_ENABLE */
 623              		.loc 1 791 0
 624 0182 049B     		ldr	r3, [sp, #16]
 625 0184 EB1A     		subs	r3, r5, r3
 626 0186 2022     		movs	r2, #32
 627 0188 08A9     		add	r1, sp, #32
 628 018a 0398     		ldr	r0, [sp, #12]
 629 018c B847     		blx	r7
 630              	.LVL103:
 793:../utilities/fsl_str.c ****                 {
 631              		.loc 1 793 0
 632 018e 002E     		cmp	r6, #0
 633 0190 0BD1     		bne	.L45
 634 0192 0EE0     		b	.L23
 635              	.LVL104:
 636              	.L43:
 767:../utilities/fsl_str.c ****                             break;
 637              		.loc 1 767 0
 638 0194 1023     		movs	r3, #16
 639              	.LVL105:
 640 0196 9A46     		mov	r10, r3
 768:../utilities/fsl_str.c ****                         case 'u':
 641              		.loc 1 768 0
 642 0198 E7E7     		b	.L40
 643              	.LVL106:
 644              	.L58:
 761:../utilities/fsl_str.c ****                             break;
 645              		.loc 1 761 0
 646 019a 0823     		movs	r3, #8
 647              	.LVL107:
 648 019c 9A46     		mov	r10, r3
 649              	.LVL108:
 650 019e E4E7     		b	.L40
 651              	.LVL109:
 652              	.L46:
 797:../utilities/fsl_str.c ****                     }
 653              		.loc 1 797 0
 654 01a0 013E     		subs	r6, r6, #1
 655              	.LVL110:
 656 01a2 0123     		movs	r3, #1
 657 01a4 08A9     		add	r1, sp, #32
 658 01a6 0398     		ldr	r0, [sp, #12]
 659 01a8 B847     		blx	r7
 660              	.LVL111:
 661              	.L45:
 795:../utilities/fsl_str.c ****                     {
 662              		.loc 1 795 0
 663 01aa 0022     		movs	r2, #0
 664 01ac B256     		ldrsb	r2, [r6, r2]
 665 01ae 002A     		cmp	r2, #0
 666 01b0 F6D1     		bne	.L46
 667              	.LVL112:
 668              	.L23:
 400:../utilities/fsl_str.c ****     {
 669              		.loc 1 400 0 discriminator 2
 670 01b2 0134     		adds	r4, r4, #1
 671              	.LVL113:
 672              	.L21:
 400:../utilities/fsl_str.c ****     {
 673              		.loc 1 400 0 is_stmt 0 discriminator 1
 674 01b4 0022     		movs	r2, #0
 675 01b6 A256     		ldrsb	r2, [r4, r2]
 676 01b8 131E     		subs	r3, r2, #0
 677              	.LVL114:
 678 01ba 2CD0     		beq	.L61
 408:../utilities/fsl_str.c ****         {
 679              		.loc 1 408 0 is_stmt 1
 680 01bc 252B     		cmp	r3, #37
 681 01be 00D1     		bne	.LCB778
 682 01c0 30E7     		b	.L52	@long jump
 683              	.LCB778:
 410:../utilities/fsl_str.c ****             /* By using 'continue', the next iteration of the loop is used, skipping the code that 
 684              		.loc 1 410 0
 685 01c2 0123     		movs	r3, #1
 686 01c4 08A9     		add	r1, sp, #32
 687 01c6 0398     		ldr	r0, [sp, #12]
 688 01c8 B847     		blx	r7
 689              	.LVL115:
 412:../utilities/fsl_str.c ****         }
 690              		.loc 1 412 0
 691 01ca F2E7     		b	.L23
 692              	.LVL116:
 693              	.L47:
 811:../utilities/fsl_str.c ****             }
 812:../utilities/fsl_str.c ****             else if (c == 's')
 694              		.loc 1 812 0
 695 01cc 732B     		cmp	r3, #115
 696 01ce 05D0     		beq	.L62
 813:../utilities/fsl_str.c ****             {
 814:../utilities/fsl_str.c ****                 sval = (char *)va_arg(ap, char *);
 815:../utilities/fsl_str.c ****                 if (sval)
 816:../utilities/fsl_str.c ****                 {
 817:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 818:../utilities/fsl_str.c ****                     if (valid_precision_width)
 819:../utilities/fsl_str.c ****                     {
 820:../utilities/fsl_str.c ****                         vlen = precision_width;
 821:../utilities/fsl_str.c ****                     }
 822:../utilities/fsl_str.c ****                     else
 823:../utilities/fsl_str.c ****                     {
 824:../utilities/fsl_str.c ****                         vlen = strlen(sval);
 825:../utilities/fsl_str.c ****                     }
 826:../utilities/fsl_str.c **** #else
 827:../utilities/fsl_str.c ****                     vlen = strlen(sval);
 828:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 829:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 830:../utilities/fsl_str.c ****                     if (!(flags_used & kPRINTF_Minus))
 831:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 832:../utilities/fsl_str.c ****                     {
 833:../utilities/fsl_str.c ****                         cb(buf, &count, ' ', field_width - vlen);
 834:../utilities/fsl_str.c ****                     }
 835:../utilities/fsl_str.c **** 
 836:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 837:../utilities/fsl_str.c ****                     if (valid_precision_width)
 838:../utilities/fsl_str.c ****                     {
 839:../utilities/fsl_str.c ****                         while ((*sval) && (vlen > 0))
 840:../utilities/fsl_str.c ****                         {
 841:../utilities/fsl_str.c ****                             cb(buf, &count, *sval++, 1);
 842:../utilities/fsl_str.c ****                             vlen--;
 843:../utilities/fsl_str.c ****                         }
 844:../utilities/fsl_str.c ****                         /* In case that vlen sval is shorter than vlen */
 845:../utilities/fsl_str.c ****                         vlen = precision_width - vlen;
 846:../utilities/fsl_str.c ****                     }
 847:../utilities/fsl_str.c ****                     else
 848:../utilities/fsl_str.c ****                     {
 849:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 850:../utilities/fsl_str.c ****                         while (*sval)
 851:../utilities/fsl_str.c ****                         {
 852:../utilities/fsl_str.c ****                             cb(buf, &count, *sval++, 1);
 853:../utilities/fsl_str.c ****                         }
 854:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 855:../utilities/fsl_str.c ****                     }
 856:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 857:../utilities/fsl_str.c **** 
 858:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 859:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Minus)
 860:../utilities/fsl_str.c ****                     {
 861:../utilities/fsl_str.c ****                         cb(buf, &count, ' ', field_width - vlen);
 862:../utilities/fsl_str.c ****                     }
 863:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 864:../utilities/fsl_str.c ****                 }
 865:../utilities/fsl_str.c ****             }
 866:../utilities/fsl_str.c ****             else
 867:../utilities/fsl_str.c ****             {
 868:../utilities/fsl_str.c ****                 cb(buf, &count, c, 1);
 697              		.loc 1 868 0
 698 01d0 0123     		movs	r3, #1
 699              	.LVL117:
 700 01d2 5A46     		mov	r2, fp
 701 01d4 08A9     		add	r1, sp, #32
 702 01d6 0398     		ldr	r0, [sp, #12]
 703 01d8 B847     		blx	r7
 704              	.LVL118:
 705 01da EAE7     		b	.L23
 706              	.LVL119:
 707              	.L62:
 814:../utilities/fsl_str.c ****                 if (sval)
 708              		.loc 1 814 0
 709 01dc 059B     		ldr	r3, [sp, #20]
 710              	.LVL120:
 711 01de 1A1D     		adds	r2, r3, #4
 712 01e0 0592     		str	r2, [sp, #20]
 713 01e2 1B68     		ldr	r3, [r3]
 714 01e4 9946     		mov	r9, r3
 715              	.LVL121:
 815:../utilities/fsl_str.c ****                 {
 716              		.loc 1 815 0
 717 01e6 002B     		cmp	r3, #0
 718 01e8 E3D0     		beq	.L23
 827:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 719              		.loc 1 827 0
 720 01ea 1800     		movs	r0, r3
 721 01ec FFF7FEFF 		bl	strlen
 722              	.LVL122:
 723 01f0 0490     		str	r0, [sp, #16]
 724              	.LVL123:
 833:../utilities/fsl_str.c ****                     }
 725              		.loc 1 833 0
 726 01f2 2B1A     		subs	r3, r5, r0
 727 01f4 2022     		movs	r2, #32
 728 01f6 08A9     		add	r1, sp, #32
 729 01f8 0398     		ldr	r0, [sp, #12]
 730              	.LVL124:
 731 01fa B847     		blx	r7
 732              	.LVL125:
 850:../utilities/fsl_str.c ****                         {
 733              		.loc 1 850 0
 734 01fc 05E0     		b	.L49
 735              	.LVL126:
 736              	.L50:
 852:../utilities/fsl_str.c ****                         }
 737              		.loc 1 852 0
 738 01fe 0123     		movs	r3, #1
 739              	.LVL127:
 740 0200 9C46     		mov	ip, r3
 741 0202 E144     		add	r9, r9, ip
 742              	.LVL128:
 743 0204 08A9     		add	r1, sp, #32
 744 0206 0398     		ldr	r0, [sp, #12]
 745 0208 B847     		blx	r7
 746              	.LVL129:
 747              	.L49:
 850:../utilities/fsl_str.c ****                         {
 748              		.loc 1 850 0
 749 020a 4B46     		mov	r3, r9
 750 020c 0022     		movs	r2, #0
 751 020e 9A56     		ldrsb	r2, [r3, r2]
 752 0210 002A     		cmp	r2, #0
 753 0212 F4D1     		bne	.L50
 754 0214 CDE7     		b	.L23
 755              	.LVL130:
 756              	.L61:
 869:../utilities/fsl_str.c ****             }
 870:../utilities/fsl_str.c ****         }
 871:../utilities/fsl_str.c ****     }
 872:../utilities/fsl_str.c **** 
 873:../utilities/fsl_str.c ****     return count;
 874:../utilities/fsl_str.c **** }
 757              		.loc 1 874 0
 758 0216 0898     		ldr	r0, [sp, #32]
 759 0218 13B0     		add	sp, sp, #76
 760              		@ sp needed
 761              	.LVL131:
 762              	.LVL132:
 763              	.LVL133:
 764              	.LVL134:
 765 021a 3CBC     		pop	{r2, r3, r4, r5}
 766 021c 9046     		mov	r8, r2
 767 021e 9946     		mov	r9, r3
 768 0220 A246     		mov	r10, r4
 769 0222 AB46     		mov	fp, r5
 770 0224 F0BD     		pop	{r4, r5, r6, r7, pc}
 771              		.cfi_endproc
 772              	.LFE55:
 774              		.section	.text.StrFormatScanf,"ax",%progbits
 775              		.align	1
 776              		.global	StrFormatScanf
 777              		.syntax unified
 778              		.code	16
 779              		.thumb_func
 780              		.fpu softvfp
 782              	StrFormatScanf:
 783              	.LFB56:
 875:../utilities/fsl_str.c **** 
 876:../utilities/fsl_str.c **** int StrFormatScanf(const char *line_ptr, char *format, va_list args_ptr)
 877:../utilities/fsl_str.c **** {
 784              		.loc 1 877 0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 16
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788              	.LVL135:
 789 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 790              		.cfi_def_cfa_offset 20
 791              		.cfi_offset 4, -20
 792              		.cfi_offset 5, -16
 793              		.cfi_offset 6, -12
 794              		.cfi_offset 7, -8
 795              		.cfi_offset 14, -4
 796 0002 85B0     		sub	sp, sp, #20
 797              		.cfi_def_cfa_offset 40
 798 0004 0192     		str	r2, [sp, #4]
 878:../utilities/fsl_str.c ****     uint8_t base;
 879:../utilities/fsl_str.c ****     int8_t neg;
 880:../utilities/fsl_str.c ****     /* Identifier for the format string. */
 881:../utilities/fsl_str.c ****     char *c = format;
 799              		.loc 1 881 0
 800 0006 0391     		str	r1, [sp, #12]
 801              	.LVL136:
 882:../utilities/fsl_str.c ****     char temp;
 883:../utilities/fsl_str.c ****     char *buf;
 884:../utilities/fsl_str.c ****     /* Flag telling the conversion specification. */
 885:../utilities/fsl_str.c ****     uint32_t flag = 0;
 886:../utilities/fsl_str.c ****     /* Filed width for the matching input streams. */
 887:../utilities/fsl_str.c ****     uint32_t field_width;
 888:../utilities/fsl_str.c ****     /* How many arguments are assigned except the suppress. */
 889:../utilities/fsl_str.c ****     uint32_t nassigned = 0;
 890:../utilities/fsl_str.c ****     /* How many characters are read from the input streams. */
 891:../utilities/fsl_str.c ****     uint32_t n_decode = 0;
 892:../utilities/fsl_str.c **** 
 893:../utilities/fsl_str.c ****     int32_t val;
 894:../utilities/fsl_str.c **** 
 895:../utilities/fsl_str.c ****     const char *s;
 896:../utilities/fsl_str.c ****     /* Identifier for the input string. */
 897:../utilities/fsl_str.c ****     const char *p = line_ptr;
 802              		.loc 1 897 0
 803 0008 0290     		str	r0, [sp, #8]
 898:../utilities/fsl_str.c **** 
 899:../utilities/fsl_str.c ****     /* Return EOF error before any conversion. */
 900:../utilities/fsl_str.c ****     if (*p == '\0')
 804              		.loc 1 900 0
 805 000a 0023     		movs	r3, #0
 806 000c C356     		ldrsb	r3, [r0, r3]
 807 000e 002B     		cmp	r3, #0
 808 0010 00D1     		bne	.LCB906
 809 0012 65E1     		b	.L120	@long jump
 810              	.LCB906:
 889:../utilities/fsl_str.c ****     /* How many characters are read from the input streams. */
 811              		.loc 1 889 0
 812 0014 0024     		movs	r4, #0
 813 0016 11E0     		b	.L65
 814              	.LVL137:
 815              	.L128:
 901:../utilities/fsl_str.c ****     {
 902:../utilities/fsl_str.c ****         return -1;
 903:../utilities/fsl_str.c ****     }
 904:../utilities/fsl_str.c **** 
 905:../utilities/fsl_str.c ****     /* Decode directives. */
 906:../utilities/fsl_str.c ****     while ((*c) && (*p))
 907:../utilities/fsl_str.c ****     {
 908:../utilities/fsl_str.c ****         /* Ignore all white-spaces in the format strings. */
 909:../utilities/fsl_str.c ****         if (ScanIgnoreWhiteSpace((const char **)&c))
 910:../utilities/fsl_str.c ****         {
 911:../utilities/fsl_str.c ****             n_decode += ScanIgnoreWhiteSpace(&p);
 816              		.loc 1 911 0
 817 0018 02A8     		add	r0, sp, #8
 818 001a FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 819              	.LVL138:
 820 001e 0DE0     		b	.L65
 821              	.L68:
 912:../utilities/fsl_str.c ****         }
 913:../utilities/fsl_str.c ****         else if ((*c != '%') || ((*c == '%') && (*(c + 1) == '%')))
 914:../utilities/fsl_str.c ****         {
 915:../utilities/fsl_str.c ****             /* Ordinary characters. */
 916:../utilities/fsl_str.c ****             c++;
 822              		.loc 1 916 0
 823 0020 5A1C     		adds	r2, r3, #1
 824 0022 0392     		str	r2, [sp, #12]
 917:../utilities/fsl_str.c ****             if (*p == *c)
 825              		.loc 1 917 0
 826 0024 0299     		ldr	r1, [sp, #8]
 827 0026 0020     		movs	r0, #0
 828 0028 0856     		ldrsb	r0, [r1, r0]
 829 002a 5B78     		ldrb	r3, [r3, #1]
 830 002c 5BB2     		sxtb	r3, r3
 831 002e 9842     		cmp	r0, r3
 832 0030 00D0     		beq	.LCB932
 833 0032 53E1     		b	.L70	@long jump
 834              	.LCB932:
 918:../utilities/fsl_str.c ****             {
 919:../utilities/fsl_str.c ****                 n_decode++;
 920:../utilities/fsl_str.c ****                 p++;
 835              		.loc 1 920 0
 836 0034 0131     		adds	r1, r1, #1
 837 0036 0291     		str	r1, [sp, #8]
 921:../utilities/fsl_str.c ****                 c++;
 838              		.loc 1 921 0
 839 0038 0132     		adds	r2, r2, #1
 840 003a 0392     		str	r2, [sp, #12]
 841              	.LVL139:
 842              	.L65:
 906:../utilities/fsl_str.c ****     {
 843              		.loc 1 906 0
 844 003c 039B     		ldr	r3, [sp, #12]
 845 003e 1B78     		ldrb	r3, [r3]
 846 0040 5BB2     		sxtb	r3, r3
 847 0042 002B     		cmp	r3, #0
 848 0044 00D1     		bne	.LCB946
 849 0046 49E1     		b	.L70	@long jump
 850              	.LCB946:
 906:../utilities/fsl_str.c ****     {
 851              		.loc 1 906 0 is_stmt 0 discriminator 1
 852 0048 029B     		ldr	r3, [sp, #8]
 853 004a 1B78     		ldrb	r3, [r3]
 854 004c 5BB2     		sxtb	r3, r3
 855 004e 002B     		cmp	r3, #0
 856 0050 00D1     		bne	.LCB952
 857 0052 43E1     		b	.L70	@long jump
 858              	.LCB952:
 909:../utilities/fsl_str.c ****         {
 859              		.loc 1 909 0 is_stmt 1
 860 0054 03A8     		add	r0, sp, #12
 861 0056 FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 862              	.LVL140:
 863 005a 061E     		subs	r6, r0, #0
 864 005c DCD1     		bne	.L128
 913:../utilities/fsl_str.c ****         {
 865              		.loc 1 913 0
 866 005e 039B     		ldr	r3, [sp, #12]
 867 0060 0022     		movs	r2, #0
 868 0062 9A56     		ldrsb	r2, [r3, r2]
 869 0064 252A     		cmp	r2, #37
 870 0066 DBD1     		bne	.L68
 913:../utilities/fsl_str.c ****         {
 871              		.loc 1 913 0 is_stmt 0 discriminator 1
 872 0068 0122     		movs	r2, #1
 873 006a 9A56     		ldrsb	r2, [r3, r2]
 874 006c 252A     		cmp	r2, #37
 875 006e D7D0     		beq	.L68
 922:../utilities/fsl_str.c ****             }
 923:../utilities/fsl_str.c ****             else
 924:../utilities/fsl_str.c ****             {
 925:../utilities/fsl_str.c ****                 /* Match failure. Misalignment with C99, the unmatched characters need to be pushed
 926:../utilities/fsl_str.c ****                  * However, it is deserted now. */
 927:../utilities/fsl_str.c ****                 break;
 928:../utilities/fsl_str.c ****             }
 929:../utilities/fsl_str.c ****         }
 930:../utilities/fsl_str.c ****         else
 931:../utilities/fsl_str.c ****         {
 932:../utilities/fsl_str.c ****             /* convernsion specification */
 933:../utilities/fsl_str.c ****             c++;
 876              		.loc 1 933 0 is_stmt 1
 877 0070 0133     		adds	r3, r3, #1
 878 0072 0393     		str	r3, [sp, #12]
 879              	.LVL141:
 934:../utilities/fsl_str.c ****             /* Reset. */
 935:../utilities/fsl_str.c ****             flag = 0;
 936:../utilities/fsl_str.c ****             field_width = 0;
 880              		.loc 1 936 0
 881 0074 0500     		movs	r5, r0
 937:../utilities/fsl_str.c ****             base = 0;
 882              		.loc 1 937 0
 883 0076 0027     		movs	r7, #0
 884              	.LVL142:
 885              	.L71:
 938:../utilities/fsl_str.c **** 
 939:../utilities/fsl_str.c ****             /* Loop to get full conversion specification. */
 940:../utilities/fsl_str.c ****             while ((*c) && (!(flag & kSCANF_DestMask)))
 886              		.loc 1 940 0
 887 0078 039A     		ldr	r2, [sp, #12]
 888 007a 0023     		movs	r3, #0
 889 007c D356     		ldrsb	r3, [r2, r3]
 890 007e 002B     		cmp	r3, #0
 891 0080 4DD0     		beq	.L85
 892              		.loc 1 940 0 is_stmt 0 discriminator 1
 893 0082 7C21     		movs	r1, #124
 894 0084 3142     		tst	r1, r6
 895 0086 4AD1     		bne	.L85
 941:../utilities/fsl_str.c ****             {
 942:../utilities/fsl_str.c ****                 switch (*c)
 896              		.loc 1 942 0 is_stmt 1
 897 0088 303B     		subs	r3, r3, #48
 898 008a D9B2     		uxtb	r1, r3
 899 008c 4829     		cmp	r1, #72
 900 008e 43D8     		bhi	.L72
 901 0090 8B00     		lsls	r3, r1, #2
 902 0092 9549     		ldr	r1, .L134
 903 0094 CB58     		ldr	r3, [r1, r3]
 904 0096 9F46     		mov	pc, r3
 905              		.section	.rodata.StrFormatScanf,"a",%progbits
 906              		.align	2
 907              	.L74:
 908 0000 98000000 		.word	.L73
 909 0004 98000000 		.word	.L73
 910 0008 98000000 		.word	.L73
 911 000c 98000000 		.word	.L73
 912 0010 98000000 		.word	.L73
 913 0014 98000000 		.word	.L73
 914 0018 98000000 		.word	.L73
 915 001c 98000000 		.word	.L73
 916 0020 98000000 		.word	.L73
 917 0024 98000000 		.word	.L73
 918 0028 18010000 		.word	.L72
 919 002c 18010000 		.word	.L72
 920 0030 18010000 		.word	.L72
 921 0034 18010000 		.word	.L72
 922 0038 18010000 		.word	.L72
 923 003c 18010000 		.word	.L72
 924 0040 18010000 		.word	.L72
 925 0044 18010000 		.word	.L72
 926 0048 18010000 		.word	.L72
 927 004c 18010000 		.word	.L72
 928 0050 18010000 		.word	.L72
 929 0054 18010000 		.word	.L72
 930 0058 18010000 		.word	.L72
 931 005c 18010000 		.word	.L72
 932 0060 18010000 		.word	.L72
 933 0064 18010000 		.word	.L72
 934 0068 18010000 		.word	.L72
 935 006c 18010000 		.word	.L72
 936 0070 18010000 		.word	.L72
 937 0074 18010000 		.word	.L72
 938 0078 18010000 		.word	.L72
 939 007c 18010000 		.word	.L72
 940 0080 18010000 		.word	.L72
 941 0084 18010000 		.word	.L72
 942 0088 18010000 		.word	.L72
 943 008c 18010000 		.word	.L72
 944 0090 18010000 		.word	.L72
 945 0094 18010000 		.word	.L72
 946 0098 18010000 		.word	.L72
 947 009c 18010000 		.word	.L72
 948 00a0 E6000000 		.word	.L75
 949 00a4 18010000 		.word	.L72
 950 00a8 18010000 		.word	.L72
 951 00ac 18010000 		.word	.L72
 952 00b0 18010000 		.word	.L72
 953 00b4 18010000 		.word	.L72
 954 00b8 18010000 		.word	.L72
 955 00bc 18010000 		.word	.L72
 956 00c0 18010000 		.word	.L72
 957 00c4 18010000 		.word	.L72
 958 00c8 18010000 		.word	.L72
 959 00cc FE000000 		.word	.L76
 960 00d0 C2000000 		.word	.L77
 961 00d4 18010000 		.word	.L72
 962 00d8 18010000 		.word	.L72
 963 00dc 18010000 		.word	.L72
 964 00e0 18010000 		.word	.L72
 965 00e4 F2000000 		.word	.L78
 966 00e8 18010000 		.word	.L72
 967 00ec 18010000 		.word	.L72
 968 00f0 18010000 		.word	.L72
 969 00f4 18010000 		.word	.L72
 970 00f8 18010000 		.word	.L72
 971 00fc DA000000 		.word	.L79
 972 0100 18010000 		.word	.L72
 973 0104 18010000 		.word	.L72
 974 0108 18010000 		.word	.L72
 975 010c 0E010000 		.word	.L80
 976 0110 18010000 		.word	.L72
 977 0114 CE000000 		.word	.L81
 978 0118 18010000 		.word	.L72
 979 011c 18010000 		.word	.L72
 980 0120 E6000000 		.word	.L75
 981              		.section	.text.StrFormatScanf
 982              	.L73:
 943:../utilities/fsl_str.c ****                 {
 944:../utilities/fsl_str.c **** #if SCANF_ADVANCED_ENABLE
 945:../utilities/fsl_str.c ****                     case '*':
 946:../utilities/fsl_str.c ****                         if (flag & kSCANF_Suppress)
 947:../utilities/fsl_str.c ****                         {
 948:../utilities/fsl_str.c ****                             /* Match failure. */
 949:../utilities/fsl_str.c ****                             return nassigned;
 950:../utilities/fsl_str.c ****                         }
 951:../utilities/fsl_str.c ****                         flag |= kSCANF_Suppress;
 952:../utilities/fsl_str.c ****                         c++;
 953:../utilities/fsl_str.c ****                         break;
 954:../utilities/fsl_str.c ****                     case 'h':
 955:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthMask)
 956:../utilities/fsl_str.c ****                         {
 957:../utilities/fsl_str.c ****                             /* Match failure. */
 958:../utilities/fsl_str.c ****                             return nassigned;
 959:../utilities/fsl_str.c ****                         }
 960:../utilities/fsl_str.c **** 
 961:../utilities/fsl_str.c ****                         if (c[1] == 'h')
 962:../utilities/fsl_str.c ****                         {
 963:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthChar;
 964:../utilities/fsl_str.c ****                             c++;
 965:../utilities/fsl_str.c ****                         }
 966:../utilities/fsl_str.c ****                         else
 967:../utilities/fsl_str.c ****                         {
 968:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthShortInt;
 969:../utilities/fsl_str.c ****                         }
 970:../utilities/fsl_str.c ****                         c++;
 971:../utilities/fsl_str.c ****                         break;
 972:../utilities/fsl_str.c ****                     case 'l':
 973:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthMask)
 974:../utilities/fsl_str.c ****                         {
 975:../utilities/fsl_str.c ****                             /* Match failure. */
 976:../utilities/fsl_str.c ****                             return nassigned;
 977:../utilities/fsl_str.c ****                         }
 978:../utilities/fsl_str.c **** 
 979:../utilities/fsl_str.c ****                         if (c[1] == 'l')
 980:../utilities/fsl_str.c ****                         {
 981:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthLongLongInt;
 982:../utilities/fsl_str.c ****                             c++;
 983:../utilities/fsl_str.c ****                         }
 984:../utilities/fsl_str.c ****                         else
 985:../utilities/fsl_str.c ****                         {
 986:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthLongInt;
 987:../utilities/fsl_str.c ****                         }
 988:../utilities/fsl_str.c ****                         c++;
 989:../utilities/fsl_str.c ****                         break;
 990:../utilities/fsl_str.c **** #endif /* SCANF_ADVANCED_ENABLE */
 991:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
 992:../utilities/fsl_str.c ****                     case 'L':
 993:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthMask)
 994:../utilities/fsl_str.c ****                         {
 995:../utilities/fsl_str.c ****                             /* Match failure. */
 996:../utilities/fsl_str.c ****                             return nassigned;
 997:../utilities/fsl_str.c ****                         }
 998:../utilities/fsl_str.c ****                         flag |= kSCANF_LengthLongLongDouble;
 999:../utilities/fsl_str.c ****                         c++;
1000:../utilities/fsl_str.c ****                         break;
1001:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
1002:../utilities/fsl_str.c ****                     case '0':
1003:../utilities/fsl_str.c ****                     case '1':
1004:../utilities/fsl_str.c ****                     case '2':
1005:../utilities/fsl_str.c ****                     case '3':
1006:../utilities/fsl_str.c ****                     case '4':
1007:../utilities/fsl_str.c ****                     case '5':
1008:../utilities/fsl_str.c ****                     case '6':
1009:../utilities/fsl_str.c ****                     case '7':
1010:../utilities/fsl_str.c ****                     case '8':
1011:../utilities/fsl_str.c ****                     case '9':
1012:../utilities/fsl_str.c ****                         if (field_width)
 983              		.loc 1 1012 0
 984 0098 002D     		cmp	r5, #0
 985 009a 10D1     		bne	.L129
 986              	.L82:
1013:../utilities/fsl_str.c ****                         {
1014:../utilities/fsl_str.c ****                             /* Match failure. */
1015:../utilities/fsl_str.c ****                             return nassigned;
1016:../utilities/fsl_str.c ****                         }
1017:../utilities/fsl_str.c ****                         do
1018:../utilities/fsl_str.c ****                         {
1019:../utilities/fsl_str.c ****                             field_width = field_width * 10 + *c - '0';
 987              		.loc 1 1019 0 discriminator 1
 988 009c AB00     		lsls	r3, r5, #2
 989 009e 5D19     		adds	r5, r3, r5
 990              	.LVL143:
 991 00a0 6B00     		lsls	r3, r5, #1
 992 00a2 039A     		ldr	r2, [sp, #12]
 993 00a4 0025     		movs	r5, #0
 994 00a6 5557     		ldrsb	r5, [r2, r5]
 995 00a8 5D19     		adds	r5, r3, r5
 996 00aa 303D     		subs	r5, r5, #48
 997              	.LVL144:
1020:../utilities/fsl_str.c ****                             c++;
 998              		.loc 1 1020 0 discriminator 1
 999 00ac 531C     		adds	r3, r2, #1
 1000 00ae 0393     		str	r3, [sp, #12]
1021:../utilities/fsl_str.c ****                         } while ((*c >= '0') && (*c <= '9'));
 1001              		.loc 1 1021 0 discriminator 1
 1002 00b0 0123     		movs	r3, #1
 1003 00b2 D356     		ldrsb	r3, [r2, r3]
 1004 00b4 303B     		subs	r3, r3, #48
 1005 00b6 DBB2     		uxtb	r3, r3
 1006 00b8 092B     		cmp	r3, #9
 1007 00ba EFD9     		bls	.L82
 1008 00bc DCE7     		b	.L71
 1009              	.L129:
1015:../utilities/fsl_str.c ****                         }
 1010              		.loc 1 1015 0
 1011 00be 2000     		movs	r0, r4
 1012 00c0 2BE0     		b	.L63
 1013              	.L77:
 1014              	.LVL145:
1022:../utilities/fsl_str.c ****                         break;
1023:../utilities/fsl_str.c ****                     case 'd':
1024:../utilities/fsl_str.c ****                         base = 10;
1025:../utilities/fsl_str.c ****                         flag |= kSCANF_TypeSinged;
1026:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1015              		.loc 1 1026 0
 1016 00c2 8A4B     		ldr	r3, .L134+4
 1017 00c4 1E43     		orrs	r6, r3
 1018              	.LVL146:
1027:../utilities/fsl_str.c ****                         c++;
 1019              		.loc 1 1027 0
 1020 00c6 0132     		adds	r2, r2, #1
 1021 00c8 0392     		str	r2, [sp, #12]
1024:../utilities/fsl_str.c ****                         flag |= kSCANF_TypeSinged;
 1022              		.loc 1 1024 0
 1023 00ca 0A27     		movs	r7, #10
1028:../utilities/fsl_str.c ****                         break;
 1024              		.loc 1 1028 0
 1025 00cc D4E7     		b	.L71
 1026              	.LVL147:
 1027              	.L81:
1029:../utilities/fsl_str.c ****                     case 'u':
1030:../utilities/fsl_str.c ****                         base = 10;
1031:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1028              		.loc 1 1031 0
 1029 00ce 2023     		movs	r3, #32
 1030 00d0 1E43     		orrs	r6, r3
 1031              	.LVL148:
1032:../utilities/fsl_str.c ****                         c++;
 1032              		.loc 1 1032 0
 1033 00d2 0132     		adds	r2, r2, #1
 1034 00d4 0392     		str	r2, [sp, #12]
1030:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1035              		.loc 1 1030 0
 1036 00d6 0A27     		movs	r7, #10
1033:../utilities/fsl_str.c ****                         break;
 1037              		.loc 1 1033 0
 1038 00d8 CEE7     		b	.L71
 1039              	.LVL149:
 1040              	.L79:
1034:../utilities/fsl_str.c ****                     case 'o':
1035:../utilities/fsl_str.c ****                         base = 8;
1036:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1041              		.loc 1 1036 0
 1042 00da 2023     		movs	r3, #32
 1043 00dc 1E43     		orrs	r6, r3
 1044              	.LVL150:
1037:../utilities/fsl_str.c ****                         c++;
 1045              		.loc 1 1037 0
 1046 00de 0132     		adds	r2, r2, #1
 1047 00e0 0392     		str	r2, [sp, #12]
1035:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1048              		.loc 1 1035 0
 1049 00e2 0827     		movs	r7, #8
1038:../utilities/fsl_str.c ****                         break;
 1050              		.loc 1 1038 0
 1051 00e4 C8E7     		b	.L71
 1052              	.LVL151:
 1053              	.L75:
1039:../utilities/fsl_str.c ****                     case 'x':
1040:../utilities/fsl_str.c ****                     case 'X':
1041:../utilities/fsl_str.c ****                         base = 16;
1042:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1054              		.loc 1 1042 0
 1055 00e6 2023     		movs	r3, #32
 1056 00e8 1E43     		orrs	r6, r3
 1057              	.LVL152:
1043:../utilities/fsl_str.c ****                         c++;
 1058              		.loc 1 1043 0
 1059 00ea 0132     		adds	r2, r2, #1
 1060 00ec 0392     		str	r2, [sp, #12]
1041:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1061              		.loc 1 1041 0
 1062 00ee 1027     		movs	r7, #16
1044:../utilities/fsl_str.c ****                         break;
 1063              		.loc 1 1044 0
 1064 00f0 C2E7     		b	.L71
 1065              	.LVL153:
 1066              	.L78:
1045:../utilities/fsl_str.c ****                     case 'i':
1046:../utilities/fsl_str.c ****                         base = 0;
1047:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1067              		.loc 1 1047 0
 1068 00f2 2023     		movs	r3, #32
 1069 00f4 1E43     		orrs	r6, r3
 1070              	.LVL154:
1048:../utilities/fsl_str.c ****                         c++;
 1071              		.loc 1 1048 0
 1072 00f6 0132     		adds	r2, r2, #1
 1073 00f8 0392     		str	r2, [sp, #12]
1046:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 1074              		.loc 1 1046 0
 1075 00fa 0027     		movs	r7, #0
1049:../utilities/fsl_str.c ****                         break;
 1076              		.loc 1 1049 0
 1077 00fc BCE7     		b	.L71
 1078              	.LVL155:
 1079              	.L76:
1050:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
1051:../utilities/fsl_str.c ****                     case 'a':
1052:../utilities/fsl_str.c ****                     case 'A':
1053:../utilities/fsl_str.c ****                     case 'e':
1054:../utilities/fsl_str.c ****                     case 'E':
1055:../utilities/fsl_str.c ****                     case 'f':
1056:../utilities/fsl_str.c ****                     case 'F':
1057:../utilities/fsl_str.c ****                     case 'g':
1058:../utilities/fsl_str.c ****                     case 'G':
1059:../utilities/fsl_str.c ****                         flag |= kSCANF_DestFloat;
1060:../utilities/fsl_str.c ****                         c++;
1061:../utilities/fsl_str.c ****                         break;
1062:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
1063:../utilities/fsl_str.c ****                     case 'c':
1064:../utilities/fsl_str.c ****                         flag |= kSCANF_DestChar;
 1080              		.loc 1 1064 0
 1081 00fe 0423     		movs	r3, #4
 1082 0100 1E43     		orrs	r6, r3
 1083              	.LVL156:
1065:../utilities/fsl_str.c ****                         if (!field_width)
 1084              		.loc 1 1065 0
 1085 0102 002D     		cmp	r5, #0
 1086 0104 00D1     		bne	.L84
1066:../utilities/fsl_str.c ****                         {
1067:../utilities/fsl_str.c ****                             field_width = 1;
 1087              		.loc 1 1067 0
 1088 0106 0135     		adds	r5, r5, #1
 1089              	.LVL157:
 1090              	.L84:
1068:../utilities/fsl_str.c ****                         }
1069:../utilities/fsl_str.c ****                         c++;
 1091              		.loc 1 1069 0
 1092 0108 0132     		adds	r2, r2, #1
 1093 010a 0392     		str	r2, [sp, #12]
1070:../utilities/fsl_str.c ****                         break;
 1094              		.loc 1 1070 0
 1095 010c B4E7     		b	.L71
 1096              	.L80:
1071:../utilities/fsl_str.c ****                     case 's':
1072:../utilities/fsl_str.c ****                         flag |= kSCANF_DestString;
 1097              		.loc 1 1072 0
 1098 010e 0823     		movs	r3, #8
 1099 0110 1E43     		orrs	r6, r3
 1100              	.LVL158:
1073:../utilities/fsl_str.c ****                         c++;
 1101              		.loc 1 1073 0
 1102 0112 0132     		adds	r2, r2, #1
 1103 0114 0392     		str	r2, [sp, #12]
1074:../utilities/fsl_str.c ****                         break;
 1104              		.loc 1 1074 0
 1105 0116 AFE7     		b	.L71
 1106              	.L72:
1075:../utilities/fsl_str.c ****                     default:
1076:../utilities/fsl_str.c ****                         return nassigned;
 1107              		.loc 1 1076 0
 1108 0118 2000     		movs	r0, r4
 1109              	.LVL159:
 1110              	.L63:
1077:../utilities/fsl_str.c ****                 }
1078:../utilities/fsl_str.c ****             }
1079:../utilities/fsl_str.c **** 
1080:../utilities/fsl_str.c ****             if (!(flag & kSCANF_DestMask))
1081:../utilities/fsl_str.c ****             {
1082:../utilities/fsl_str.c ****                 /* Format strings are exhausted. */
1083:../utilities/fsl_str.c ****                 return nassigned;
1084:../utilities/fsl_str.c ****             }
1085:../utilities/fsl_str.c **** 
1086:../utilities/fsl_str.c ****             if (!field_width)
1087:../utilities/fsl_str.c ****             {
1088:../utilities/fsl_str.c ****                 /* Large than length of a line. */
1089:../utilities/fsl_str.c ****                 field_width = 99;
1090:../utilities/fsl_str.c ****             }
1091:../utilities/fsl_str.c **** 
1092:../utilities/fsl_str.c ****             /* Matching strings in input streams and assign to argument. */
1093:../utilities/fsl_str.c ****             switch (flag & kSCANF_DestMask)
1094:../utilities/fsl_str.c ****             {
1095:../utilities/fsl_str.c ****                 case kSCANF_DestChar:
1096:../utilities/fsl_str.c ****                     s = (const char *)p;
1097:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
1098:../utilities/fsl_str.c ****                     while ((field_width--) && (*p))
1099:../utilities/fsl_str.c ****                     {
1100:../utilities/fsl_str.c ****                         if (!(flag & kSCANF_Suppress))
1101:../utilities/fsl_str.c ****                         {
1102:../utilities/fsl_str.c ****                             *buf++ = *p++;
1103:../utilities/fsl_str.c ****                         }
1104:../utilities/fsl_str.c ****                         else
1105:../utilities/fsl_str.c ****                         {
1106:../utilities/fsl_str.c ****                             p++;
1107:../utilities/fsl_str.c ****                         }
1108:../utilities/fsl_str.c ****                         n_decode++;
1109:../utilities/fsl_str.c ****                     }
1110:../utilities/fsl_str.c **** 
1111:../utilities/fsl_str.c ****                     if ((!(flag & kSCANF_Suppress)) && (s != p))
1112:../utilities/fsl_str.c ****                     {
1113:../utilities/fsl_str.c ****                         nassigned++;
1114:../utilities/fsl_str.c ****                     }
1115:../utilities/fsl_str.c ****                     break;
1116:../utilities/fsl_str.c ****                 case kSCANF_DestString:
1117:../utilities/fsl_str.c ****                     n_decode += ScanIgnoreWhiteSpace(&p);
1118:../utilities/fsl_str.c ****                     s = p;
1119:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
1120:../utilities/fsl_str.c ****                     while ((field_width--) && (*p != '\0') && (*p != ' ') && (*p != '\t') && (*p !=
1121:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
1122:../utilities/fsl_str.c ****                     {
1123:../utilities/fsl_str.c ****                         if (flag & kSCANF_Suppress)
1124:../utilities/fsl_str.c ****                         {
1125:../utilities/fsl_str.c ****                             p++;
1126:../utilities/fsl_str.c ****                         }
1127:../utilities/fsl_str.c ****                         else
1128:../utilities/fsl_str.c ****                         {
1129:../utilities/fsl_str.c ****                             *buf++ = *p++;
1130:../utilities/fsl_str.c ****                         }
1131:../utilities/fsl_str.c ****                         n_decode++;
1132:../utilities/fsl_str.c ****                     }
1133:../utilities/fsl_str.c **** 
1134:../utilities/fsl_str.c ****                     if ((!(flag & kSCANF_Suppress)) && (s != p))
1135:../utilities/fsl_str.c ****                     {
1136:../utilities/fsl_str.c ****                         /* Add NULL to end of string. */
1137:../utilities/fsl_str.c ****                         *buf = '\0';
1138:../utilities/fsl_str.c ****                         nassigned++;
1139:../utilities/fsl_str.c ****                     }
1140:../utilities/fsl_str.c ****                     break;
1141:../utilities/fsl_str.c ****                 case kSCANF_DestInt:
1142:../utilities/fsl_str.c ****                     n_decode += ScanIgnoreWhiteSpace(&p);
1143:../utilities/fsl_str.c ****                     s = p;
1144:../utilities/fsl_str.c ****                     val = 0;
1145:../utilities/fsl_str.c ****                     if ((base == 0) || (base == 16))
1146:../utilities/fsl_str.c ****                     {
1147:../utilities/fsl_str.c ****                         if ((s[0] == '0') && ((s[1] == 'x') || (s[1] == 'X')))
1148:../utilities/fsl_str.c ****                         {
1149:../utilities/fsl_str.c ****                             base = 16;
1150:../utilities/fsl_str.c ****                             if (field_width >= 1)
1151:../utilities/fsl_str.c ****                             {
1152:../utilities/fsl_str.c ****                                 p += 2;
1153:../utilities/fsl_str.c ****                                 n_decode += 2;
1154:../utilities/fsl_str.c ****                                 field_width -= 2;
1155:../utilities/fsl_str.c ****                             }
1156:../utilities/fsl_str.c ****                         }
1157:../utilities/fsl_str.c ****                     }
1158:../utilities/fsl_str.c **** 
1159:../utilities/fsl_str.c ****                     if (base == 0)
1160:../utilities/fsl_str.c ****                     {
1161:../utilities/fsl_str.c ****                         if (s[0] == '0')
1162:../utilities/fsl_str.c ****                         {
1163:../utilities/fsl_str.c ****                             base = 8;
1164:../utilities/fsl_str.c ****                         }
1165:../utilities/fsl_str.c ****                         else
1166:../utilities/fsl_str.c ****                         {
1167:../utilities/fsl_str.c ****                             base = 10;
1168:../utilities/fsl_str.c ****                         }
1169:../utilities/fsl_str.c ****                     }
1170:../utilities/fsl_str.c **** 
1171:../utilities/fsl_str.c ****                     neg = 1;
1172:../utilities/fsl_str.c ****                     switch (*p)
1173:../utilities/fsl_str.c ****                     {
1174:../utilities/fsl_str.c ****                         case '-':
1175:../utilities/fsl_str.c ****                             neg = -1;
1176:../utilities/fsl_str.c ****                             n_decode++;
1177:../utilities/fsl_str.c ****                             p++;
1178:../utilities/fsl_str.c ****                             field_width--;
1179:../utilities/fsl_str.c ****                             break;
1180:../utilities/fsl_str.c ****                         case '+':
1181:../utilities/fsl_str.c ****                             neg = 1;
1182:../utilities/fsl_str.c ****                             n_decode++;
1183:../utilities/fsl_str.c ****                             p++;
1184:../utilities/fsl_str.c ****                             field_width--;
1185:../utilities/fsl_str.c ****                             break;
1186:../utilities/fsl_str.c ****                         default:
1187:../utilities/fsl_str.c ****                             break;
1188:../utilities/fsl_str.c ****                     }
1189:../utilities/fsl_str.c **** 
1190:../utilities/fsl_str.c ****                     while ((*p) && (field_width--))
1191:../utilities/fsl_str.c ****                     {
1192:../utilities/fsl_str.c ****                         if ((*p <= '9') && (*p >= '0'))
1193:../utilities/fsl_str.c ****                         {
1194:../utilities/fsl_str.c ****                             temp = *p - '0';
1195:../utilities/fsl_str.c ****                         }
1196:../utilities/fsl_str.c ****                         else if ((*p <= 'f') && (*p >= 'a'))
1197:../utilities/fsl_str.c ****                         {
1198:../utilities/fsl_str.c ****                             temp = *p - 'a' + 10;
1199:../utilities/fsl_str.c ****                         }
1200:../utilities/fsl_str.c ****                         else if ((*p <= 'F') && (*p >= 'A'))
1201:../utilities/fsl_str.c ****                         {
1202:../utilities/fsl_str.c ****                             temp = *p - 'A' + 10;
1203:../utilities/fsl_str.c ****                         }
1204:../utilities/fsl_str.c ****                         else
1205:../utilities/fsl_str.c ****                         {
1206:../utilities/fsl_str.c ****                             temp = base;
1207:../utilities/fsl_str.c ****                         }
1208:../utilities/fsl_str.c **** 
1209:../utilities/fsl_str.c ****                         if (temp >= base)
1210:../utilities/fsl_str.c ****                         {
1211:../utilities/fsl_str.c ****                             break;
1212:../utilities/fsl_str.c ****                         }
1213:../utilities/fsl_str.c ****                         else
1214:../utilities/fsl_str.c ****                         {
1215:../utilities/fsl_str.c ****                             val = base * val + temp;
1216:../utilities/fsl_str.c ****                         }
1217:../utilities/fsl_str.c ****                         p++;
1218:../utilities/fsl_str.c ****                         n_decode++;
1219:../utilities/fsl_str.c ****                     }
1220:../utilities/fsl_str.c ****                     val *= neg;
1221:../utilities/fsl_str.c ****                     if (!(flag & kSCANF_Suppress))
1222:../utilities/fsl_str.c ****                     {
1223:../utilities/fsl_str.c **** #if SCANF_ADVANCED_ENABLE
1224:../utilities/fsl_str.c ****                         switch (flag & kSCANF_LengthMask)
1225:../utilities/fsl_str.c ****                         {
1226:../utilities/fsl_str.c ****                             case kSCANF_LengthChar:
1227:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1228:../utilities/fsl_str.c ****                                 {
1229:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed char *) = (signed char)val;
1230:../utilities/fsl_str.c ****                                 }
1231:../utilities/fsl_str.c ****                                 else
1232:../utilities/fsl_str.c ****                                 {
1233:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned char *) = (unsigned char)val;
1234:../utilities/fsl_str.c ****                                 }
1235:../utilities/fsl_str.c ****                                 break;
1236:../utilities/fsl_str.c ****                             case kSCANF_LengthShortInt:
1237:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1238:../utilities/fsl_str.c ****                                 {
1239:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed short *) = (signed short)val;
1240:../utilities/fsl_str.c ****                                 }
1241:../utilities/fsl_str.c ****                                 else
1242:../utilities/fsl_str.c ****                                 {
1243:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned short *) = (unsigned short)val;
1244:../utilities/fsl_str.c ****                                 }
1245:../utilities/fsl_str.c ****                                 break;
1246:../utilities/fsl_str.c ****                             case kSCANF_LengthLongInt:
1247:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1248:../utilities/fsl_str.c ****                                 {
1249:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed long int *) = (signed long int)val;
1250:../utilities/fsl_str.c ****                                 }
1251:../utilities/fsl_str.c ****                                 else
1252:../utilities/fsl_str.c ****                                 {
1253:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned long int *) = (unsigned long int)val
1254:../utilities/fsl_str.c ****                                 }
1255:../utilities/fsl_str.c ****                                 break;
1256:../utilities/fsl_str.c ****                             case kSCANF_LengthLongLongInt:
1257:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1258:../utilities/fsl_str.c ****                                 {
1259:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed long long int *) = (signed long long i
1260:../utilities/fsl_str.c ****                                 }
1261:../utilities/fsl_str.c ****                                 else
1262:../utilities/fsl_str.c ****                                 {
1263:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned long long int *) = (unsigned long lo
1264:../utilities/fsl_str.c ****                                 }
1265:../utilities/fsl_str.c ****                                 break;
1266:../utilities/fsl_str.c ****                             default:
1267:../utilities/fsl_str.c ****                                 /* The default type is the type int. */
1268:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1269:../utilities/fsl_str.c ****                                 {
1270:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed int *) = (signed int)val;
1271:../utilities/fsl_str.c ****                                 }
1272:../utilities/fsl_str.c ****                                 else
1273:../utilities/fsl_str.c ****                                 {
1274:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned int *) = (unsigned int)val;
1275:../utilities/fsl_str.c ****                                 }
1276:../utilities/fsl_str.c ****                                 break;
1277:../utilities/fsl_str.c ****                         }
1278:../utilities/fsl_str.c **** #else
1279:../utilities/fsl_str.c ****                         /* The default type is the type int. */
1280:../utilities/fsl_str.c ****                         if (flag & kSCANF_TypeSinged)
1281:../utilities/fsl_str.c ****                         {
1282:../utilities/fsl_str.c ****                             *va_arg(args_ptr, signed int *) = (signed int)val;
1283:../utilities/fsl_str.c ****                         }
1284:../utilities/fsl_str.c ****                         else
1285:../utilities/fsl_str.c ****                         {
1286:../utilities/fsl_str.c ****                             *va_arg(args_ptr, unsigned int *) = (unsigned int)val;
1287:../utilities/fsl_str.c ****                         }
1288:../utilities/fsl_str.c **** #endif /* SCANF_ADVANCED_ENABLE */
1289:../utilities/fsl_str.c ****                         nassigned++;
1290:../utilities/fsl_str.c ****                     }
1291:../utilities/fsl_str.c ****                     break;
1292:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
1293:../utilities/fsl_str.c ****                 case kSCANF_DestFloat:
1294:../utilities/fsl_str.c ****                     n_decode += ScanIgnoreWhiteSpace(&p);
1295:../utilities/fsl_str.c ****                     fnum = strtod(p, (char **)&s);
1296:../utilities/fsl_str.c **** 
1297:../utilities/fsl_str.c ****                     if ((fnum >= HUGE_VAL) || (fnum <= -HUGE_VAL))
1298:../utilities/fsl_str.c ****                     {
1299:../utilities/fsl_str.c ****                         break;
1300:../utilities/fsl_str.c ****                     }
1301:../utilities/fsl_str.c **** 
1302:../utilities/fsl_str.c ****                     n_decode += (int)(s) - (int)(p);
1303:../utilities/fsl_str.c ****                     p = s;
1304:../utilities/fsl_str.c ****                     if (!(flag & kSCANF_Suppress))
1305:../utilities/fsl_str.c ****                     {
1306:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthLongLongDouble)
1307:../utilities/fsl_str.c ****                         {
1308:../utilities/fsl_str.c ****                             *va_arg(args_ptr, double *) = fnum;
1309:../utilities/fsl_str.c ****                         }
1310:../utilities/fsl_str.c ****                         else
1311:../utilities/fsl_str.c ****                         {
1312:../utilities/fsl_str.c ****                             *va_arg(args_ptr, float *) = (float)fnum;
1313:../utilities/fsl_str.c ****                         }
1314:../utilities/fsl_str.c ****                         nassigned++;
1315:../utilities/fsl_str.c ****                     }
1316:../utilities/fsl_str.c ****                     break;
1317:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
1318:../utilities/fsl_str.c ****                 default:
1319:../utilities/fsl_str.c ****                     return nassigned;
1320:../utilities/fsl_str.c ****             }
1321:../utilities/fsl_str.c ****         }
1322:../utilities/fsl_str.c ****     }
1323:../utilities/fsl_str.c ****     return nassigned;
1324:../utilities/fsl_str.c **** }
 1111              		.loc 1 1324 0
 1112 011a 05B0     		add	sp, sp, #20
 1113              		@ sp needed
 1114 011c F0BD     		pop	{r4, r5, r6, r7, pc}
 1115              	.LVL160:
 1116              	.L85:
1080:../utilities/fsl_str.c ****             {
 1117              		.loc 1 1080 0
 1118 011e 7C23     		movs	r3, #124
 1119 0120 3340     		ands	r3, r6
 1120 0122 0AD0     		beq	.L130
1086:../utilities/fsl_str.c ****             {
 1121              		.loc 1 1086 0
 1122 0124 002D     		cmp	r5, #0
 1123 0126 00D1     		bne	.L88
1089:../utilities/fsl_str.c ****             }
 1124              		.loc 1 1089 0
 1125 0128 6335     		adds	r5, r5, #99
 1126              	.LVL161:
 1127              	.L88:
1093:../utilities/fsl_str.c ****             {
 1128              		.loc 1 1093 0
 1129 012a 082B     		cmp	r3, #8
 1130 012c 2AD0     		beq	.L90
 1131 012e 202B     		cmp	r3, #32
 1132 0130 5CD0     		beq	.L91
 1133 0132 042B     		cmp	r3, #4
 1134 0134 03D0     		beq	.L131
1319:../utilities/fsl_str.c ****             }
 1135              		.loc 1 1319 0
 1136 0136 2000     		movs	r0, r4
 1137 0138 EFE7     		b	.L63
 1138              	.L130:
1083:../utilities/fsl_str.c ****             }
 1139              		.loc 1 1083 0
 1140 013a 2000     		movs	r0, r4
 1141 013c EDE7     		b	.L63
 1142              	.L131:
1096:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
 1143              		.loc 1 1096 0
 1144 013e 029F     		ldr	r7, [sp, #8]
 1145              	.LVL162:
1097:../utilities/fsl_str.c ****                     while ((field_width--) && (*p))
 1146              		.loc 1 1097 0
 1147 0140 019B     		ldr	r3, [sp, #4]
 1148 0142 1A1D     		adds	r2, r3, #4
 1149 0144 0192     		str	r2, [sp, #4]
 1150 0146 1868     		ldr	r0, [r3]
 1151 0148 02E0     		b	.L93
 1152              	.LVL163:
 1153              	.L94:
1106:../utilities/fsl_str.c ****                         }
 1154              		.loc 1 1106 0
 1155 014a 0133     		adds	r3, r3, #1
 1156 014c 0293     		str	r3, [sp, #8]
 1157              	.L95:
1098:../utilities/fsl_str.c ****                     {
 1158              		.loc 1 1098 0
 1159 014e 1500     		movs	r5, r2
 1160              	.LVL164:
 1161              	.L93:
 1162 0150 6A1E     		subs	r2, r5, #1
 1163              	.LVL165:
 1164 0152 002D     		cmp	r5, #0
 1165 0154 0DD0     		beq	.L96
1098:../utilities/fsl_str.c ****                     {
 1166              		.loc 1 1098 0 is_stmt 0 discriminator 1
 1167 0156 029B     		ldr	r3, [sp, #8]
 1168 0158 0021     		movs	r1, #0
 1169 015a 5956     		ldrsb	r1, [r3, r1]
 1170 015c 0029     		cmp	r1, #0
 1171 015e 08D0     		beq	.L96
1100:../utilities/fsl_str.c ****                         {
 1172              		.loc 1 1100 0 is_stmt 1
 1173 0160 B107     		lsls	r1, r6, #30
 1174 0162 F2D4     		bmi	.L94
1102:../utilities/fsl_str.c ****                         }
 1175              		.loc 1 1102 0
 1176 0164 591C     		adds	r1, r3, #1
 1177 0166 0291     		str	r1, [sp, #8]
 1178              	.LVL166:
 1179 0168 1B78     		ldrb	r3, [r3]
 1180 016a 5BB2     		sxtb	r3, r3
 1181 016c 0370     		strb	r3, [r0]
 1182 016e 0130     		adds	r0, r0, #1
 1183              	.LVL167:
 1184 0170 EDE7     		b	.L95
 1185              	.L96:
1111:../utilities/fsl_str.c ****                     {
 1186              		.loc 1 1111 0
 1187 0172 B307     		lsls	r3, r6, #30
 1188 0174 00D5     		bpl	.LCB1256
 1189 0176 61E7     		b	.L65	@long jump
 1190              	.LCB1256:
1111:../utilities/fsl_str.c ****                     {
 1191              		.loc 1 1111 0 is_stmt 0 discriminator 1
 1192 0178 029B     		ldr	r3, [sp, #8]
 1193 017a BB42     		cmp	r3, r7
 1194 017c 00D1     		bne	.LCB1260
 1195 017e 5DE7     		b	.L65	@long jump
 1196              	.LCB1260:
1113:../utilities/fsl_str.c ****                     }
 1197              		.loc 1 1113 0 is_stmt 1
 1198 0180 0134     		adds	r4, r4, #1
 1199              	.LVL168:
 1200 0182 5BE7     		b	.L65
 1201              	.LVL169:
 1202              	.L90:
1117:../utilities/fsl_str.c ****                     s = p;
 1203              		.loc 1 1117 0
 1204 0184 02A8     		add	r0, sp, #8
 1205 0186 FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 1206              	.LVL170:
1118:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
 1207              		.loc 1 1118 0
 1208 018a 029F     		ldr	r7, [sp, #8]
 1209              	.LVL171:
1119:../utilities/fsl_str.c ****                     while ((field_width--) && (*p != '\0') && (*p != ' ') && (*p != '\t') && (*p !=
 1210              		.loc 1 1119 0
 1211 018c 019B     		ldr	r3, [sp, #4]
 1212 018e 1A1D     		adds	r2, r3, #4
 1213 0190 0192     		str	r2, [sp, #4]
 1214 0192 1868     		ldr	r0, [r3]
 1215 0194 06E0     		b	.L98
 1216              	.LVL172:
 1217              	.L99:
1129:../utilities/fsl_str.c ****                         }
 1218              		.loc 1 1129 0
 1219 0196 531C     		adds	r3, r2, #1
 1220 0198 0293     		str	r3, [sp, #8]
 1221              	.LVL173:
 1222 019a 0023     		movs	r3, #0
 1223 019c D356     		ldrsb	r3, [r2, r3]
 1224 019e 0370     		strb	r3, [r0]
 1225 01a0 0130     		adds	r0, r0, #1
 1226              	.LVL174:
 1227              	.L100:
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 1228              		.loc 1 1120 0
 1229 01a2 0D00     		movs	r5, r1
 1230              	.LVL175:
 1231              	.L98:
 1232 01a4 691E     		subs	r1, r5, #1
 1233              	.LVL176:
 1234 01a6 002D     		cmp	r5, #0
 1235 01a8 15D0     		beq	.L101
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 1236              		.loc 1 1120 0 is_stmt 0 discriminator 1
 1237 01aa 029A     		ldr	r2, [sp, #8]
 1238 01ac 0023     		movs	r3, #0
 1239 01ae D356     		ldrsb	r3, [r2, r3]
 1240 01b0 002B     		cmp	r3, #0
 1241 01b2 10D0     		beq	.L101
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 1242              		.loc 1 1120 0 discriminator 2
 1243 01b4 202B     		cmp	r3, #32
 1244 01b6 0ED0     		beq	.L101
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 1245              		.loc 1 1120 0 discriminator 3
 1246 01b8 092B     		cmp	r3, #9
 1247 01ba 0CD0     		beq	.L101
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 1248              		.loc 1 1120 0 discriminator 4
 1249 01bc 0A2B     		cmp	r3, #10
 1250 01be 0AD0     		beq	.L101
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 1251              		.loc 1 1120 0 discriminator 5
 1252 01c0 0D2B     		cmp	r3, #13
 1253 01c2 08D0     		beq	.L101
1121:../utilities/fsl_str.c ****                     {
 1254              		.loc 1 1121 0 is_stmt 1
 1255 01c4 0B2B     		cmp	r3, #11
 1256 01c6 06D0     		beq	.L101
1121:../utilities/fsl_str.c ****                     {
 1257              		.loc 1 1121 0 is_stmt 0 discriminator 1
 1258 01c8 0C2B     		cmp	r3, #12
 1259 01ca 04D0     		beq	.L101
1123:../utilities/fsl_str.c ****                         {
 1260              		.loc 1 1123 0 is_stmt 1
 1261 01cc B307     		lsls	r3, r6, #30
 1262 01ce E2D5     		bpl	.L99
1125:../utilities/fsl_str.c ****                         }
 1263              		.loc 1 1125 0
 1264 01d0 0132     		adds	r2, r2, #1
 1265 01d2 0292     		str	r2, [sp, #8]
 1266 01d4 E5E7     		b	.L100
 1267              	.L101:
1134:../utilities/fsl_str.c ****                     {
 1268              		.loc 1 1134 0
 1269 01d6 B307     		lsls	r3, r6, #30
 1270 01d8 00D5     		bpl	.LCB1344
 1271 01da 2FE7     		b	.L65	@long jump
 1272              	.LCB1344:
1134:../utilities/fsl_str.c ****                     {
 1273              		.loc 1 1134 0 is_stmt 0 discriminator 1
 1274 01dc 029B     		ldr	r3, [sp, #8]
 1275 01de BB42     		cmp	r3, r7
 1276 01e0 00D1     		bne	.LCB1348
 1277 01e2 2BE7     		b	.L65	@long jump
 1278              	.LCB1348:
1137:../utilities/fsl_str.c ****                         nassigned++;
 1279              		.loc 1 1137 0 is_stmt 1
 1280 01e4 0023     		movs	r3, #0
 1281 01e6 0370     		strb	r3, [r0]
1138:../utilities/fsl_str.c ****                     }
 1282              		.loc 1 1138 0
 1283 01e8 0134     		adds	r4, r4, #1
 1284              	.LVL177:
 1285 01ea 27E7     		b	.L65
 1286              	.LVL178:
 1287              	.L91:
1142:../utilities/fsl_str.c ****                     s = p;
 1288              		.loc 1 1142 0
 1289 01ec 02A8     		add	r0, sp, #8
 1290 01ee FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 1291              	.LVL179:
1143:../utilities/fsl_str.c ****                     val = 0;
 1292              		.loc 1 1143 0
 1293 01f2 029B     		ldr	r3, [sp, #8]
 1294              	.LVL180:
1145:../utilities/fsl_str.c ****                     {
 1295              		.loc 1 1145 0
 1296 01f4 002F     		cmp	r7, #0
 1297 01f6 01D0     		beq	.L103
1145:../utilities/fsl_str.c ****                     {
 1298              		.loc 1 1145 0 is_stmt 0 discriminator 1
 1299 01f8 102F     		cmp	r7, #16
 1300 01fa 03D1     		bne	.L104
 1301              	.L103:
1147:../utilities/fsl_str.c ****                         {
 1302              		.loc 1 1147 0 is_stmt 1
 1303 01fc 0022     		movs	r2, #0
 1304 01fe 9A56     		ldrsb	r2, [r3, r2]
 1305 0200 302A     		cmp	r2, #48
 1306 0202 15D0     		beq	.L132
 1307              	.LVL181:
 1308              	.L104:
1159:../utilities/fsl_str.c ****                     {
 1309              		.loc 1 1159 0
 1310 0204 002F     		cmp	r7, #0
 1311 0206 04D1     		bne	.L106
1161:../utilities/fsl_str.c ****                         {
 1312              		.loc 1 1161 0
 1313 0208 1B78     		ldrb	r3, [r3]
 1314              	.LVL182:
 1315 020a 5BB2     		sxtb	r3, r3
 1316 020c 302B     		cmp	r3, #48
 1317 020e 1ED0     		beq	.L133
1167:../utilities/fsl_str.c ****                         }
 1318              		.loc 1 1167 0
 1319 0210 0A27     		movs	r7, #10
 1320              	.LVL183:
 1321              	.L106:
1172:../utilities/fsl_str.c ****                     {
 1322              		.loc 1 1172 0
 1323 0212 029B     		ldr	r3, [sp, #8]
 1324 0214 0022     		movs	r2, #0
 1325 0216 9A56     		ldrsb	r2, [r3, r2]
 1326 0218 2B2A     		cmp	r2, #43
 1327 021a 1AD0     		beq	.L108
 1328 021c 2D2A     		cmp	r2, #45
 1329 021e 46D1     		bne	.L127
 1330              	.LVL184:
1177:../utilities/fsl_str.c ****                             field_width--;
 1331              		.loc 1 1177 0
 1332 0220 0133     		adds	r3, r3, #1
 1333 0222 0293     		str	r3, [sp, #8]
1178:../utilities/fsl_str.c ****                             break;
 1334              		.loc 1 1178 0
 1335 0224 013D     		subs	r5, r5, #1
 1336              	.LVL185:
1175:../utilities/fsl_str.c ****                             n_decode++;
 1337              		.loc 1 1175 0
 1338 0226 0123     		movs	r3, #1
 1339 0228 5B42     		rsbs	r3, r3, #0
 1340 022a 9C46     		mov	ip, r3
 1341              	.LVL186:
 1342              	.L107:
1175:../utilities/fsl_str.c ****                             n_decode++;
 1343              		.loc 1 1175 0 is_stmt 0 discriminator 1
 1344 022c 0021     		movs	r1, #0
 1345 022e 24E0     		b	.L115
 1346              	.LVL187:
 1347              	.L132:
1147:../utilities/fsl_str.c ****                         {
 1348              		.loc 1 1147 0 is_stmt 1 discriminator 1
 1349 0230 0122     		movs	r2, #1
 1350 0232 9A56     		ldrsb	r2, [r3, r2]
 1351 0234 782A     		cmp	r2, #120
 1352 0236 01D0     		beq	.L105
1147:../utilities/fsl_str.c ****                         {
 1353              		.loc 1 1147 0 is_stmt 0 discriminator 2
 1354 0238 582A     		cmp	r2, #88
 1355 023a E3D1     		bne	.L104
 1356              	.L105:
 1357              	.LVL188:
1150:../utilities/fsl_str.c ****                             {
 1358              		.loc 1 1150 0 is_stmt 1
 1359 023c 002D     		cmp	r5, #0
 1360 023e 04D0     		beq	.L123
1152:../utilities/fsl_str.c ****                                 n_decode += 2;
 1361              		.loc 1 1152 0
 1362 0240 9A1C     		adds	r2, r3, #2
 1363 0242 0292     		str	r2, [sp, #8]
1154:../utilities/fsl_str.c ****                             }
 1364              		.loc 1 1154 0
 1365 0244 023D     		subs	r5, r5, #2
 1366              	.LVL189:
1149:../utilities/fsl_str.c ****                             if (field_width >= 1)
 1367              		.loc 1 1149 0
 1368 0246 1027     		movs	r7, #16
 1369 0248 DCE7     		b	.L104
 1370              	.L123:
 1371 024a 1027     		movs	r7, #16
 1372 024c DAE7     		b	.L104
 1373              	.LVL190:
 1374              	.L133:
1163:../utilities/fsl_str.c ****                         }
 1375              		.loc 1 1163 0
 1376 024e 0837     		adds	r7, r7, #8
 1377              	.LVL191:
 1378 0250 DFE7     		b	.L106
 1379              	.LVL192:
 1380              	.L108:
1183:../utilities/fsl_str.c ****                             field_width--;
 1381              		.loc 1 1183 0
 1382 0252 0133     		adds	r3, r3, #1
 1383 0254 0293     		str	r3, [sp, #8]
1184:../utilities/fsl_str.c ****                             break;
 1384              		.loc 1 1184 0
 1385 0256 013D     		subs	r5, r5, #1
 1386              	.LVL193:
1181:../utilities/fsl_str.c ****                             n_decode++;
 1387              		.loc 1 1181 0
 1388 0258 0123     		movs	r3, #1
 1389 025a 9C46     		mov	ip, r3
1185:../utilities/fsl_str.c ****                         default:
 1390              		.loc 1 1185 0
 1391 025c E6E7     		b	.L107
 1392              	.LVL194:
 1393              	.L110:
1196:../utilities/fsl_str.c ****                         {
 1394              		.loc 1 1196 0
 1395 025e 2B00     		movs	r3, r5
 1396 0260 613B     		subs	r3, r3, #97
 1397 0262 DBB2     		uxtb	r3, r3
 1398 0264 052B     		cmp	r3, #5
 1399 0266 18D8     		bhi	.L112
1198:../utilities/fsl_str.c ****                         }
 1400              		.loc 1 1198 0
 1401 0268 573D     		subs	r5, r5, #87
 1402 026a 6BB2     		sxtb	r3, r5
 1403              	.LVL195:
 1404              	.L111:
1209:../utilities/fsl_str.c ****                         {
 1405              		.loc 1 1209 0
 1406 026c BB42     		cmp	r3, r7
 1407 026e 21DA     		bge	.L114
1215:../utilities/fsl_str.c ****                         }
 1408              		.loc 1 1215 0
 1409 0270 7943     		muls	r1, r7
 1410              	.LVL196:
 1411 0272 5918     		adds	r1, r3, r1
 1412              	.LVL197:
1217:../utilities/fsl_str.c ****                         n_decode++;
 1413              		.loc 1 1217 0
 1414 0274 0132     		adds	r2, r2, #1
 1415 0276 0292     		str	r2, [sp, #8]
1190:../utilities/fsl_str.c ****                     {
 1416              		.loc 1 1190 0
 1417 0278 0500     		movs	r5, r0
 1418              	.LVL198:
 1419              	.L115:
1190:../utilities/fsl_str.c ****                     {
 1420              		.loc 1 1190 0 is_stmt 0 discriminator 1
 1421 027a 029A     		ldr	r2, [sp, #8]
 1422 027c 0023     		movs	r3, #0
 1423 027e D356     		ldrsb	r3, [r2, r3]
 1424 0280 002B     		cmp	r3, #0
 1425 0282 17D0     		beq	.L114
1190:../utilities/fsl_str.c ****                     {
 1426              		.loc 1 1190 0 discriminator 2
 1427 0284 681E     		subs	r0, r5, #1
 1428              	.LVL199:
 1429 0286 002D     		cmp	r5, #0
 1430 0288 14D0     		beq	.L114
1192:../utilities/fsl_str.c ****                         {
 1431              		.loc 1 1192 0 is_stmt 1
 1432 028a DDB2     		uxtb	r5, r3
 1433 028c 2B00     		movs	r3, r5
 1434 028e 303B     		subs	r3, r3, #48
 1435 0290 DBB2     		uxtb	r3, r3
 1436 0292 092B     		cmp	r3, #9
 1437 0294 E3D8     		bhi	.L110
1194:../utilities/fsl_str.c ****                         }
 1438              		.loc 1 1194 0
 1439 0296 5BB2     		sxtb	r3, r3
 1440              	.LVL200:
 1441 0298 E8E7     		b	.L111
 1442              	.LVL201:
 1443              	.L112:
1200:../utilities/fsl_str.c ****                         {
 1444              		.loc 1 1200 0
 1445 029a 2B00     		movs	r3, r5
 1446 029c 413B     		subs	r3, r3, #65
 1447 029e DBB2     		uxtb	r3, r3
 1448 02a0 052B     		cmp	r3, #5
 1449 02a2 02D8     		bhi	.L113
1202:../utilities/fsl_str.c ****                         }
 1450              		.loc 1 1202 0
 1451 02a4 373D     		subs	r5, r5, #55
 1452 02a6 6BB2     		sxtb	r3, r5
 1453              	.LVL202:
 1454 02a8 E0E7     		b	.L111
 1455              	.LVL203:
 1456              	.L113:
1206:../utilities/fsl_str.c ****                         }
 1457              		.loc 1 1206 0
 1458 02aa 7BB2     		sxtb	r3, r7
 1459              	.LVL204:
 1460 02ac DEE7     		b	.L111
 1461              	.LVL205:
 1462              	.L127:
1171:../utilities/fsl_str.c ****                     switch (*p)
 1463              		.loc 1 1171 0
 1464 02ae 0123     		movs	r3, #1
 1465 02b0 9C46     		mov	ip, r3
 1466 02b2 BBE7     		b	.L107
 1467              	.LVL206:
 1468              	.L114:
1220:../utilities/fsl_str.c ****                     if (!(flag & kSCANF_Suppress))
 1469              		.loc 1 1220 0
 1470 02b4 6346     		mov	r3, ip
 1471 02b6 5943     		muls	r1, r3
 1472              	.LVL207:
1221:../utilities/fsl_str.c ****                     {
 1473              		.loc 1 1221 0
 1474 02b8 B307     		lsls	r3, r6, #30
 1475 02ba 00D5     		bpl	.LCB1584
 1476 02bc BEE6     		b	.L65	@long jump
 1477              	.LCB1584:
1280:../utilities/fsl_str.c ****                         {
 1478              		.loc 1 1280 0
 1479 02be B304     		lsls	r3, r6, #18
 1480 02c0 06D5     		bpl	.L117
1282:../utilities/fsl_str.c ****                         }
 1481              		.loc 1 1282 0
 1482 02c2 019B     		ldr	r3, [sp, #4]
 1483 02c4 1A1D     		adds	r2, r3, #4
 1484 02c6 0192     		str	r2, [sp, #4]
 1485 02c8 1B68     		ldr	r3, [r3]
 1486 02ca 1960     		str	r1, [r3]
 1487              	.L118:
1289:../utilities/fsl_str.c ****                     }
 1488              		.loc 1 1289 0
 1489 02cc 0134     		adds	r4, r4, #1
 1490              	.LVL208:
 1491 02ce B5E6     		b	.L65
 1492              	.L117:
1286:../utilities/fsl_str.c ****                         }
 1493              		.loc 1 1286 0
 1494 02d0 019B     		ldr	r3, [sp, #4]
 1495 02d2 1A1D     		adds	r2, r3, #4
 1496 02d4 0192     		str	r2, [sp, #4]
 1497 02d6 1B68     		ldr	r3, [r3]
 1498 02d8 1960     		str	r1, [r3]
 1499 02da F7E7     		b	.L118
 1500              	.LVL209:
 1501              	.L70:
1323:../utilities/fsl_str.c **** }
 1502              		.loc 1 1323 0
 1503 02dc 2000     		movs	r0, r4
 1504 02de 1CE7     		b	.L63
 1505              	.LVL210:
 1506              	.L120:
 902:../utilities/fsl_str.c ****     }
 1507              		.loc 1 902 0
 1508 02e0 0120     		movs	r0, #1
 1509              	.LVL211:
 1510 02e2 4042     		rsbs	r0, r0, #0
 1511 02e4 19E7     		b	.L63
 1512              	.L135:
 1513 02e6 C046     		.align	2
 1514              	.L134:
 1515 02e8 00000000 		.word	.L74
 1516 02ec 20200000 		.word	8224
 1517              		.cfi_endproc
 1518              	.LFE56:
 1520              		.text
 1521              	.Letext0:
 1522              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 1523              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 1524              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 1525              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 1526              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 1527              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h"
 1528              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h"
 1529              		.file 9 "<built-in>"
 1530              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdlib.h"
 1531              		.file 11 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1532              		.file 12 "../CMSIS/system_MKL17Z4.h"
 1533              		.file 13 "../drivers/fsl_clock.h"
 1534              		.file 14 "../utilities/fsl_str.h"
 1535              		.file 15 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_str.c
     /tmp/ccfxUkc0.s:16     .text.ScanIgnoreWhiteSpace:0000000000000000 $t
     /tmp/ccfxUkc0.s:22     .text.ScanIgnoreWhiteSpace:0000000000000000 ScanIgnoreWhiteSpace
     /tmp/ccfxUkc0.s:86     .text.ConvertRadixNumToString:0000000000000000 $t
     /tmp/ccfxUkc0.s:92     .text.ConvertRadixNumToString:0000000000000000 ConvertRadixNumToString
     /tmp/ccfxUkc0.s:265    .text.StrFormatPrintf:0000000000000000 $t
     /tmp/ccfxUkc0.s:272    .text.StrFormatPrintf:0000000000000000 StrFormatPrintf
     /tmp/ccfxUkc0.s:775    .text.StrFormatScanf:0000000000000000 $t
     /tmp/ccfxUkc0.s:782    .text.StrFormatScanf:0000000000000000 StrFormatScanf
     /tmp/ccfxUkc0.s:906    .rodata.StrFormatScanf:0000000000000000 $d
     /tmp/ccfxUkc0.s:1515   .text.StrFormatScanf:00000000000002e8 $d

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_idivmod
__aeabi_uidiv
strlen
