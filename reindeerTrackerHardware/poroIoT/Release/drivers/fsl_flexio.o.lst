   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_flexio.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.FLEXIO_GetInstance,"ax",%progbits
  16              		.align	1
  17              		.global	FLEXIO_GetInstance
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	FLEXIO_GetInstance:
  24              	.LFB67:
  25              		.file 1 "../drivers/fsl_flexio.c"
   1:../drivers/fsl_flexio.c **** /*
   2:../drivers/fsl_flexio.c ****  * The Clear BSD License
   3:../drivers/fsl_flexio.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_flexio.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_flexio.c ****  * All rights reserved.
   6:../drivers/fsl_flexio.c ****  *
   7:../drivers/fsl_flexio.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_flexio.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_flexio.c ****  * that the following conditions are met:
  10:../drivers/fsl_flexio.c ****  *
  11:../drivers/fsl_flexio.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_flexio.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_flexio.c ****  *
  14:../drivers/fsl_flexio.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_flexio.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_flexio.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_flexio.c ****  *
  18:../drivers/fsl_flexio.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_flexio.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_flexio.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_flexio.c ****  *
  22:../drivers/fsl_flexio.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_flexio.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_flexio.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_flexio.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_flexio.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_flexio.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_flexio.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_flexio.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_flexio.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_flexio.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_flexio.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_flexio.c ****  */
  34:../drivers/fsl_flexio.c **** 
  35:../drivers/fsl_flexio.c **** #include "fsl_flexio.h"
  36:../drivers/fsl_flexio.c **** 
  37:../drivers/fsl_flexio.c **** /*******************************************************************************
  38:../drivers/fsl_flexio.c ****  * Definitions
  39:../drivers/fsl_flexio.c ****  ******************************************************************************/
  40:../drivers/fsl_flexio.c **** 
  41:../drivers/fsl_flexio.c **** /*< @brief user configurable flexio handle count. */
  42:../drivers/fsl_flexio.c **** #define FLEXIO_HANDLE_COUNT 2
  43:../drivers/fsl_flexio.c **** 
  44:../drivers/fsl_flexio.c **** /*******************************************************************************
  45:../drivers/fsl_flexio.c ****  * Variables
  46:../drivers/fsl_flexio.c ****  ******************************************************************************/
  47:../drivers/fsl_flexio.c **** 
  48:../drivers/fsl_flexio.c **** /*< @brief pointer to array of FLEXIO handle. */
  49:../drivers/fsl_flexio.c **** static void *s_flexioHandle[FLEXIO_HANDLE_COUNT];
  50:../drivers/fsl_flexio.c **** 
  51:../drivers/fsl_flexio.c **** /*< @brief pointer to array of FLEXIO IP types. */
  52:../drivers/fsl_flexio.c **** static void *s_flexioType[FLEXIO_HANDLE_COUNT];
  53:../drivers/fsl_flexio.c **** 
  54:../drivers/fsl_flexio.c **** /*< @brief pointer to array of FLEXIO Isr. */
  55:../drivers/fsl_flexio.c **** static flexio_isr_t s_flexioIsr[FLEXIO_HANDLE_COUNT];
  56:../drivers/fsl_flexio.c **** 
  57:../drivers/fsl_flexio.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  58:../drivers/fsl_flexio.c **** /*! @brief Pointers to flexio clocks for each instance. */
  59:../drivers/fsl_flexio.c **** const clock_ip_name_t s_flexioClocks[] = FLEXIO_CLOCKS;
  60:../drivers/fsl_flexio.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  61:../drivers/fsl_flexio.c **** 
  62:../drivers/fsl_flexio.c **** /*! @brief Pointers to flexio bases for each instance. */
  63:../drivers/fsl_flexio.c **** FLEXIO_Type *const s_flexioBases[] = FLEXIO_BASE_PTRS;
  64:../drivers/fsl_flexio.c **** 
  65:../drivers/fsl_flexio.c **** /*******************************************************************************
  66:../drivers/fsl_flexio.c ****  * Codes
  67:../drivers/fsl_flexio.c ****  ******************************************************************************/
  68:../drivers/fsl_flexio.c **** 
  69:../drivers/fsl_flexio.c **** uint32_t FLEXIO_GetInstance(FLEXIO_Type *base)
  70:../drivers/fsl_flexio.c **** {
  26              		.loc 1 70 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  71:../drivers/fsl_flexio.c ****     uint32_t instance;
  72:../drivers/fsl_flexio.c **** 
  73:../drivers/fsl_flexio.c ****     /* Find the instance index from base address mappings. */
  74:../drivers/fsl_flexio.c ****     for (instance = 0; instance < ARRAY_SIZE(s_flexioBases); instance++)
  32              		.loc 1 74 0
  33 0000 0023     		movs	r3, #0
  34              	.LVL1:
  35              	.L2:
  36              		.loc 1 74 0 is_stmt 0 discriminator 1
  37 0002 002B     		cmp	r3, #0
  38 0004 01D0     		beq	.L4
  39              	.L1:
  75:../drivers/fsl_flexio.c ****     {
  76:../drivers/fsl_flexio.c ****         if (s_flexioBases[instance] == base)
  77:../drivers/fsl_flexio.c ****         {
  78:../drivers/fsl_flexio.c ****             break;
  79:../drivers/fsl_flexio.c ****         }
  80:../drivers/fsl_flexio.c ****     }
  81:../drivers/fsl_flexio.c **** 
  82:../drivers/fsl_flexio.c ****     assert(instance < ARRAY_SIZE(s_flexioBases));
  83:../drivers/fsl_flexio.c **** 
  84:../drivers/fsl_flexio.c ****     return instance;
  85:../drivers/fsl_flexio.c **** }
  40              		.loc 1 85 0 is_stmt 1
  41 0006 1800     		movs	r0, r3
  42              	.LVL2:
  43              		@ sp needed
  44 0008 7047     		bx	lr
  45              	.LVL3:
  46              	.L4:
  76:../drivers/fsl_flexio.c ****         {
  47              		.loc 1 76 0
  48 000a 024A     		ldr	r2, .L5
  49 000c 9042     		cmp	r0, r2
  50 000e FAD0     		beq	.L1
  74:../drivers/fsl_flexio.c ****     {
  51              		.loc 1 74 0 discriminator 2
  52 0010 0133     		adds	r3, r3, #1
  53              	.LVL4:
  54 0012 F6E7     		b	.L2
  55              	.L6:
  56              		.align	2
  57              	.L5:
  58 0014 00F00540 		.word	1074130944
  59              		.cfi_endproc
  60              	.LFE67:
  62              		.section	.text.FLEXIO_Deinit,"ax",%progbits
  63              		.align	1
  64              		.global	FLEXIO_Deinit
  65              		.syntax unified
  66              		.code	16
  67              		.thumb_func
  68              		.fpu softvfp
  70              	FLEXIO_Deinit:
  71              	.LFB69:
  86:../drivers/fsl_flexio.c **** 
  87:../drivers/fsl_flexio.c **** void FLEXIO_Init(FLEXIO_Type *base, const flexio_config_t *userConfig)
  88:../drivers/fsl_flexio.c **** {
  89:../drivers/fsl_flexio.c ****     uint32_t ctrlReg = 0;
  90:../drivers/fsl_flexio.c **** 
  91:../drivers/fsl_flexio.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  92:../drivers/fsl_flexio.c ****     CLOCK_EnableClock(s_flexioClocks[FLEXIO_GetInstance(base)]);
  93:../drivers/fsl_flexio.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  94:../drivers/fsl_flexio.c **** 
  95:../drivers/fsl_flexio.c ****     FLEXIO_Reset(base);
  96:../drivers/fsl_flexio.c **** 
  97:../drivers/fsl_flexio.c ****     ctrlReg = base->CTRL;
  98:../drivers/fsl_flexio.c ****     ctrlReg &= ~(FLEXIO_CTRL_DOZEN_MASK | FLEXIO_CTRL_DBGE_MASK | FLEXIO_CTRL_FASTACC_MASK | FLEXIO
  99:../drivers/fsl_flexio.c ****     ctrlReg |= (FLEXIO_CTRL_DBGE(userConfig->enableInDebug) | FLEXIO_CTRL_FASTACC(userConfig->enabl
 100:../drivers/fsl_flexio.c ****                 FLEXIO_CTRL_FLEXEN(userConfig->enableFlexio));
 101:../drivers/fsl_flexio.c ****     if (!userConfig->enableInDoze)
 102:../drivers/fsl_flexio.c ****     {
 103:../drivers/fsl_flexio.c ****         ctrlReg |= FLEXIO_CTRL_DOZEN_MASK;
 104:../drivers/fsl_flexio.c ****     }
 105:../drivers/fsl_flexio.c **** 
 106:../drivers/fsl_flexio.c ****     base->CTRL = ctrlReg;
 107:../drivers/fsl_flexio.c **** }
 108:../drivers/fsl_flexio.c **** 
 109:../drivers/fsl_flexio.c **** void FLEXIO_Deinit(FLEXIO_Type *base)
 110:../drivers/fsl_flexio.c **** {
  72              		.loc 1 110 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              	.LVL5:
  77 0000 10B5     		push	{r4, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 4, -8
  80              		.cfi_offset 14, -4
  81              	.LVL6:
  82              	.LBB8:
  83              	.LBB9:
  84              		.file 2 "../drivers/fsl_flexio.h"
   1:../drivers/fsl_flexio.h **** /*
   2:../drivers/fsl_flexio.h ****  * The Clear BSD License
   3:../drivers/fsl_flexio.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_flexio.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_flexio.h ****  * All rights reserved.
   6:../drivers/fsl_flexio.h ****  *
   7:../drivers/fsl_flexio.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_flexio.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_flexio.h ****  * that the following conditions are met:
  10:../drivers/fsl_flexio.h ****  *
  11:../drivers/fsl_flexio.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_flexio.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_flexio.h ****  *
  14:../drivers/fsl_flexio.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_flexio.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_flexio.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_flexio.h ****  *
  18:../drivers/fsl_flexio.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_flexio.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_flexio.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_flexio.h ****  *
  22:../drivers/fsl_flexio.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_flexio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_flexio.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_flexio.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_flexio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_flexio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_flexio.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_flexio.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_flexio.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_flexio.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_flexio.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_flexio.h ****  */
  34:../drivers/fsl_flexio.h **** #ifndef _FSL_FLEXIO_H_
  35:../drivers/fsl_flexio.h **** #define _FSL_FLEXIO_H_
  36:../drivers/fsl_flexio.h **** 
  37:../drivers/fsl_flexio.h **** #include "fsl_common.h"
  38:../drivers/fsl_flexio.h **** 
  39:../drivers/fsl_flexio.h **** /*!
  40:../drivers/fsl_flexio.h ****  * @addtogroup flexio_driver
  41:../drivers/fsl_flexio.h ****  * @{
  42:../drivers/fsl_flexio.h ****  */
  43:../drivers/fsl_flexio.h **** 
  44:../drivers/fsl_flexio.h **** /*******************************************************************************
  45:../drivers/fsl_flexio.h ****  * Definitions
  46:../drivers/fsl_flexio.h ****  ******************************************************************************/
  47:../drivers/fsl_flexio.h **** 
  48:../drivers/fsl_flexio.h **** /*! @name Driver version */
  49:../drivers/fsl_flexio.h **** /*@{*/
  50:../drivers/fsl_flexio.h **** /*! @brief FlexIO driver version 2.0.2. */
  51:../drivers/fsl_flexio.h **** #define FSL_FLEXIO_DRIVER_VERSION (MAKE_VERSION(2, 0, 2))
  52:../drivers/fsl_flexio.h **** /*@}*/
  53:../drivers/fsl_flexio.h **** 
  54:../drivers/fsl_flexio.h **** /*! @brief Calculate FlexIO timer trigger.*/
  55:../drivers/fsl_flexio.h **** #define FLEXIO_TIMER_TRIGGER_SEL_PININPUT(x) ((uint32_t)(x) << 1U)
  56:../drivers/fsl_flexio.h **** #define FLEXIO_TIMER_TRIGGER_SEL_SHIFTnSTAT(x) (((uint32_t)(x) << 2U) | 0x1U)
  57:../drivers/fsl_flexio.h **** #define FLEXIO_TIMER_TRIGGER_SEL_TIMn(x) (((uint32_t)(x) << 2U) | 0x3U)
  58:../drivers/fsl_flexio.h **** 
  59:../drivers/fsl_flexio.h **** /*! @brief Define time of timer trigger polarity.*/
  60:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_trigger_polarity
  61:../drivers/fsl_flexio.h **** {
  62:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerPolarityActiveHigh = 0x0U, /*!< Active high. */
  63:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerPolarityActiveLow = 0x1U,  /*!< Active low. */
  64:../drivers/fsl_flexio.h **** } flexio_timer_trigger_polarity_t;
  65:../drivers/fsl_flexio.h **** 
  66:../drivers/fsl_flexio.h **** /*! @brief Define type of timer trigger source.*/
  67:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_trigger_source
  68:../drivers/fsl_flexio.h **** {
  69:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerSourceExternal = 0x0U, /*!< External trigger selected. */
  70:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerSourceInternal = 0x1U, /*!< Internal trigger selected. */
  71:../drivers/fsl_flexio.h **** } flexio_timer_trigger_source_t;
  72:../drivers/fsl_flexio.h **** 
  73:../drivers/fsl_flexio.h **** /*! @brief Define type of timer/shifter pin configuration.*/
  74:../drivers/fsl_flexio.h **** typedef enum _flexio_pin_config
  75:../drivers/fsl_flexio.h **** {
  76:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigOutputDisabled = 0x0U,         /*!< Pin output disabled. */
  77:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigOpenDrainOrBidirection = 0x1U, /*!< Pin open drain or bidirectional output ena
  78:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigBidirectionOutputData = 0x2U,  /*!< Pin bidirectional output data. */
  79:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigOutput = 0x3U,                 /*!< Pin output. */
  80:../drivers/fsl_flexio.h **** } flexio_pin_config_t;
  81:../drivers/fsl_flexio.h **** 
  82:../drivers/fsl_flexio.h **** /*! @brief Definition of pin polarity.*/
  83:../drivers/fsl_flexio.h **** typedef enum _flexio_pin_polarity
  84:../drivers/fsl_flexio.h **** {
  85:../drivers/fsl_flexio.h ****     kFLEXIO_PinActiveHigh = 0x0U, /*!< Active high. */
  86:../drivers/fsl_flexio.h ****     kFLEXIO_PinActiveLow = 0x1U,  /*!< Active low. */
  87:../drivers/fsl_flexio.h **** } flexio_pin_polarity_t;
  88:../drivers/fsl_flexio.h **** 
  89:../drivers/fsl_flexio.h **** /*! @brief Define type of timer work mode.*/
  90:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_mode
  91:../drivers/fsl_flexio.h **** {
  92:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeDisabled = 0x0U,        /*!< Timer Disabled. */
  93:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeDual8BitBaudBit = 0x1U, /*!< Dual 8-bit counters baud/bit mode. */
  94:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeDual8BitPWM = 0x2U,     /*!< Dual 8-bit counters PWM mode. */
  95:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeSingle16Bit = 0x3U,     /*!< Single 16-bit counter mode. */
  96:../drivers/fsl_flexio.h **** } flexio_timer_mode_t;
  97:../drivers/fsl_flexio.h **** 
  98:../drivers/fsl_flexio.h **** /*! @brief Define type of timer initial output or timer reset condition.*/
  99:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_output
 100:../drivers/fsl_flexio.h **** {
 101:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputOneNotAffectedByReset = 0x0U,  /*!< Logic one when enabled and is not affect
 102:../drivers/fsl_flexio.h ****                                                        reset. */
 103:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputZeroNotAffectedByReset = 0x1U, /*!< Logic zero when enabled and is not affec
 104:../drivers/fsl_flexio.h ****                                                        reset. */
 105:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputOneAffectedByReset = 0x2U,     /*!< Logic one when enabled and on timer rese
 106:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputZeroAffectedByReset = 0x3U,    /*!< Logic zero when enabled and on timer res
 107:../drivers/fsl_flexio.h **** } flexio_timer_output_t;
 108:../drivers/fsl_flexio.h **** 
 109:../drivers/fsl_flexio.h **** /*! @brief Define type of timer decrement.*/
 110:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_decrement_source
 111:../drivers/fsl_flexio.h **** {
 112:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnFlexIOClockShiftTimerOutput = 0x0U,   /*!< Decrement counter on FlexIO clo
 113:../drivers/fsl_flexio.h ****                                                                 equals Timer output. */
 114:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnTriggerInputShiftTimerOutput = 0x1U,  /*!< Decrement counter on Trigger in
 115:../drivers/fsl_flexio.h ****                                                                 Shift clock equals Timer output. */
 116:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnPinInputShiftPinInput = 0x2U,         /*!< Decrement counter on Pin input 
 117:../drivers/fsl_flexio.h ****                                                                 Shift clock equals Pin input. */
 118:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnTriggerInputShiftTriggerInput = 0x3U, /*!< Decrement counter on Trigger in
 119:../drivers/fsl_flexio.h ****                                                                 Shift clock equals Trigger input. *
 120:../drivers/fsl_flexio.h **** } flexio_timer_decrement_source_t;
 121:../drivers/fsl_flexio.h **** 
 122:../drivers/fsl_flexio.h **** /*! @brief Define type of timer reset condition.*/
 123:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_reset_condition
 124:../drivers/fsl_flexio.h **** {
 125:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetNever = 0x0U,                            /*!< Timer never reset. */
 126:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerPinEqualToTimerOutput = 0x2U,     /*!< Timer reset on Timer Pin equal 
 127:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerTriggerEqualToTimerOutput = 0x3U, /*!< Timer reset on Timer Trigger eq
 128:../drivers/fsl_flexio.h ****                                                                 Timer Output. */
 129:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerPinRisingEdge = 0x4U,             /*!< Timer reset on Timer Pin rising
 130:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerTriggerRisingEdge = 0x6U,         /*!< Timer reset on Trigger rising e
 131:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerTriggerBothEdge = 0x7U,           /*!< Timer reset on Trigger rising o
 132:../drivers/fsl_flexio.h **** } flexio_timer_reset_condition_t;
 133:../drivers/fsl_flexio.h **** 
 134:../drivers/fsl_flexio.h **** /*! @brief Define type of timer disable condition.*/
 135:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_disable_condition
 136:../drivers/fsl_flexio.h **** {
 137:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableNever = 0x0U,                    /*!< Timer never disabled. */
 138:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnPreTimerDisable = 0x1U,        /*!< Timer disabled on Timer N-1 disable. 
 139:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnTimerCompare = 0x2U,           /*!< Timer disabled on Timer compare. */
 140:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnTimerCompareTriggerLow = 0x3U, /*!< Timer disabled on Timer compare and T
 141:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnPinBothEdge = 0x4U,            /*!< Timer disabled on Pin rising or falli
 142:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnPinBothEdgeTriggerHigh = 0x5U, /*!< Timer disabled on Pin rising or falli
 143:../drivers/fsl_flexio.h ****                                                           Trigger is high. */
 144:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnTriggerFallingEdge = 0x6U,     /*!< Timer disabled on Trigger falling edg
 145:../drivers/fsl_flexio.h **** } flexio_timer_disable_condition_t;
 146:../drivers/fsl_flexio.h **** 
 147:../drivers/fsl_flexio.h **** /*! @brief Define type of timer enable condition.*/
 148:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_enable_condition
 149:../drivers/fsl_flexio.h **** {
 150:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnabledAlways = 0x0U,                    /*!< Timer always enabled. */
 151:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnPrevTimerEnable = 0x1U,          /*!< Timer enabled on Timer N-1 enable. *
 152:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerHigh = 0x2U,              /*!< Timer enabled on Trigger high. */
 153:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerHighPinHigh = 0x3U,       /*!< Timer enabled on Trigger high and Pi
 154:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnPinRisingEdge = 0x4U,            /*!< Timer enabled on Pin rising edge. */
 155:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnPinRisingEdgeTriggerHigh = 0x5U, /*!< Timer enabled on Pin rising edge and
 156:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerRisingEdge = 0x6U,        /*!< Timer enabled on Trigger rising edge
 157:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerBothEdge = 0x7U,          /*!< Timer enabled on Trigger rising or f
 158:../drivers/fsl_flexio.h **** } flexio_timer_enable_condition_t;
 159:../drivers/fsl_flexio.h **** 
 160:../drivers/fsl_flexio.h **** /*! @brief Define type of timer stop bit generate condition.*/
 161:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_stop_bit_condition
 162:../drivers/fsl_flexio.h **** {
 163:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitDisabled = 0x0U,                    /*!< Stop bit disabled. */
 164:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitEnableOnTimerCompare = 0x1U,        /*!< Stop bit is enabled on timer compa
 165:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitEnableOnTimerDisable = 0x2U,        /*!< Stop bit is enabled on timer disab
 166:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitEnableOnTimerCompareDisable = 0x3U, /*!< Stop bit is enabled on timer compa
 167:../drivers/fsl_flexio.h ****                                                              disable. */
 168:../drivers/fsl_flexio.h **** } flexio_timer_stop_bit_condition_t;
 169:../drivers/fsl_flexio.h **** 
 170:../drivers/fsl_flexio.h **** /*! @brief Define type of timer start bit generate condition.*/
 171:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_start_bit_condition
 172:../drivers/fsl_flexio.h **** {
 173:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStartBitDisabled = 0x0U, /*!< Start bit disabled. */
 174:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStartBitEnabled = 0x1U,  /*!< Start bit enabled. */
 175:../drivers/fsl_flexio.h **** } flexio_timer_start_bit_condition_t;
 176:../drivers/fsl_flexio.h **** 
 177:../drivers/fsl_flexio.h **** /*! @brief Define type of timer polarity for shifter control. */
 178:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_timer_polarity
 179:../drivers/fsl_flexio.h **** {
 180:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterTimerPolarityOnPositive = 0x0U, /* Shift on positive edge of shift clock. */
 181:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterTimerPolarityOnNegitive = 0x1U, /* Shift on negative edge of shift clock. */
 182:../drivers/fsl_flexio.h **** } flexio_shifter_timer_polarity_t;
 183:../drivers/fsl_flexio.h **** 
 184:../drivers/fsl_flexio.h **** /*! @brief Define type of shifter working mode.*/
 185:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_mode
 186:../drivers/fsl_flexio.h **** {
 187:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterDisabled = 0x0U,            /*!< Shifter is disabled. */
 188:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeReceive = 0x1U,         /*!< Receive mode. */
 189:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeTransmit = 0x2U,        /*!< Transmit mode. */
 190:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeMatchStore = 0x4U,      /*!< Match store mode. */
 191:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeMatchContinuous = 0x5U, /*!< Match continuous mode. */
 192:../drivers/fsl_flexio.h **** #if FSL_FEATURE_FLEXIO_HAS_STATE_MODE
 193:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeState = 0x6U, /*!< SHIFTBUF contents are used for storing
 194:../drivers/fsl_flexio.h ****                                       programmable state attributes. */
 195:../drivers/fsl_flexio.h **** #endif                               /* FSL_FEATURE_FLEXIO_HAS_STATE_MODE */
 196:../drivers/fsl_flexio.h **** #if FSL_FEATURE_FLEXIO_HAS_LOGIC_MODE
 197:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeLogic = 0x7U, /*!< SHIFTBUF contents are used for implementing
 198:../drivers/fsl_flexio.h ****                                      programmable logic look up table. */
 199:../drivers/fsl_flexio.h **** #endif                               /* FSL_FEATURE_FLEXIO_HAS_LOGIC_MODE */
 200:../drivers/fsl_flexio.h **** } flexio_shifter_mode_t;
 201:../drivers/fsl_flexio.h **** 
 202:../drivers/fsl_flexio.h **** /*! @brief Define type of shifter input source.*/
 203:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_input_source
 204:../drivers/fsl_flexio.h **** {
 205:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterInputFromPin = 0x0U,               /*!< Shifter input from pin. */
 206:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterInputFromNextShifterOutput = 0x1U, /*!< Shifter input from Shifter N+1. */
 207:../drivers/fsl_flexio.h **** } flexio_shifter_input_source_t;
 208:../drivers/fsl_flexio.h **** 
 209:../drivers/fsl_flexio.h **** /*! @brief Define of STOP bit configuration.*/
 210:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_stop_bit
 211:../drivers/fsl_flexio.h **** {
 212:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStopBitDisable = 0x0U, /*!< Disable shifter stop bit. */
 213:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStopBitLow = 0x2U,     /*!< Set shifter stop bit to logic low level. */
 214:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStopBitHigh = 0x3U,    /*!< Set shifter stop bit to logic high level. */
 215:../drivers/fsl_flexio.h **** } flexio_shifter_stop_bit_t;
 216:../drivers/fsl_flexio.h **** 
 217:../drivers/fsl_flexio.h **** /*! @brief Define type of START bit configuration.*/
 218:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_start_bit
 219:../drivers/fsl_flexio.h **** {
 220:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitDisabledLoadDataOnEnable = 0x0U, /*!< Disable shifter start bit, transmi
 221:../drivers/fsl_flexio.h ****                                                              data on enable. */
 222:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitDisabledLoadDataOnShift = 0x1U,  /*!< Disable shifter start bit, transmi
 223:../drivers/fsl_flexio.h ****                                                              data on first shift. */
 224:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitLow = 0x2U,                      /*!< Set shifter start bit to logic low
 225:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitHigh = 0x3U,                     /*!< Set shifter start bit to logic hig
 226:../drivers/fsl_flexio.h **** } flexio_shifter_start_bit_t;
 227:../drivers/fsl_flexio.h **** 
 228:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO shifter buffer type*/
 229:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_buffer_type
 230:../drivers/fsl_flexio.h **** {
 231:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBuffer = 0x0U,               /*!< Shifter Buffer N Register. */
 232:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferBitSwapped = 0x1U,     /*!< Shifter Buffer N Bit Byte Swapped Register. */
 233:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferByteSwapped = 0x2U,    /*!< Shifter Buffer N Byte Swapped Register. */
 234:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferBitByteSwapped = 0x3U, /*!< Shifter Buffer N Bit Swapped Register. */
 235:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_BYTE_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUF
 236:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferNibbleByteSwapped = 0x4U, /*!< Shifter Buffer N Nibble Byte Swapped Regist
 237:../drivers/fsl_flexio.h **** #endif                                             /*FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_BYTE
 238:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_HALF_WORD_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFE
 239:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferHalfWordSwapped = 0x5U, /*!< Shifter Buffer N Half Word Swapped Register. 
 240:../drivers/fsl_flexio.h **** #endif
 241:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_N
 242:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferNibbleSwapped = 0x6U, /*!< Shifter Buffer N Nibble Swapped Register. */
 243:../drivers/fsl_flexio.h **** #endif
 244:../drivers/fsl_flexio.h **** } flexio_shifter_buffer_type_t;
 245:../drivers/fsl_flexio.h **** 
 246:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO user configuration structure. */
 247:../drivers/fsl_flexio.h **** typedef struct _flexio_config_
 248:../drivers/fsl_flexio.h **** {
 249:../drivers/fsl_flexio.h ****     bool enableFlexio;     /*!< Enable/disable FlexIO module */
 250:../drivers/fsl_flexio.h ****     bool enableInDoze;     /*!< Enable/disable FlexIO operation in doze mode */
 251:../drivers/fsl_flexio.h ****     bool enableInDebug;    /*!< Enable/disable FlexIO operation in debug mode */
 252:../drivers/fsl_flexio.h ****     bool enableFastAccess; /*!< Enable/disable fast access to FlexIO registers, fast access require
 253:../drivers/fsl_flexio.h ****                            the FlexIO clock to be at least twice the frequency of the bus clock. */
 254:../drivers/fsl_flexio.h **** } flexio_config_t;
 255:../drivers/fsl_flexio.h **** 
 256:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO timer configuration structure. */
 257:../drivers/fsl_flexio.h **** typedef struct _flexio_timer_config
 258:../drivers/fsl_flexio.h **** {
 259:../drivers/fsl_flexio.h ****     /* Trigger. */
 260:../drivers/fsl_flexio.h ****     uint32_t triggerSelect;                          /*!< The internal trigger selection number usi
 261:../drivers/fsl_flexio.h ****     flexio_timer_trigger_polarity_t triggerPolarity; /*!< Trigger Polarity. */
 262:../drivers/fsl_flexio.h ****     flexio_timer_trigger_source_t triggerSource;     /*!< Trigger Source, internal (see 'trgsel') o
 263:../drivers/fsl_flexio.h ****     /* Pin. */
 264:../drivers/fsl_flexio.h ****     flexio_pin_config_t pinConfig;     /*!< Timer Pin Configuration. */
 265:../drivers/fsl_flexio.h ****     uint32_t pinSelect;                /*!< Timer Pin number Select. */
 266:../drivers/fsl_flexio.h ****     flexio_pin_polarity_t pinPolarity; /*!< Timer Pin Polarity. */
 267:../drivers/fsl_flexio.h ****     /* Timer. */
 268:../drivers/fsl_flexio.h ****     flexio_timer_mode_t timerMode;                  /*!< Timer work Mode. */
 269:../drivers/fsl_flexio.h ****     flexio_timer_output_t timerOutput;              /*!< Configures the initial state of the Timer 
 270:../drivers/fsl_flexio.h ****                                                     whether it is affected by the Timer reset. */
 271:../drivers/fsl_flexio.h ****     flexio_timer_decrement_source_t timerDecrement; /*!< Configures the source of the Timer decreme
 272:../drivers/fsl_flexio.h ****                                                     source of the Shift clock. */
 273:../drivers/fsl_flexio.h ****     flexio_timer_reset_condition_t timerReset;      /*!< Configures the condition that causes the t
 274:../drivers/fsl_flexio.h ****                                                     (and optionally the timer output) to be reset. 
 275:../drivers/fsl_flexio.h ****     flexio_timer_disable_condition_t timerDisable;  /*!< Configures the condition that causes the T
 276:../drivers/fsl_flexio.h ****                                                     disabled and stop decrementing. */
 277:../drivers/fsl_flexio.h ****     flexio_timer_enable_condition_t timerEnable;    /*!< Configures the condition that causes the T
 278:../drivers/fsl_flexio.h ****                                                     enabled and start decrementing. */
 279:../drivers/fsl_flexio.h ****     flexio_timer_stop_bit_condition_t timerStop;    /*!< Timer STOP Bit generation. */
 280:../drivers/fsl_flexio.h ****     flexio_timer_start_bit_condition_t timerStart;  /*!< Timer STRAT Bit generation. */
 281:../drivers/fsl_flexio.h ****     uint32_t timerCompare;                          /*!< Value for Timer Compare N Register. */
 282:../drivers/fsl_flexio.h **** } flexio_timer_config_t;
 283:../drivers/fsl_flexio.h **** 
 284:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO shifter configuration structure. */
 285:../drivers/fsl_flexio.h **** typedef struct _flexio_shifter_config
 286:../drivers/fsl_flexio.h **** {
 287:../drivers/fsl_flexio.h ****     /* Timer. */
 288:../drivers/fsl_flexio.h ****     uint32_t timerSelect;                          /*!< Selects which Timer is used for controlling
 289:../drivers/fsl_flexio.h ****                                                     logic/shift register and generating the Shift c
 290:../drivers/fsl_flexio.h ****     flexio_shifter_timer_polarity_t timerPolarity; /*!< Timer Polarity. */
 291:../drivers/fsl_flexio.h ****     /* Pin. */
 292:../drivers/fsl_flexio.h ****     flexio_pin_config_t pinConfig;     /*!< Shifter Pin Configuration. */
 293:../drivers/fsl_flexio.h ****     uint32_t pinSelect;                /*!< Shifter Pin number Select. */
 294:../drivers/fsl_flexio.h ****     flexio_pin_polarity_t pinPolarity; /*!< Shifter Pin Polarity. */
 295:../drivers/fsl_flexio.h ****     /* Shifter. */
 296:../drivers/fsl_flexio.h ****     flexio_shifter_mode_t shifterMode; /*!< Configures the mode of the Shifter. */
 297:../drivers/fsl_flexio.h **** #if FSL_FEATURE_FLEXIO_HAS_PARALLEL_WIDTH
 298:../drivers/fsl_flexio.h ****     uint32_t parallelWidth;                    /*!< Configures the parallel width when using parall
 299:../drivers/fsl_flexio.h **** #endif                                         /* FSL_FEATURE_FLEXIO_HAS_PARALLEL_WIDTH */
 300:../drivers/fsl_flexio.h ****     flexio_shifter_input_source_t inputSource; /*!< Selects the input source for the shifter. */
 301:../drivers/fsl_flexio.h ****     flexio_shifter_stop_bit_t shifterStop;     /*!< Shifter STOP bit. */
 302:../drivers/fsl_flexio.h ****     flexio_shifter_start_bit_t shifterStart;   /*!< Shifter START bit. */
 303:../drivers/fsl_flexio.h **** } flexio_shifter_config_t;
 304:../drivers/fsl_flexio.h **** 
 305:../drivers/fsl_flexio.h **** /*! @brief typedef for FlexIO simulated driver interrupt handler.*/
 306:../drivers/fsl_flexio.h **** typedef void (*flexio_isr_t)(void *base, void *handle);
 307:../drivers/fsl_flexio.h **** 
 308:../drivers/fsl_flexio.h **** /*******************************************************************************
 309:../drivers/fsl_flexio.h ****  * API
 310:../drivers/fsl_flexio.h ****  ******************************************************************************/
 311:../drivers/fsl_flexio.h **** 
 312:../drivers/fsl_flexio.h **** #if defined(__cplusplus)
 313:../drivers/fsl_flexio.h **** extern "C" {
 314:../drivers/fsl_flexio.h **** #endif /*_cplusplus*/
 315:../drivers/fsl_flexio.h **** 
 316:../drivers/fsl_flexio.h **** /*!
 317:../drivers/fsl_flexio.h ****  * @name FlexIO Initialization and De-initialization
 318:../drivers/fsl_flexio.h ****  * @{
 319:../drivers/fsl_flexio.h ****  */
 320:../drivers/fsl_flexio.h **** 
 321:../drivers/fsl_flexio.h **** /*!
 322:../drivers/fsl_flexio.h ****  * @brief Gets the default configuration to configure the FlexIO module. The configuration
 323:../drivers/fsl_flexio.h ****  * can used directly to call the FLEXIO_Configure().
 324:../drivers/fsl_flexio.h ****  *
 325:../drivers/fsl_flexio.h ****  * Example:
 326:../drivers/fsl_flexio.h ****    @code
 327:../drivers/fsl_flexio.h ****    flexio_config_t config;
 328:../drivers/fsl_flexio.h ****    FLEXIO_GetDefaultConfig(&config);
 329:../drivers/fsl_flexio.h ****    @endcode
 330:../drivers/fsl_flexio.h ****  *
 331:../drivers/fsl_flexio.h ****  * @param userConfig pointer to flexio_config_t structure
 332:../drivers/fsl_flexio.h **** */
 333:../drivers/fsl_flexio.h **** void FLEXIO_GetDefaultConfig(flexio_config_t *userConfig);
 334:../drivers/fsl_flexio.h **** 
 335:../drivers/fsl_flexio.h **** /*!
 336:../drivers/fsl_flexio.h ****  * @brief Configures the FlexIO with a FlexIO configuration. The configuration structure
 337:../drivers/fsl_flexio.h ****  * can be filled by the user or be set with default values by FLEXIO_GetDefaultConfig().
 338:../drivers/fsl_flexio.h ****  *
 339:../drivers/fsl_flexio.h ****  * Example
 340:../drivers/fsl_flexio.h ****    @code
 341:../drivers/fsl_flexio.h ****    flexio_config_t config = {
 342:../drivers/fsl_flexio.h ****    .enableFlexio = true,
 343:../drivers/fsl_flexio.h ****    .enableInDoze = false,
 344:../drivers/fsl_flexio.h ****    .enableInDebug = true,
 345:../drivers/fsl_flexio.h ****    .enableFastAccess = false
 346:../drivers/fsl_flexio.h ****    };
 347:../drivers/fsl_flexio.h ****    FLEXIO_Configure(base, &config);
 348:../drivers/fsl_flexio.h ****    @endcode
 349:../drivers/fsl_flexio.h ****  *
 350:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 351:../drivers/fsl_flexio.h ****  * @param userConfig pointer to flexio_config_t structure
 352:../drivers/fsl_flexio.h **** */
 353:../drivers/fsl_flexio.h **** void FLEXIO_Init(FLEXIO_Type *base, const flexio_config_t *userConfig);
 354:../drivers/fsl_flexio.h **** 
 355:../drivers/fsl_flexio.h **** /*!
 356:../drivers/fsl_flexio.h ****  * @brief Gates the FlexIO clock. Call this API to stop the FlexIO clock.
 357:../drivers/fsl_flexio.h ****  *
 358:../drivers/fsl_flexio.h ****  * @note After calling this API, call the FLEXO_Init to use the FlexIO module.
 359:../drivers/fsl_flexio.h ****  *
 360:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 361:../drivers/fsl_flexio.h **** */
 362:../drivers/fsl_flexio.h **** void FLEXIO_Deinit(FLEXIO_Type *base);
 363:../drivers/fsl_flexio.h **** 
 364:../drivers/fsl_flexio.h **** /* @} */
 365:../drivers/fsl_flexio.h **** 
 366:../drivers/fsl_flexio.h **** /*!
 367:../drivers/fsl_flexio.h ****  * @name FlexIO Basic Operation
 368:../drivers/fsl_flexio.h ****  * @{
 369:../drivers/fsl_flexio.h ****  */
 370:../drivers/fsl_flexio.h **** 
 371:../drivers/fsl_flexio.h **** /*!
 372:../drivers/fsl_flexio.h ****  * @brief Resets the FlexIO module.
 373:../drivers/fsl_flexio.h ****  *
 374:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 375:../drivers/fsl_flexio.h **** */
 376:../drivers/fsl_flexio.h **** void FLEXIO_Reset(FLEXIO_Type *base);
 377:../drivers/fsl_flexio.h **** 
 378:../drivers/fsl_flexio.h **** /*!
 379:../drivers/fsl_flexio.h ****  * @brief Enables the FlexIO module operation.
 380:../drivers/fsl_flexio.h ****  *
 381:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 382:../drivers/fsl_flexio.h ****  * @param enable true to enable, false to disable.
 383:../drivers/fsl_flexio.h **** */
 384:../drivers/fsl_flexio.h **** static inline void FLEXIO_Enable(FLEXIO_Type *base, bool enable)
 385:../drivers/fsl_flexio.h **** {
 386:../drivers/fsl_flexio.h ****     if (enable)
 387:../drivers/fsl_flexio.h ****     {
 388:../drivers/fsl_flexio.h ****         base->CTRL |= FLEXIO_CTRL_FLEXEN_MASK;
 389:../drivers/fsl_flexio.h ****     }
 390:../drivers/fsl_flexio.h ****     else
 391:../drivers/fsl_flexio.h ****     {
 392:../drivers/fsl_flexio.h ****         base->CTRL &= ~FLEXIO_CTRL_FLEXEN_MASK;
  85              		.loc 2 392 0
  86 0002 8368     		ldr	r3, [r0, #8]
  87 0004 0122     		movs	r2, #1
  88 0006 9343     		bics	r3, r2
  89 0008 8360     		str	r3, [r0, #8]
  90              	.LVL7:
  91              	.LBE9:
  92              	.LBE8:
 111:../drivers/fsl_flexio.c ****     FLEXIO_Enable(base, false);
 112:../drivers/fsl_flexio.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 113:../drivers/fsl_flexio.c ****     CLOCK_DisableClock(s_flexioClocks[FLEXIO_GetInstance(base)]);
  93              		.loc 1 113 0
  94 000a FFF7FEFF 		bl	FLEXIO_GetInstance
  95              	.LVL8:
  96              	.LBB10:
  97              	.LBB11:
  98              		.file 3 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  53:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  54:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  55:../drivers/fsl_clock.h ****  * the driver.
  56:../drivers/fsl_clock.h ****  *
  57:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  58:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  59:../drivers/fsl_clock.h ****  */
  60:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  61:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  62:../drivers/fsl_clock.h **** #endif
  63:../drivers/fsl_clock.h **** 
  64:../drivers/fsl_clock.h **** /*******************************************************************************
  65:../drivers/fsl_clock.h ****  * Definitions
  66:../drivers/fsl_clock.h ****  ******************************************************************************/
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @name Driver version */
  69:../drivers/fsl_clock.h **** /*@{*/
  70:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.1.1. */
  71:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 1, 1))
  72:../drivers/fsl_clock.h **** /*@}*/
  73:../drivers/fsl_clock.h **** 
  74:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  75:../drivers/fsl_clock.h ****  *
  76:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  77:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  78:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  79:../drivers/fsl_clock.h ****  * @code
  80:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  81:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to clock driver.
  82:../drivers/fsl_clock.h ****  * @endcode
  83:../drivers/fsl_clock.h ****  *
  84:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up the
  85:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
  86:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  87:../drivers/fsl_clock.h ****  */
  88:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
  89:../drivers/fsl_clock.h **** 
  90:../drivers/fsl_clock.h **** /*! @brief The external XTAL32/EXTAL32/RTC_CLKIN clock frequency.
  91:../drivers/fsl_clock.h ****  *
  92:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
  93:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
  94:../drivers/fsl_clock.h ****  *
  95:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up
  96:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
  97:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  98:../drivers/fsl_clock.h ****  */
  99:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 100:../drivers/fsl_clock.h **** 
 101:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 102:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 103:../drivers/fsl_clock.h ****     {                  \
 104:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 105:../drivers/fsl_clock.h ****     }
 106:../drivers/fsl_clock.h **** 
 107:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 108:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 109:../drivers/fsl_clock.h ****     {               \
 110:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 111:../drivers/fsl_clock.h ****     }
 112:../drivers/fsl_clock.h **** 
 113:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 114:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 115:../drivers/fsl_clock.h ****     {               \
 116:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 117:../drivers/fsl_clock.h ****     }
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SPI. */
 120:../drivers/fsl_clock.h **** #define SPI_CLOCKS               \
 121:../drivers/fsl_clock.h ****     {                            \
 122:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1 \
 123:../drivers/fsl_clock.h ****     }
 124:../drivers/fsl_clock.h **** 
 125:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 126:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 127:../drivers/fsl_clock.h ****     {               \
 128:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 129:../drivers/fsl_clock.h ****     }
 130:../drivers/fsl_clock.h **** 
 131:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 132:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 133:../drivers/fsl_clock.h ****     {                                                                        \
 134:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 135:../drivers/fsl_clock.h ****     }
 136:../drivers/fsl_clock.h **** 
 137:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPUART. */
 138:../drivers/fsl_clock.h **** #define LPUART_CLOCKS                  \
 139:../drivers/fsl_clock.h ****     {                                  \
 140:../drivers/fsl_clock.h ****         kCLOCK_Lpuart0, kCLOCK_Lpuart1 \
 141:../drivers/fsl_clock.h ****     }
 142:../drivers/fsl_clock.h **** 
 143:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 144:../drivers/fsl_clock.h **** #define DAC_CLOCKS  \
 145:../drivers/fsl_clock.h ****     {               \
 146:../drivers/fsl_clock.h ****         kCLOCK_Dac0 \
 147:../drivers/fsl_clock.h ****     }
 148:../drivers/fsl_clock.h **** 
 149:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 150:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 151:../drivers/fsl_clock.h ****     {                 \
 152:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 153:../drivers/fsl_clock.h ****     }
 154:../drivers/fsl_clock.h **** 
 155:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 156:../drivers/fsl_clock.h **** #define ADC16_CLOCKS \
 157:../drivers/fsl_clock.h ****     {                \
 158:../drivers/fsl_clock.h ****         kCLOCK_Adc0  \
 159:../drivers/fsl_clock.h ****     }
 160:../drivers/fsl_clock.h **** 
 161:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXIO. */
 162:../drivers/fsl_clock.h **** #define FLEXIO_CLOCKS  \
 163:../drivers/fsl_clock.h ****     {                  \
 164:../drivers/fsl_clock.h ****         kCLOCK_Flexio0 \
 165:../drivers/fsl_clock.h ****     }
 166:../drivers/fsl_clock.h **** 
 167:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 168:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 169:../drivers/fsl_clock.h ****     {                \
 170:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 171:../drivers/fsl_clock.h ****     }
 172:../drivers/fsl_clock.h **** 
 173:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMA. */
 174:../drivers/fsl_clock.h **** #define DMA_CLOCKS  \
 175:../drivers/fsl_clock.h ****     {               \
 176:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 177:../drivers/fsl_clock.h ****     }
 178:../drivers/fsl_clock.h **** 
 179:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 180:../drivers/fsl_clock.h **** #define UART_CLOCKS                                      \
 181:../drivers/fsl_clock.h ****     {                                                    \
 182:../drivers/fsl_clock.h ****         kCLOCK_IpInvalid, kCLOCK_IpInvalid, kCLOCK_Uart2 \
 183:../drivers/fsl_clock.h ****     }
 184:../drivers/fsl_clock.h **** 
 185:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for TPM. */
 186:../drivers/fsl_clock.h **** #define TPM_CLOCKS                            \
 187:../drivers/fsl_clock.h ****     {                                         \
 188:../drivers/fsl_clock.h ****         kCLOCK_Tpm0, kCLOCK_Tpm1, kCLOCK_Tpm2 \
 189:../drivers/fsl_clock.h ****     }
 190:../drivers/fsl_clock.h **** 
 191:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 192:../drivers/fsl_clock.h **** #define I2C_CLOCKS               \
 193:../drivers/fsl_clock.h ****     {                            \
 194:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1 \
 195:../drivers/fsl_clock.h ****     }
 196:../drivers/fsl_clock.h **** 
 197:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 198:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 199:../drivers/fsl_clock.h ****     {               \
 200:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 201:../drivers/fsl_clock.h ****     }
 202:../drivers/fsl_clock.h **** 
 203:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 204:../drivers/fsl_clock.h **** #define CMP_CLOCKS  \
 205:../drivers/fsl_clock.h ****     {               \
 206:../drivers/fsl_clock.h ****         kCLOCK_Cmp0 \
 207:../drivers/fsl_clock.h ****     }
 208:../drivers/fsl_clock.h **** 
 209:../drivers/fsl_clock.h **** /*!
 210:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 211:../drivers/fsl_clock.h ****  */
 212:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 213:../drivers/fsl_clock.h **** 
 214:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 215:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 216:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 217:../drivers/fsl_clock.h **** 
 218:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC SYS_CLK
 219:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC SYS_CLK
 220:../drivers/fsl_clock.h **** #define SPI0_CLK_SRC BUS_CLK
 221:../drivers/fsl_clock.h **** #define SPI1_CLK_SRC SYS_CLK
 222:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 223:../drivers/fsl_clock.h **** 
 224:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 225:../drivers/fsl_clock.h **** typedef enum _clock_name
 226:../drivers/fsl_clock.h **** {
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 229:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 230:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 231:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 232:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 233:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 234:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 235:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 236:../drivers/fsl_clock.h **** 
 237:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 238:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 239:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 240:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 241:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 242:../drivers/fsl_clock.h **** 
 243:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 244:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 245:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 246:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 247:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 248:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 249:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 250:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 251:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 252:../drivers/fsl_clock.h **** 
 253:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 254:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 255:../drivers/fsl_clock.h **** 
 256:../drivers/fsl_clock.h **** } clock_name_t;
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 259:../drivers/fsl_clock.h **** 
 260:../drivers/fsl_clock.h ****  clock_gate_t definition:
 261:../drivers/fsl_clock.h **** 
 262:../drivers/fsl_clock.h ****  31                              16                              0
 263:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 264:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 265:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 266:../drivers/fsl_clock.h **** 
 267:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 268:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 271:../drivers/fsl_clock.h **** 
 272:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 273:../drivers/fsl_clock.h **** 
 274:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 275:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 276:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 277:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 278:../drivers/fsl_clock.h **** 
 279:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 280:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 281:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 282:../drivers/fsl_clock.h **** 
 283:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 284:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 285:../drivers/fsl_clock.h **** 
 286:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 287:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 288:../drivers/fsl_clock.h **** {
 289:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 290:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 291:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 292:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 293:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 294:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 295:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x1034U, 22U),
 296:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x1034U, 23U),
 297:../drivers/fsl_clock.h **** 
 298:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 299:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 300:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 301:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 302:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 303:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 304:../drivers/fsl_clock.h ****     kCLOCK_Lpuart0 = CLK_GATE_DEFINE(0x1038U, 20U),
 305:../drivers/fsl_clock.h ****     kCLOCK_Lpuart1 = CLK_GATE_DEFINE(0x1038U, 21U),
 306:../drivers/fsl_clock.h ****     kCLOCK_Flexio0 = CLK_GATE_DEFINE(0x1038U, 31U),
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 309:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 310:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 311:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 312:../drivers/fsl_clock.h ****     kCLOCK_Tpm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 313:../drivers/fsl_clock.h ****     kCLOCK_Tpm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 314:../drivers/fsl_clock.h ****     kCLOCK_Tpm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 315:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 316:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 317:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x103CU, 31U),
 318:../drivers/fsl_clock.h **** 
 319:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 8U),
 320:../drivers/fsl_clock.h **** } clock_ip_name_t;
 321:../drivers/fsl_clock.h **** 
 322:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 323:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 324:../drivers/fsl_clock.h **** {
 325:../drivers/fsl_clock.h ****     uint8_t er32kSrc; /*!< ERCLK32K source selection.   */
 326:../drivers/fsl_clock.h ****     uint32_t clkdiv1; /*!< SIM_CLKDIV1.                 */
 327:../drivers/fsl_clock.h **** } sim_clock_config_t;
 328:../drivers/fsl_clock.h **** 
 329:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 330:../drivers/fsl_clock.h **** enum _osc_cap_load
 331:../drivers/fsl_clock.h **** {
 332:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 333:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 334:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 335:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 336:../drivers/fsl_clock.h **** };
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 339:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 342:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 343:../drivers/fsl_clock.h **** };
 344:../drivers/fsl_clock.h **** 
 345:../drivers/fsl_clock.h **** /*! @brief The OSC configuration for OSCERCLK. */
 346:../drivers/fsl_clock.h **** typedef struct _oscer_config
 347:../drivers/fsl_clock.h **** {
 348:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of \ref _oscer_enable_mode. */
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h **** } oscer_config_t;
 351:../drivers/fsl_clock.h **** 
 352:../drivers/fsl_clock.h **** /*! @brief The OSC work mode. */
 353:../drivers/fsl_clock.h **** typedef enum _osc_mode
 354:../drivers/fsl_clock.h **** {
 355:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U,                                            /*!< Use external clock.   */
 356:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK,                    /*!< Oscillator low power. */
 357:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = MCG_C2_EREFS0_MASK | MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 358:../drivers/fsl_clock.h **** } osc_mode_t;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** /*!
 361:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 362:../drivers/fsl_clock.h ****  *
 363:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 364:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 365:../drivers/fsl_clock.h ****  * according to the board settings:
 366:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 367:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 368:../drivers/fsl_clock.h ****  */
 369:../drivers/fsl_clock.h **** typedef struct _osc_config
 370:../drivers/fsl_clock.h **** {
 371:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 372:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 373:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 374:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 375:../drivers/fsl_clock.h **** } osc_config_t;
 376:../drivers/fsl_clock.h **** 
 377:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock source selection. */
 378:../drivers/fsl_clock.h **** typedef enum _mcglite_clkout_src
 379:../drivers/fsl_clock.h **** {
 380:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcHirc, /*!< MCGOUTCLK source is HIRC */
 381:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcLirc, /*!< MCGOUTCLK source is LIRC */
 382:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcExt,  /*!< MCGOUTCLK source is external clock source */
 383:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcReserved
 384:../drivers/fsl_clock.h **** } mcglite_clkout_src_t;
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h **** /*! @brief MCG_Lite LIRC select. */
 387:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_mode
 388:../drivers/fsl_clock.h **** {
 389:../drivers/fsl_clock.h ****     kMCGLITE_Lirc2M, /*!< Slow internal reference(LIRC) 2 MHz clock selected */
 390:../drivers/fsl_clock.h ****     kMCGLITE_Lirc8M, /*!< Slow internal reference(LIRC) 8 MHz clock selected */
 391:../drivers/fsl_clock.h **** } mcglite_lirc_mode_t;
 392:../drivers/fsl_clock.h **** 
 393:../drivers/fsl_clock.h **** /*! @brief MCG_Lite divider factor selection for clock source*/
 394:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_div
 395:../drivers/fsl_clock.h **** {
 396:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy1 = 0U, /*!< Divider is 1    */
 397:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy2,      /*!< Divider is 2    */
 398:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy4,      /*!< Divider is 4    */
 399:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy8,      /*!< Divider is 8    */
 400:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy16,     /*!< Divider is 16   */
 401:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy32,     /*!< Divider is 32   */
 402:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy64,     /*!< Divider is 64   */
 403:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy128     /*!< Divider is 128  */
 404:../drivers/fsl_clock.h **** } mcglite_lirc_div_t;
 405:../drivers/fsl_clock.h **** 
 406:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock mode definitions */
 407:../drivers/fsl_clock.h **** typedef enum _mcglite_mode
 408:../drivers/fsl_clock.h **** {
 409:../drivers/fsl_clock.h ****     kMCGLITE_ModeHirc48M, /*!< Clock mode is HIRC 48 M  */
 410:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc8M,  /*!< Clock mode is LIRC 8 M   */
 411:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc2M,  /*!< Clock mode is LIRC 2 M   */
 412:../drivers/fsl_clock.h ****     kMCGLITE_ModeExt,     /*!< Clock mode is EXT       */
 413:../drivers/fsl_clock.h ****     kMCGLITE_ModeError    /*!< Unknown mode            */
 414:../drivers/fsl_clock.h **** } mcglite_mode_t;
 415:../drivers/fsl_clock.h **** 
 416:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 417:../drivers/fsl_clock.h **** enum _mcglite_irclk_enable_mode
 418:../drivers/fsl_clock.h **** {
 419:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 420:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 421:../drivers/fsl_clock.h **** };
 422:../drivers/fsl_clock.h **** 
 423:../drivers/fsl_clock.h **** /*! @brief MCG_Lite configure structure for mode change. */
 424:../drivers/fsl_clock.h **** typedef struct _mcglite_config
 425:../drivers/fsl_clock.h **** {
 426:../drivers/fsl_clock.h ****     mcglite_clkout_src_t outSrc;  /*!< MCGOUT clock select.                */
 427:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode;      /*!< MCGIRCLK enable mode, OR'ed value of _mcglite_irclk_enable_m
 428:../drivers/fsl_clock.h ****     mcglite_lirc_mode_t ircs;     /*!< MCG_C2[IRCS].                       */
 429:../drivers/fsl_clock.h ****     mcglite_lirc_div_t fcrdiv;    /*!< MCG_SC[FCRDIV].                     */
 430:../drivers/fsl_clock.h ****     mcglite_lirc_div_t lircDiv2;  /*!< MCG_MC[LIRC_DIV2].                  */
 431:../drivers/fsl_clock.h ****     bool hircEnableInNotHircMode; /*!< HIRC enable when not in HIRC mode.  */
 432:../drivers/fsl_clock.h **** } mcglite_config_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*******************************************************************************
 435:../drivers/fsl_clock.h ****  * API
 436:../drivers/fsl_clock.h ****  ******************************************************************************/
 437:../drivers/fsl_clock.h **** 
 438:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 439:../drivers/fsl_clock.h **** extern "C" {
 440:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*!
 443:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 444:../drivers/fsl_clock.h ****  *
 445:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 446:../drivers/fsl_clock.h ****  */
 447:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 448:../drivers/fsl_clock.h **** {
 449:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 450:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 451:../drivers/fsl_clock.h **** }
 452:../drivers/fsl_clock.h **** 
 453:../drivers/fsl_clock.h **** /*!
 454:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 455:../drivers/fsl_clock.h ****  *
 456:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 457:../drivers/fsl_clock.h ****  */
 458:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 459:../drivers/fsl_clock.h **** {
 460:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 461:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
  99              		.loc 3 461 0
 100 000e 034A     		ldr	r2, .L8
 101 0010 1368     		ldr	r3, [r2]
 102 0012 5B00     		lsls	r3, r3, #1
 103 0014 5B08     		lsrs	r3, r3, #1
 104 0016 1360     		str	r3, [r2]
 105              	.LVL9:
 106              	.LBE11:
 107              	.LBE10:
 114:../drivers/fsl_flexio.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 115:../drivers/fsl_flexio.c **** }
 108              		.loc 1 115 0
 109              		@ sp needed
 110 0018 10BD     		pop	{r4, pc}
 111              	.L9:
 112 001a C046     		.align	2
 113              	.L8:
 114 001c 38800440 		.word	1074036792
 115              		.cfi_endproc
 116              	.LFE69:
 118              		.section	.text.FLEXIO_GetDefaultConfig,"ax",%progbits
 119              		.align	1
 120              		.global	FLEXIO_GetDefaultConfig
 121              		.syntax unified
 122              		.code	16
 123              		.thumb_func
 124              		.fpu softvfp
 126              	FLEXIO_GetDefaultConfig:
 127              	.LFB70:
 116:../drivers/fsl_flexio.c **** 
 117:../drivers/fsl_flexio.c **** void FLEXIO_GetDefaultConfig(flexio_config_t *userConfig)
 118:../drivers/fsl_flexio.c **** {
 128              		.loc 1 118 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133              	.LVL10:
 119:../drivers/fsl_flexio.c ****     assert(userConfig);
 120:../drivers/fsl_flexio.c **** 
 121:../drivers/fsl_flexio.c ****     userConfig->enableFlexio = true;
 134              		.loc 1 121 0
 135 0000 0122     		movs	r2, #1
 136 0002 0270     		strb	r2, [r0]
 122:../drivers/fsl_flexio.c ****     userConfig->enableInDoze = false;
 137              		.loc 1 122 0
 138 0004 0023     		movs	r3, #0
 139 0006 4370     		strb	r3, [r0, #1]
 123:../drivers/fsl_flexio.c ****     userConfig->enableInDebug = true;
 140              		.loc 1 123 0
 141 0008 8270     		strb	r2, [r0, #2]
 124:../drivers/fsl_flexio.c ****     userConfig->enableFastAccess = false;
 142              		.loc 1 124 0
 143 000a C370     		strb	r3, [r0, #3]
 125:../drivers/fsl_flexio.c **** }
 144              		.loc 1 125 0
 145              		@ sp needed
 146 000c 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE70:
 150              		.section	.text.FLEXIO_Reset,"ax",%progbits
 151              		.align	1
 152              		.global	FLEXIO_Reset
 153              		.syntax unified
 154              		.code	16
 155              		.thumb_func
 156              		.fpu softvfp
 158              	FLEXIO_Reset:
 159              	.LFB71:
 126:../drivers/fsl_flexio.c **** 
 127:../drivers/fsl_flexio.c **** void FLEXIO_Reset(FLEXIO_Type *base)
 128:../drivers/fsl_flexio.c **** {
 160              		.loc 1 128 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165              	.LVL11:
 129:../drivers/fsl_flexio.c ****     /*do software reset, software reset operation affect all other FLEXIO registers except CTRL*/
 130:../drivers/fsl_flexio.c ****     base->CTRL |= FLEXIO_CTRL_SWRST_MASK;
 166              		.loc 1 130 0
 167 0000 8368     		ldr	r3, [r0, #8]
 168 0002 0222     		movs	r2, #2
 169 0004 1343     		orrs	r3, r2
 170 0006 8360     		str	r3, [r0, #8]
 131:../drivers/fsl_flexio.c ****     base->CTRL = 0;
 171              		.loc 1 131 0
 172 0008 0023     		movs	r3, #0
 173 000a 8360     		str	r3, [r0, #8]
 132:../drivers/fsl_flexio.c **** }
 174              		.loc 1 132 0
 175              		@ sp needed
 176 000c 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE71:
 180              		.section	.text.FLEXIO_Init,"ax",%progbits
 181              		.align	1
 182              		.global	FLEXIO_Init
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 186              		.fpu softvfp
 188              	FLEXIO_Init:
 189              	.LFB68:
  88:../drivers/fsl_flexio.c ****     uint32_t ctrlReg = 0;
 190              		.loc 1 88 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL12:
 195 0000 70B5     		push	{r4, r5, r6, lr}
 196              		.cfi_def_cfa_offset 16
 197              		.cfi_offset 4, -16
 198              		.cfi_offset 5, -12
 199              		.cfi_offset 6, -8
 200              		.cfi_offset 14, -4
 201 0002 0400     		movs	r4, r0
 202 0004 0D00     		movs	r5, r1
 203              	.LVL13:
  92:../drivers/fsl_flexio.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 204              		.loc 1 92 0
 205 0006 FFF7FEFF 		bl	FLEXIO_GetInstance
 206              	.LVL14:
 207              	.LBB12:
 208              	.LBB13:
 450:../drivers/fsl_clock.h **** }
 209              		.loc 3 450 0
 210 000a 104A     		ldr	r2, .L14
 211 000c 1168     		ldr	r1, [r2]
 212 000e 8023     		movs	r3, #128
 213 0010 1B06     		lsls	r3, r3, #24
 214 0012 0B43     		orrs	r3, r1
 215 0014 1360     		str	r3, [r2]
 216              	.LVL15:
 217              	.LBE13:
 218              	.LBE12:
  95:../drivers/fsl_flexio.c **** 
 219              		.loc 1 95 0
 220 0016 2000     		movs	r0, r4
 221 0018 FFF7FEFF 		bl	FLEXIO_Reset
 222              	.LVL16:
  97:../drivers/fsl_flexio.c ****     ctrlReg &= ~(FLEXIO_CTRL_DOZEN_MASK | FLEXIO_CTRL_DBGE_MASK | FLEXIO_CTRL_FASTACC_MASK | FLEXIO
 223              		.loc 1 97 0
 224 001c A268     		ldr	r2, [r4, #8]
 225              	.LVL17:
  98:../drivers/fsl_flexio.c ****     ctrlReg |= (FLEXIO_CTRL_DBGE(userConfig->enableInDebug) | FLEXIO_CTRL_FASTACC(userConfig->enabl
 226              		.loc 1 98 0
 227 001e 0C4B     		ldr	r3, .L14+4
 228 0020 1A40     		ands	r2, r3
 229              	.LVL18:
  99:../drivers/fsl_flexio.c ****                 FLEXIO_CTRL_FLEXEN(userConfig->enableFlexio));
 230              		.loc 1 99 0
 231 0022 AB78     		ldrb	r3, [r5, #2]
 232 0024 9B07     		lsls	r3, r3, #30
 233 0026 8021     		movs	r1, #128
 234 0028 C905     		lsls	r1, r1, #23
 235 002a 0B40     		ands	r3, r1
 236 002c E878     		ldrb	r0, [r5, #3]
 237 002e 8000     		lsls	r0, r0, #2
 238 0030 0421     		movs	r1, #4
 239 0032 0140     		ands	r1, r0
 240 0034 0B43     		orrs	r3, r1
 100:../drivers/fsl_flexio.c ****     if (!userConfig->enableInDoze)
 241              		.loc 1 100 0
 242 0036 2978     		ldrb	r1, [r5]
  99:../drivers/fsl_flexio.c ****                 FLEXIO_CTRL_FLEXEN(userConfig->enableFlexio));
 243              		.loc 1 99 0
 244 0038 0B43     		orrs	r3, r1
 245 003a 1343     		orrs	r3, r2
 246              	.LVL19:
 101:../drivers/fsl_flexio.c ****     {
 247              		.loc 1 101 0
 248 003c 6A78     		ldrb	r2, [r5, #1]
 249 003e 002A     		cmp	r2, #0
 250 0040 02D1     		bne	.L13
 103:../drivers/fsl_flexio.c ****     }
 251              		.loc 1 103 0
 252 0042 8022     		movs	r2, #128
 253 0044 1206     		lsls	r2, r2, #24
 254 0046 1343     		orrs	r3, r2
 255              	.LVL20:
 256              	.L13:
 106:../drivers/fsl_flexio.c **** }
 257              		.loc 1 106 0
 258 0048 A360     		str	r3, [r4, #8]
 107:../drivers/fsl_flexio.c **** 
 259              		.loc 1 107 0
 260              		@ sp needed
 261              	.LVL21:
 262              	.LVL22:
 263 004a 70BD     		pop	{r4, r5, r6, pc}
 264              	.L15:
 265              		.align	2
 266              	.L14:
 267 004c 38800440 		.word	1074036792
 268 0050 FAFFFF3F 		.word	1073741818
 269              		.cfi_endproc
 270              	.LFE68:
 272              		.section	.text.FLEXIO_GetShifterBufferAddress,"ax",%progbits
 273              		.align	1
 274              		.global	FLEXIO_GetShifterBufferAddress
 275              		.syntax unified
 276              		.code	16
 277              		.thumb_func
 278              		.fpu softvfp
 280              	FLEXIO_GetShifterBufferAddress:
 281              	.LFB72:
 133:../drivers/fsl_flexio.c **** 
 134:../drivers/fsl_flexio.c **** uint32_t FLEXIO_GetShifterBufferAddress(FLEXIO_Type *base, flexio_shifter_buffer_type_t type, uint8
 135:../drivers/fsl_flexio.c **** {
 282              		.loc 1 135 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287              	.LVL23:
 136:../drivers/fsl_flexio.c ****     assert(index < FLEXIO_SHIFTBUF_COUNT);
 137:../drivers/fsl_flexio.c **** 
 138:../drivers/fsl_flexio.c ****     uint32_t address = 0;
 139:../drivers/fsl_flexio.c **** 
 140:../drivers/fsl_flexio.c ****     switch (type)
 288              		.loc 1 140 0
 289 0000 0129     		cmp	r1, #1
 290 0002 0BD0     		beq	.L18
 291 0004 0029     		cmp	r1, #0
 292 0006 05D0     		beq	.L19
 293 0008 0229     		cmp	r1, #2
 294 000a 0BD0     		beq	.L20
 295 000c 0329     		cmp	r1, #3
 296 000e 0DD0     		beq	.L21
 138:../drivers/fsl_flexio.c **** 
 297              		.loc 1 138 0
 298 0010 0020     		movs	r0, #0
 299              	.LVL24:
 141:../drivers/fsl_flexio.c ****     {
 142:../drivers/fsl_flexio.c ****         case kFLEXIO_ShifterBuffer:
 143:../drivers/fsl_flexio.c ****             address = (uint32_t) & (base->SHIFTBUF[index]);
 144:../drivers/fsl_flexio.c ****             break;
 145:../drivers/fsl_flexio.c **** 
 146:../drivers/fsl_flexio.c ****         case kFLEXIO_ShifterBufferBitSwapped:
 147:../drivers/fsl_flexio.c ****             address = (uint32_t) & (base->SHIFTBUFBIS[index]);
 148:../drivers/fsl_flexio.c ****             break;
 149:../drivers/fsl_flexio.c **** 
 150:../drivers/fsl_flexio.c ****         case kFLEXIO_ShifterBufferByteSwapped:
 151:../drivers/fsl_flexio.c ****             address = (uint32_t) & (base->SHIFTBUFBYS[index]);
 152:../drivers/fsl_flexio.c ****             break;
 153:../drivers/fsl_flexio.c **** 
 154:../drivers/fsl_flexio.c ****         case kFLEXIO_ShifterBufferBitByteSwapped:
 155:../drivers/fsl_flexio.c ****             address = (uint32_t) & (base->SHIFTBUFBBS[index]);
 156:../drivers/fsl_flexio.c ****             break;
 157:../drivers/fsl_flexio.c **** 
 158:../drivers/fsl_flexio.c **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_BYTE_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUF
 159:../drivers/fsl_flexio.c ****         case kFLEXIO_ShifterBufferNibbleByteSwapped:
 160:../drivers/fsl_flexio.c ****             address = (uint32_t) & (base->SHIFTBUFNBS[index]);
 161:../drivers/fsl_flexio.c ****             break;
 162:../drivers/fsl_flexio.c **** 
 163:../drivers/fsl_flexio.c **** #endif
 164:../drivers/fsl_flexio.c **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_HALF_WORD_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFE
 165:../drivers/fsl_flexio.c ****         case kFLEXIO_ShifterBufferHalfWordSwapped:
 166:../drivers/fsl_flexio.c ****             address = (uint32_t) & (base->SHIFTBUFHWS[index]);
 167:../drivers/fsl_flexio.c ****             break;
 168:../drivers/fsl_flexio.c **** 
 169:../drivers/fsl_flexio.c **** #endif
 170:../drivers/fsl_flexio.c **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_N
 171:../drivers/fsl_flexio.c ****         case kFLEXIO_ShifterBufferNibbleSwapped:
 172:../drivers/fsl_flexio.c ****             address = (uint32_t) & (base->SHIFTBUFNIS[index]);
 173:../drivers/fsl_flexio.c ****             break;
 174:../drivers/fsl_flexio.c **** 
 175:../drivers/fsl_flexio.c **** #endif
 176:../drivers/fsl_flexio.c ****         default:
 177:../drivers/fsl_flexio.c ****             break;
 178:../drivers/fsl_flexio.c ****     }
 179:../drivers/fsl_flexio.c ****     return address;
 300              		.loc 1 179 0
 301 0012 02E0     		b	.L16
 302              	.LVL25:
 303              	.L19:
 143:../drivers/fsl_flexio.c ****             break;
 304              		.loc 1 143 0
 305 0014 8032     		adds	r2, r2, #128
 306              	.LVL26:
 307 0016 9200     		lsls	r2, r2, #2
 308 0018 8018     		adds	r0, r0, r2
 309              	.LVL27:
 310              	.L16:
 180:../drivers/fsl_flexio.c **** }
 311              		.loc 1 180 0
 312              		@ sp needed
 313 001a 7047     		bx	lr
 314              	.LVL28:
 315              	.L18:
 147:../drivers/fsl_flexio.c ****             break;
 316              		.loc 1 147 0
 317 001c A032     		adds	r2, r2, #160
 318              	.LVL29:
 319 001e 9200     		lsls	r2, r2, #2
 320 0020 8018     		adds	r0, r0, r2
 321              	.LVL30:
 148:../drivers/fsl_flexio.c **** 
 322              		.loc 1 148 0
 323 0022 FAE7     		b	.L16
 324              	.LVL31:
 325              	.L20:
 151:../drivers/fsl_flexio.c ****             break;
 326              		.loc 1 151 0
 327 0024 C032     		adds	r2, r2, #192
 328              	.LVL32:
 329 0026 9200     		lsls	r2, r2, #2
 330 0028 8018     		adds	r0, r0, r2
 331              	.LVL33:
 152:../drivers/fsl_flexio.c **** 
 332              		.loc 1 152 0
 333 002a F6E7     		b	.L16
 334              	.LVL34:
 335              	.L21:
 155:../drivers/fsl_flexio.c ****             break;
 336              		.loc 1 155 0
 337 002c E032     		adds	r2, r2, #224
 338              	.LVL35:
 339 002e 9200     		lsls	r2, r2, #2
 340 0030 8018     		adds	r0, r0, r2
 341              	.LVL36:
 156:../drivers/fsl_flexio.c **** 
 342              		.loc 1 156 0
 343 0032 F2E7     		b	.L16
 344              		.cfi_endproc
 345              	.LFE72:
 347              		.section	.text.FLEXIO_SetShifterConfig,"ax",%progbits
 348              		.align	1
 349              		.global	FLEXIO_SetShifterConfig
 350              		.syntax unified
 351              		.code	16
 352              		.thumb_func
 353              		.fpu softvfp
 355              	FLEXIO_SetShifterConfig:
 356              	.LFB73:
 181:../drivers/fsl_flexio.c **** 
 182:../drivers/fsl_flexio.c **** void FLEXIO_SetShifterConfig(FLEXIO_Type *base, uint8_t index, const flexio_shifter_config_t *shift
 183:../drivers/fsl_flexio.c **** {
 357              		.loc 1 183 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              	.LVL37:
 362 0000 30B5     		push	{r4, r5, lr}
 363              		.cfi_def_cfa_offset 12
 364              		.cfi_offset 4, -12
 365              		.cfi_offset 5, -8
 366              		.cfi_offset 14, -4
 184:../drivers/fsl_flexio.c ****     base->SHIFTCFG[index] = FLEXIO_SHIFTCFG_INSRC(shifterConfig->inputSource)
 367              		.loc 1 184 0
 368 0002 937B     		ldrb	r3, [r2, #14]
 369 0004 1B02     		lsls	r3, r3, #8
 370 0006 8024     		movs	r4, #128
 371 0008 6400     		lsls	r4, r4, #1
 372 000a 2340     		ands	r3, r4
 185:../drivers/fsl_flexio.c **** #if FSL_FEATURE_FLEXIO_HAS_PARALLEL_WIDTH
 186:../drivers/fsl_flexio.c ****                             | FLEXIO_SHIFTCFG_PWIDTH(shifterConfig->parallelWidth)
 187:../drivers/fsl_flexio.c **** #endif /* FSL_FEATURE_FLEXIO_HAS_PARALLEL_WIDTH */
 188:../drivers/fsl_flexio.c ****                             | FLEXIO_SHIFTCFG_SSTOP(shifterConfig->shifterStop) |
 373              		.loc 1 188 0
 374 000c D57B     		ldrb	r5, [r2, #15]
 375 000e 2D01     		lsls	r5, r5, #4
 376 0010 D03C     		subs	r4, r4, #208
 377 0012 2C40     		ands	r4, r5
 378 0014 2343     		orrs	r3, r4
 189:../drivers/fsl_flexio.c ****                             FLEXIO_SHIFTCFG_SSTART(shifterConfig->shifterStart);
 379              		.loc 1 189 0
 380 0016 157C     		ldrb	r5, [r2, #16]
 381 0018 0324     		movs	r4, #3
 382 001a 2C40     		ands	r4, r5
 188:../drivers/fsl_flexio.c ****                             FLEXIO_SHIFTCFG_SSTART(shifterConfig->shifterStart);
 383              		.loc 1 188 0
 384 001c 2343     		orrs	r3, r4
 184:../drivers/fsl_flexio.c **** #if FSL_FEATURE_FLEXIO_HAS_PARALLEL_WIDTH
 385              		.loc 1 184 0
 386 001e 0C00     		movs	r4, r1
 387 0020 4034     		adds	r4, r4, #64
 388 0022 A400     		lsls	r4, r4, #2
 389 0024 2350     		str	r3, [r4, r0]
 190:../drivers/fsl_flexio.c **** 
 191:../drivers/fsl_flexio.c ****     base->SHIFTCTL[index] =
 192:../drivers/fsl_flexio.c ****         FLEXIO_SHIFTCTL_TIMSEL(shifterConfig->timerSelect) | FLEXIO_SHIFTCTL_TIMPOL(shifterConfig->
 390              		.loc 1 192 0
 391 0026 1368     		ldr	r3, [r2]
 392 0028 1B06     		lsls	r3, r3, #24
 393 002a C024     		movs	r4, #192
 394 002c A404     		lsls	r4, r4, #18
 395 002e 2340     		ands	r3, r4
 396 0030 1479     		ldrb	r4, [r2, #4]
 397 0032 E405     		lsls	r4, r4, #23
 398 0034 8025     		movs	r5, #128
 399 0036 2D04     		lsls	r5, r5, #16
 400 0038 2C40     		ands	r4, r5
 401 003a 2343     		orrs	r3, r4
 193:../drivers/fsl_flexio.c ****         FLEXIO_SHIFTCTL_PINCFG(shifterConfig->pinConfig) | FLEXIO_SHIFTCTL_PINSEL(shifterConfig->pi
 402              		.loc 1 193 0
 403 003c 5479     		ldrb	r4, [r2, #5]
 404 003e 2404     		lsls	r4, r4, #16
 405 0040 C025     		movs	r5, #192
 406 0042 AD02     		lsls	r5, r5, #10
 407 0044 2C40     		ands	r4, r5
 192:../drivers/fsl_flexio.c ****         FLEXIO_SHIFTCTL_PINCFG(shifterConfig->pinConfig) | FLEXIO_SHIFTCTL_PINSEL(shifterConfig->pi
 408              		.loc 1 192 0
 409 0046 2343     		orrs	r3, r4
 410              		.loc 1 193 0
 411 0048 9468     		ldr	r4, [r2, #8]
 412 004a 2402     		lsls	r4, r4, #8
 413 004c E025     		movs	r5, #224
 414 004e ED00     		lsls	r5, r5, #3
 415 0050 2C40     		ands	r4, r5
 416 0052 2343     		orrs	r3, r4
 194:../drivers/fsl_flexio.c ****         FLEXIO_SHIFTCTL_PINPOL(shifterConfig->pinPolarity) | FLEXIO_SHIFTCTL_SMOD(shifterConfig->sh
 417              		.loc 1 194 0
 418 0054 157B     		ldrb	r5, [r2, #12]
 419 0056 ED01     		lsls	r5, r5, #7
 420 0058 FF24     		movs	r4, #255
 421 005a 2C40     		ands	r4, r5
 193:../drivers/fsl_flexio.c ****         FLEXIO_SHIFTCTL_PINCFG(shifterConfig->pinConfig) | FLEXIO_SHIFTCTL_PINSEL(shifterConfig->pi
 422              		.loc 1 193 0
 423 005c 2343     		orrs	r3, r4
 424              		.loc 1 194 0
 425 005e 547B     		ldrb	r4, [r2, #13]
 426 0060 0722     		movs	r2, #7
 427              	.LVL38:
 428 0062 2240     		ands	r2, r4
 429 0064 1343     		orrs	r3, r2
 191:../drivers/fsl_flexio.c ****         FLEXIO_SHIFTCTL_TIMSEL(shifterConfig->timerSelect) | FLEXIO_SHIFTCTL_TIMPOL(shifterConfig->
 430              		.loc 1 191 0
 431 0066 2031     		adds	r1, r1, #32
 432              	.LVL39:
 433 0068 8900     		lsls	r1, r1, #2
 434 006a 0B50     		str	r3, [r1, r0]
 195:../drivers/fsl_flexio.c **** }
 435              		.loc 1 195 0
 436              		@ sp needed
 437 006c 30BD     		pop	{r4, r5, pc}
 438              		.cfi_endproc
 439              	.LFE73:
 441              		.section	.text.FLEXIO_SetTimerConfig,"ax",%progbits
 442              		.align	1
 443              		.global	FLEXIO_SetTimerConfig
 444              		.syntax unified
 445              		.code	16
 446              		.thumb_func
 447              		.fpu softvfp
 449              	FLEXIO_SetTimerConfig:
 450              	.LFB74:
 196:../drivers/fsl_flexio.c **** 
 197:../drivers/fsl_flexio.c **** void FLEXIO_SetTimerConfig(FLEXIO_Type *base, uint8_t index, const flexio_timer_config_t *timerConf
 198:../drivers/fsl_flexio.c **** {
 451              		.loc 1 198 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              	.LVL40:
 456 0000 70B5     		push	{r4, r5, r6, lr}
 457              		.cfi_def_cfa_offset 16
 458              		.cfi_offset 4, -16
 459              		.cfi_offset 5, -12
 460              		.cfi_offset 6, -8
 461              		.cfi_offset 14, -4
 199:../drivers/fsl_flexio.c ****     base->TIMCFG[index] =
 200:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TIMOUT(timerConfig->timerOutput) | FLEXIO_TIMCFG_TIMDEC(timerConfig->timerDec
 462              		.loc 1 200 0
 463 0002 947B     		ldrb	r4, [r2, #14]
 464 0004 2406     		lsls	r4, r4, #24
 465 0006 C023     		movs	r3, #192
 466 0008 9B04     		lsls	r3, r3, #18
 467 000a 1C40     		ands	r4, r3
 468 000c D37B     		ldrb	r3, [r2, #15]
 469 000e 1B05     		lsls	r3, r3, #20
 470 0010 C025     		movs	r5, #192
 471 0012 AD03     		lsls	r5, r5, #14
 472 0014 2B40     		ands	r3, r5
 473 0016 1C43     		orrs	r4, r3
 201:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TIMRST(timerConfig->timerReset) | FLEXIO_TIMCFG_TIMDIS(timerConfig->timerDisa
 474              		.loc 1 201 0
 475 0018 137C     		ldrb	r3, [r2, #16]
 476 001a 1B04     		lsls	r3, r3, #16
 477 001c E025     		movs	r5, #224
 478 001e ED02     		lsls	r5, r5, #11
 479 0020 2B40     		ands	r3, r5
 200:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TIMRST(timerConfig->timerReset) | FLEXIO_TIMCFG_TIMDIS(timerConfig->timerDisa
 480              		.loc 1 200 0
 481 0022 1C43     		orrs	r4, r3
 482              		.loc 1 201 0
 483 0024 537C     		ldrb	r3, [r2, #17]
 484 0026 1B03     		lsls	r3, r3, #12
 485 0028 E025     		movs	r5, #224
 486 002a ED01     		lsls	r5, r5, #7
 487 002c 2B40     		ands	r3, r5
 488 002e 1C43     		orrs	r4, r3
 202:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TIMENA(timerConfig->timerEnable) | FLEXIO_TIMCFG_TSTOP(timerConfig->timerStop
 489              		.loc 1 202 0
 490 0030 937C     		ldrb	r3, [r2, #18]
 491 0032 1B02     		lsls	r3, r3, #8
 492 0034 E025     		movs	r5, #224
 493 0036 ED00     		lsls	r5, r5, #3
 494 0038 2B40     		ands	r3, r5
 201:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TIMRST(timerConfig->timerReset) | FLEXIO_TIMCFG_TIMDIS(timerConfig->timerDisa
 495              		.loc 1 201 0
 496 003a 1C43     		orrs	r4, r3
 497              		.loc 1 202 0
 498 003c D67C     		ldrb	r6, [r2, #19]
 499 003e 3601     		lsls	r6, r6, #4
 500 0040 3023     		movs	r3, #48
 501 0042 3340     		ands	r3, r6
 502 0044 1C43     		orrs	r4, r3
 203:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TSTART(timerConfig->timerStart);
 503              		.loc 1 203 0
 504 0046 167D     		ldrb	r6, [r2, #20]
 505 0048 7600     		lsls	r6, r6, #1
 506 004a 0223     		movs	r3, #2
 507 004c 3340     		ands	r3, r6
 202:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TIMENA(timerConfig->timerEnable) | FLEXIO_TIMCFG_TSTOP(timerConfig->timerStop
 508              		.loc 1 202 0
 509 004e 1C43     		orrs	r4, r3
 199:../drivers/fsl_flexio.c ****         FLEXIO_TIMCFG_TIMOUT(timerConfig->timerOutput) | FLEXIO_TIMCFG_TIMDEC(timerConfig->timerDec
 510              		.loc 1 199 0
 511 0050 0B00     		movs	r3, r1
 512 0052 2133     		adds	r3, r3, #33
 513 0054 FF33     		adds	r3, r3, #255
 514 0056 9B00     		lsls	r3, r3, #2
 515 0058 1C50     		str	r4, [r3, r0]
 204:../drivers/fsl_flexio.c **** 
 205:../drivers/fsl_flexio.c ****     base->TIMCMP[index] = FLEXIO_TIMCMP_CMP(timerConfig->timerCompare);
 516              		.loc 1 205 0
 517 005a 9369     		ldr	r3, [r2, #24]
 518 005c 1B04     		lsls	r3, r3, #16
 519 005e 1B0C     		lsrs	r3, r3, #16
 520 0060 0C00     		movs	r4, r1
 521 0062 4134     		adds	r4, r4, #65
 522 0064 FF34     		adds	r4, r4, #255
 523 0066 A400     		lsls	r4, r4, #2
 524 0068 2350     		str	r3, [r4, r0]
 206:../drivers/fsl_flexio.c **** 
 207:../drivers/fsl_flexio.c ****     base->TIMCTL[index] = FLEXIO_TIMCTL_TRGSEL(timerConfig->triggerSelect) |
 525              		.loc 1 207 0
 526 006a 1368     		ldr	r3, [r2]
 527 006c 1B06     		lsls	r3, r3, #24
 528 006e F024     		movs	r4, #240
 529 0070 2405     		lsls	r4, r4, #20
 530 0072 2340     		ands	r3, r4
 208:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_TRGPOL(timerConfig->triggerPolarity) |
 531              		.loc 1 208 0
 532 0074 1479     		ldrb	r4, [r2, #4]
 533 0076 E405     		lsls	r4, r4, #23
 534 0078 8026     		movs	r6, #128
 535 007a 3604     		lsls	r6, r6, #16
 536 007c 3440     		ands	r4, r6
 207:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_TRGPOL(timerConfig->triggerPolarity) |
 537              		.loc 1 207 0
 538 007e 2343     		orrs	r3, r4
 209:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_TRGSRC(timerConfig->triggerSource) |
 539              		.loc 1 209 0
 540 0080 5479     		ldrb	r4, [r2, #5]
 541 0082 A405     		lsls	r4, r4, #22
 542 0084 8026     		movs	r6, #128
 543 0086 F603     		lsls	r6, r6, #15
 544 0088 3440     		ands	r4, r6
 208:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_TRGPOL(timerConfig->triggerPolarity) |
 545              		.loc 1 208 0
 546 008a 2343     		orrs	r3, r4
 210:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_PINCFG(timerConfig->pinConfig) | FLEXIO_TIMCTL_PINSEL(timer
 547              		.loc 1 210 0
 548 008c 9479     		ldrb	r4, [r2, #6]
 549 008e 2404     		lsls	r4, r4, #16
 550 0090 C026     		movs	r6, #192
 551 0092 B602     		lsls	r6, r6, #10
 552 0094 3440     		ands	r4, r6
 209:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_TRGSRC(timerConfig->triggerSource) |
 553              		.loc 1 209 0
 554 0096 2343     		orrs	r3, r4
 555              		.loc 1 210 0
 556 0098 9468     		ldr	r4, [r2, #8]
 557 009a 2402     		lsls	r4, r4, #8
 558 009c 2C40     		ands	r4, r5
 559 009e 2343     		orrs	r3, r4
 211:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_PINPOL(timerConfig->pinPolarity) | FLEXIO_TIMCTL_TIMOD(time
 560              		.loc 1 211 0
 561 00a0 157B     		ldrb	r5, [r2, #12]
 562 00a2 ED01     		lsls	r5, r5, #7
 563 00a4 FF24     		movs	r4, #255
 564 00a6 2C40     		ands	r4, r5
 210:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_PINCFG(timerConfig->pinConfig) | FLEXIO_TIMCTL_PINSEL(timer
 565              		.loc 1 210 0
 566 00a8 2343     		orrs	r3, r4
 567              		.loc 1 211 0
 568 00aa 547B     		ldrb	r4, [r2, #13]
 569 00ac 0322     		movs	r2, #3
 570              	.LVL41:
 571 00ae 2240     		ands	r2, r4
 572 00b0 1343     		orrs	r3, r2
 207:../drivers/fsl_flexio.c ****                           FLEXIO_TIMCTL_TRGPOL(timerConfig->triggerPolarity) |
 573              		.loc 1 207 0
 574 00b2 0131     		adds	r1, r1, #1
 575              	.LVL42:
 576 00b4 FF31     		adds	r1, r1, #255
 577 00b6 8900     		lsls	r1, r1, #2
 578 00b8 0B50     		str	r3, [r1, r0]
 212:../drivers/fsl_flexio.c **** }
 579              		.loc 1 212 0
 580              		@ sp needed
 581 00ba 70BD     		pop	{r4, r5, r6, pc}
 582              		.cfi_endproc
 583              	.LFE74:
 585              		.section	.text.FLEXIO_RegisterHandleIRQ,"ax",%progbits
 586              		.align	1
 587              		.global	FLEXIO_RegisterHandleIRQ
 588              		.syntax unified
 589              		.code	16
 590              		.thumb_func
 591              		.fpu softvfp
 593              	FLEXIO_RegisterHandleIRQ:
 594              	.LFB75:
 213:../drivers/fsl_flexio.c **** 
 214:../drivers/fsl_flexio.c **** status_t FLEXIO_RegisterHandleIRQ(void *base, void *handle, flexio_isr_t isr)
 215:../drivers/fsl_flexio.c **** {
 595              		.loc 1 215 0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              	.LVL43:
 600 0000 70B5     		push	{r4, r5, r6, lr}
 601              		.cfi_def_cfa_offset 16
 602              		.cfi_offset 4, -16
 603              		.cfi_offset 5, -12
 604              		.cfi_offset 6, -8
 605              		.cfi_offset 14, -4
 606              	.LVL44:
 216:../drivers/fsl_flexio.c ****     assert(base);
 217:../drivers/fsl_flexio.c ****     assert(handle);
 218:../drivers/fsl_flexio.c ****     assert(isr);
 219:../drivers/fsl_flexio.c **** 
 220:../drivers/fsl_flexio.c ****     uint8_t index = 0;
 221:../drivers/fsl_flexio.c **** 
 222:../drivers/fsl_flexio.c ****     /* Find the an empty handle pointer to store the handle. */
 223:../drivers/fsl_flexio.c ****     for (index = 0; index < FLEXIO_HANDLE_COUNT; index++)
 607              		.loc 1 223 0
 608 0002 0023     		movs	r3, #0
 609              	.LVL45:
 610              	.L27:
 611              		.loc 1 223 0 is_stmt 0 discriminator 1
 612 0004 012B     		cmp	r3, #1
 613 0006 0DD8     		bhi	.L29
 224:../drivers/fsl_flexio.c ****     {
 225:../drivers/fsl_flexio.c ****         if (s_flexioHandle[index] == NULL)
 614              		.loc 1 225 0 is_stmt 1
 615 0008 9C00     		lsls	r4, r3, #2
 616 000a 094E     		ldr	r6, .L35
 617 000c A459     		ldr	r4, [r4, r6]
 618 000e 002C     		cmp	r4, #0
 619 0010 02D0     		beq	.L33
 223:../drivers/fsl_flexio.c ****     {
 620              		.loc 1 223 0 discriminator 2
 621 0012 0133     		adds	r3, r3, #1
 622              	.LVL46:
 623 0014 DBB2     		uxtb	r3, r3
 624              	.LVL47:
 625 0016 F5E7     		b	.L27
 626              	.L33:
 226:../drivers/fsl_flexio.c ****         {
 227:../drivers/fsl_flexio.c ****             /* Register FLEXIO simulated driver base, handle and isr. */
 228:../drivers/fsl_flexio.c ****             s_flexioType[index] = base;
 627              		.loc 1 228 0
 628 0018 9D00     		lsls	r5, r3, #2
 629 001a 064C     		ldr	r4, .L35+4
 630 001c 2851     		str	r0, [r5, r4]
 229:../drivers/fsl_flexio.c ****             s_flexioHandle[index] = handle;
 631              		.loc 1 229 0
 632 001e A951     		str	r1, [r5, r6]
 230:../drivers/fsl_flexio.c ****             s_flexioIsr[index] = isr;
 633              		.loc 1 230 0
 634 0020 0549     		ldr	r1, .L35+8
 635              	.LVL48:
 636 0022 6A50     		str	r2, [r5, r1]
 637              	.LVL49:
 638              	.L29:
 231:../drivers/fsl_flexio.c ****             break;
 232:../drivers/fsl_flexio.c ****         }
 233:../drivers/fsl_flexio.c ****     }
 234:../drivers/fsl_flexio.c **** 
 235:../drivers/fsl_flexio.c ****     if (index == FLEXIO_HANDLE_COUNT)
 639              		.loc 1 235 0
 640 0024 022B     		cmp	r3, #2
 641 0026 01D0     		beq	.L34
 236:../drivers/fsl_flexio.c ****     {
 237:../drivers/fsl_flexio.c ****         return kStatus_OutOfRange;
 238:../drivers/fsl_flexio.c ****     }
 239:../drivers/fsl_flexio.c ****     else
 240:../drivers/fsl_flexio.c ****     {
 241:../drivers/fsl_flexio.c ****         return kStatus_Success;
 642              		.loc 1 241 0
 643 0028 0020     		movs	r0, #0
 644              	.LVL50:
 645              	.L26:
 242:../drivers/fsl_flexio.c ****     }
 243:../drivers/fsl_flexio.c **** }
 646              		.loc 1 243 0
 647              		@ sp needed
 648 002a 70BD     		pop	{r4, r5, r6, pc}
 649              	.LVL51:
 650              	.L34:
 237:../drivers/fsl_flexio.c ****     }
 651              		.loc 1 237 0
 652 002c 0320     		movs	r0, #3
 653              	.LVL52:
 654 002e FCE7     		b	.L26
 655              	.L36:
 656              		.align	2
 657              	.L35:
 658 0030 00000000 		.word	.LANCHOR0
 659 0034 00000000 		.word	.LANCHOR1
 660 0038 00000000 		.word	.LANCHOR2
 661              		.cfi_endproc
 662              	.LFE75:
 664              		.section	.text.FLEXIO_UnregisterHandleIRQ,"ax",%progbits
 665              		.align	1
 666              		.global	FLEXIO_UnregisterHandleIRQ
 667              		.syntax unified
 668              		.code	16
 669              		.thumb_func
 670              		.fpu softvfp
 672              	FLEXIO_UnregisterHandleIRQ:
 673              	.LFB76:
 244:../drivers/fsl_flexio.c **** 
 245:../drivers/fsl_flexio.c **** status_t FLEXIO_UnregisterHandleIRQ(void *base)
 246:../drivers/fsl_flexio.c **** {
 674              		.loc 1 246 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              	.LVL53:
 679 0000 10B5     		push	{r4, lr}
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 4, -8
 682              		.cfi_offset 14, -4
 683              	.LVL54:
 247:../drivers/fsl_flexio.c ****     assert(base);
 248:../drivers/fsl_flexio.c **** 
 249:../drivers/fsl_flexio.c ****     uint8_t index = 0;
 250:../drivers/fsl_flexio.c **** 
 251:../drivers/fsl_flexio.c ****     /* Find the index from base address mappings. */
 252:../drivers/fsl_flexio.c ****     for (index = 0; index < FLEXIO_HANDLE_COUNT; index++)
 684              		.loc 1 252 0
 685 0002 0023     		movs	r3, #0
 686              	.LVL55:
 687              	.L38:
 688              		.loc 1 252 0 is_stmt 0 discriminator 1
 689 0004 012B     		cmp	r3, #1
 690 0006 0ED8     		bhi	.L40
 253:../drivers/fsl_flexio.c ****     {
 254:../drivers/fsl_flexio.c ****         if (s_flexioType[index] == base)
 691              		.loc 1 254 0 is_stmt 1
 692 0008 9A00     		lsls	r2, r3, #2
 693 000a 0A49     		ldr	r1, .L46
 694 000c 5258     		ldr	r2, [r2, r1]
 695 000e 8242     		cmp	r2, r0
 696 0010 02D0     		beq	.L44
 252:../drivers/fsl_flexio.c ****     {
 697              		.loc 1 252 0 discriminator 2
 698 0012 0133     		adds	r3, r3, #1
 699              	.LVL56:
 700 0014 DBB2     		uxtb	r3, r3
 701              	.LVL57:
 702 0016 F5E7     		b	.L38
 703              	.L44:
 255:../drivers/fsl_flexio.c ****         {
 256:../drivers/fsl_flexio.c ****             /* Unregister FLEXIO simulated driver handle and isr. */
 257:../drivers/fsl_flexio.c ****             s_flexioType[index] = NULL;
 704              		.loc 1 257 0
 705 0018 9C00     		lsls	r4, r3, #2
 706 001a 0022     		movs	r2, #0
 707 001c 6250     		str	r2, [r4, r1]
 258:../drivers/fsl_flexio.c ****             s_flexioHandle[index] = NULL;
 708              		.loc 1 258 0
 709 001e 0649     		ldr	r1, .L46+4
 710 0020 6250     		str	r2, [r4, r1]
 259:../drivers/fsl_flexio.c ****             s_flexioIsr[index] = NULL;
 711              		.loc 1 259 0
 712 0022 0649     		ldr	r1, .L46+8
 713 0024 6250     		str	r2, [r4, r1]
 714              	.L40:
 260:../drivers/fsl_flexio.c ****             break;
 261:../drivers/fsl_flexio.c ****         }
 262:../drivers/fsl_flexio.c ****     }
 263:../drivers/fsl_flexio.c **** 
 264:../drivers/fsl_flexio.c ****     if (index == FLEXIO_HANDLE_COUNT)
 715              		.loc 1 264 0
 716 0026 022B     		cmp	r3, #2
 717 0028 01D0     		beq	.L45
 265:../drivers/fsl_flexio.c ****     {
 266:../drivers/fsl_flexio.c ****         return kStatus_OutOfRange;
 267:../drivers/fsl_flexio.c ****     }
 268:../drivers/fsl_flexio.c ****     else
 269:../drivers/fsl_flexio.c ****     {
 270:../drivers/fsl_flexio.c ****         return kStatus_Success;
 718              		.loc 1 270 0
 719 002a 0020     		movs	r0, #0
 720              	.LVL58:
 721              	.L37:
 271:../drivers/fsl_flexio.c ****     }
 272:../drivers/fsl_flexio.c **** }
 722              		.loc 1 272 0
 723              		@ sp needed
 724 002c 10BD     		pop	{r4, pc}
 725              	.LVL59:
 726              	.L45:
 266:../drivers/fsl_flexio.c ****     }
 727              		.loc 1 266 0
 728 002e 0320     		movs	r0, #3
 729              	.LVL60:
 730 0030 FCE7     		b	.L37
 731              	.L47:
 732 0032 C046     		.align	2
 733              	.L46:
 734 0034 00000000 		.word	.LANCHOR1
 735 0038 00000000 		.word	.LANCHOR0
 736 003c 00000000 		.word	.LANCHOR2
 737              		.cfi_endproc
 738              	.LFE76:
 740              		.section	.text.FLEXIO_CommonIRQHandler,"ax",%progbits
 741              		.align	1
 742              		.global	FLEXIO_CommonIRQHandler
 743              		.syntax unified
 744              		.code	16
 745              		.thumb_func
 746              		.fpu softvfp
 748              	FLEXIO_CommonIRQHandler:
 749              	.LFB77:
 273:../drivers/fsl_flexio.c **** 
 274:../drivers/fsl_flexio.c **** void FLEXIO_CommonIRQHandler(void)
 275:../drivers/fsl_flexio.c **** {
 750              		.loc 1 275 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754 0000 10B5     		push	{r4, lr}
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 4, -8
 757              		.cfi_offset 14, -4
 758              	.LVL61:
 276:../drivers/fsl_flexio.c ****     uint8_t index;
 277:../drivers/fsl_flexio.c **** 
 278:../drivers/fsl_flexio.c ****     for (index = 0; index < FLEXIO_HANDLE_COUNT; index++)
 759              		.loc 1 278 0
 760 0002 0024     		movs	r4, #0
 761 0004 01E0     		b	.L49
 762              	.LVL62:
 763              	.L50:
 764              		.loc 1 278 0 is_stmt 0 discriminator 2
 765 0006 0134     		adds	r4, r4, #1
 766              	.LVL63:
 767 0008 E4B2     		uxtb	r4, r4
 768              	.LVL64:
 769              	.L49:
 770              		.loc 1 278 0 discriminator 1
 771 000a 012C     		cmp	r4, #1
 772 000c 0AD8     		bhi	.L52
 279:../drivers/fsl_flexio.c ****     {
 280:../drivers/fsl_flexio.c ****         if (s_flexioHandle[index])
 773              		.loc 1 280 0 is_stmt 1
 774 000e A300     		lsls	r3, r4, #2
 775 0010 054A     		ldr	r2, .L53
 776 0012 9958     		ldr	r1, [r3, r2]
 777 0014 0029     		cmp	r1, #0
 778 0016 F6D0     		beq	.L50
 281:../drivers/fsl_flexio.c ****         {
 282:../drivers/fsl_flexio.c ****             s_flexioIsr[index](s_flexioType[index], s_flexioHandle[index]);
 779              		.loc 1 282 0
 780 0018 044A     		ldr	r2, .L53+4
 781 001a 9A58     		ldr	r2, [r3, r2]
 782 001c 0448     		ldr	r0, .L53+8
 783 001e 1858     		ldr	r0, [r3, r0]
 784 0020 9047     		blx	r2
 785              	.LVL65:
 786 0022 F0E7     		b	.L50
 787              	.L52:
 283:../drivers/fsl_flexio.c ****         }
 284:../drivers/fsl_flexio.c ****     }
 285:../drivers/fsl_flexio.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
 286:../drivers/fsl_flexio.c ****       exception return operation might vector to incorrect interrupt */
 287:../drivers/fsl_flexio.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
 288:../drivers/fsl_flexio.c ****     __DSB();
 289:../drivers/fsl_flexio.c **** #endif
 290:../drivers/fsl_flexio.c **** }
 788              		.loc 1 290 0
 789              		@ sp needed
 790              	.LVL66:
 791 0024 10BD     		pop	{r4, pc}
 792              	.L54:
 793 0026 C046     		.align	2
 794              	.L53:
 795 0028 00000000 		.word	.LANCHOR0
 796 002c 00000000 		.word	.LANCHOR2
 797 0030 00000000 		.word	.LANCHOR1
 798              		.cfi_endproc
 799              	.LFE77:
 801              		.section	.text.FLEXIO_DriverIRQHandler,"ax",%progbits
 802              		.align	1
 803              		.global	FLEXIO_DriverIRQHandler
 804              		.syntax unified
 805              		.code	16
 806              		.thumb_func
 807              		.fpu softvfp
 809              	FLEXIO_DriverIRQHandler:
 810              	.LFB78:
 291:../drivers/fsl_flexio.c **** 
 292:../drivers/fsl_flexio.c **** void FLEXIO_DriverIRQHandler(void)
 293:../drivers/fsl_flexio.c **** {
 811              		.loc 1 293 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815 0000 10B5     		push	{r4, lr}
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 4, -8
 818              		.cfi_offset 14, -4
 294:../drivers/fsl_flexio.c ****     FLEXIO_CommonIRQHandler();
 819              		.loc 1 294 0
 820 0002 FFF7FEFF 		bl	FLEXIO_CommonIRQHandler
 821              	.LVL67:
 295:../drivers/fsl_flexio.c **** }
 822              		.loc 1 295 0
 823              		@ sp needed
 824 0006 10BD     		pop	{r4, pc}
 825              		.cfi_endproc
 826              	.LFE78:
 828              		.section	.text.FLEXIO0_DriverIRQHandler,"ax",%progbits
 829              		.align	1
 830              		.global	FLEXIO0_DriverIRQHandler
 831              		.syntax unified
 832              		.code	16
 833              		.thumb_func
 834              		.fpu softvfp
 836              	FLEXIO0_DriverIRQHandler:
 837              	.LFB79:
 296:../drivers/fsl_flexio.c **** 
 297:../drivers/fsl_flexio.c **** void FLEXIO0_DriverIRQHandler(void)
 298:../drivers/fsl_flexio.c **** {
 838              		.loc 1 298 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842 0000 10B5     		push	{r4, lr}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 4, -8
 845              		.cfi_offset 14, -4
 299:../drivers/fsl_flexio.c ****     FLEXIO_CommonIRQHandler();
 846              		.loc 1 299 0
 847 0002 FFF7FEFF 		bl	FLEXIO_CommonIRQHandler
 848              	.LVL68:
 300:../drivers/fsl_flexio.c **** }
 849              		.loc 1 300 0
 850              		@ sp needed
 851 0006 10BD     		pop	{r4, pc}
 852              		.cfi_endproc
 853              	.LFE79:
 855              		.section	.text.FLEXIO1_DriverIRQHandler,"ax",%progbits
 856              		.align	1
 857              		.global	FLEXIO1_DriverIRQHandler
 858              		.syntax unified
 859              		.code	16
 860              		.thumb_func
 861              		.fpu softvfp
 863              	FLEXIO1_DriverIRQHandler:
 864              	.LFB80:
 301:../drivers/fsl_flexio.c **** 
 302:../drivers/fsl_flexio.c **** void FLEXIO1_DriverIRQHandler(void)
 303:../drivers/fsl_flexio.c **** {
 865              		.loc 1 303 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 0
 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869 0000 10B5     		push	{r4, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 4, -8
 872              		.cfi_offset 14, -4
 304:../drivers/fsl_flexio.c ****     FLEXIO_CommonIRQHandler();
 873              		.loc 1 304 0
 874 0002 FFF7FEFF 		bl	FLEXIO_CommonIRQHandler
 875              	.LVL69:
 305:../drivers/fsl_flexio.c **** }
 876              		.loc 1 305 0
 877              		@ sp needed
 878 0006 10BD     		pop	{r4, pc}
 879              		.cfi_endproc
 880              	.LFE80:
 882              		.section	.text.UART2_FLEXIO_DriverIRQHandler,"ax",%progbits
 883              		.align	1
 884              		.global	UART2_FLEXIO_DriverIRQHandler
 885              		.syntax unified
 886              		.code	16
 887              		.thumb_func
 888              		.fpu softvfp
 890              	UART2_FLEXIO_DriverIRQHandler:
 891              	.LFB81:
 306:../drivers/fsl_flexio.c **** 
 307:../drivers/fsl_flexio.c **** void UART2_FLEXIO_DriverIRQHandler(void)
 308:../drivers/fsl_flexio.c **** {
 892              		.loc 1 308 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896 0000 10B5     		push	{r4, lr}
 897              		.cfi_def_cfa_offset 8
 898              		.cfi_offset 4, -8
 899              		.cfi_offset 14, -4
 309:../drivers/fsl_flexio.c ****     FLEXIO_CommonIRQHandler();
 900              		.loc 1 309 0
 901 0002 FFF7FEFF 		bl	FLEXIO_CommonIRQHandler
 902              	.LVL70:
 310:../drivers/fsl_flexio.c **** }
 903              		.loc 1 310 0
 904              		@ sp needed
 905 0006 10BD     		pop	{r4, pc}
 906              		.cfi_endproc
 907              	.LFE81:
 909              		.global	s_flexioBases
 910              		.global	s_flexioClocks
 911              		.section	.bss.s_flexioHandle,"aw",%nobits
 912              		.align	2
 913              		.set	.LANCHOR0,. + 0
 916              	s_flexioHandle:
 917 0000 00000000 		.space	8
 917      00000000 
 918              		.section	.bss.s_flexioIsr,"aw",%nobits
 919              		.align	2
 920              		.set	.LANCHOR2,. + 0
 923              	s_flexioIsr:
 924 0000 00000000 		.space	8
 924      00000000 
 925              		.section	.bss.s_flexioType,"aw",%nobits
 926              		.align	2
 927              		.set	.LANCHOR1,. + 0
 930              	s_flexioType:
 931 0000 00000000 		.space	8
 931      00000000 
 932              		.section	.rodata.s_flexioBases,"a",%progbits
 933              		.align	2
 936              	s_flexioBases:
 937 0000 00F00540 		.word	1074130944
 938              		.section	.rodata.s_flexioClocks,"a",%progbits
 939              		.align	2
 942              	s_flexioClocks:
 943 0000 1F003810 		.word	272105503
 944              		.text
 945              	.Letext0:
 946              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 947              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 948              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 949              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 950              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 951              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 952              		.file 10 "../CMSIS/system_MKL17Z4.h"
 953              		.file 11 "../CMSIS/MKL17Z4.h"
 954              		.file 12 "../drivers/fsl_common.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_flexio.c
     /tmp/cc5cr7TS.s:16     .text.FLEXIO_GetInstance:0000000000000000 $t
     /tmp/cc5cr7TS.s:23     .text.FLEXIO_GetInstance:0000000000000000 FLEXIO_GetInstance
     /tmp/cc5cr7TS.s:58     .text.FLEXIO_GetInstance:0000000000000014 $d
     /tmp/cc5cr7TS.s:63     .text.FLEXIO_Deinit:0000000000000000 $t
     /tmp/cc5cr7TS.s:70     .text.FLEXIO_Deinit:0000000000000000 FLEXIO_Deinit
     /tmp/cc5cr7TS.s:114    .text.FLEXIO_Deinit:000000000000001c $d
     /tmp/cc5cr7TS.s:119    .text.FLEXIO_GetDefaultConfig:0000000000000000 $t
     /tmp/cc5cr7TS.s:126    .text.FLEXIO_GetDefaultConfig:0000000000000000 FLEXIO_GetDefaultConfig
     /tmp/cc5cr7TS.s:151    .text.FLEXIO_Reset:0000000000000000 $t
     /tmp/cc5cr7TS.s:158    .text.FLEXIO_Reset:0000000000000000 FLEXIO_Reset
     /tmp/cc5cr7TS.s:181    .text.FLEXIO_Init:0000000000000000 $t
     /tmp/cc5cr7TS.s:188    .text.FLEXIO_Init:0000000000000000 FLEXIO_Init
     /tmp/cc5cr7TS.s:267    .text.FLEXIO_Init:000000000000004c $d
     /tmp/cc5cr7TS.s:273    .text.FLEXIO_GetShifterBufferAddress:0000000000000000 $t
     /tmp/cc5cr7TS.s:280    .text.FLEXIO_GetShifterBufferAddress:0000000000000000 FLEXIO_GetShifterBufferAddress
     /tmp/cc5cr7TS.s:348    .text.FLEXIO_SetShifterConfig:0000000000000000 $t
     /tmp/cc5cr7TS.s:355    .text.FLEXIO_SetShifterConfig:0000000000000000 FLEXIO_SetShifterConfig
     /tmp/cc5cr7TS.s:442    .text.FLEXIO_SetTimerConfig:0000000000000000 $t
     /tmp/cc5cr7TS.s:449    .text.FLEXIO_SetTimerConfig:0000000000000000 FLEXIO_SetTimerConfig
     /tmp/cc5cr7TS.s:586    .text.FLEXIO_RegisterHandleIRQ:0000000000000000 $t
     /tmp/cc5cr7TS.s:593    .text.FLEXIO_RegisterHandleIRQ:0000000000000000 FLEXIO_RegisterHandleIRQ
     /tmp/cc5cr7TS.s:658    .text.FLEXIO_RegisterHandleIRQ:0000000000000030 $d
     /tmp/cc5cr7TS.s:665    .text.FLEXIO_UnregisterHandleIRQ:0000000000000000 $t
     /tmp/cc5cr7TS.s:672    .text.FLEXIO_UnregisterHandleIRQ:0000000000000000 FLEXIO_UnregisterHandleIRQ
     /tmp/cc5cr7TS.s:734    .text.FLEXIO_UnregisterHandleIRQ:0000000000000034 $d
     /tmp/cc5cr7TS.s:741    .text.FLEXIO_CommonIRQHandler:0000000000000000 $t
     /tmp/cc5cr7TS.s:748    .text.FLEXIO_CommonIRQHandler:0000000000000000 FLEXIO_CommonIRQHandler
     /tmp/cc5cr7TS.s:795    .text.FLEXIO_CommonIRQHandler:0000000000000028 $d
     /tmp/cc5cr7TS.s:802    .text.FLEXIO_DriverIRQHandler:0000000000000000 $t
     /tmp/cc5cr7TS.s:809    .text.FLEXIO_DriverIRQHandler:0000000000000000 FLEXIO_DriverIRQHandler
     /tmp/cc5cr7TS.s:829    .text.FLEXIO0_DriverIRQHandler:0000000000000000 $t
     /tmp/cc5cr7TS.s:836    .text.FLEXIO0_DriverIRQHandler:0000000000000000 FLEXIO0_DriverIRQHandler
     /tmp/cc5cr7TS.s:856    .text.FLEXIO1_DriverIRQHandler:0000000000000000 $t
     /tmp/cc5cr7TS.s:863    .text.FLEXIO1_DriverIRQHandler:0000000000000000 FLEXIO1_DriverIRQHandler
     /tmp/cc5cr7TS.s:883    .text.UART2_FLEXIO_DriverIRQHandler:0000000000000000 $t
     /tmp/cc5cr7TS.s:890    .text.UART2_FLEXIO_DriverIRQHandler:0000000000000000 UART2_FLEXIO_DriverIRQHandler
     /tmp/cc5cr7TS.s:936    .rodata.s_flexioBases:0000000000000000 s_flexioBases
     /tmp/cc5cr7TS.s:942    .rodata.s_flexioClocks:0000000000000000 s_flexioClocks
     /tmp/cc5cr7TS.s:912    .bss.s_flexioHandle:0000000000000000 $d
     /tmp/cc5cr7TS.s:916    .bss.s_flexioHandle:0000000000000000 s_flexioHandle
     /tmp/cc5cr7TS.s:919    .bss.s_flexioIsr:0000000000000000 $d
     /tmp/cc5cr7TS.s:923    .bss.s_flexioIsr:0000000000000000 s_flexioIsr
     /tmp/cc5cr7TS.s:926    .bss.s_flexioType:0000000000000000 $d
     /tmp/cc5cr7TS.s:930    .bss.s_flexioType:0000000000000000 s_flexioType
     /tmp/cc5cr7TS.s:933    .rodata.s_flexioBases:0000000000000000 $d
     /tmp/cc5cr7TS.s:939    .rodata.s_flexioClocks:0000000000000000 $d

NO UNDEFINED SYMBOLS
