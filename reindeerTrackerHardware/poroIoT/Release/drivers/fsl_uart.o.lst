   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.UART_WriteNonBlocking,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	UART_WriteNonBlocking:
  23              	.LFB73:
  24              		.file 1 "../drivers/fsl_uart.c"
   1:../drivers/fsl_uart.c **** /*
   2:../drivers/fsl_uart.c ****  * The Clear BSD License
   3:../drivers/fsl_uart.c ****  * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_uart.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_uart.c ****  * All rights reserved.
   6:../drivers/fsl_uart.c ****  *
   7:../drivers/fsl_uart.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_uart.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_uart.c ****  * that the following conditions are met:
  10:../drivers/fsl_uart.c ****  *
  11:../drivers/fsl_uart.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_uart.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_uart.c ****  *
  14:../drivers/fsl_uart.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_uart.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_uart.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_uart.c ****  *
  18:../drivers/fsl_uart.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_uart.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_uart.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_uart.c ****  *
  22:../drivers/fsl_uart.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_uart.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_uart.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_uart.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_uart.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_uart.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_uart.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_uart.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_uart.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_uart.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_uart.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_uart.c ****  */
  34:../drivers/fsl_uart.c **** 
  35:../drivers/fsl_uart.c **** #include "fsl_uart.h"
  36:../drivers/fsl_uart.c **** 
  37:../drivers/fsl_uart.c **** /*******************************************************************************
  38:../drivers/fsl_uart.c ****  * Definitions
  39:../drivers/fsl_uart.c ****  ******************************************************************************/
  40:../drivers/fsl_uart.c **** 
  41:../drivers/fsl_uart.c **** /* UART transfer state. */
  42:../drivers/fsl_uart.c **** enum _uart_tansfer_states
  43:../drivers/fsl_uart.c **** {
  44:../drivers/fsl_uart.c ****     kUART_TxIdle,         /* TX idle. */
  45:../drivers/fsl_uart.c ****     kUART_TxBusy,         /* TX busy. */
  46:../drivers/fsl_uart.c ****     kUART_RxIdle,         /* RX idle. */
  47:../drivers/fsl_uart.c ****     kUART_RxBusy,         /* RX busy. */
  48:../drivers/fsl_uart.c ****     kUART_RxFramingError, /* Rx framing error */
  49:../drivers/fsl_uart.c ****     kUART_RxParityError   /* Rx parity error */
  50:../drivers/fsl_uart.c **** };
  51:../drivers/fsl_uart.c **** 
  52:../drivers/fsl_uart.c **** /* Typedef for interrupt handler. */
  53:../drivers/fsl_uart.c **** typedef void (*uart_isr_t)(UART_Type *base, uart_handle_t *handle);
  54:../drivers/fsl_uart.c **** 
  55:../drivers/fsl_uart.c **** /*******************************************************************************
  56:../drivers/fsl_uart.c ****  * Prototypes
  57:../drivers/fsl_uart.c ****  ******************************************************************************/
  58:../drivers/fsl_uart.c **** 
  59:../drivers/fsl_uart.c **** /*!
  60:../drivers/fsl_uart.c ****  * @brief Get the UART instance from peripheral base address.
  61:../drivers/fsl_uart.c ****  *
  62:../drivers/fsl_uart.c ****  * @param base UART peripheral base address.
  63:../drivers/fsl_uart.c ****  * @return UART instance.
  64:../drivers/fsl_uart.c ****  */
  65:../drivers/fsl_uart.c **** uint32_t UART_GetInstance(UART_Type *base);
  66:../drivers/fsl_uart.c **** 
  67:../drivers/fsl_uart.c **** /*!
  68:../drivers/fsl_uart.c ****  * @brief Check whether the RX ring buffer is full.
  69:../drivers/fsl_uart.c ****  *
  70:../drivers/fsl_uart.c ****  * @param handle UART handle pointer.
  71:../drivers/fsl_uart.c ****  * @retval true  RX ring buffer is full.
  72:../drivers/fsl_uart.c ****  * @retval false RX ring buffer is not full.
  73:../drivers/fsl_uart.c ****  */
  74:../drivers/fsl_uart.c **** static bool UART_TransferIsRxRingBufferFull(uart_handle_t *handle);
  75:../drivers/fsl_uart.c **** 
  76:../drivers/fsl_uart.c **** /*!
  77:../drivers/fsl_uart.c ****  * @brief Read RX register using non-blocking method.
  78:../drivers/fsl_uart.c ****  *
  79:../drivers/fsl_uart.c ****  * This function reads data from the TX register directly, upper layer must make
  80:../drivers/fsl_uart.c ****  * sure the RX register is full or TX FIFO has data before calling this function.
  81:../drivers/fsl_uart.c ****  *
  82:../drivers/fsl_uart.c ****  * @param base UART peripheral base address.
  83:../drivers/fsl_uart.c ****  * @param data Start addresss of the buffer to store the received data.
  84:../drivers/fsl_uart.c ****  * @param length Size of the buffer.
  85:../drivers/fsl_uart.c ****  */
  86:../drivers/fsl_uart.c **** static void UART_ReadNonBlocking(UART_Type *base, uint8_t *data, size_t length);
  87:../drivers/fsl_uart.c **** 
  88:../drivers/fsl_uart.c **** /*!
  89:../drivers/fsl_uart.c ****  * @brief Write to TX register using non-blocking method.
  90:../drivers/fsl_uart.c ****  *
  91:../drivers/fsl_uart.c ****  * This function writes data to the TX register directly, upper layer must make
  92:../drivers/fsl_uart.c ****  * sure the TX register is empty or TX FIFO has empty room before calling this function.
  93:../drivers/fsl_uart.c ****  *
  94:../drivers/fsl_uart.c ****  * @note This function does not check whether all the data has been sent out to bus,
  95:../drivers/fsl_uart.c ****  * so before disable TX, check kUART_TransmissionCompleteFlag to ensure the TX is
  96:../drivers/fsl_uart.c ****  * finished.
  97:../drivers/fsl_uart.c ****  *
  98:../drivers/fsl_uart.c ****  * @param base UART peripheral base address.
  99:../drivers/fsl_uart.c ****  * @param data Start addresss of the data to write.
 100:../drivers/fsl_uart.c ****  * @param length Size of the buffer to be sent.
 101:../drivers/fsl_uart.c ****  */
 102:../drivers/fsl_uart.c **** static void UART_WriteNonBlocking(UART_Type *base, const uint8_t *data, size_t length);
 103:../drivers/fsl_uart.c **** 
 104:../drivers/fsl_uart.c **** /*******************************************************************************
 105:../drivers/fsl_uart.c ****  * Variables
 106:../drivers/fsl_uart.c ****  ******************************************************************************/
 107:../drivers/fsl_uart.c **** /* Array of UART handle. */
 108:../drivers/fsl_uart.c **** #if (defined(UART5))
 109:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 6
 110:../drivers/fsl_uart.c **** #else /* UART5 */
 111:../drivers/fsl_uart.c **** #if (defined(UART4))
 112:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 5
 113:../drivers/fsl_uart.c **** #else /* UART4 */
 114:../drivers/fsl_uart.c **** #if (defined(UART3))
 115:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 4
 116:../drivers/fsl_uart.c **** #else /* UART3 */
 117:../drivers/fsl_uart.c **** #if (defined(UART2))
 118:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 3
 119:../drivers/fsl_uart.c **** #else /* UART2 */
 120:../drivers/fsl_uart.c **** #if (defined(UART1))
 121:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 2
 122:../drivers/fsl_uart.c **** #else /* UART1 */
 123:../drivers/fsl_uart.c **** #if (defined(UART0))
 124:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 1
 125:../drivers/fsl_uart.c **** #else /* UART0 */
 126:../drivers/fsl_uart.c **** #error No UART instance.
 127:../drivers/fsl_uart.c **** #endif /* UART 0 */
 128:../drivers/fsl_uart.c **** #endif /* UART 1 */
 129:../drivers/fsl_uart.c **** #endif /* UART 2 */
 130:../drivers/fsl_uart.c **** #endif /* UART 3 */
 131:../drivers/fsl_uart.c **** #endif /* UART 4 */
 132:../drivers/fsl_uart.c **** #endif /* UART 5 */
 133:../drivers/fsl_uart.c **** static uart_handle_t *s_uartHandle[UART_HANDLE_ARRAY_SIZE];
 134:../drivers/fsl_uart.c **** /* Array of UART peripheral base address. */
 135:../drivers/fsl_uart.c **** static UART_Type *const s_uartBases[] = UART_BASE_PTRS;
 136:../drivers/fsl_uart.c **** 
 137:../drivers/fsl_uart.c **** /* Array of UART IRQ number. */
 138:../drivers/fsl_uart.c **** static const IRQn_Type s_uartIRQ[] = UART_RX_TX_IRQS;
 139:../drivers/fsl_uart.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 140:../drivers/fsl_uart.c **** /* Array of UART clock name. */
 141:../drivers/fsl_uart.c **** static const clock_ip_name_t s_uartClock[] = UART_CLOCKS;
 142:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 143:../drivers/fsl_uart.c **** 
 144:../drivers/fsl_uart.c **** /* UART ISR for transactional APIs. */
 145:../drivers/fsl_uart.c **** static uart_isr_t s_uartIsr;
 146:../drivers/fsl_uart.c **** 
 147:../drivers/fsl_uart.c **** /*******************************************************************************
 148:../drivers/fsl_uart.c ****  * Code
 149:../drivers/fsl_uart.c ****  ******************************************************************************/
 150:../drivers/fsl_uart.c **** 
 151:../drivers/fsl_uart.c **** uint32_t UART_GetInstance(UART_Type *base)
 152:../drivers/fsl_uart.c **** {
 153:../drivers/fsl_uart.c ****     uint32_t instance;
 154:../drivers/fsl_uart.c ****     uint32_t uartArrayCount = (sizeof(s_uartBases) / sizeof(s_uartBases[0]));
 155:../drivers/fsl_uart.c **** 
 156:../drivers/fsl_uart.c ****     /* Find the instance index from base address mappings. */
 157:../drivers/fsl_uart.c ****     for (instance = 0; instance < uartArrayCount; instance++)
 158:../drivers/fsl_uart.c ****     {
 159:../drivers/fsl_uart.c ****         if (s_uartBases[instance] == base)
 160:../drivers/fsl_uart.c ****         {
 161:../drivers/fsl_uart.c ****             break;
 162:../drivers/fsl_uart.c ****         }
 163:../drivers/fsl_uart.c ****     }
 164:../drivers/fsl_uart.c **** 
 165:../drivers/fsl_uart.c ****     assert(instance < uartArrayCount);
 166:../drivers/fsl_uart.c **** 
 167:../drivers/fsl_uart.c ****     return instance;
 168:../drivers/fsl_uart.c **** }
 169:../drivers/fsl_uart.c **** 
 170:../drivers/fsl_uart.c **** size_t UART_TransferGetRxRingBufferLength(uart_handle_t *handle)
 171:../drivers/fsl_uart.c **** {
 172:../drivers/fsl_uart.c ****     assert(handle);
 173:../drivers/fsl_uart.c **** 
 174:../drivers/fsl_uart.c ****     size_t size;
 175:../drivers/fsl_uart.c **** 
 176:../drivers/fsl_uart.c ****     if (handle->rxRingBufferTail > handle->rxRingBufferHead)
 177:../drivers/fsl_uart.c ****     {
 178:../drivers/fsl_uart.c ****         size = (size_t)(handle->rxRingBufferHead + handle->rxRingBufferSize - handle->rxRingBufferT
 179:../drivers/fsl_uart.c ****     }
 180:../drivers/fsl_uart.c ****     else
 181:../drivers/fsl_uart.c ****     {
 182:../drivers/fsl_uart.c ****         size = (size_t)(handle->rxRingBufferHead - handle->rxRingBufferTail);
 183:../drivers/fsl_uart.c ****     }
 184:../drivers/fsl_uart.c **** 
 185:../drivers/fsl_uart.c ****     return size;
 186:../drivers/fsl_uart.c **** }
 187:../drivers/fsl_uart.c **** 
 188:../drivers/fsl_uart.c **** static bool UART_TransferIsRxRingBufferFull(uart_handle_t *handle)
 189:../drivers/fsl_uart.c **** {
 190:../drivers/fsl_uart.c ****     assert(handle);
 191:../drivers/fsl_uart.c **** 
 192:../drivers/fsl_uart.c ****     bool full;
 193:../drivers/fsl_uart.c **** 
 194:../drivers/fsl_uart.c ****     if (UART_TransferGetRxRingBufferLength(handle) == (handle->rxRingBufferSize - 1U))
 195:../drivers/fsl_uart.c ****     {
 196:../drivers/fsl_uart.c ****         full = true;
 197:../drivers/fsl_uart.c ****     }
 198:../drivers/fsl_uart.c ****     else
 199:../drivers/fsl_uart.c ****     {
 200:../drivers/fsl_uart.c ****         full = false;
 201:../drivers/fsl_uart.c ****     }
 202:../drivers/fsl_uart.c **** 
 203:../drivers/fsl_uart.c ****     return full;
 204:../drivers/fsl_uart.c **** }
 205:../drivers/fsl_uart.c **** 
 206:../drivers/fsl_uart.c **** status_t UART_Init(UART_Type *base, const uart_config_t *config, uint32_t srcClock_Hz)
 207:../drivers/fsl_uart.c **** {
 208:../drivers/fsl_uart.c ****     assert(config);
 209:../drivers/fsl_uart.c ****     assert(config->baudRate_Bps);
 210:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 211:../drivers/fsl_uart.c ****     assert(FSL_FEATURE_UART_FIFO_SIZEn(base) >= config->txFifoWatermark);
 212:../drivers/fsl_uart.c ****     assert(FSL_FEATURE_UART_FIFO_SIZEn(base) >= config->rxFifoWatermark);
 213:../drivers/fsl_uart.c **** #endif
 214:../drivers/fsl_uart.c **** 
 215:../drivers/fsl_uart.c ****     uint16_t sbr = 0;
 216:../drivers/fsl_uart.c ****     uint8_t temp = 0;
 217:../drivers/fsl_uart.c ****     uint32_t baudDiff = 0;
 218:../drivers/fsl_uart.c **** 
 219:../drivers/fsl_uart.c ****     /* Calculate the baud rate modulo divisor, sbr*/
 220:../drivers/fsl_uart.c ****     sbr = srcClock_Hz / (config->baudRate_Bps * 16);
 221:../drivers/fsl_uart.c ****     /* set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate */
 222:../drivers/fsl_uart.c ****     if (sbr == 0)
 223:../drivers/fsl_uart.c ****     {
 224:../drivers/fsl_uart.c ****         sbr = 1;
 225:../drivers/fsl_uart.c ****     }
 226:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 227:../drivers/fsl_uart.c ****     /* Determine if a fractional divider is needed to fine tune closer to the
 228:../drivers/fsl_uart.c ****      * desired baud, each value of brfa is in 1/32 increments,
 229:../drivers/fsl_uart.c ****      * hence the multiply-by-32. */
 230:../drivers/fsl_uart.c ****     uint32_t tempBaud = 0;
 231:../drivers/fsl_uart.c **** 
 232:../drivers/fsl_uart.c ****     uint16_t brfa = (2 * srcClock_Hz / (config->baudRate_Bps)) - 32 * sbr;
 233:../drivers/fsl_uart.c **** 
 234:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values and BRFA */
 235:../drivers/fsl_uart.c ****     tempBaud = (srcClock_Hz * 2 / ((sbr * 32 + brfa)));
 236:../drivers/fsl_uart.c ****     baudDiff =
 237:../drivers/fsl_uart.c ****         (tempBaud > config->baudRate_Bps) ? (tempBaud - config->baudRate_Bps) : (config->baudRate_B
 238:../drivers/fsl_uart.c **** 
 239:../drivers/fsl_uart.c **** #else
 240:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values */
 241:../drivers/fsl_uart.c ****     baudDiff = (srcClock_Hz / (sbr * 16)) - config->baudRate_Bps;
 242:../drivers/fsl_uart.c **** 
 243:../drivers/fsl_uart.c ****     /* Select the better value between sbr and (sbr + 1) */
 244:../drivers/fsl_uart.c ****     if (baudDiff > (config->baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)))))
 245:../drivers/fsl_uart.c ****     {
 246:../drivers/fsl_uart.c ****         baudDiff = config->baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)));
 247:../drivers/fsl_uart.c ****         sbr++;
 248:../drivers/fsl_uart.c ****     }
 249:../drivers/fsl_uart.c **** #endif
 250:../drivers/fsl_uart.c **** 
 251:../drivers/fsl_uart.c ****     /* next, check to see if actual baud rate is within 3% of desired baud rate
 252:../drivers/fsl_uart.c ****      * based on the calculate SBR value */
 253:../drivers/fsl_uart.c ****     if (baudDiff > ((config->baudRate_Bps / 100) * 3))
 254:../drivers/fsl_uart.c ****     {
 255:../drivers/fsl_uart.c ****         /* Unacceptable baud rate difference of more than 3%*/
 256:../drivers/fsl_uart.c ****         return kStatus_UART_BaudrateNotSupport;
 257:../drivers/fsl_uart.c ****     }
 258:../drivers/fsl_uart.c **** 
 259:../drivers/fsl_uart.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 260:../drivers/fsl_uart.c ****     /* Enable uart clock */
 261:../drivers/fsl_uart.c ****     CLOCK_EnableClock(s_uartClock[UART_GetInstance(base)]);
 262:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 263:../drivers/fsl_uart.c **** 
 264:../drivers/fsl_uart.c ****     /* Disable UART TX RX before setting. */
 265:../drivers/fsl_uart.c ****     base->C2 &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
 266:../drivers/fsl_uart.c **** 
 267:../drivers/fsl_uart.c ****     /* Write the sbr value to the BDH and BDL registers*/
 268:../drivers/fsl_uart.c ****     base->BDH = (base->BDH & ~UART_BDH_SBR_MASK) | (uint8_t)(sbr >> 8);
 269:../drivers/fsl_uart.c ****     base->BDL = (uint8_t)sbr;
 270:../drivers/fsl_uart.c **** 
 271:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 272:../drivers/fsl_uart.c ****     /* Write the brfa value to the register*/
 273:../drivers/fsl_uart.c ****     base->C4 = (base->C4 & ~UART_C4_BRFA_MASK) | (brfa & UART_C4_BRFA_MASK);
 274:../drivers/fsl_uart.c **** #endif
 275:../drivers/fsl_uart.c **** 
 276:../drivers/fsl_uart.c ****     /* Set bit count/parity mode/idle type. */
 277:../drivers/fsl_uart.c ****     temp = base->C1 & ~(UART_C1_PE_MASK | UART_C1_PT_MASK | UART_C1_M_MASK | UART_C1_ILT_MASK);
 278:../drivers/fsl_uart.c **** 
 279:../drivers/fsl_uart.c ****     temp |= UART_C1_ILT(config->idleType);
 280:../drivers/fsl_uart.c **** 
 281:../drivers/fsl_uart.c ****     if (kUART_ParityDisabled != config->parityMode)
 282:../drivers/fsl_uart.c ****     {
 283:../drivers/fsl_uart.c ****         temp |= (UART_C1_M_MASK | (uint8_t)config->parityMode);
 284:../drivers/fsl_uart.c ****     }
 285:../drivers/fsl_uart.c **** 
 286:../drivers/fsl_uart.c ****     base->C1 = temp;
 287:../drivers/fsl_uart.c **** 
 288:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_S
 289:../drivers/fsl_uart.c ****     /* Set stop bit per char */
 290:../drivers/fsl_uart.c ****     base->BDH = (base->BDH & ~UART_BDH_SBNS_MASK) | UART_BDH_SBNS((uint8_t)config->stopBitCount);
 291:../drivers/fsl_uart.c **** #endif
 292:../drivers/fsl_uart.c **** 
 293:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 294:../drivers/fsl_uart.c ****     /* Set tx/rx FIFO watermark
 295:../drivers/fsl_uart.c ****        Note:
 296:../drivers/fsl_uart.c ****        Take care of the RX FIFO, RX interrupt request only assert when received bytes
 297:../drivers/fsl_uart.c ****        equal or more than RX water mark, there is potential issue if RX water
 298:../drivers/fsl_uart.c ****        mark larger than 1.
 299:../drivers/fsl_uart.c ****        For example, if RX FIFO water mark is 2, upper layer needs 5 bytes and
 300:../drivers/fsl_uart.c ****        5 bytes are received. the last byte will be saved in FIFO but not trigger
 301:../drivers/fsl_uart.c ****        RX interrupt because the water mark is 2.
 302:../drivers/fsl_uart.c ****      */
 303:../drivers/fsl_uart.c ****     base->TWFIFO = config->txFifoWatermark;
 304:../drivers/fsl_uart.c ****     base->RWFIFO = config->rxFifoWatermark;
 305:../drivers/fsl_uart.c **** 
 306:../drivers/fsl_uart.c ****     /* Enable tx/rx FIFO */
 307:../drivers/fsl_uart.c ****     base->PFIFO |= (UART_PFIFO_TXFE_MASK | UART_PFIFO_RXFE_MASK);
 308:../drivers/fsl_uart.c **** 
 309:../drivers/fsl_uart.c ****     /* Flush FIFO */
 310:../drivers/fsl_uart.c ****     base->CFIFO |= (UART_CFIFO_TXFLUSH_MASK | UART_CFIFO_RXFLUSH_MASK);
 311:../drivers/fsl_uart.c **** #endif
 312:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_MODEM_SUPPORT) && FSL_FEATURE_UART_HAS_MODEM_SUPPORT
 313:../drivers/fsl_uart.c ****     if (config->enableRxRTS)
 314:../drivers/fsl_uart.c ****     {
 315:../drivers/fsl_uart.c ****         /* Enable receiver RTS(request-to-send) function. */
 316:../drivers/fsl_uart.c ****         base->MODEM |= UART_MODEM_RXRTSE_MASK;
 317:../drivers/fsl_uart.c ****     }
 318:../drivers/fsl_uart.c ****     if (config->enableTxCTS)
 319:../drivers/fsl_uart.c ****     {
 320:../drivers/fsl_uart.c ****         /* Enable transmiter CTS(clear-to-send) function. */
 321:../drivers/fsl_uart.c ****         base->MODEM |= UART_MODEM_TXCTSE_MASK;
 322:../drivers/fsl_uart.c ****     }
 323:../drivers/fsl_uart.c **** #endif
 324:../drivers/fsl_uart.c **** 
 325:../drivers/fsl_uart.c ****     /* Enable TX/RX base on configure structure. */
 326:../drivers/fsl_uart.c ****     temp = base->C2;
 327:../drivers/fsl_uart.c **** 
 328:../drivers/fsl_uart.c ****     if (config->enableTx)
 329:../drivers/fsl_uart.c ****     {
 330:../drivers/fsl_uart.c ****         temp |= UART_C2_TE_MASK;
 331:../drivers/fsl_uart.c ****     }
 332:../drivers/fsl_uart.c **** 
 333:../drivers/fsl_uart.c ****     if (config->enableRx)
 334:../drivers/fsl_uart.c ****     {
 335:../drivers/fsl_uart.c ****         temp |= UART_C2_RE_MASK;
 336:../drivers/fsl_uart.c ****     }
 337:../drivers/fsl_uart.c **** 
 338:../drivers/fsl_uart.c ****     base->C2 = temp;
 339:../drivers/fsl_uart.c **** 
 340:../drivers/fsl_uart.c ****     return kStatus_Success;
 341:../drivers/fsl_uart.c **** }
 342:../drivers/fsl_uart.c **** 
 343:../drivers/fsl_uart.c **** void UART_Deinit(UART_Type *base)
 344:../drivers/fsl_uart.c **** {
 345:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 346:../drivers/fsl_uart.c ****     /* Wait tx FIFO send out*/
 347:../drivers/fsl_uart.c ****     while (0 != base->TCFIFO)
 348:../drivers/fsl_uart.c ****     {
 349:../drivers/fsl_uart.c ****     }
 350:../drivers/fsl_uart.c **** #endif
 351:../drivers/fsl_uart.c ****     /* Wait last char shoft out */
 352:../drivers/fsl_uart.c ****     while (0 == (base->S1 & UART_S1_TC_MASK))
 353:../drivers/fsl_uart.c ****     {
 354:../drivers/fsl_uart.c ****     }
 355:../drivers/fsl_uart.c **** 
 356:../drivers/fsl_uart.c ****     /* Disable the module. */
 357:../drivers/fsl_uart.c ****     base->C2 = 0;
 358:../drivers/fsl_uart.c **** 
 359:../drivers/fsl_uart.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 360:../drivers/fsl_uart.c ****     /* Disable uart clock */
 361:../drivers/fsl_uart.c ****     CLOCK_DisableClock(s_uartClock[UART_GetInstance(base)]);
 362:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 363:../drivers/fsl_uart.c **** }
 364:../drivers/fsl_uart.c **** 
 365:../drivers/fsl_uart.c **** void UART_GetDefaultConfig(uart_config_t *config)
 366:../drivers/fsl_uart.c **** {
 367:../drivers/fsl_uart.c ****     assert(config);
 368:../drivers/fsl_uart.c **** 
 369:../drivers/fsl_uart.c ****     config->baudRate_Bps = 115200U;
 370:../drivers/fsl_uart.c ****     config->parityMode = kUART_ParityDisabled;
 371:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_S
 372:../drivers/fsl_uart.c ****     config->stopBitCount = kUART_OneStopBit;
 373:../drivers/fsl_uart.c **** #endif
 374:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 375:../drivers/fsl_uart.c ****     config->txFifoWatermark = 0;
 376:../drivers/fsl_uart.c ****     config->rxFifoWatermark = 1;
 377:../drivers/fsl_uart.c **** #endif
 378:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_MODEM_SUPPORT) && FSL_FEATURE_UART_HAS_MODEM_SUPPORT
 379:../drivers/fsl_uart.c ****     config->enableRxRTS = false;
 380:../drivers/fsl_uart.c ****     config->enableTxCTS = false;
 381:../drivers/fsl_uart.c **** #endif
 382:../drivers/fsl_uart.c ****     config->idleType = kUART_IdleTypeStartBit;
 383:../drivers/fsl_uart.c ****     config->enableTx = false;
 384:../drivers/fsl_uart.c ****     config->enableRx = false;
 385:../drivers/fsl_uart.c **** }
 386:../drivers/fsl_uart.c **** 
 387:../drivers/fsl_uart.c **** status_t UART_SetBaudRate(UART_Type *base, uint32_t baudRate_Bps, uint32_t srcClock_Hz)
 388:../drivers/fsl_uart.c **** {
 389:../drivers/fsl_uart.c ****     assert(baudRate_Bps);
 390:../drivers/fsl_uart.c **** 
 391:../drivers/fsl_uart.c ****     uint16_t sbr = 0;
 392:../drivers/fsl_uart.c ****     uint32_t baudDiff = 0;
 393:../drivers/fsl_uart.c ****     uint8_t oldCtrl;
 394:../drivers/fsl_uart.c **** 
 395:../drivers/fsl_uart.c ****     /* Calculate the baud rate modulo divisor, sbr*/
 396:../drivers/fsl_uart.c ****     sbr = srcClock_Hz / (baudRate_Bps * 16);
 397:../drivers/fsl_uart.c ****     /* set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate */
 398:../drivers/fsl_uart.c ****     if (sbr == 0)
 399:../drivers/fsl_uart.c ****     {
 400:../drivers/fsl_uart.c ****         sbr = 1;
 401:../drivers/fsl_uart.c ****     }
 402:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 403:../drivers/fsl_uart.c ****     /* Determine if a fractional divider is needed to fine tune closer to the
 404:../drivers/fsl_uart.c ****      * desired baud, each value of brfa is in 1/32 increments,
 405:../drivers/fsl_uart.c ****      * hence the multiply-by-32. */
 406:../drivers/fsl_uart.c ****     uint32_t tempBaud = 0;
 407:../drivers/fsl_uart.c **** 
 408:../drivers/fsl_uart.c ****     uint16_t brfa = (2 * srcClock_Hz / (baudRate_Bps)) - 32 * sbr;
 409:../drivers/fsl_uart.c **** 
 410:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values and BRFA */
 411:../drivers/fsl_uart.c ****     tempBaud = (srcClock_Hz * 2 / ((sbr * 32 + brfa)));
 412:../drivers/fsl_uart.c ****     baudDiff = (tempBaud > baudRate_Bps) ? (tempBaud - baudRate_Bps) : (baudRate_Bps - tempBaud);
 413:../drivers/fsl_uart.c **** #else
 414:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values */
 415:../drivers/fsl_uart.c ****     baudDiff = (srcClock_Hz / (sbr * 16)) - baudRate_Bps;
 416:../drivers/fsl_uart.c **** 
 417:../drivers/fsl_uart.c ****     /* Select the better value between sbr and (sbr + 1) */
 418:../drivers/fsl_uart.c ****     if (baudDiff > (baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)))))
 419:../drivers/fsl_uart.c ****     {
 420:../drivers/fsl_uart.c ****         baudDiff = baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)));
 421:../drivers/fsl_uart.c ****         sbr++;
 422:../drivers/fsl_uart.c ****     }
 423:../drivers/fsl_uart.c **** #endif
 424:../drivers/fsl_uart.c **** 
 425:../drivers/fsl_uart.c ****     /* next, check to see if actual baud rate is within 3% of desired baud rate
 426:../drivers/fsl_uart.c ****      * based on the calculate SBR value */
 427:../drivers/fsl_uart.c ****     if (baudDiff < ((baudRate_Bps / 100) * 3))
 428:../drivers/fsl_uart.c ****     {
 429:../drivers/fsl_uart.c ****         /* Store C2 before disable Tx and Rx */
 430:../drivers/fsl_uart.c ****         oldCtrl = base->C2;
 431:../drivers/fsl_uart.c **** 
 432:../drivers/fsl_uart.c ****         /* Disable UART TX RX before setting. */
 433:../drivers/fsl_uart.c ****         base->C2 &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
 434:../drivers/fsl_uart.c **** 
 435:../drivers/fsl_uart.c ****         /* Write the sbr value to the BDH and BDL registers*/
 436:../drivers/fsl_uart.c ****         base->BDH = (base->BDH & ~UART_BDH_SBR_MASK) | (uint8_t)(sbr >> 8);
 437:../drivers/fsl_uart.c ****         base->BDL = (uint8_t)sbr;
 438:../drivers/fsl_uart.c **** 
 439:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 440:../drivers/fsl_uart.c ****         /* Write the brfa value to the register*/
 441:../drivers/fsl_uart.c ****         base->C4 = (base->C4 & ~UART_C4_BRFA_MASK) | (brfa & UART_C4_BRFA_MASK);
 442:../drivers/fsl_uart.c **** #endif
 443:../drivers/fsl_uart.c ****         /* Restore C2. */
 444:../drivers/fsl_uart.c ****         base->C2 = oldCtrl;
 445:../drivers/fsl_uart.c **** 
 446:../drivers/fsl_uart.c ****         return kStatus_Success;
 447:../drivers/fsl_uart.c ****     }
 448:../drivers/fsl_uart.c ****     else
 449:../drivers/fsl_uart.c ****     {
 450:../drivers/fsl_uart.c ****         /* Unacceptable baud rate difference of more than 3%*/
 451:../drivers/fsl_uart.c ****         return kStatus_UART_BaudrateNotSupport;
 452:../drivers/fsl_uart.c ****     }
 453:../drivers/fsl_uart.c **** }
 454:../drivers/fsl_uart.c **** 
 455:../drivers/fsl_uart.c **** void UART_EnableInterrupts(UART_Type *base, uint32_t mask)
 456:../drivers/fsl_uart.c **** {
 457:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 458:../drivers/fsl_uart.c **** 
 459:../drivers/fsl_uart.c ****     /* The interrupt mask is combined by control bits from several register: ((CFIFO<<24) | (C3<<16
 460:../drivers/fsl_uart.c ****      */
 461:../drivers/fsl_uart.c ****     base->BDH |= mask;
 462:../drivers/fsl_uart.c ****     base->C2 |= (mask >> 8);
 463:../drivers/fsl_uart.c ****     base->C3 |= (mask >> 16);
 464:../drivers/fsl_uart.c **** 
 465:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 466:../drivers/fsl_uart.c ****     base->CFIFO |= (mask >> 24);
 467:../drivers/fsl_uart.c **** #endif
 468:../drivers/fsl_uart.c **** }
 469:../drivers/fsl_uart.c **** 
 470:../drivers/fsl_uart.c **** void UART_DisableInterrupts(UART_Type *base, uint32_t mask)
 471:../drivers/fsl_uart.c **** {
 472:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 473:../drivers/fsl_uart.c **** 
 474:../drivers/fsl_uart.c ****     /* The interrupt mask is combined by control bits from several register: ((CFIFO<<24) | (C3<<16
 475:../drivers/fsl_uart.c ****      */
 476:../drivers/fsl_uart.c ****     base->BDH &= ~mask;
 477:../drivers/fsl_uart.c ****     base->C2 &= ~(mask >> 8);
 478:../drivers/fsl_uart.c ****     base->C3 &= ~(mask >> 16);
 479:../drivers/fsl_uart.c **** 
 480:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 481:../drivers/fsl_uart.c ****     base->CFIFO &= ~(mask >> 24);
 482:../drivers/fsl_uart.c **** #endif
 483:../drivers/fsl_uart.c **** }
 484:../drivers/fsl_uart.c **** 
 485:../drivers/fsl_uart.c **** uint32_t UART_GetEnabledInterrupts(UART_Type *base)
 486:../drivers/fsl_uart.c **** {
 487:../drivers/fsl_uart.c ****     uint32_t temp;
 488:../drivers/fsl_uart.c **** 
 489:../drivers/fsl_uart.c ****     temp = base->BDH | ((uint32_t)(base->C2) << 8) | ((uint32_t)(base->C3) << 16);
 490:../drivers/fsl_uart.c **** 
 491:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 492:../drivers/fsl_uart.c ****     temp |= ((uint32_t)(base->CFIFO) << 24);
 493:../drivers/fsl_uart.c **** #endif
 494:../drivers/fsl_uart.c **** 
 495:../drivers/fsl_uart.c ****     return temp & kUART_AllInterruptsEnable;
 496:../drivers/fsl_uart.c **** }
 497:../drivers/fsl_uart.c **** 
 498:../drivers/fsl_uart.c **** uint32_t UART_GetStatusFlags(UART_Type *base)
 499:../drivers/fsl_uart.c **** {
 500:../drivers/fsl_uart.c ****     uint32_t status_flag;
 501:../drivers/fsl_uart.c **** 
 502:../drivers/fsl_uart.c ****     status_flag = base->S1 | ((uint32_t)(base->S2) << 8);
 503:../drivers/fsl_uart.c **** 
 504:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS) && FSL_FEATURE_UART_HAS_EXTENDED_DAT
 505:../drivers/fsl_uart.c ****     status_flag |= ((uint32_t)(base->ED) << 16);
 506:../drivers/fsl_uart.c **** #endif
 507:../drivers/fsl_uart.c **** 
 508:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 509:../drivers/fsl_uart.c ****     status_flag |= ((uint32_t)(base->SFIFO) << 24);
 510:../drivers/fsl_uart.c **** #endif
 511:../drivers/fsl_uart.c **** 
 512:../drivers/fsl_uart.c ****     return status_flag;
 513:../drivers/fsl_uart.c **** }
 514:../drivers/fsl_uart.c **** 
 515:../drivers/fsl_uart.c **** status_t UART_ClearStatusFlags(UART_Type *base, uint32_t mask)
 516:../drivers/fsl_uart.c **** {
 517:../drivers/fsl_uart.c ****     uint8_t reg = base->S2;
 518:../drivers/fsl_uart.c ****     status_t status;
 519:../drivers/fsl_uart.c **** 
 520:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_LIN_BREAK_DETECT) && FSL_FEATURE_UART_HAS_LIN_BREAK_DETECT
 521:../drivers/fsl_uart.c ****     reg &= ~(UART_S2_RXEDGIF_MASK | UART_S2_LBKDIF_MASK);
 522:../drivers/fsl_uart.c **** #else
 523:../drivers/fsl_uart.c ****     reg &= ~UART_S2_RXEDGIF_MASK;
 524:../drivers/fsl_uart.c **** #endif
 525:../drivers/fsl_uart.c **** 
 526:../drivers/fsl_uart.c ****     base->S2 = reg | (uint8_t)(mask >> 8);
 527:../drivers/fsl_uart.c **** 
 528:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 529:../drivers/fsl_uart.c ****     base->SFIFO = (uint8_t)(mask >> 24);
 530:../drivers/fsl_uart.c **** #endif
 531:../drivers/fsl_uart.c **** 
 532:../drivers/fsl_uart.c ****     if (mask & (kUART_IdleLineFlag | kUART_NoiseErrorFlag | kUART_FramingErrorFlag | kUART_ParityEr
 533:../drivers/fsl_uart.c ****     {
 534:../drivers/fsl_uart.c ****         /* Read base->D to clear the flags. */
 535:../drivers/fsl_uart.c ****         (void)base->S1;
 536:../drivers/fsl_uart.c ****         (void)base->D;
 537:../drivers/fsl_uart.c ****     }
 538:../drivers/fsl_uart.c **** 
 539:../drivers/fsl_uart.c ****     if (mask & kUART_RxOverrunFlag)
 540:../drivers/fsl_uart.c ****     {
 541:../drivers/fsl_uart.c ****         /* Read base->D to clear the flags and Flush all data in FIFO. */
 542:../drivers/fsl_uart.c ****         (void)base->S1;
 543:../drivers/fsl_uart.c ****         (void)base->D;
 544:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 545:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
 546:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
 547:../drivers/fsl_uart.c **** #endif
 548:../drivers/fsl_uart.c ****     }
 549:../drivers/fsl_uart.c **** 
 550:../drivers/fsl_uart.c ****     /* If some flags still pending. */
 551:../drivers/fsl_uart.c ****     if (mask & UART_GetStatusFlags(base))
 552:../drivers/fsl_uart.c ****     {
 553:../drivers/fsl_uart.c ****         /* Some flags can only clear or set by the hardware itself, these flags are: kUART_TxDataRe
 554:../drivers/fsl_uart.c ****         kUART_TransmissionCompleteFlag, kUART_RxDataRegFullFlag, kUART_RxActiveFlag, kUART_NoiseErr
 555:../drivers/fsl_uart.c ****         kUART_ParityErrorInRxDataRegFlag, kUART_TxFifoEmptyFlag, kUART_RxFifoEmptyFlag. */
 556:../drivers/fsl_uart.c ****         status = kStatus_UART_FlagCannotClearManually;
 557:../drivers/fsl_uart.c ****     }
 558:../drivers/fsl_uart.c ****     else
 559:../drivers/fsl_uart.c ****     {
 560:../drivers/fsl_uart.c ****         status = kStatus_Success;
 561:../drivers/fsl_uart.c ****     }
 562:../drivers/fsl_uart.c **** 
 563:../drivers/fsl_uart.c ****     return status;
 564:../drivers/fsl_uart.c **** }
 565:../drivers/fsl_uart.c **** 
 566:../drivers/fsl_uart.c **** void UART_WriteBlocking(UART_Type *base, const uint8_t *data, size_t length)
 567:../drivers/fsl_uart.c **** {
 568:../drivers/fsl_uart.c ****     /* This API can only ensure that the data is written into the data buffer but can't
 569:../drivers/fsl_uart.c ****     ensure all data in the data buffer are sent into the transmit shift buffer. */
 570:../drivers/fsl_uart.c ****     while (length--)
 571:../drivers/fsl_uart.c ****     {
 572:../drivers/fsl_uart.c ****         while (!(base->S1 & UART_S1_TDRE_MASK))
 573:../drivers/fsl_uart.c ****         {
 574:../drivers/fsl_uart.c ****         }
 575:../drivers/fsl_uart.c ****         base->D = *(data++);
 576:../drivers/fsl_uart.c ****     }
 577:../drivers/fsl_uart.c **** }
 578:../drivers/fsl_uart.c **** 
 579:../drivers/fsl_uart.c **** static void UART_WriteNonBlocking(UART_Type *base, const uint8_t *data, size_t length)
 580:../drivers/fsl_uart.c **** {
  25              		.loc 1 580 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 10B5     		push	{r4, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34              	.LVL1:
 581:../drivers/fsl_uart.c ****     assert(data);
 582:../drivers/fsl_uart.c **** 
 583:../drivers/fsl_uart.c ****     size_t i;
 584:../drivers/fsl_uart.c **** 
 585:../drivers/fsl_uart.c ****     /* The Non Blocking write data API assume user have ensured there is enough space in
 586:../drivers/fsl_uart.c ****     peripheral to write. */
 587:../drivers/fsl_uart.c ****     for (i = 0; i < length; i++)
  35              		.loc 1 587 0
  36 0002 0023     		movs	r3, #0
  37 0004 02E0     		b	.L2
  38              	.LVL2:
  39              	.L3:
 588:../drivers/fsl_uart.c ****     {
 589:../drivers/fsl_uart.c ****         base->D = data[i];
  40              		.loc 1 589 0 discriminator 3
  41 0006 CC5C     		ldrb	r4, [r1, r3]
  42 0008 C471     		strb	r4, [r0, #7]
 587:../drivers/fsl_uart.c ****     {
  43              		.loc 1 587 0 discriminator 3
  44 000a 0133     		adds	r3, r3, #1
  45              	.LVL3:
  46              	.L2:
 587:../drivers/fsl_uart.c ****     {
  47              		.loc 1 587 0 is_stmt 0 discriminator 1
  48 000c 9342     		cmp	r3, r2
  49 000e FAD3     		bcc	.L3
 590:../drivers/fsl_uart.c ****     }
 591:../drivers/fsl_uart.c **** }
  50              		.loc 1 591 0 is_stmt 1
  51              		@ sp needed
  52 0010 10BD     		pop	{r4, pc}
  53              		.cfi_endproc
  54              	.LFE73:
  56              		.section	.text.UART_ReadNonBlocking,"ax",%progbits
  57              		.align	1
  58              		.syntax unified
  59              		.code	16
  60              		.thumb_func
  61              		.fpu softvfp
  63              	UART_ReadNonBlocking:
  64              	.LFB75:
 592:../drivers/fsl_uart.c **** 
 593:../drivers/fsl_uart.c **** status_t UART_ReadBlocking(UART_Type *base, uint8_t *data, size_t length)
 594:../drivers/fsl_uart.c **** {
 595:../drivers/fsl_uart.c ****     assert(data);
 596:../drivers/fsl_uart.c **** 
 597:../drivers/fsl_uart.c ****     uint32_t statusFlag;
 598:../drivers/fsl_uart.c **** 
 599:../drivers/fsl_uart.c ****     while (length--)
 600:../drivers/fsl_uart.c ****     {
 601:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 602:../drivers/fsl_uart.c ****         while (!base->RCFIFO)
 603:../drivers/fsl_uart.c **** #else
 604:../drivers/fsl_uart.c ****         while (!(base->S1 & UART_S1_RDRF_MASK))
 605:../drivers/fsl_uart.c **** #endif
 606:../drivers/fsl_uart.c ****         {
 607:../drivers/fsl_uart.c ****             statusFlag = UART_GetStatusFlags(base);
 608:../drivers/fsl_uart.c **** 
 609:../drivers/fsl_uart.c ****             if (statusFlag & kUART_RxOverrunFlag)
 610:../drivers/fsl_uart.c ****             {
 611:../drivers/fsl_uart.c ****                 return kStatus_UART_RxHardwareOverrun;
 612:../drivers/fsl_uart.c ****             }
 613:../drivers/fsl_uart.c **** 
 614:../drivers/fsl_uart.c ****             if (statusFlag & kUART_NoiseErrorFlag)
 615:../drivers/fsl_uart.c ****             {
 616:../drivers/fsl_uart.c ****                 return kStatus_UART_NoiseError;
 617:../drivers/fsl_uart.c ****             }
 618:../drivers/fsl_uart.c **** 
 619:../drivers/fsl_uart.c ****             if (statusFlag & kUART_FramingErrorFlag)
 620:../drivers/fsl_uart.c ****             {
 621:../drivers/fsl_uart.c ****                 return kStatus_UART_FramingError;
 622:../drivers/fsl_uart.c ****             }
 623:../drivers/fsl_uart.c **** 
 624:../drivers/fsl_uart.c ****             if (statusFlag & kUART_ParityErrorFlag)
 625:../drivers/fsl_uart.c ****             {
 626:../drivers/fsl_uart.c ****                 return kStatus_UART_ParityError;
 627:../drivers/fsl_uart.c ****             }
 628:../drivers/fsl_uart.c ****         }
 629:../drivers/fsl_uart.c ****         *(data++) = base->D;
 630:../drivers/fsl_uart.c ****     }
 631:../drivers/fsl_uart.c **** 
 632:../drivers/fsl_uart.c ****     return kStatus_Success;
 633:../drivers/fsl_uart.c **** }
 634:../drivers/fsl_uart.c **** 
 635:../drivers/fsl_uart.c **** static void UART_ReadNonBlocking(UART_Type *base, uint8_t *data, size_t length)
 636:../drivers/fsl_uart.c **** {
  65              		.loc 1 636 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              	.LVL4:
  70 0000 10B5     		push	{r4, lr}
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 4, -8
  73              		.cfi_offset 14, -4
  74              	.LVL5:
 637:../drivers/fsl_uart.c ****     assert(data);
 638:../drivers/fsl_uart.c **** 
 639:../drivers/fsl_uart.c ****     size_t i;
 640:../drivers/fsl_uart.c **** 
 641:../drivers/fsl_uart.c ****     /* The Non Blocking read data API assume user have ensured there is enough space in
 642:../drivers/fsl_uart.c ****     peripheral to write. */
 643:../drivers/fsl_uart.c ****     for (i = 0; i < length; i++)
  75              		.loc 1 643 0
  76 0002 0023     		movs	r3, #0
  77 0004 02E0     		b	.L5
  78              	.LVL6:
  79              	.L6:
 644:../drivers/fsl_uart.c ****     {
 645:../drivers/fsl_uart.c ****         data[i] = base->D;
  80              		.loc 1 645 0 discriminator 3
  81 0006 C479     		ldrb	r4, [r0, #7]
  82 0008 CC54     		strb	r4, [r1, r3]
 643:../drivers/fsl_uart.c ****     {
  83              		.loc 1 643 0 discriminator 3
  84 000a 0133     		adds	r3, r3, #1
  85              	.LVL7:
  86              	.L5:
 643:../drivers/fsl_uart.c ****     {
  87              		.loc 1 643 0 is_stmt 0 discriminator 1
  88 000c 9342     		cmp	r3, r2
  89 000e FAD3     		bcc	.L6
 646:../drivers/fsl_uart.c ****     }
 647:../drivers/fsl_uart.c **** }
  90              		.loc 1 647 0 is_stmt 1
  91              		@ sp needed
  92 0010 10BD     		pop	{r4, pc}
  93              		.cfi_endproc
  94              	.LFE75:
  96              		.section	.text.UART_GetInstance,"ax",%progbits
  97              		.align	1
  98              		.global	UART_GetInstance
  99              		.syntax unified
 100              		.code	16
 101              		.thumb_func
 102              		.fpu softvfp
 104              	UART_GetInstance:
 105              	.LFB60:
 152:../drivers/fsl_uart.c ****     uint32_t instance;
 106              		.loc 1 152 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111              	.LVL8:
 157:../drivers/fsl_uart.c ****     {
 112              		.loc 1 157 0
 113 0000 0023     		movs	r3, #0
 114              	.LVL9:
 115              	.L8:
 157:../drivers/fsl_uart.c ****     {
 116              		.loc 1 157 0 is_stmt 0 discriminator 1
 117 0002 022B     		cmp	r3, #2
 118 0004 06D8     		bhi	.L7
 159:../drivers/fsl_uart.c ****         {
 119              		.loc 1 159 0 is_stmt 1
 120 0006 9A00     		lsls	r2, r3, #2
 121 0008 0349     		ldr	r1, .L11
 122 000a 5258     		ldr	r2, [r2, r1]
 123 000c 8242     		cmp	r2, r0
 124 000e 01D0     		beq	.L7
 157:../drivers/fsl_uart.c ****     {
 125              		.loc 1 157 0 discriminator 2
 126 0010 0133     		adds	r3, r3, #1
 127              	.LVL10:
 128 0012 F6E7     		b	.L8
 129              	.L7:
 168:../drivers/fsl_uart.c **** 
 130              		.loc 1 168 0
 131 0014 1800     		movs	r0, r3
 132              	.LVL11:
 133              		@ sp needed
 134 0016 7047     		bx	lr
 135              	.L12:
 136              		.align	2
 137              	.L11:
 138 0018 00000000 		.word	.LANCHOR0
 139              		.cfi_endproc
 140              	.LFE60:
 142              		.section	.text.UART_TransferGetRxRingBufferLength,"ax",%progbits
 143              		.align	1
 144              		.global	UART_TransferGetRxRingBufferLength
 145              		.syntax unified
 146              		.code	16
 147              		.thumb_func
 148              		.fpu softvfp
 150              	UART_TransferGetRxRingBufferLength:
 151              	.LFB61:
 171:../drivers/fsl_uart.c ****     assert(handle);
 152              		.loc 1 171 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157              	.LVL12:
 176:../drivers/fsl_uart.c ****     {
 158              		.loc 1 176 0
 159 0000 428C     		ldrh	r2, [r0, #34]
 160 0002 92B2     		uxth	r2, r2
 161 0004 038C     		ldrh	r3, [r0, #32]
 162 0006 9BB2     		uxth	r3, r3
 163 0008 9A42     		cmp	r2, r3
 164 000a 03D8     		bhi	.L16
 182:../drivers/fsl_uart.c ****     }
 165              		.loc 1 182 0
 166 000c 038C     		ldrh	r3, [r0, #32]
 167 000e 408C     		ldrh	r0, [r0, #34]
 168              	.LVL13:
 169 0010 181A     		subs	r0, r3, r0
 170              	.LVL14:
 171              	.L13:
 186:../drivers/fsl_uart.c **** 
 172              		.loc 1 186 0
 173              		@ sp needed
 174 0012 7047     		bx	lr
 175              	.LVL15:
 176              	.L16:
 178:../drivers/fsl_uart.c ****     }
 177              		.loc 1 178 0
 178 0014 038C     		ldrh	r3, [r0, #32]
 179 0016 C269     		ldr	r2, [r0, #28]
 180 0018 9446     		mov	ip, r2
 181 001a 6344     		add	r3, r3, ip
 182 001c 408C     		ldrh	r0, [r0, #34]
 183              	.LVL16:
 184 001e 181A     		subs	r0, r3, r0
 185              	.LVL17:
 186 0020 F7E7     		b	.L13
 187              		.cfi_endproc
 188              	.LFE61:
 190              		.section	.text.UART_TransferIsRxRingBufferFull,"ax",%progbits
 191              		.align	1
 192              		.syntax unified
 193              		.code	16
 194              		.thumb_func
 195              		.fpu softvfp
 197              	UART_TransferIsRxRingBufferFull:
 198              	.LFB62:
 189:../drivers/fsl_uart.c ****     assert(handle);
 199              		.loc 1 189 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL18:
 204 0000 10B5     		push	{r4, lr}
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 4, -8
 207              		.cfi_offset 14, -4
 208 0002 0400     		movs	r4, r0
 194:../drivers/fsl_uart.c ****     {
 209              		.loc 1 194 0
 210 0004 FFF7FEFF 		bl	UART_TransferGetRxRingBufferLength
 211              	.LVL19:
 212 0008 E369     		ldr	r3, [r4, #28]
 213 000a 013B     		subs	r3, r3, #1
 214 000c 9842     		cmp	r0, r3
 215 000e 01D0     		beq	.L20
 200:../drivers/fsl_uart.c ****     }
 216              		.loc 1 200 0
 217 0010 0020     		movs	r0, #0
 218              	.L18:
 219              	.LVL20:
 204:../drivers/fsl_uart.c **** 
 220              		.loc 1 204 0
 221              		@ sp needed
 222              	.LVL21:
 223 0012 10BD     		pop	{r4, pc}
 224              	.LVL22:
 225              	.L20:
 196:../drivers/fsl_uart.c ****     }
 226              		.loc 1 196 0
 227 0014 0120     		movs	r0, #1
 228 0016 FCE7     		b	.L18
 229              		.cfi_endproc
 230              	.LFE62:
 232              		.global	__aeabi_uidiv
 233              		.section	.text.UART_Init,"ax",%progbits
 234              		.align	1
 235              		.global	UART_Init
 236              		.syntax unified
 237              		.code	16
 238              		.thumb_func
 239              		.fpu softvfp
 241              	UART_Init:
 242              	.LFB63:
 207:../drivers/fsl_uart.c ****     assert(config);
 243              		.loc 1 207 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL23:
 248 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 249              		.cfi_def_cfa_offset 24
 250              		.cfi_offset 3, -24
 251              		.cfi_offset 4, -20
 252              		.cfi_offset 5, -16
 253              		.cfi_offset 6, -12
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 0002 CE46     		mov	lr, r9
 257 0004 4746     		mov	r7, r8
 258 0006 80B5     		push	{r7, lr}
 259              		.cfi_def_cfa_offset 32
 260              		.cfi_offset 8, -32
 261              		.cfi_offset 9, -28
 262 0008 0400     		movs	r4, r0
 263 000a 0E00     		movs	r6, r1
 264 000c 1700     		movs	r7, r2
 265              	.LVL24:
 220:../drivers/fsl_uart.c ****     /* set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate */
 266              		.loc 1 220 0
 267 000e 0B68     		ldr	r3, [r1]
 268 0010 9946     		mov	r9, r3
 269 0012 1901     		lsls	r1, r3, #4
 270              	.LVL25:
 271 0014 1000     		movs	r0, r2
 272              	.LVL26:
 273 0016 FFF7FEFF 		bl	__aeabi_uidiv
 274              	.LVL27:
 275 001a 83B2     		uxth	r3, r0
 276 001c 9846     		mov	r8, r3
 277              	.LVL28:
 222:../drivers/fsl_uart.c ****     {
 278              		.loc 1 222 0
 279 001e 002B     		cmp	r3, #0
 280 0020 01D1     		bne	.L22
 224:../drivers/fsl_uart.c ****     }
 281              		.loc 1 224 0
 282 0022 0133     		adds	r3, r3, #1
 283              	.LVL29:
 284 0024 9846     		mov	r8, r3
 285              	.LVL30:
 286              	.L22:
 232:../drivers/fsl_uart.c **** 
 287              		.loc 1 232 0
 288 0026 7F00     		lsls	r7, r7, #1
 289              	.LVL31:
 290 0028 4946     		mov	r1, r9
 291 002a 3800     		movs	r0, r7
 292 002c FFF7FEFF 		bl	__aeabi_uidiv
 293              	.LVL32:
 294 0030 85B2     		uxth	r5, r0
 295 0032 4346     		mov	r3, r8
 296 0034 5901     		lsls	r1, r3, #5
 297 0036 88B2     		uxth	r0, r1
 298 0038 2D1A     		subs	r5, r5, r0
 299 003a ADB2     		uxth	r5, r5
 300              	.LVL33:
 235:../drivers/fsl_uart.c ****     baudDiff =
 301              		.loc 1 235 0
 302 003c 6918     		adds	r1, r5, r1
 303 003e 3800     		movs	r0, r7
 304 0040 FFF7FEFF 		bl	__aeabi_uidiv
 305              	.LVL34:
 237:../drivers/fsl_uart.c **** 
 306              		.loc 1 237 0
 307 0044 8145     		cmp	r9, r0
 308 0046 51D2     		bcs	.L23
 237:../drivers/fsl_uart.c **** 
 309              		.loc 1 237 0 is_stmt 0 discriminator 1
 310 0048 4B46     		mov	r3, r9
 311 004a C71A     		subs	r7, r0, r3
 312              	.L24:
 313              	.LVL35:
 253:../drivers/fsl_uart.c ****     {
 314              		.loc 1 253 0 is_stmt 1
 315 004c 6421     		movs	r1, #100
 316 004e 4846     		mov	r0, r9
 317              	.LVL36:
 318 0050 FFF7FEFF 		bl	__aeabi_uidiv
 319              	.LVL37:
 320 0054 4300     		lsls	r3, r0, #1
 321 0056 1818     		adds	r0, r3, r0
 322 0058 B842     		cmp	r0, r7
 323 005a 4AD3     		bcc	.L30
 261:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 324              		.loc 1 261 0
 325 005c 2000     		movs	r0, r4
 326 005e FFF7FEFF 		bl	UART_GetInstance
 327              	.LVL38:
 328 0062 8000     		lsls	r0, r0, #2
 329 0064 244B     		ldr	r3, .L31
 330 0066 C358     		ldr	r3, [r0, r3]
 331              	.LVL39:
 332              	.LBB12:
 333              	.LBB13:
 334              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  53:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  54:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  55:../drivers/fsl_clock.h ****  * the driver.
  56:../drivers/fsl_clock.h ****  *
  57:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  58:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  59:../drivers/fsl_clock.h ****  */
  60:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  61:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  62:../drivers/fsl_clock.h **** #endif
  63:../drivers/fsl_clock.h **** 
  64:../drivers/fsl_clock.h **** /*******************************************************************************
  65:../drivers/fsl_clock.h ****  * Definitions
  66:../drivers/fsl_clock.h ****  ******************************************************************************/
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @name Driver version */
  69:../drivers/fsl_clock.h **** /*@{*/
  70:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.1.1. */
  71:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 1, 1))
  72:../drivers/fsl_clock.h **** /*@}*/
  73:../drivers/fsl_clock.h **** 
  74:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  75:../drivers/fsl_clock.h ****  *
  76:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  77:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  78:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  79:../drivers/fsl_clock.h ****  * @code
  80:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  81:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to clock driver.
  82:../drivers/fsl_clock.h ****  * @endcode
  83:../drivers/fsl_clock.h ****  *
  84:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up the
  85:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
  86:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  87:../drivers/fsl_clock.h ****  */
  88:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
  89:../drivers/fsl_clock.h **** 
  90:../drivers/fsl_clock.h **** /*! @brief The external XTAL32/EXTAL32/RTC_CLKIN clock frequency.
  91:../drivers/fsl_clock.h ****  *
  92:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
  93:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
  94:../drivers/fsl_clock.h ****  *
  95:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up
  96:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
  97:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  98:../drivers/fsl_clock.h ****  */
  99:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 100:../drivers/fsl_clock.h **** 
 101:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 102:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 103:../drivers/fsl_clock.h ****     {                  \
 104:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 105:../drivers/fsl_clock.h ****     }
 106:../drivers/fsl_clock.h **** 
 107:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 108:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 109:../drivers/fsl_clock.h ****     {               \
 110:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 111:../drivers/fsl_clock.h ****     }
 112:../drivers/fsl_clock.h **** 
 113:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 114:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 115:../drivers/fsl_clock.h ****     {               \
 116:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 117:../drivers/fsl_clock.h ****     }
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SPI. */
 120:../drivers/fsl_clock.h **** #define SPI_CLOCKS               \
 121:../drivers/fsl_clock.h ****     {                            \
 122:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1 \
 123:../drivers/fsl_clock.h ****     }
 124:../drivers/fsl_clock.h **** 
 125:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 126:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 127:../drivers/fsl_clock.h ****     {               \
 128:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 129:../drivers/fsl_clock.h ****     }
 130:../drivers/fsl_clock.h **** 
 131:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 132:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 133:../drivers/fsl_clock.h ****     {                                                                        \
 134:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 135:../drivers/fsl_clock.h ****     }
 136:../drivers/fsl_clock.h **** 
 137:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPUART. */
 138:../drivers/fsl_clock.h **** #define LPUART_CLOCKS                  \
 139:../drivers/fsl_clock.h ****     {                                  \
 140:../drivers/fsl_clock.h ****         kCLOCK_Lpuart0, kCLOCK_Lpuart1 \
 141:../drivers/fsl_clock.h ****     }
 142:../drivers/fsl_clock.h **** 
 143:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 144:../drivers/fsl_clock.h **** #define DAC_CLOCKS  \
 145:../drivers/fsl_clock.h ****     {               \
 146:../drivers/fsl_clock.h ****         kCLOCK_Dac0 \
 147:../drivers/fsl_clock.h ****     }
 148:../drivers/fsl_clock.h **** 
 149:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 150:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 151:../drivers/fsl_clock.h ****     {                 \
 152:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 153:../drivers/fsl_clock.h ****     }
 154:../drivers/fsl_clock.h **** 
 155:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 156:../drivers/fsl_clock.h **** #define ADC16_CLOCKS \
 157:../drivers/fsl_clock.h ****     {                \
 158:../drivers/fsl_clock.h ****         kCLOCK_Adc0  \
 159:../drivers/fsl_clock.h ****     }
 160:../drivers/fsl_clock.h **** 
 161:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXIO. */
 162:../drivers/fsl_clock.h **** #define FLEXIO_CLOCKS  \
 163:../drivers/fsl_clock.h ****     {                  \
 164:../drivers/fsl_clock.h ****         kCLOCK_Flexio0 \
 165:../drivers/fsl_clock.h ****     }
 166:../drivers/fsl_clock.h **** 
 167:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 168:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 169:../drivers/fsl_clock.h ****     {                \
 170:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 171:../drivers/fsl_clock.h ****     }
 172:../drivers/fsl_clock.h **** 
 173:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMA. */
 174:../drivers/fsl_clock.h **** #define DMA_CLOCKS  \
 175:../drivers/fsl_clock.h ****     {               \
 176:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 177:../drivers/fsl_clock.h ****     }
 178:../drivers/fsl_clock.h **** 
 179:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 180:../drivers/fsl_clock.h **** #define UART_CLOCKS                                      \
 181:../drivers/fsl_clock.h ****     {                                                    \
 182:../drivers/fsl_clock.h ****         kCLOCK_IpInvalid, kCLOCK_IpInvalid, kCLOCK_Uart2 \
 183:../drivers/fsl_clock.h ****     }
 184:../drivers/fsl_clock.h **** 
 185:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for TPM. */
 186:../drivers/fsl_clock.h **** #define TPM_CLOCKS                            \
 187:../drivers/fsl_clock.h ****     {                                         \
 188:../drivers/fsl_clock.h ****         kCLOCK_Tpm0, kCLOCK_Tpm1, kCLOCK_Tpm2 \
 189:../drivers/fsl_clock.h ****     }
 190:../drivers/fsl_clock.h **** 
 191:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 192:../drivers/fsl_clock.h **** #define I2C_CLOCKS               \
 193:../drivers/fsl_clock.h ****     {                            \
 194:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1 \
 195:../drivers/fsl_clock.h ****     }
 196:../drivers/fsl_clock.h **** 
 197:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 198:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 199:../drivers/fsl_clock.h ****     {               \
 200:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 201:../drivers/fsl_clock.h ****     }
 202:../drivers/fsl_clock.h **** 
 203:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 204:../drivers/fsl_clock.h **** #define CMP_CLOCKS  \
 205:../drivers/fsl_clock.h ****     {               \
 206:../drivers/fsl_clock.h ****         kCLOCK_Cmp0 \
 207:../drivers/fsl_clock.h ****     }
 208:../drivers/fsl_clock.h **** 
 209:../drivers/fsl_clock.h **** /*!
 210:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 211:../drivers/fsl_clock.h ****  */
 212:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 213:../drivers/fsl_clock.h **** 
 214:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 215:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 216:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 217:../drivers/fsl_clock.h **** 
 218:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC SYS_CLK
 219:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC SYS_CLK
 220:../drivers/fsl_clock.h **** #define SPI0_CLK_SRC BUS_CLK
 221:../drivers/fsl_clock.h **** #define SPI1_CLK_SRC SYS_CLK
 222:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 223:../drivers/fsl_clock.h **** 
 224:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 225:../drivers/fsl_clock.h **** typedef enum _clock_name
 226:../drivers/fsl_clock.h **** {
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 229:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 230:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 231:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 232:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 233:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 234:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 235:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 236:../drivers/fsl_clock.h **** 
 237:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 238:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 239:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 240:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 241:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 242:../drivers/fsl_clock.h **** 
 243:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 244:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 245:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 246:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 247:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 248:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 249:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 250:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 251:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 252:../drivers/fsl_clock.h **** 
 253:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 254:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 255:../drivers/fsl_clock.h **** 
 256:../drivers/fsl_clock.h **** } clock_name_t;
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 259:../drivers/fsl_clock.h **** 
 260:../drivers/fsl_clock.h ****  clock_gate_t definition:
 261:../drivers/fsl_clock.h **** 
 262:../drivers/fsl_clock.h ****  31                              16                              0
 263:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 264:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 265:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 266:../drivers/fsl_clock.h **** 
 267:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 268:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 271:../drivers/fsl_clock.h **** 
 272:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 273:../drivers/fsl_clock.h **** 
 274:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 275:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 276:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 277:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 278:../drivers/fsl_clock.h **** 
 279:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 280:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 281:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 282:../drivers/fsl_clock.h **** 
 283:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 284:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 285:../drivers/fsl_clock.h **** 
 286:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 287:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 288:../drivers/fsl_clock.h **** {
 289:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 290:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 291:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 292:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 293:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 294:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 295:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x1034U, 22U),
 296:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x1034U, 23U),
 297:../drivers/fsl_clock.h **** 
 298:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 299:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 300:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 301:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 302:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 303:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 304:../drivers/fsl_clock.h ****     kCLOCK_Lpuart0 = CLK_GATE_DEFINE(0x1038U, 20U),
 305:../drivers/fsl_clock.h ****     kCLOCK_Lpuart1 = CLK_GATE_DEFINE(0x1038U, 21U),
 306:../drivers/fsl_clock.h ****     kCLOCK_Flexio0 = CLK_GATE_DEFINE(0x1038U, 31U),
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 309:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 310:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 311:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 312:../drivers/fsl_clock.h ****     kCLOCK_Tpm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 313:../drivers/fsl_clock.h ****     kCLOCK_Tpm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 314:../drivers/fsl_clock.h ****     kCLOCK_Tpm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 315:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 316:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 317:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x103CU, 31U),
 318:../drivers/fsl_clock.h **** 
 319:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 8U),
 320:../drivers/fsl_clock.h **** } clock_ip_name_t;
 321:../drivers/fsl_clock.h **** 
 322:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 323:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 324:../drivers/fsl_clock.h **** {
 325:../drivers/fsl_clock.h ****     uint8_t er32kSrc; /*!< ERCLK32K source selection.   */
 326:../drivers/fsl_clock.h ****     uint32_t clkdiv1; /*!< SIM_CLKDIV1.                 */
 327:../drivers/fsl_clock.h **** } sim_clock_config_t;
 328:../drivers/fsl_clock.h **** 
 329:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 330:../drivers/fsl_clock.h **** enum _osc_cap_load
 331:../drivers/fsl_clock.h **** {
 332:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 333:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 334:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 335:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 336:../drivers/fsl_clock.h **** };
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 339:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 342:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 343:../drivers/fsl_clock.h **** };
 344:../drivers/fsl_clock.h **** 
 345:../drivers/fsl_clock.h **** /*! @brief The OSC configuration for OSCERCLK. */
 346:../drivers/fsl_clock.h **** typedef struct _oscer_config
 347:../drivers/fsl_clock.h **** {
 348:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of \ref _oscer_enable_mode. */
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h **** } oscer_config_t;
 351:../drivers/fsl_clock.h **** 
 352:../drivers/fsl_clock.h **** /*! @brief The OSC work mode. */
 353:../drivers/fsl_clock.h **** typedef enum _osc_mode
 354:../drivers/fsl_clock.h **** {
 355:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U,                                            /*!< Use external clock.   */
 356:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK,                    /*!< Oscillator low power. */
 357:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = MCG_C2_EREFS0_MASK | MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 358:../drivers/fsl_clock.h **** } osc_mode_t;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** /*!
 361:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 362:../drivers/fsl_clock.h ****  *
 363:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 364:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 365:../drivers/fsl_clock.h ****  * according to the board settings:
 366:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 367:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 368:../drivers/fsl_clock.h ****  */
 369:../drivers/fsl_clock.h **** typedef struct _osc_config
 370:../drivers/fsl_clock.h **** {
 371:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 372:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 373:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 374:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 375:../drivers/fsl_clock.h **** } osc_config_t;
 376:../drivers/fsl_clock.h **** 
 377:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock source selection. */
 378:../drivers/fsl_clock.h **** typedef enum _mcglite_clkout_src
 379:../drivers/fsl_clock.h **** {
 380:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcHirc, /*!< MCGOUTCLK source is HIRC */
 381:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcLirc, /*!< MCGOUTCLK source is LIRC */
 382:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcExt,  /*!< MCGOUTCLK source is external clock source */
 383:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcReserved
 384:../drivers/fsl_clock.h **** } mcglite_clkout_src_t;
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h **** /*! @brief MCG_Lite LIRC select. */
 387:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_mode
 388:../drivers/fsl_clock.h **** {
 389:../drivers/fsl_clock.h ****     kMCGLITE_Lirc2M, /*!< Slow internal reference(LIRC) 2 MHz clock selected */
 390:../drivers/fsl_clock.h ****     kMCGLITE_Lirc8M, /*!< Slow internal reference(LIRC) 8 MHz clock selected */
 391:../drivers/fsl_clock.h **** } mcglite_lirc_mode_t;
 392:../drivers/fsl_clock.h **** 
 393:../drivers/fsl_clock.h **** /*! @brief MCG_Lite divider factor selection for clock source*/
 394:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_div
 395:../drivers/fsl_clock.h **** {
 396:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy1 = 0U, /*!< Divider is 1    */
 397:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy2,      /*!< Divider is 2    */
 398:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy4,      /*!< Divider is 4    */
 399:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy8,      /*!< Divider is 8    */
 400:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy16,     /*!< Divider is 16   */
 401:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy32,     /*!< Divider is 32   */
 402:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy64,     /*!< Divider is 64   */
 403:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy128     /*!< Divider is 128  */
 404:../drivers/fsl_clock.h **** } mcglite_lirc_div_t;
 405:../drivers/fsl_clock.h **** 
 406:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock mode definitions */
 407:../drivers/fsl_clock.h **** typedef enum _mcglite_mode
 408:../drivers/fsl_clock.h **** {
 409:../drivers/fsl_clock.h ****     kMCGLITE_ModeHirc48M, /*!< Clock mode is HIRC 48 M  */
 410:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc8M,  /*!< Clock mode is LIRC 8 M   */
 411:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc2M,  /*!< Clock mode is LIRC 2 M   */
 412:../drivers/fsl_clock.h ****     kMCGLITE_ModeExt,     /*!< Clock mode is EXT       */
 413:../drivers/fsl_clock.h ****     kMCGLITE_ModeError    /*!< Unknown mode            */
 414:../drivers/fsl_clock.h **** } mcglite_mode_t;
 415:../drivers/fsl_clock.h **** 
 416:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 417:../drivers/fsl_clock.h **** enum _mcglite_irclk_enable_mode
 418:../drivers/fsl_clock.h **** {
 419:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 420:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 421:../drivers/fsl_clock.h **** };
 422:../drivers/fsl_clock.h **** 
 423:../drivers/fsl_clock.h **** /*! @brief MCG_Lite configure structure for mode change. */
 424:../drivers/fsl_clock.h **** typedef struct _mcglite_config
 425:../drivers/fsl_clock.h **** {
 426:../drivers/fsl_clock.h ****     mcglite_clkout_src_t outSrc;  /*!< MCGOUT clock select.                */
 427:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode;      /*!< MCGIRCLK enable mode, OR'ed value of _mcglite_irclk_enable_m
 428:../drivers/fsl_clock.h ****     mcglite_lirc_mode_t ircs;     /*!< MCG_C2[IRCS].                       */
 429:../drivers/fsl_clock.h ****     mcglite_lirc_div_t fcrdiv;    /*!< MCG_SC[FCRDIV].                     */
 430:../drivers/fsl_clock.h ****     mcglite_lirc_div_t lircDiv2;  /*!< MCG_MC[LIRC_DIV2].                  */
 431:../drivers/fsl_clock.h ****     bool hircEnableInNotHircMode; /*!< HIRC enable when not in HIRC mode.  */
 432:../drivers/fsl_clock.h **** } mcglite_config_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*******************************************************************************
 435:../drivers/fsl_clock.h ****  * API
 436:../drivers/fsl_clock.h ****  ******************************************************************************/
 437:../drivers/fsl_clock.h **** 
 438:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 439:../drivers/fsl_clock.h **** extern "C" {
 440:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*!
 443:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 444:../drivers/fsl_clock.h ****  *
 445:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 446:../drivers/fsl_clock.h ****  */
 447:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 448:../drivers/fsl_clock.h **** {
 449:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 335              		.loc 2 449 0
 336 0068 1A0C     		lsrs	r2, r3, #16
 337 006a 2449     		ldr	r1, .L31+4
 338 006c 8C46     		mov	ip, r1
 339 006e 6244     		add	r2, r2, ip
 340              	.LVL40:
 450:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 341              		.loc 2 450 0
 342 0070 1168     		ldr	r1, [r2]
 343 0072 1B04     		lsls	r3, r3, #16
 344              	.LVL41:
 345 0074 1B0C     		lsrs	r3, r3, #16
 346 0076 0120     		movs	r0, #1
 347              	.LVL42:
 348 0078 9840     		lsls	r0, r0, r3
 349 007a 0300     		movs	r3, r0
 350 007c 0B43     		orrs	r3, r1
 351 007e 1360     		str	r3, [r2]
 352              	.LVL43:
 353              	.LBE13:
 354              	.LBE12:
 265:../drivers/fsl_uart.c **** 
 355              		.loc 1 265 0
 356 0080 E378     		ldrb	r3, [r4, #3]
 357 0082 0C22     		movs	r2, #12
 358 0084 9343     		bics	r3, r2
 359 0086 E370     		strb	r3, [r4, #3]
 268:../drivers/fsl_uart.c ****     base->BDL = (uint8_t)sbr;
 360              		.loc 1 268 0
 361 0088 2378     		ldrb	r3, [r4]
 362 008a 1332     		adds	r2, r2, #19
 363 008c 9343     		bics	r3, r2
 364 008e 4146     		mov	r1, r8
 365 0090 090A     		lsrs	r1, r1, #8
 366 0092 0B43     		orrs	r3, r1
 367 0094 2370     		strb	r3, [r4]
 269:../drivers/fsl_uart.c **** 
 368              		.loc 1 269 0
 369 0096 4346     		mov	r3, r8
 370 0098 D8B2     		uxtb	r0, r3
 371 009a 6070     		strb	r0, [r4, #1]
 273:../drivers/fsl_uart.c **** #endif
 372              		.loc 1 273 0
 373 009c A37A     		ldrb	r3, [r4, #10]
 374 009e 9343     		bics	r3, r2
 375 00a0 1F20     		movs	r0, #31
 376 00a2 0540     		ands	r5, r0
 377              	.LVL44:
 378 00a4 1D43     		orrs	r5, r3
 379 00a6 A572     		strb	r5, [r4, #10]
 277:../drivers/fsl_uart.c **** 
 380              		.loc 1 277 0
 381 00a8 A378     		ldrb	r3, [r4, #2]
 382 00aa 083A     		subs	r2, r2, #8
 383 00ac 9343     		bics	r3, r2
 384 00ae 1A00     		movs	r2, r3
 385              	.LVL45:
 279:../drivers/fsl_uart.c **** 
 386              		.loc 1 279 0
 387 00b0 7379     		ldrb	r3, [r6, #5]
 388 00b2 9B00     		lsls	r3, r3, #2
 389 00b4 0421     		movs	r1, #4
 390 00b6 0B40     		ands	r3, r1
 391 00b8 1343     		orrs	r3, r2
 392              	.LVL46:
 281:../drivers/fsl_uart.c ****     {
 393              		.loc 1 281 0
 394 00ba 3279     		ldrb	r2, [r6, #4]
 395 00bc 002A     		cmp	r2, #0
 396 00be 02D0     		beq	.L26
 283:../drivers/fsl_uart.c ****     }
 397              		.loc 1 283 0
 398 00c0 1343     		orrs	r3, r2
 399              	.LVL47:
 400 00c2 1022     		movs	r2, #16
 401 00c4 1343     		orrs	r3, r2
 402              	.LVL48:
 403              	.L26:
 286:../drivers/fsl_uart.c **** 
 404              		.loc 1 286 0
 405 00c6 A370     		strb	r3, [r4, #2]
 326:../drivers/fsl_uart.c **** 
 406              		.loc 1 326 0
 407 00c8 E378     		ldrb	r3, [r4, #3]
 408              	.LVL49:
 409 00ca DBB2     		uxtb	r3, r3
 410              	.LVL50:
 328:../drivers/fsl_uart.c ****     {
 411              		.loc 1 328 0
 412 00cc B279     		ldrb	r2, [r6, #6]
 413 00ce 002A     		cmp	r2, #0
 414 00d0 01D0     		beq	.L27
 330:../drivers/fsl_uart.c ****     }
 415              		.loc 1 330 0
 416 00d2 0822     		movs	r2, #8
 417 00d4 1343     		orrs	r3, r2
 418              	.LVL51:
 419              	.L27:
 333:../drivers/fsl_uart.c ****     {
 420              		.loc 1 333 0
 421 00d6 F279     		ldrb	r2, [r6, #7]
 422 00d8 002A     		cmp	r2, #0
 423 00da 01D0     		beq	.L28
 335:../drivers/fsl_uart.c ****     }
 424              		.loc 1 335 0
 425 00dc 0422     		movs	r2, #4
 426 00de 1343     		orrs	r3, r2
 427              	.LVL52:
 428              	.L28:
 338:../drivers/fsl_uart.c **** 
 429              		.loc 1 338 0
 430 00e0 E370     		strb	r3, [r4, #3]
 340:../drivers/fsl_uart.c **** }
 431              		.loc 1 340 0
 432 00e2 0020     		movs	r0, #0
 433              	.LVL53:
 434              	.L21:
 341:../drivers/fsl_uart.c **** 
 435              		.loc 1 341 0
 436              		@ sp needed
 437              	.LVL54:
 438              	.LVL55:
 439              	.LVL56:
 440              	.LVL57:
 441 00e4 0CBC     		pop	{r2, r3}
 442 00e6 9046     		mov	r8, r2
 443 00e8 9946     		mov	r9, r3
 444 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 445              	.LVL58:
 446              	.L23:
 237:../drivers/fsl_uart.c **** 
 447              		.loc 1 237 0 discriminator 2
 448 00ec 4B46     		mov	r3, r9
 449 00ee 1F1A     		subs	r7, r3, r0
 450 00f0 ACE7     		b	.L24
 451              	.LVL59:
 452              	.L30:
 256:../drivers/fsl_uart.c ****     }
 453              		.loc 1 256 0
 454 00f2 0348     		ldr	r0, .L31+8
 455 00f4 F6E7     		b	.L21
 456              	.L32:
 457 00f6 C046     		.align	2
 458              	.L31:
 459 00f8 00000000 		.word	.LANCHOR1
 460 00fc 00700440 		.word	1074032640
 461 0100 F5030000 		.word	1013
 462              		.cfi_endproc
 463              	.LFE63:
 465              		.section	.text.UART_Deinit,"ax",%progbits
 466              		.align	1
 467              		.global	UART_Deinit
 468              		.syntax unified
 469              		.code	16
 470              		.thumb_func
 471              		.fpu softvfp
 473              	UART_Deinit:
 474              	.LFB64:
 344:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 475              		.loc 1 344 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              	.LVL60:
 480 0000 10B5     		push	{r4, lr}
 481              		.cfi_def_cfa_offset 8
 482              		.cfi_offset 4, -8
 483              		.cfi_offset 14, -4
 484              	.L34:
 352:../drivers/fsl_uart.c ****     {
 485              		.loc 1 352 0 discriminator 1
 486 0002 0379     		ldrb	r3, [r0, #4]
 487 0004 5B06     		lsls	r3, r3, #25
 488 0006 FCD5     		bpl	.L34
 357:../drivers/fsl_uart.c **** 
 489              		.loc 1 357 0
 490 0008 0023     		movs	r3, #0
 491 000a C370     		strb	r3, [r0, #3]
 361:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 492              		.loc 1 361 0
 493 000c FFF7FEFF 		bl	UART_GetInstance
 494              	.LVL61:
 495 0010 8000     		lsls	r0, r0, #2
 496 0012 074B     		ldr	r3, .L35
 497 0014 C358     		ldr	r3, [r0, r3]
 498              	.LVL62:
 499              	.LBB14:
 500              	.LBB15:
 451:../drivers/fsl_clock.h **** }
 452:../drivers/fsl_clock.h **** 
 453:../drivers/fsl_clock.h **** /*!
 454:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 455:../drivers/fsl_clock.h ****  *
 456:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 457:../drivers/fsl_clock.h ****  */
 458:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 459:../drivers/fsl_clock.h **** {
 460:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 501              		.loc 2 460 0
 502 0016 1A0C     		lsrs	r2, r3, #16
 503 0018 0649     		ldr	r1, .L35+4
 504 001a 8C46     		mov	ip, r1
 505 001c 6244     		add	r2, r2, ip
 506              	.LVL63:
 461:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 507              		.loc 2 461 0
 508 001e 1168     		ldr	r1, [r2]
 509 0020 1B04     		lsls	r3, r3, #16
 510              	.LVL64:
 511 0022 1B0C     		lsrs	r3, r3, #16
 512 0024 0120     		movs	r0, #1
 513              	.LVL65:
 514 0026 9840     		lsls	r0, r0, r3
 515 0028 8143     		bics	r1, r0
 516 002a 1160     		str	r1, [r2]
 517              	.LVL66:
 518              	.LBE15:
 519              	.LBE14:
 363:../drivers/fsl_uart.c **** 
 520              		.loc 1 363 0
 521              		@ sp needed
 522 002c 10BD     		pop	{r4, pc}
 523              	.L36:
 524 002e C046     		.align	2
 525              	.L35:
 526 0030 00000000 		.word	.LANCHOR1
 527 0034 00700440 		.word	1074032640
 528              		.cfi_endproc
 529              	.LFE64:
 531              		.section	.text.UART_GetDefaultConfig,"ax",%progbits
 532              		.align	1
 533              		.global	UART_GetDefaultConfig
 534              		.syntax unified
 535              		.code	16
 536              		.thumb_func
 537              		.fpu softvfp
 539              	UART_GetDefaultConfig:
 540              	.LFB65:
 366:../drivers/fsl_uart.c ****     assert(config);
 541              		.loc 1 366 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 546              	.LVL67:
 369:../drivers/fsl_uart.c ****     config->parityMode = kUART_ParityDisabled;
 547              		.loc 1 369 0
 548 0000 E123     		movs	r3, #225
 549 0002 5B02     		lsls	r3, r3, #9
 550 0004 0360     		str	r3, [r0]
 370:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_S
 551              		.loc 1 370 0
 552 0006 0023     		movs	r3, #0
 553 0008 0371     		strb	r3, [r0, #4]
 382:../drivers/fsl_uart.c ****     config->enableTx = false;
 554              		.loc 1 382 0
 555 000a 4371     		strb	r3, [r0, #5]
 383:../drivers/fsl_uart.c ****     config->enableRx = false;
 556              		.loc 1 383 0
 557 000c 8371     		strb	r3, [r0, #6]
 384:../drivers/fsl_uart.c **** }
 558              		.loc 1 384 0
 559 000e C371     		strb	r3, [r0, #7]
 385:../drivers/fsl_uart.c **** 
 560              		.loc 1 385 0
 561              		@ sp needed
 562 0010 7047     		bx	lr
 563              		.cfi_endproc
 564              	.LFE65:
 566              		.section	.text.UART_SetBaudRate,"ax",%progbits
 567              		.align	1
 568              		.global	UART_SetBaudRate
 569              		.syntax unified
 570              		.code	16
 571              		.thumb_func
 572              		.fpu softvfp
 574              	UART_SetBaudRate:
 575              	.LFB66:
 388:../drivers/fsl_uart.c ****     assert(baudRate_Bps);
 576              		.loc 1 388 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              	.LVL68:
 581 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 582              		.cfi_def_cfa_offset 20
 583              		.cfi_offset 4, -20
 584              		.cfi_offset 5, -16
 585              		.cfi_offset 6, -12
 586              		.cfi_offset 7, -8
 587              		.cfi_offset 14, -4
 588 0002 C646     		mov	lr, r8
 589 0004 00B5     		push	{lr}
 590              		.cfi_def_cfa_offset 24
 591              		.cfi_offset 8, -24
 592 0006 0700     		movs	r7, r0
 593 0008 8846     		mov	r8, r1
 594 000a 1500     		movs	r5, r2
 595              	.LVL69:
 396:../drivers/fsl_uart.c ****     /* set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate */
 596              		.loc 1 396 0
 597 000c 0901     		lsls	r1, r1, #4
 598              	.LVL70:
 599 000e 1000     		movs	r0, r2
 600              	.LVL71:
 601 0010 FFF7FEFF 		bl	__aeabi_uidiv
 602              	.LVL72:
 603 0014 86B2     		uxth	r6, r0
 604              	.LVL73:
 398:../drivers/fsl_uart.c ****     {
 605              		.loc 1 398 0
 606 0016 002E     		cmp	r6, #0
 607 0018 00D1     		bne	.L39
 400:../drivers/fsl_uart.c ****     }
 608              		.loc 1 400 0
 609 001a 0136     		adds	r6, r6, #1
 610              	.LVL74:
 611              	.L39:
 408:../drivers/fsl_uart.c **** 
 612              		.loc 1 408 0
 613 001c 6D00     		lsls	r5, r5, #1
 614              	.LVL75:
 615 001e 4146     		mov	r1, r8
 616 0020 2800     		movs	r0, r5
 617 0022 FFF7FEFF 		bl	__aeabi_uidiv
 618              	.LVL76:
 619 0026 84B2     		uxth	r4, r0
 620 0028 7101     		lsls	r1, r6, #5
 621 002a 88B2     		uxth	r0, r1
 622 002c 241A     		subs	r4, r4, r0
 623 002e A4B2     		uxth	r4, r4
 624              	.LVL77:
 411:../drivers/fsl_uart.c ****     baudDiff = (tempBaud > baudRate_Bps) ? (tempBaud - baudRate_Bps) : (baudRate_Bps - tempBaud);
 625              		.loc 1 411 0
 626 0030 6118     		adds	r1, r4, r1
 627 0032 2800     		movs	r0, r5
 628 0034 FFF7FEFF 		bl	__aeabi_uidiv
 629              	.LVL78:
 412:../drivers/fsl_uart.c **** #else
 630              		.loc 1 412 0
 631 0038 8045     		cmp	r8, r0
 632 003a 22D2     		bcs	.L40
 412:../drivers/fsl_uart.c **** #else
 633              		.loc 1 412 0 is_stmt 0 discriminator 1
 634 003c 4346     		mov	r3, r8
 635 003e C51A     		subs	r5, r0, r3
 636              	.LVL79:
 637              	.L41:
 427:../drivers/fsl_uart.c ****     {
 638              		.loc 1 427 0 is_stmt 1 discriminator 4
 639 0040 6421     		movs	r1, #100
 640 0042 4046     		mov	r0, r8
 641              	.LVL80:
 642 0044 FFF7FEFF 		bl	__aeabi_uidiv
 643              	.LVL81:
 644 0048 4300     		lsls	r3, r0, #1
 645 004a 1818     		adds	r0, r3, r0
 646 004c A842     		cmp	r0, r5
 647 004e 1BD9     		bls	.L44
 430:../drivers/fsl_uart.c **** 
 648              		.loc 1 430 0
 649 0050 FA78     		ldrb	r2, [r7, #3]
 650 0052 D2B2     		uxtb	r2, r2
 651              	.LVL82:
 433:../drivers/fsl_uart.c **** 
 652              		.loc 1 433 0
 653 0054 FB78     		ldrb	r3, [r7, #3]
 654 0056 0C21     		movs	r1, #12
 655 0058 8B43     		bics	r3, r1
 656 005a FB70     		strb	r3, [r7, #3]
 436:../drivers/fsl_uart.c ****         base->BDL = (uint8_t)sbr;
 657              		.loc 1 436 0
 658 005c 3B78     		ldrb	r3, [r7]
 659 005e 1331     		adds	r1, r1, #19
 660 0060 8B43     		bics	r3, r1
 661 0062 300A     		lsrs	r0, r6, #8
 662 0064 0343     		orrs	r3, r0
 663 0066 3B70     		strb	r3, [r7]
 437:../drivers/fsl_uart.c **** 
 664              		.loc 1 437 0
 665 0068 F6B2     		uxtb	r6, r6
 666              	.LVL83:
 667 006a 7E70     		strb	r6, [r7, #1]
 441:../drivers/fsl_uart.c **** #endif
 668              		.loc 1 441 0
 669 006c BB7A     		ldrb	r3, [r7, #10]
 670 006e 8B43     		bics	r3, r1
 671 0070 1F20     		movs	r0, #31
 672 0072 0440     		ands	r4, r0
 673              	.LVL84:
 674 0074 1C43     		orrs	r4, r3
 675 0076 BC72     		strb	r4, [r7, #10]
 444:../drivers/fsl_uart.c **** 
 676              		.loc 1 444 0
 677 0078 FA70     		strb	r2, [r7, #3]
 446:../drivers/fsl_uart.c ****     }
 678              		.loc 1 446 0
 679 007a 0020     		movs	r0, #0
 680              	.LVL85:
 681              	.L38:
 453:../drivers/fsl_uart.c **** 
 682              		.loc 1 453 0
 683              		@ sp needed
 684              	.LVL86:
 685              	.LVL87:
 686              	.LVL88:
 687 007c 04BC     		pop	{r2}
 688 007e 9046     		mov	r8, r2
 689 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 690              	.LVL89:
 691              	.L40:
 412:../drivers/fsl_uart.c **** #else
 692              		.loc 1 412 0 discriminator 2
 693 0082 4346     		mov	r3, r8
 694 0084 1D1A     		subs	r5, r3, r0
 695 0086 DBE7     		b	.L41
 696              	.LVL90:
 697              	.L44:
 451:../drivers/fsl_uart.c ****     }
 698              		.loc 1 451 0
 699 0088 0048     		ldr	r0, .L45
 700 008a F7E7     		b	.L38
 701              	.L46:
 702              		.align	2
 703              	.L45:
 704 008c F5030000 		.word	1013
 705              		.cfi_endproc
 706              	.LFE66:
 708              		.section	.text.UART_EnableInterrupts,"ax",%progbits
 709              		.align	1
 710              		.global	UART_EnableInterrupts
 711              		.syntax unified
 712              		.code	16
 713              		.thumb_func
 714              		.fpu softvfp
 716              	UART_EnableInterrupts:
 717              	.LFB67:
 456:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 718              		.loc 1 456 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL91:
 457:../drivers/fsl_uart.c **** 
 724              		.loc 1 457 0
 725 0000 074B     		ldr	r3, .L48
 726 0002 1940     		ands	r1, r3
 727              	.LVL92:
 461:../drivers/fsl_uart.c ****     base->C2 |= (mask >> 8);
 728              		.loc 1 461 0
 729 0004 0378     		ldrb	r3, [r0]
 730 0006 0B43     		orrs	r3, r1
 731 0008 DBB2     		uxtb	r3, r3
 732 000a 0370     		strb	r3, [r0]
 462:../drivers/fsl_uart.c ****     base->C3 |= (mask >> 16);
 733              		.loc 1 462 0
 734 000c C378     		ldrb	r3, [r0, #3]
 735 000e 0A0A     		lsrs	r2, r1, #8
 736 0010 1343     		orrs	r3, r2
 737 0012 DBB2     		uxtb	r3, r3
 738 0014 C370     		strb	r3, [r0, #3]
 463:../drivers/fsl_uart.c **** 
 739              		.loc 1 463 0
 740 0016 8379     		ldrb	r3, [r0, #6]
 741 0018 090C     		lsrs	r1, r1, #16
 742              	.LVL93:
 743 001a 1943     		orrs	r1, r3
 744 001c 8171     		strb	r1, [r0, #6]
 468:../drivers/fsl_uart.c **** 
 745              		.loc 1 468 0
 746              		@ sp needed
 747 001e 7047     		bx	lr
 748              	.L49:
 749              		.align	2
 750              	.L48:
 751 0020 40F00F00 		.word	1044544
 752              		.cfi_endproc
 753              	.LFE67:
 755              		.section	.text.UART_DisableInterrupts,"ax",%progbits
 756              		.align	1
 757              		.global	UART_DisableInterrupts
 758              		.syntax unified
 759              		.code	16
 760              		.thumb_func
 761              		.fpu softvfp
 763              	UART_DisableInterrupts:
 764              	.LFB68:
 471:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 765              		.loc 1 471 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 770              	.LVL94:
 472:../drivers/fsl_uart.c **** 
 771              		.loc 1 472 0
 772 0000 064B     		ldr	r3, .L51
 773 0002 1940     		ands	r1, r3
 774              	.LVL95:
 476:../drivers/fsl_uart.c ****     base->C2 &= ~(mask >> 8);
 775              		.loc 1 476 0
 776 0004 0378     		ldrb	r3, [r0]
 777 0006 8B43     		bics	r3, r1
 778 0008 0370     		strb	r3, [r0]
 477:../drivers/fsl_uart.c ****     base->C3 &= ~(mask >> 16);
 779              		.loc 1 477 0
 780 000a C378     		ldrb	r3, [r0, #3]
 781 000c 0A0A     		lsrs	r2, r1, #8
 782 000e 9343     		bics	r3, r2
 783 0010 C370     		strb	r3, [r0, #3]
 478:../drivers/fsl_uart.c **** 
 784              		.loc 1 478 0
 785 0012 8379     		ldrb	r3, [r0, #6]
 786 0014 090C     		lsrs	r1, r1, #16
 787              	.LVL96:
 788 0016 8B43     		bics	r3, r1
 789 0018 8371     		strb	r3, [r0, #6]
 483:../drivers/fsl_uart.c **** 
 790              		.loc 1 483 0
 791              		@ sp needed
 792 001a 7047     		bx	lr
 793              	.L52:
 794              		.align	2
 795              	.L51:
 796 001c 40F00F00 		.word	1044544
 797              		.cfi_endproc
 798              	.LFE68:
 800              		.section	.text.UART_TransferHandleIRQ,"ax",%progbits
 801              		.align	1
 802              		.global	UART_TransferHandleIRQ
 803              		.syntax unified
 804              		.code	16
 805              		.thumb_func
 806              		.fpu softvfp
 808              	UART_TransferHandleIRQ:
 809              	.LFB85:
 648:../drivers/fsl_uart.c **** 
 649:../drivers/fsl_uart.c **** void UART_TransferCreateHandle(UART_Type *base,
 650:../drivers/fsl_uart.c ****                                uart_handle_t *handle,
 651:../drivers/fsl_uart.c ****                                uart_transfer_callback_t callback,
 652:../drivers/fsl_uart.c ****                                void *userData)
 653:../drivers/fsl_uart.c **** {
 654:../drivers/fsl_uart.c ****     assert(handle);
 655:../drivers/fsl_uart.c **** 
 656:../drivers/fsl_uart.c ****     uint32_t instance;
 657:../drivers/fsl_uart.c **** 
 658:../drivers/fsl_uart.c ****     /* Zero the handle. */
 659:../drivers/fsl_uart.c ****     memset(handle, 0, sizeof(*handle));
 660:../drivers/fsl_uart.c **** 
 661:../drivers/fsl_uart.c ****     /* Set the TX/RX state. */
 662:../drivers/fsl_uart.c ****     handle->rxState = kUART_RxIdle;
 663:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 664:../drivers/fsl_uart.c **** 
 665:../drivers/fsl_uart.c ****     /* Set the callback and user data. */
 666:../drivers/fsl_uart.c ****     handle->callback = callback;
 667:../drivers/fsl_uart.c ****     handle->userData = userData;
 668:../drivers/fsl_uart.c **** 
 669:../drivers/fsl_uart.c ****     /* Get instance from peripheral base address. */
 670:../drivers/fsl_uart.c ****     instance = UART_GetInstance(base);
 671:../drivers/fsl_uart.c **** 
 672:../drivers/fsl_uart.c ****     /* Save the handle in global variables to support the double weak mechanism. */
 673:../drivers/fsl_uart.c ****     s_uartHandle[instance] = handle;
 674:../drivers/fsl_uart.c **** 
 675:../drivers/fsl_uart.c ****     s_uartIsr = UART_TransferHandleIRQ;
 676:../drivers/fsl_uart.c ****     /* Enable interrupt in NVIC. */
 677:../drivers/fsl_uart.c ****     EnableIRQ(s_uartIRQ[instance]);
 678:../drivers/fsl_uart.c **** }
 679:../drivers/fsl_uart.c **** 
 680:../drivers/fsl_uart.c **** void UART_TransferStartRingBuffer(UART_Type *base, uart_handle_t *handle, uint8_t *ringBuffer, size
 681:../drivers/fsl_uart.c **** {
 682:../drivers/fsl_uart.c ****     assert(handle);
 683:../drivers/fsl_uart.c ****     assert(ringBuffer);
 684:../drivers/fsl_uart.c **** 
 685:../drivers/fsl_uart.c ****     /* Setup the ringbuffer address */
 686:../drivers/fsl_uart.c ****     handle->rxRingBuffer = ringBuffer;
 687:../drivers/fsl_uart.c ****     handle->rxRingBufferSize = ringBufferSize;
 688:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 689:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 690:../drivers/fsl_uart.c **** 
 691:../drivers/fsl_uart.c ****     /* Enable the interrupt to accept the data when user need the ring buffer. */
 692:../drivers/fsl_uart.c ****     UART_EnableInterrupts(
 693:../drivers/fsl_uart.c ****         base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptEnable | kUART_FramingEr
 694:../drivers/fsl_uart.c ****     /* Enable parity error interrupt when parity mode is enable*/
 695:../drivers/fsl_uart.c ****     if (UART_C1_PE_MASK & base->C1)
 696:../drivers/fsl_uart.c ****     {
 697:../drivers/fsl_uart.c ****         UART_EnableInterrupts(base, kUART_ParityErrorInterruptEnable);
 698:../drivers/fsl_uart.c ****     }
 699:../drivers/fsl_uart.c **** }
 700:../drivers/fsl_uart.c **** 
 701:../drivers/fsl_uart.c **** void UART_TransferStopRingBuffer(UART_Type *base, uart_handle_t *handle)
 702:../drivers/fsl_uart.c **** {
 703:../drivers/fsl_uart.c ****     assert(handle);
 704:../drivers/fsl_uart.c **** 
 705:../drivers/fsl_uart.c ****     if (handle->rxState == kUART_RxIdle)
 706:../drivers/fsl_uart.c ****     {
 707:../drivers/fsl_uart.c ****         UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptE
 708:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable);
 709:../drivers/fsl_uart.c ****         /* Disable parity error interrupt when parity mode is enable*/
 710:../drivers/fsl_uart.c ****         if (UART_C1_PE_MASK & base->C1)
 711:../drivers/fsl_uart.c ****         {
 712:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
 713:../drivers/fsl_uart.c ****         }
 714:../drivers/fsl_uart.c ****     }
 715:../drivers/fsl_uart.c **** 
 716:../drivers/fsl_uart.c ****     handle->rxRingBuffer = NULL;
 717:../drivers/fsl_uart.c ****     handle->rxRingBufferSize = 0U;
 718:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 719:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 720:../drivers/fsl_uart.c **** }
 721:../drivers/fsl_uart.c **** 
 722:../drivers/fsl_uart.c **** status_t UART_TransferSendNonBlocking(UART_Type *base, uart_handle_t *handle, uart_transfer_t *xfer
 723:../drivers/fsl_uart.c **** {
 724:../drivers/fsl_uart.c ****     assert(handle);
 725:../drivers/fsl_uart.c ****     assert(xfer);
 726:../drivers/fsl_uart.c ****     assert(xfer->dataSize);
 727:../drivers/fsl_uart.c ****     assert(xfer->data);
 728:../drivers/fsl_uart.c **** 
 729:../drivers/fsl_uart.c ****     status_t status;
 730:../drivers/fsl_uart.c **** 
 731:../drivers/fsl_uart.c ****     /* Return error if current TX busy. */
 732:../drivers/fsl_uart.c ****     if (kUART_TxBusy == handle->txState)
 733:../drivers/fsl_uart.c ****     {
 734:../drivers/fsl_uart.c ****         status = kStatus_UART_TxBusy;
 735:../drivers/fsl_uart.c ****     }
 736:../drivers/fsl_uart.c ****     else
 737:../drivers/fsl_uart.c ****     {
 738:../drivers/fsl_uart.c ****         handle->txData = xfer->data;
 739:../drivers/fsl_uart.c ****         handle->txDataSize = xfer->dataSize;
 740:../drivers/fsl_uart.c ****         handle->txDataSizeAll = xfer->dataSize;
 741:../drivers/fsl_uart.c ****         handle->txState = kUART_TxBusy;
 742:../drivers/fsl_uart.c **** 
 743:../drivers/fsl_uart.c ****         /* Enable transmiter interrupt. */
 744:../drivers/fsl_uart.c ****         UART_EnableInterrupts(base, kUART_TxDataRegEmptyInterruptEnable);
 745:../drivers/fsl_uart.c **** 
 746:../drivers/fsl_uart.c ****         status = kStatus_Success;
 747:../drivers/fsl_uart.c ****     }
 748:../drivers/fsl_uart.c **** 
 749:../drivers/fsl_uart.c ****     return status;
 750:../drivers/fsl_uart.c **** }
 751:../drivers/fsl_uart.c **** 
 752:../drivers/fsl_uart.c **** void UART_TransferAbortSend(UART_Type *base, uart_handle_t *handle)
 753:../drivers/fsl_uart.c **** {
 754:../drivers/fsl_uart.c ****     assert(handle);
 755:../drivers/fsl_uart.c **** 
 756:../drivers/fsl_uart.c ****     UART_DisableInterrupts(base, kUART_TxDataRegEmptyInterruptEnable | kUART_TransmissionCompleteIn
 757:../drivers/fsl_uart.c **** 
 758:../drivers/fsl_uart.c ****     handle->txDataSize = 0;
 759:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 760:../drivers/fsl_uart.c **** }
 761:../drivers/fsl_uart.c **** 
 762:../drivers/fsl_uart.c **** status_t UART_TransferGetSendCount(UART_Type *base, uart_handle_t *handle, uint32_t *count)
 763:../drivers/fsl_uart.c **** {
 764:../drivers/fsl_uart.c ****     assert(handle);
 765:../drivers/fsl_uart.c ****     assert(count);
 766:../drivers/fsl_uart.c **** 
 767:../drivers/fsl_uart.c ****     if (kUART_TxIdle == handle->txState)
 768:../drivers/fsl_uart.c ****     {
 769:../drivers/fsl_uart.c ****         return kStatus_NoTransferInProgress;
 770:../drivers/fsl_uart.c ****     }
 771:../drivers/fsl_uart.c **** 
 772:../drivers/fsl_uart.c ****     *count = handle->txDataSizeAll - handle->txDataSize;
 773:../drivers/fsl_uart.c **** 
 774:../drivers/fsl_uart.c ****     return kStatus_Success;
 775:../drivers/fsl_uart.c **** }
 776:../drivers/fsl_uart.c **** 
 777:../drivers/fsl_uart.c **** status_t UART_TransferReceiveNonBlocking(UART_Type *base,
 778:../drivers/fsl_uart.c ****                                          uart_handle_t *handle,
 779:../drivers/fsl_uart.c ****                                          uart_transfer_t *xfer,
 780:../drivers/fsl_uart.c ****                                          size_t *receivedBytes)
 781:../drivers/fsl_uart.c **** {
 782:../drivers/fsl_uart.c ****     assert(handle);
 783:../drivers/fsl_uart.c ****     assert(xfer);
 784:../drivers/fsl_uart.c ****     assert(xfer->data);
 785:../drivers/fsl_uart.c ****     assert(xfer->dataSize);
 786:../drivers/fsl_uart.c **** 
 787:../drivers/fsl_uart.c ****     uint32_t i;
 788:../drivers/fsl_uart.c ****     status_t status;
 789:../drivers/fsl_uart.c ****     /* How many bytes to copy from ring buffer to user memory. */
 790:../drivers/fsl_uart.c ****     size_t bytesToCopy = 0U;
 791:../drivers/fsl_uart.c ****     /* How many bytes to receive. */
 792:../drivers/fsl_uart.c ****     size_t bytesToReceive;
 793:../drivers/fsl_uart.c ****     /* How many bytes currently have received. */
 794:../drivers/fsl_uart.c ****     size_t bytesCurrentReceived;
 795:../drivers/fsl_uart.c **** 
 796:../drivers/fsl_uart.c ****     /* How to get data:
 797:../drivers/fsl_uart.c ****        1. If RX ring buffer is not enabled, then save xfer->data and xfer->dataSize
 798:../drivers/fsl_uart.c ****           to uart handle, enable interrupt to store received data to xfer->data. When
 799:../drivers/fsl_uart.c ****           all data received, trigger callback.
 800:../drivers/fsl_uart.c ****        2. If RX ring buffer is enabled and not empty, get data from ring buffer first.
 801:../drivers/fsl_uart.c ****           If there are enough data in ring buffer, copy them to xfer->data and return.
 802:../drivers/fsl_uart.c ****           If there are not enough data in ring buffer, copy all of them to xfer->data,
 803:../drivers/fsl_uart.c ****           save the xfer->data remained empty space to uart handle, receive data
 804:../drivers/fsl_uart.c ****           to this empty space and trigger callback when finished. */
 805:../drivers/fsl_uart.c **** 
 806:../drivers/fsl_uart.c ****     if (kUART_RxBusy == handle->rxState)
 807:../drivers/fsl_uart.c ****     {
 808:../drivers/fsl_uart.c ****         status = kStatus_UART_RxBusy;
 809:../drivers/fsl_uart.c ****     }
 810:../drivers/fsl_uart.c ****     else
 811:../drivers/fsl_uart.c ****     {
 812:../drivers/fsl_uart.c ****         bytesToReceive = xfer->dataSize;
 813:../drivers/fsl_uart.c ****         bytesCurrentReceived = 0U;
 814:../drivers/fsl_uart.c **** 
 815:../drivers/fsl_uart.c ****         /* If RX ring buffer is used. */
 816:../drivers/fsl_uart.c ****         if (handle->rxRingBuffer)
 817:../drivers/fsl_uart.c ****         {
 818:../drivers/fsl_uart.c ****             /* Disable UART RX IRQ, protect ring buffer. */
 819:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable);
 820:../drivers/fsl_uart.c **** 
 821:../drivers/fsl_uart.c ****             /* How many bytes in RX ring buffer currently. */
 822:../drivers/fsl_uart.c ****             bytesToCopy = UART_TransferGetRxRingBufferLength(handle);
 823:../drivers/fsl_uart.c **** 
 824:../drivers/fsl_uart.c ****             if (bytesToCopy)
 825:../drivers/fsl_uart.c ****             {
 826:../drivers/fsl_uart.c ****                 bytesToCopy = MIN(bytesToReceive, bytesToCopy);
 827:../drivers/fsl_uart.c **** 
 828:../drivers/fsl_uart.c ****                 bytesToReceive -= bytesToCopy;
 829:../drivers/fsl_uart.c **** 
 830:../drivers/fsl_uart.c ****                 /* Copy data from ring buffer to user memory. */
 831:../drivers/fsl_uart.c ****                 for (i = 0U; i < bytesToCopy; i++)
 832:../drivers/fsl_uart.c ****                 {
 833:../drivers/fsl_uart.c ****                     xfer->data[bytesCurrentReceived++] = handle->rxRingBuffer[handle->rxRingBufferT
 834:../drivers/fsl_uart.c **** 
 835:../drivers/fsl_uart.c ****                     /* Wrap to 0. Not use modulo (%) because it might be large and slow. */
 836:../drivers/fsl_uart.c ****                     if (handle->rxRingBufferTail + 1U == handle->rxRingBufferSize)
 837:../drivers/fsl_uart.c ****                     {
 838:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail = 0U;
 839:../drivers/fsl_uart.c ****                     }
 840:../drivers/fsl_uart.c ****                     else
 841:../drivers/fsl_uart.c ****                     {
 842:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail++;
 843:../drivers/fsl_uart.c ****                     }
 844:../drivers/fsl_uart.c ****                 }
 845:../drivers/fsl_uart.c ****             }
 846:../drivers/fsl_uart.c **** 
 847:../drivers/fsl_uart.c ****             /* If ring buffer does not have enough data, still need to read more data. */
 848:../drivers/fsl_uart.c ****             if (bytesToReceive)
 849:../drivers/fsl_uart.c ****             {
 850:../drivers/fsl_uart.c ****                 /* No data in ring buffer, save the request to UART handle. */
 851:../drivers/fsl_uart.c ****                 handle->rxData = xfer->data + bytesCurrentReceived;
 852:../drivers/fsl_uart.c ****                 handle->rxDataSize = bytesToReceive;
 853:../drivers/fsl_uart.c ****                 handle->rxDataSizeAll = bytesToReceive;
 854:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxBusy;
 855:../drivers/fsl_uart.c ****             }
 856:../drivers/fsl_uart.c **** 
 857:../drivers/fsl_uart.c ****             /* Enable UART RX IRQ if previously enabled. */
 858:../drivers/fsl_uart.c ****             UART_EnableInterrupts(base, kUART_RxDataRegFullInterruptEnable);
 859:../drivers/fsl_uart.c **** 
 860:../drivers/fsl_uart.c ****             /* Call user callback since all data are received. */
 861:../drivers/fsl_uart.c ****             if (0 == bytesToReceive)
 862:../drivers/fsl_uart.c ****             {
 863:../drivers/fsl_uart.c ****                 if (handle->callback)
 864:../drivers/fsl_uart.c ****                 {
 865:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_RxIdle, handle->userData);
 866:../drivers/fsl_uart.c ****                 }
 867:../drivers/fsl_uart.c ****             }
 868:../drivers/fsl_uart.c ****         }
 869:../drivers/fsl_uart.c ****         /* Ring buffer not used. */
 870:../drivers/fsl_uart.c ****         else
 871:../drivers/fsl_uart.c ****         {
 872:../drivers/fsl_uart.c ****             handle->rxData = xfer->data + bytesCurrentReceived;
 873:../drivers/fsl_uart.c ****             handle->rxDataSize = bytesToReceive;
 874:../drivers/fsl_uart.c ****             handle->rxDataSizeAll = bytesToReceive;
 875:../drivers/fsl_uart.c ****             handle->rxState = kUART_RxBusy;
 876:../drivers/fsl_uart.c **** 
 877:../drivers/fsl_uart.c ****             /* Enable RX/Rx overrun/framing error/idle line interrupt. */
 878:../drivers/fsl_uart.c ****             UART_EnableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterru
 879:../drivers/fsl_uart.c ****                                             kUART_FramingErrorInterruptEnable | kUART_IdleLineInter
 880:../drivers/fsl_uart.c ****             /* Enable parity error interrupt when parity mode is enable*/
 881:../drivers/fsl_uart.c ****             if (UART_C1_PE_MASK & base->C1)
 882:../drivers/fsl_uart.c ****             {
 883:../drivers/fsl_uart.c ****                 UART_EnableInterrupts(base, kUART_ParityErrorInterruptEnable);
 884:../drivers/fsl_uart.c ****             }
 885:../drivers/fsl_uart.c ****         }
 886:../drivers/fsl_uart.c **** 
 887:../drivers/fsl_uart.c ****         /* Return the how many bytes have read. */
 888:../drivers/fsl_uart.c ****         if (receivedBytes)
 889:../drivers/fsl_uart.c ****         {
 890:../drivers/fsl_uart.c ****             *receivedBytes = bytesCurrentReceived;
 891:../drivers/fsl_uart.c ****         }
 892:../drivers/fsl_uart.c **** 
 893:../drivers/fsl_uart.c ****         status = kStatus_Success;
 894:../drivers/fsl_uart.c ****     }
 895:../drivers/fsl_uart.c **** 
 896:../drivers/fsl_uart.c ****     return status;
 897:../drivers/fsl_uart.c **** }
 898:../drivers/fsl_uart.c **** 
 899:../drivers/fsl_uart.c **** void UART_TransferAbortReceive(UART_Type *base, uart_handle_t *handle)
 900:../drivers/fsl_uart.c **** {
 901:../drivers/fsl_uart.c ****     assert(handle);
 902:../drivers/fsl_uart.c **** 
 903:../drivers/fsl_uart.c ****     /* Only abort the receive to handle->rxData, the RX ring buffer is still working. */
 904:../drivers/fsl_uart.c ****     if (!handle->rxRingBuffer)
 905:../drivers/fsl_uart.c ****     {
 906:../drivers/fsl_uart.c ****         /* Disable RX interrupt. */
 907:../drivers/fsl_uart.c ****         UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptE
 908:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable | kUART_IdleLineInterrup
 909:../drivers/fsl_uart.c ****         /* Disable parity error interrupt when parity mode is enable*/
 910:../drivers/fsl_uart.c ****         if (UART_C1_PE_MASK & base->C1)
 911:../drivers/fsl_uart.c ****         {
 912:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
 913:../drivers/fsl_uart.c ****         }
 914:../drivers/fsl_uart.c ****     }
 915:../drivers/fsl_uart.c **** 
 916:../drivers/fsl_uart.c ****     handle->rxDataSize = 0U;
 917:../drivers/fsl_uart.c ****     handle->rxState = kUART_RxIdle;
 918:../drivers/fsl_uart.c **** }
 919:../drivers/fsl_uart.c **** 
 920:../drivers/fsl_uart.c **** status_t UART_TransferGetReceiveCount(UART_Type *base, uart_handle_t *handle, uint32_t *count)
 921:../drivers/fsl_uart.c **** {
 922:../drivers/fsl_uart.c ****     assert(handle);
 923:../drivers/fsl_uart.c ****     assert(count);
 924:../drivers/fsl_uart.c **** 
 925:../drivers/fsl_uart.c ****     if (kUART_RxIdle == handle->rxState)
 926:../drivers/fsl_uart.c ****     {
 927:../drivers/fsl_uart.c ****         return kStatus_NoTransferInProgress;
 928:../drivers/fsl_uart.c ****     }
 929:../drivers/fsl_uart.c **** 
 930:../drivers/fsl_uart.c ****     if (!count)
 931:../drivers/fsl_uart.c ****     {
 932:../drivers/fsl_uart.c ****         return kStatus_InvalidArgument;
 933:../drivers/fsl_uart.c ****     }
 934:../drivers/fsl_uart.c **** 
 935:../drivers/fsl_uart.c ****     *count = handle->rxDataSizeAll - handle->rxDataSize;
 936:../drivers/fsl_uart.c **** 
 937:../drivers/fsl_uart.c ****     return kStatus_Success;
 938:../drivers/fsl_uart.c **** }
 939:../drivers/fsl_uart.c **** 
 940:../drivers/fsl_uart.c **** void UART_TransferHandleIRQ(UART_Type *base, uart_handle_t *handle)
 941:../drivers/fsl_uart.c **** {
 810              		.loc 1 941 0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 814              	.LVL97:
 815 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 816              		.cfi_def_cfa_offset 24
 817              		.cfi_offset 3, -24
 818              		.cfi_offset 4, -20
 819              		.cfi_offset 5, -16
 820              		.cfi_offset 6, -12
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 0002 0400     		movs	r4, r0
 824 0004 0D00     		movs	r5, r1
 942:../drivers/fsl_uart.c ****     assert(handle);
 943:../drivers/fsl_uart.c **** 
 944:../drivers/fsl_uart.c ****     uint8_t count;
 945:../drivers/fsl_uart.c ****     uint8_t tempCount;
 946:../drivers/fsl_uart.c **** 
 947:../drivers/fsl_uart.c ****     /* If RX framing error */
 948:../drivers/fsl_uart.c ****     if (UART_S1_FE_MASK & base->S1)
 825              		.loc 1 948 0
 826 0006 0379     		ldrb	r3, [r0, #4]
 827 0008 9B07     		lsls	r3, r3, #30
 828 000a 24D4     		bmi	.L54
 829              	.LVL98:
 830              	.L55:
 949:../drivers/fsl_uart.c ****     {
 950:../drivers/fsl_uart.c ****         /* Read base->D to clear framing error flag, otherwise the RX does not work. */
 951:../drivers/fsl_uart.c ****         while (base->S1 & UART_S1_RDRF_MASK)
 952:../drivers/fsl_uart.c ****         {
 953:../drivers/fsl_uart.c ****             (void)base->D;
 954:../drivers/fsl_uart.c ****         }
 955:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 956:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
 957:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
 958:../drivers/fsl_uart.c **** #endif
 959:../drivers/fsl_uart.c **** 
 960:../drivers/fsl_uart.c ****         handle->rxState = kUART_RxFramingError;
 961:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 962:../drivers/fsl_uart.c ****         /* Trigger callback. */
 963:../drivers/fsl_uart.c ****         if (handle->callback)
 964:../drivers/fsl_uart.c ****         {
 965:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_FramingError, handle->userData);
 966:../drivers/fsl_uart.c ****         }
 967:../drivers/fsl_uart.c ****     }
 968:../drivers/fsl_uart.c **** 
 969:../drivers/fsl_uart.c ****     /* If RX parity error */
 970:../drivers/fsl_uart.c ****     if (UART_S1_PF_MASK & base->S1)
 831              		.loc 1 970 0
 832 000c 2379     		ldrb	r3, [r4, #4]
 833 000e DB07     		lsls	r3, r3, #31
 834 0010 33D4     		bmi	.L57
 835              	.L58:
 971:../drivers/fsl_uart.c ****     {
 972:../drivers/fsl_uart.c ****         /* Read base->D to clear parity error flag, otherwise the RX does not work. */
 973:../drivers/fsl_uart.c ****         while (base->S1 & UART_S1_RDRF_MASK)
 974:../drivers/fsl_uart.c ****         {
 975:../drivers/fsl_uart.c ****             (void)base->D;
 976:../drivers/fsl_uart.c ****         }
 977:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 978:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
 979:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
 980:../drivers/fsl_uart.c **** #endif
 981:../drivers/fsl_uart.c **** 
 982:../drivers/fsl_uart.c ****         handle->rxState = kUART_RxParityError;
 983:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 984:../drivers/fsl_uart.c ****         /* Trigger callback. */
 985:../drivers/fsl_uart.c ****         if (handle->callback)
 986:../drivers/fsl_uart.c ****         {
 987:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_ParityError, handle->userData);
 988:../drivers/fsl_uart.c ****         }
 989:../drivers/fsl_uart.c ****     }
 990:../drivers/fsl_uart.c **** 
 991:../drivers/fsl_uart.c ****     /* If RX overrun. */
 992:../drivers/fsl_uart.c ****     if (UART_S1_OR_MASK & base->S1)
 836              		.loc 1 992 0
 837 0012 2379     		ldrb	r3, [r4, #4]
 838 0014 1B07     		lsls	r3, r3, #28
 839 0016 43D4     		bmi	.L60
 840              	.L61:
 993:../drivers/fsl_uart.c ****     {
 994:../drivers/fsl_uart.c ****         /* Read base->D to clear overrun flag, otherwise the RX does not work. */
 995:../drivers/fsl_uart.c ****         while (base->S1 & UART_S1_RDRF_MASK)
 996:../drivers/fsl_uart.c ****         {
 997:../drivers/fsl_uart.c ****             (void)base->D;
 998:../drivers/fsl_uart.c ****         }
 999:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1000:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
1001:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
1002:../drivers/fsl_uart.c **** #endif
1003:../drivers/fsl_uart.c ****         /* Trigger callback. */
1004:../drivers/fsl_uart.c ****         if (handle->callback)
1005:../drivers/fsl_uart.c ****         {
1006:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_RxHardwareOverrun, handle->userData);
1007:../drivers/fsl_uart.c ****         }
1008:../drivers/fsl_uart.c ****     }
1009:../drivers/fsl_uart.c **** 
1010:../drivers/fsl_uart.c ****     /* If IDLE line was detected. */
1011:../drivers/fsl_uart.c ****     if ((UART_S1_IDLE_MASK & base->S1) && (UART_C2_ILIE_MASK & base->C2))
 841              		.loc 1 1011 0
 842 0018 2379     		ldrb	r3, [r4, #4]
 843 001a DB06     		lsls	r3, r3, #27
 844 001c 02D5     		bpl	.L63
 845              		.loc 1 1011 0 is_stmt 0 discriminator 1
 846 001e E378     		ldrb	r3, [r4, #3]
 847 0020 DB06     		lsls	r3, r3, #27
 848 0022 4AD4     		bmi	.L64
 849              	.L63:
1012:../drivers/fsl_uart.c ****     {
1013:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1014:../drivers/fsl_uart.c ****         /* If still some data in the FIFO, read out these data to user data buffer. */
1015:../drivers/fsl_uart.c ****         count = base->RCFIFO;
1016:../drivers/fsl_uart.c ****         /* If handle->rxDataSize is not 0, first save data to handle->rxData. */
1017:../drivers/fsl_uart.c ****         while ((count) && (handle->rxDataSize))
1018:../drivers/fsl_uart.c ****         {
1019:../drivers/fsl_uart.c ****             tempCount = MIN(handle->rxDataSize, count);
1020:../drivers/fsl_uart.c **** 
1021:../drivers/fsl_uart.c ****             /* Using non block API to read the data from the registers. */
1022:../drivers/fsl_uart.c ****             UART_ReadNonBlocking(base, handle->rxData, tempCount);
1023:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
1024:../drivers/fsl_uart.c ****             handle->rxDataSize -= tempCount;
1025:../drivers/fsl_uart.c ****             count -= tempCount;
1026:../drivers/fsl_uart.c **** 
1027:../drivers/fsl_uart.c ****             /* If all the data required for upper layer is ready, trigger callback. */
1028:../drivers/fsl_uart.c ****             if (!handle->rxDataSize)
1029:../drivers/fsl_uart.c ****             {
1030:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxIdle;
1031:../drivers/fsl_uart.c **** 
1032:../drivers/fsl_uart.c ****                 /* Disable RX interrupt/overrun interrupt/fram error/idle line detected interrupt *
1033:../drivers/fsl_uart.c ****                 UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunIn
1034:../drivers/fsl_uart.c ****                                                  kUART_FramingErrorInterruptEnable);
1035:../drivers/fsl_uart.c **** 
1036:../drivers/fsl_uart.c ****                 /* Disable parity error interrupt when parity mode is enable*/
1037:../drivers/fsl_uart.c ****                 if (UART_C1_PE_MASK & base->C1)
1038:../drivers/fsl_uart.c ****                 {
1039:../drivers/fsl_uart.c ****                     UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
1040:../drivers/fsl_uart.c ****                 }
1041:../drivers/fsl_uart.c **** 
1042:../drivers/fsl_uart.c ****                 if (handle->callback)
1043:../drivers/fsl_uart.c ****                 {
1044:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_RxIdle, handle->userData);
1045:../drivers/fsl_uart.c ****                 }
1046:../drivers/fsl_uart.c ****             }
1047:../drivers/fsl_uart.c ****         }
1048:../drivers/fsl_uart.c **** #endif
1049:../drivers/fsl_uart.c ****         /* To clear IDLE, read UART status S1 with IDLE set and then read D.*/
1050:../drivers/fsl_uart.c ****         while (UART_S1_IDLE_MASK & base->S1)
1051:../drivers/fsl_uart.c ****         {
1052:../drivers/fsl_uart.c ****             (void)base->D;
1053:../drivers/fsl_uart.c ****         }
1054:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1055:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
1056:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
1057:../drivers/fsl_uart.c **** #endif
1058:../drivers/fsl_uart.c ****         /* If rxDataSize is 0, disable idle line interrupt.*/
1059:../drivers/fsl_uart.c ****         if (!(handle->rxDataSize))
1060:../drivers/fsl_uart.c ****         {
1061:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_IdleLineInterruptEnable);
1062:../drivers/fsl_uart.c ****         }
1063:../drivers/fsl_uart.c ****         /* If callback is not NULL and rxDataSize is not 0. */
1064:../drivers/fsl_uart.c ****         if ((handle->callback) && (handle->rxDataSize))
1065:../drivers/fsl_uart.c ****         {
1066:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_IdleLineDetected, handle->userData);
1067:../drivers/fsl_uart.c ****         }
1068:../drivers/fsl_uart.c ****     }
1069:../drivers/fsl_uart.c ****     /* Receive data register full */
1070:../drivers/fsl_uart.c ****     if ((UART_S1_RDRF_MASK & base->S1) && (UART_C2_RIE_MASK & base->C2))
 850              		.loc 1 1070 0 is_stmt 1
 851 0024 2379     		ldrb	r3, [r4, #4]
 852 0026 9B06     		lsls	r3, r3, #26
 853 0028 02D5     		bpl	.L67
 854              		.loc 1 1070 0 is_stmt 0 discriminator 1
 855 002a E378     		ldrb	r3, [r4, #3]
 856 002c 9B06     		lsls	r3, r3, #26
 857 002e 5CD4     		bmi	.L86
 858              	.L67:
1071:../drivers/fsl_uart.c ****     {
1072:../drivers/fsl_uart.c **** /* Get the size that can be stored into buffer for this interrupt. */
1073:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1074:../drivers/fsl_uart.c ****         count = base->RCFIFO;
1075:../drivers/fsl_uart.c **** #else
1076:../drivers/fsl_uart.c ****         count = 1;
1077:../drivers/fsl_uart.c **** #endif
1078:../drivers/fsl_uart.c **** 
1079:../drivers/fsl_uart.c ****         /* If handle->rxDataSize is not 0, first save data to handle->rxData. */
1080:../drivers/fsl_uart.c ****         while ((count) && (handle->rxDataSize))
1081:../drivers/fsl_uart.c ****         {
1082:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1083:../drivers/fsl_uart.c ****             tempCount = MIN(handle->rxDataSize, count);
1084:../drivers/fsl_uart.c **** #else
1085:../drivers/fsl_uart.c ****             tempCount = 1;
1086:../drivers/fsl_uart.c **** #endif
1087:../drivers/fsl_uart.c **** 
1088:../drivers/fsl_uart.c ****             /* Using non block API to read the data from the registers. */
1089:../drivers/fsl_uart.c ****             UART_ReadNonBlocking(base, handle->rxData, tempCount);
1090:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
1091:../drivers/fsl_uart.c ****             handle->rxDataSize -= tempCount;
1092:../drivers/fsl_uart.c ****             count -= tempCount;
1093:../drivers/fsl_uart.c **** 
1094:../drivers/fsl_uart.c ****             /* If all the data required for upper layer is ready, trigger callback. */
1095:../drivers/fsl_uart.c ****             if (!handle->rxDataSize)
1096:../drivers/fsl_uart.c ****             {
1097:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxIdle;
1098:../drivers/fsl_uart.c **** 
1099:../drivers/fsl_uart.c ****                 if (handle->callback)
1100:../drivers/fsl_uart.c ****                 {
1101:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_RxIdle, handle->userData);
1102:../drivers/fsl_uart.c ****                 }
1103:../drivers/fsl_uart.c ****             }
1104:../drivers/fsl_uart.c ****         }
1105:../drivers/fsl_uart.c **** 
1106:../drivers/fsl_uart.c ****         /* If use RX ring buffer, receive data to ring buffer. */
1107:../drivers/fsl_uart.c ****         if (handle->rxRingBuffer)
1108:../drivers/fsl_uart.c ****         {
1109:../drivers/fsl_uart.c ****             while (count--)
1110:../drivers/fsl_uart.c ****             {
1111:../drivers/fsl_uart.c ****                 /* If RX ring buffer is full, trigger callback to notify over run. */
1112:../drivers/fsl_uart.c ****                 if (UART_TransferIsRxRingBufferFull(handle))
1113:../drivers/fsl_uart.c ****                 {
1114:../drivers/fsl_uart.c ****                     if (handle->callback)
1115:../drivers/fsl_uart.c ****                     {
1116:../drivers/fsl_uart.c ****                         handle->callback(base, handle, kStatus_UART_RxRingBufferOverrun, handle->us
1117:../drivers/fsl_uart.c ****                     }
1118:../drivers/fsl_uart.c ****                 }
1119:../drivers/fsl_uart.c **** 
1120:../drivers/fsl_uart.c ****                 /* If ring buffer is still full after callback function, the oldest data is overrid
1121:../drivers/fsl_uart.c ****                 if (UART_TransferIsRxRingBufferFull(handle))
1122:../drivers/fsl_uart.c ****                 {
1123:../drivers/fsl_uart.c ****                     /* Increase handle->rxRingBufferTail to make room for new data. */
1124:../drivers/fsl_uart.c ****                     if (handle->rxRingBufferTail + 1U == handle->rxRingBufferSize)
1125:../drivers/fsl_uart.c ****                     {
1126:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail = 0U;
1127:../drivers/fsl_uart.c ****                     }
1128:../drivers/fsl_uart.c ****                     else
1129:../drivers/fsl_uart.c ****                     {
1130:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail++;
1131:../drivers/fsl_uart.c ****                     }
1132:../drivers/fsl_uart.c ****                 }
1133:../drivers/fsl_uart.c **** 
1134:../drivers/fsl_uart.c ****                 /* Read data. */
1135:../drivers/fsl_uart.c ****                 handle->rxRingBuffer[handle->rxRingBufferHead] = base->D;
1136:../drivers/fsl_uart.c **** 
1137:../drivers/fsl_uart.c ****                 /* Increase handle->rxRingBufferHead. */
1138:../drivers/fsl_uart.c ****                 if (handle->rxRingBufferHead + 1U == handle->rxRingBufferSize)
1139:../drivers/fsl_uart.c ****                 {
1140:../drivers/fsl_uart.c ****                     handle->rxRingBufferHead = 0U;
1141:../drivers/fsl_uart.c ****                 }
1142:../drivers/fsl_uart.c ****                 else
1143:../drivers/fsl_uart.c ****                 {
1144:../drivers/fsl_uart.c ****                     handle->rxRingBufferHead++;
1145:../drivers/fsl_uart.c ****                 }
1146:../drivers/fsl_uart.c ****             }
1147:../drivers/fsl_uart.c ****         }
1148:../drivers/fsl_uart.c **** 
1149:../drivers/fsl_uart.c ****         else if (!handle->rxDataSize)
1150:../drivers/fsl_uart.c ****         {
1151:../drivers/fsl_uart.c ****             /* Disable RX interrupt/overrun interrupt/fram error/idle line detected interrupt */
1152:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterr
1153:../drivers/fsl_uart.c ****                                              kUART_FramingErrorInterruptEnable);
1154:../drivers/fsl_uart.c **** 
1155:../drivers/fsl_uart.c ****             /* Disable parity error interrupt when parity mode is enable*/
1156:../drivers/fsl_uart.c ****             if (UART_C1_PE_MASK & base->C1)
1157:../drivers/fsl_uart.c ****             {
1158:../drivers/fsl_uart.c ****                 UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
1159:../drivers/fsl_uart.c ****             }
1160:../drivers/fsl_uart.c ****         }
1161:../drivers/fsl_uart.c ****         else
1162:../drivers/fsl_uart.c ****         {
1163:../drivers/fsl_uart.c ****         }
1164:../drivers/fsl_uart.c ****     }
1165:../drivers/fsl_uart.c **** 
1166:../drivers/fsl_uart.c ****     /* If framing error or parity error happened, stop the RX interrupt when ues no ring buffer */
1167:../drivers/fsl_uart.c ****     if (((handle->rxState == kUART_RxFramingError) || (handle->rxState == kUART_RxParityError)) &&
 859              		.loc 1 1167 0 is_stmt 1
 860 0030 2D23     		movs	r3, #45
 861 0032 EB5C     		ldrb	r3, [r5, r3]
 862 0034 042B     		cmp	r3, #4
 863 0036 03D0     		beq	.L80
 864              		.loc 1 1167 0 is_stmt 0 discriminator 2
 865 0038 2D23     		movs	r3, #45
 866 003a EB5C     		ldrb	r3, [r5, r3]
 867 003c 052B     		cmp	r3, #5
 868 003e 03D1     		bne	.L81
 869              	.L80:
 870              		.loc 1 1167 0 discriminator 3
 871 0040 AB69     		ldr	r3, [r5, #24]
 872 0042 002B     		cmp	r3, #0
 873 0044 00D1     		bne	.LCB859
 874 0046 BDE0     		b	.L89	@long jump
 875              	.LCB859:
 876              	.L81:
1168:../drivers/fsl_uart.c ****         (!handle->rxRingBuffer))
1169:../drivers/fsl_uart.c ****     {
1170:../drivers/fsl_uart.c ****         UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptE
1171:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable | kUART_IdleLineInterrup
1172:../drivers/fsl_uart.c **** 
1173:../drivers/fsl_uart.c ****         /* Disable parity error interrupt when parity mode is enable*/
1174:../drivers/fsl_uart.c ****         if (UART_C1_PE_MASK & base->C1)
1175:../drivers/fsl_uart.c ****         {
1176:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
1177:../drivers/fsl_uart.c ****         }
1178:../drivers/fsl_uart.c ****     }
1179:../drivers/fsl_uart.c **** 
1180:../drivers/fsl_uart.c ****     /* Send data register empty and the interrupt is enabled. */
1181:../drivers/fsl_uart.c ****     if ((base->S1 & UART_S1_TDRE_MASK) && (base->C2 & UART_C2_TIE_MASK))
 877              		.loc 1 1181 0 is_stmt 1
 878 0048 2379     		ldrb	r3, [r4, #4]
 879 004a 5BB2     		sxtb	r3, r3
 880 004c 002B     		cmp	r3, #0
 881 004e 00DA     		bge	.LCB866
 882 0050 C7E0     		b	.L90	@long jump
 883              	.LCB866:
 884              	.L53:
1182:../drivers/fsl_uart.c ****     {
1183:../drivers/fsl_uart.c **** /* Get the bytes that available at this moment. */
1184:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1185:../drivers/fsl_uart.c ****         count = FSL_FEATURE_UART_FIFO_SIZEn(base) - base->TCFIFO;
1186:../drivers/fsl_uart.c **** #else
1187:../drivers/fsl_uart.c ****         count = 1;
1188:../drivers/fsl_uart.c **** #endif
1189:../drivers/fsl_uart.c **** 
1190:../drivers/fsl_uart.c ****         while ((count) && (handle->txDataSize))
1191:../drivers/fsl_uart.c ****         {
1192:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1193:../drivers/fsl_uart.c ****             tempCount = MIN(handle->txDataSize, count);
1194:../drivers/fsl_uart.c **** #else
1195:../drivers/fsl_uart.c ****             tempCount = 1;
1196:../drivers/fsl_uart.c **** #endif
1197:../drivers/fsl_uart.c **** 
1198:../drivers/fsl_uart.c ****             /* Using non block API to write the data to the registers. */
1199:../drivers/fsl_uart.c ****             UART_WriteNonBlocking(base, handle->txData, tempCount);
1200:../drivers/fsl_uart.c ****             handle->txData += tempCount;
1201:../drivers/fsl_uart.c ****             handle->txDataSize -= tempCount;
1202:../drivers/fsl_uart.c ****             count -= tempCount;
1203:../drivers/fsl_uart.c **** 
1204:../drivers/fsl_uart.c ****             /* If all the data are written to data register, TX finished. */
1205:../drivers/fsl_uart.c ****             if (!handle->txDataSize)
1206:../drivers/fsl_uart.c ****             {
1207:../drivers/fsl_uart.c ****                 handle->txState = kUART_TxIdle;
1208:../drivers/fsl_uart.c **** 
1209:../drivers/fsl_uart.c ****                 /* Disable TX register empty interrupt. */
1210:../drivers/fsl_uart.c ****                 base->C2 = (base->C2 & ~UART_C2_TIE_MASK);
1211:../drivers/fsl_uart.c **** 
1212:../drivers/fsl_uart.c ****                 /* Trigger callback. */
1213:../drivers/fsl_uart.c ****                 if (handle->callback)
1214:../drivers/fsl_uart.c ****                 {
1215:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_TxIdle, handle->userData);
1216:../drivers/fsl_uart.c ****                 }
1217:../drivers/fsl_uart.c ****             }
1218:../drivers/fsl_uart.c ****         }
1219:../drivers/fsl_uart.c ****     }
1220:../drivers/fsl_uart.c **** }
 885              		.loc 1 1220 0
 886              		@ sp needed
 887              	.LVL99:
 888              	.LVL100:
 889 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 890              	.LVL101:
 891              	.L56:
 953:../drivers/fsl_uart.c ****         }
 892              		.loc 1 953 0
 893 0054 E379     		ldrb	r3, [r4, #7]
 894              	.L54:
 951:../drivers/fsl_uart.c ****         {
 895              		.loc 1 951 0
 896 0056 2379     		ldrb	r3, [r4, #4]
 897 0058 9B06     		lsls	r3, r3, #26
 898 005a FBD4     		bmi	.L56
 960:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 899              		.loc 1 960 0
 900 005c 2D23     		movs	r3, #45
 901 005e 0422     		movs	r2, #4
 902 0060 EA54     		strb	r2, [r5, r3]
 961:../drivers/fsl_uart.c ****         /* Trigger callback. */
 903              		.loc 1 961 0
 904 0062 0023     		movs	r3, #0
 905 0064 2B61     		str	r3, [r5, #16]
 963:../drivers/fsl_uart.c ****         {
 906              		.loc 1 963 0
 907 0066 6E6A     		ldr	r6, [r5, #36]
 908 0068 002E     		cmp	r6, #0
 909 006a CFD0     		beq	.L55
 965:../drivers/fsl_uart.c ****         }
 910              		.loc 1 965 0
 911 006c AB6A     		ldr	r3, [r5, #40]
 912 006e 734A     		ldr	r2, .L93
 913 0070 2900     		movs	r1, r5
 914              	.LVL102:
 915 0072 2000     		movs	r0, r4
 916              	.LVL103:
 917 0074 B047     		blx	r6
 918              	.LVL104:
 919 0076 C9E7     		b	.L55
 920              	.L59:
 975:../drivers/fsl_uart.c ****         }
 921              		.loc 1 975 0
 922 0078 E379     		ldrb	r3, [r4, #7]
 923              	.L57:
 973:../drivers/fsl_uart.c ****         {
 924              		.loc 1 973 0
 925 007a 2379     		ldrb	r3, [r4, #4]
 926 007c 9B06     		lsls	r3, r3, #26
 927 007e FBD4     		bmi	.L59
 982:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 928              		.loc 1 982 0
 929 0080 2D23     		movs	r3, #45
 930 0082 0522     		movs	r2, #5
 931 0084 EA54     		strb	r2, [r5, r3]
 983:../drivers/fsl_uart.c ****         /* Trigger callback. */
 932              		.loc 1 983 0
 933 0086 0023     		movs	r3, #0
 934 0088 2B61     		str	r3, [r5, #16]
 985:../drivers/fsl_uart.c ****         {
 935              		.loc 1 985 0
 936 008a 6E6A     		ldr	r6, [r5, #36]
 937 008c 002E     		cmp	r6, #0
 938 008e C0D0     		beq	.L58
 987:../drivers/fsl_uart.c ****         }
 939              		.loc 1 987 0
 940 0090 F832     		adds	r2, r2, #248
 941 0092 AB6A     		ldr	r3, [r5, #40]
 942 0094 9200     		lsls	r2, r2, #2
 943 0096 2900     		movs	r1, r5
 944 0098 2000     		movs	r0, r4
 945 009a B047     		blx	r6
 946              	.LVL105:
 947 009c B9E7     		b	.L58
 948              	.L62:
 997:../drivers/fsl_uart.c ****         }
 949              		.loc 1 997 0
 950 009e E379     		ldrb	r3, [r4, #7]
 951              	.L60:
 995:../drivers/fsl_uart.c ****         {
 952              		.loc 1 995 0
 953 00a0 2379     		ldrb	r3, [r4, #4]
 954 00a2 9B06     		lsls	r3, r3, #26
 955 00a4 FBD4     		bmi	.L62
1004:../drivers/fsl_uart.c ****         {
 956              		.loc 1 1004 0
 957 00a6 6E6A     		ldr	r6, [r5, #36]
 958 00a8 002E     		cmp	r6, #0
 959 00aa B5D0     		beq	.L61
1006:../drivers/fsl_uart.c ****         }
 960              		.loc 1 1006 0
 961 00ac AB6A     		ldr	r3, [r5, #40]
 962 00ae 644A     		ldr	r2, .L93+4
 963 00b0 2900     		movs	r1, r5
 964 00b2 2000     		movs	r0, r4
 965 00b4 B047     		blx	r6
 966              	.LVL106:
 967 00b6 AFE7     		b	.L61
 968              	.L65:
1052:../drivers/fsl_uart.c ****         }
 969              		.loc 1 1052 0
 970 00b8 E379     		ldrb	r3, [r4, #7]
 971              	.L64:
1050:../drivers/fsl_uart.c ****         {
 972              		.loc 1 1050 0
 973 00ba 2379     		ldrb	r3, [r4, #4]
 974 00bc DB06     		lsls	r3, r3, #27
 975 00be FBD4     		bmi	.L65
1059:../drivers/fsl_uart.c ****         {
 976              		.loc 1 1059 0
 977 00c0 2B69     		ldr	r3, [r5, #16]
 978 00c2 002B     		cmp	r3, #0
 979 00c4 0BD0     		beq	.L91
 980              	.L66:
1064:../drivers/fsl_uart.c ****         {
 981              		.loc 1 1064 0
 982 00c6 6E6A     		ldr	r6, [r5, #36]
 983 00c8 002E     		cmp	r6, #0
 984 00ca ABD0     		beq	.L63
1064:../drivers/fsl_uart.c ****         {
 985              		.loc 1 1064 0 is_stmt 0 discriminator 1
 986 00cc 2B69     		ldr	r3, [r5, #16]
 987 00ce 002B     		cmp	r3, #0
 988 00d0 A8D0     		beq	.L63
1066:../drivers/fsl_uart.c ****         }
 989              		.loc 1 1066 0 is_stmt 1
 990 00d2 AB6A     		ldr	r3, [r5, #40]
 991 00d4 5B4A     		ldr	r2, .L93+8
 992 00d6 2900     		movs	r1, r5
 993 00d8 2000     		movs	r0, r4
 994 00da B047     		blx	r6
 995              	.LVL107:
 996 00dc A2E7     		b	.L63
 997              	.L91:
1061:../drivers/fsl_uart.c ****         }
 998              		.loc 1 1061 0
 999 00de 8021     		movs	r1, #128
 1000 00e0 4901     		lsls	r1, r1, #5
 1001 00e2 2000     		movs	r0, r4
 1002 00e4 FFF7FEFF 		bl	UART_DisableInterrupts
 1003              	.LVL108:
 1004 00e8 EDE7     		b	.L66
 1005              	.L86:
1076:../drivers/fsl_uart.c **** #endif
 1006              		.loc 1 1076 0
 1007 00ea 0126     		movs	r6, #1
 1008              	.L68:
 1009              	.LVL109:
1080:../drivers/fsl_uart.c ****         {
 1010              		.loc 1 1080 0
 1011 00ec 002E     		cmp	r6, #0
 1012 00ee 1ED0     		beq	.L70
1080:../drivers/fsl_uart.c ****         {
 1013              		.loc 1 1080 0 is_stmt 0 discriminator 1
 1014 00f0 2B69     		ldr	r3, [r5, #16]
 1015 00f2 002B     		cmp	r3, #0
 1016 00f4 1BD0     		beq	.L70
 1017              	.LVL110:
1089:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
 1018              		.loc 1 1089 0 is_stmt 1
 1019 00f6 E968     		ldr	r1, [r5, #12]
 1020 00f8 0122     		movs	r2, #1
 1021 00fa 2000     		movs	r0, r4
 1022 00fc FFF7FEFF 		bl	UART_ReadNonBlocking
 1023              	.LVL111:
1090:../drivers/fsl_uart.c ****             handle->rxDataSize -= tempCount;
 1024              		.loc 1 1090 0
 1025 0100 EB68     		ldr	r3, [r5, #12]
 1026 0102 0133     		adds	r3, r3, #1
 1027 0104 EB60     		str	r3, [r5, #12]
1091:../drivers/fsl_uart.c ****             count -= tempCount;
 1028              		.loc 1 1091 0
 1029 0106 2B69     		ldr	r3, [r5, #16]
 1030 0108 013B     		subs	r3, r3, #1
 1031 010a 2B61     		str	r3, [r5, #16]
1092:../drivers/fsl_uart.c **** 
 1032              		.loc 1 1092 0
 1033 010c 013E     		subs	r6, r6, #1
 1034              	.LVL112:
 1035 010e F6B2     		uxtb	r6, r6
 1036              	.LVL113:
1095:../drivers/fsl_uart.c ****             {
 1037              		.loc 1 1095 0
 1038 0110 2B69     		ldr	r3, [r5, #16]
 1039 0112 002B     		cmp	r3, #0
 1040 0114 EAD1     		bne	.L68
1097:../drivers/fsl_uart.c **** 
 1041              		.loc 1 1097 0
 1042 0116 2D33     		adds	r3, r3, #45
 1043 0118 0222     		movs	r2, #2
 1044 011a EA54     		strb	r2, [r5, r3]
1099:../drivers/fsl_uart.c ****                 {
 1045              		.loc 1 1099 0
 1046 011c 6F6A     		ldr	r7, [r5, #36]
 1047 011e 002F     		cmp	r7, #0
 1048 0120 E4D0     		beq	.L68
1101:../drivers/fsl_uart.c ****                 }
 1049              		.loc 1 1101 0
 1050 0122 AB6A     		ldr	r3, [r5, #40]
 1051 0124 484A     		ldr	r2, .L93+12
 1052 0126 2900     		movs	r1, r5
 1053 0128 2000     		movs	r0, r4
 1054 012a B847     		blx	r7
 1055              	.LVL114:
 1056 012c DEE7     		b	.L68
 1057              	.LVL115:
 1058              	.L70:
1107:../drivers/fsl_uart.c ****         {
 1059              		.loc 1 1107 0
 1060 012e AB69     		ldr	r3, [r5, #24]
 1061 0130 002B     		cmp	r3, #0
 1062 0132 24D1     		bne	.L72
1149:../drivers/fsl_uart.c ****         {
 1063              		.loc 1 1149 0
 1064 0134 2B69     		ldr	r3, [r5, #16]
 1065 0136 002B     		cmp	r3, #0
 1066 0138 00D0     		beq	.LCB1071
 1067 013a 79E7     		b	.L67	@long jump
 1068              	.LCB1071:
1152:../drivers/fsl_uart.c ****                                              kUART_FramingErrorInterruptEnable);
 1069              		.loc 1 1152 0
 1070 013c A221     		movs	r1, #162
 1071 013e 0903     		lsls	r1, r1, #12
 1072 0140 2000     		movs	r0, r4
 1073 0142 FFF7FEFF 		bl	UART_DisableInterrupts
 1074              	.LVL116:
1156:../drivers/fsl_uart.c ****             {
 1075              		.loc 1 1156 0
 1076 0146 A378     		ldrb	r3, [r4, #2]
 1077 0148 9B07     		lsls	r3, r3, #30
 1078 014a 00D4     		bmi	.LCB1083
 1079 014c 70E7     		b	.L67	@long jump
 1080              	.LCB1083:
1158:../drivers/fsl_uart.c ****             }
 1081              		.loc 1 1158 0
 1082 014e 8021     		movs	r1, #128
 1083 0150 4902     		lsls	r1, r1, #9
 1084 0152 2000     		movs	r0, r4
 1085 0154 FFF7FEFF 		bl	UART_DisableInterrupts
 1086              	.LVL117:
 1087 0158 6AE7     		b	.L67
 1088              	.LVL118:
 1089              	.L76:
1130:../drivers/fsl_uart.c ****                     }
 1090              		.loc 1 1130 0
 1091 015a 6B8C     		ldrh	r3, [r5, #34]
 1092 015c 0133     		adds	r3, r3, #1
 1093 015e 9BB2     		uxth	r3, r3
 1094 0160 6B84     		strh	r3, [r5, #34]
 1095              	.L75:
1135:../drivers/fsl_uart.c **** 
 1096              		.loc 1 1135 0
 1097 0162 2B8C     		ldrh	r3, [r5, #32]
 1098 0164 E279     		ldrb	r2, [r4, #7]
 1099 0166 A969     		ldr	r1, [r5, #24]
 1100 0168 CA54     		strb	r2, [r1, r3]
1138:../drivers/fsl_uart.c ****                 {
 1101              		.loc 1 1138 0
 1102 016a 2B8C     		ldrh	r3, [r5, #32]
 1103 016c 0133     		adds	r3, r3, #1
 1104 016e EA69     		ldr	r2, [r5, #28]
 1105 0170 9342     		cmp	r3, r2
 1106 0172 24D0     		beq	.L92
1144:../drivers/fsl_uart.c ****                 }
 1107              		.loc 1 1144 0
 1108 0174 2B8C     		ldrh	r3, [r5, #32]
 1109 0176 0133     		adds	r3, r3, #1
 1110 0178 9BB2     		uxth	r3, r3
 1111 017a 2B84     		strh	r3, [r5, #32]
 1112              	.L78:
1076:../drivers/fsl_uart.c **** #endif
 1113              		.loc 1 1076 0
 1114 017c 3E00     		movs	r6, r7
 1115              	.LVL119:
 1116              	.L72:
1109:../drivers/fsl_uart.c ****             {
 1117              		.loc 1 1109 0
 1118 017e 771E     		subs	r7, r6, #1
 1119 0180 FFB2     		uxtb	r7, r7
 1120              	.LVL120:
 1121 0182 002E     		cmp	r6, #0
 1122 0184 00D1     		bne	.LCB1136
 1123 0186 53E7     		b	.L67	@long jump
 1124              	.LCB1136:
1112:../drivers/fsl_uart.c ****                 {
 1125              		.loc 1 1112 0
 1126 0188 2800     		movs	r0, r5
 1127 018a FFF7FEFF 		bl	UART_TransferIsRxRingBufferFull
 1128              	.LVL121:
 1129 018e 0028     		cmp	r0, #0
 1130 0190 08D0     		beq	.L74
1114:../drivers/fsl_uart.c ****                     {
 1131              		.loc 1 1114 0
 1132 0192 6E6A     		ldr	r6, [r5, #36]
 1133 0194 002E     		cmp	r6, #0
 1134 0196 05D0     		beq	.L74
1116:../drivers/fsl_uart.c ****                     }
 1135              		.loc 1 1116 0
 1136 0198 FC22     		movs	r2, #252
 1137 019a AB6A     		ldr	r3, [r5, #40]
 1138 019c 9200     		lsls	r2, r2, #2
 1139 019e 2900     		movs	r1, r5
 1140 01a0 2000     		movs	r0, r4
 1141 01a2 B047     		blx	r6
 1142              	.LVL122:
 1143              	.L74:
1121:../drivers/fsl_uart.c ****                 {
 1144              		.loc 1 1121 0
 1145 01a4 2800     		movs	r0, r5
 1146 01a6 FFF7FEFF 		bl	UART_TransferIsRxRingBufferFull
 1147              	.LVL123:
 1148 01aa 0028     		cmp	r0, #0
 1149 01ac D9D0     		beq	.L75
1124:../drivers/fsl_uart.c ****                     {
 1150              		.loc 1 1124 0
 1151 01ae 6B8C     		ldrh	r3, [r5, #34]
 1152 01b0 0133     		adds	r3, r3, #1
 1153 01b2 EA69     		ldr	r2, [r5, #28]
 1154 01b4 9342     		cmp	r3, r2
 1155 01b6 D0D1     		bne	.L76
1126:../drivers/fsl_uart.c ****                     }
 1156              		.loc 1 1126 0
 1157 01b8 0023     		movs	r3, #0
 1158 01ba 6B84     		strh	r3, [r5, #34]
 1159 01bc D1E7     		b	.L75
 1160              	.L92:
1140:../drivers/fsl_uart.c ****                 }
 1161              		.loc 1 1140 0
 1162 01be 0023     		movs	r3, #0
 1163 01c0 2B84     		strh	r3, [r5, #32]
 1164 01c2 DBE7     		b	.L78
 1165              	.LVL124:
 1166              	.L89:
1170:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable | kUART_IdleLineInterrup
 1167              		.loc 1 1170 0
 1168 01c4 A321     		movs	r1, #163
 1169 01c6 0903     		lsls	r1, r1, #12
 1170 01c8 2000     		movs	r0, r4
 1171 01ca FFF7FEFF 		bl	UART_DisableInterrupts
 1172              	.LVL125:
1174:../drivers/fsl_uart.c ****         {
 1173              		.loc 1 1174 0
 1174 01ce A378     		ldrb	r3, [r4, #2]
 1175 01d0 9B07     		lsls	r3, r3, #30
 1176 01d2 00D4     		bmi	.LCB1194
 1177 01d4 38E7     		b	.L81	@long jump
 1178              	.LCB1194:
1176:../drivers/fsl_uart.c ****         }
 1179              		.loc 1 1176 0
 1180 01d6 8021     		movs	r1, #128
 1181 01d8 4902     		lsls	r1, r1, #9
 1182 01da 2000     		movs	r0, r4
 1183 01dc FFF7FEFF 		bl	UART_DisableInterrupts
 1184              	.LVL126:
 1185 01e0 32E7     		b	.L81
 1186              	.L90:
1181:../drivers/fsl_uart.c ****     {
 1187              		.loc 1 1181 0 discriminator 1
 1188 01e2 E378     		ldrb	r3, [r4, #3]
 1189 01e4 5BB2     		sxtb	r3, r3
 1190 01e6 002B     		cmp	r3, #0
 1191 01e8 00DB     		blt	.LCB1210
 1192 01ea 32E7     		b	.L53	@long jump
 1193              	.LCB1210:
1187:../drivers/fsl_uart.c **** #endif
 1194              		.loc 1 1187 0
 1195 01ec 0126     		movs	r6, #1
 1196              	.L83:
 1197              	.LVL127:
1190:../drivers/fsl_uart.c ****         {
 1198              		.loc 1 1190 0
 1199 01ee 002E     		cmp	r6, #0
 1200 01f0 00D1     		bne	.LCB1216
 1201 01f2 2EE7     		b	.L53	@long jump
 1202              	.LCB1216:
1190:../drivers/fsl_uart.c ****         {
 1203              		.loc 1 1190 0 is_stmt 0 discriminator 1
 1204 01f4 6B68     		ldr	r3, [r5, #4]
 1205 01f6 002B     		cmp	r3, #0
 1206 01f8 00D1     		bne	.LCB1219
 1207 01fa 2AE7     		b	.L53	@long jump
 1208              	.LCB1219:
 1209              	.LVL128:
1199:../drivers/fsl_uart.c ****             handle->txData += tempCount;
 1210              		.loc 1 1199 0 is_stmt 1
 1211 01fc 2968     		ldr	r1, [r5]
 1212 01fe 0122     		movs	r2, #1
 1213 0200 2000     		movs	r0, r4
 1214 0202 FFF7FEFF 		bl	UART_WriteNonBlocking
 1215              	.LVL129:
1200:../drivers/fsl_uart.c ****             handle->txDataSize -= tempCount;
 1216              		.loc 1 1200 0
 1217 0206 2B68     		ldr	r3, [r5]
 1218 0208 0133     		adds	r3, r3, #1
 1219 020a 2B60     		str	r3, [r5]
1201:../drivers/fsl_uart.c ****             count -= tempCount;
 1220              		.loc 1 1201 0
 1221 020c 6B68     		ldr	r3, [r5, #4]
 1222 020e 013B     		subs	r3, r3, #1
 1223 0210 6B60     		str	r3, [r5, #4]
1202:../drivers/fsl_uart.c **** 
 1224              		.loc 1 1202 0
 1225 0212 013E     		subs	r6, r6, #1
 1226              	.LVL130:
 1227 0214 F6B2     		uxtb	r6, r6
 1228              	.LVL131:
1205:../drivers/fsl_uart.c ****             {
 1229              		.loc 1 1205 0
 1230 0216 6B68     		ldr	r3, [r5, #4]
 1231 0218 002B     		cmp	r3, #0
 1232 021a E8D1     		bne	.L83
1207:../drivers/fsl_uart.c **** 
 1233              		.loc 1 1207 0
 1234 021c 2C33     		adds	r3, r3, #44
 1235 021e 0022     		movs	r2, #0
 1236 0220 EA54     		strb	r2, [r5, r3]
1210:../drivers/fsl_uart.c **** 
 1237              		.loc 1 1210 0
 1238 0222 E378     		ldrb	r3, [r4, #3]
 1239 0224 7F32     		adds	r2, r2, #127
 1240 0226 1340     		ands	r3, r2
 1241 0228 E370     		strb	r3, [r4, #3]
1213:../drivers/fsl_uart.c ****                 {
 1242              		.loc 1 1213 0
 1243 022a 6F6A     		ldr	r7, [r5, #36]
 1244 022c 002F     		cmp	r7, #0
 1245 022e DED0     		beq	.L83
1215:../drivers/fsl_uart.c ****                 }
 1246              		.loc 1 1215 0
 1247 0230 AB6A     		ldr	r3, [r5, #40]
 1248 0232 064A     		ldr	r2, .L93+16
 1249 0234 2900     		movs	r1, r5
 1250 0236 2000     		movs	r0, r4
 1251 0238 B847     		blx	r7
 1252              	.LVL132:
 1253 023a D8E7     		b	.L83
 1254              	.L94:
 1255              		.align	2
 1256              	.L93:
 1257 023c F3030000 		.word	1011
 1258 0240 F1030000 		.word	1009
 1259 0244 F6030000 		.word	1014
 1260 0248 EB030000 		.word	1003
 1261 024c EA030000 		.word	1002
 1262              		.cfi_endproc
 1263              	.LFE85:
 1265              		.section	.text.UART_GetEnabledInterrupts,"ax",%progbits
 1266              		.align	1
 1267              		.global	UART_GetEnabledInterrupts
 1268              		.syntax unified
 1269              		.code	16
 1270              		.thumb_func
 1271              		.fpu softvfp
 1273              	UART_GetEnabledInterrupts:
 1274              	.LFB69:
 486:../drivers/fsl_uart.c ****     uint32_t temp;
 1275              		.loc 1 486 0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
 1279              		@ link register save eliminated.
 1280              	.LVL133:
 489:../drivers/fsl_uart.c **** 
 1281              		.loc 1 489 0
 1282 0000 0378     		ldrb	r3, [r0]
 1283 0002 C278     		ldrb	r2, [r0, #3]
 1284 0004 1202     		lsls	r2, r2, #8
 1285 0006 1343     		orrs	r3, r2
 1286 0008 8079     		ldrb	r0, [r0, #6]
 1287              	.LVL134:
 1288 000a 0004     		lsls	r0, r0, #16
 1289 000c 1843     		orrs	r0, r3
 1290              	.LVL135:
 495:../drivers/fsl_uart.c **** }
 1291              		.loc 1 495 0
 1292 000e 014B     		ldr	r3, .L96
 1293 0010 1840     		ands	r0, r3
 1294              	.LVL136:
 496:../drivers/fsl_uart.c **** 
 1295              		.loc 1 496 0
 1296              		@ sp needed
 1297 0012 7047     		bx	lr
 1298              	.L97:
 1299              		.align	2
 1300              	.L96:
 1301 0014 40F00F00 		.word	1044544
 1302              		.cfi_endproc
 1303              	.LFE69:
 1305              		.section	.text.UART_GetStatusFlags,"ax",%progbits
 1306              		.align	1
 1307              		.global	UART_GetStatusFlags
 1308              		.syntax unified
 1309              		.code	16
 1310              		.thumb_func
 1311              		.fpu softvfp
 1313              	UART_GetStatusFlags:
 1314              	.LFB70:
 499:../drivers/fsl_uart.c ****     uint32_t status_flag;
 1315              		.loc 1 499 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319              		@ link register save eliminated.
 1320              	.LVL137:
 502:../drivers/fsl_uart.c **** 
 1321              		.loc 1 502 0
 1322 0000 0379     		ldrb	r3, [r0, #4]
 1323 0002 4079     		ldrb	r0, [r0, #5]
 1324              	.LVL138:
 1325 0004 0002     		lsls	r0, r0, #8
 1326 0006 1843     		orrs	r0, r3
 1327              	.LVL139:
 513:../drivers/fsl_uart.c **** 
 1328              		.loc 1 513 0
 1329              		@ sp needed
 1330 0008 7047     		bx	lr
 1331              		.cfi_endproc
 1332              	.LFE70:
 1334              		.section	.text.UART_ClearStatusFlags,"ax",%progbits
 1335              		.align	1
 1336              		.global	UART_ClearStatusFlags
 1337              		.syntax unified
 1338              		.code	16
 1339              		.thumb_func
 1340              		.fpu softvfp
 1342              	UART_ClearStatusFlags:
 1343              	.LFB71:
 516:../drivers/fsl_uart.c ****     uint8_t reg = base->S2;
 1344              		.loc 1 516 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 0
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348              	.LVL140:
 1349 0000 10B5     		push	{r4, lr}
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 4, -8
 1352              		.cfi_offset 14, -4
 1353 0002 0C00     		movs	r4, r1
 517:../drivers/fsl_uart.c ****     status_t status;
 1354              		.loc 1 517 0
 1355 0004 4379     		ldrb	r3, [r0, #5]
 1356              	.LVL141:
 523:../drivers/fsl_uart.c **** #endif
 1357              		.loc 1 523 0
 1358 0006 4022     		movs	r2, #64
 1359 0008 9343     		bics	r3, r2
 1360              	.LVL142:
 1361 000a 1A00     		movs	r2, r3
 1362              	.LVL143:
 526:../drivers/fsl_uart.c **** 
 1363              		.loc 1 526 0
 1364 000c 0B0A     		lsrs	r3, r1, #8
 1365 000e DBB2     		uxtb	r3, r3
 1366 0010 1343     		orrs	r3, r2
 1367 0012 4371     		strb	r3, [r0, #5]
 532:../drivers/fsl_uart.c ****     {
 1368              		.loc 1 532 0
 1369 0014 1723     		movs	r3, #23
 1370 0016 0B42     		tst	r3, r1
 1371 0018 01D0     		beq	.L100
 535:../drivers/fsl_uart.c ****         (void)base->D;
 1372              		.loc 1 535 0
 1373 001a 0379     		ldrb	r3, [r0, #4]
 536:../drivers/fsl_uart.c ****     }
 1374              		.loc 1 536 0
 1375 001c C379     		ldrb	r3, [r0, #7]
 1376              	.L100:
 539:../drivers/fsl_uart.c ****     {
 1377              		.loc 1 539 0
 1378 001e 2307     		lsls	r3, r4, #28
 1379 0020 01D5     		bpl	.L101
 542:../drivers/fsl_uart.c ****         (void)base->D;
 1380              		.loc 1 542 0
 1381 0022 0379     		ldrb	r3, [r0, #4]
 543:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 1382              		.loc 1 543 0
 1383 0024 C379     		ldrb	r3, [r0, #7]
 1384              	.L101:
 551:../drivers/fsl_uart.c ****     {
 1385              		.loc 1 551 0
 1386 0026 FFF7FEFF 		bl	UART_GetStatusFlags
 1387              	.LVL144:
 1388 002a 0442     		tst	r4, r0
 1389 002c 01D1     		bne	.L104
 560:../drivers/fsl_uart.c ****     }
 1390              		.loc 1 560 0
 1391 002e 0020     		movs	r0, #0
 1392              	.LVL145:
 1393              	.L99:
 564:../drivers/fsl_uart.c **** 
 1394              		.loc 1 564 0
 1395              		@ sp needed
 1396              	.LVL146:
 1397 0030 10BD     		pop	{r4, pc}
 1398              	.LVL147:
 1399              	.L104:
 556:../drivers/fsl_uart.c ****     }
 1400              		.loc 1 556 0
 1401 0032 0148     		ldr	r0, .L105
 1402 0034 FCE7     		b	.L99
 1403              	.L106:
 1404 0036 C046     		.align	2
 1405              	.L105:
 1406 0038 EE030000 		.word	1006
 1407              		.cfi_endproc
 1408              	.LFE71:
 1410              		.section	.text.UART_WriteBlocking,"ax",%progbits
 1411              		.align	1
 1412              		.global	UART_WriteBlocking
 1413              		.syntax unified
 1414              		.code	16
 1415              		.thumb_func
 1416              		.fpu softvfp
 1418              	UART_WriteBlocking:
 1419              	.LFB72:
 567:../drivers/fsl_uart.c ****     /* This API can only ensure that the data is written into the data buffer but can't
 1420              		.loc 1 567 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424              	.LVL148:
 1425 0000 10B5     		push	{r4, lr}
 1426              		.cfi_def_cfa_offset 8
 1427              		.cfi_offset 4, -8
 1428              		.cfi_offset 14, -4
 570:../drivers/fsl_uart.c ****     {
 1429              		.loc 1 570 0
 1430 0002 07E0     		b	.L108
 1431              	.LVL149:
 1432              	.L109:
 572:../drivers/fsl_uart.c ****         {
 1433              		.loc 1 572 0 discriminator 1
 1434 0004 0379     		ldrb	r3, [r0, #4]
 1435 0006 5BB2     		sxtb	r3, r3
 1436 0008 002B     		cmp	r3, #0
 1437 000a FBDA     		bge	.L109
 1438              	.LVL150:
 575:../drivers/fsl_uart.c ****     }
 1439              		.loc 1 575 0
 1440 000c 0B78     		ldrb	r3, [r1]
 1441 000e C371     		strb	r3, [r0, #7]
 570:../drivers/fsl_uart.c ****     {
 1442              		.loc 1 570 0
 1443 0010 2200     		movs	r2, r4
 575:../drivers/fsl_uart.c ****     }
 1444              		.loc 1 575 0
 1445 0012 0131     		adds	r1, r1, #1
 1446              	.LVL151:
 1447              	.L108:
 570:../drivers/fsl_uart.c ****     {
 1448              		.loc 1 570 0
 1449 0014 541E     		subs	r4, r2, #1
 1450              	.LVL152:
 1451 0016 002A     		cmp	r2, #0
 1452 0018 F4D1     		bne	.L109
 577:../drivers/fsl_uart.c **** 
 1453              		.loc 1 577 0
 1454              		@ sp needed
 1455              	.LVL153:
 1456 001a 10BD     		pop	{r4, pc}
 1457              		.cfi_endproc
 1458              	.LFE72:
 1460              		.section	.text.UART_ReadBlocking,"ax",%progbits
 1461              		.align	1
 1462              		.global	UART_ReadBlocking
 1463              		.syntax unified
 1464              		.code	16
 1465              		.thumb_func
 1466              		.fpu softvfp
 1468              	UART_ReadBlocking:
 1469              	.LFB74:
 594:../drivers/fsl_uart.c ****     assert(data);
 1470              		.loc 1 594 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474              	.LVL154:
 1475 0000 70B5     		push	{r4, r5, r6, lr}
 1476              		.cfi_def_cfa_offset 16
 1477              		.cfi_offset 4, -16
 1478              		.cfi_offset 5, -12
 1479              		.cfi_offset 6, -8
 1480              		.cfi_offset 14, -4
 1481 0002 0400     		movs	r4, r0
 1482 0004 0D00     		movs	r5, r1
 1483              	.LVL155:
 1484              	.L111:
 599:../drivers/fsl_uart.c ****     {
 1485              		.loc 1 599 0
 1486 0006 561E     		subs	r6, r2, #1
 1487              	.LVL156:
 1488 0008 002A     		cmp	r2, #0
 1489 000a 15D0     		beq	.L119
 1490              	.L114:
 604:../drivers/fsl_uart.c **** #endif
 1491              		.loc 1 604 0
 1492 000c 2379     		ldrb	r3, [r4, #4]
 1493 000e 9B06     		lsls	r3, r3, #26
 1494 0010 0DD4     		bmi	.L120
 607:../drivers/fsl_uart.c **** 
 1495              		.loc 1 607 0
 1496 0012 2000     		movs	r0, r4
 1497 0014 FFF7FEFF 		bl	UART_GetStatusFlags
 1498              	.LVL157:
 609:../drivers/fsl_uart.c ****             {
 1499              		.loc 1 609 0
 1500 0018 0307     		lsls	r3, r0, #28
 1501 001a 0FD4     		bmi	.L115
 614:../drivers/fsl_uart.c ****             {
 1502              		.loc 1 614 0
 1503 001c 4307     		lsls	r3, r0, #29
 1504 001e 0FD4     		bmi	.L116
 619:../drivers/fsl_uart.c ****             {
 1505              		.loc 1 619 0
 1506 0020 8307     		lsls	r3, r0, #30
 1507 0022 0FD4     		bmi	.L117
 624:../drivers/fsl_uart.c ****             {
 1508              		.loc 1 624 0
 1509 0024 C307     		lsls	r3, r0, #31
 1510 0026 F1D5     		bpl	.L114
 626:../drivers/fsl_uart.c ****             }
 1511              		.loc 1 626 0
 1512 0028 FD20     		movs	r0, #253
 1513              	.LVL158:
 1514 002a 8000     		lsls	r0, r0, #2
 1515 002c 07E0     		b	.L110
 1516              	.L120:
 1517              	.LVL159:
 629:../drivers/fsl_uart.c ****     }
 1518              		.loc 1 629 0
 1519 002e E379     		ldrb	r3, [r4, #7]
 1520 0030 2B70     		strb	r3, [r5]
 599:../drivers/fsl_uart.c ****     {
 1521              		.loc 1 599 0
 1522 0032 3200     		movs	r2, r6
 629:../drivers/fsl_uart.c ****     }
 1523              		.loc 1 629 0
 1524 0034 0135     		adds	r5, r5, #1
 1525              	.LVL160:
 1526 0036 E6E7     		b	.L111
 1527              	.L119:
 632:../drivers/fsl_uart.c **** }
 1528              		.loc 1 632 0
 1529 0038 0020     		movs	r0, #0
 1530 003a 00E0     		b	.L110
 1531              	.LVL161:
 1532              	.L115:
 611:../drivers/fsl_uart.c ****             }
 1533              		.loc 1 611 0
 1534 003c 0248     		ldr	r0, .L121
 1535              	.LVL162:
 1536              	.L110:
 633:../drivers/fsl_uart.c **** 
 1537              		.loc 1 633 0
 1538              		@ sp needed
 1539              	.LVL163:
 1540              	.LVL164:
 1541              	.LVL165:
 1542 003e 70BD     		pop	{r4, r5, r6, pc}
 1543              	.LVL166:
 1544              	.L116:
 616:../drivers/fsl_uart.c ****             }
 1545              		.loc 1 616 0
 1546 0040 0248     		ldr	r0, .L121+4
 1547              	.LVL167:
 1548 0042 FCE7     		b	.L110
 1549              	.LVL168:
 1550              	.L117:
 621:../drivers/fsl_uart.c ****             }
 1551              		.loc 1 621 0
 1552 0044 0248     		ldr	r0, .L121+8
 1553              	.LVL169:
 1554 0046 FAE7     		b	.L110
 1555              	.L122:
 1556              		.align	2
 1557              	.L121:
 1558 0048 F1030000 		.word	1009
 1559 004c F2030000 		.word	1010
 1560 0050 F3030000 		.word	1011
 1561              		.cfi_endproc
 1562              	.LFE74:
 1564              		.section	.text.UART_TransferCreateHandle,"ax",%progbits
 1565              		.align	1
 1566              		.global	UART_TransferCreateHandle
 1567              		.syntax unified
 1568              		.code	16
 1569              		.thumb_func
 1570              		.fpu softvfp
 1572              	UART_TransferCreateHandle:
 1573              	.LFB76:
 653:../drivers/fsl_uart.c ****     assert(handle);
 1574              		.loc 1 653 0
 1575              		.cfi_startproc
 1576              		@ args = 0, pretend = 0, frame = 0
 1577              		@ frame_needed = 0, uses_anonymous_args = 0
 1578              	.LVL170:
 1579 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1580              		.cfi_def_cfa_offset 24
 1581              		.cfi_offset 3, -24
 1582              		.cfi_offset 4, -20
 1583              		.cfi_offset 5, -16
 1584              		.cfi_offset 6, -12
 1585              		.cfi_offset 7, -8
 1586              		.cfi_offset 14, -4
 1587 0002 0500     		movs	r5, r0
 1588 0004 0C00     		movs	r4, r1
 1589 0006 1700     		movs	r7, r2
 1590 0008 1E00     		movs	r6, r3
 659:../drivers/fsl_uart.c **** 
 1591              		.loc 1 659 0
 1592 000a 3022     		movs	r2, #48
 1593              	.LVL171:
 1594 000c 0021     		movs	r1, #0
 1595              	.LVL172:
 1596 000e 2000     		movs	r0, r4
 1597              	.LVL173:
 1598 0010 FFF7FEFF 		bl	memset
 1599              	.LVL174:
 662:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 1600              		.loc 1 662 0
 1601 0014 2D23     		movs	r3, #45
 1602 0016 0222     		movs	r2, #2
 1603 0018 E254     		strb	r2, [r4, r3]
 663:../drivers/fsl_uart.c **** 
 1604              		.loc 1 663 0
 1605 001a 013B     		subs	r3, r3, #1
 1606 001c 0022     		movs	r2, #0
 1607 001e E254     		strb	r2, [r4, r3]
 666:../drivers/fsl_uart.c ****     handle->userData = userData;
 1608              		.loc 1 666 0
 1609 0020 6762     		str	r7, [r4, #36]
 667:../drivers/fsl_uart.c **** 
 1610              		.loc 1 667 0
 1611 0022 A662     		str	r6, [r4, #40]
 670:../drivers/fsl_uart.c **** 
 1612              		.loc 1 670 0
 1613 0024 2800     		movs	r0, r5
 1614 0026 FFF7FEFF 		bl	UART_GetInstance
 1615              	.LVL175:
 673:../drivers/fsl_uart.c **** 
 1616              		.loc 1 673 0
 1617 002a 8200     		lsls	r2, r0, #2
 1618 002c 094B     		ldr	r3, .L125
 1619 002e D450     		str	r4, [r2, r3]
 675:../drivers/fsl_uart.c ****     /* Enable interrupt in NVIC. */
 1620              		.loc 1 675 0
 1621 0030 094B     		ldr	r3, .L125+4
 1622 0032 0A4A     		ldr	r2, .L125+8
 1623 0034 1A60     		str	r2, [r3]
 677:../drivers/fsl_uart.c **** }
 1624              		.loc 1 677 0
 1625 0036 0A4B     		ldr	r3, .L125+12
 1626 0038 1B56     		ldrsb	r3, [r3, r0]
 1627              	.LVL176:
 1628              	.LBB16:
 1629              	.LBB17:
 1630              		.file 3 "../drivers/fsl_common.h"
   1:../drivers/fsl_common.h **** /*
   2:../drivers/fsl_common.h ****  * The Clear BSD License
   3:../drivers/fsl_common.h ****  * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_common.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_common.h ****  * All rights reserved.
   6:../drivers/fsl_common.h ****  *
   7:../drivers/fsl_common.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_common.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_common.h ****  * that the following conditions are met:
  10:../drivers/fsl_common.h ****  *
  11:../drivers/fsl_common.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_common.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_common.h ****  *
  14:../drivers/fsl_common.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_common.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_common.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_common.h ****  *
  18:../drivers/fsl_common.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_common.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_common.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_common.h ****  *
  22:../drivers/fsl_common.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_common.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_common.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_common.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_common.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_common.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_common.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_common.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_common.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_common.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_common.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_common.h ****  */
  34:../drivers/fsl_common.h **** 
  35:../drivers/fsl_common.h **** #ifndef _FSL_COMMON_H_
  36:../drivers/fsl_common.h **** #define _FSL_COMMON_H_
  37:../drivers/fsl_common.h **** 
  38:../drivers/fsl_common.h **** #include <assert.h>
  39:../drivers/fsl_common.h **** #include <stdbool.h>
  40:../drivers/fsl_common.h **** #include <stdint.h>
  41:../drivers/fsl_common.h **** #include <string.h>
  42:../drivers/fsl_common.h **** 
  43:../drivers/fsl_common.h **** #if defined(__ICCARM__)
  44:../drivers/fsl_common.h **** #include <stddef.h>
  45:../drivers/fsl_common.h **** #endif
  46:../drivers/fsl_common.h **** 
  47:../drivers/fsl_common.h **** #include "fsl_device_registers.h"
  48:../drivers/fsl_common.h **** 
  49:../drivers/fsl_common.h **** /*!
  50:../drivers/fsl_common.h ****  * @addtogroup ksdk_common
  51:../drivers/fsl_common.h ****  * @{
  52:../drivers/fsl_common.h ****  */
  53:../drivers/fsl_common.h **** 
  54:../drivers/fsl_common.h **** /*******************************************************************************
  55:../drivers/fsl_common.h ****  * Definitions
  56:../drivers/fsl_common.h ****  ******************************************************************************/
  57:../drivers/fsl_common.h **** 
  58:../drivers/fsl_common.h **** /*! @brief Construct a status code value from a group and code number. */
  59:../drivers/fsl_common.h **** #define MAKE_STATUS(group, code) ((((group)*100) + (code)))
  60:../drivers/fsl_common.h **** 
  61:../drivers/fsl_common.h **** /*! @brief Construct the version number for drivers. */
  62:../drivers/fsl_common.h **** #define MAKE_VERSION(major, minor, bugfix) (((major) << 16) | ((minor) << 8) | (bugfix))
  63:../drivers/fsl_common.h **** 
  64:../drivers/fsl_common.h **** /*! @name Driver version */
  65:../drivers/fsl_common.h **** /*@{*/
  66:../drivers/fsl_common.h **** /*! @brief common driver version 2.0.0. */
  67:../drivers/fsl_common.h **** #define FSL_COMMON_DRIVER_VERSION (MAKE_VERSION(2, 0, 0))
  68:../drivers/fsl_common.h **** /*@}*/
  69:../drivers/fsl_common.h **** 
  70:../drivers/fsl_common.h **** /* Debug console type definition. */
  71:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_NONE 0U     /*!< No debug console.             */
  72:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_UART 1U     /*!< Debug console base on UART.   */
  73:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_LPUART 2U   /*!< Debug console base on LPUART. */
  74:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_LPSCI 3U    /*!< Debug console base on LPSCI.  */
  75:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_USBCDC 4U   /*!< Debug console base on USBCDC. */
  76:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_FLEXCOMM 5U /*!< Debug console base on USBCDC. */
  77:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_IUART 6U    /*!< Debug console base on i.MX UART. */
  78:../drivers/fsl_common.h **** #define DEBUG_CONSOLE_DEVICE_TYPE_VUSART 7U   /*!< Debug console base on LPC_USART. */
  79:../drivers/fsl_common.h **** 
  80:../drivers/fsl_common.h **** /*! @brief Status group numbers. */
  81:../drivers/fsl_common.h **** enum _status_groups
  82:../drivers/fsl_common.h **** {
  83:../drivers/fsl_common.h ****     kStatusGroup_Generic = 0,                 /*!< Group number for generic status codes. */
  84:../drivers/fsl_common.h ****     kStatusGroup_FLASH = 1,                   /*!< Group number for FLASH status codes. */
  85:../drivers/fsl_common.h ****     kStatusGroup_LPSPI = 4,                   /*!< Group number for LPSPI status codes. */
  86:../drivers/fsl_common.h ****     kStatusGroup_FLEXIO_SPI = 5,              /*!< Group number for FLEXIO SPI status codes. */
  87:../drivers/fsl_common.h ****     kStatusGroup_DSPI = 6,                    /*!< Group number for DSPI status codes. */
  88:../drivers/fsl_common.h ****     kStatusGroup_FLEXIO_UART = 7,             /*!< Group number for FLEXIO UART status codes. */
  89:../drivers/fsl_common.h ****     kStatusGroup_FLEXIO_I2C = 8,              /*!< Group number for FLEXIO I2C status codes. */
  90:../drivers/fsl_common.h ****     kStatusGroup_LPI2C = 9,                   /*!< Group number for LPI2C status codes. */
  91:../drivers/fsl_common.h ****     kStatusGroup_UART = 10,                   /*!< Group number for UART status codes. */
  92:../drivers/fsl_common.h ****     kStatusGroup_I2C = 11,                    /*!< Group number for UART status codes. */
  93:../drivers/fsl_common.h ****     kStatusGroup_LPSCI = 12,                  /*!< Group number for LPSCI status codes. */
  94:../drivers/fsl_common.h ****     kStatusGroup_LPUART = 13,                 /*!< Group number for LPUART status codes. */
  95:../drivers/fsl_common.h ****     kStatusGroup_SPI = 14,                    /*!< Group number for SPI status code.*/
  96:../drivers/fsl_common.h ****     kStatusGroup_XRDC = 15,                   /*!< Group number for XRDC status code.*/
  97:../drivers/fsl_common.h ****     kStatusGroup_SEMA42 = 16,                 /*!< Group number for SEMA42 status code.*/
  98:../drivers/fsl_common.h ****     kStatusGroup_SDHC = 17,                   /*!< Group number for SDHC status code */
  99:../drivers/fsl_common.h ****     kStatusGroup_SDMMC = 18,                  /*!< Group number for SDMMC status code */
 100:../drivers/fsl_common.h ****     kStatusGroup_SAI = 19,                    /*!< Group number for SAI status code */
 101:../drivers/fsl_common.h ****     kStatusGroup_MCG = 20,                    /*!< Group number for MCG status codes. */
 102:../drivers/fsl_common.h ****     kStatusGroup_SCG = 21,                    /*!< Group number for SCG status codes. */
 103:../drivers/fsl_common.h ****     kStatusGroup_SDSPI = 22,                  /*!< Group number for SDSPI status codes. */
 104:../drivers/fsl_common.h ****     kStatusGroup_FLEXIO_I2S = 23,             /*!< Group number for FLEXIO I2S status codes */
 105:../drivers/fsl_common.h ****     kStatusGroup_FLEXIO_MCULCD = 24,          /*!< Group number for FLEXIO LCD status codes */
 106:../drivers/fsl_common.h ****     kStatusGroup_FLASHIAP = 25,               /*!< Group number for FLASHIAP status codes */
 107:../drivers/fsl_common.h ****     kStatusGroup_FLEXCOMM_I2C = 26,           /*!< Group number for FLEXCOMM I2C status codes */
 108:../drivers/fsl_common.h ****     kStatusGroup_I2S = 27,                    /*!< Group number for I2S status codes */
 109:../drivers/fsl_common.h ****     kStatusGroup_IUART = 28,                  /*!< Group number for IUART status codes */
 110:../drivers/fsl_common.h ****     kStatusGroup_CSI = 29,                    /*!< Group number for CSI status codes */
 111:../drivers/fsl_common.h ****     kStatusGroup_MIPI_DSI = 30,               /*!< Group number for MIPI DSI status codes */
 112:../drivers/fsl_common.h ****     kStatusGroup_SDRAMC = 35,                 /*!< Group number for SDRAMC status codes. */
 113:../drivers/fsl_common.h ****     kStatusGroup_POWER = 39,                  /*!< Group number for POWER status codes. */
 114:../drivers/fsl_common.h ****     kStatusGroup_ENET = 40,                   /*!< Group number for ENET status codes. */
 115:../drivers/fsl_common.h ****     kStatusGroup_PHY = 41,                    /*!< Group number for PHY status codes. */
 116:../drivers/fsl_common.h ****     kStatusGroup_TRGMUX = 42,                 /*!< Group number for TRGMUX status codes. */
 117:../drivers/fsl_common.h ****     kStatusGroup_SMARTCARD = 43,              /*!< Group number for SMARTCARD status codes. */
 118:../drivers/fsl_common.h ****     kStatusGroup_LMEM = 44,                   /*!< Group number for LMEM status codes. */
 119:../drivers/fsl_common.h ****     kStatusGroup_QSPI = 45,                   /*!< Group number for QSPI status codes. */
 120:../drivers/fsl_common.h ****     kStatusGroup_DMA = 50,                    /*!< Group number for DMA status codes. */
 121:../drivers/fsl_common.h ****     kStatusGroup_EDMA = 51,                   /*!< Group number for EDMA status codes. */
 122:../drivers/fsl_common.h ****     kStatusGroup_DMAMGR = 52,                 /*!< Group number for DMAMGR status codes. */
 123:../drivers/fsl_common.h ****     kStatusGroup_FLEXCAN = 53,                /*!< Group number for FlexCAN status codes. */
 124:../drivers/fsl_common.h ****     kStatusGroup_LTC = 54,                    /*!< Group number for LTC status codes. */
 125:../drivers/fsl_common.h ****     kStatusGroup_FLEXIO_CAMERA = 55,          /*!< Group number for FLEXIO CAMERA status codes. */
 126:../drivers/fsl_common.h ****     kStatusGroup_LPC_SPI = 56,                /*!< Group number for LPC_SPI status codes. */
 127:../drivers/fsl_common.h ****     kStatusGroup_LPC_USART = 57,              /*!< Group number for LPC_USART status codes. */
 128:../drivers/fsl_common.h ****     kStatusGroup_DMIC = 58,                   /*!< Group number for DMIC status codes. */
 129:../drivers/fsl_common.h ****     kStatusGroup_SDIF = 59,                   /*!< Group number for SDIF status codes.*/
 130:../drivers/fsl_common.h ****     kStatusGroup_SPIFI = 60,                  /*!< Group number for SPIFI status codes. */
 131:../drivers/fsl_common.h ****     kStatusGroup_OTP = 61,                    /*!< Group number for OTP status codes. */
 132:../drivers/fsl_common.h ****     kStatusGroup_MCAN = 62,                   /*!< Group number for MCAN status codes. */
 133:../drivers/fsl_common.h ****     kStatusGroup_CAAM = 63,                   /*!< Group number for CAAM status codes. */
 134:../drivers/fsl_common.h ****     kStatusGroup_ECSPI = 64,                  /*!< Group number for ECSPI status codes. */
 135:../drivers/fsl_common.h ****     kStatusGroup_USDHC = 65,                  /*!< Group number for USDHC status codes.*/
 136:../drivers/fsl_common.h ****     kStatusGroup_LPC_I2C = 66,                /*!< Group number for LPC_I2C status codes.*/
 137:../drivers/fsl_common.h ****     kStatusGroup_DCP = 67,                    /*!< Group number for DCP status codes.*/
 138:../drivers/fsl_common.h ****     kStatusGroup_MSCAN = 68,                  /*!< Group number for MSCAN status codes.*/
 139:../drivers/fsl_common.h ****     kStatusGroup_ESAI = 69,                   /*!< Group number for ESAI status codes. */
 140:../drivers/fsl_common.h ****     kStatusGroup_FLEXSPI = 70,                /*!< Group number for FLEXSPI status codes. */
 141:../drivers/fsl_common.h ****     kStatusGroup_MMDC = 71,                   /*!< Group number for MMDC status codes. */
 142:../drivers/fsl_common.h ****     kStatusGroup_MICFIL = 72,                 /*!< Group number for MIC status codes. */
 143:../drivers/fsl_common.h ****     kStatusGroup_SDMA = 73,                   /*!< Group number for SDMA status codes. */
 144:../drivers/fsl_common.h ****     kStatusGroup_ICS = 74,                    /*!< Group number for ICS status codes. */
 145:../drivers/fsl_common.h ****     kStatusGroup_SPDIF = 75,                  /*!< Group number for SPDIF status codes. */
 146:../drivers/fsl_common.h ****     kStatusGroup_NOTIFIER = 98,               /*!< Group number for NOTIFIER status codes. */
 147:../drivers/fsl_common.h ****     kStatusGroup_DebugConsole = 99,           /*!< Group number for debug console status codes. */
 148:../drivers/fsl_common.h ****     kStatusGroup_SEMC = 100,                   /*!< Group number for SEMC status codes. */    
 149:../drivers/fsl_common.h ****     kStatusGroup_ApplicationRangeStart = 101, /*!< Starting number for application groups. */
 150:../drivers/fsl_common.h **** };
 151:../drivers/fsl_common.h **** 
 152:../drivers/fsl_common.h **** /*! @brief Generic status return codes. */
 153:../drivers/fsl_common.h **** enum _generic_status
 154:../drivers/fsl_common.h **** {
 155:../drivers/fsl_common.h ****     kStatus_Success = MAKE_STATUS(kStatusGroup_Generic, 0),
 156:../drivers/fsl_common.h ****     kStatus_Fail = MAKE_STATUS(kStatusGroup_Generic, 1),
 157:../drivers/fsl_common.h ****     kStatus_ReadOnly = MAKE_STATUS(kStatusGroup_Generic, 2),
 158:../drivers/fsl_common.h ****     kStatus_OutOfRange = MAKE_STATUS(kStatusGroup_Generic, 3),
 159:../drivers/fsl_common.h ****     kStatus_InvalidArgument = MAKE_STATUS(kStatusGroup_Generic, 4),
 160:../drivers/fsl_common.h ****     kStatus_Timeout = MAKE_STATUS(kStatusGroup_Generic, 5),
 161:../drivers/fsl_common.h ****     kStatus_NoTransferInProgress = MAKE_STATUS(kStatusGroup_Generic, 6),
 162:../drivers/fsl_common.h **** };
 163:../drivers/fsl_common.h **** 
 164:../drivers/fsl_common.h **** /*! @brief Type used for all status and error return values. */
 165:../drivers/fsl_common.h **** typedef int32_t status_t;
 166:../drivers/fsl_common.h **** 
 167:../drivers/fsl_common.h **** /*
 168:../drivers/fsl_common.h ****  * The fsl_clock.h is included here because it needs MAKE_VERSION/MAKE_STATUS/status_t
 169:../drivers/fsl_common.h ****  * defined in previous of this file.
 170:../drivers/fsl_common.h ****  */
 171:../drivers/fsl_common.h **** #include "fsl_clock.h"
 172:../drivers/fsl_common.h **** 
 173:../drivers/fsl_common.h **** /*
 174:../drivers/fsl_common.h ****  * Chip level peripheral reset API, for MCUs that implement peripheral reset control external to a 
 175:../drivers/fsl_common.h ****  */
 176:../drivers/fsl_common.h **** #if ((defined(FSL_FEATURE_SOC_SYSCON_COUNT) && (FSL_FEATURE_SOC_SYSCON_COUNT > 0)) || \
 177:../drivers/fsl_common.h ****      (defined(FSL_FEATURE_SOC_ASYNC_SYSCON_COUNT) && (FSL_FEATURE_SOC_ASYNC_SYSCON_COUNT > 0)))
 178:../drivers/fsl_common.h **** #include "fsl_reset.h"
 179:../drivers/fsl_common.h **** #endif
 180:../drivers/fsl_common.h **** 
 181:../drivers/fsl_common.h **** /*! @name Min/max macros */
 182:../drivers/fsl_common.h **** /* @{ */
 183:../drivers/fsl_common.h **** #if !defined(MIN)
 184:../drivers/fsl_common.h **** #define MIN(a, b) ((a) < (b) ? (a) : (b))
 185:../drivers/fsl_common.h **** #endif
 186:../drivers/fsl_common.h **** 
 187:../drivers/fsl_common.h **** #if !defined(MAX)
 188:../drivers/fsl_common.h **** #define MAX(a, b) ((a) > (b) ? (a) : (b))
 189:../drivers/fsl_common.h **** #endif
 190:../drivers/fsl_common.h **** /* @} */
 191:../drivers/fsl_common.h **** 
 192:../drivers/fsl_common.h **** /*! @brief Computes the number of elements in an array. */
 193:../drivers/fsl_common.h **** #if !defined(ARRAY_SIZE)
 194:../drivers/fsl_common.h **** #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
 195:../drivers/fsl_common.h **** #endif
 196:../drivers/fsl_common.h **** 
 197:../drivers/fsl_common.h **** /*! @name UINT16_MAX/UINT32_MAX value */
 198:../drivers/fsl_common.h **** /* @{ */
 199:../drivers/fsl_common.h **** #if !defined(UINT16_MAX)
 200:../drivers/fsl_common.h **** #define UINT16_MAX ((uint16_t)-1)
 201:../drivers/fsl_common.h **** #endif
 202:../drivers/fsl_common.h **** 
 203:../drivers/fsl_common.h **** #if !defined(UINT32_MAX)
 204:../drivers/fsl_common.h **** #define UINT32_MAX ((uint32_t)-1)
 205:../drivers/fsl_common.h **** #endif
 206:../drivers/fsl_common.h **** /* @} */
 207:../drivers/fsl_common.h **** 
 208:../drivers/fsl_common.h **** /*! @name Timer utilities */
 209:../drivers/fsl_common.h **** /* @{ */
 210:../drivers/fsl_common.h **** /*! Macro to convert a microsecond period to raw count value */
 211:../drivers/fsl_common.h **** #define USEC_TO_COUNT(us, clockFreqInHz) (uint64_t)((uint64_t)us * clockFreqInHz / 1000000U)
 212:../drivers/fsl_common.h **** /*! Macro to convert a raw count value to microsecond */
 213:../drivers/fsl_common.h **** #define COUNT_TO_USEC(count, clockFreqInHz) (uint64_t)((uint64_t)count * 1000000U / clockFreqInHz)
 214:../drivers/fsl_common.h **** 
 215:../drivers/fsl_common.h **** /*! Macro to convert a millisecond period to raw count value */
 216:../drivers/fsl_common.h **** #define MSEC_TO_COUNT(ms, clockFreqInHz) (uint64_t)((uint64_t)ms * clockFreqInHz / 1000U)
 217:../drivers/fsl_common.h **** /*! Macro to convert a raw count value to millisecond */
 218:../drivers/fsl_common.h **** #define COUNT_TO_MSEC(count, clockFreqInHz) (uint64_t)((uint64_t)count * 1000U / clockFreqInHz)
 219:../drivers/fsl_common.h **** /* @} */
 220:../drivers/fsl_common.h **** 
 221:../drivers/fsl_common.h **** /*! @name Alignment variable definition macros */
 222:../drivers/fsl_common.h **** /* @{ */
 223:../drivers/fsl_common.h **** #if (defined(__ICCARM__))
 224:../drivers/fsl_common.h **** /**
 225:../drivers/fsl_common.h ****  * Workaround to disable MISRA C message suppress warnings for IAR compiler.
 226:../drivers/fsl_common.h ****  * http://supp.iar.com/Support/?note=24725
 227:../drivers/fsl_common.h ****  */
 228:../drivers/fsl_common.h **** _Pragma("diag_suppress=Pm120")
 229:../drivers/fsl_common.h **** #define SDK_PRAGMA(x) _Pragma(#x)
 230:../drivers/fsl_common.h ****     _Pragma("diag_error=Pm120")
 231:../drivers/fsl_common.h **** /*! Macro to define a variable with alignbytes alignment */
 232:../drivers/fsl_common.h **** #define SDK_ALIGN(var, alignbytes) SDK_PRAGMA(data_alignment = alignbytes) var
 233:../drivers/fsl_common.h **** /*! Macro to define a variable with L1 d-cache line size alignment */
 234:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L1DCACHE_LINESIZE_BYTE)
 235:../drivers/fsl_common.h **** #define SDK_L1DCACHE_ALIGN(var) SDK_PRAGMA(data_alignment = FSL_FEATURE_L1DCACHE_LINESIZE_BYTE) var
 236:../drivers/fsl_common.h **** #endif
 237:../drivers/fsl_common.h **** /*! Macro to define a variable with L2 cache line size alignment */
 238:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L2CACHE_LINESIZE_BYTE)
 239:../drivers/fsl_common.h **** #define SDK_L2CACHE_ALIGN(var) SDK_PRAGMA(data_alignment = FSL_FEATURE_L2CACHE_LINESIZE_BYTE) var
 240:../drivers/fsl_common.h **** #endif
 241:../drivers/fsl_common.h **** #elif defined(__ARMCC_VERSION)
 242:../drivers/fsl_common.h **** /*! Macro to define a variable with alignbytes alignment */
 243:../drivers/fsl_common.h **** #define SDK_ALIGN(var, alignbytes) __align(alignbytes) var
 244:../drivers/fsl_common.h **** /*! Macro to define a variable with L1 d-cache line size alignment */
 245:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L1DCACHE_LINESIZE_BYTE)
 246:../drivers/fsl_common.h **** #define SDK_L1DCACHE_ALIGN(var) __align(FSL_FEATURE_L1DCACHE_LINESIZE_BYTE) var
 247:../drivers/fsl_common.h **** #endif
 248:../drivers/fsl_common.h **** /*! Macro to define a variable with L2 cache line size alignment */
 249:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L2CACHE_LINESIZE_BYTE)
 250:../drivers/fsl_common.h **** #define SDK_L2CACHE_ALIGN(var) __align(FSL_FEATURE_L2CACHE_LINESIZE_BYTE) var
 251:../drivers/fsl_common.h **** #endif
 252:../drivers/fsl_common.h **** #elif defined(__GNUC__)
 253:../drivers/fsl_common.h **** /*! Macro to define a variable with alignbytes alignment */
 254:../drivers/fsl_common.h **** #define SDK_ALIGN(var, alignbytes) var __attribute__((aligned(alignbytes)))
 255:../drivers/fsl_common.h **** /*! Macro to define a variable with L1 d-cache line size alignment */
 256:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L1DCACHE_LINESIZE_BYTE)
 257:../drivers/fsl_common.h **** #define SDK_L1DCACHE_ALIGN(var) var __attribute__((aligned(FSL_FEATURE_L1DCACHE_LINESIZE_BYTE)))
 258:../drivers/fsl_common.h **** #endif
 259:../drivers/fsl_common.h **** /*! Macro to define a variable with L2 cache line size alignment */
 260:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L2CACHE_LINESIZE_BYTE)
 261:../drivers/fsl_common.h **** #define SDK_L2CACHE_ALIGN(var) var __attribute__((aligned(FSL_FEATURE_L2CACHE_LINESIZE_BYTE)))
 262:../drivers/fsl_common.h **** #endif
 263:../drivers/fsl_common.h **** #else
 264:../drivers/fsl_common.h **** #error Toolchain not supported
 265:../drivers/fsl_common.h **** #define SDK_ALIGN(var, alignbytes) var
 266:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L1DCACHE_LINESIZE_BYTE)
 267:../drivers/fsl_common.h **** #define SDK_L1DCACHE_ALIGN(var) var
 268:../drivers/fsl_common.h **** #endif
 269:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L2CACHE_LINESIZE_BYTE)
 270:../drivers/fsl_common.h **** #define SDK_L2CACHE_ALIGN(var) var
 271:../drivers/fsl_common.h **** #endif
 272:../drivers/fsl_common.h **** #endif
 273:../drivers/fsl_common.h **** 
 274:../drivers/fsl_common.h **** /*! Macro to change a value to a given size aligned value */
 275:../drivers/fsl_common.h **** #define SDK_SIZEALIGN(var, alignbytes) \
 276:../drivers/fsl_common.h ****     ((unsigned int)((var) + ((alignbytes)-1)) & (unsigned int)(~(unsigned int)((alignbytes)-1)))
 277:../drivers/fsl_common.h **** /* @} */
 278:../drivers/fsl_common.h **** 
 279:../drivers/fsl_common.h **** /*! @name Non-cacheable region definition macros */
 280:../drivers/fsl_common.h **** /* For initialized non-zero non-cacheable variables, please using "AT_NONCACHEABLE_SECTION_INIT(var
 281:../drivers/fsl_common.h ****  * "AT_NONCACHEABLE_SECTION_ALIGN_INIT(var) ={xx};" in your projects to define them, for zero-inite
 282:../drivers/fsl_common.h ****  * please using "AT_NONCACHEABLE_SECTION(var);" or "AT_NONCACHEABLE_SECTION_ALIGN(var);" to define 
 283:../drivers/fsl_common.h ****  * will be initialized to zero in system startup.
 284:../drivers/fsl_common.h ****  */
 285:../drivers/fsl_common.h **** /* @{ */
 286:../drivers/fsl_common.h **** #if (defined(__ICCARM__))
 287:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L1ICACHE_LINESIZE_BYTE)
 288:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION(var) var @"NonCacheable"
 289:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN(var, alignbytes) SDK_PRAGMA(data_alignment = alignbytes) var 
 290:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_INIT(var) var @"NonCacheable.init"
 291:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN_INIT(var, alignbytes) SDK_PRAGMA(data_alignment = alignbytes)
 292:../drivers/fsl_common.h **** #else
 293:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION(var) var
 294:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN(var, alignbytes) SDK_PRAGMA(data_alignment = alignbytes) var
 295:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_INIT(var) var
 296:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN_INIT(var, alignbytes) SDK_PRAGMA(data_alignment = alignbytes)
 297:../drivers/fsl_common.h **** #endif
 298:../drivers/fsl_common.h **** #elif(defined(__ARMCC_VERSION))
 299:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L1ICACHE_LINESIZE_BYTE)
 300:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION(var) __attribute__((section("NonCacheable"), zero_init)) var
 301:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN(var, alignbytes) \
 302:../drivers/fsl_common.h ****     __attribute__((section("NonCacheable"), zero_init)) __align(alignbytes) var
 303:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_INIT(var) __attribute__((section("NonCacheable.init"))) var
 304:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN_INIT(var, alignbytes) \
 305:../drivers/fsl_common.h ****     __attribute__((section("NonCacheable.init"))) __align(alignbytes) var
 306:../drivers/fsl_common.h **** #else
 307:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION(var) var
 308:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN(var, alignbytes) __align(alignbytes) var
 309:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_INIT(var) var
 310:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN_INIT(var, alignbytes) __align(alignbytes) var
 311:../drivers/fsl_common.h **** #endif
 312:../drivers/fsl_common.h **** #elif(defined(__GNUC__))
 313:../drivers/fsl_common.h **** /* For GCC, when the non-cacheable section is required, please define "__STARTUP_INITIALIZE_NONCACH
 314:../drivers/fsl_common.h ****  * in your projects to make sure the non-cacheable section variables will be initialized in system 
 315:../drivers/fsl_common.h ****  */
 316:../drivers/fsl_common.h **** #if defined(FSL_FEATURE_L1ICACHE_LINESIZE_BYTE)
 317:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_INIT(var) __attribute__((section("NonCacheable.init"))) var
 318:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN_INIT(var, alignbytes) \
 319:../drivers/fsl_common.h ****     __attribute__((section("NonCacheable.init"))) var __attribute__((aligned(alignbytes)))
 320:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION(var) __attribute__((section("NonCacheable,\"aw\",%nobits @"))) var
 321:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN(var, alignbytes) \
 322:../drivers/fsl_common.h ****     __attribute__((section("NonCacheable,\"aw\",%nobits @"))) var __attribute__((aligned(alignbytes
 323:../drivers/fsl_common.h **** #else
 324:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION(var) var
 325:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN(var, alignbytes) var __attribute__((aligned(alignbytes)))
 326:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_INIT(var) var
 327:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN_INIT(var, alignbytes) var __attribute__((aligned(alignbytes))
 328:../drivers/fsl_common.h **** #endif
 329:../drivers/fsl_common.h **** #else
 330:../drivers/fsl_common.h **** #error Toolchain not supported.
 331:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION(var) var
 332:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN(var, alignbytes) var
 333:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_INIT(var) var
 334:../drivers/fsl_common.h **** #define AT_NONCACHEABLE_SECTION_ALIGN_INIT(var, alignbytes) var
 335:../drivers/fsl_common.h **** #endif
 336:../drivers/fsl_common.h **** /* @} */
 337:../drivers/fsl_common.h **** 
 338:../drivers/fsl_common.h **** /*******************************************************************************
 339:../drivers/fsl_common.h ****  * API
 340:../drivers/fsl_common.h ****  ******************************************************************************/
 341:../drivers/fsl_common.h **** 
 342:../drivers/fsl_common.h **** #if defined(__cplusplus)
 343:../drivers/fsl_common.h ****         extern "C"
 344:../drivers/fsl_common.h **** {
 345:../drivers/fsl_common.h **** #endif
 346:../drivers/fsl_common.h **** 
 347:../drivers/fsl_common.h ****     /*!
 348:../drivers/fsl_common.h ****      * @brief Enable specific interrupt.
 349:../drivers/fsl_common.h ****      *
 350:../drivers/fsl_common.h ****      * Enable LEVEL1 interrupt. For some devices, there might be multiple interrupt
 351:../drivers/fsl_common.h ****      * levels. For example, there are NVIC and intmux. Here the interrupts connected
 352:../drivers/fsl_common.h ****      * to NVIC are the LEVEL1 interrupts, because they are routed to the core directly.
 353:../drivers/fsl_common.h ****      * The interrupts connected to intmux are the LEVEL2 interrupts, they are routed
 354:../drivers/fsl_common.h ****      * to NVIC first then routed to core.
 355:../drivers/fsl_common.h ****      *
 356:../drivers/fsl_common.h ****      * This function only enables the LEVEL1 interrupts. The number of LEVEL1 interrupts
 357:../drivers/fsl_common.h ****      * is indicated by the feature macro FSL_FEATURE_NUMBER_OF_LEVEL1_INT_VECTORS.
 358:../drivers/fsl_common.h ****      *
 359:../drivers/fsl_common.h ****      * @param interrupt The IRQ number.
 360:../drivers/fsl_common.h ****      * @retval kStatus_Success Interrupt enabled successfully
 361:../drivers/fsl_common.h ****      * @retval kStatus_Fail Failed to enable the interrupt
 362:../drivers/fsl_common.h ****      */
 363:../drivers/fsl_common.h ****     static inline status_t EnableIRQ(IRQn_Type interrupt)
 364:../drivers/fsl_common.h ****     {
 365:../drivers/fsl_common.h ****         if (NotAvail_IRQn == interrupt)
 1631              		.loc 3 365 0
 1632 003a 1A00     		movs	r2, r3
 1633 003c 8032     		adds	r2, r2, #128
 1634 003e 08D0     		beq	.L123
 1635              	.LVL177:
 1636              	.LBB18:
 1637              	.LBB19:
 1638              		.file 4 "../CMSIS/core_cm0plus.h"
   1:../CMSIS/core_cm0plus.h **** /**************************************************************************//**
   2:../CMSIS/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:../CMSIS/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm0plus.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm0plus.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
   7:../CMSIS/core_cm0plus.h **** /*
   8:../CMSIS/core_cm0plus.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm0plus.h ****  *
  10:../CMSIS/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm0plus.h ****  *
  12:../CMSIS/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm0plus.h ****  *
  16:../CMSIS/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm0plus.h ****  *
  18:../CMSIS/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm0plus.h ****  * limitations under the License.
  23:../CMSIS/core_cm0plus.h ****  */
  24:../CMSIS/core_cm0plus.h **** 
  25:../CMSIS/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm0plus.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm0plus.h **** #endif
  30:../CMSIS/core_cm0plus.h **** 
  31:../CMSIS/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:../CMSIS/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:../CMSIS/core_cm0plus.h **** 
  34:../CMSIS/core_cm0plus.h **** #include <stdint.h>
  35:../CMSIS/core_cm0plus.h **** 
  36:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm0plus.h ****  extern "C" {
  38:../CMSIS/core_cm0plus.h **** #endif
  39:../CMSIS/core_cm0plus.h **** 
  40:../CMSIS/core_cm0plus.h **** /**
  41:../CMSIS/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm0plus.h **** 
  44:../CMSIS/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm0plus.h **** 
  47:../CMSIS/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm0plus.h **** 
  50:../CMSIS/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm0plus.h ****  */
  53:../CMSIS/core_cm0plus.h **** 
  54:../CMSIS/core_cm0plus.h **** 
  55:../CMSIS/core_cm0plus.h **** /*******************************************************************************
  56:../CMSIS/core_cm0plus.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
  58:../CMSIS/core_cm0plus.h **** /**
  59:../CMSIS/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:../CMSIS/core_cm0plus.h ****   @{
  61:../CMSIS/core_cm0plus.h ****  */
  62:../CMSIS/core_cm0plus.h **** 
  63:../CMSIS/core_cm0plus.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm0plus.h ****  
  65:../CMSIS/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:../CMSIS/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:../CMSIS/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:../CMSIS/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:../CMSIS/core_cm0plus.h **** 
  71:../CMSIS/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:../CMSIS/core_cm0plus.h **** 
  73:../CMSIS/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm0plus.h ****     This core does not support an FPU at all
  75:../CMSIS/core_cm0plus.h **** */
  76:../CMSIS/core_cm0plus.h **** #define __FPU_USED       0U
  77:../CMSIS/core_cm0plus.h **** 
  78:../CMSIS/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:../CMSIS/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:../CMSIS/core_cm0plus.h ****   #endif
  82:../CMSIS/core_cm0plus.h **** 
  83:../CMSIS/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:../CMSIS/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:../CMSIS/core_cm0plus.h ****   #endif
  87:../CMSIS/core_cm0plus.h **** 
  88:../CMSIS/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:../CMSIS/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:../CMSIS/core_cm0plus.h ****   #endif
  92:../CMSIS/core_cm0plus.h **** 
  93:../CMSIS/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:../CMSIS/core_cm0plus.h ****   #if defined __ARMVFP__
  95:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:../CMSIS/core_cm0plus.h ****   #endif
  97:../CMSIS/core_cm0plus.h **** 
  98:../CMSIS/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:../CMSIS/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:../CMSIS/core_cm0plus.h ****   #endif
 102:../CMSIS/core_cm0plus.h **** 
 103:../CMSIS/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:../CMSIS/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:../CMSIS/core_cm0plus.h ****   #endif
 107:../CMSIS/core_cm0plus.h **** 
 108:../CMSIS/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:../CMSIS/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:../CMSIS/core_cm0plus.h ****   #endif
 112:../CMSIS/core_cm0plus.h **** 
 113:../CMSIS/core_cm0plus.h **** #endif
 114:../CMSIS/core_cm0plus.h **** 
 115:../CMSIS/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:../CMSIS/core_cm0plus.h **** 
 117:../CMSIS/core_cm0plus.h **** 
 118:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
 119:../CMSIS/core_cm0plus.h **** }
 120:../CMSIS/core_cm0plus.h **** #endif
 121:../CMSIS/core_cm0plus.h **** 
 122:../CMSIS/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:../CMSIS/core_cm0plus.h **** 
 124:../CMSIS/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:../CMSIS/core_cm0plus.h **** 
 126:../CMSIS/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:../CMSIS/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:../CMSIS/core_cm0plus.h **** 
 129:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
 130:../CMSIS/core_cm0plus.h ****  extern "C" {
 131:../CMSIS/core_cm0plus.h **** #endif
 132:../CMSIS/core_cm0plus.h **** 
 133:../CMSIS/core_cm0plus.h **** /* check device defines and use defaults */
 134:../CMSIS/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:../CMSIS/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:../CMSIS/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:../CMSIS/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:../CMSIS/core_cm0plus.h ****   #endif
 139:../CMSIS/core_cm0plus.h **** 
 140:../CMSIS/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:../CMSIS/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:../CMSIS/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:../CMSIS/core_cm0plus.h ****   #endif
 144:../CMSIS/core_cm0plus.h **** 
 145:../CMSIS/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:../CMSIS/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:../CMSIS/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:../CMSIS/core_cm0plus.h ****   #endif
 149:../CMSIS/core_cm0plus.h **** 
 150:../CMSIS/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:../CMSIS/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:../CMSIS/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:../CMSIS/core_cm0plus.h ****   #endif
 154:../CMSIS/core_cm0plus.h **** 
 155:../CMSIS/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:../CMSIS/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:../CMSIS/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:../CMSIS/core_cm0plus.h ****   #endif
 159:../CMSIS/core_cm0plus.h **** #endif
 160:../CMSIS/core_cm0plus.h **** 
 161:../CMSIS/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:../CMSIS/core_cm0plus.h **** /**
 163:../CMSIS/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:../CMSIS/core_cm0plus.h **** 
 165:../CMSIS/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:../CMSIS/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:../CMSIS/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:../CMSIS/core_cm0plus.h **** */
 169:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
 170:../CMSIS/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:../CMSIS/core_cm0plus.h **** #else
 172:../CMSIS/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:../CMSIS/core_cm0plus.h **** #endif
 174:../CMSIS/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:../CMSIS/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:../CMSIS/core_cm0plus.h **** 
 177:../CMSIS/core_cm0plus.h **** /* following defines should be used for structure members */
 178:../CMSIS/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:../CMSIS/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:../CMSIS/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:../CMSIS/core_cm0plus.h **** 
 182:../CMSIS/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:../CMSIS/core_cm0plus.h **** 
 184:../CMSIS/core_cm0plus.h **** 
 185:../CMSIS/core_cm0plus.h **** 
 186:../CMSIS/core_cm0plus.h **** /*******************************************************************************
 187:../CMSIS/core_cm0plus.h ****  *                 Register Abstraction
 188:../CMSIS/core_cm0plus.h ****   Core Register contain:
 189:../CMSIS/core_cm0plus.h ****   - Core Register
 190:../CMSIS/core_cm0plus.h ****   - Core NVIC Register
 191:../CMSIS/core_cm0plus.h ****   - Core SCB Register
 192:../CMSIS/core_cm0plus.h ****   - Core SysTick Register
 193:../CMSIS/core_cm0plus.h ****   - Core MPU Register
 194:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
 195:../CMSIS/core_cm0plus.h **** /**
 196:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:../CMSIS/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:../CMSIS/core_cm0plus.h **** */
 199:../CMSIS/core_cm0plus.h **** 
 200:../CMSIS/core_cm0plus.h **** /**
 201:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:../CMSIS/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:../CMSIS/core_cm0plus.h ****   @{
 205:../CMSIS/core_cm0plus.h ****  */
 206:../CMSIS/core_cm0plus.h **** 
 207:../CMSIS/core_cm0plus.h **** /**
 208:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:../CMSIS/core_cm0plus.h ****  */
 210:../CMSIS/core_cm0plus.h **** typedef union
 211:../CMSIS/core_cm0plus.h **** {
 212:../CMSIS/core_cm0plus.h ****   struct
 213:../CMSIS/core_cm0plus.h ****   {
 214:../CMSIS/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:../CMSIS/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:../CMSIS/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:../CMSIS/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:../CMSIS/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:../CMSIS/core_cm0plus.h **** } APSR_Type;
 222:../CMSIS/core_cm0plus.h **** 
 223:../CMSIS/core_cm0plus.h **** /* APSR Register Definitions */
 224:../CMSIS/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:../CMSIS/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:../CMSIS/core_cm0plus.h **** 
 227:../CMSIS/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:../CMSIS/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:../CMSIS/core_cm0plus.h **** 
 230:../CMSIS/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:../CMSIS/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:../CMSIS/core_cm0plus.h **** 
 233:../CMSIS/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:../CMSIS/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:../CMSIS/core_cm0plus.h **** 
 236:../CMSIS/core_cm0plus.h **** 
 237:../CMSIS/core_cm0plus.h **** /**
 238:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:../CMSIS/core_cm0plus.h ****  */
 240:../CMSIS/core_cm0plus.h **** typedef union
 241:../CMSIS/core_cm0plus.h **** {
 242:../CMSIS/core_cm0plus.h ****   struct
 243:../CMSIS/core_cm0plus.h ****   {
 244:../CMSIS/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:../CMSIS/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:../CMSIS/core_cm0plus.h **** } IPSR_Type;
 249:../CMSIS/core_cm0plus.h **** 
 250:../CMSIS/core_cm0plus.h **** /* IPSR Register Definitions */
 251:../CMSIS/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:../CMSIS/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:../CMSIS/core_cm0plus.h **** 
 254:../CMSIS/core_cm0plus.h **** 
 255:../CMSIS/core_cm0plus.h **** /**
 256:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:../CMSIS/core_cm0plus.h ****  */
 258:../CMSIS/core_cm0plus.h **** typedef union
 259:../CMSIS/core_cm0plus.h **** {
 260:../CMSIS/core_cm0plus.h ****   struct
 261:../CMSIS/core_cm0plus.h ****   {
 262:../CMSIS/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:../CMSIS/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:../CMSIS/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:../CMSIS/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:../CMSIS/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:../CMSIS/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:../CMSIS/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:../CMSIS/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:../CMSIS/core_cm0plus.h **** } xPSR_Type;
 273:../CMSIS/core_cm0plus.h **** 
 274:../CMSIS/core_cm0plus.h **** /* xPSR Register Definitions */
 275:../CMSIS/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:../CMSIS/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:../CMSIS/core_cm0plus.h **** 
 278:../CMSIS/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:../CMSIS/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:../CMSIS/core_cm0plus.h **** 
 281:../CMSIS/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:../CMSIS/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:../CMSIS/core_cm0plus.h **** 
 284:../CMSIS/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:../CMSIS/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:../CMSIS/core_cm0plus.h **** 
 287:../CMSIS/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:../CMSIS/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:../CMSIS/core_cm0plus.h **** 
 290:../CMSIS/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:../CMSIS/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:../CMSIS/core_cm0plus.h **** 
 293:../CMSIS/core_cm0plus.h **** 
 294:../CMSIS/core_cm0plus.h **** /**
 295:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:../CMSIS/core_cm0plus.h ****  */
 297:../CMSIS/core_cm0plus.h **** typedef union
 298:../CMSIS/core_cm0plus.h **** {
 299:../CMSIS/core_cm0plus.h ****   struct
 300:../CMSIS/core_cm0plus.h ****   {
 301:../CMSIS/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:../CMSIS/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:../CMSIS/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm0plus.h **** } CONTROL_Type;
 307:../CMSIS/core_cm0plus.h **** 
 308:../CMSIS/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:../CMSIS/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:../CMSIS/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:../CMSIS/core_cm0plus.h **** 
 312:../CMSIS/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:../CMSIS/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:../CMSIS/core_cm0plus.h **** 
 315:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:../CMSIS/core_cm0plus.h **** 
 317:../CMSIS/core_cm0plus.h **** 
 318:../CMSIS/core_cm0plus.h **** /**
 319:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:../CMSIS/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:../CMSIS/core_cm0plus.h ****   @{
 323:../CMSIS/core_cm0plus.h ****  */
 324:../CMSIS/core_cm0plus.h **** 
 325:../CMSIS/core_cm0plus.h **** /**
 326:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:../CMSIS/core_cm0plus.h ****  */
 328:../CMSIS/core_cm0plus.h **** typedef struct
 329:../CMSIS/core_cm0plus.h **** {
 330:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:../CMSIS/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:../CMSIS/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:../CMSIS/core_cm0plus.h **** }  NVIC_Type;
 341:../CMSIS/core_cm0plus.h **** 
 342:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:../CMSIS/core_cm0plus.h **** 
 344:../CMSIS/core_cm0plus.h **** 
 345:../CMSIS/core_cm0plus.h **** /**
 346:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:../CMSIS/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:../CMSIS/core_cm0plus.h ****   @{
 350:../CMSIS/core_cm0plus.h ****  */
 351:../CMSIS/core_cm0plus.h **** 
 352:../CMSIS/core_cm0plus.h **** /**
 353:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:../CMSIS/core_cm0plus.h ****  */
 355:../CMSIS/core_cm0plus.h **** typedef struct
 356:../CMSIS/core_cm0plus.h **** {
 357:../CMSIS/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:../CMSIS/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:../CMSIS/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:../CMSIS/core_cm0plus.h **** #else
 362:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED0;
 363:../CMSIS/core_cm0plus.h **** #endif
 364:../CMSIS/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:../CMSIS/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:../CMSIS/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED1;
 368:../CMSIS/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:../CMSIS/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:../CMSIS/core_cm0plus.h **** } SCB_Type;
 371:../CMSIS/core_cm0plus.h **** 
 372:../CMSIS/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:../CMSIS/core_cm0plus.h **** 
 376:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:../CMSIS/core_cm0plus.h **** 
 379:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:../CMSIS/core_cm0plus.h **** 
 382:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:../CMSIS/core_cm0plus.h **** 
 385:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:../CMSIS/core_cm0plus.h **** 
 388:../CMSIS/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:../CMSIS/core_cm0plus.h **** 
 392:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:../CMSIS/core_cm0plus.h **** 
 395:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:../CMSIS/core_cm0plus.h **** 
 398:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:../CMSIS/core_cm0plus.h **** 
 401:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:../CMSIS/core_cm0plus.h **** 
 404:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:../CMSIS/core_cm0plus.h **** 
 407:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:../CMSIS/core_cm0plus.h **** 
 410:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:../CMSIS/core_cm0plus.h **** 
 413:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:../CMSIS/core_cm0plus.h **** 
 416:../CMSIS/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:../CMSIS/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:../CMSIS/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:../CMSIS/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:../CMSIS/core_cm0plus.h **** #endif
 421:../CMSIS/core_cm0plus.h **** 
 422:../CMSIS/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:../CMSIS/core_cm0plus.h **** 
 426:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:../CMSIS/core_cm0plus.h **** 
 429:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:../CMSIS/core_cm0plus.h **** 
 432:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:../CMSIS/core_cm0plus.h **** 
 435:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:../CMSIS/core_cm0plus.h **** 
 438:../CMSIS/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:../CMSIS/core_cm0plus.h **** 
 442:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:../CMSIS/core_cm0plus.h **** 
 445:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:../CMSIS/core_cm0plus.h **** 
 448:../CMSIS/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:../CMSIS/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:../CMSIS/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:../CMSIS/core_cm0plus.h **** 
 452:../CMSIS/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:../CMSIS/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:../CMSIS/core_cm0plus.h **** 
 455:../CMSIS/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:../CMSIS/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:../CMSIS/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:../CMSIS/core_cm0plus.h **** 
 459:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:../CMSIS/core_cm0plus.h **** 
 461:../CMSIS/core_cm0plus.h **** 
 462:../CMSIS/core_cm0plus.h **** /**
 463:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:../CMSIS/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:../CMSIS/core_cm0plus.h ****   @{
 467:../CMSIS/core_cm0plus.h ****  */
 468:../CMSIS/core_cm0plus.h **** 
 469:../CMSIS/core_cm0plus.h **** /**
 470:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:../CMSIS/core_cm0plus.h ****  */
 472:../CMSIS/core_cm0plus.h **** typedef struct
 473:../CMSIS/core_cm0plus.h **** {
 474:../CMSIS/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:../CMSIS/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:../CMSIS/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:../CMSIS/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:../CMSIS/core_cm0plus.h **** } SysTick_Type;
 479:../CMSIS/core_cm0plus.h **** 
 480:../CMSIS/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:../CMSIS/core_cm0plus.h **** 
 484:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:../CMSIS/core_cm0plus.h **** 
 487:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:../CMSIS/core_cm0plus.h **** 
 490:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:../CMSIS/core_cm0plus.h **** 
 493:../CMSIS/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:../CMSIS/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:../CMSIS/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:../CMSIS/core_cm0plus.h **** 
 497:../CMSIS/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:../CMSIS/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:../CMSIS/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:../CMSIS/core_cm0plus.h **** 
 501:../CMSIS/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:../CMSIS/core_cm0plus.h **** 
 505:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:../CMSIS/core_cm0plus.h **** 
 508:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:../CMSIS/core_cm0plus.h **** 
 511:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:../CMSIS/core_cm0plus.h **** 
 513:../CMSIS/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:../CMSIS/core_cm0plus.h **** /**
 515:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:../CMSIS/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:../CMSIS/core_cm0plus.h ****   @{
 519:../CMSIS/core_cm0plus.h ****  */
 520:../CMSIS/core_cm0plus.h **** 
 521:../CMSIS/core_cm0plus.h **** /**
 522:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:../CMSIS/core_cm0plus.h ****  */
 524:../CMSIS/core_cm0plus.h **** typedef struct
 525:../CMSIS/core_cm0plus.h **** {
 526:../CMSIS/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:../CMSIS/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:../CMSIS/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:../CMSIS/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:../CMSIS/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:../CMSIS/core_cm0plus.h **** } MPU_Type;
 532:../CMSIS/core_cm0plus.h **** 
 533:../CMSIS/core_cm0plus.h **** /* MPU Type Register Definitions */
 534:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 535:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 536:../CMSIS/core_cm0plus.h **** 
 537:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 538:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 539:../CMSIS/core_cm0plus.h **** 
 540:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 541:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 542:../CMSIS/core_cm0plus.h **** 
 543:../CMSIS/core_cm0plus.h **** /* MPU Control Register Definitions */
 544:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 545:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 546:../CMSIS/core_cm0plus.h **** 
 547:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 548:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 549:../CMSIS/core_cm0plus.h **** 
 550:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 551:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 552:../CMSIS/core_cm0plus.h **** 
 553:../CMSIS/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 554:../CMSIS/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 555:../CMSIS/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 556:../CMSIS/core_cm0plus.h **** 
 557:../CMSIS/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 558:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 559:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 560:../CMSIS/core_cm0plus.h **** 
 561:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 562:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 563:../CMSIS/core_cm0plus.h **** 
 564:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 565:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 566:../CMSIS/core_cm0plus.h **** 
 567:../CMSIS/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 568:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 569:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 570:../CMSIS/core_cm0plus.h **** 
 571:../CMSIS/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 572:../CMSIS/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 573:../CMSIS/core_cm0plus.h **** 
 574:../CMSIS/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 575:../CMSIS/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 576:../CMSIS/core_cm0plus.h **** 
 577:../CMSIS/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 578:../CMSIS/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 579:../CMSIS/core_cm0plus.h **** 
 580:../CMSIS/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 581:../CMSIS/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 582:../CMSIS/core_cm0plus.h **** 
 583:../CMSIS/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 584:../CMSIS/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 585:../CMSIS/core_cm0plus.h **** 
 586:../CMSIS/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 587:../CMSIS/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 588:../CMSIS/core_cm0plus.h **** 
 589:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 590:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 591:../CMSIS/core_cm0plus.h **** 
 592:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 593:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 594:../CMSIS/core_cm0plus.h **** 
 595:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 596:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 597:../CMSIS/core_cm0plus.h **** 
 598:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 599:../CMSIS/core_cm0plus.h **** #endif
 600:../CMSIS/core_cm0plus.h **** 
 601:../CMSIS/core_cm0plus.h **** 
 602:../CMSIS/core_cm0plus.h **** /**
 603:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 604:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 605:../CMSIS/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 606:../CMSIS/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 607:../CMSIS/core_cm0plus.h ****   @{
 608:../CMSIS/core_cm0plus.h ****  */
 609:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 610:../CMSIS/core_cm0plus.h **** 
 611:../CMSIS/core_cm0plus.h **** 
 612:../CMSIS/core_cm0plus.h **** /**
 613:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 614:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 615:../CMSIS/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 616:../CMSIS/core_cm0plus.h ****   @{
 617:../CMSIS/core_cm0plus.h ****  */
 618:../CMSIS/core_cm0plus.h **** 
 619:../CMSIS/core_cm0plus.h **** /**
 620:../CMSIS/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 621:../CMSIS/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 622:../CMSIS/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 623:../CMSIS/core_cm0plus.h ****   \return           Masked and shifted value.
 624:../CMSIS/core_cm0plus.h **** */
 625:../CMSIS/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 626:../CMSIS/core_cm0plus.h **** 
 627:../CMSIS/core_cm0plus.h **** /**
 628:../CMSIS/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 629:../CMSIS/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 630:../CMSIS/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 631:../CMSIS/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 632:../CMSIS/core_cm0plus.h **** */
 633:../CMSIS/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 634:../CMSIS/core_cm0plus.h **** 
 635:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 636:../CMSIS/core_cm0plus.h **** 
 637:../CMSIS/core_cm0plus.h **** 
 638:../CMSIS/core_cm0plus.h **** /**
 639:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 640:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 641:../CMSIS/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 642:../CMSIS/core_cm0plus.h ****   @{
 643:../CMSIS/core_cm0plus.h ****  */
 644:../CMSIS/core_cm0plus.h **** 
 645:../CMSIS/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 646:../CMSIS/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 647:../CMSIS/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 648:../CMSIS/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 649:../CMSIS/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 650:../CMSIS/core_cm0plus.h **** 
 651:../CMSIS/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 652:../CMSIS/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 653:../CMSIS/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 654:../CMSIS/core_cm0plus.h **** 
 655:../CMSIS/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 656:../CMSIS/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 657:../CMSIS/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 658:../CMSIS/core_cm0plus.h **** #endif
 659:../CMSIS/core_cm0plus.h **** 
 660:../CMSIS/core_cm0plus.h **** /*@} */
 661:../CMSIS/core_cm0plus.h **** 
 662:../CMSIS/core_cm0plus.h **** 
 663:../CMSIS/core_cm0plus.h **** 
 664:../CMSIS/core_cm0plus.h **** /*******************************************************************************
 665:../CMSIS/core_cm0plus.h ****  *                Hardware Abstraction Layer
 666:../CMSIS/core_cm0plus.h ****   Core Function Interface contains:
 667:../CMSIS/core_cm0plus.h ****   - Core NVIC Functions
 668:../CMSIS/core_cm0plus.h ****   - Core SysTick Functions
 669:../CMSIS/core_cm0plus.h ****   - Core Register Access Functions
 670:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
 671:../CMSIS/core_cm0plus.h **** /**
 672:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 673:../CMSIS/core_cm0plus.h **** */
 674:../CMSIS/core_cm0plus.h **** 
 675:../CMSIS/core_cm0plus.h **** 
 676:../CMSIS/core_cm0plus.h **** 
 677:../CMSIS/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 678:../CMSIS/core_cm0plus.h **** /**
 679:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 680:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 681:../CMSIS/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 682:../CMSIS/core_cm0plus.h ****   @{
 683:../CMSIS/core_cm0plus.h ****  */
 684:../CMSIS/core_cm0plus.h **** 
 685:../CMSIS/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 686:../CMSIS/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 687:../CMSIS/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 688:../CMSIS/core_cm0plus.h ****   #endif
 689:../CMSIS/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 690:../CMSIS/core_cm0plus.h **** #else
 691:../CMSIS/core_cm0plus.h **** /*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0+ */
 692:../CMSIS/core_cm0plus.h **** /*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0+ */
 693:../CMSIS/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 694:../CMSIS/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 695:../CMSIS/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 696:../CMSIS/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 697:../CMSIS/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 698:../CMSIS/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 699:../CMSIS/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 700:../CMSIS/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 701:../CMSIS/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 702:../CMSIS/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 703:../CMSIS/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 704:../CMSIS/core_cm0plus.h **** 
 705:../CMSIS/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 706:../CMSIS/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 707:../CMSIS/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 708:../CMSIS/core_cm0plus.h ****   #endif
 709:../CMSIS/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 710:../CMSIS/core_cm0plus.h **** #else
 711:../CMSIS/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 712:../CMSIS/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 713:../CMSIS/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 714:../CMSIS/core_cm0plus.h **** 
 715:../CMSIS/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 716:../CMSIS/core_cm0plus.h **** 
 717:../CMSIS/core_cm0plus.h **** 
 718:../CMSIS/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 719:../CMSIS/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 720:../CMSIS/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 721:../CMSIS/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 722:../CMSIS/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 723:../CMSIS/core_cm0plus.h **** 
 724:../CMSIS/core_cm0plus.h **** 
 725:../CMSIS/core_cm0plus.h **** /**
 726:../CMSIS/core_cm0plus.h ****   \brief   Enable Interrupt
 727:../CMSIS/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 728:../CMSIS/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 729:../CMSIS/core_cm0plus.h ****   \note    IRQn must not be negative.
 730:../CMSIS/core_cm0plus.h ****  */
 731:../CMSIS/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 732:../CMSIS/core_cm0plus.h **** {
 733:../CMSIS/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 1639              		.loc 4 733 0
 1640 0040 002B     		cmp	r3, #0
 1641 0042 06DB     		blt	.L123
 734:../CMSIS/core_cm0plus.h ****   {
 735:../CMSIS/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 1642              		.loc 4 735 0
 1643 0044 1F22     		movs	r2, #31
 1644 0046 1340     		ands	r3, r2
 1645              	.LVL178:
 1646 0048 1E3A     		subs	r2, r2, #30
 1647 004a 9A40     		lsls	r2, r2, r3
 1648 004c 1300     		movs	r3, r2
 1649 004e 054A     		ldr	r2, .L125+16
 1650 0050 1360     		str	r3, [r2]
 1651              	.LVL179:
 1652              	.L123:
 1653              	.LBE19:
 1654              	.LBE18:
 1655              	.LBE17:
 1656              	.LBE16:
 678:../drivers/fsl_uart.c **** 
 1657              		.loc 1 678 0
 1658              		@ sp needed
 1659              	.LVL180:
 1660              	.LVL181:
 1661              	.LVL182:
 1662              	.LVL183:
 1663 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1664              	.L126:
 1665              		.align	2
 1666              	.L125:
 1667 0054 00000000 		.word	.LANCHOR2
 1668 0058 00000000 		.word	.LANCHOR3
 1669 005c 00000000 		.word	UART_TransferHandleIRQ
 1670 0060 00000000 		.word	.LANCHOR4
 1671 0064 00E100E0 		.word	-536813312
 1672              		.cfi_endproc
 1673              	.LFE76:
 1675              		.section	.text.UART_TransferStartRingBuffer,"ax",%progbits
 1676              		.align	1
 1677              		.global	UART_TransferStartRingBuffer
 1678              		.syntax unified
 1679              		.code	16
 1680              		.thumb_func
 1681              		.fpu softvfp
 1683              	UART_TransferStartRingBuffer:
 1684              	.LFB77:
 681:../drivers/fsl_uart.c ****     assert(handle);
 1685              		.loc 1 681 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689              	.LVL184:
 1690 0000 10B5     		push	{r4, lr}
 1691              		.cfi_def_cfa_offset 8
 1692              		.cfi_offset 4, -8
 1693              		.cfi_offset 14, -4
 1694 0002 0400     		movs	r4, r0
 686:../drivers/fsl_uart.c ****     handle->rxRingBufferSize = ringBufferSize;
 1695              		.loc 1 686 0
 1696 0004 8A61     		str	r2, [r1, #24]
 687:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 1697              		.loc 1 687 0
 1698 0006 CB61     		str	r3, [r1, #28]
 688:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 1699              		.loc 1 688 0
 1700 0008 0023     		movs	r3, #0
 1701              	.LVL185:
 1702 000a 0B84     		strh	r3, [r1, #32]
 689:../drivers/fsl_uart.c **** 
 1703              		.loc 1 689 0
 1704 000c 4B84     		strh	r3, [r1, #34]
 692:../drivers/fsl_uart.c ****         base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptEnable | kUART_FramingEr
 1705              		.loc 1 692 0
 1706 000e A221     		movs	r1, #162
 1707              	.LVL186:
 1708 0010 0903     		lsls	r1, r1, #12
 1709 0012 FFF7FEFF 		bl	UART_EnableInterrupts
 1710              	.LVL187:
 695:../drivers/fsl_uart.c ****     {
 1711              		.loc 1 695 0
 1712 0016 A378     		ldrb	r3, [r4, #2]
 1713 0018 9B07     		lsls	r3, r3, #30
 1714 001a 00D4     		bmi	.L129
 1715              	.L127:
 699:../drivers/fsl_uart.c **** 
 1716              		.loc 1 699 0
 1717              		@ sp needed
 1718              	.LVL188:
 1719 001c 10BD     		pop	{r4, pc}
 1720              	.LVL189:
 1721              	.L129:
 697:../drivers/fsl_uart.c ****     }
 1722              		.loc 1 697 0
 1723 001e 8021     		movs	r1, #128
 1724 0020 4902     		lsls	r1, r1, #9
 1725 0022 2000     		movs	r0, r4
 1726 0024 FFF7FEFF 		bl	UART_EnableInterrupts
 1727              	.LVL190:
 699:../drivers/fsl_uart.c **** 
 1728              		.loc 1 699 0
 1729 0028 F8E7     		b	.L127
 1730              		.cfi_endproc
 1731              	.LFE77:
 1733              		.section	.text.UART_TransferStopRingBuffer,"ax",%progbits
 1734              		.align	1
 1735              		.global	UART_TransferStopRingBuffer
 1736              		.syntax unified
 1737              		.code	16
 1738              		.thumb_func
 1739              		.fpu softvfp
 1741              	UART_TransferStopRingBuffer:
 1742              	.LFB78:
 702:../drivers/fsl_uart.c ****     assert(handle);
 1743              		.loc 1 702 0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              	.LVL191:
 1748 0000 70B5     		push	{r4, r5, r6, lr}
 1749              		.cfi_def_cfa_offset 16
 1750              		.cfi_offset 4, -16
 1751              		.cfi_offset 5, -12
 1752              		.cfi_offset 6, -8
 1753              		.cfi_offset 14, -4
 1754 0002 0500     		movs	r5, r0
 1755 0004 0C00     		movs	r4, r1
 705:../drivers/fsl_uart.c ****     {
 1756              		.loc 1 705 0
 1757 0006 2D23     		movs	r3, #45
 1758 0008 CB5C     		ldrb	r3, [r1, r3]
 1759 000a 022B     		cmp	r3, #2
 1760 000c 05D0     		beq	.L132
 1761              	.LVL192:
 1762              	.L131:
 716:../drivers/fsl_uart.c ****     handle->rxRingBufferSize = 0U;
 1763              		.loc 1 716 0
 1764 000e 0023     		movs	r3, #0
 1765 0010 A361     		str	r3, [r4, #24]
 717:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 1766              		.loc 1 717 0
 1767 0012 E361     		str	r3, [r4, #28]
 718:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 1768              		.loc 1 718 0
 1769 0014 2384     		strh	r3, [r4, #32]
 719:../drivers/fsl_uart.c **** }
 1770              		.loc 1 719 0
 1771 0016 6384     		strh	r3, [r4, #34]
 720:../drivers/fsl_uart.c **** 
 1772              		.loc 1 720 0
 1773              		@ sp needed
 1774              	.LVL193:
 1775              	.LVL194:
 1776 0018 70BD     		pop	{r4, r5, r6, pc}
 1777              	.LVL195:
 1778              	.L132:
 707:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable);
 1779              		.loc 1 707 0
 1780 001a A221     		movs	r1, #162
 1781              	.LVL196:
 1782 001c 0903     		lsls	r1, r1, #12
 1783 001e FFF7FEFF 		bl	UART_DisableInterrupts
 1784              	.LVL197:
 710:../drivers/fsl_uart.c ****         {
 1785              		.loc 1 710 0
 1786 0022 AB78     		ldrb	r3, [r5, #2]
 1787 0024 9B07     		lsls	r3, r3, #30
 1788 0026 F2D5     		bpl	.L131
 712:../drivers/fsl_uart.c ****         }
 1789              		.loc 1 712 0
 1790 0028 8021     		movs	r1, #128
 1791 002a 4902     		lsls	r1, r1, #9
 1792 002c 2800     		movs	r0, r5
 1793 002e FFF7FEFF 		bl	UART_DisableInterrupts
 1794              	.LVL198:
 1795 0032 ECE7     		b	.L131
 1796              		.cfi_endproc
 1797              	.LFE78:
 1799              		.section	.text.UART_TransferSendNonBlocking,"ax",%progbits
 1800              		.align	1
 1801              		.global	UART_TransferSendNonBlocking
 1802              		.syntax unified
 1803              		.code	16
 1804              		.thumb_func
 1805              		.fpu softvfp
 1807              	UART_TransferSendNonBlocking:
 1808              	.LFB79:
 723:../drivers/fsl_uart.c ****     assert(handle);
 1809              		.loc 1 723 0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 1813              	.LVL199:
 1814 0000 10B5     		push	{r4, lr}
 1815              		.cfi_def_cfa_offset 8
 1816              		.cfi_offset 4, -8
 1817              		.cfi_offset 14, -4
 732:../drivers/fsl_uart.c ****     {
 1818              		.loc 1 732 0
 1819 0002 2C23     		movs	r3, #44
 1820 0004 CB5C     		ldrb	r3, [r1, r3]
 1821 0006 012B     		cmp	r3, #1
 1822 0008 0ED0     		beq	.L135
 738:../drivers/fsl_uart.c ****         handle->txDataSize = xfer->dataSize;
 1823              		.loc 1 738 0
 1824 000a 1368     		ldr	r3, [r2]
 1825 000c 0B60     		str	r3, [r1]
 739:../drivers/fsl_uart.c ****         handle->txDataSizeAll = xfer->dataSize;
 1826              		.loc 1 739 0
 1827 000e 5368     		ldr	r3, [r2, #4]
 1828 0010 4B60     		str	r3, [r1, #4]
 740:../drivers/fsl_uart.c ****         handle->txState = kUART_TxBusy;
 1829              		.loc 1 740 0
 1830 0012 5368     		ldr	r3, [r2, #4]
 1831 0014 8B60     		str	r3, [r1, #8]
 741:../drivers/fsl_uart.c **** 
 1832              		.loc 1 741 0
 1833 0016 2C23     		movs	r3, #44
 1834 0018 0122     		movs	r2, #1
 1835              	.LVL200:
 1836 001a CA54     		strb	r2, [r1, r3]
 744:../drivers/fsl_uart.c **** 
 1837              		.loc 1 744 0
 1838 001c 8021     		movs	r1, #128
 1839              	.LVL201:
 1840 001e 0902     		lsls	r1, r1, #8
 1841 0020 FFF7FEFF 		bl	UART_EnableInterrupts
 1842              	.LVL202:
 746:../drivers/fsl_uart.c ****     }
 1843              		.loc 1 746 0
 1844 0024 0020     		movs	r0, #0
 1845              	.LVL203:
 1846              	.L133:
 750:../drivers/fsl_uart.c **** 
 1847              		.loc 1 750 0
 1848              		@ sp needed
 1849 0026 10BD     		pop	{r4, pc}
 1850              	.LVL204:
 1851              	.L135:
 734:../drivers/fsl_uart.c ****     }
 1852              		.loc 1 734 0
 1853 0028 FA20     		movs	r0, #250
 1854              	.LVL205:
 1855 002a 8000     		lsls	r0, r0, #2
 1856              	.LVL206:
 749:../drivers/fsl_uart.c **** }
 1857              		.loc 1 749 0
 1858 002c FBE7     		b	.L133
 1859              		.cfi_endproc
 1860              	.LFE79:
 1862              		.section	.text.UART_TransferAbortSend,"ax",%progbits
 1863              		.align	1
 1864              		.global	UART_TransferAbortSend
 1865              		.syntax unified
 1866              		.code	16
 1867              		.thumb_func
 1868              		.fpu softvfp
 1870              	UART_TransferAbortSend:
 1871              	.LFB80:
 753:../drivers/fsl_uart.c ****     assert(handle);
 1872              		.loc 1 753 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              	.LVL207:
 1877 0000 10B5     		push	{r4, lr}
 1878              		.cfi_def_cfa_offset 8
 1879              		.cfi_offset 4, -8
 1880              		.cfi_offset 14, -4
 1881 0002 0C00     		movs	r4, r1
 756:../drivers/fsl_uart.c **** 
 1882              		.loc 1 756 0
 1883 0004 C021     		movs	r1, #192
 1884              	.LVL208:
 1885 0006 0902     		lsls	r1, r1, #8
 1886 0008 FFF7FEFF 		bl	UART_DisableInterrupts
 1887              	.LVL209:
 758:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 1888              		.loc 1 758 0
 1889 000c 0023     		movs	r3, #0
 1890 000e 6360     		str	r3, [r4, #4]
 759:../drivers/fsl_uart.c **** }
 1891              		.loc 1 759 0
 1892 0010 2C22     		movs	r2, #44
 1893 0012 A354     		strb	r3, [r4, r2]
 760:../drivers/fsl_uart.c **** 
 1894              		.loc 1 760 0
 1895              		@ sp needed
 1896              	.LVL210:
 1897 0014 10BD     		pop	{r4, pc}
 1898              		.cfi_endproc
 1899              	.LFE80:
 1901              		.section	.text.UART_TransferGetSendCount,"ax",%progbits
 1902              		.align	1
 1903              		.global	UART_TransferGetSendCount
 1904              		.syntax unified
 1905              		.code	16
 1906              		.thumb_func
 1907              		.fpu softvfp
 1909              	UART_TransferGetSendCount:
 1910              	.LFB81:
 763:../drivers/fsl_uart.c ****     assert(handle);
 1911              		.loc 1 763 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              		@ link register save eliminated.
 1916              	.LVL211:
 767:../drivers/fsl_uart.c ****     {
 1917              		.loc 1 767 0
 1918 0000 2C23     		movs	r3, #44
 1919 0002 CB5C     		ldrb	r3, [r1, r3]
 1920 0004 002B     		cmp	r3, #0
 1921 0006 05D0     		beq	.L139
 772:../drivers/fsl_uart.c **** 
 1922              		.loc 1 772 0
 1923 0008 8B68     		ldr	r3, [r1, #8]
 1924 000a 4968     		ldr	r1, [r1, #4]
 1925              	.LVL212:
 1926 000c 5B1A     		subs	r3, r3, r1
 1927 000e 1360     		str	r3, [r2]
 774:../drivers/fsl_uart.c **** }
 1928              		.loc 1 774 0
 1929 0010 0020     		movs	r0, #0
 1930              	.LVL213:
 1931              	.L137:
 775:../drivers/fsl_uart.c **** 
 1932              		.loc 1 775 0
 1933              		@ sp needed
 1934 0012 7047     		bx	lr
 1935              	.LVL214:
 1936              	.L139:
 769:../drivers/fsl_uart.c ****     }
 1937              		.loc 1 769 0
 1938 0014 0620     		movs	r0, #6
 1939              	.LVL215:
 1940 0016 FCE7     		b	.L137
 1941              		.cfi_endproc
 1942              	.LFE81:
 1944              		.section	.text.UART_TransferReceiveNonBlocking,"ax",%progbits
 1945              		.align	1
 1946              		.global	UART_TransferReceiveNonBlocking
 1947              		.syntax unified
 1948              		.code	16
 1949              		.thumb_func
 1950              		.fpu softvfp
 1952              	UART_TransferReceiveNonBlocking:
 1953              	.LFB82:
 781:../drivers/fsl_uart.c ****     assert(handle);
 1954              		.loc 1 781 0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 8
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              	.LVL216:
 1959 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1960              		.cfi_def_cfa_offset 20
 1961              		.cfi_offset 4, -20
 1962              		.cfi_offset 5, -16
 1963              		.cfi_offset 6, -12
 1964              		.cfi_offset 7, -8
 1965              		.cfi_offset 14, -4
 1966 0002 C646     		mov	lr, r8
 1967 0004 00B5     		push	{lr}
 1968              		.cfi_def_cfa_offset 24
 1969              		.cfi_offset 8, -24
 1970 0006 82B0     		sub	sp, sp, #8
 1971              		.cfi_def_cfa_offset 32
 1972 0008 0190     		str	r0, [sp, #4]
 1973 000a 0C00     		movs	r4, r1
 1974 000c 1600     		movs	r6, r2
 1975 000e 9846     		mov	r8, r3
 1976              	.LVL217:
 806:../drivers/fsl_uart.c ****     {
 1977              		.loc 1 806 0
 1978 0010 2D23     		movs	r3, #45
 1979              	.LVL218:
 1980 0012 CB5C     		ldrb	r3, [r1, r3]
 1981 0014 032B     		cmp	r3, #3
 1982 0016 66D0     		beq	.L151
 812:../drivers/fsl_uart.c ****         bytesCurrentReceived = 0U;
 1983              		.loc 1 812 0
 1984 0018 5768     		ldr	r7, [r2, #4]
 1985              	.LVL219:
 816:../drivers/fsl_uart.c ****         {
 1986              		.loc 1 816 0
 1987 001a 8B69     		ldr	r3, [r1, #24]
 1988 001c 002B     		cmp	r3, #0
 1989 001e 49D0     		beq	.L142
 819:../drivers/fsl_uart.c **** 
 1990              		.loc 1 819 0
 1991 0020 8021     		movs	r1, #128
 1992              	.LVL220:
 1993 0022 8901     		lsls	r1, r1, #6
 1994 0024 FFF7FEFF 		bl	UART_DisableInterrupts
 1995              	.LVL221:
 822:../drivers/fsl_uart.c **** 
 1996              		.loc 1 822 0
 1997 0028 2000     		movs	r0, r4
 1998 002a FFF7FEFF 		bl	UART_TransferGetRxRingBufferLength
 1999              	.LVL222:
 824:../drivers/fsl_uart.c ****             {
 2000              		.loc 1 824 0
 2001 002e 0028     		cmp	r0, #0
 2002 0030 1CD0     		beq	.L152
 826:../drivers/fsl_uart.c **** 
 2003              		.loc 1 826 0
 2004 0032 3A00     		movs	r2, r7
 2005 0034 8742     		cmp	r7, r0
 2006 0036 00D9     		bls	.L144
 2007 0038 0200     		movs	r2, r0
 2008              	.L144:
 2009              	.LVL223:
 828:../drivers/fsl_uart.c **** 
 2010              		.loc 1 828 0
 2011 003a BF1A     		subs	r7, r7, r2
 2012              	.LVL224:
 831:../drivers/fsl_uart.c ****                 {
 2013              		.loc 1 831 0
 2014 003c 0025     		movs	r5, #0
 2015 003e 02E0     		b	.L145
 2016              	.LVL225:
 2017              	.L155:
 838:../drivers/fsl_uart.c ****                     }
 2018              		.loc 1 838 0
 2019 0040 0023     		movs	r3, #0
 2020 0042 6384     		strh	r3, [r4, #34]
 2021              	.L147:
 781:../drivers/fsl_uart.c ****     assert(handle);
 2022              		.loc 1 781 0 discriminator 1
 2023 0044 0D00     		movs	r5, r1
 2024              	.LVL226:
 2025              	.L145:
 831:../drivers/fsl_uart.c ****                 {
 2026              		.loc 1 831 0 discriminator 1
 2027 0046 9542     		cmp	r5, r2
 2028 0048 11D2     		bcs	.L143
 833:../drivers/fsl_uart.c **** 
 2029              		.loc 1 833 0
 2030 004a 638C     		ldrh	r3, [r4, #34]
 2031 004c 9BB2     		uxth	r3, r3
 2032 004e 691C     		adds	r1, r5, #1
 2033              	.LVL227:
 2034 0050 A069     		ldr	r0, [r4, #24]
 2035 0052 C35C     		ldrb	r3, [r0, r3]
 2036 0054 3068     		ldr	r0, [r6]
 2037 0056 4355     		strb	r3, [r0, r5]
 836:../drivers/fsl_uart.c ****                     {
 2038              		.loc 1 836 0
 2039 0058 638C     		ldrh	r3, [r4, #34]
 2040 005a 0133     		adds	r3, r3, #1
 2041 005c E069     		ldr	r0, [r4, #28]
 2042 005e 8342     		cmp	r3, r0
 2043 0060 EED0     		beq	.L155
 842:../drivers/fsl_uart.c ****                     }
 2044              		.loc 1 842 0
 2045 0062 638C     		ldrh	r3, [r4, #34]
 2046 0064 0133     		adds	r3, r3, #1
 2047 0066 9BB2     		uxth	r3, r3
 2048 0068 6384     		strh	r3, [r4, #34]
 2049 006a EBE7     		b	.L147
 2050              	.LVL228:
 2051              	.L152:
 813:../drivers/fsl_uart.c **** 
 2052              		.loc 1 813 0
 2053 006c 0025     		movs	r5, #0
 2054              	.LVL229:
 2055              	.L143:
 848:../drivers/fsl_uart.c ****             {
 2056              		.loc 1 848 0
 2057 006e 002F     		cmp	r7, #0
 2058 0070 07D0     		beq	.L149
 851:../drivers/fsl_uart.c ****                 handle->rxDataSize = bytesToReceive;
 2059              		.loc 1 851 0
 2060 0072 3368     		ldr	r3, [r6]
 2061 0074 5B19     		adds	r3, r3, r5
 2062 0076 E360     		str	r3, [r4, #12]
 852:../drivers/fsl_uart.c ****                 handle->rxDataSizeAll = bytesToReceive;
 2063              		.loc 1 852 0
 2064 0078 2761     		str	r7, [r4, #16]
 853:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxBusy;
 2065              		.loc 1 853 0
 2066 007a 6761     		str	r7, [r4, #20]
 854:../drivers/fsl_uart.c ****             }
 2067              		.loc 1 854 0
 2068 007c 2D23     		movs	r3, #45
 2069 007e 0322     		movs	r2, #3
 2070 0080 E254     		strb	r2, [r4, r3]
 2071              	.L149:
 858:../drivers/fsl_uart.c **** 
 2072              		.loc 1 858 0
 2073 0082 8021     		movs	r1, #128
 2074 0084 8901     		lsls	r1, r1, #6
 2075 0086 019E     		ldr	r6, [sp, #4]
 2076              	.LVL230:
 2077 0088 3000     		movs	r0, r6
 2078 008a FFF7FEFF 		bl	UART_EnableInterrupts
 2079              	.LVL231:
 861:../drivers/fsl_uart.c ****             {
 2080              		.loc 1 861 0
 2081 008e 002F     		cmp	r7, #0
 2082 0090 07D1     		bne	.L150
 863:../drivers/fsl_uart.c ****                 {
 2083              		.loc 1 863 0
 2084 0092 676A     		ldr	r7, [r4, #36]
 2085              	.LVL232:
 2086 0094 002F     		cmp	r7, #0
 2087 0096 04D0     		beq	.L150
 865:../drivers/fsl_uart.c ****                 }
 2088              		.loc 1 865 0
 2089 0098 A36A     		ldr	r3, [r4, #40]
 2090 009a 154A     		ldr	r2, .L157
 2091 009c 2100     		movs	r1, r4
 2092 009e 3000     		movs	r0, r6
 2093 00a0 B847     		blx	r7
 2094              	.LVL233:
 2095              	.L150:
 888:../drivers/fsl_uart.c ****         {
 2096              		.loc 1 888 0
 2097 00a2 4346     		mov	r3, r8
 2098 00a4 002B     		cmp	r3, #0
 2099 00a6 20D0     		beq	.L154
 2100              	.LVL234:
 890:../drivers/fsl_uart.c ****         }
 2101              		.loc 1 890 0
 2102 00a8 1D60     		str	r5, [r3]
 893:../drivers/fsl_uart.c ****     }
 2103              		.loc 1 893 0
 2104 00aa 0020     		movs	r0, #0
 2105              	.LVL235:
 2106              	.L140:
 897:../drivers/fsl_uart.c **** 
 2107              		.loc 1 897 0
 2108 00ac 02B0     		add	sp, sp, #8
 2109              		@ sp needed
 2110              	.LVL236:
 2111 00ae 04BC     		pop	{r2}
 2112 00b0 9046     		mov	r8, r2
 2113 00b2 F0BD     		pop	{r4, r5, r6, r7, pc}
 2114              	.LVL237:
 2115              	.L142:
 872:../drivers/fsl_uart.c ****             handle->rxDataSize = bytesToReceive;
 2116              		.loc 1 872 0
 2117 00b4 1368     		ldr	r3, [r2]
 2118 00b6 CB60     		str	r3, [r1, #12]
 873:../drivers/fsl_uart.c ****             handle->rxDataSizeAll = bytesToReceive;
 2119              		.loc 1 873 0
 2120 00b8 0F61     		str	r7, [r1, #16]
 874:../drivers/fsl_uart.c ****             handle->rxState = kUART_RxBusy;
 2121              		.loc 1 874 0
 2122 00ba 4F61     		str	r7, [r1, #20]
 875:../drivers/fsl_uart.c **** 
 2123              		.loc 1 875 0
 2124 00bc 2D23     		movs	r3, #45
 2125 00be 0322     		movs	r2, #3
 2126              	.LVL238:
 2127 00c0 CA54     		strb	r2, [r1, r3]
 878:../drivers/fsl_uart.c ****                                             kUART_FramingErrorInterruptEnable | kUART_IdleLineInter
 2128              		.loc 1 878 0
 2129 00c2 A321     		movs	r1, #163
 2130              	.LVL239:
 2131 00c4 0903     		lsls	r1, r1, #12
 2132 00c6 019C     		ldr	r4, [sp, #4]
 2133              	.LVL240:
 2134 00c8 2000     		movs	r0, r4
 2135              	.LVL241:
 2136 00ca FFF7FEFF 		bl	UART_EnableInterrupts
 2137              	.LVL242:
 881:../drivers/fsl_uart.c ****             {
 2138              		.loc 1 881 0
 2139 00ce A378     		ldrb	r3, [r4, #2]
 2140 00d0 9B07     		lsls	r3, r3, #30
 2141 00d2 01D4     		bmi	.L156
 813:../drivers/fsl_uart.c **** 
 2142              		.loc 1 813 0
 2143 00d4 0025     		movs	r5, #0
 2144 00d6 E4E7     		b	.L150
 2145              	.L156:
 883:../drivers/fsl_uart.c ****             }
 2146              		.loc 1 883 0
 2147 00d8 8021     		movs	r1, #128
 2148 00da 4902     		lsls	r1, r1, #9
 2149 00dc 0198     		ldr	r0, [sp, #4]
 2150 00de FFF7FEFF 		bl	UART_EnableInterrupts
 2151              	.LVL243:
 813:../drivers/fsl_uart.c **** 
 2152              		.loc 1 813 0
 2153 00e2 0025     		movs	r5, #0
 2154 00e4 DDE7     		b	.L150
 2155              	.LVL244:
 2156              	.L151:
 808:../drivers/fsl_uart.c ****     }
 2157              		.loc 1 808 0
 2158 00e6 0348     		ldr	r0, .L157+4
 2159              	.LVL245:
 2160 00e8 E0E7     		b	.L140
 2161              	.LVL246:
 2162              	.L154:
 893:../drivers/fsl_uart.c ****     }
 2163              		.loc 1 893 0
 2164 00ea 0020     		movs	r0, #0
 2165              	.LVL247:
 896:../drivers/fsl_uart.c **** }
 2166              		.loc 1 896 0
 2167 00ec DEE7     		b	.L140
 2168              	.L158:
 2169 00ee C046     		.align	2
 2170              	.L157:
 2171 00f0 EB030000 		.word	1003
 2172 00f4 E9030000 		.word	1001
 2173              		.cfi_endproc
 2174              	.LFE82:
 2176              		.section	.text.UART_TransferAbortReceive,"ax",%progbits
 2177              		.align	1
 2178              		.global	UART_TransferAbortReceive
 2179              		.syntax unified
 2180              		.code	16
 2181              		.thumb_func
 2182              		.fpu softvfp
 2184              	UART_TransferAbortReceive:
 2185              	.LFB83:
 900:../drivers/fsl_uart.c ****     assert(handle);
 2186              		.loc 1 900 0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 0
 2189              		@ frame_needed = 0, uses_anonymous_args = 0
 2190              	.LVL248:
 2191 0000 70B5     		push	{r4, r5, r6, lr}
 2192              		.cfi_def_cfa_offset 16
 2193              		.cfi_offset 4, -16
 2194              		.cfi_offset 5, -12
 2195              		.cfi_offset 6, -8
 2196              		.cfi_offset 14, -4
 2197 0002 0500     		movs	r5, r0
 2198 0004 0C00     		movs	r4, r1
 904:../drivers/fsl_uart.c ****     {
 2199              		.loc 1 904 0
 2200 0006 8B69     		ldr	r3, [r1, #24]
 2201 0008 002B     		cmp	r3, #0
 2202 000a 05D0     		beq	.L161
 2203              	.LVL249:
 2204              	.L160:
 916:../drivers/fsl_uart.c ****     handle->rxState = kUART_RxIdle;
 2205              		.loc 1 916 0
 2206 000c 0023     		movs	r3, #0
 2207 000e 2361     		str	r3, [r4, #16]
 917:../drivers/fsl_uart.c **** }
 2208              		.loc 1 917 0
 2209 0010 2D33     		adds	r3, r3, #45
 2210 0012 0222     		movs	r2, #2
 2211 0014 E254     		strb	r2, [r4, r3]
 918:../drivers/fsl_uart.c **** 
 2212              		.loc 1 918 0
 2213              		@ sp needed
 2214              	.LVL250:
 2215              	.LVL251:
 2216 0016 70BD     		pop	{r4, r5, r6, pc}
 2217              	.LVL252:
 2218              	.L161:
 907:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable | kUART_IdleLineInterrup
 2219              		.loc 1 907 0
 2220 0018 A321     		movs	r1, #163
 2221              	.LVL253:
 2222 001a 0903     		lsls	r1, r1, #12
 2223 001c FFF7FEFF 		bl	UART_DisableInterrupts
 2224              	.LVL254:
 910:../drivers/fsl_uart.c ****         {
 2225              		.loc 1 910 0
 2226 0020 AB78     		ldrb	r3, [r5, #2]
 2227 0022 9B07     		lsls	r3, r3, #30
 2228 0024 F2D5     		bpl	.L160
 912:../drivers/fsl_uart.c ****         }
 2229              		.loc 1 912 0
 2230 0026 8021     		movs	r1, #128
 2231 0028 4902     		lsls	r1, r1, #9
 2232 002a 2800     		movs	r0, r5
 2233 002c FFF7FEFF 		bl	UART_DisableInterrupts
 2234              	.LVL255:
 2235 0030 ECE7     		b	.L160
 2236              		.cfi_endproc
 2237              	.LFE83:
 2239              		.section	.text.UART_TransferGetReceiveCount,"ax",%progbits
 2240              		.align	1
 2241              		.global	UART_TransferGetReceiveCount
 2242              		.syntax unified
 2243              		.code	16
 2244              		.thumb_func
 2245              		.fpu softvfp
 2247              	UART_TransferGetReceiveCount:
 2248              	.LFB84:
 921:../drivers/fsl_uart.c ****     assert(handle);
 2249              		.loc 1 921 0
 2250              		.cfi_startproc
 2251              		@ args = 0, pretend = 0, frame = 0
 2252              		@ frame_needed = 0, uses_anonymous_args = 0
 2253              		@ link register save eliminated.
 2254              	.LVL256:
 925:../drivers/fsl_uart.c ****     {
 2255              		.loc 1 925 0
 2256 0000 2D23     		movs	r3, #45
 2257 0002 CB5C     		ldrb	r3, [r1, r3]
 2258 0004 022B     		cmp	r3, #2
 2259 0006 07D0     		beq	.L164
 930:../drivers/fsl_uart.c ****     {
 2260              		.loc 1 930 0
 2261 0008 002A     		cmp	r2, #0
 2262 000a 07D0     		beq	.L165
 935:../drivers/fsl_uart.c **** 
 2263              		.loc 1 935 0
 2264 000c 4B69     		ldr	r3, [r1, #20]
 2265 000e 0969     		ldr	r1, [r1, #16]
 2266              	.LVL257:
 2267 0010 5B1A     		subs	r3, r3, r1
 2268 0012 1360     		str	r3, [r2]
 937:../drivers/fsl_uart.c **** }
 2269              		.loc 1 937 0
 2270 0014 0020     		movs	r0, #0
 2271              	.LVL258:
 2272              	.L162:
 938:../drivers/fsl_uart.c **** 
 2273              		.loc 1 938 0
 2274              		@ sp needed
 2275 0016 7047     		bx	lr
 2276              	.LVL259:
 2277              	.L164:
 927:../drivers/fsl_uart.c ****     }
 2278              		.loc 1 927 0
 2279 0018 0620     		movs	r0, #6
 2280              	.LVL260:
 2281 001a FCE7     		b	.L162
 2282              	.LVL261:
 2283              	.L165:
 932:../drivers/fsl_uart.c ****     }
 2284              		.loc 1 932 0
 2285 001c 0420     		movs	r0, #4
 2286              	.LVL262:
 2287 001e FAE7     		b	.L162
 2288              		.cfi_endproc
 2289              	.LFE84:
 2291              		.section	.text.UART_TransferHandleErrorIRQ,"ax",%progbits
 2292              		.align	1
 2293              		.global	UART_TransferHandleErrorIRQ
 2294              		.syntax unified
 2295              		.code	16
 2296              		.thumb_func
 2297              		.fpu softvfp
 2299              	UART_TransferHandleErrorIRQ:
 2300              	.LFB86:
1221:../drivers/fsl_uart.c **** 
1222:../drivers/fsl_uart.c **** void UART_TransferHandleErrorIRQ(UART_Type *base, uart_handle_t *handle)
1223:../drivers/fsl_uart.c **** {
 2301              		.loc 1 1223 0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
 2306              	.LVL263:
1224:../drivers/fsl_uart.c ****     /* To be implemented by User. */
1225:../drivers/fsl_uart.c **** }
 2307              		.loc 1 1225 0
 2308              		@ sp needed
 2309 0000 7047     		bx	lr
 2310              		.cfi_endproc
 2311              	.LFE86:
 2313              		.section	.text.UART2_DriverIRQHandler,"ax",%progbits
 2314              		.align	1
 2315              		.global	UART2_DriverIRQHandler
 2316              		.syntax unified
 2317              		.code	16
 2318              		.thumb_func
 2319              		.fpu softvfp
 2321              	UART2_DriverIRQHandler:
 2322              	.LFB87:
1226:../drivers/fsl_uart.c **** 
1227:../drivers/fsl_uart.c **** #if defined(UART0)
1228:../drivers/fsl_uart.c **** #if ((!(defined(FSL_FEATURE_SOC_LPSCI_COUNT))) || \
1229:../drivers/fsl_uart.c ****      ((defined(FSL_FEATURE_SOC_LPSCI_COUNT)) && (FSL_FEATURE_SOC_LPSCI_COUNT == 0)))
1230:../drivers/fsl_uart.c **** void UART0_DriverIRQHandler(void)
1231:../drivers/fsl_uart.c **** {
1232:../drivers/fsl_uart.c ****     s_uartIsr(UART0, s_uartHandle[0]);
1233:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1234:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1235:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1236:../drivers/fsl_uart.c ****     __DSB();
1237:../drivers/fsl_uart.c **** #endif
1238:../drivers/fsl_uart.c **** }
1239:../drivers/fsl_uart.c **** 
1240:../drivers/fsl_uart.c **** void UART0_RX_TX_DriverIRQHandler(void)
1241:../drivers/fsl_uart.c **** {
1242:../drivers/fsl_uart.c ****     UART0_DriverIRQHandler();
1243:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1244:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1245:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1246:../drivers/fsl_uart.c ****     __DSB();
1247:../drivers/fsl_uart.c **** #endif
1248:../drivers/fsl_uart.c **** }
1249:../drivers/fsl_uart.c **** #endif
1250:../drivers/fsl_uart.c **** #endif
1251:../drivers/fsl_uart.c **** 
1252:../drivers/fsl_uart.c **** #if defined(UART1)
1253:../drivers/fsl_uart.c **** void UART1_DriverIRQHandler(void)
1254:../drivers/fsl_uart.c **** {
1255:../drivers/fsl_uart.c ****     s_uartIsr(UART1, s_uartHandle[1]);
1256:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1257:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1258:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1259:../drivers/fsl_uart.c ****     __DSB();
1260:../drivers/fsl_uart.c **** #endif
1261:../drivers/fsl_uart.c **** }
1262:../drivers/fsl_uart.c **** 
1263:../drivers/fsl_uart.c **** void UART1_RX_TX_DriverIRQHandler(void)
1264:../drivers/fsl_uart.c **** {
1265:../drivers/fsl_uart.c ****     UART1_DriverIRQHandler();
1266:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1267:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1268:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1269:../drivers/fsl_uart.c ****     __DSB();
1270:../drivers/fsl_uart.c **** #endif
1271:../drivers/fsl_uart.c **** }
1272:../drivers/fsl_uart.c **** #endif
1273:../drivers/fsl_uart.c **** 
1274:../drivers/fsl_uart.c **** #if defined(UART2)
1275:../drivers/fsl_uart.c **** void UART2_DriverIRQHandler(void)
1276:../drivers/fsl_uart.c **** {
 2323              		.loc 1 1276 0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 0
 2326              		@ frame_needed = 0, uses_anonymous_args = 0
 2327 0000 10B5     		push	{r4, lr}
 2328              		.cfi_def_cfa_offset 8
 2329              		.cfi_offset 4, -8
 2330              		.cfi_offset 14, -4
1277:../drivers/fsl_uart.c ****     s_uartIsr(UART2, s_uartHandle[2]);
 2331              		.loc 1 1277 0
 2332 0002 034B     		ldr	r3, .L168
 2333 0004 9968     		ldr	r1, [r3, #8]
 2334 0006 034B     		ldr	r3, .L168+4
 2335 0008 1B68     		ldr	r3, [r3]
 2336 000a 0348     		ldr	r0, .L168+8
 2337 000c 9847     		blx	r3
 2338              	.LVL264:
1278:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1279:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1280:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1281:../drivers/fsl_uart.c ****     __DSB();
1282:../drivers/fsl_uart.c **** #endif
1283:../drivers/fsl_uart.c **** }
 2339              		.loc 1 1283 0
 2340              		@ sp needed
 2341 000e 10BD     		pop	{r4, pc}
 2342              	.L169:
 2343              		.align	2
 2344              	.L168:
 2345 0010 00000000 		.word	.LANCHOR2
 2346 0014 00000000 		.word	.LANCHOR3
 2347 0018 00C00640 		.word	1074184192
 2348              		.cfi_endproc
 2349              	.LFE87:
 2351              		.section	.text.UART2_RX_TX_DriverIRQHandler,"ax",%progbits
 2352              		.align	1
 2353              		.global	UART2_RX_TX_DriverIRQHandler
 2354              		.syntax unified
 2355              		.code	16
 2356              		.thumb_func
 2357              		.fpu softvfp
 2359              	UART2_RX_TX_DriverIRQHandler:
 2360              	.LFB88:
1284:../drivers/fsl_uart.c **** 
1285:../drivers/fsl_uart.c **** void UART2_RX_TX_DriverIRQHandler(void)
1286:../drivers/fsl_uart.c **** {
 2361              		.loc 1 1286 0
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 0
 2364              		@ frame_needed = 0, uses_anonymous_args = 0
 2365 0000 10B5     		push	{r4, lr}
 2366              		.cfi_def_cfa_offset 8
 2367              		.cfi_offset 4, -8
 2368              		.cfi_offset 14, -4
1287:../drivers/fsl_uart.c ****     UART2_DriverIRQHandler();
 2369              		.loc 1 1287 0
 2370 0002 FFF7FEFF 		bl	UART2_DriverIRQHandler
 2371              	.LVL265:
1288:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1289:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1290:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1291:../drivers/fsl_uart.c ****     __DSB();
1292:../drivers/fsl_uart.c **** #endif
1293:../drivers/fsl_uart.c **** }
 2372              		.loc 1 1293 0
 2373              		@ sp needed
 2374 0006 10BD     		pop	{r4, pc}
 2375              		.cfi_endproc
 2376              	.LFE88:
 2378              		.section	.bss.s_uartHandle,"aw",%nobits
 2379              		.align	2
 2380              		.set	.LANCHOR2,. + 0
 2383              	s_uartHandle:
 2384 0000 00000000 		.space	12
 2384      00000000 
 2384      00000000 
 2385              		.section	.bss.s_uartIsr,"aw",%nobits
 2386              		.align	2
 2387              		.set	.LANCHOR3,. + 0
 2390              	s_uartIsr:
 2391 0000 00000000 		.space	4
 2392              		.section	.rodata.s_uartBases,"a",%progbits
 2393              		.align	2
 2394              		.set	.LANCHOR0,. + 0
 2397              	s_uartBases:
 2398 0000 00000000 		.word	0
 2399 0004 00000000 		.word	0
 2400 0008 00C00640 		.word	1074184192
 2401              		.section	.rodata.s_uartClock,"a",%progbits
 2402              		.align	2
 2403              		.set	.LANCHOR1,. + 0
 2406              	s_uartClock:
 2407 0000 00000000 		.word	0
 2408 0004 00000000 		.word	0
 2409 0008 0C003410 		.word	271843340
 2410              		.section	.rodata.s_uartIRQ,"a",%progbits
 2411              		.align	2
 2412              		.set	.LANCHOR4,. + 0
 2415              	s_uartIRQ:
 2416 0000 80       		.byte	-128
 2417 0001 80       		.byte	-128
 2418 0002 0E       		.byte	14
 2419              		.text
 2420              	.Letext0:
 2421              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2422              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2423              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 2424              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 2425              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 2426              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 2427              		.file 11 "../CMSIS/MKL17Z4.h"
 2428              		.file 12 "../CMSIS/system_MKL17Z4.h"
 2429              		.file 13 "../drivers/fsl_uart.h"
 2430              		.file 14 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_uart.c
     /tmp/ccn1hQfK.s:16     .text.UART_WriteNonBlocking:0000000000000000 $t
     /tmp/ccn1hQfK.s:22     .text.UART_WriteNonBlocking:0000000000000000 UART_WriteNonBlocking
     /tmp/ccn1hQfK.s:57     .text.UART_ReadNonBlocking:0000000000000000 $t
     /tmp/ccn1hQfK.s:63     .text.UART_ReadNonBlocking:0000000000000000 UART_ReadNonBlocking
     /tmp/ccn1hQfK.s:97     .text.UART_GetInstance:0000000000000000 $t
     /tmp/ccn1hQfK.s:104    .text.UART_GetInstance:0000000000000000 UART_GetInstance
     /tmp/ccn1hQfK.s:138    .text.UART_GetInstance:0000000000000018 $d
     /tmp/ccn1hQfK.s:143    .text.UART_TransferGetRxRingBufferLength:0000000000000000 $t
     /tmp/ccn1hQfK.s:150    .text.UART_TransferGetRxRingBufferLength:0000000000000000 UART_TransferGetRxRingBufferLength
     /tmp/ccn1hQfK.s:191    .text.UART_TransferIsRxRingBufferFull:0000000000000000 $t
     /tmp/ccn1hQfK.s:197    .text.UART_TransferIsRxRingBufferFull:0000000000000000 UART_TransferIsRxRingBufferFull
     /tmp/ccn1hQfK.s:234    .text.UART_Init:0000000000000000 $t
     /tmp/ccn1hQfK.s:241    .text.UART_Init:0000000000000000 UART_Init
     /tmp/ccn1hQfK.s:459    .text.UART_Init:00000000000000f8 $d
     /tmp/ccn1hQfK.s:466    .text.UART_Deinit:0000000000000000 $t
     /tmp/ccn1hQfK.s:473    .text.UART_Deinit:0000000000000000 UART_Deinit
     /tmp/ccn1hQfK.s:526    .text.UART_Deinit:0000000000000030 $d
     /tmp/ccn1hQfK.s:532    .text.UART_GetDefaultConfig:0000000000000000 $t
     /tmp/ccn1hQfK.s:539    .text.UART_GetDefaultConfig:0000000000000000 UART_GetDefaultConfig
     /tmp/ccn1hQfK.s:567    .text.UART_SetBaudRate:0000000000000000 $t
     /tmp/ccn1hQfK.s:574    .text.UART_SetBaudRate:0000000000000000 UART_SetBaudRate
     /tmp/ccn1hQfK.s:704    .text.UART_SetBaudRate:000000000000008c $d
     /tmp/ccn1hQfK.s:709    .text.UART_EnableInterrupts:0000000000000000 $t
     /tmp/ccn1hQfK.s:716    .text.UART_EnableInterrupts:0000000000000000 UART_EnableInterrupts
     /tmp/ccn1hQfK.s:751    .text.UART_EnableInterrupts:0000000000000020 $d
     /tmp/ccn1hQfK.s:756    .text.UART_DisableInterrupts:0000000000000000 $t
     /tmp/ccn1hQfK.s:763    .text.UART_DisableInterrupts:0000000000000000 UART_DisableInterrupts
     /tmp/ccn1hQfK.s:796    .text.UART_DisableInterrupts:000000000000001c $d
     /tmp/ccn1hQfK.s:801    .text.UART_TransferHandleIRQ:0000000000000000 $t
     /tmp/ccn1hQfK.s:808    .text.UART_TransferHandleIRQ:0000000000000000 UART_TransferHandleIRQ
     /tmp/ccn1hQfK.s:1257   .text.UART_TransferHandleIRQ:000000000000023c $d
     /tmp/ccn1hQfK.s:1266   .text.UART_GetEnabledInterrupts:0000000000000000 $t
     /tmp/ccn1hQfK.s:1273   .text.UART_GetEnabledInterrupts:0000000000000000 UART_GetEnabledInterrupts
     /tmp/ccn1hQfK.s:1301   .text.UART_GetEnabledInterrupts:0000000000000014 $d
     /tmp/ccn1hQfK.s:1306   .text.UART_GetStatusFlags:0000000000000000 $t
     /tmp/ccn1hQfK.s:1313   .text.UART_GetStatusFlags:0000000000000000 UART_GetStatusFlags
     /tmp/ccn1hQfK.s:1335   .text.UART_ClearStatusFlags:0000000000000000 $t
     /tmp/ccn1hQfK.s:1342   .text.UART_ClearStatusFlags:0000000000000000 UART_ClearStatusFlags
     /tmp/ccn1hQfK.s:1406   .text.UART_ClearStatusFlags:0000000000000038 $d
     /tmp/ccn1hQfK.s:1411   .text.UART_WriteBlocking:0000000000000000 $t
     /tmp/ccn1hQfK.s:1418   .text.UART_WriteBlocking:0000000000000000 UART_WriteBlocking
     /tmp/ccn1hQfK.s:1461   .text.UART_ReadBlocking:0000000000000000 $t
     /tmp/ccn1hQfK.s:1468   .text.UART_ReadBlocking:0000000000000000 UART_ReadBlocking
     /tmp/ccn1hQfK.s:1558   .text.UART_ReadBlocking:0000000000000048 $d
     /tmp/ccn1hQfK.s:1565   .text.UART_TransferCreateHandle:0000000000000000 $t
     /tmp/ccn1hQfK.s:1572   .text.UART_TransferCreateHandle:0000000000000000 UART_TransferCreateHandle
     /tmp/ccn1hQfK.s:1667   .text.UART_TransferCreateHandle:0000000000000054 $d
     /tmp/ccn1hQfK.s:1676   .text.UART_TransferStartRingBuffer:0000000000000000 $t
     /tmp/ccn1hQfK.s:1683   .text.UART_TransferStartRingBuffer:0000000000000000 UART_TransferStartRingBuffer
     /tmp/ccn1hQfK.s:1734   .text.UART_TransferStopRingBuffer:0000000000000000 $t
     /tmp/ccn1hQfK.s:1741   .text.UART_TransferStopRingBuffer:0000000000000000 UART_TransferStopRingBuffer
     /tmp/ccn1hQfK.s:1800   .text.UART_TransferSendNonBlocking:0000000000000000 $t
     /tmp/ccn1hQfK.s:1807   .text.UART_TransferSendNonBlocking:0000000000000000 UART_TransferSendNonBlocking
     /tmp/ccn1hQfK.s:1863   .text.UART_TransferAbortSend:0000000000000000 $t
     /tmp/ccn1hQfK.s:1870   .text.UART_TransferAbortSend:0000000000000000 UART_TransferAbortSend
     /tmp/ccn1hQfK.s:1902   .text.UART_TransferGetSendCount:0000000000000000 $t
     /tmp/ccn1hQfK.s:1909   .text.UART_TransferGetSendCount:0000000000000000 UART_TransferGetSendCount
     /tmp/ccn1hQfK.s:1945   .text.UART_TransferReceiveNonBlocking:0000000000000000 $t
     /tmp/ccn1hQfK.s:1952   .text.UART_TransferReceiveNonBlocking:0000000000000000 UART_TransferReceiveNonBlocking
     /tmp/ccn1hQfK.s:2171   .text.UART_TransferReceiveNonBlocking:00000000000000f0 $d
     /tmp/ccn1hQfK.s:2177   .text.UART_TransferAbortReceive:0000000000000000 $t
     /tmp/ccn1hQfK.s:2184   .text.UART_TransferAbortReceive:0000000000000000 UART_TransferAbortReceive
     /tmp/ccn1hQfK.s:2240   .text.UART_TransferGetReceiveCount:0000000000000000 $t
     /tmp/ccn1hQfK.s:2247   .text.UART_TransferGetReceiveCount:0000000000000000 UART_TransferGetReceiveCount
     /tmp/ccn1hQfK.s:2292   .text.UART_TransferHandleErrorIRQ:0000000000000000 $t
     /tmp/ccn1hQfK.s:2299   .text.UART_TransferHandleErrorIRQ:0000000000000000 UART_TransferHandleErrorIRQ
     /tmp/ccn1hQfK.s:2314   .text.UART2_DriverIRQHandler:0000000000000000 $t
     /tmp/ccn1hQfK.s:2321   .text.UART2_DriverIRQHandler:0000000000000000 UART2_DriverIRQHandler
     /tmp/ccn1hQfK.s:2345   .text.UART2_DriverIRQHandler:0000000000000010 $d
     /tmp/ccn1hQfK.s:2352   .text.UART2_RX_TX_DriverIRQHandler:0000000000000000 $t
     /tmp/ccn1hQfK.s:2359   .text.UART2_RX_TX_DriverIRQHandler:0000000000000000 UART2_RX_TX_DriverIRQHandler
     /tmp/ccn1hQfK.s:2379   .bss.s_uartHandle:0000000000000000 $d
     /tmp/ccn1hQfK.s:2383   .bss.s_uartHandle:0000000000000000 s_uartHandle
     /tmp/ccn1hQfK.s:2386   .bss.s_uartIsr:0000000000000000 $d
     /tmp/ccn1hQfK.s:2390   .bss.s_uartIsr:0000000000000000 s_uartIsr
     /tmp/ccn1hQfK.s:2393   .rodata.s_uartBases:0000000000000000 $d
     /tmp/ccn1hQfK.s:2397   .rodata.s_uartBases:0000000000000000 s_uartBases
     /tmp/ccn1hQfK.s:2402   .rodata.s_uartClock:0000000000000000 $d
     /tmp/ccn1hQfK.s:2406   .rodata.s_uartClock:0000000000000000 s_uartClock
     /tmp/ccn1hQfK.s:2411   .rodata.s_uartIRQ:0000000000000000 $d
     /tmp/ccn1hQfK.s:2415   .rodata.s_uartIRQ:0000000000000000 s_uartIRQ

UNDEFINED SYMBOLS
__aeabi_uidiv
memset
