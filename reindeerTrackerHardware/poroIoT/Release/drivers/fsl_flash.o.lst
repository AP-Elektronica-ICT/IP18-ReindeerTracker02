   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_flash.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.flash_check_execute_in_ram_function_info,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	flash_check_execute_in_ram_function_info:
  23              	.LFB83:
  24              		.file 1 "../drivers/fsl_flash.c"
   1:../drivers/fsl_flash.c **** /*
   2:../drivers/fsl_flash.c ****  * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
   3:../drivers/fsl_flash.c ****  * Copyright 2016-2017 NXP
   4:../drivers/fsl_flash.c ****  * All rights reserved.
   5:../drivers/fsl_flash.c ****  *
   6:../drivers/fsl_flash.c ****  * Redistribution and use in source and binary forms, with or without modification,
   7:../drivers/fsl_flash.c ****  * are permitted provided that the following conditions are met:
   8:../drivers/fsl_flash.c ****  *
   9:../drivers/fsl_flash.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  10:../drivers/fsl_flash.c ****  *   of conditions and the following disclaimer.
  11:../drivers/fsl_flash.c ****  *
  12:../drivers/fsl_flash.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  13:../drivers/fsl_flash.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  14:../drivers/fsl_flash.c ****  *   other materials provided with the distribution.
  15:../drivers/fsl_flash.c ****  *
  16:../drivers/fsl_flash.c ****  * o Neither the name of the copyright holder nor the names of its
  17:../drivers/fsl_flash.c ****  *   contributors may be used to endorse or promote products derived from this
  18:../drivers/fsl_flash.c ****  *   software without specific prior written permission.
  19:../drivers/fsl_flash.c ****  *
  20:../drivers/fsl_flash.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  21:../drivers/fsl_flash.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  22:../drivers/fsl_flash.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:../drivers/fsl_flash.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  24:../drivers/fsl_flash.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  25:../drivers/fsl_flash.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  26:../drivers/fsl_flash.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  27:../drivers/fsl_flash.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  28:../drivers/fsl_flash.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  29:../drivers/fsl_flash.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:../drivers/fsl_flash.c ****  */
  31:../drivers/fsl_flash.c **** 
  32:../drivers/fsl_flash.c **** #include "fsl_flash.h"
  33:../drivers/fsl_flash.c **** 
  34:../drivers/fsl_flash.c **** /*******************************************************************************
  35:../drivers/fsl_flash.c ****  * Definitions
  36:../drivers/fsl_flash.c ****  ******************************************************************************/
  37:../drivers/fsl_flash.c **** 
  38:../drivers/fsl_flash.c **** /*!
  39:../drivers/fsl_flash.c ****  * @name Misc utility defines
  40:../drivers/fsl_flash.c ****  * @{
  41:../drivers/fsl_flash.c ****  */
  42:../drivers/fsl_flash.c **** /*! @brief Alignment utility. */
  43:../drivers/fsl_flash.c **** #ifndef ALIGN_DOWN
  44:../drivers/fsl_flash.c **** #define ALIGN_DOWN(x, a) ((x) & (uint32_t)(-((int32_t)(a))))
  45:../drivers/fsl_flash.c **** #endif
  46:../drivers/fsl_flash.c **** #ifndef ALIGN_UP
  47:../drivers/fsl_flash.c **** #define ALIGN_UP(x, a) (-((int32_t)((uint32_t)(-((int32_t)(x))) & (uint32_t)(-((int32_t)(a))))))
  48:../drivers/fsl_flash.c **** #endif
  49:../drivers/fsl_flash.c **** 
  50:../drivers/fsl_flash.c **** /*! @brief Join bytes to word utility. */
  51:../drivers/fsl_flash.c **** #define B1P4(b) (((uint32_t)(b)&0xFFU) << 24)
  52:../drivers/fsl_flash.c **** #define B1P3(b) (((uint32_t)(b)&0xFFU) << 16)
  53:../drivers/fsl_flash.c **** #define B1P2(b) (((uint32_t)(b)&0xFFU) << 8)
  54:../drivers/fsl_flash.c **** #define B1P1(b) ((uint32_t)(b)&0xFFU)
  55:../drivers/fsl_flash.c **** #define B2P3(b) (((uint32_t)(b)&0xFFFFU) << 16)
  56:../drivers/fsl_flash.c **** #define B2P2(b) (((uint32_t)(b)&0xFFFFU) << 8)
  57:../drivers/fsl_flash.c **** #define B2P1(b) ((uint32_t)(b)&0xFFFFU)
  58:../drivers/fsl_flash.c **** #define B3P2(b) (((uint32_t)(b)&0xFFFFFFU) << 8)
  59:../drivers/fsl_flash.c **** #define B3P1(b) ((uint32_t)(b)&0xFFFFFFU)
  60:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_3(x, y) (B1P4(x) | B3P1(y))
  61:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_2_2(x, y) (B2P3(x) | B2P1(y))
  62:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_3_1(x, y) (B3P2(x) | B1P1(y))
  63:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_1_2(x, y, z) (B1P4(x) | B1P3(y) | B2P1(z))
  64:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_2_1(x, y, z) (B1P4(x) | B2P2(y) | B1P1(z))
  65:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_2_1_1(x, y, z) (B2P3(x) | B1P2(y) | B1P1(z))
  66:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_1_1_1(x, y, z, w) (B1P4(x) | B1P3(y) | B1P2(z) | B1P1(w))
  67:../drivers/fsl_flash.c **** /*@}*/
  68:../drivers/fsl_flash.c **** 
  69:../drivers/fsl_flash.c **** /*!
  70:../drivers/fsl_flash.c ****  * @name Secondary flash configuration
  71:../drivers/fsl_flash.c ****  * @{
  72:../drivers/fsl_flash.c ****  */
  73:../drivers/fsl_flash.c **** /*! @brief Indicates whether the secondary flash has its own protection register in flash module. *
  74:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_MULTIPLE_FLASH) && defined(FTFE_FPROTS_PROTS_MASK)
  75:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER (1)
  76:../drivers/fsl_flash.c **** #else
  77:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER (0)
  78:../drivers/fsl_flash.c **** #endif
  79:../drivers/fsl_flash.c **** 
  80:../drivers/fsl_flash.c **** /*! @brief Indicates whether the secondary flash has its own Execute-Only access register in flash 
  81:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_MULTIPLE_FLASH) && defined(FTFE_FACSSS_SGSIZE_S_MASK)
  82:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER (1)
  83:../drivers/fsl_flash.c **** #else
  84:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER (0)
  85:../drivers/fsl_flash.c **** #endif
  86:../drivers/fsl_flash.c **** /*@}*/
  87:../drivers/fsl_flash.c **** 
  88:../drivers/fsl_flash.c **** /*!
  89:../drivers/fsl_flash.c ****  * @name Dual core/flash configuration
  90:../drivers/fsl_flash.c ****  * @{
  91:../drivers/fsl_flash.c ****  */
  92:../drivers/fsl_flash.c **** /*! @brief Redefines some flash features. */
  93:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
  94:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_CURRENT_CORE_ID == 0u)
  95:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
  96:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
  97:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
  98:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
  99:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_S
 100:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_REGIO
 101:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_1_START_ADDRESS
 102:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT
 103:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZE
 104:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SECTOR_SI
 105:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_WRITE
 106:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_1_PROTECTIO
 107:../drivers/fsl_flash.c **** #elif (FSL_FEATURE_FLASH_CURRENT_CORE_ID == 1u)
 108:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_1_START_ADDRESS
 109:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT
 110:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZE
 111:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SECTOR_SIZE
 112:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_WRITE_UNIT
 113:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_1_PROTECTION_REG
 114:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
 115:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
 116:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
 117:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
 118:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_U
 119:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_
 120:../drivers/fsl_flash.c **** #endif
 121:../drivers/fsl_flash.c **** #else
 122:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
 123:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
 124:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
 125:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
 126:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_S
 127:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_REGIO
 128:../drivers/fsl_flash.c **** #endif
 129:../drivers/fsl_flash.c **** /*@}*/
 130:../drivers/fsl_flash.c **** 
 131:../drivers/fsl_flash.c **** /*!
 132:../drivers/fsl_flash.c ****  * @name Flash cache and speculation control defines
 133:../drivers/fsl_flash.c ****  * @{
 134:../drivers/fsl_flash.c ****  */
 135:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_CFCC_MASK) || defined(MCM_CPCR2_CCBC_MASK)
 136:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_MCM (1)
 137:../drivers/fsl_flash.c **** #else
 138:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_MCM (0)
 139:../drivers/fsl_flash.c **** #endif
 140:../drivers/fsl_flash.c **** #if defined(FMC_PFB0CR_CINV_WAY_MASK) || defined(FMC_PFB01CR_CINV_WAY_MASK)
 141:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_FMC (1)
 142:../drivers/fsl_flash.c **** #else
 143:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_FMC (0)
 144:../drivers/fsl_flash.c **** #endif
 145:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_DFCS_MASK)
 146:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM (1)
 147:../drivers/fsl_flash.c **** #else
 148:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM (0)
 149:../drivers/fsl_flash.c **** #endif
 150:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCMC1_MASK) || defined(MSCM_OCMDR_OCM1_MASK) || defined(MSCM_OCMDR0_OCM1_MAS
 151:../drivers/fsl_flash.c ****     defined(MSCM_OCMDR1_OCM1_MASK)
 152:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM (1)
 153:../drivers/fsl_flash.c **** #else
 154:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM (0)
 155:../drivers/fsl_flash.c **** #endif
 156:../drivers/fsl_flash.c **** #if defined(FMC_PFB0CR_S_INV_MASK) || defined(FMC_PFB0CR_S_B_INV_MASK) || defined(FMC_PFB01CR_S_INV
 157:../drivers/fsl_flash.c ****     defined(FMC_PFB01CR_S_B_INV_MASK)
 158:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC (1)
 159:../drivers/fsl_flash.c **** #else
 160:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC (0)
 161:../drivers/fsl_flash.c **** #endif
 162:../drivers/fsl_flash.c **** 
 163:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM || FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY
 164:../drivers/fsl_flash.c ****     FLASH_CACHE_IS_CONTROLLED_BY_MCM || FLASH_CACHE_IS_CONTROLLED_BY_FMC
 165:../drivers/fsl_flash.c **** #define FLASH_IS_CACHE_INVALIDATION_AVAILABLE (1)
 166:../drivers/fsl_flash.c **** #else
 167:../drivers/fsl_flash.c **** #define FLASH_IS_CACHE_INVALIDATION_AVAILABLE (0)
 168:../drivers/fsl_flash.c **** #endif
 169:../drivers/fsl_flash.c **** /*@}*/
 170:../drivers/fsl_flash.c **** 
 171:../drivers/fsl_flash.c **** /*! @brief Data flash IFR map Field*/
 172:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_IS_FTFE) && FSL_FEATURE_FLASH_IS_FTFE
 173:../drivers/fsl_flash.c **** #define DFLASH_IFR_READRESOURCE_START_ADDRESS 0x8003F8U
 174:../drivers/fsl_flash.c **** #else /* FSL_FEATURE_FLASH_IS_FTFL == 1 or FSL_FEATURE_FLASH_IS_FTFA = =1 */
 175:../drivers/fsl_flash.c **** #define DFLASH_IFR_READRESOURCE_START_ADDRESS 0x8000F8U
 176:../drivers/fsl_flash.c **** #endif
 177:../drivers/fsl_flash.c **** 
 178:../drivers/fsl_flash.c **** /*!
 179:../drivers/fsl_flash.c ****  * @name Reserved FlexNVM size (For a variety of purposes) defines
 180:../drivers/fsl_flash.c ****  * @{
 181:../drivers/fsl_flash.c ****  */
 182:../drivers/fsl_flash.c **** #define FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED 0xFFFFFFFFU
 183:../drivers/fsl_flash.c **** #define FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED 0xFFFFU
 184:../drivers/fsl_flash.c **** /*@}*/
 185:../drivers/fsl_flash.c **** 
 186:../drivers/fsl_flash.c **** /*!
 187:../drivers/fsl_flash.c ****  * @name Flash Program Once Field defines
 188:../drivers/fsl_flash.c ****  * @{
 189:../drivers/fsl_flash.c ****  */
 190:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_IS_FTFA) && FSL_FEATURE_FLASH_IS_FTFA
 191:../drivers/fsl_flash.c **** /* FTFA parts(eg. K80, KL80, L5K) support both 4-bytes and 8-bytes unit size */
 192:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_MIN_ID_8BYTES \
 193:../drivers/fsl_flash.c ****     0x10U /* Minimum Index indcating one of Progam Once Fields which is accessed in 8-byte records 
 194:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_MAX_ID_8BYTES \
 195:../drivers/fsl_flash.c ****     0x13U /* Maximum Index indcating one of Progam Once Fields which is accessed in 8-byte records 
 196:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 1
 197:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 1
 198:../drivers/fsl_flash.c **** #elif defined(FSL_FEATURE_FLASH_IS_FTFE) && FSL_FEATURE_FLASH_IS_FTFE
 199:../drivers/fsl_flash.c **** /* FTFE parts(eg. K65, KE18) only support 8-bytes unit size */
 200:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 0
 201:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 1
 202:../drivers/fsl_flash.c **** #elif defined(FSL_FEATURE_FLASH_IS_FTFL) && FSL_FEATURE_FLASH_IS_FTFL
 203:../drivers/fsl_flash.c **** /* FTFL parts(eg. K20) only support 4-bytes unit size */
 204:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 1
 205:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 0
 206:../drivers/fsl_flash.c **** #endif
 207:../drivers/fsl_flash.c **** /*@}*/
 208:../drivers/fsl_flash.c **** 
 209:../drivers/fsl_flash.c **** /*!
 210:../drivers/fsl_flash.c ****  * @name Flash security status defines
 211:../drivers/fsl_flash.c ****  * @{
 212:../drivers/fsl_flash.c ****  */
 213:../drivers/fsl_flash.c **** #define FLASH_SECURITY_STATE_KEYEN 0x80U
 214:../drivers/fsl_flash.c **** #define FLASH_SECURITY_STATE_UNSECURED 0x02U
 215:../drivers/fsl_flash.c **** #define FLASH_NOT_SECURE 0x01U
 216:../drivers/fsl_flash.c **** #define FLASH_SECURE_BACKDOOR_ENABLED 0x02U
 217:../drivers/fsl_flash.c **** #define FLASH_SECURE_BACKDOOR_DISABLED 0x04U
 218:../drivers/fsl_flash.c **** /*@}*/
 219:../drivers/fsl_flash.c **** 
 220:../drivers/fsl_flash.c **** /*!
 221:../drivers/fsl_flash.c ****  * @name Flash controller command numbers
 222:../drivers/fsl_flash.c ****  * @{
 223:../drivers/fsl_flash.c ****  */
 224:../drivers/fsl_flash.c **** #define FTFx_VERIFY_BLOCK 0x00U                    /*!< RD1BLK*/
 225:../drivers/fsl_flash.c **** #define FTFx_VERIFY_SECTION 0x01U                  /*!< RD1SEC*/
 226:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_CHECK 0x02U                   /*!< PGMCHK*/
 227:../drivers/fsl_flash.c **** #define FTFx_READ_RESOURCE 0x03U                   /*!< RDRSRC*/
 228:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_LONGWORD 0x06U                /*!< PGM4*/
 229:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_PHRASE 0x07U                  /*!< PGM8*/
 230:../drivers/fsl_flash.c **** #define FTFx_ERASE_BLOCK 0x08U                     /*!< ERSBLK*/
 231:../drivers/fsl_flash.c **** #define FTFx_ERASE_SECTOR 0x09U                    /*!< ERSSCR*/
 232:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_SECTION 0x0BU                 /*!< PGMSEC*/
 233:../drivers/fsl_flash.c **** #define FTFx_GENERATE_CRC 0x0CU                    /*!< CRCGEN*/
 234:../drivers/fsl_flash.c **** #define FTFx_VERIFY_ALL_BLOCK 0x40U                /*!< RD1ALL*/
 235:../drivers/fsl_flash.c **** #define FTFx_READ_ONCE 0x41U                       /*!< RDONCE or RDINDEX*/
 236:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_ONCE 0x43U                    /*!< PGMONCE or PGMINDEX*/
 237:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_BLOCK 0x44U                 /*!< ERSALL*/
 238:../drivers/fsl_flash.c **** #define FTFx_SECURITY_BY_PASS 0x45U                /*!< VFYKEY*/
 239:../drivers/fsl_flash.c **** #define FTFx_SWAP_CONTROL 0x46U                    /*!< SWAP*/
 240:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_BLOCK_UNSECURE 0x49U        /*!< ERSALLU*/
 241:../drivers/fsl_flash.c **** #define FTFx_VERIFY_ALL_EXECUTE_ONLY_SEGMENT 0x4AU /*!< RD1XA*/
 242:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_EXECUTE_ONLY_SEGMENT 0x4BU  /*!< ERSXA*/
 243:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_PARTITION 0x80U               /*!< PGMPART)*/
 244:../drivers/fsl_flash.c **** #define FTFx_SET_FLEXRAM_FUNCTION 0x81U            /*!< SETRAM*/
 245:../drivers/fsl_flash.c ****                                                    /*@}*/
 246:../drivers/fsl_flash.c **** 
 247:../drivers/fsl_flash.c **** /*!
 248:../drivers/fsl_flash.c ****  * @name Common flash register info defines
 249:../drivers/fsl_flash.c ****  * @{
 250:../drivers/fsl_flash.c ****  */
 251:../drivers/fsl_flash.c **** #if defined(FTFA)
 252:../drivers/fsl_flash.c **** #define FTFx FTFA
 253:../drivers/fsl_flash.c **** #define FTFx_BASE FTFA_BASE
 254:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFA_FSTAT_CCIF_MASK
 255:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFA_FSTAT_RDCOLERR_MASK
 256:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFA_FSTAT_ACCERR_MASK
 257:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFA_FSTAT_FPVIOL_MASK
 258:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFA_FSTAT_MGSTAT0_MASK
 259:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFA_FSEC_SEC_MASK
 260:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFA_FSEC_KEYEN_MASK
 261:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 262:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFA_FCNFG_RAMRDY_MASK
 263:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 264:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 265:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFA_FCNFG_EEERDY_MASK
 266:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 267:../drivers/fsl_flash.c **** #elif defined(FTFE)
 268:../drivers/fsl_flash.c **** #define FTFx FTFE
 269:../drivers/fsl_flash.c **** #define FTFx_BASE FTFE_BASE
 270:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFE_FSTAT_CCIF_MASK
 271:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFE_FSTAT_RDCOLERR_MASK
 272:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFE_FSTAT_ACCERR_MASK
 273:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFE_FSTAT_FPVIOL_MASK
 274:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFE_FSTAT_MGSTAT0_MASK
 275:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFE_FSEC_SEC_MASK
 276:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFE_FSEC_KEYEN_MASK
 277:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 278:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFE_FCNFG_RAMRDY_MASK
 279:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 280:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 281:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFE_FCNFG_EEERDY_MASK
 282:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 283:../drivers/fsl_flash.c **** #elif defined(FTFL)
 284:../drivers/fsl_flash.c **** #define FTFx FTFL
 285:../drivers/fsl_flash.c **** #define FTFx_BASE FTFL_BASE
 286:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFL_FSTAT_CCIF_MASK
 287:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFL_FSTAT_RDCOLERR_MASK
 288:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFL_FSTAT_ACCERR_MASK
 289:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFL_FSTAT_FPVIOL_MASK
 290:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFL_FSTAT_MGSTAT0_MASK
 291:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFL_FSEC_SEC_MASK
 292:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFL_FSEC_KEYEN_MASK
 293:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 294:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFL_FCNFG_RAMRDY_MASK
 295:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 296:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 297:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFL_FCNFG_EEERDY_MASK
 298:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 299:../drivers/fsl_flash.c **** #else
 300:../drivers/fsl_flash.c **** #error "Unknown flash controller"
 301:../drivers/fsl_flash.c **** #endif
 302:../drivers/fsl_flash.c **** /*@}*/
 303:../drivers/fsl_flash.c **** 
 304:../drivers/fsl_flash.c **** /*!
 305:../drivers/fsl_flash.c ****  * @name Common flash register access info defines
 306:../drivers/fsl_flash.c ****  * @{
 307:../drivers/fsl_flash.c ****  */
 308:../drivers/fsl_flash.c **** #define FTFx_FCCOB3_REG (FTFx->FCCOB3)
 309:../drivers/fsl_flash.c **** #define FTFx_FCCOB5_REG (FTFx->FCCOB5)
 310:../drivers/fsl_flash.c **** #define FTFx_FCCOB6_REG (FTFx->FCCOB6)
 311:../drivers/fsl_flash.c **** #define FTFx_FCCOB7_REG (FTFx->FCCOB7)
 312:../drivers/fsl_flash.c **** 
 313:../drivers/fsl_flash.c **** #if defined(FTFA_FPROTH0_PROT_MASK) || defined(FTFE_FPROTH0_PROT_MASK) || defined(FTFL_FPROTH0_PROT
 314:../drivers/fsl_flash.c **** #define FTFx_FPROT_HIGH_REG (FTFx->FPROTH3)
 315:../drivers/fsl_flash.c **** #define FTFx_FPROTH3_REG (FTFx->FPROTH3)
 316:../drivers/fsl_flash.c **** #define FTFx_FPROTH2_REG (FTFx->FPROTH2)
 317:../drivers/fsl_flash.c **** #define FTFx_FPROTH1_REG (FTFx->FPROTH1)
 318:../drivers/fsl_flash.c **** #define FTFx_FPROTH0_REG (FTFx->FPROTH0)
 319:../drivers/fsl_flash.c **** #endif
 320:../drivers/fsl_flash.c **** 
 321:../drivers/fsl_flash.c **** #if defined(FTFA_FPROTL0_PROT_MASK) || defined(FTFE_FPROTL0_PROT_MASK) || defined(FTFL_FPROTL0_PROT
 322:../drivers/fsl_flash.c **** #define FTFx_FPROT_LOW_REG (FTFx->FPROTL3)
 323:../drivers/fsl_flash.c **** #define FTFx_FPROTL3_REG (FTFx->FPROTL3)
 324:../drivers/fsl_flash.c **** #define FTFx_FPROTL2_REG (FTFx->FPROTL2)
 325:../drivers/fsl_flash.c **** #define FTFx_FPROTL1_REG (FTFx->FPROTL1)
 326:../drivers/fsl_flash.c **** #define FTFx_FPROTL0_REG (FTFx->FPROTL0)
 327:../drivers/fsl_flash.c **** #elif defined(FTFA_FPROT0_PROT_MASK) || defined(FTFE_FPROT0_PROT_MASK) || defined(FTFL_FPROT0_PROT_
 328:../drivers/fsl_flash.c **** #define FTFx_FPROT_LOW_REG (FTFx->FPROT3)
 329:../drivers/fsl_flash.c **** #define FTFx_FPROTL3_REG (FTFx->FPROT3)
 330:../drivers/fsl_flash.c **** #define FTFx_FPROTL2_REG (FTFx->FPROT2)
 331:../drivers/fsl_flash.c **** #define FTFx_FPROTL1_REG (FTFx->FPROT1)
 332:../drivers/fsl_flash.c **** #define FTFx_FPROTL0_REG (FTFx->FPROT0)
 333:../drivers/fsl_flash.c **** #endif
 334:../drivers/fsl_flash.c **** 
 335:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
 336:../drivers/fsl_flash.c **** #define FTFx_FPROTSH_REG (FTFx->FPROTSH)
 337:../drivers/fsl_flash.c **** #define FTFx_FPROTSL_REG (FTFx->FPROTSL)
 338:../drivers/fsl_flash.c **** #endif
 339:../drivers/fsl_flash.c **** 
 340:../drivers/fsl_flash.c **** #define FTFx_XACCH3_REG (FTFx->XACCH3)
 341:../drivers/fsl_flash.c **** #define FTFx_XACCL3_REG (FTFx->XACCL3)
 342:../drivers/fsl_flash.c **** 
 343:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
 344:../drivers/fsl_flash.c **** #define FTFx_XACCSH_REG (FTFx->XACCSH)
 345:../drivers/fsl_flash.c **** #define FTFx_XACCSL_REG (FTFx->XACCSL)
 346:../drivers/fsl_flash.c **** #endif
 347:../drivers/fsl_flash.c **** /*@}*/
 348:../drivers/fsl_flash.c **** 
 349:../drivers/fsl_flash.c **** /*!
 350:../drivers/fsl_flash.c ****  * @brief Enumeration for access segment property.
 351:../drivers/fsl_flash.c ****  */
 352:../drivers/fsl_flash.c **** enum _flash_access_segment_property
 353:../drivers/fsl_flash.c **** {
 354:../drivers/fsl_flash.c ****     kFLASH_AccessSegmentBase = 256UL,
 355:../drivers/fsl_flash.c **** };
 356:../drivers/fsl_flash.c **** 
 357:../drivers/fsl_flash.c **** /*!
 358:../drivers/fsl_flash.c ****  * @brief Enumeration for flash config area.
 359:../drivers/fsl_flash.c ****  */
 360:../drivers/fsl_flash.c **** enum _flash_config_area_range
 361:../drivers/fsl_flash.c **** {
 362:../drivers/fsl_flash.c ****     kFLASH_ConfigAreaStart = 0x400U,
 363:../drivers/fsl_flash.c ****     kFLASH_ConfigAreaEnd = 0x40FU
 364:../drivers/fsl_flash.c **** };
 365:../drivers/fsl_flash.c **** 
 366:../drivers/fsl_flash.c **** /*!
 367:../drivers/fsl_flash.c ****  * @name Flash register access type defines
 368:../drivers/fsl_flash.c ****  * @{
 369:../drivers/fsl_flash.c ****  */
 370:../drivers/fsl_flash.c **** #define FTFx_REG8_ACCESS_TYPE volatile uint8_t *
 371:../drivers/fsl_flash.c **** #define FTFx_REG32_ACCESS_TYPE volatile uint32_t *
 372:../drivers/fsl_flash.c **** /*@}*/
 373:../drivers/fsl_flash.c **** 
 374:../drivers/fsl_flash.c **** /*!
 375:../drivers/fsl_flash.c ****  * @brief MCM cache register access info defines.
 376:../drivers/fsl_flash.c ****  */
 377:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_CFCC_MASK)
 378:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_MASK MCM_PLACR_CFCC_MASK
 379:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_SHIFT MCM_PLACR_CFCC_SHIFT
 380:../drivers/fsl_flash.c **** #if defined(MCM0)
 381:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM0->PLACR
 382:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM1))
 383:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM->PLACR
 384:../drivers/fsl_flash.c **** #endif
 385:../drivers/fsl_flash.c **** #if defined(MCM1)
 386:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM1->PLACR
 387:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM0))
 388:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM->PLACR
 389:../drivers/fsl_flash.c **** #endif
 390:../drivers/fsl_flash.c **** #elif defined(MCM_CPCR2_CCBC_MASK)
 391:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_MASK MCM_CPCR2_CCBC_MASK
 392:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_SHIFT MCM_CPCR2_CCBC_SHIFT
 393:../drivers/fsl_flash.c **** #if defined(MCM0)
 394:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM0->CPCR2
 395:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM1))
 396:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM->CPCR2
 397:../drivers/fsl_flash.c **** #endif
 398:../drivers/fsl_flash.c **** #if defined(MCM1)
 399:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM1->CPCR2
 400:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM0))
 401:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM->CPCR2
 402:../drivers/fsl_flash.c **** #endif
 403:../drivers/fsl_flash.c **** #endif
 404:../drivers/fsl_flash.c **** 
 405:../drivers/fsl_flash.c **** /*!
 406:../drivers/fsl_flash.c ****  * @brief Enumeration for ARM core part number.
 407:../drivers/fsl_flash.c ****  */
 408:../drivers/fsl_flash.c **** enum _arm_core_part_number
 409:../drivers/fsl_flash.c **** {
 410:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0 = 0xc20U,
 411:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0P = 0xc60U,
 412:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM1 = 0xc21U,
 413:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM3 = 0xc23U,
 414:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM4 = 0xc24U,
 415:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM7 = 0xc27U,
 416:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM23 = 0xd20U,
 417:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM33 = 0xd21U,
 418:../drivers/fsl_flash.c **** 
 419:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid = 0xFFFFU,
 420:../drivers/fsl_flash.c **** };
 421:../drivers/fsl_flash.c **** 
 422:../drivers/fsl_flash.c **** #if defined(BL_TARGET_ROM) && defined(MCM0_CACHE_REG) && defined(MCM1_CACHE_REG) && \
 423:../drivers/fsl_flash.c ****     defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
 424:../drivers/fsl_flash.c **** FTFx_REG32_ACCESS_TYPE const s_mcmModuleAccessTypeArray[] = {
 425:../drivers/fsl_flash.c ****     (FTFx_REG32_ACCESS_TYPE)&MCM0_CACHE_REG,
 426:../drivers/fsl_flash.c ****     (FTFx_REG32_ACCESS_TYPE)&MCM1_CACHE_REG
 427:../drivers/fsl_flash.c **** };
 428:../drivers/fsl_flash.c **** 
 429:../drivers/fsl_flash.c **** static const uint16_t s_armCorePartNumberArray[] = {
 430:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0P,
 431:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM1,
 432:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 433:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM3,
 434:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM4,
 435:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 436:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 437:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM7
 438:../drivers/fsl_flash.c **** };
 439:../drivers/fsl_flash.c **** #endif
 440:../drivers/fsl_flash.c **** 
 441:../drivers/fsl_flash.c **** /*!
 442:../drivers/fsl_flash.c ****  * @brief MSCM cache register access info defines.
 443:../drivers/fsl_flash.c ****  */
 444:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCM1_MASK)
 445:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR_OCM1_MASK
 446:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR_OCM1_SHIFT
 447:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR_OCM1(x)
 448:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR0_OCM1_MASK) || defined(MSCM_OCMDR1_OCM1_MASK)
 449:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR0_OCM1_MASK
 450:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR0_OCM1_SHIFT
 451:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR0_OCM1(x)
 452:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR_OCMC1_MASK)
 453:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR_OCMC1_MASK
 454:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR_OCMC1_SHIFT
 455:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR_OCMC1(x)
 456:../drivers/fsl_flash.c **** #endif
 457:../drivers/fsl_flash.c **** 
 458:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCM1_MASK) || defined(MSCM_OCMDR_OCMC1_MASK)
 459:../drivers/fsl_flash.c **** #define MSCM_OCMDR0_REG MSCM->OCMDR[0]
 460:../drivers/fsl_flash.c **** #define MSCM_OCMDR1_REG MSCM->OCMDR[1]
 461:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR0_OCM1_MASK) || defined(MSCM_OCMDR1_OCM1_MASK)
 462:../drivers/fsl_flash.c **** #define MSCM_OCMDR0_REG MSCM->OCMDR0
 463:../drivers/fsl_flash.c **** #define MSCM_OCMDR1_REG MSCM->OCMDR1
 464:../drivers/fsl_flash.c **** #endif
 465:../drivers/fsl_flash.c **** 
 466:../drivers/fsl_flash.c **** /*!
 467:../drivers/fsl_flash.c ****  * @brief MSCM prefetch speculation defines.
 468:../drivers/fsl_flash.c ****  */
 469:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFDS_MASK (0x10U)
 470:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFCS_MASK (0x20U)
 471:../drivers/fsl_flash.c **** 
 472:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFDS_SHIFT (4U)
 473:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFCS_SHIFT (5U)
 474:../drivers/fsl_flash.c **** 
 475:../drivers/fsl_flash.c **** /*******************************************************************************
 476:../drivers/fsl_flash.c ****  * Prototypes
 477:../drivers/fsl_flash.c ****  ******************************************************************************/
 478:../drivers/fsl_flash.c **** 
 479:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 480:../drivers/fsl_flash.c **** /*! @brief Copy flash_run_command() to RAM*/
 481:../drivers/fsl_flash.c **** static void copy_flash_run_command(uint32_t *flashRunCommand);
 482:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 483:../drivers/fsl_flash.c **** /*! @brief Copy flash_cache_clear_command() to RAM*/
 484:../drivers/fsl_flash.c **** static void copy_flash_common_bit_operation(uint32_t *flashCommonBitOperation);
 485:../drivers/fsl_flash.c **** #endif
 486:../drivers/fsl_flash.c **** /*! @brief Check whether flash execute-in-ram functions are ready*/
 487:../drivers/fsl_flash.c **** static status_t flash_check_execute_in_ram_function_info(flash_config_t *config);
 488:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 489:../drivers/fsl_flash.c **** 
 490:../drivers/fsl_flash.c **** /*! @brief Internal function Flash command sequence. Called by driver APIs only*/
 491:../drivers/fsl_flash.c **** static status_t flash_command_sequence(flash_config_t *config);
 492:../drivers/fsl_flash.c **** 
 493:../drivers/fsl_flash.c **** /*! @brief Perform the cache clear to the flash*/
 494:../drivers/fsl_flash.c **** void flash_cache_clear(flash_config_t *config);
 495:../drivers/fsl_flash.c **** 
 496:../drivers/fsl_flash.c **** /*! @brief Process the cache to the flash*/
 497:../drivers/fsl_flash.c **** static void flash_cache_clear_process(flash_config_t *config, flash_cache_clear_process_t process);
 498:../drivers/fsl_flash.c **** 
 499:../drivers/fsl_flash.c **** /*! @brief Validates the range and alignment of the given address range.*/
 500:../drivers/fsl_flash.c **** static status_t flash_check_range(flash_config_t *config,
 501:../drivers/fsl_flash.c ****                                   uint32_t startAddress,
 502:../drivers/fsl_flash.c ****                                   uint32_t lengthInBytes,
 503:../drivers/fsl_flash.c ****                                   uint32_t alignmentBaseline);
 504:../drivers/fsl_flash.c **** /*! @brief Gets the right address, sector and block size of current flash type which is indicated b
 505:../drivers/fsl_flash.c **** static status_t flash_get_matched_operation_info(flash_config_t *config,
 506:../drivers/fsl_flash.c ****                                                  uint32_t address,
 507:../drivers/fsl_flash.c ****                                                  flash_operation_config_t *info);
 508:../drivers/fsl_flash.c **** /*! @brief Validates the given user key for flash erase APIs.*/
 509:../drivers/fsl_flash.c **** static status_t flash_check_user_key(uint32_t key);
 510:../drivers/fsl_flash.c **** 
 511:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 512:../drivers/fsl_flash.c **** /*! @brief Updates FlexNVM memory partition status according to data flash 0 IFR.*/
 513:../drivers/fsl_flash.c **** static status_t flash_update_flexnvm_memory_partition_status(flash_config_t *config);
 514:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
 515:../drivers/fsl_flash.c **** 
 516:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
 517:../drivers/fsl_flash.c **** /*! @brief Validates the range of the given resource address.*/
 518:../drivers/fsl_flash.c **** static status_t flash_check_resource_range(uint32_t start,
 519:../drivers/fsl_flash.c ****                                            uint32_t lengthInBytes,
 520:../drivers/fsl_flash.c ****                                            uint32_t alignmentBaseline,
 521:../drivers/fsl_flash.c ****                                            flash_read_resource_option_t option);
 522:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
 523:../drivers/fsl_flash.c **** 
 524:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
 525:../drivers/fsl_flash.c **** /*! @brief Validates the gived swap control option.*/
 526:../drivers/fsl_flash.c **** static status_t flash_check_swap_control_option(flash_swap_control_option_t option);
 527:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
 528:../drivers/fsl_flash.c **** 
 529:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
 530:../drivers/fsl_flash.c **** /*! @brief Validates the gived address to see if it is equal to swap indicator address in pflash sw
 531:../drivers/fsl_flash.c **** static status_t flash_validate_swap_indicator_address(flash_config_t *config, uint32_t address);
 532:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
 533:../drivers/fsl_flash.c **** 
 534:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
 535:../drivers/fsl_flash.c **** /*! @brief Validates the gived flexram function option.*/
 536:../drivers/fsl_flash.c **** static inline status_t flasn_check_flexram_function_option_range(flash_flexram_function_option_t op
 537:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
 538:../drivers/fsl_flash.c **** 
 539:../drivers/fsl_flash.c **** /*! @brief Gets the flash protection information (region size, region count).*/
 540:../drivers/fsl_flash.c **** static status_t flash_get_protection_info(flash_config_t *config, flash_protection_config_t *info);
 541:../drivers/fsl_flash.c **** 
 542:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 543:../drivers/fsl_flash.c **** /*! @brief Gets the flash Execute-Only access information (Segment size, Segment count).*/
 544:../drivers/fsl_flash.c **** static status_t flash_get_access_info(flash_config_t *config, flash_access_config_t *info);
 545:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 546:../drivers/fsl_flash.c **** 
 547:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
 548:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by MCM.*/
 549:../drivers/fsl_flash.c **** void mcm_flash_cache_clear(void);
 550:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_MCM */
 551:../drivers/fsl_flash.c **** 
 552:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
 553:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by FMC.*/
 554:../drivers/fsl_flash.c **** void fmc_flash_cache_clear(void);
 555:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
 556:../drivers/fsl_flash.c **** 
 557:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
 558:../drivers/fsl_flash.c **** /*! @brief Sets the prefetch speculation buffer to the flash by MSCM.*/
 559:../drivers/fsl_flash.c **** void mscm_flash_prefetch_speculation_enable(uint32_t flashIndex, bool enable);
 560:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM */
 561:../drivers/fsl_flash.c **** 
 562:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
 563:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by FMC.*/
 564:../drivers/fsl_flash.c **** void fmc_flash_prefetch_speculation_clear(void);
 565:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
 566:../drivers/fsl_flash.c **** 
 567:../drivers/fsl_flash.c **** /*******************************************************************************
 568:../drivers/fsl_flash.c ****  * Variables
 569:../drivers/fsl_flash.c ****  ******************************************************************************/
 570:../drivers/fsl_flash.c **** 
 571:../drivers/fsl_flash.c **** /*! @brief Access to FTFx->FCCOB */
 572:../drivers/fsl_flash.c **** volatile uint32_t *const kFCCOBx = (volatile uint32_t *)&FTFx_FCCOB3_REG;
 573:../drivers/fsl_flash.c **** /*! @brief Access to FTFx->FPROT */
 574:../drivers/fsl_flash.c **** volatile uint32_t *const kFPROTL = (volatile uint32_t *)&FTFx_FPROT_LOW_REG;
 575:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
 576:../drivers/fsl_flash.c **** volatile uint32_t *const kFPROTH = (volatile uint32_t *)&FTFx_FPROT_HIGH_REG;
 577:../drivers/fsl_flash.c **** #endif
 578:../drivers/fsl_flash.c **** 
 579:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
 580:../drivers/fsl_flash.c **** volatile uint8_t *const kFPROTSL = (volatile uint8_t *)&FTFx_FPROTSL_REG;
 581:../drivers/fsl_flash.c **** volatile uint8_t *const kFPROTSH = (volatile uint8_t *)&FTFx_FPROTSH_REG;
 582:../drivers/fsl_flash.c **** #endif
 583:../drivers/fsl_flash.c **** 
 584:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 585:../drivers/fsl_flash.c **** /*! @brief A function pointer used to point to relocated flash_run_command() */
 586:../drivers/fsl_flash.c **** static void (*callFlashRunCommand)(FTFx_REG8_ACCESS_TYPE ftfx_fstat);
 587:../drivers/fsl_flash.c **** 
 588:../drivers/fsl_flash.c **** /*!
 589:../drivers/fsl_flash.c ****  * @brief Position independent code of flash_run_command()
 590:../drivers/fsl_flash.c ****  *
 591:../drivers/fsl_flash.c ****  * Note1: The prototype of C function is shown as below:
 592:../drivers/fsl_flash.c ****  * @code
 593:../drivers/fsl_flash.c ****  *   void flash_run_command(FTFx_REG8_ACCESS_TYPE ftfx_fstat)
 594:../drivers/fsl_flash.c ****  *   {
 595:../drivers/fsl_flash.c ****  *       // clear CCIF bit
 596:../drivers/fsl_flash.c ****  *       *ftfx_fstat = FTFx_FSTAT_CCIF_MASK;
 597:../drivers/fsl_flash.c ****  *
 598:../drivers/fsl_flash.c ****  *       // Check CCIF bit of the flash status register, wait till it is set.
 599:../drivers/fsl_flash.c ****  *       // IP team indicates that this loop will always complete.
 600:../drivers/fsl_flash.c ****  *       while (!((*ftfx_fstat) & FTFx_FSTAT_CCIF_MASK))
 601:../drivers/fsl_flash.c ****  *       {
 602:../drivers/fsl_flash.c ****  *       }
 603:../drivers/fsl_flash.c ****  *   }
 604:../drivers/fsl_flash.c ****  * @endcode
 605:../drivers/fsl_flash.c ****  * Note2: The binary code is generated by IAR 7.70.1
 606:../drivers/fsl_flash.c ****  */
 607:../drivers/fsl_flash.c **** static const uint16_t s_flashRunCommandFunctionCode[] = {
 608:../drivers/fsl_flash.c ****     0x2180, /* MOVS  R1, #128 ; 0x80 */
 609:../drivers/fsl_flash.c ****     0x7001, /* STRB  R1, [R0] */
 610:../drivers/fsl_flash.c ****     /* @4: */
 611:../drivers/fsl_flash.c ****     0x7802, /* LDRB  R2, [R0] */
 612:../drivers/fsl_flash.c ****     0x420a, /* TST   R2, R1 */
 613:../drivers/fsl_flash.c ****     0xd0fc, /* BEQ.N @4 */
 614:../drivers/fsl_flash.c ****     0x4770  /* BX    LR */
 615:../drivers/fsl_flash.c **** };
 616:../drivers/fsl_flash.c **** 
 617:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 618:../drivers/fsl_flash.c **** /*! @brief A function pointer used to point to relocated flash_common_bit_operation() */
 619:../drivers/fsl_flash.c **** static void (*callFlashCommonBitOperation)(FTFx_REG32_ACCESS_TYPE base,
 620:../drivers/fsl_flash.c ****                                            uint32_t bitMask,
 621:../drivers/fsl_flash.c ****                                            uint32_t bitShift,
 622:../drivers/fsl_flash.c ****                                            uint32_t bitValue);
 623:../drivers/fsl_flash.c **** 
 624:../drivers/fsl_flash.c **** /*!
 625:../drivers/fsl_flash.c ****  * @brief Position independent code of flash_common_bit_operation()
 626:../drivers/fsl_flash.c ****  *
 627:../drivers/fsl_flash.c ****  * Note1: The prototype of C function is shown as below:
 628:../drivers/fsl_flash.c ****  * @code
 629:../drivers/fsl_flash.c ****  *   void flash_common_bit_operation(FTFx_REG32_ACCESS_TYPE base, uint32_t bitMask, uint32_t bitShi
 630:../drivers/fsl_flash.c ****  * bitValue)
 631:../drivers/fsl_flash.c ****  *   {
 632:../drivers/fsl_flash.c ****  *       if (bitMask)
 633:../drivers/fsl_flash.c ****  *       {
 634:../drivers/fsl_flash.c ****  *           uint32_t value = (((uint32_t)(((uint32_t)(bitValue)) << bitShift)) & bitMask);
 635:../drivers/fsl_flash.c ****  *           *base = (*base & (~bitMask)) | value;
 636:../drivers/fsl_flash.c ****  *       }
 637:../drivers/fsl_flash.c ****  *
 638:../drivers/fsl_flash.c ****  *       __ISB();
 639:../drivers/fsl_flash.c ****  *       __DSB();
 640:../drivers/fsl_flash.c ****  *   }
 641:../drivers/fsl_flash.c ****  * @endcode
 642:../drivers/fsl_flash.c ****  * Note2: The binary code is generated by IAR 7.70.1
 643:../drivers/fsl_flash.c ****  */
 644:../drivers/fsl_flash.c **** static const uint16_t s_flashCommonBitOperationFunctionCode[] = {
 645:../drivers/fsl_flash.c ****     0xb510, /* PUSH  {R4, LR} */
 646:../drivers/fsl_flash.c ****     0x2900, /* CMP   R1, #0 */
 647:../drivers/fsl_flash.c ****     0xd005, /* BEQ.N @12 */
 648:../drivers/fsl_flash.c ****     0x6804, /* LDR   R4, [R0] */
 649:../drivers/fsl_flash.c ****     0x438c, /* BICS  R4, R4, R1 */
 650:../drivers/fsl_flash.c ****     0x4093, /* LSLS  R3, R3, R2 */
 651:../drivers/fsl_flash.c ****     0x4019, /* ANDS  R1, R1, R3 */
 652:../drivers/fsl_flash.c ****     0x4321, /* ORRS  R1, R1, R4 */
 653:../drivers/fsl_flash.c ****     0x6001, /* STR   R1, [R0] */
 654:../drivers/fsl_flash.c ****     /*  @12: */
 655:../drivers/fsl_flash.c ****     0xf3bf, 0x8f6f, /* ISB */
 656:../drivers/fsl_flash.c ****     0xf3bf, 0x8f4f, /* DSB */
 657:../drivers/fsl_flash.c ****     0xbd10          /* POP   {R4, PC} */
 658:../drivers/fsl_flash.c **** };
 659:../drivers/fsl_flash.c **** #endif /* FLASH_IS_CACHE_INVALIDATION_AVAILABLE */
 660:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 661:../drivers/fsl_flash.c **** 
 662:../drivers/fsl_flash.c **** #if (FLASH_DRIVER_IS_FLASH_RESIDENT && !FLASH_DRIVER_IS_EXPORTED)
 663:../drivers/fsl_flash.c **** /*! @brief A static buffer used to hold flash_run_command() */
 664:../drivers/fsl_flash.c **** static uint32_t s_flashRunCommand[kFLASH_ExecuteInRamFunctionMaxSizeInWords];
 665:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 666:../drivers/fsl_flash.c **** /*! @brief A static buffer used to hold flash_common_bit_operation() */
 667:../drivers/fsl_flash.c **** static uint32_t s_flashCommonBitOperation[kFLASH_ExecuteInRamFunctionMaxSizeInWords];
 668:../drivers/fsl_flash.c **** #endif
 669:../drivers/fsl_flash.c **** /*! @brief Flash execute-in-ram function information */
 670:../drivers/fsl_flash.c **** static flash_execute_in_ram_function_config_t s_flashExecuteInRamFunctionInfo;
 671:../drivers/fsl_flash.c **** #endif
 672:../drivers/fsl_flash.c **** 
 673:../drivers/fsl_flash.c **** /*!
 674:../drivers/fsl_flash.c ****  * @brief Table of pflash sizes.
 675:../drivers/fsl_flash.c ****  *
 676:../drivers/fsl_flash.c ****  *  The index into this table is the value of the SIM_FCFG1.PFSIZE bitfield.
 677:../drivers/fsl_flash.c ****  *
 678:../drivers/fsl_flash.c ****  *  The values in this table have been right shifted 10 bits so that they will all fit within
 679:../drivers/fsl_flash.c ****  *  an 16-bit integer. To get the actual flash density, you must left shift the looked up value
 680:../drivers/fsl_flash.c ****  *  by 10 bits.
 681:../drivers/fsl_flash.c ****  *
 682:../drivers/fsl_flash.c ****  *  Elements of this table have a value of 0 in cases where the PFSIZE bitfield value is
 683:../drivers/fsl_flash.c ****  *  reserved.
 684:../drivers/fsl_flash.c ****  *
 685:../drivers/fsl_flash.c ****  *  Code to use the table:
 686:../drivers/fsl_flash.c ****  *  @code
 687:../drivers/fsl_flash.c ****  *      uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_PFSIZE_MASK) >> SIM_FCFG1_PFSIZE_SHIFT;
 688:../drivers/fsl_flash.c ****  *      flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 689:../drivers/fsl_flash.c ****  *  @endcode
 690:../drivers/fsl_flash.c ****  */
 691:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_SIZE_ENCODING_RULE_VERSION) && (FSL_FEATURE_FLASH_SIZE_ENCODING_RULE_
 692:../drivers/fsl_flash.c **** const uint16_t kPFlashDensities[] = {
 693:../drivers/fsl_flash.c ****     0,    /* 0x0 - undefined */
 694:../drivers/fsl_flash.c ****     0,    /* 0x1 - undefined */
 695:../drivers/fsl_flash.c ****     0,    /* 0x2 - undefined */
 696:../drivers/fsl_flash.c ****     0,    /* 0x3 - undefined */
 697:../drivers/fsl_flash.c ****     0,    /* 0x4 - undefined */
 698:../drivers/fsl_flash.c ****     0,    /* 0x5 - undefined */
 699:../drivers/fsl_flash.c ****     0,    /* 0x6 - undefined */
 700:../drivers/fsl_flash.c ****     0,    /* 0x7 - undefined */
 701:../drivers/fsl_flash.c ****     0,    /* 0x8 - undefined */
 702:../drivers/fsl_flash.c ****     0,    /* 0x9 - undefined */
 703:../drivers/fsl_flash.c ****     256,  /* 0xa - 262144, 256KB */
 704:../drivers/fsl_flash.c ****     0,    /* 0xb - undefined */
 705:../drivers/fsl_flash.c ****     1024, /* 0xc - 1048576, 1MB */
 706:../drivers/fsl_flash.c ****     0,    /* 0xd - undefined */
 707:../drivers/fsl_flash.c ****     0,    /* 0xe - undefined */
 708:../drivers/fsl_flash.c ****     0,    /* 0xf - undefined */
 709:../drivers/fsl_flash.c **** };
 710:../drivers/fsl_flash.c **** #else
 711:../drivers/fsl_flash.c **** const uint16_t kPFlashDensities[] = {
 712:../drivers/fsl_flash.c ****     8,    /* 0x0 - 8192, 8KB */
 713:../drivers/fsl_flash.c ****     16,   /* 0x1 - 16384, 16KB */
 714:../drivers/fsl_flash.c ****     24,   /* 0x2 - 24576, 24KB */
 715:../drivers/fsl_flash.c ****     32,   /* 0x3 - 32768, 32KB */
 716:../drivers/fsl_flash.c ****     48,   /* 0x4 - 49152, 48KB */
 717:../drivers/fsl_flash.c ****     64,   /* 0x5 - 65536, 64KB */
 718:../drivers/fsl_flash.c ****     96,   /* 0x6 - 98304, 96KB */
 719:../drivers/fsl_flash.c ****     128,  /* 0x7 - 131072, 128KB */
 720:../drivers/fsl_flash.c ****     192,  /* 0x8 - 196608, 192KB */
 721:../drivers/fsl_flash.c ****     256,  /* 0x9 - 262144, 256KB */
 722:../drivers/fsl_flash.c ****     384,  /* 0xa - 393216, 384KB */
 723:../drivers/fsl_flash.c ****     512,  /* 0xb - 524288, 512KB */
 724:../drivers/fsl_flash.c ****     768,  /* 0xc - 786432, 768KB */
 725:../drivers/fsl_flash.c ****     1024, /* 0xd - 1048576, 1MB */
 726:../drivers/fsl_flash.c ****     1536, /* 0xe - 1572864, 1.5MB */
 727:../drivers/fsl_flash.c ****     /* 2048,  0xf - 2097152, 2MB */
 728:../drivers/fsl_flash.c **** };
 729:../drivers/fsl_flash.c **** #endif
 730:../drivers/fsl_flash.c **** 
 731:../drivers/fsl_flash.c **** /*******************************************************************************
 732:../drivers/fsl_flash.c ****  * Code
 733:../drivers/fsl_flash.c ****  ******************************************************************************/
 734:../drivers/fsl_flash.c **** 
 735:../drivers/fsl_flash.c **** status_t FLASH_Init(flash_config_t *config)
 736:../drivers/fsl_flash.c **** {
 737:../drivers/fsl_flash.c ****     if (config == NULL)
 738:../drivers/fsl_flash.c ****     {
 739:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 740:../drivers/fsl_flash.c ****     }
 741:../drivers/fsl_flash.c **** 
 742:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
 743:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
 744:../drivers/fsl_flash.c ****     {
 745:../drivers/fsl_flash.c **** /* calculate the flash density from SIM_FCFG1.PFSIZE */
 746:../drivers/fsl_flash.c **** #if defined(SIM_FCFG1_CORE1_PFSIZE_MASK)
 747:../drivers/fsl_flash.c ****         uint32_t flashDensity;
 748:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_CORE1_PFSIZE_MASK) >> SIM_FCFG1_CORE1_PFSIZE_SHIFT
 749:../drivers/fsl_flash.c ****         if (pfsize == 0xf)
 750:../drivers/fsl_flash.c ****         {
 751:../drivers/fsl_flash.c ****             flashDensity = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT * SECONDARY_FLASH_FEATURE_PFL
 752:../drivers/fsl_flash.c ****         }
 753:../drivers/fsl_flash.c ****         else
 754:../drivers/fsl_flash.c ****         {
 755:../drivers/fsl_flash.c ****             flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 756:../drivers/fsl_flash.c ****         }
 757:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 758:../drivers/fsl_flash.c **** #else
 759:../drivers/fsl_flash.c ****         /* Unused code to solve MISRA-C issue*/
 760:../drivers/fsl_flash.c ****         config->PFlashBlockBase = kPFlashDensities[0];
 761:../drivers/fsl_flash.c ****         config->PFlashTotalSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT * SECONDARY_FLASH_FEAT
 762:../drivers/fsl_flash.c **** #endif
 763:../drivers/fsl_flash.c ****         config->PFlashBlockBase = SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS;
 764:../drivers/fsl_flash.c ****         config->PFlashBlockCount = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 765:../drivers/fsl_flash.c ****         config->PFlashSectorSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 766:../drivers/fsl_flash.c ****     }
 767:../drivers/fsl_flash.c ****     else
 768:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
 769:../drivers/fsl_flash.c ****     {
 770:../drivers/fsl_flash.c ****         uint32_t flashDensity;
 771:../drivers/fsl_flash.c **** 
 772:../drivers/fsl_flash.c **** /* calculate the flash density from SIM_FCFG1.PFSIZE */
 773:../drivers/fsl_flash.c **** #if defined(SIM_FCFG1_CORE0_PFSIZE_MASK)
 774:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_CORE0_PFSIZE_MASK) >> SIM_FCFG1_CORE0_PFSIZE_SHIFT
 775:../drivers/fsl_flash.c **** #elif defined(SIM_FCFG1_PFSIZE_MASK)
 776:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_PFSIZE_MASK) >> SIM_FCFG1_PFSIZE_SHIFT;
 777:../drivers/fsl_flash.c **** #else
 778:../drivers/fsl_flash.c **** #error "Unknown flash size"
 779:../drivers/fsl_flash.c **** #endif
 780:../drivers/fsl_flash.c ****         /* PFSIZE=0xf means that on customer parts the IFR was not correctly programmed.
 781:../drivers/fsl_flash.c ****          * We just use the pre-defined flash size in feature file here to support pre-production pa
 782:../drivers/fsl_flash.c ****         if (pfsize == 0xf)
 783:../drivers/fsl_flash.c ****         {
 784:../drivers/fsl_flash.c ****             flashDensity = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT * MAIN_FLASH_FEATURE_PFLASH_BLOCK_
 785:../drivers/fsl_flash.c ****         }
 786:../drivers/fsl_flash.c ****         else
 787:../drivers/fsl_flash.c ****         {
 788:../drivers/fsl_flash.c ****             flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 789:../drivers/fsl_flash.c ****         }
 790:../drivers/fsl_flash.c **** 
 791:../drivers/fsl_flash.c ****         /* fill out a few of the structure members */
 792:../drivers/fsl_flash.c ****         config->PFlashBlockBase = MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS;
 793:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 794:../drivers/fsl_flash.c ****         config->PFlashBlockCount = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 795:../drivers/fsl_flash.c ****         config->PFlashSectorSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 796:../drivers/fsl_flash.c ****     }
 797:../drivers/fsl_flash.c **** 
 798:../drivers/fsl_flash.c ****     {
 799:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 800:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
 801:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
 802:../drivers/fsl_flash.c ****         {
 803:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentSize = kFLASH_AccessSegmentBase << FTFx->FACSSS;
 804:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentCount = FTFx->FACSNS;
 805:../drivers/fsl_flash.c ****         }
 806:../drivers/fsl_flash.c ****         else
 807:../drivers/fsl_flash.c **** #endif
 808:../drivers/fsl_flash.c ****         {
 809:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentSize = kFLASH_AccessSegmentBase << FTFx->FACSS;
 810:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentCount = FTFx->FACSN;
 811:../drivers/fsl_flash.c ****         }
 812:../drivers/fsl_flash.c **** #else
 813:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentSize = 0;
 814:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentCount = 0;
 815:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 816:../drivers/fsl_flash.c ****     }
 817:../drivers/fsl_flash.c **** 
 818:../drivers/fsl_flash.c **** /* copy required flash commands to RAM */
 819:../drivers/fsl_flash.c **** #if (FLASH_DRIVER_IS_FLASH_RESIDENT && !FLASH_DRIVER_IS_EXPORTED)
 820:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != flash_check_execute_in_ram_function_info(config))
 821:../drivers/fsl_flash.c ****     {
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.activeFunctionCount = 0;
 823:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 824:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 825:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashCommonBitOperation = s_flashCommonBitOperation;
 826:../drivers/fsl_flash.c **** #endif
 827:../drivers/fsl_flash.c ****         config->flashExecuteInRamFunctionInfo = &s_flashExecuteInRamFunctionInfo.activeFunctionCoun
 828:../drivers/fsl_flash.c ****         FLASH_PrepareExecuteInRamFunctions(config);
 829:../drivers/fsl_flash.c ****     }
 830:../drivers/fsl_flash.c **** #endif
 831:../drivers/fsl_flash.c **** 
 832:../drivers/fsl_flash.c ****     config->FlexRAMBlockBase = FSL_FEATURE_FLASH_FLEX_RAM_START_ADDRESS;
 833:../drivers/fsl_flash.c ****     config->FlexRAMTotalSize = FSL_FEATURE_FLASH_FLEX_RAM_SIZE;
 834:../drivers/fsl_flash.c **** 
 835:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 836:../drivers/fsl_flash.c ****     {
 837:../drivers/fsl_flash.c ****         status_t returnCode;
 838:../drivers/fsl_flash.c ****         config->DFlashBlockBase = FSL_FEATURE_FLASH_FLEX_NVM_START_ADDRESS;
 839:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
 840:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
 841:../drivers/fsl_flash.c ****         {
 842:../drivers/fsl_flash.c ****             return returnCode;
 843:../drivers/fsl_flash.c ****         }
 844:../drivers/fsl_flash.c ****     }
 845:../drivers/fsl_flash.c **** #endif
 846:../drivers/fsl_flash.c **** 
 847:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 848:../drivers/fsl_flash.c **** }
 849:../drivers/fsl_flash.c **** 
 850:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 851:../drivers/fsl_flash.c **** status_t FLASH_PrepareExecuteInRamFunctions(flash_config_t *config)
 852:../drivers/fsl_flash.c **** {
 853:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
 854:../drivers/fsl_flash.c **** 
 855:../drivers/fsl_flash.c ****     if ((config == NULL) || (config->flashExecuteInRamFunctionInfo == NULL))
 856:../drivers/fsl_flash.c ****     {
 857:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 858:../drivers/fsl_flash.c ****     }
 859:../drivers/fsl_flash.c **** 
 860:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo = (flash_execute_in_ram_function_config_t *)config->flashExecuteI
 861:../drivers/fsl_flash.c **** 
 862:../drivers/fsl_flash.c ****     copy_flash_run_command(flashExecuteInRamFunctionInfo->flashRunCommand);
 863:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 864:../drivers/fsl_flash.c ****     copy_flash_common_bit_operation(flashExecuteInRamFunctionInfo->flashCommonBitOperation);
 865:../drivers/fsl_flash.c **** #endif
 866:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo->activeFunctionCount = kFLASH_ExecuteInRamFunctionTotalNum;
 867:../drivers/fsl_flash.c **** 
 868:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 869:../drivers/fsl_flash.c **** }
 870:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 871:../drivers/fsl_flash.c **** 
 872:../drivers/fsl_flash.c **** status_t FLASH_EraseAll(flash_config_t *config, uint32_t key)
 873:../drivers/fsl_flash.c **** {
 874:../drivers/fsl_flash.c ****     status_t returnCode;
 875:../drivers/fsl_flash.c **** 
 876:../drivers/fsl_flash.c ****     if (config == NULL)
 877:../drivers/fsl_flash.c ****     {
 878:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 879:../drivers/fsl_flash.c ****     }
 880:../drivers/fsl_flash.c **** 
 881:../drivers/fsl_flash.c ****     /* preparing passing parameter to erase all flash blocks */
 882:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_BLOCK, 0xFFFFFFU);
 883:../drivers/fsl_flash.c **** 
 884:../drivers/fsl_flash.c ****     /* Validate the user key */
 885:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 886:../drivers/fsl_flash.c ****     if (returnCode)
 887:../drivers/fsl_flash.c ****     {
 888:../drivers/fsl_flash.c ****         return returnCode;
 889:../drivers/fsl_flash.c ****     }
 890:../drivers/fsl_flash.c **** 
 891:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 892:../drivers/fsl_flash.c **** 
 893:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
 894:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
 895:../drivers/fsl_flash.c **** 
 896:../drivers/fsl_flash.c ****     flash_cache_clear(config);
 897:../drivers/fsl_flash.c **** 
 898:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 899:../drivers/fsl_flash.c ****     /* Data flash IFR will be erased by erase all command, so we need to
 900:../drivers/fsl_flash.c ****      *  update FlexNVM memory partition status synchronously */
 901:../drivers/fsl_flash.c ****     if (returnCode == kStatus_FLASH_Success)
 902:../drivers/fsl_flash.c ****     {
 903:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
 904:../drivers/fsl_flash.c ****     }
 905:../drivers/fsl_flash.c **** #endif
 906:../drivers/fsl_flash.c **** 
 907:../drivers/fsl_flash.c ****     return returnCode;
 908:../drivers/fsl_flash.c **** }
 909:../drivers/fsl_flash.c **** 
 910:../drivers/fsl_flash.c **** status_t FLASH_Erase(flash_config_t *config, uint32_t start, uint32_t lengthInBytes, uint32_t key)
 911:../drivers/fsl_flash.c **** {
 912:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 913:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
 914:../drivers/fsl_flash.c ****     uint32_t endAddress;      /* storing end address */
 915:../drivers/fsl_flash.c ****     uint32_t numberOfSectors; /* number of sectors calculated by endAddress */
 916:../drivers/fsl_flash.c ****     status_t returnCode;
 917:../drivers/fsl_flash.c **** 
 918:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
 919:../drivers/fsl_flash.c **** 
 920:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
 921:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectorCmdAddres
 922:../drivers/fsl_flash.c ****     if (returnCode)
 923:../drivers/fsl_flash.c ****     {
 924:../drivers/fsl_flash.c ****         return returnCode;
 925:../drivers/fsl_flash.c ****     }
 926:../drivers/fsl_flash.c **** 
 927:../drivers/fsl_flash.c ****     /* Validate the user key */
 928:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 929:../drivers/fsl_flash.c ****     if (returnCode)
 930:../drivers/fsl_flash.c ****     {
 931:../drivers/fsl_flash.c ****         return returnCode;
 932:../drivers/fsl_flash.c ****     }
 933:../drivers/fsl_flash.c **** 
 934:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
 935:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
 936:../drivers/fsl_flash.c **** 
 937:../drivers/fsl_flash.c ****     /* calculating Flash end address */
 938:../drivers/fsl_flash.c ****     endAddress = start + lengthInBytes - 1;
 939:../drivers/fsl_flash.c **** 
 940:../drivers/fsl_flash.c ****     /* re-calculate the endAddress and align it to the start of the next sector
 941:../drivers/fsl_flash.c ****      * which will be used in the comparison below */
 942:../drivers/fsl_flash.c ****     if (endAddress % sectorSize)
 943:../drivers/fsl_flash.c ****     {
 944:../drivers/fsl_flash.c ****         numberOfSectors = endAddress / sectorSize + 1;
 945:../drivers/fsl_flash.c ****         endAddress = numberOfSectors * sectorSize - 1;
 946:../drivers/fsl_flash.c ****     }
 947:../drivers/fsl_flash.c **** 
 948:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 949:../drivers/fsl_flash.c **** 
 950:../drivers/fsl_flash.c ****     /* the start address will increment to the next sector address
 951:../drivers/fsl_flash.c ****      * until it reaches the endAdddress */
 952:../drivers/fsl_flash.c ****     while (start <= endAddress)
 953:../drivers/fsl_flash.c ****     {
 954:../drivers/fsl_flash.c ****         /* preparing passing parameter to erase a flash block */
 955:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_SECTOR, start);
 956:../drivers/fsl_flash.c **** 
 957:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
 958:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
 959:../drivers/fsl_flash.c **** 
 960:../drivers/fsl_flash.c ****         /* checking the success of command execution */
 961:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
 962:../drivers/fsl_flash.c ****         {
 963:../drivers/fsl_flash.c ****             break;
 964:../drivers/fsl_flash.c ****         }
 965:../drivers/fsl_flash.c ****         else
 966:../drivers/fsl_flash.c ****         {
 967:../drivers/fsl_flash.c ****             /* Increment to the next sector */
 968:../drivers/fsl_flash.c ****             start += sectorSize;
 969:../drivers/fsl_flash.c ****         }
 970:../drivers/fsl_flash.c ****     }
 971:../drivers/fsl_flash.c **** 
 972:../drivers/fsl_flash.c ****     flash_cache_clear(config);
 973:../drivers/fsl_flash.c **** 
 974:../drivers/fsl_flash.c ****     return (returnCode);
 975:../drivers/fsl_flash.c **** }
 976:../drivers/fsl_flash.c **** 
 977:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD) && FSL_FEATURE_FLASH_HAS_ERASE_ALL
 978:../drivers/fsl_flash.c **** status_t FLASH_EraseAllUnsecure(flash_config_t *config, uint32_t key)
 979:../drivers/fsl_flash.c **** {
 980:../drivers/fsl_flash.c ****     status_t returnCode;
 981:../drivers/fsl_flash.c **** 
 982:../drivers/fsl_flash.c ****     if (config == NULL)
 983:../drivers/fsl_flash.c ****     {
 984:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 985:../drivers/fsl_flash.c ****     }
 986:../drivers/fsl_flash.c **** 
 987:../drivers/fsl_flash.c ****     /* Prepare passing parameter to erase all flash blocks (unsecure). */
 988:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_BLOCK_UNSECURE, 0xFFFFFFU);
 989:../drivers/fsl_flash.c **** 
 990:../drivers/fsl_flash.c ****     /* Validate the user key */
 991:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 992:../drivers/fsl_flash.c ****     if (returnCode)
 993:../drivers/fsl_flash.c ****     {
 994:../drivers/fsl_flash.c ****         return returnCode;
 995:../drivers/fsl_flash.c ****     }
 996:../drivers/fsl_flash.c **** 
 997:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 998:../drivers/fsl_flash.c **** 
 999:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1000:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1001:../drivers/fsl_flash.c **** 
1002:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1003:../drivers/fsl_flash.c **** 
1004:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
1005:../drivers/fsl_flash.c ****     /* Data flash IFR will be erased by erase all unsecure command, so we need to
1006:../drivers/fsl_flash.c ****      *  update FlexNVM memory partition status synchronously */
1007:../drivers/fsl_flash.c ****     if (returnCode == kStatus_FLASH_Success)
1008:../drivers/fsl_flash.c ****     {
1009:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
1010:../drivers/fsl_flash.c ****     }
1011:../drivers/fsl_flash.c **** #endif
1012:../drivers/fsl_flash.c **** 
1013:../drivers/fsl_flash.c ****     return returnCode;
1014:../drivers/fsl_flash.c **** }
1015:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD */
1016:../drivers/fsl_flash.c **** 
1017:../drivers/fsl_flash.c **** status_t FLASH_EraseAllExecuteOnlySegments(flash_config_t *config, uint32_t key)
1018:../drivers/fsl_flash.c **** {
1019:../drivers/fsl_flash.c ****     status_t returnCode;
1020:../drivers/fsl_flash.c **** 
1021:../drivers/fsl_flash.c ****     if (config == NULL)
1022:../drivers/fsl_flash.c ****     {
1023:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1024:../drivers/fsl_flash.c ****     }
1025:../drivers/fsl_flash.c **** 
1026:../drivers/fsl_flash.c ****     /* preparing passing parameter to erase all execute-only segments
1027:../drivers/fsl_flash.c ****      * 1st element for the FCCOB register */
1028:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_EXECUTE_ONLY_SEGMENT, 0xFFFFFFU);
1029:../drivers/fsl_flash.c **** 
1030:../drivers/fsl_flash.c ****     /* Validate the user key */
1031:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
1032:../drivers/fsl_flash.c ****     if (returnCode)
1033:../drivers/fsl_flash.c ****     {
1034:../drivers/fsl_flash.c ****         return returnCode;
1035:../drivers/fsl_flash.c ****     }
1036:../drivers/fsl_flash.c **** 
1037:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1038:../drivers/fsl_flash.c **** 
1039:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1040:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1041:../drivers/fsl_flash.c **** 
1042:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1043:../drivers/fsl_flash.c **** 
1044:../drivers/fsl_flash.c ****     return returnCode;
1045:../drivers/fsl_flash.c **** }
1046:../drivers/fsl_flash.c **** 
1047:../drivers/fsl_flash.c **** status_t FLASH_Program(flash_config_t *config, uint32_t start, uint32_t *src, uint32_t lengthInByte
1048:../drivers/fsl_flash.c **** {
1049:../drivers/fsl_flash.c ****     status_t returnCode;
1050:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1051:../drivers/fsl_flash.c **** 
1052:../drivers/fsl_flash.c ****     if (src == NULL)
1053:../drivers/fsl_flash.c ****     {
1054:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1055:../drivers/fsl_flash.c ****     }
1056:../drivers/fsl_flash.c **** 
1057:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1058:../drivers/fsl_flash.c **** 
1059:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1060:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.blockWriteUnitS
1061:../drivers/fsl_flash.c ****     if (returnCode)
1062:../drivers/fsl_flash.c ****     {
1063:../drivers/fsl_flash.c ****         return returnCode;
1064:../drivers/fsl_flash.c ****     }
1065:../drivers/fsl_flash.c **** 
1066:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1067:../drivers/fsl_flash.c **** 
1068:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1069:../drivers/fsl_flash.c **** 
1070:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1071:../drivers/fsl_flash.c ****     {
1072:../drivers/fsl_flash.c ****         /* preparing passing parameter to program the flash block */
1073:../drivers/fsl_flash.c ****         kFCCOBx[1] = *src++;
1074:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
1075:../drivers/fsl_flash.c ****         {
1076:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_LONGWORD, start);
1077:../drivers/fsl_flash.c ****         }
1078:../drivers/fsl_flash.c ****         else if (8 == flashOperationInfo.blockWriteUnitSize)
1079:../drivers/fsl_flash.c ****         {
1080:../drivers/fsl_flash.c ****             kFCCOBx[2] = *src++;
1081:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
1082:../drivers/fsl_flash.c ****         }
1083:../drivers/fsl_flash.c ****         else
1084:../drivers/fsl_flash.c ****         {
1085:../drivers/fsl_flash.c ****         }
1086:../drivers/fsl_flash.c **** 
1087:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1088:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1089:../drivers/fsl_flash.c **** 
1090:../drivers/fsl_flash.c ****         /* checking for the success of command execution */
1091:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1092:../drivers/fsl_flash.c ****         {
1093:../drivers/fsl_flash.c ****             break;
1094:../drivers/fsl_flash.c ****         }
1095:../drivers/fsl_flash.c ****         else
1096:../drivers/fsl_flash.c ****         {
1097:../drivers/fsl_flash.c ****             /* update start address for next iteration */
1098:../drivers/fsl_flash.c ****             start += flashOperationInfo.blockWriteUnitSize;
1099:../drivers/fsl_flash.c **** 
1100:../drivers/fsl_flash.c ****             /* update lengthInBytes for next iteration */
1101:../drivers/fsl_flash.c ****             lengthInBytes -= flashOperationInfo.blockWriteUnitSize;
1102:../drivers/fsl_flash.c ****         }
1103:../drivers/fsl_flash.c ****     }
1104:../drivers/fsl_flash.c **** 
1105:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1106:../drivers/fsl_flash.c **** 
1107:../drivers/fsl_flash.c ****     return (returnCode);
1108:../drivers/fsl_flash.c **** }
1109:../drivers/fsl_flash.c **** 
1110:../drivers/fsl_flash.c **** status_t FLASH_ProgramOnce(flash_config_t *config, uint32_t index, uint32_t *src, uint32_t lengthIn
1111:../drivers/fsl_flash.c **** {
1112:../drivers/fsl_flash.c ****     status_t returnCode;
1113:../drivers/fsl_flash.c **** 
1114:../drivers/fsl_flash.c ****     if ((config == NULL) || (src == NULL))
1115:../drivers/fsl_flash.c ****     {
1116:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1117:../drivers/fsl_flash.c ****     }
1118:../drivers/fsl_flash.c **** 
1119:../drivers/fsl_flash.c ****     /* pass paramters to FTFx */
1120:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_PROGRAM_ONCE, index, 0xFFFFU);
1121:../drivers/fsl_flash.c **** 
1122:../drivers/fsl_flash.c ****     kFCCOBx[1] = *src;
1123:../drivers/fsl_flash.c **** 
1124:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
1125:../drivers/fsl_flash.c ****  * to avoid a pointless comparison of unsigned int to 0 compiler warning */
1126:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT
1127:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT
1128:../drivers/fsl_flash.c ****     if (((index == FLASH_PROGRAM_ONCE_MIN_ID_8BYTES) ||
1129:../drivers/fsl_flash.c ****          /* Range check */
1130:../drivers/fsl_flash.c ****          ((index >= FLASH_PROGRAM_ONCE_MIN_ID_8BYTES + 1) && (index <= FLASH_PROGRAM_ONCE_MAX_ID_8B
1131:../drivers/fsl_flash.c ****         (lengthInBytes == 8))
1132:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT */
1133:../drivers/fsl_flash.c ****     {
1134:../drivers/fsl_flash.c ****         kFCCOBx[2] = *(src + 1);
1135:../drivers/fsl_flash.c ****     }
1136:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT */
1137:../drivers/fsl_flash.c **** 
1138:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1139:../drivers/fsl_flash.c **** 
1140:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1141:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1142:../drivers/fsl_flash.c **** 
1143:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1144:../drivers/fsl_flash.c **** 
1145:../drivers/fsl_flash.c ****     return returnCode;
1146:../drivers/fsl_flash.c **** }
1147:../drivers/fsl_flash.c **** 
1148:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD) && FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD
1149:../drivers/fsl_flash.c **** status_t FLASH_ProgramSection(flash_config_t *config, uint32_t start, uint32_t *src, uint32_t lengt
1150:../drivers/fsl_flash.c **** {
1151:../drivers/fsl_flash.c ****     status_t returnCode;
1152:../drivers/fsl_flash.c ****     uint32_t sectorSize;
1153:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1154:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1155:../drivers/fsl_flash.c ****     bool needSwitchFlexRamMode = false;
1156:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1157:../drivers/fsl_flash.c **** 
1158:../drivers/fsl_flash.c ****     if (src == NULL)
1159:../drivers/fsl_flash.c ****     {
1160:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1161:../drivers/fsl_flash.c ****     }
1162:../drivers/fsl_flash.c **** 
1163:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1164:../drivers/fsl_flash.c **** 
1165:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1166:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectionCmdAddre
1167:../drivers/fsl_flash.c ****     if (returnCode)
1168:../drivers/fsl_flash.c ****     {
1169:../drivers/fsl_flash.c ****         return returnCode;
1170:../drivers/fsl_flash.c ****     }
1171:../drivers/fsl_flash.c **** 
1172:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1173:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
1174:../drivers/fsl_flash.c **** 
1175:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1176:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1177:../drivers/fsl_flash.c ****     if (!(FTFx->FCNFG & FTFx_FCNFG_RAMRDY_MASK))
1178:../drivers/fsl_flash.c ****     {
1179:../drivers/fsl_flash.c ****         needSwitchFlexRamMode = true;
1180:../drivers/fsl_flash.c **** 
1181:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableAsRam);
1182:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1183:../drivers/fsl_flash.c ****         {
1184:../drivers/fsl_flash.c ****             return kStatus_FLASH_SetFlexramAsRamError;
1185:../drivers/fsl_flash.c ****         }
1186:../drivers/fsl_flash.c ****     }
1187:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1188:../drivers/fsl_flash.c **** 
1189:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1190:../drivers/fsl_flash.c **** 
1191:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1192:../drivers/fsl_flash.c ****     {
1193:../drivers/fsl_flash.c ****         /* Make sure the write operation doesn't span two sectors */
1194:../drivers/fsl_flash.c ****         uint32_t endAddressOfCurrentSector = ALIGN_UP(start, sectorSize);
1195:../drivers/fsl_flash.c ****         uint32_t lengthTobeProgrammedOfCurrentSector;
1196:../drivers/fsl_flash.c ****         uint32_t currentOffset = 0;
1197:../drivers/fsl_flash.c **** 
1198:../drivers/fsl_flash.c ****         if (endAddressOfCurrentSector == start)
1199:../drivers/fsl_flash.c ****         {
1200:../drivers/fsl_flash.c ****             endAddressOfCurrentSector += sectorSize;
1201:../drivers/fsl_flash.c ****         }
1202:../drivers/fsl_flash.c **** 
1203:../drivers/fsl_flash.c ****         if (lengthInBytes + start > endAddressOfCurrentSector)
1204:../drivers/fsl_flash.c ****         {
1205:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector = endAddressOfCurrentSector - start;
1206:../drivers/fsl_flash.c ****         }
1207:../drivers/fsl_flash.c ****         else
1208:../drivers/fsl_flash.c ****         {
1209:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector = lengthInBytes;
1210:../drivers/fsl_flash.c ****         }
1211:../drivers/fsl_flash.c **** 
1212:../drivers/fsl_flash.c ****         /* Program Current Sector */
1213:../drivers/fsl_flash.c ****         while (lengthTobeProgrammedOfCurrentSector > 0)
1214:../drivers/fsl_flash.c ****         {
1215:../drivers/fsl_flash.c ****             /* Make sure the program size doesn't exceeds Acceleration RAM size */
1216:../drivers/fsl_flash.c ****             uint32_t programSizeOfCurrentPass;
1217:../drivers/fsl_flash.c ****             uint32_t numberOfPhases;
1218:../drivers/fsl_flash.c **** 
1219:../drivers/fsl_flash.c ****             if (lengthTobeProgrammedOfCurrentSector > kFLASH_AccelerationRamSize)
1220:../drivers/fsl_flash.c ****             {
1221:../drivers/fsl_flash.c ****                 programSizeOfCurrentPass = kFLASH_AccelerationRamSize;
1222:../drivers/fsl_flash.c ****             }
1223:../drivers/fsl_flash.c ****             else
1224:../drivers/fsl_flash.c ****             {
1225:../drivers/fsl_flash.c ****                 programSizeOfCurrentPass = lengthTobeProgrammedOfCurrentSector;
1226:../drivers/fsl_flash.c ****             }
1227:../drivers/fsl_flash.c **** 
1228:../drivers/fsl_flash.c ****             /* Copy data to FlexRAM */
1229:../drivers/fsl_flash.c ****             memcpy((void *)FSL_FEATURE_FLASH_FLEX_RAM_START_ADDRESS, src + currentOffset / 4, progr
1230:../drivers/fsl_flash.c ****             /* Set start address of the data to be programmed */
1231:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_SECTION, start + currentOffset);
1232:../drivers/fsl_flash.c ****             /* Set program size in terms of FEATURE_FLASH_SECTION_CMD_ADDRESS_ALIGMENT */
1233:../drivers/fsl_flash.c ****             numberOfPhases = programSizeOfCurrentPass / flashOperationInfo.sectionCmdAddressAligmen
1234:../drivers/fsl_flash.c **** 
1235:../drivers/fsl_flash.c ****             kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_2(numberOfPhases, 0xFFFFU);
1236:../drivers/fsl_flash.c **** 
1237:../drivers/fsl_flash.c ****             /* Peform command sequence */
1238:../drivers/fsl_flash.c ****             returnCode = flash_command_sequence(config);
1239:../drivers/fsl_flash.c **** 
1240:../drivers/fsl_flash.c ****             if (returnCode != kStatus_FLASH_Success)
1241:../drivers/fsl_flash.c ****             {
1242:../drivers/fsl_flash.c ****                 flash_cache_clear(config);
1243:../drivers/fsl_flash.c ****                 return returnCode;
1244:../drivers/fsl_flash.c ****             }
1245:../drivers/fsl_flash.c **** 
1246:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector -= programSizeOfCurrentPass;
1247:../drivers/fsl_flash.c ****             currentOffset += programSizeOfCurrentPass;
1248:../drivers/fsl_flash.c ****         }
1249:../drivers/fsl_flash.c **** 
1250:../drivers/fsl_flash.c ****         src += currentOffset / 4;
1251:../drivers/fsl_flash.c ****         start += currentOffset;
1252:../drivers/fsl_flash.c ****         lengthInBytes -= currentOffset;
1253:../drivers/fsl_flash.c ****     }
1254:../drivers/fsl_flash.c **** 
1255:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1256:../drivers/fsl_flash.c **** 
1257:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1258:../drivers/fsl_flash.c ****     /* Restore function of FlexRAM if needed. */
1259:../drivers/fsl_flash.c ****     if (needSwitchFlexRamMode)
1260:../drivers/fsl_flash.c ****     {
1261:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableForEepro
1262:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1263:../drivers/fsl_flash.c ****         {
1264:../drivers/fsl_flash.c ****             return kStatus_FLASH_RecoverFlexramAsEepromError;
1265:../drivers/fsl_flash.c ****         }
1266:../drivers/fsl_flash.c ****     }
1267:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1268:../drivers/fsl_flash.c **** 
1269:../drivers/fsl_flash.c ****     return returnCode;
1270:../drivers/fsl_flash.c **** }
1271:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD */
1272:../drivers/fsl_flash.c **** 
1273:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
1274:../drivers/fsl_flash.c **** status_t FLASH_EepromWrite(flash_config_t *config, uint32_t start, uint8_t *src, uint32_t lengthInB
1275:../drivers/fsl_flash.c **** {
1276:../drivers/fsl_flash.c ****     status_t returnCode;
1277:../drivers/fsl_flash.c ****     bool needSwitchFlexRamMode = false;
1278:../drivers/fsl_flash.c **** 
1279:../drivers/fsl_flash.c ****     if (config == NULL)
1280:../drivers/fsl_flash.c ****     {
1281:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1282:../drivers/fsl_flash.c ****     }
1283:../drivers/fsl_flash.c **** 
1284:../drivers/fsl_flash.c ****     /* Validates the range of the given address */
1285:../drivers/fsl_flash.c ****     if ((start < config->FlexRAMBlockBase) ||
1286:../drivers/fsl_flash.c ****         ((start + lengthInBytes) > (config->FlexRAMBlockBase + config->EEpromTotalSize)))
1287:../drivers/fsl_flash.c ****     {
1288:../drivers/fsl_flash.c ****         return kStatus_FLASH_AddressError;
1289:../drivers/fsl_flash.c ****     }
1290:../drivers/fsl_flash.c **** 
1291:../drivers/fsl_flash.c ****     returnCode = kStatus_FLASH_Success;
1292:../drivers/fsl_flash.c **** 
1293:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1294:../drivers/fsl_flash.c ****     if (!(FTFx->FCNFG & FTFx_FCNFG_EEERDY_MASK))
1295:../drivers/fsl_flash.c ****     {
1296:../drivers/fsl_flash.c ****         needSwitchFlexRamMode = true;
1297:../drivers/fsl_flash.c **** 
1298:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableForEepro
1299:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1300:../drivers/fsl_flash.c ****         {
1301:../drivers/fsl_flash.c ****             return kStatus_FLASH_SetFlexramAsEepromError;
1302:../drivers/fsl_flash.c ****         }
1303:../drivers/fsl_flash.c ****     }
1304:../drivers/fsl_flash.c **** 
1305:../drivers/fsl_flash.c ****     /* Write data to FlexRAM when it is used as EEPROM emulator */
1306:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1307:../drivers/fsl_flash.c ****     {
1308:../drivers/fsl_flash.c ****         if ((!(start & 0x3U)) && (lengthInBytes >= 4))
1309:../drivers/fsl_flash.c ****         {
1310:../drivers/fsl_flash.c ****             *(uint32_t *)start = *(uint32_t *)src;
1311:../drivers/fsl_flash.c ****             start += 4;
1312:../drivers/fsl_flash.c ****             src += 4;
1313:../drivers/fsl_flash.c ****             lengthInBytes -= 4;
1314:../drivers/fsl_flash.c ****         }
1315:../drivers/fsl_flash.c ****         else if ((!(start & 0x1U)) && (lengthInBytes >= 2))
1316:../drivers/fsl_flash.c ****         {
1317:../drivers/fsl_flash.c ****             *(uint16_t *)start = *(uint16_t *)src;
1318:../drivers/fsl_flash.c ****             start += 2;
1319:../drivers/fsl_flash.c ****             src += 2;
1320:../drivers/fsl_flash.c ****             lengthInBytes -= 2;
1321:../drivers/fsl_flash.c ****         }
1322:../drivers/fsl_flash.c ****         else
1323:../drivers/fsl_flash.c ****         {
1324:../drivers/fsl_flash.c ****             *(uint8_t *)start = *src;
1325:../drivers/fsl_flash.c ****             start += 1;
1326:../drivers/fsl_flash.c ****             src += 1;
1327:../drivers/fsl_flash.c ****             lengthInBytes -= 1;
1328:../drivers/fsl_flash.c ****         }
1329:../drivers/fsl_flash.c ****         /* Wait till EEERDY bit is set */
1330:../drivers/fsl_flash.c ****         while (!(FTFx->FCNFG & FTFx_FCNFG_EEERDY_MASK))
1331:../drivers/fsl_flash.c ****         {
1332:../drivers/fsl_flash.c ****         }
1333:../drivers/fsl_flash.c **** 
1334:../drivers/fsl_flash.c ****         /* Check for protection violation error */
1335:../drivers/fsl_flash.c ****         if (FTFx->FSTAT & FTFx_FSTAT_FPVIOL_MASK)
1336:../drivers/fsl_flash.c ****         {
1337:../drivers/fsl_flash.c ****             return kStatus_FLASH_ProtectionViolation;
1338:../drivers/fsl_flash.c ****         }
1339:../drivers/fsl_flash.c ****     }
1340:../drivers/fsl_flash.c **** 
1341:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1342:../drivers/fsl_flash.c ****     if (needSwitchFlexRamMode)
1343:../drivers/fsl_flash.c ****     {
1344:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableAsRam);
1345:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1346:../drivers/fsl_flash.c ****         {
1347:../drivers/fsl_flash.c ****             return kStatus_FLASH_RecoverFlexramAsRamError;
1348:../drivers/fsl_flash.c ****         }
1349:../drivers/fsl_flash.c ****     }
1350:../drivers/fsl_flash.c **** 
1351:../drivers/fsl_flash.c ****     return returnCode;
1352:../drivers/fsl_flash.c **** }
1353:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
1354:../drivers/fsl_flash.c **** 
1355:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
1356:../drivers/fsl_flash.c **** status_t FLASH_ReadResource(
1357:../drivers/fsl_flash.c ****     flash_config_t *config, uint32_t start, uint32_t *dst, uint32_t lengthInBytes, flash_read_resou
1358:../drivers/fsl_flash.c **** {
1359:../drivers/fsl_flash.c ****     status_t returnCode;
1360:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1361:../drivers/fsl_flash.c **** 
1362:../drivers/fsl_flash.c ****     if ((config == NULL) || (dst == NULL))
1363:../drivers/fsl_flash.c ****     {
1364:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1365:../drivers/fsl_flash.c ****     }
1366:../drivers/fsl_flash.c **** 
1367:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1368:../drivers/fsl_flash.c **** 
1369:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1370:../drivers/fsl_flash.c ****     returnCode =
1371:../drivers/fsl_flash.c ****         flash_check_resource_range(start, lengthInBytes, flashOperationInfo.resourceCmdAddressAligm
1372:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
1373:../drivers/fsl_flash.c ****     {
1374:../drivers/fsl_flash.c ****         return returnCode;
1375:../drivers/fsl_flash.c ****     }
1376:../drivers/fsl_flash.c **** 
1377:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1378:../drivers/fsl_flash.c ****     {
1379:../drivers/fsl_flash.c ****         /* preparing passing parameter */
1380:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_READ_RESOURCE, start);
1381:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
1382:../drivers/fsl_flash.c ****         {
1383:../drivers/fsl_flash.c ****             kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
1384:../drivers/fsl_flash.c ****         }
1385:../drivers/fsl_flash.c ****         else if (flashOperationInfo.resourceCmdAddressAligment == 8)
1386:../drivers/fsl_flash.c ****         {
1387:../drivers/fsl_flash.c ****             kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
1388:../drivers/fsl_flash.c ****         }
1389:../drivers/fsl_flash.c ****         else
1390:../drivers/fsl_flash.c ****         {
1391:../drivers/fsl_flash.c ****         }
1392:../drivers/fsl_flash.c **** 
1393:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1394:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1395:../drivers/fsl_flash.c **** 
1396:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1397:../drivers/fsl_flash.c ****         {
1398:../drivers/fsl_flash.c ****             break;
1399:../drivers/fsl_flash.c ****         }
1400:../drivers/fsl_flash.c **** 
1401:../drivers/fsl_flash.c ****         /* fetch data */
1402:../drivers/fsl_flash.c ****         *dst++ = kFCCOBx[1];
1403:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
1404:../drivers/fsl_flash.c ****         {
1405:../drivers/fsl_flash.c ****             *dst++ = kFCCOBx[2];
1406:../drivers/fsl_flash.c ****         }
1407:../drivers/fsl_flash.c ****         /* update start address for next iteration */
1408:../drivers/fsl_flash.c ****         start += flashOperationInfo.resourceCmdAddressAligment;
1409:../drivers/fsl_flash.c ****         /* update lengthInBytes for next iteration */
1410:../drivers/fsl_flash.c ****         lengthInBytes -= flashOperationInfo.resourceCmdAddressAligment;
1411:../drivers/fsl_flash.c ****     }
1412:../drivers/fsl_flash.c **** 
1413:../drivers/fsl_flash.c ****     return (returnCode);
1414:../drivers/fsl_flash.c **** }
1415:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
1416:../drivers/fsl_flash.c **** 
1417:../drivers/fsl_flash.c **** status_t FLASH_ReadOnce(flash_config_t *config, uint32_t index, uint32_t *dst, uint32_t lengthInByt
1418:../drivers/fsl_flash.c **** {
1419:../drivers/fsl_flash.c ****     status_t returnCode;
1420:../drivers/fsl_flash.c **** 
1421:../drivers/fsl_flash.c ****     if ((config == NULL) || (dst == NULL))
1422:../drivers/fsl_flash.c ****     {
1423:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1424:../drivers/fsl_flash.c ****     }
1425:../drivers/fsl_flash.c **** 
1426:../drivers/fsl_flash.c ****     /* pass paramters to FTFx */
1427:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_READ_ONCE, index, 0xFFFFU);
1428:../drivers/fsl_flash.c **** 
1429:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1430:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1431:../drivers/fsl_flash.c **** 
1432:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success == returnCode)
1433:../drivers/fsl_flash.c ****     {
1434:../drivers/fsl_flash.c ****         *dst = kFCCOBx[1];
1435:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
1436:../drivers/fsl_flash.c ****  *       to avoid a pointless comparison of unsigned int to 0 compiler warning */
1437:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT
1438:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT
1439:../drivers/fsl_flash.c ****         if (((index == FLASH_PROGRAM_ONCE_MIN_ID_8BYTES) ||
1440:../drivers/fsl_flash.c ****              /* Range check */
1441:../drivers/fsl_flash.c ****              ((index >= FLASH_PROGRAM_ONCE_MIN_ID_8BYTES + 1) && (index <= FLASH_PROGRAM_ONCE_MAX_I
1442:../drivers/fsl_flash.c ****             (lengthInBytes == 8))
1443:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT */
1444:../drivers/fsl_flash.c ****         {
1445:../drivers/fsl_flash.c ****             *(dst + 1) = kFCCOBx[2];
1446:../drivers/fsl_flash.c ****         }
1447:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT */
1448:../drivers/fsl_flash.c ****     }
1449:../drivers/fsl_flash.c **** 
1450:../drivers/fsl_flash.c ****     return returnCode;
1451:../drivers/fsl_flash.c **** }
1452:../drivers/fsl_flash.c **** 
1453:../drivers/fsl_flash.c **** status_t FLASH_GetSecurityState(flash_config_t *config, flash_security_state_t *state)
1454:../drivers/fsl_flash.c **** {
1455:../drivers/fsl_flash.c ****     /* store data read from flash register */
1456:../drivers/fsl_flash.c ****     uint8_t registerValue;
1457:../drivers/fsl_flash.c **** 
1458:../drivers/fsl_flash.c ****     if ((config == NULL) || (state == NULL))
1459:../drivers/fsl_flash.c ****     {
1460:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1461:../drivers/fsl_flash.c ****     }
1462:../drivers/fsl_flash.c **** 
1463:../drivers/fsl_flash.c ****     /* Get flash security register value */
1464:../drivers/fsl_flash.c ****     registerValue = FTFx->FSEC;
1465:../drivers/fsl_flash.c **** 
1466:../drivers/fsl_flash.c ****     /* check the status of the flash security bits in the security register */
1467:../drivers/fsl_flash.c ****     if (FLASH_SECURITY_STATE_UNSECURED == (registerValue & FTFx_FSEC_SEC_MASK))
1468:../drivers/fsl_flash.c ****     {
1469:../drivers/fsl_flash.c ****         /* Flash in unsecured state */
1470:../drivers/fsl_flash.c ****         *state = kFLASH_SecurityStateNotSecure;
1471:../drivers/fsl_flash.c ****     }
1472:../drivers/fsl_flash.c ****     else
1473:../drivers/fsl_flash.c ****     {
1474:../drivers/fsl_flash.c ****         /* Flash in secured state
1475:../drivers/fsl_flash.c ****          * check for backdoor key security enable bit */
1476:../drivers/fsl_flash.c ****         if (FLASH_SECURITY_STATE_KEYEN == (registerValue & FTFx_FSEC_KEYEN_MASK))
1477:../drivers/fsl_flash.c ****         {
1478:../drivers/fsl_flash.c ****             /* Backdoor key security enabled */
1479:../drivers/fsl_flash.c ****             *state = kFLASH_SecurityStateBackdoorEnabled;
1480:../drivers/fsl_flash.c ****         }
1481:../drivers/fsl_flash.c ****         else
1482:../drivers/fsl_flash.c ****         {
1483:../drivers/fsl_flash.c ****             /* Backdoor key security disabled */
1484:../drivers/fsl_flash.c ****             *state = kFLASH_SecurityStateBackdoorDisabled;
1485:../drivers/fsl_flash.c ****         }
1486:../drivers/fsl_flash.c ****     }
1487:../drivers/fsl_flash.c **** 
1488:../drivers/fsl_flash.c ****     return (kStatus_FLASH_Success);
1489:../drivers/fsl_flash.c **** }
1490:../drivers/fsl_flash.c **** 
1491:../drivers/fsl_flash.c **** status_t FLASH_SecurityBypass(flash_config_t *config, const uint8_t *backdoorKey)
1492:../drivers/fsl_flash.c **** {
1493:../drivers/fsl_flash.c ****     uint8_t registerValue; /* registerValue */
1494:../drivers/fsl_flash.c ****     status_t returnCode;   /* return code variable */
1495:../drivers/fsl_flash.c **** 
1496:../drivers/fsl_flash.c ****     if ((config == NULL) || (backdoorKey == NULL))
1497:../drivers/fsl_flash.c ****     {
1498:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1499:../drivers/fsl_flash.c ****     }
1500:../drivers/fsl_flash.c **** 
1501:../drivers/fsl_flash.c ****     /* set the default return code as kStatus_Success */
1502:../drivers/fsl_flash.c ****     returnCode = kStatus_FLASH_Success;
1503:../drivers/fsl_flash.c **** 
1504:../drivers/fsl_flash.c ****     /* Get flash security register value */
1505:../drivers/fsl_flash.c ****     registerValue = FTFx->FSEC;
1506:../drivers/fsl_flash.c **** 
1507:../drivers/fsl_flash.c ****     /* Check to see if flash is in secure state (any state other than 0x2)
1508:../drivers/fsl_flash.c ****      * If not, then skip this since flash is not secure */
1509:../drivers/fsl_flash.c ****     if (0x02 != (registerValue & 0x03))
1510:../drivers/fsl_flash.c ****     {
1511:../drivers/fsl_flash.c ****         /* preparing passing parameter to erase a flash block */
1512:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_SECURITY_BY_PASS, 0xFFFFFFU);
1513:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[0], backdoorKey[1], backdoorKey[2], bac
1514:../drivers/fsl_flash.c ****         kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[4], backdoorKey[5], backdoorKey[6], bac
1515:../drivers/fsl_flash.c **** 
1516:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1517:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1518:../drivers/fsl_flash.c ****     }
1519:../drivers/fsl_flash.c **** 
1520:../drivers/fsl_flash.c ****     return (returnCode);
1521:../drivers/fsl_flash.c **** }
1522:../drivers/fsl_flash.c **** 
1523:../drivers/fsl_flash.c **** status_t FLASH_VerifyEraseAll(flash_config_t *config, flash_margin_value_t margin)
1524:../drivers/fsl_flash.c **** {
1525:../drivers/fsl_flash.c ****     if (config == NULL)
1526:../drivers/fsl_flash.c ****     {
1527:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1528:../drivers/fsl_flash.c ****     }
1529:../drivers/fsl_flash.c **** 
1530:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify all block command */
1531:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_VERIFY_ALL_BLOCK, margin, 0xFFFFU);
1532:../drivers/fsl_flash.c **** 
1533:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1534:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
1535:../drivers/fsl_flash.c **** }
1536:../drivers/fsl_flash.c **** 
1537:../drivers/fsl_flash.c **** status_t FLASH_VerifyErase(flash_config_t *config, uint32_t start, uint32_t lengthInBytes, flash_ma
1538:../drivers/fsl_flash.c **** {
1539:../drivers/fsl_flash.c ****     /* Check arguments. */
1540:../drivers/fsl_flash.c ****     uint32_t blockSize;
1541:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1542:../drivers/fsl_flash.c ****     uint32_t nextBlockStartAddress;
1543:../drivers/fsl_flash.c ****     uint32_t remainingBytes;
1544:../drivers/fsl_flash.c ****     status_t returnCode;
1545:../drivers/fsl_flash.c **** 
1546:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1547:../drivers/fsl_flash.c **** 
1548:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectionCmdAddre
1549:../drivers/fsl_flash.c ****     if (returnCode)
1550:../drivers/fsl_flash.c ****     {
1551:../drivers/fsl_flash.c ****         return returnCode;
1552:../drivers/fsl_flash.c ****     }
1553:../drivers/fsl_flash.c **** 
1554:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1555:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1556:../drivers/fsl_flash.c ****     blockSize = flashOperationInfo.activeBlockSize;
1557:../drivers/fsl_flash.c **** 
1558:../drivers/fsl_flash.c ****     nextBlockStartAddress = ALIGN_UP(start, blockSize);
1559:../drivers/fsl_flash.c ****     if (nextBlockStartAddress == start)
1560:../drivers/fsl_flash.c ****     {
1561:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
1562:../drivers/fsl_flash.c ****     }
1563:../drivers/fsl_flash.c **** 
1564:../drivers/fsl_flash.c ****     remainingBytes = lengthInBytes;
1565:../drivers/fsl_flash.c **** 
1566:../drivers/fsl_flash.c ****     while (remainingBytes)
1567:../drivers/fsl_flash.c ****     {
1568:../drivers/fsl_flash.c ****         uint32_t numberOfPhrases;
1569:../drivers/fsl_flash.c ****         uint32_t verifyLength = nextBlockStartAddress - start;
1570:../drivers/fsl_flash.c ****         if (verifyLength > remainingBytes)
1571:../drivers/fsl_flash.c ****         {
1572:../drivers/fsl_flash.c ****             verifyLength = remainingBytes;
1573:../drivers/fsl_flash.c ****         }
1574:../drivers/fsl_flash.c **** 
1575:../drivers/fsl_flash.c ****         numberOfPhrases = verifyLength / flashOperationInfo.sectionCmdAddressAligment;
1576:../drivers/fsl_flash.c **** 
1577:../drivers/fsl_flash.c ****         /* Fill in verify section command parameters. */
1578:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_VERIFY_SECTION, start);
1579:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
1580:../drivers/fsl_flash.c **** 
1581:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1582:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1583:../drivers/fsl_flash.c ****         if (returnCode)
1584:../drivers/fsl_flash.c ****         {
1585:../drivers/fsl_flash.c ****             return returnCode;
1586:../drivers/fsl_flash.c ****         }
1587:../drivers/fsl_flash.c **** 
1588:../drivers/fsl_flash.c ****         remainingBytes -= verifyLength;
1589:../drivers/fsl_flash.c ****         start += verifyLength;
1590:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
1591:../drivers/fsl_flash.c ****     }
1592:../drivers/fsl_flash.c **** 
1593:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
1594:../drivers/fsl_flash.c **** }
1595:../drivers/fsl_flash.c **** 
1596:../drivers/fsl_flash.c **** status_t FLASH_VerifyProgram(flash_config_t *config,
1597:../drivers/fsl_flash.c ****                              uint32_t start,
1598:../drivers/fsl_flash.c ****                              uint32_t lengthInBytes,
1599:../drivers/fsl_flash.c ****                              const uint32_t *expectedData,
1600:../drivers/fsl_flash.c ****                              flash_margin_value_t margin,
1601:../drivers/fsl_flash.c ****                              uint32_t *failedAddress,
1602:../drivers/fsl_flash.c ****                              uint32_t *failedData)
1603:../drivers/fsl_flash.c **** {
1604:../drivers/fsl_flash.c ****     status_t returnCode;
1605:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1606:../drivers/fsl_flash.c **** 
1607:../drivers/fsl_flash.c ****     if (expectedData == NULL)
1608:../drivers/fsl_flash.c ****     {
1609:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1610:../drivers/fsl_flash.c ****     }
1611:../drivers/fsl_flash.c **** 
1612:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1613:../drivers/fsl_flash.c **** 
1614:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.checkCmdAddress
1615:../drivers/fsl_flash.c ****     if (returnCode)
1616:../drivers/fsl_flash.c ****     {
1617:../drivers/fsl_flash.c ****         return returnCode;
1618:../drivers/fsl_flash.c ****     }
1619:../drivers/fsl_flash.c **** 
1620:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1621:../drivers/fsl_flash.c **** 
1622:../drivers/fsl_flash.c ****     while (lengthInBytes)
1623:../drivers/fsl_flash.c ****     {
1624:../drivers/fsl_flash.c ****         /* preparing passing parameter to program check the flash block */
1625:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_CHECK, start);
1626:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
1627:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
1628:../drivers/fsl_flash.c **** 
1629:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1630:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1631:../drivers/fsl_flash.c **** 
1632:../drivers/fsl_flash.c ****         /* checking for the success of command execution */
1633:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1634:../drivers/fsl_flash.c ****         {
1635:../drivers/fsl_flash.c ****             if (failedAddress)
1636:../drivers/fsl_flash.c ****             {
1637:../drivers/fsl_flash.c ****                 *failedAddress = start;
1638:../drivers/fsl_flash.c ****             }
1639:../drivers/fsl_flash.c ****             if (failedData)
1640:../drivers/fsl_flash.c ****             {
1641:../drivers/fsl_flash.c ****                 *failedData = 0;
1642:../drivers/fsl_flash.c ****             }
1643:../drivers/fsl_flash.c ****             break;
1644:../drivers/fsl_flash.c ****         }
1645:../drivers/fsl_flash.c **** 
1646:../drivers/fsl_flash.c ****         lengthInBytes -= flashOperationInfo.checkCmdAddressAligment;
1647:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
1648:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
1649:../drivers/fsl_flash.c ****     }
1650:../drivers/fsl_flash.c **** 
1651:../drivers/fsl_flash.c ****     return (returnCode);
1652:../drivers/fsl_flash.c **** }
1653:../drivers/fsl_flash.c **** 
1654:../drivers/fsl_flash.c **** status_t FLASH_VerifyEraseAllExecuteOnlySegments(flash_config_t *config, flash_margin_value_t margi
1655:../drivers/fsl_flash.c **** {
1656:../drivers/fsl_flash.c ****     if (config == NULL)
1657:../drivers/fsl_flash.c ****     {
1658:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1659:../drivers/fsl_flash.c ****     }
1660:../drivers/fsl_flash.c **** 
1661:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify erase all execute-only segments command */
1662:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_VERIFY_ALL_EXECUTE_ONLY_SEGMENT, margin, 0xFFFFU);
1663:../drivers/fsl_flash.c **** 
1664:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1665:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
1666:../drivers/fsl_flash.c **** }
1667:../drivers/fsl_flash.c **** 
1668:../drivers/fsl_flash.c **** status_t FLASH_IsProtected(flash_config_t *config,
1669:../drivers/fsl_flash.c ****                            uint32_t start,
1670:../drivers/fsl_flash.c ****                            uint32_t lengthInBytes,
1671:../drivers/fsl_flash.c ****                            flash_protection_state_t *protection_state)
1672:../drivers/fsl_flash.c **** {
1673:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
1674:../drivers/fsl_flash.c ****     uint32_t regionCheckedCounter; /* increments each time the flash address was checked for
1675:../drivers/fsl_flash.c ****                                     * protection status */
1676:../drivers/fsl_flash.c ****     uint32_t regionCounter;        /* incrementing variable used to increment through the flash
1677:../drivers/fsl_flash.c ****                                     * protection regions */
1678:../drivers/fsl_flash.c ****     uint32_t protectStatusCounter; /* increments each time a flash region was detected as protected
1679:../drivers/fsl_flash.c **** 
1680:../drivers/fsl_flash.c ****     uint8_t flashRegionProtectStatus[MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT]; /* array o
1681:../drivers/fsl_flash.c ****                                                                       * status for each
1682:../drivers/fsl_flash.c ****                                                                       * protection region */
1683:../drivers/fsl_flash.c ****     uint32_t flashRegionAddress[MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT +
1684:../drivers/fsl_flash.c ****                                 1];                /* array of the start addresses for each flash
1685:../drivers/fsl_flash.c ****                                  * protection region. Note this is REGION_COUNT+1
1686:../drivers/fsl_flash.c ****                                  * due to requiring the next start address after
1687:../drivers/fsl_flash.c ****                                  * the end of flash for loop-check purposes below */
1688:../drivers/fsl_flash.c ****     flash_protection_config_t flashProtectionInfo; /* flash protection information */
1689:../drivers/fsl_flash.c ****     status_t returnCode;
1690:../drivers/fsl_flash.c **** 
1691:../drivers/fsl_flash.c ****     if (protection_state == NULL)
1692:../drivers/fsl_flash.c ****     {
1693:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1694:../drivers/fsl_flash.c ****     }
1695:../drivers/fsl_flash.c **** 
1696:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1697:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, MAIN_FLASH_FEATURE_PFLASH_BLOCK_WR
1698:../drivers/fsl_flash.c ****     if (returnCode)
1699:../drivers/fsl_flash.c ****     {
1700:../drivers/fsl_flash.c ****         return returnCode;
1701:../drivers/fsl_flash.c ****     }
1702:../drivers/fsl_flash.c **** 
1703:../drivers/fsl_flash.c ****     /* Get necessary flash protection information. */
1704:../drivers/fsl_flash.c ****     returnCode = flash_get_protection_info(config, &flashProtectionInfo);
1705:../drivers/fsl_flash.c ****     if (returnCode)
1706:../drivers/fsl_flash.c ****     {
1707:../drivers/fsl_flash.c ****         return returnCode;
1708:../drivers/fsl_flash.c ****     }
1709:../drivers/fsl_flash.c **** 
1710:../drivers/fsl_flash.c ****     /* calculating Flash end address */
1711:../drivers/fsl_flash.c ****     endAddress = start + lengthInBytes;
1712:../drivers/fsl_flash.c **** 
1713:../drivers/fsl_flash.c ****     /* populate the flashRegionAddress array with the start address of each flash region */
1714:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1715:../drivers/fsl_flash.c **** 
1716:../drivers/fsl_flash.c ****     /* populate up to 33rd element of array, this is the next address after end of flash array */
1717:../drivers/fsl_flash.c ****     while (regionCounter <= flashProtectionInfo.regionCount)
1718:../drivers/fsl_flash.c ****     {
1719:../drivers/fsl_flash.c ****         flashRegionAddress[regionCounter] =
1720:../drivers/fsl_flash.c ****             flashProtectionInfo.regionBase + flashProtectionInfo.regionSize * regionCounter;
1721:../drivers/fsl_flash.c ****         regionCounter++;
1722:../drivers/fsl_flash.c ****     }
1723:../drivers/fsl_flash.c **** 
1724:../drivers/fsl_flash.c ****     /* populate flashRegionProtectStatus array with status information
1725:../drivers/fsl_flash.c ****      * Protection status for each region is stored in the FPROT[3:0] registers
1726:../drivers/fsl_flash.c ****      * Each bit represents one region of flash
1727:../drivers/fsl_flash.c ****      * 4 registers * 8-bits-per-register = 32-bits (32-regions)
1728:../drivers/fsl_flash.c ****      * The convention is:
1729:../drivers/fsl_flash.c ****      * FPROT3[bit 0] is the first protection region (start of flash memory)
1730:../drivers/fsl_flash.c ****      * FPROT0[bit 7] is the last protection region (end of flash memory)
1731:../drivers/fsl_flash.c ****      * regionCounter is used to determine which FPROT[3:0] register to check for protection status
1732:../drivers/fsl_flash.c ****      * Note: FPROT=1 means NOT protected, FPROT=0 means protected */
1733:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1734:../drivers/fsl_flash.c ****     while (regionCounter < flashProtectionInfo.regionCount)
1735:../drivers/fsl_flash.c ****     {
1736:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
1737:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
1738:../drivers/fsl_flash.c ****         {
1739:../drivers/fsl_flash.c ****             if (regionCounter < 8)
1740:../drivers/fsl_flash.c ****             {
1741:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTSL_REG >> regionCounter) & (0x
1742:../drivers/fsl_flash.c ****             }
1743:../drivers/fsl_flash.c ****             else if ((regionCounter >= 8) && (regionCounter < 16))
1744:../drivers/fsl_flash.c ****             {
1745:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTSH_REG >> (regionCounter - 8))
1746:../drivers/fsl_flash.c ****             }
1747:../drivers/fsl_flash.c ****             else
1748:../drivers/fsl_flash.c ****             {
1749:../drivers/fsl_flash.c ****                 break;
1750:../drivers/fsl_flash.c ****             }
1751:../drivers/fsl_flash.c ****         }
1752:../drivers/fsl_flash.c ****         else
1753:../drivers/fsl_flash.c **** #endif
1754:../drivers/fsl_flash.c ****         {
1755:../drivers/fsl_flash.c ****             /* Note: So far protection region count may be 16/20/24/32/64 */
1756:../drivers/fsl_flash.c ****             if (regionCounter < 8)
1757:../drivers/fsl_flash.c ****             {
1758:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL3_REG >> regionCounter) & (0x
1759:../drivers/fsl_flash.c ****             }
1760:../drivers/fsl_flash.c ****             else if ((regionCounter >= 8) && (regionCounter < 16))
1761:../drivers/fsl_flash.c ****             {
1762:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL2_REG >> (regionCounter - 8))
1763:../drivers/fsl_flash.c ****             }
1764:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && (MAIN_FLASH_FEATURE_PFLASH_PROTEC
1765:../drivers/fsl_flash.c **** #if (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 20)
1766:../drivers/fsl_flash.c ****             else if ((regionCounter >= 16) && (regionCounter < 20))
1767:../drivers/fsl_flash.c ****             {
1768:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL1_REG >> (regionCounter - 16)
1769:../drivers/fsl_flash.c ****             }
1770:../drivers/fsl_flash.c **** #else
1771:../drivers/fsl_flash.c ****             else if ((regionCounter >= 16) && (regionCounter < 24))
1772:../drivers/fsl_flash.c ****             {
1773:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL1_REG >> (regionCounter - 16)
1774:../drivers/fsl_flash.c ****             }
1775:../drivers/fsl_flash.c **** #endif /* (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 20) */
1776:../drivers/fsl_flash.c **** #endif
1777:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && (MAIN_FLASH_FEATURE_PFLASH_PROTEC
1778:../drivers/fsl_flash.c ****             else if ((regionCounter >= 24) && (regionCounter < 32))
1779:../drivers/fsl_flash.c ****             {
1780:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL0_REG >> (regionCounter - 24)
1781:../drivers/fsl_flash.c ****             }
1782:../drivers/fsl_flash.c **** #endif
1783:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && \
1784:../drivers/fsl_flash.c ****     (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 64)
1785:../drivers/fsl_flash.c ****             else if (regionCounter < 40)
1786:../drivers/fsl_flash.c ****             {
1787:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH3_REG >> (regionCounter - 32)
1788:../drivers/fsl_flash.c ****             }
1789:../drivers/fsl_flash.c ****             else if (regionCounter < 48)
1790:../drivers/fsl_flash.c ****             {
1791:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH2_REG >> (regionCounter - 40)
1792:../drivers/fsl_flash.c ****             }
1793:../drivers/fsl_flash.c ****             else if (regionCounter < 56)
1794:../drivers/fsl_flash.c ****             {
1795:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH1_REG >> (regionCounter - 48)
1796:../drivers/fsl_flash.c ****             }
1797:../drivers/fsl_flash.c ****             else if (regionCounter < 64)
1798:../drivers/fsl_flash.c ****             {
1799:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH0_REG >> (regionCounter - 56)
1800:../drivers/fsl_flash.c ****             }
1801:../drivers/fsl_flash.c **** #endif
1802:../drivers/fsl_flash.c ****             else
1803:../drivers/fsl_flash.c ****             {
1804:../drivers/fsl_flash.c ****                 break;
1805:../drivers/fsl_flash.c ****             }
1806:../drivers/fsl_flash.c ****         }
1807:../drivers/fsl_flash.c **** 
1808:../drivers/fsl_flash.c ****         regionCounter++;
1809:../drivers/fsl_flash.c ****     }
1810:../drivers/fsl_flash.c **** 
1811:../drivers/fsl_flash.c ****     /* loop through the flash regions and check
1812:../drivers/fsl_flash.c ****      * desired flash address range for protection status
1813:../drivers/fsl_flash.c ****      * loop stops when it is detected that start has exceeded the endAddress */
1814:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1815:../drivers/fsl_flash.c ****     regionCheckedCounter = 0;
1816:../drivers/fsl_flash.c ****     protectStatusCounter = 0; /* make sure protectStatusCounter is initialized to 0 first */
1817:../drivers/fsl_flash.c ****     while (start < endAddress)
1818:../drivers/fsl_flash.c ****     {
1819:../drivers/fsl_flash.c ****         /* check to see if the address falls within this protection region
1820:../drivers/fsl_flash.c ****          * Note that if the entire flash is to be checked, the last protection
1821:../drivers/fsl_flash.c ****          * region checked would consist of the last protection start address and
1822:../drivers/fsl_flash.c ****          * the start address following the end of flash */
1823:../drivers/fsl_flash.c ****         if ((start >= flashRegionAddress[regionCounter]) && (start < flashRegionAddress[regionCount
1824:../drivers/fsl_flash.c ****         {
1825:../drivers/fsl_flash.c ****             /* increment regionCheckedCounter to indicate this region was checked */
1826:../drivers/fsl_flash.c ****             regionCheckedCounter++;
1827:../drivers/fsl_flash.c **** 
1828:../drivers/fsl_flash.c ****             /* check the protection status of this region
1829:../drivers/fsl_flash.c ****              * Note: FPROT=1 means NOT protected, FPROT=0 means protected */
1830:../drivers/fsl_flash.c ****             if (!flashRegionProtectStatus[regionCounter])
1831:../drivers/fsl_flash.c ****             {
1832:../drivers/fsl_flash.c ****                 /* increment protectStatusCounter to indicate this region is protected */
1833:../drivers/fsl_flash.c ****                 protectStatusCounter++;
1834:../drivers/fsl_flash.c ****             }
1835:../drivers/fsl_flash.c ****             start += flashProtectionInfo.regionSize; /* increment to an address within the next reg
1836:../drivers/fsl_flash.c ****         }
1837:../drivers/fsl_flash.c ****         regionCounter++; /* increment regionCounter to check for the next flash protection region *
1838:../drivers/fsl_flash.c ****     }
1839:../drivers/fsl_flash.c **** 
1840:../drivers/fsl_flash.c ****     /* if protectStatusCounter == 0, then no region of the desired flash region is protected */
1841:../drivers/fsl_flash.c ****     if (protectStatusCounter == 0)
1842:../drivers/fsl_flash.c ****     {
1843:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateUnprotected;
1844:../drivers/fsl_flash.c ****     }
1845:../drivers/fsl_flash.c ****     /* if protectStatusCounter == regionCheckedCounter, then each region checked was protected */
1846:../drivers/fsl_flash.c ****     else if (protectStatusCounter == regionCheckedCounter)
1847:../drivers/fsl_flash.c ****     {
1848:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateProtected;
1849:../drivers/fsl_flash.c ****     }
1850:../drivers/fsl_flash.c ****     /* if protectStatusCounter != regionCheckedCounter, then protection status is mixed
1851:../drivers/fsl_flash.c ****      * In other words, some regions are protected while others are unprotected */
1852:../drivers/fsl_flash.c ****     else
1853:../drivers/fsl_flash.c ****     {
1854:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateMixed;
1855:../drivers/fsl_flash.c ****     }
1856:../drivers/fsl_flash.c **** 
1857:../drivers/fsl_flash.c ****     return (returnCode);
1858:../drivers/fsl_flash.c **** }
1859:../drivers/fsl_flash.c **** 
1860:../drivers/fsl_flash.c **** status_t FLASH_IsExecuteOnly(flash_config_t *config,
1861:../drivers/fsl_flash.c ****                              uint32_t start,
1862:../drivers/fsl_flash.c ****                              uint32_t lengthInBytes,
1863:../drivers/fsl_flash.c ****                              flash_execute_only_access_state_t *access_state)
1864:../drivers/fsl_flash.c **** {
1865:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
1866:../drivers/fsl_flash.c ****     flash_access_config_t flashAccessInfo; /* flash Execute-Only information */
1867:../drivers/fsl_flash.c **** #endif                                     /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
1868:../drivers/fsl_flash.c ****     status_t returnCode;
1869:../drivers/fsl_flash.c **** 
1870:../drivers/fsl_flash.c ****     if (access_state == NULL)
1871:../drivers/fsl_flash.c ****     {
1872:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1873:../drivers/fsl_flash.c ****     }
1874:../drivers/fsl_flash.c **** 
1875:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1876:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, MAIN_FLASH_FEATURE_PFLASH_BLOCK_WR
1877:../drivers/fsl_flash.c ****     if (returnCode)
1878:../drivers/fsl_flash.c ****     {
1879:../drivers/fsl_flash.c ****         return returnCode;
1880:../drivers/fsl_flash.c ****     }
1881:../drivers/fsl_flash.c **** 
1882:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
1883:../drivers/fsl_flash.c ****     /* Get necessary flash Execute-Only information. */
1884:../drivers/fsl_flash.c ****     returnCode = flash_get_access_info(config, &flashAccessInfo);
1885:../drivers/fsl_flash.c ****     if (returnCode)
1886:../drivers/fsl_flash.c ****     {
1887:../drivers/fsl_flash.c ****         return returnCode;
1888:../drivers/fsl_flash.c ****     }
1889:../drivers/fsl_flash.c **** 
1890:../drivers/fsl_flash.c ****     {
1891:../drivers/fsl_flash.c ****         uint32_t executeOnlySegmentCounter = 0;
1892:../drivers/fsl_flash.c **** 
1893:../drivers/fsl_flash.c ****         /* calculating end address */
1894:../drivers/fsl_flash.c ****         uint32_t endAddress = start + lengthInBytes;
1895:../drivers/fsl_flash.c **** 
1896:../drivers/fsl_flash.c ****         /* Aligning start address and end address */
1897:../drivers/fsl_flash.c ****         uint32_t alignedStartAddress = ALIGN_DOWN(start, flashAccessInfo.SegmentSize);
1898:../drivers/fsl_flash.c ****         uint32_t alignedEndAddress = ALIGN_UP(endAddress, flashAccessInfo.SegmentSize);
1899:../drivers/fsl_flash.c **** 
1900:../drivers/fsl_flash.c ****         uint32_t segmentIndex = 0;
1901:../drivers/fsl_flash.c ****         uint32_t maxSupportedExecuteOnlySegmentCount =
1902:../drivers/fsl_flash.c ****             (alignedEndAddress - alignedStartAddress) / flashAccessInfo.SegmentSize;
1903:../drivers/fsl_flash.c **** 
1904:../drivers/fsl_flash.c ****         while (start < endAddress)
1905:../drivers/fsl_flash.c ****         {
1906:../drivers/fsl_flash.c ****             uint32_t xacc;
1907:../drivers/fsl_flash.c ****             bool isInvalidSegmentIndex = false;
1908:../drivers/fsl_flash.c **** 
1909:../drivers/fsl_flash.c ****             segmentIndex = (start - flashAccessInfo.SegmentBase) / flashAccessInfo.SegmentSize;
1910:../drivers/fsl_flash.c **** 
1911:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
1912:../drivers/fsl_flash.c ****             if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
1913:../drivers/fsl_flash.c ****             {
1914:../drivers/fsl_flash.c ****                 /* For secondary flash, The two XACCS registers allow up to 16 restricted segments 
1915:../drivers/fsl_flash.c ****                  */
1916:../drivers/fsl_flash.c ****                 if (segmentIndex < 8)
1917:../drivers/fsl_flash.c ****                 {
1918:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint8_t *)&FTFx_XACCSL_REG;
1919:../drivers/fsl_flash.c ****                 }
1920:../drivers/fsl_flash.c ****                 else if (segmentIndex < flashAccessInfo.SegmentCount)
1921:../drivers/fsl_flash.c ****                 {
1922:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint8_t *)&FTFx_XACCSH_REG;
1923:../drivers/fsl_flash.c ****                     segmentIndex -= 8;
1924:../drivers/fsl_flash.c ****                 }
1925:../drivers/fsl_flash.c ****                 else
1926:../drivers/fsl_flash.c ****                 {
1927:../drivers/fsl_flash.c ****                     isInvalidSegmentIndex = true;
1928:../drivers/fsl_flash.c ****                 }
1929:../drivers/fsl_flash.c ****             }
1930:../drivers/fsl_flash.c ****             else
1931:../drivers/fsl_flash.c **** #endif
1932:../drivers/fsl_flash.c ****             {
1933:../drivers/fsl_flash.c ****                 /* For primary flash, The eight XACC registers allow up to 64 restricted segments o
1934:../drivers/fsl_flash.c ****                  */
1935:../drivers/fsl_flash.c ****                 if (segmentIndex < 32)
1936:../drivers/fsl_flash.c ****                 {
1937:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint32_t *)&FTFx_XACCL3_REG;
1938:../drivers/fsl_flash.c ****                 }
1939:../drivers/fsl_flash.c ****                 else if (segmentIndex < flashAccessInfo.SegmentCount)
1940:../drivers/fsl_flash.c ****                 {
1941:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint32_t *)&FTFx_XACCH3_REG;
1942:../drivers/fsl_flash.c ****                     segmentIndex -= 32;
1943:../drivers/fsl_flash.c ****                 }
1944:../drivers/fsl_flash.c ****                 else
1945:../drivers/fsl_flash.c ****                 {
1946:../drivers/fsl_flash.c ****                     isInvalidSegmentIndex = true;
1947:../drivers/fsl_flash.c ****                 }
1948:../drivers/fsl_flash.c ****             }
1949:../drivers/fsl_flash.c **** 
1950:../drivers/fsl_flash.c ****             if (isInvalidSegmentIndex)
1951:../drivers/fsl_flash.c ****             {
1952:../drivers/fsl_flash.c ****                 break;
1953:../drivers/fsl_flash.c ****             }
1954:../drivers/fsl_flash.c **** 
1955:../drivers/fsl_flash.c ****             /* Determine if this address range is in a execute-only protection flash segment. */
1956:../drivers/fsl_flash.c ****             if ((~xacc) & (1u << segmentIndex))
1957:../drivers/fsl_flash.c ****             {
1958:../drivers/fsl_flash.c ****                 executeOnlySegmentCounter++;
1959:../drivers/fsl_flash.c ****             }
1960:../drivers/fsl_flash.c **** 
1961:../drivers/fsl_flash.c ****             start += flashAccessInfo.SegmentSize;
1962:../drivers/fsl_flash.c ****         }
1963:../drivers/fsl_flash.c **** 
1964:../drivers/fsl_flash.c ****         if (executeOnlySegmentCounter < 1u)
1965:../drivers/fsl_flash.c ****         {
1966:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateUnLimited;
1967:../drivers/fsl_flash.c ****         }
1968:../drivers/fsl_flash.c ****         else if (executeOnlySegmentCounter < maxSupportedExecuteOnlySegmentCount)
1969:../drivers/fsl_flash.c ****         {
1970:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateMixed;
1971:../drivers/fsl_flash.c ****         }
1972:../drivers/fsl_flash.c ****         else
1973:../drivers/fsl_flash.c ****         {
1974:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateExecuteOnly;
1975:../drivers/fsl_flash.c ****         }
1976:../drivers/fsl_flash.c ****     }
1977:../drivers/fsl_flash.c **** #else
1978:../drivers/fsl_flash.c ****     *access_state = kFLASH_AccessStateUnLimited;
1979:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
1980:../drivers/fsl_flash.c **** 
1981:../drivers/fsl_flash.c ****     return (returnCode);
1982:../drivers/fsl_flash.c **** }
1983:../drivers/fsl_flash.c **** 
1984:../drivers/fsl_flash.c **** status_t FLASH_GetProperty(flash_config_t *config, flash_property_tag_t whichProperty, uint32_t *va
1985:../drivers/fsl_flash.c **** {
1986:../drivers/fsl_flash.c ****     if ((config == NULL) || (value == NULL))
1987:../drivers/fsl_flash.c ****     {
1988:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1989:../drivers/fsl_flash.c ****     }
1990:../drivers/fsl_flash.c **** 
1991:../drivers/fsl_flash.c ****     switch (whichProperty)
1992:../drivers/fsl_flash.c ****     {
1993:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashSectorSize:
1994:../drivers/fsl_flash.c ****             *value = config->PFlashSectorSize;
1995:../drivers/fsl_flash.c ****             break;
1996:../drivers/fsl_flash.c **** 
1997:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashTotalSize:
1998:../drivers/fsl_flash.c ****             *value = config->PFlashTotalSize;
1999:../drivers/fsl_flash.c ****             break;
2000:../drivers/fsl_flash.c **** 
2001:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockSize:
2002:../drivers/fsl_flash.c ****             *value = config->PFlashTotalSize / (uint32_t)config->PFlashBlockCount;
2003:../drivers/fsl_flash.c ****             break;
2004:../drivers/fsl_flash.c **** 
2005:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockCount:
2006:../drivers/fsl_flash.c ****             *value = (uint32_t)config->PFlashBlockCount;
2007:../drivers/fsl_flash.c ****             break;
2008:../drivers/fsl_flash.c **** 
2009:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockBaseAddr:
2010:../drivers/fsl_flash.c ****             *value = config->PFlashBlockBase;
2011:../drivers/fsl_flash.c ****             break;
2012:../drivers/fsl_flash.c **** 
2013:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashFacSupport:
2014:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL)
2015:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL;
2016:../drivers/fsl_flash.c **** #else
2017:../drivers/fsl_flash.c ****             *value = 0;
2018:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
2019:../drivers/fsl_flash.c ****             break;
2020:../drivers/fsl_flash.c **** 
2021:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentSize:
2022:../drivers/fsl_flash.c ****             *value = config->PFlashAccessSegmentSize;
2023:../drivers/fsl_flash.c ****             break;
2024:../drivers/fsl_flash.c **** 
2025:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentCount:
2026:../drivers/fsl_flash.c ****             *value = config->PFlashAccessSegmentCount;
2027:../drivers/fsl_flash.c ****             break;
2028:../drivers/fsl_flash.c **** 
2029:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamBlockBaseAddr:
2030:../drivers/fsl_flash.c ****             *value = config->FlexRAMBlockBase;
2031:../drivers/fsl_flash.c ****             break;
2032:../drivers/fsl_flash.c **** 
2033:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamTotalSize:
2034:../drivers/fsl_flash.c ****             *value = config->FlexRAMTotalSize;
2035:../drivers/fsl_flash.c ****             break;
2036:../drivers/fsl_flash.c **** 
2037:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2038:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashSectorSize:
2039:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SECTOR_SIZE;
2040:../drivers/fsl_flash.c ****             break;
2041:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashTotalSize:
2042:../drivers/fsl_flash.c ****             *value = config->DFlashTotalSize;
2043:../drivers/fsl_flash.c ****             break;
2044:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockSize:
2045:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SIZE;
2046:../drivers/fsl_flash.c ****             break;
2047:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockCount:
2048:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_COUNT;
2049:../drivers/fsl_flash.c ****             break;
2050:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockBaseAddr:
2051:../drivers/fsl_flash.c ****             *value = config->DFlashBlockBase;
2052:../drivers/fsl_flash.c ****             break;
2053:../drivers/fsl_flash.c ****         case kFLASH_PropertyEepromTotalSize:
2054:../drivers/fsl_flash.c ****             *value = config->EEpromTotalSize;
2055:../drivers/fsl_flash.c ****             break;
2056:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2057:../drivers/fsl_flash.c **** 
2058:../drivers/fsl_flash.c ****         default: /* catch inputs that are not recognized */
2059:../drivers/fsl_flash.c ****             return kStatus_FLASH_UnknownProperty;
2060:../drivers/fsl_flash.c ****     }
2061:../drivers/fsl_flash.c **** 
2062:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2063:../drivers/fsl_flash.c **** }
2064:../drivers/fsl_flash.c **** 
2065:../drivers/fsl_flash.c **** status_t FLASH_SetProperty(flash_config_t *config, flash_property_tag_t whichProperty, uint32_t val
2066:../drivers/fsl_flash.c **** {
2067:../drivers/fsl_flash.c ****     status_t status = kStatus_FLASH_Success;
2068:../drivers/fsl_flash.c **** 
2069:../drivers/fsl_flash.c ****     if (config == NULL)
2070:../drivers/fsl_flash.c ****     {
2071:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2072:../drivers/fsl_flash.c ****     }
2073:../drivers/fsl_flash.c **** 
2074:../drivers/fsl_flash.c ****     switch (whichProperty)
2075:../drivers/fsl_flash.c ****     {
2076:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2077:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlashMemoryIndex:
2078:../drivers/fsl_flash.c ****             if ((value != (uint32_t)kFLASH_MemoryIndexPrimaryFlash) &&
2079:../drivers/fsl_flash.c ****                 (value != (uint32_t)kFLASH_MemoryIndexSecondaryFlash))
2080:../drivers/fsl_flash.c ****             {
2081:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidPropertyValue;
2082:../drivers/fsl_flash.c ****             }
2083:../drivers/fsl_flash.c ****             config->FlashMemoryIndex = (uint8_t)value;
2084:../drivers/fsl_flash.c ****             break;
2085:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
2086:../drivers/fsl_flash.c **** 
2087:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashSectorSize:
2088:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashTotalSize:
2089:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockSize:
2090:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockCount:
2091:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockBaseAddr:
2092:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashFacSupport:
2093:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentSize:
2094:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentCount:
2095:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamBlockBaseAddr:
2096:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamTotalSize:
2097:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2098:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashSectorSize:
2099:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashTotalSize:
2100:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockSize:
2101:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockCount:
2102:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockBaseAddr:
2103:../drivers/fsl_flash.c ****         case kFLASH_PropertyEepromTotalSize:
2104:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2105:../drivers/fsl_flash.c ****             status = kStatus_FLASH_ReadOnlyProperty;
2106:../drivers/fsl_flash.c ****             break;
2107:../drivers/fsl_flash.c ****         default: /* catch inputs that are not recognized */
2108:../drivers/fsl_flash.c ****             status = kStatus_FLASH_UnknownProperty;
2109:../drivers/fsl_flash.c ****             break;
2110:../drivers/fsl_flash.c ****     }
2111:../drivers/fsl_flash.c **** 
2112:../drivers/fsl_flash.c ****     return status;
2113:../drivers/fsl_flash.c **** }
2114:../drivers/fsl_flash.c **** 
2115:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
2116:../drivers/fsl_flash.c **** status_t FLASH_SetFlexramFunction(flash_config_t *config, flash_flexram_function_option_t option)
2117:../drivers/fsl_flash.c **** {
2118:../drivers/fsl_flash.c ****     status_t status;
2119:../drivers/fsl_flash.c **** 
2120:../drivers/fsl_flash.c ****     if (config == NULL)
2121:../drivers/fsl_flash.c ****     {
2122:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2123:../drivers/fsl_flash.c ****     }
2124:../drivers/fsl_flash.c **** 
2125:../drivers/fsl_flash.c ****     status = flasn_check_flexram_function_option_range(option);
2126:../drivers/fsl_flash.c ****     if (status != kStatus_FLASH_Success)
2127:../drivers/fsl_flash.c ****     {
2128:../drivers/fsl_flash.c ****         return status;
2129:../drivers/fsl_flash.c ****     }
2130:../drivers/fsl_flash.c **** 
2131:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify all block command */
2132:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_SET_FLEXRAM_FUNCTION, option, 0xFFFFU);
2133:../drivers/fsl_flash.c **** 
2134:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
2135:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
2136:../drivers/fsl_flash.c **** }
2137:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
2138:../drivers/fsl_flash.c **** 
2139:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
2140:../drivers/fsl_flash.c **** status_t FLASH_SwapControl(flash_config_t *config,
2141:../drivers/fsl_flash.c ****                            uint32_t address,
2142:../drivers/fsl_flash.c ****                            flash_swap_control_option_t option,
2143:../drivers/fsl_flash.c ****                            flash_swap_state_config_t *returnInfo)
2144:../drivers/fsl_flash.c **** {
2145:../drivers/fsl_flash.c ****     status_t returnCode;
2146:../drivers/fsl_flash.c **** 
2147:../drivers/fsl_flash.c ****     if ((config == NULL) || (returnInfo == NULL))
2148:../drivers/fsl_flash.c ****     {
2149:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2150:../drivers/fsl_flash.c ****     }
2151:../drivers/fsl_flash.c **** 
2152:../drivers/fsl_flash.c ****     if (address & (FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT - 1))
2153:../drivers/fsl_flash.c ****     {
2154:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
2155:../drivers/fsl_flash.c ****     }
2156:../drivers/fsl_flash.c **** 
2157:../drivers/fsl_flash.c ****     /* Make sure address provided is in the lower half of Program flash but not in the Flash Config
2158:../drivers/fsl_flash.c ****     if ((address >= (config->PFlashTotalSize / 2)) ||
2159:../drivers/fsl_flash.c ****         ((address >= kFLASH_ConfigAreaStart) && (address <= kFLASH_ConfigAreaEnd)))
2160:../drivers/fsl_flash.c ****     {
2161:../drivers/fsl_flash.c ****         return kStatus_FLASH_SwapIndicatorAddressError;
2162:../drivers/fsl_flash.c ****     }
2163:../drivers/fsl_flash.c **** 
2164:../drivers/fsl_flash.c ****     /* Check the option. */
2165:../drivers/fsl_flash.c ****     returnCode = flash_check_swap_control_option(option);
2166:../drivers/fsl_flash.c ****     if (returnCode)
2167:../drivers/fsl_flash.c ****     {
2168:../drivers/fsl_flash.c ****         return returnCode;
2169:../drivers/fsl_flash.c ****     }
2170:../drivers/fsl_flash.c **** 
2171:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_SWAP_CONTROL, address);
2172:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
2173:../drivers/fsl_flash.c **** 
2174:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
2175:../drivers/fsl_flash.c **** 
2176:../drivers/fsl_flash.c ****     returnInfo->flashSwapState = (flash_swap_state_t)FTFx_FCCOB5_REG;
2177:../drivers/fsl_flash.c ****     returnInfo->currentSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB6_REG;
2178:../drivers/fsl_flash.c ****     returnInfo->nextSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB7_REG;
2179:../drivers/fsl_flash.c **** 
2180:../drivers/fsl_flash.c ****     return returnCode;
2181:../drivers/fsl_flash.c **** }
2182:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
2183:../drivers/fsl_flash.c **** 
2184:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
2185:../drivers/fsl_flash.c **** status_t FLASH_Swap(flash_config_t *config, uint32_t address, flash_swap_function_option_t option)
2186:../drivers/fsl_flash.c **** {
2187:../drivers/fsl_flash.c ****     flash_swap_state_config_t returnInfo;
2188:../drivers/fsl_flash.c ****     status_t returnCode;
2189:../drivers/fsl_flash.c **** 
2190:../drivers/fsl_flash.c ****     memset(&returnInfo, 0xFFU, sizeof(returnInfo));
2191:../drivers/fsl_flash.c **** 
2192:../drivers/fsl_flash.c ****     do
2193:../drivers/fsl_flash.c ****     {
2194:../drivers/fsl_flash.c ****         returnCode = FLASH_SwapControl(config, address, kFLASH_SwapControlOptionReportStatus, &retu
2195:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
2196:../drivers/fsl_flash.c ****         {
2197:../drivers/fsl_flash.c ****             return returnCode;
2198:../drivers/fsl_flash.c ****         }
2199:../drivers/fsl_flash.c **** 
2200:../drivers/fsl_flash.c ****         if (kFLASH_SwapFunctionOptionDisable == option)
2201:../drivers/fsl_flash.c ****         {
2202:../drivers/fsl_flash.c ****             if (returnInfo.flashSwapState == kFLASH_SwapStateDisabled)
2203:../drivers/fsl_flash.c ****             {
2204:../drivers/fsl_flash.c ****                 return kStatus_FLASH_Success;
2205:../drivers/fsl_flash.c ****             }
2206:../drivers/fsl_flash.c ****             else if (returnInfo.flashSwapState == kFLASH_SwapStateUninitialized)
2207:../drivers/fsl_flash.c ****             {
2208:../drivers/fsl_flash.c ****                 /* The swap system changed to the DISABLED state with Program flash block 0
2209:../drivers/fsl_flash.c ****                  * located at relative flash address 0x0_0000 */
2210:../drivers/fsl_flash.c ****                 returnCode = FLASH_SwapControl(config, address, kFLASH_SwapControlOptionDisableSyst
2211:../drivers/fsl_flash.c ****             }
2212:../drivers/fsl_flash.c ****             else
2213:../drivers/fsl_flash.c ****             {
2214:../drivers/fsl_flash.c ****                 /* Swap disable should be requested only when swap system is in the uninitialized s
2215:../drivers/fsl_flash.c ****                 return kStatus_FLASH_SwapSystemNotInUninitialized;
2216:../drivers/fsl_flash.c ****             }
2217:../drivers/fsl_flash.c ****         }
2218:../drivers/fsl_flash.c ****         else
2219:../drivers/fsl_flash.c ****         {
2220:../drivers/fsl_flash.c ****             /* When first swap: the initial swap state is Uninitialized, flash swap inidicator addr
2221:../drivers/fsl_flash.c ****              *    the swap procedure should be Uninitialized -> Update-Erased -> Complete.
2222:../drivers/fsl_flash.c ****              * After the first swap has been completed, the flash swap inidicator address cannot be
2223:../drivers/fsl_flash.c ****              *    unless EraseAllBlocks command is issued, the swap procedure is changed to Update 
2224:../drivers/fsl_flash.c ****              *    Complete. */
2225:../drivers/fsl_flash.c ****             switch (returnInfo.flashSwapState)
2226:../drivers/fsl_flash.c ****             {
2227:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUninitialized:
2228:../drivers/fsl_flash.c ****                     /* If current swap mode is Uninitialized, Initialize Swap to Initialized/READY 
2229:../drivers/fsl_flash.c ****                     returnCode =
2230:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionIntializeSystem,
2231:../drivers/fsl_flash.c ****                     break;
2232:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateReady:
2233:../drivers/fsl_flash.c ****                     /* Validate whether the address provided to the swap system is matched to
2234:../drivers/fsl_flash.c ****                      * swap indicator address in the IFR */
2235:../drivers/fsl_flash.c ****                     returnCode = flash_validate_swap_indicator_address(config, address);
2236:../drivers/fsl_flash.c ****                     if (returnCode == kStatus_FLASH_Success)
2237:../drivers/fsl_flash.c ****                     {
2238:../drivers/fsl_flash.c ****                         /* If current swap mode is Initialized/Ready, Initialize Swap to UPDATE sta
2239:../drivers/fsl_flash.c ****                         returnCode =
2240:../drivers/fsl_flash.c ****                             FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInUpdateS
2241:../drivers/fsl_flash.c ****                     }
2242:../drivers/fsl_flash.c ****                     break;
2243:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUpdate:
2244:../drivers/fsl_flash.c ****                     /* If current swap mode is Update, Erase indicator sector in non active block
2245:../drivers/fsl_flash.c ****                      * to proceed swap system to update-erased state */
2246:../drivers/fsl_flash.c ****                     returnCode = FLASH_Erase(config, address + (config->PFlashTotalSize >> 1),
2247:../drivers/fsl_flash.c ****                                              FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT, 
2248:../drivers/fsl_flash.c ****                     break;
2249:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUpdateErased:
2250:../drivers/fsl_flash.c ****                     /* If current swap mode is Update or Update-Erased, progress Swap to COMPLETE S
2251:../drivers/fsl_flash.c ****                     returnCode =
2252:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInCompleteSta
2253:../drivers/fsl_flash.c ****                     break;
2254:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateComplete:
2255:../drivers/fsl_flash.c ****                     break;
2256:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateDisabled:
2257:../drivers/fsl_flash.c ****                     /* When swap system is in disabled state, We need to clear swap system back to 
2258:../drivers/fsl_flash.c ****                      * by issuing EraseAllBlocks command */
2259:../drivers/fsl_flash.c ****                     returnCode = kStatus_FLASH_SwapSystemNotInUninitialized;
2260:../drivers/fsl_flash.c ****                     break;
2261:../drivers/fsl_flash.c ****                 default:
2262:../drivers/fsl_flash.c ****                     returnCode = kStatus_FLASH_InvalidArgument;
2263:../drivers/fsl_flash.c ****                     break;
2264:../drivers/fsl_flash.c ****             }
2265:../drivers/fsl_flash.c ****         }
2266:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
2267:../drivers/fsl_flash.c ****         {
2268:../drivers/fsl_flash.c ****             break;
2269:../drivers/fsl_flash.c ****         }
2270:../drivers/fsl_flash.c ****     } while (!((kFLASH_SwapStateComplete == returnInfo.flashSwapState) && (kFLASH_SwapFunctionOptio
2271:../drivers/fsl_flash.c **** 
2272:../drivers/fsl_flash.c ****     return returnCode;
2273:../drivers/fsl_flash.c **** }
2274:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
2275:../drivers/fsl_flash.c **** 
2276:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION_CMD) && FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION
2277:../drivers/fsl_flash.c **** status_t FLASH_ProgramPartition(flash_config_t *config,
2278:../drivers/fsl_flash.c ****                                 flash_partition_flexram_load_option_t option,
2279:../drivers/fsl_flash.c ****                                 uint32_t eepromDataSizeCode,
2280:../drivers/fsl_flash.c ****                                 uint32_t flexnvmPartitionCode)
2281:../drivers/fsl_flash.c **** {
2282:../drivers/fsl_flash.c ****     status_t returnCode;
2283:../drivers/fsl_flash.c **** 
2284:../drivers/fsl_flash.c ****     if (config == NULL)
2285:../drivers/fsl_flash.c ****     {
2286:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2287:../drivers/fsl_flash.c ****     }
2288:../drivers/fsl_flash.c **** 
2289:../drivers/fsl_flash.c ****     /* eepromDataSizeCode[7:6], flexnvmPartitionCode[7:4] should be all 1'b0
2290:../drivers/fsl_flash.c ****      *  or it will cause access error. */
2291:../drivers/fsl_flash.c ****     /* eepromDataSizeCode &= 0x3FU;  */
2292:../drivers/fsl_flash.c ****     /* flexnvmPartitionCode &= 0x0FU; */
2293:../drivers/fsl_flash.c **** 
2294:../drivers/fsl_flash.c ****     /* preparing passing parameter to program the flash block */
2295:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_2_1(FTFx_PROGRAM_PARTITION, 0xFFFFU, option);
2296:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_2(eepromDataSizeCode, flexnvmPartitionCode, 0xFFFFU);
2297:../drivers/fsl_flash.c **** 
2298:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
2299:../drivers/fsl_flash.c **** 
2300:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
2301:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
2302:../drivers/fsl_flash.c **** 
2303:../drivers/fsl_flash.c ****     flash_cache_clear(config);
2304:../drivers/fsl_flash.c **** 
2305:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2306:../drivers/fsl_flash.c ****     /* Data flash IFR will be updated by program partition command during reset sequence,
2307:../drivers/fsl_flash.c ****      * so we just set reserved values for partitioned FlexNVM size here */
2308:../drivers/fsl_flash.c ****     config->EEpromTotalSize = FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED;
2309:../drivers/fsl_flash.c ****     config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
2310:../drivers/fsl_flash.c **** #endif
2311:../drivers/fsl_flash.c **** 
2312:../drivers/fsl_flash.c ****     return (returnCode);
2313:../drivers/fsl_flash.c **** }
2314:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION_CMD */
2315:../drivers/fsl_flash.c **** 
2316:../drivers/fsl_flash.c **** status_t FLASH_PflashSetProtection(flash_config_t *config, pflash_protection_status_t *protectStatu
2317:../drivers/fsl_flash.c **** {
2318:../drivers/fsl_flash.c ****     if (config == NULL)
2319:../drivers/fsl_flash.c ****     {
2320:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2321:../drivers/fsl_flash.c ****     }
2322:../drivers/fsl_flash.c **** 
2323:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
2324:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
2325:../drivers/fsl_flash.c ****     {
2326:../drivers/fsl_flash.c ****         *kFPROTSL = protectStatus->valueLow32b.prots16b.protsl;
2327:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.prots16b.protsl != *kFPROTSL)
2328:../drivers/fsl_flash.c ****         {
2329:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2330:../drivers/fsl_flash.c ****         }
2331:../drivers/fsl_flash.c **** 
2332:../drivers/fsl_flash.c ****         *kFPROTSH = protectStatus->valueLow32b.prots16b.protsh;
2333:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.prots16b.protsh != *kFPROTSH)
2334:../drivers/fsl_flash.c ****         {
2335:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2336:../drivers/fsl_flash.c ****         }
2337:../drivers/fsl_flash.c ****     }
2338:../drivers/fsl_flash.c ****     else
2339:../drivers/fsl_flash.c **** #endif
2340:../drivers/fsl_flash.c ****     {
2341:../drivers/fsl_flash.c ****         *kFPROTL = protectStatus->valueLow32b.protl32b;
2342:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.protl32b != *kFPROTL)
2343:../drivers/fsl_flash.c ****         {
2344:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2345:../drivers/fsl_flash.c ****         }
2346:../drivers/fsl_flash.c **** 
2347:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
2348:../drivers/fsl_flash.c ****         *kFPROTH = protectStatus->valueHigh32b.proth32b;
2349:../drivers/fsl_flash.c ****         if (protectStatus->valueHigh32b.proth32b != *kFPROTH)
2350:../drivers/fsl_flash.c ****         {
2351:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2352:../drivers/fsl_flash.c ****         }
2353:../drivers/fsl_flash.c **** #endif
2354:../drivers/fsl_flash.c ****     }
2355:../drivers/fsl_flash.c **** 
2356:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2357:../drivers/fsl_flash.c **** }
2358:../drivers/fsl_flash.c **** 
2359:../drivers/fsl_flash.c **** status_t FLASH_PflashGetProtection(flash_config_t *config, pflash_protection_status_t *protectStatu
2360:../drivers/fsl_flash.c **** {
2361:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2362:../drivers/fsl_flash.c ****     {
2363:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2364:../drivers/fsl_flash.c ****     }
2365:../drivers/fsl_flash.c **** 
2366:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
2367:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
2368:../drivers/fsl_flash.c ****     {
2369:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.prots16b.protsl = *kFPROTSL;
2370:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.prots16b.protsh = *kFPROTSH;
2371:../drivers/fsl_flash.c ****     }
2372:../drivers/fsl_flash.c ****     else
2373:../drivers/fsl_flash.c **** #endif
2374:../drivers/fsl_flash.c ****     {
2375:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.protl32b = *kFPROTL;
2376:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
2377:../drivers/fsl_flash.c ****         protectStatus->valueHigh32b.proth32b = *kFPROTH;
2378:../drivers/fsl_flash.c **** #endif
2379:../drivers/fsl_flash.c ****     }
2380:../drivers/fsl_flash.c **** 
2381:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2382:../drivers/fsl_flash.c **** }
2383:../drivers/fsl_flash.c **** 
2384:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2385:../drivers/fsl_flash.c **** status_t FLASH_DflashSetProtection(flash_config_t *config, uint8_t protectStatus)
2386:../drivers/fsl_flash.c **** {
2387:../drivers/fsl_flash.c ****     if (config == NULL)
2388:../drivers/fsl_flash.c ****     {
2389:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2390:../drivers/fsl_flash.c ****     }
2391:../drivers/fsl_flash.c **** 
2392:../drivers/fsl_flash.c ****     if ((config->DFlashTotalSize == 0) || (config->DFlashTotalSize == FLEX_NVM_DFLASH_SIZE_FOR_DEPA
2393:../drivers/fsl_flash.c ****     {
2394:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2395:../drivers/fsl_flash.c ****     }
2396:../drivers/fsl_flash.c **** 
2397:../drivers/fsl_flash.c ****     FTFx->FDPROT = protectStatus;
2398:../drivers/fsl_flash.c **** 
2399:../drivers/fsl_flash.c ****     if (FTFx->FDPROT != protectStatus)
2400:../drivers/fsl_flash.c ****     {
2401:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2402:../drivers/fsl_flash.c ****     }
2403:../drivers/fsl_flash.c **** 
2404:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2405:../drivers/fsl_flash.c **** }
2406:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2407:../drivers/fsl_flash.c **** 
2408:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2409:../drivers/fsl_flash.c **** status_t FLASH_DflashGetProtection(flash_config_t *config, uint8_t *protectStatus)
2410:../drivers/fsl_flash.c **** {
2411:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2412:../drivers/fsl_flash.c ****     {
2413:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2414:../drivers/fsl_flash.c ****     }
2415:../drivers/fsl_flash.c **** 
2416:../drivers/fsl_flash.c ****     if ((config->DFlashTotalSize == 0) || (config->DFlashTotalSize == FLEX_NVM_DFLASH_SIZE_FOR_DEPA
2417:../drivers/fsl_flash.c ****     {
2418:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2419:../drivers/fsl_flash.c ****     }
2420:../drivers/fsl_flash.c **** 
2421:../drivers/fsl_flash.c ****     *protectStatus = FTFx->FDPROT;
2422:../drivers/fsl_flash.c **** 
2423:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2424:../drivers/fsl_flash.c **** }
2425:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2426:../drivers/fsl_flash.c **** 
2427:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2428:../drivers/fsl_flash.c **** status_t FLASH_EepromSetProtection(flash_config_t *config, uint8_t protectStatus)
2429:../drivers/fsl_flash.c **** {
2430:../drivers/fsl_flash.c ****     if (config == NULL)
2431:../drivers/fsl_flash.c ****     {
2432:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2433:../drivers/fsl_flash.c ****     }
2434:../drivers/fsl_flash.c **** 
2435:../drivers/fsl_flash.c ****     if ((config->EEpromTotalSize == 0) || (config->EEpromTotalSize == FLEX_NVM_EEPROM_SIZE_FOR_EEES
2436:../drivers/fsl_flash.c ****     {
2437:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2438:../drivers/fsl_flash.c ****     }
2439:../drivers/fsl_flash.c **** 
2440:../drivers/fsl_flash.c ****     FTFx->FEPROT = protectStatus;
2441:../drivers/fsl_flash.c **** 
2442:../drivers/fsl_flash.c ****     if (FTFx->FEPROT != protectStatus)
2443:../drivers/fsl_flash.c ****     {
2444:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2445:../drivers/fsl_flash.c ****     }
2446:../drivers/fsl_flash.c **** 
2447:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2448:../drivers/fsl_flash.c **** }
2449:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2450:../drivers/fsl_flash.c **** 
2451:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2452:../drivers/fsl_flash.c **** status_t FLASH_EepromGetProtection(flash_config_t *config, uint8_t *protectStatus)
2453:../drivers/fsl_flash.c **** {
2454:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2455:../drivers/fsl_flash.c ****     {
2456:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2457:../drivers/fsl_flash.c ****     }
2458:../drivers/fsl_flash.c **** 
2459:../drivers/fsl_flash.c ****     if ((config->EEpromTotalSize == 0) || (config->EEpromTotalSize == FLEX_NVM_EEPROM_SIZE_FOR_EEES
2460:../drivers/fsl_flash.c ****     {
2461:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2462:../drivers/fsl_flash.c ****     }
2463:../drivers/fsl_flash.c **** 
2464:../drivers/fsl_flash.c ****     *protectStatus = FTFx->FEPROT;
2465:../drivers/fsl_flash.c **** 
2466:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2467:../drivers/fsl_flash.c **** }
2468:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2469:../drivers/fsl_flash.c **** 
2470:../drivers/fsl_flash.c **** status_t FLASH_PflashSetPrefetchSpeculation(flash_prefetch_speculation_status_t *speculationStatus)
2471:../drivers/fsl_flash.c **** {
2472:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
2473:../drivers/fsl_flash.c ****     {
2474:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2475:../drivers/fsl_flash.c **** #if defined(MCM)
2476:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MCM->PLACR;
2477:../drivers/fsl_flash.c **** #elif defined(MCM0)
2478:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MCM0->PLACR;
2479:../drivers/fsl_flash.c **** #endif
2480:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionDisable)
2481:../drivers/fsl_flash.c ****         {
2482:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2483:../drivers/fsl_flash.c ****             {
2484:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidSpeculationOption;
2485:../drivers/fsl_flash.c ****             }
2486:../drivers/fsl_flash.c ****             else
2487:../drivers/fsl_flash.c ****             {
2488:../drivers/fsl_flash.c ****                 *regBase |= MCM_PLACR_DFCS_MASK;
2489:../drivers/fsl_flash.c ****             }
2490:../drivers/fsl_flash.c ****         }
2491:../drivers/fsl_flash.c ****         else
2492:../drivers/fsl_flash.c ****         {
2493:../drivers/fsl_flash.c ****             *regBase &= ~MCM_PLACR_DFCS_MASK;
2494:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2495:../drivers/fsl_flash.c ****             {
2496:../drivers/fsl_flash.c ****                 *regBase |= MCM_PLACR_EFDS_MASK;
2497:../drivers/fsl_flash.c ****             }
2498:../drivers/fsl_flash.c ****             else
2499:../drivers/fsl_flash.c ****             {
2500:../drivers/fsl_flash.c ****                 *regBase &= ~MCM_PLACR_EFDS_MASK;
2501:../drivers/fsl_flash.c ****             }
2502:../drivers/fsl_flash.c ****         }
2503:../drivers/fsl_flash.c ****     }
2504:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2505:../drivers/fsl_flash.c ****     {
2506:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2507:../drivers/fsl_flash.c ****         uint32_t b0dpeMask, b0ipeMask;
2508:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_B0DPE_MASK)
2509:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2510:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB01CR_B0DPE_MASK;
2511:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB01CR_B0IPE_MASK;
2512:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_B0DPE_MASK)
2513:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2514:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
2515:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB0CR_B0IPE_MASK;
2516:../drivers/fsl_flash.c **** #endif
2517:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionEnable)
2518:../drivers/fsl_flash.c ****         {
2519:../drivers/fsl_flash.c ****             *regBase |= b0ipeMask;
2520:../drivers/fsl_flash.c ****         }
2521:../drivers/fsl_flash.c ****         else
2522:../drivers/fsl_flash.c ****         {
2523:../drivers/fsl_flash.c ****             *regBase &= ~b0ipeMask;
2524:../drivers/fsl_flash.c ****         }
2525:../drivers/fsl_flash.c ****         if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2526:../drivers/fsl_flash.c ****         {
2527:../drivers/fsl_flash.c ****             *regBase |= b0dpeMask;
2528:../drivers/fsl_flash.c ****         }
2529:../drivers/fsl_flash.c ****         else
2530:../drivers/fsl_flash.c ****         {
2531:../drivers/fsl_flash.c ****             *regBase &= ~b0dpeMask;
2532:../drivers/fsl_flash.c ****         }
2533:../drivers/fsl_flash.c **** 
2534:../drivers/fsl_flash.c **** /* Invalidate Prefetch Speculation Buffer */
2535:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2536:../drivers/fsl_flash.c ****         FMC->PFB01CR |= FMC_PFB01CR_S_INV_MASK;
2537:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2538:../drivers/fsl_flash.c ****         FMC->PFB01CR |= FMC_PFB01CR_S_B_INV_MASK;
2539:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2540:../drivers/fsl_flash.c ****         FMC->PFB0CR |= FMC_PFB0CR_S_INV_MASK;
2541:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2542:../drivers/fsl_flash.c ****         FMC->PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
2543:../drivers/fsl_flash.c **** #endif
2544:../drivers/fsl_flash.c ****     }
2545:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2546:../drivers/fsl_flash.c ****     {
2547:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2548:../drivers/fsl_flash.c ****         uint32_t flashSpeculationMask, dataPrefetchMask;
2549:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR0_REG;
2550:../drivers/fsl_flash.c ****         flashSpeculationMask = MSCM_OCMDR_OCMC1_DFCS_MASK;
2551:../drivers/fsl_flash.c ****         dataPrefetchMask = MSCM_OCMDR_OCMC1_DFDS_MASK;
2552:../drivers/fsl_flash.c **** 
2553:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionDisable)
2554:../drivers/fsl_flash.c ****         {
2555:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2556:../drivers/fsl_flash.c ****             {
2557:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidSpeculationOption;
2558:../drivers/fsl_flash.c ****             }
2559:../drivers/fsl_flash.c ****             else
2560:../drivers/fsl_flash.c ****             {
2561:../drivers/fsl_flash.c ****                 *regBase |= flashSpeculationMask;
2562:../drivers/fsl_flash.c ****             }
2563:../drivers/fsl_flash.c ****         }
2564:../drivers/fsl_flash.c ****         else
2565:../drivers/fsl_flash.c ****         {
2566:../drivers/fsl_flash.c ****             *regBase &= ~flashSpeculationMask;
2567:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2568:../drivers/fsl_flash.c ****             {
2569:../drivers/fsl_flash.c ****                 *regBase &= ~dataPrefetchMask;
2570:../drivers/fsl_flash.c ****             }
2571:../drivers/fsl_flash.c ****             else
2572:../drivers/fsl_flash.c ****             {
2573:../drivers/fsl_flash.c ****                 *regBase |= dataPrefetchMask;
2574:../drivers/fsl_flash.c ****             }
2575:../drivers/fsl_flash.c ****         }
2576:../drivers/fsl_flash.c ****     }
2577:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FTFx_MCM_FLASH_CACHE_CONTROLS */
2578:../drivers/fsl_flash.c **** 
2579:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2580:../drivers/fsl_flash.c **** }
2581:../drivers/fsl_flash.c **** 
2582:../drivers/fsl_flash.c **** status_t FLASH_PflashGetPrefetchSpeculation(flash_prefetch_speculation_status_t *speculationStatus)
2583:../drivers/fsl_flash.c **** {
2584:../drivers/fsl_flash.c ****     memset(speculationStatus, 0, sizeof(flash_prefetch_speculation_status_t));
2585:../drivers/fsl_flash.c **** 
2586:../drivers/fsl_flash.c ****     /* Assuming that all speculation options are enabled. */
2587:../drivers/fsl_flash.c ****     speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionEnable;
2588:../drivers/fsl_flash.c ****     speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionEnable;
2589:../drivers/fsl_flash.c **** 
2590:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
2591:../drivers/fsl_flash.c ****     {
2592:../drivers/fsl_flash.c ****         uint32_t value;
2593:../drivers/fsl_flash.c **** #if defined(MCM)
2594:../drivers/fsl_flash.c ****         value = MCM->PLACR;
2595:../drivers/fsl_flash.c **** #elif defined(MCM0)
2596:../drivers/fsl_flash.c ****         value = MCM0->PLACR;
2597:../drivers/fsl_flash.c **** #endif
2598:../drivers/fsl_flash.c ****         if (value & MCM_PLACR_DFCS_MASK)
2599:../drivers/fsl_flash.c ****         {
2600:../drivers/fsl_flash.c ****             /* Speculation buffer is off. */
2601:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2602:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2603:../drivers/fsl_flash.c ****         }
2604:../drivers/fsl_flash.c ****         else
2605:../drivers/fsl_flash.c ****         {
2606:../drivers/fsl_flash.c ****             /* Speculation buffer is on for instruction. */
2607:../drivers/fsl_flash.c ****             if (!(value & MCM_PLACR_EFDS_MASK))
2608:../drivers/fsl_flash.c ****             {
2609:../drivers/fsl_flash.c ****                 /* Speculation buffer is off for data. */
2610:../drivers/fsl_flash.c ****                 speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2611:../drivers/fsl_flash.c ****             }
2612:../drivers/fsl_flash.c ****         }
2613:../drivers/fsl_flash.c ****     }
2614:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2615:../drivers/fsl_flash.c ****     {
2616:../drivers/fsl_flash.c ****         uint32_t value;
2617:../drivers/fsl_flash.c ****         uint32_t b0dpeMask, b0ipeMask;
2618:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_B0DPE_MASK)
2619:../drivers/fsl_flash.c ****         value = FMC->PFB01CR;
2620:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB01CR_B0DPE_MASK;
2621:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB01CR_B0IPE_MASK;
2622:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_B0DPE_MASK)
2623:../drivers/fsl_flash.c ****         value = FMC->PFB0CR;
2624:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
2625:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB0CR_B0IPE_MASK;
2626:../drivers/fsl_flash.c **** #endif
2627:../drivers/fsl_flash.c ****         if (!(value & b0dpeMask))
2628:../drivers/fsl_flash.c ****         {
2629:../drivers/fsl_flash.c ****             /* Do not prefetch in response to data references. */
2630:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2631:../drivers/fsl_flash.c ****         }
2632:../drivers/fsl_flash.c ****         if (!(value & b0ipeMask))
2633:../drivers/fsl_flash.c ****         {
2634:../drivers/fsl_flash.c ****             /* Do not prefetch in response to instruction fetches. */
2635:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2636:../drivers/fsl_flash.c ****         }
2637:../drivers/fsl_flash.c ****     }
2638:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2639:../drivers/fsl_flash.c ****     {
2640:../drivers/fsl_flash.c ****         uint32_t value;
2641:../drivers/fsl_flash.c ****         uint32_t flashSpeculationMask, dataPrefetchMask;
2642:../drivers/fsl_flash.c ****         value = MSCM_OCMDR0_REG;
2643:../drivers/fsl_flash.c ****         flashSpeculationMask = MSCM_OCMDR_OCMC1_DFCS_MASK;
2644:../drivers/fsl_flash.c ****         dataPrefetchMask = MSCM_OCMDR_OCMC1_DFDS_MASK;
2645:../drivers/fsl_flash.c **** 
2646:../drivers/fsl_flash.c ****         if (value & flashSpeculationMask)
2647:../drivers/fsl_flash.c ****         {
2648:../drivers/fsl_flash.c ****             /* Speculation buffer is off. */
2649:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2650:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2651:../drivers/fsl_flash.c ****         }
2652:../drivers/fsl_flash.c ****         else
2653:../drivers/fsl_flash.c ****         {
2654:../drivers/fsl_flash.c ****             /* Speculation buffer is on for instruction. */
2655:../drivers/fsl_flash.c ****             if (value & dataPrefetchMask)
2656:../drivers/fsl_flash.c ****             {
2657:../drivers/fsl_flash.c ****                 /* Speculation buffer is off for data. */
2658:../drivers/fsl_flash.c ****                 speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2659:../drivers/fsl_flash.c ****             }
2660:../drivers/fsl_flash.c ****         }
2661:../drivers/fsl_flash.c ****     }
2662:../drivers/fsl_flash.c **** #endif
2663:../drivers/fsl_flash.c **** 
2664:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2665:../drivers/fsl_flash.c **** }
2666:../drivers/fsl_flash.c **** 
2667:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2668:../drivers/fsl_flash.c **** /*!
2669:../drivers/fsl_flash.c ****  * @brief Copy PIC of flash_run_command() to RAM
2670:../drivers/fsl_flash.c ****  */
2671:../drivers/fsl_flash.c **** static void copy_flash_run_command(uint32_t *flashRunCommand)
2672:../drivers/fsl_flash.c **** {
2673:../drivers/fsl_flash.c ****     assert(sizeof(s_flashRunCommandFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWords * 4)
2674:../drivers/fsl_flash.c **** 
2675:../drivers/fsl_flash.c ****     /* Since the value of ARM function pointer is always odd, but the real start address
2676:../drivers/fsl_flash.c ****      * of function memory should be even, that's why +1 operation exist. */
2677:../drivers/fsl_flash.c ****     memcpy((void *)flashRunCommand, (void *)s_flashRunCommandFunctionCode, sizeof(s_flashRunCommand
2678:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
2679:../drivers/fsl_flash.c **** }
2680:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2681:../drivers/fsl_flash.c **** 
2682:../drivers/fsl_flash.c **** /*!
2683:../drivers/fsl_flash.c ****  * @brief Flash Command Sequence
2684:../drivers/fsl_flash.c ****  *
2685:../drivers/fsl_flash.c ****  * This function is used to perform the command write sequence to the flash.
2686:../drivers/fsl_flash.c ****  *
2687:../drivers/fsl_flash.c ****  * @param driver Pointer to storage for the driver runtime state.
2688:../drivers/fsl_flash.c ****  * @return An error code or kStatus_FLASH_Success
2689:../drivers/fsl_flash.c ****  */
2690:../drivers/fsl_flash.c **** static status_t flash_command_sequence(flash_config_t *config)
2691:../drivers/fsl_flash.c **** {
2692:../drivers/fsl_flash.c ****     uint8_t registerValue;
2693:../drivers/fsl_flash.c **** 
2694:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2695:../drivers/fsl_flash.c ****     /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register */
2696:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_RDCOLERR_MASK | FTFx_FSTAT_ACCERR_MASK | FTFx_FSTAT_FPVIOL_MASK;
2697:../drivers/fsl_flash.c **** 
2698:../drivers/fsl_flash.c ****     status_t returnCode = flash_check_execute_in_ram_function_info(config);
2699:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
2700:../drivers/fsl_flash.c ****     {
2701:../drivers/fsl_flash.c ****         return returnCode;
2702:../drivers/fsl_flash.c ****     }
2703:../drivers/fsl_flash.c **** 
2704:../drivers/fsl_flash.c ****     /* We pass the ftfx_fstat address as a parameter to flash_run_comamnd() instead of using
2705:../drivers/fsl_flash.c ****      * pre-processed MICRO sentences or operating global variable in flash_run_comamnd()
2706:../drivers/fsl_flash.c ****      * to make sure that flash_run_command() will be compiled into position-independent code (PIC).
2707:../drivers/fsl_flash.c ****     callFlashRunCommand((FTFx_REG8_ACCESS_TYPE)(&FTFx->FSTAT));
2708:../drivers/fsl_flash.c **** #else
2709:../drivers/fsl_flash.c ****     /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register */
2710:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_RDCOLERR_MASK | FTFx_FSTAT_ACCERR_MASK | FTFx_FSTAT_FPVIOL_MASK;
2711:../drivers/fsl_flash.c **** 
2712:../drivers/fsl_flash.c ****     /* clear CCIF bit */
2713:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_CCIF_MASK;
2714:../drivers/fsl_flash.c **** 
2715:../drivers/fsl_flash.c ****     /* Check CCIF bit of the flash status register, wait till it is set.
2716:../drivers/fsl_flash.c ****      * IP team indicates that this loop will always complete. */
2717:../drivers/fsl_flash.c ****     while (!(FTFx->FSTAT & FTFx_FSTAT_CCIF_MASK))
2718:../drivers/fsl_flash.c ****     {
2719:../drivers/fsl_flash.c ****     }
2720:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2721:../drivers/fsl_flash.c **** 
2722:../drivers/fsl_flash.c ****     /* Check error bits */
2723:../drivers/fsl_flash.c ****     /* Get flash status register value */
2724:../drivers/fsl_flash.c ****     registerValue = FTFx->FSTAT;
2725:../drivers/fsl_flash.c **** 
2726:../drivers/fsl_flash.c ****     /* checking access error */
2727:../drivers/fsl_flash.c ****     if (registerValue & FTFx_FSTAT_ACCERR_MASK)
2728:../drivers/fsl_flash.c ****     {
2729:../drivers/fsl_flash.c ****         return kStatus_FLASH_AccessError;
2730:../drivers/fsl_flash.c ****     }
2731:../drivers/fsl_flash.c ****     /* checking protection error */
2732:../drivers/fsl_flash.c ****     else if (registerValue & FTFx_FSTAT_FPVIOL_MASK)
2733:../drivers/fsl_flash.c ****     {
2734:../drivers/fsl_flash.c ****         return kStatus_FLASH_ProtectionViolation;
2735:../drivers/fsl_flash.c ****     }
2736:../drivers/fsl_flash.c ****     /* checking MGSTAT0 non-correctable error */
2737:../drivers/fsl_flash.c ****     else if (registerValue & FTFx_FSTAT_MGSTAT0_MASK)
2738:../drivers/fsl_flash.c ****     {
2739:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2740:../drivers/fsl_flash.c ****     }
2741:../drivers/fsl_flash.c ****     else
2742:../drivers/fsl_flash.c ****     {
2743:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
2744:../drivers/fsl_flash.c ****     }
2745:../drivers/fsl_flash.c **** }
2746:../drivers/fsl_flash.c **** 
2747:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT && FLASH_IS_CACHE_INVALIDATION_AVAILABLE
2748:../drivers/fsl_flash.c **** /*!
2749:../drivers/fsl_flash.c ****  * @brief Copy PIC of flash_common_bit_operation() to RAM
2750:../drivers/fsl_flash.c ****  *
2751:../drivers/fsl_flash.c ****  */
2752:../drivers/fsl_flash.c **** static void copy_flash_common_bit_operation(uint32_t *flashCommonBitOperation)
2753:../drivers/fsl_flash.c **** {
2754:../drivers/fsl_flash.c ****     assert(sizeof(s_flashCommonBitOperationFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWo
2755:../drivers/fsl_flash.c **** 
2756:../drivers/fsl_flash.c ****     /* Since the value of ARM function pointer is always odd, but the real start address
2757:../drivers/fsl_flash.c ****      * of function memory should be even, that's why +1 operation exist. */
2758:../drivers/fsl_flash.c ****     memcpy((void *)flashCommonBitOperation, (void *)s_flashCommonBitOperationFunctionCode,
2759:../drivers/fsl_flash.c ****            sizeof(s_flashCommonBitOperationFunctionCode));
2760:../drivers/fsl_flash.c ****     callFlashCommonBitOperation = (void (*)(FTFx_REG32_ACCESS_TYPE base, uint32_t bitMask, uint32_t
2761:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
2762:../drivers/fsl_flash.c **** }
2763:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT && FLASH_IS_CACHE_INVALIDATION_AVAILABLE */
2764:../drivers/fsl_flash.c **** 
2765:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
2766:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by MCM.*/
2767:../drivers/fsl_flash.c **** void mcm_flash_cache_clear(void)
2768:../drivers/fsl_flash.c **** {
2769:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase;
2770:../drivers/fsl_flash.c **** 
2771:../drivers/fsl_flash.c **** #if defined(BL_TARGET_ROM) && defined(MCM0_CACHE_REG) && defined(MCM1_CACHE_REG) && \
2772:../drivers/fsl_flash.c ****     defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
2773:../drivers/fsl_flash.c ****     {
2774:../drivers/fsl_flash.c ****         uint16_t armPartNumber = (uint16_t)((SCB->CPUID & SCB_CPUID_PARTNO_Msk) >> SCB_CPUID_PARTNO
2775:../drivers/fsl_flash.c ****         uint32_t cortexVersion = __CORTEX_M;
2776:../drivers/fsl_flash.c ****         uint32_t coreId = FSL_FEATURE_FLASH_CURRENT_CORE_ID;
2777:../drivers/fsl_flash.c **** #if (__CORTEX_M <= 7)
2778:../drivers/fsl_flash.c ****         /* Note: Below code only apply to dual core device (such K3S) */
2779:../drivers/fsl_flash.c ****         if (s_armCorePartNumberArray[cortexVersion] != armPartNumber)
2780:../drivers/fsl_flash.c ****         {
2781:../drivers/fsl_flash.c ****             coreId ^= 0x1;
2782:../drivers/fsl_flash.c ****         }
2783:../drivers/fsl_flash.c ****         regBase = s_mcmModuleAccessTypeArray[coreId];
2784:../drivers/fsl_flash.c **** #else
2785:../drivers/fsl_flash.c ****         #error "Inapplicable ARM Cortext Version!"
2786:../drivers/fsl_flash.c **** #endif
2787:../drivers/fsl_flash.c ****     }
2788:../drivers/fsl_flash.c **** #elif defined(MCM0_CACHE_REG)
2789:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&MCM0_CACHE_REG;
2790:../drivers/fsl_flash.c **** #elif defined(MCM1_CACHE_REG)
2791:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&MCM1_CACHE_REG;
2792:../drivers/fsl_flash.c **** #endif
2793:../drivers/fsl_flash.c **** 
2794:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2795:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, MCM_CACHE_CLEAR_MASK, MCM_CACHE_CLEAR_SHIFT, 1U);
2796:../drivers/fsl_flash.c **** #else  /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2797:../drivers/fsl_flash.c ****     *regBase |= MCM_CACHE_CLEAR_MASK;
2798:../drivers/fsl_flash.c **** 
2799:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2800:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2801:../drivers/fsl_flash.c ****     __ISB();
2802:../drivers/fsl_flash.c ****     __DSB();
2803:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2804:../drivers/fsl_flash.c **** }
2805:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_MCM */
2806:../drivers/fsl_flash.c **** 
2807:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
2808:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by FMC.*/
2809:../drivers/fsl_flash.c **** void fmc_flash_cache_clear(void)
2810:../drivers/fsl_flash.c **** {
2811:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2812:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase = (FTFx_REG32_ACCESS_TYPE)0;
2813:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_CINV_WAY_MASK)
2814:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2815:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_CINV_WAY_MASK, FMC_PFB01CR_CINV_WAY_SHIFT, 0xF
2816:../drivers/fsl_flash.c **** #else
2817:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2818:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_CINV_WAY_MASK, FMC_PFB0CR_CINV_WAY_SHIFT, 0xFU)
2819:../drivers/fsl_flash.c **** #endif
2820:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2821:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_CINV_WAY_MASK)
2822:../drivers/fsl_flash.c ****     FMC->PFB01CR = (FMC->PFB01CR & ~FMC_PFB01CR_CINV_WAY_MASK) | FMC_PFB01CR_CINV_WAY(~0);
2823:../drivers/fsl_flash.c **** #else
2824:../drivers/fsl_flash.c ****     FMC->PFB0CR = (FMC->PFB0CR & ~FMC_PFB0CR_CINV_WAY_MASK) | FMC_PFB0CR_CINV_WAY(~0);
2825:../drivers/fsl_flash.c **** #endif
2826:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2827:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2828:../drivers/fsl_flash.c ****     __ISB();
2829:../drivers/fsl_flash.c ****     __DSB();
2830:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2831:../drivers/fsl_flash.c **** }
2832:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
2833:../drivers/fsl_flash.c **** 
2834:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2835:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by MSCM.*/
2836:../drivers/fsl_flash.c **** void mscm_flash_prefetch_speculation_enable(uint32_t flashIndex, bool enable)
2837:../drivers/fsl_flash.c **** {
2838:../drivers/fsl_flash.c ****     uint8_t setValue;
2839:../drivers/fsl_flash.c ****     if (enable)
2840:../drivers/fsl_flash.c ****     {
2841:../drivers/fsl_flash.c ****         setValue = 0x0U;
2842:../drivers/fsl_flash.c ****     }
2843:../drivers/fsl_flash.c ****     else
2844:../drivers/fsl_flash.c ****     {
2845:../drivers/fsl_flash.c ****         setValue = 0x3U;
2846:../drivers/fsl_flash.c ****     }
2847:../drivers/fsl_flash.c **** 
2848:../drivers/fsl_flash.c **** /* The OCMDR[0] is always used to prefetch main Pflash*/
2849:../drivers/fsl_flash.c **** /* For device with FlexNVM support, the OCMDR[1] is used to prefetch Dflash.
2850:../drivers/fsl_flash.c ****  * For device with secondary flash support, the OCMDR[1] is used to prefetch secondary Pflash. */
2851:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2852:../drivers/fsl_flash.c ****     switch (flashIndex)
2853:../drivers/fsl_flash.c ****     {
2854:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED || FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2855:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexSecondaryFlash:
2856:../drivers/fsl_flash.c ****             callFlashCommonBitOperation((FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR1_REG, MSCM_SPECULATION_
2857:../drivers/fsl_flash.c ****                                         MSCM_SPECULATION_DISABLE_SHIFT, setValue);
2858:../drivers/fsl_flash.c ****             break;
2859:../drivers/fsl_flash.c **** #endif
2860:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexPrimaryFlash:
2861:../drivers/fsl_flash.c ****         default:
2862:../drivers/fsl_flash.c ****             callFlashCommonBitOperation((FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR0_REG, MSCM_SPECULATION_
2863:../drivers/fsl_flash.c ****                                         MSCM_SPECULATION_DISABLE_SHIFT, setValue);
2864:../drivers/fsl_flash.c ****             break;
2865:../drivers/fsl_flash.c ****     }
2866:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2867:../drivers/fsl_flash.c ****     switch (flashIndex)
2868:../drivers/fsl_flash.c ****     {
2869:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED || FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2870:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexSecondaryFlash:
2871:../drivers/fsl_flash.c ****             MSCM_OCMDR1_REG = (MSCM_OCMDR1_REG & (~MSCM_SPECULATION_DISABLE_MASK)) | MSCM_SPECULATI
2872:../drivers/fsl_flash.c ****             /* Each cahce clear instaruction should be followed by below code*/
2873:../drivers/fsl_flash.c ****             __ISB();
2874:../drivers/fsl_flash.c ****             __DSB();
2875:../drivers/fsl_flash.c ****             break;
2876:../drivers/fsl_flash.c **** #endif
2877:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexPrimaryFlash:
2878:../drivers/fsl_flash.c ****         default:
2879:../drivers/fsl_flash.c ****             MSCM_OCMDR0_REG = (MSCM_OCMDR0_REG & (~MSCM_SPECULATION_DISABLE_MASK)) | MSCM_SPECULATI
2880:../drivers/fsl_flash.c ****             /* Memory barriers for good measure.
2881:../drivers/fsl_flash.c ****              * All Cache, Branch predictor and TLB maintenance operations before this instruction c
2882:../drivers/fsl_flash.c ****             __ISB();
2883:../drivers/fsl_flash.c ****             __DSB();
2884:../drivers/fsl_flash.c ****             break;
2885:../drivers/fsl_flash.c ****     }
2886:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2887:../drivers/fsl_flash.c **** }
2888:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM */
2889:../drivers/fsl_flash.c **** 
2890:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2891:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by FMC.*/
2892:../drivers/fsl_flash.c **** void fmc_flash_prefetch_speculation_clear(void)
2893:../drivers/fsl_flash.c **** {
2894:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2895:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase = (FTFx_REG32_ACCESS_TYPE)0;
2896:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2897:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2898:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_S_INV_MASK, FMC_PFB01CR_S_INV_SHIFT, 1U);
2899:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2900:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2901:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_S_B_INV_MASK, FMC_PFB01CR_S_B_INV_SHIFT, 1U);
2902:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2903:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2904:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_S_INV_MASK, FMC_PFB0CR_S_INV_SHIFT, 1U);
2905:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2906:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2907:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_S_B_INV_MASK, FMC_PFB0CR_S_B_INV_SHIFT, 1U);
2908:../drivers/fsl_flash.c **** #endif
2909:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2910:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2911:../drivers/fsl_flash.c ****     FMC->PFB01CR |= FMC_PFB01CR_S_INV_MASK;
2912:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2913:../drivers/fsl_flash.c ****     FMC->PFB01CR |= FMC_PFB01CR_S_B_INV_MASK;
2914:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2915:../drivers/fsl_flash.c ****     FMC->PFB0CR |= FMC_PFB0CR_S_INV_MASK;
2916:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2917:../drivers/fsl_flash.c ****     FMC->PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
2918:../drivers/fsl_flash.c **** #endif
2919:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2920:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2921:../drivers/fsl_flash.c ****     __ISB();
2922:../drivers/fsl_flash.c ****     __DSB();
2923:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2924:../drivers/fsl_flash.c **** }
2925:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
2926:../drivers/fsl_flash.c **** 
2927:../drivers/fsl_flash.c **** /*!
2928:../drivers/fsl_flash.c ****  * @brief Flash Cache Clear
2929:../drivers/fsl_flash.c ****  *
2930:../drivers/fsl_flash.c ****  * This function is used to perform the cache and prefetch speculation clear to the flash.
2931:../drivers/fsl_flash.c ****  */
2932:../drivers/fsl_flash.c **** void flash_cache_clear(flash_config_t *config)
2933:../drivers/fsl_flash.c **** {
2934:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPost);
2935:../drivers/fsl_flash.c **** }
2936:../drivers/fsl_flash.c **** 
2937:../drivers/fsl_flash.c **** /*!
2938:../drivers/fsl_flash.c ****  * @brief Flash Cache Clear Process
2939:../drivers/fsl_flash.c ****  *
2940:../drivers/fsl_flash.c ****  * This function is used to perform the cache and prefetch speculation clear process to the flash.
2941:../drivers/fsl_flash.c ****  */
2942:../drivers/fsl_flash.c **** static void flash_cache_clear_process(flash_config_t *config, flash_cache_clear_process_t process)
2943:../drivers/fsl_flash.c **** {
2944:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2945:../drivers/fsl_flash.c ****     status_t returnCode = flash_check_execute_in_ram_function_info(config);
2946:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
2947:../drivers/fsl_flash.c ****     {
2948:../drivers/fsl_flash.c ****         return;
2949:../drivers/fsl_flash.c ****     }
2950:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2951:../drivers/fsl_flash.c **** 
2952:../drivers/fsl_flash.c ****     /* We pass the ftfx register address as a parameter to flash_common_bit_operation() instead of 
2953:../drivers/fsl_flash.c ****      * pre-processed MACROs or a global variable in flash_common_bit_operation()
2954:../drivers/fsl_flash.c ****      * to make sure that flash_common_bit_operation() will be compiled into position-independent co
2955:../drivers/fsl_flash.c ****     if (process == kFLASH_CacheClearProcessPost)
2956:../drivers/fsl_flash.c ****     {
2957:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
2958:../drivers/fsl_flash.c ****         mcm_flash_cache_clear();
2959:../drivers/fsl_flash.c **** #endif
2960:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
2961:../drivers/fsl_flash.c ****         fmc_flash_cache_clear();
2962:../drivers/fsl_flash.c **** #endif
2963:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2964:../drivers/fsl_flash.c ****         mscm_flash_prefetch_speculation_enable(config->FlashMemoryIndex, true);
2965:../drivers/fsl_flash.c **** #endif
2966:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2967:../drivers/fsl_flash.c ****         fmc_flash_prefetch_speculation_clear();
2968:../drivers/fsl_flash.c **** #endif
2969:../drivers/fsl_flash.c ****     }
2970:../drivers/fsl_flash.c ****     if (process == kFLASH_CacheClearProcessPre)
2971:../drivers/fsl_flash.c ****     {
2972:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2973:../drivers/fsl_flash.c ****         mscm_flash_prefetch_speculation_enable(config->FlashMemoryIndex, false);
2974:../drivers/fsl_flash.c **** #endif
2975:../drivers/fsl_flash.c ****     }
2976:../drivers/fsl_flash.c **** }
2977:../drivers/fsl_flash.c **** 
2978:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2979:../drivers/fsl_flash.c **** /*! @brief Check whether flash execute-in-ram functions are ready  */
2980:../drivers/fsl_flash.c **** static status_t flash_check_execute_in_ram_function_info(flash_config_t *config)
2981:../drivers/fsl_flash.c **** {
  25              		.loc 1 2981 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2982:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
2983:../drivers/fsl_flash.c **** 
2984:../drivers/fsl_flash.c ****     if (config == NULL)
  31              		.loc 1 2984 0
  32 0000 0028     		cmp	r0, #0
  33 0002 09D0     		beq	.L3
2985:../drivers/fsl_flash.c ****     {
2986:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2987:../drivers/fsl_flash.c ****     }
2988:../drivers/fsl_flash.c **** 
2989:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo = (flash_execute_in_ram_function_config_t *)config->flashExecuteI
  34              		.loc 1 2989 0
  35 0004 C369     		ldr	r3, [r0, #28]
  36              	.LVL1:
2990:../drivers/fsl_flash.c **** 
2991:../drivers/fsl_flash.c ****     if ((config->flashExecuteInRamFunctionInfo) &&
  37              		.loc 1 2991 0
  38 0006 002B     		cmp	r3, #0
  39 0008 08D0     		beq	.L4
2992:../drivers/fsl_flash.c ****         (kFLASH_ExecuteInRamFunctionTotalNum == flashExecuteInRamFunctionInfo->activeFunctionCount)
  40              		.loc 1 2992 0 discriminator 1
  41 000a 1B68     		ldr	r3, [r3]
  42              	.LVL2:
2991:../drivers/fsl_flash.c ****         (kFLASH_ExecuteInRamFunctionTotalNum == flashExecuteInRamFunctionInfo->activeFunctionCount)
  43              		.loc 1 2991 0 discriminator 1
  44 000c 022B     		cmp	r3, #2
  45 000e 01D1     		bne	.L6
2993:../drivers/fsl_flash.c ****     {
2994:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
  46              		.loc 1 2994 0
  47 0010 0020     		movs	r0, #0
  48              	.LVL3:
  49              	.L1:
2995:../drivers/fsl_flash.c ****     }
2996:../drivers/fsl_flash.c **** 
2997:../drivers/fsl_flash.c ****     return kStatus_FLASH_ExecuteInRamFunctionNotReady;
2998:../drivers/fsl_flash.c **** }
  50              		.loc 1 2998 0
  51              		@ sp needed
  52 0012 7047     		bx	lr
  53              	.LVL4:
  54              	.L6:
2997:../drivers/fsl_flash.c **** }
  55              		.loc 1 2997 0
  56 0014 6D20     		movs	r0, #109
  57              	.LVL5:
  58 0016 FCE7     		b	.L1
  59              	.LVL6:
  60              	.L3:
2986:../drivers/fsl_flash.c ****     }
  61              		.loc 1 2986 0
  62 0018 0420     		movs	r0, #4
  63              	.LVL7:
  64 001a FAE7     		b	.L1
  65              	.LVL8:
  66              	.L4:
2997:../drivers/fsl_flash.c **** }
  67              		.loc 1 2997 0
  68 001c 6D20     		movs	r0, #109
  69              	.LVL9:
  70 001e F8E7     		b	.L1
  71              		.cfi_endproc
  72              	.LFE83:
  74              		.section	.text.flash_command_sequence,"ax",%progbits
  75              		.align	1
  76              		.syntax unified
  77              		.code	16
  78              		.thumb_func
  79              		.fpu softvfp
  81              	flash_command_sequence:
  82              	.LFB78:
2691:../drivers/fsl_flash.c ****     uint8_t registerValue;
  83              		.loc 1 2691 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              	.LVL10:
  88 0000 70B5     		push	{r4, r5, r6, lr}
  89              		.cfi_def_cfa_offset 16
  90              		.cfi_offset 4, -16
  91              		.cfi_offset 5, -12
  92              		.cfi_offset 6, -8
  93              		.cfi_offset 14, -4
2696:../drivers/fsl_flash.c **** 
  94              		.loc 1 2696 0
  95 0002 0E4B     		ldr	r3, .L12
  96 0004 7022     		movs	r2, #112
  97 0006 1A70     		strb	r2, [r3]
2698:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
  98              		.loc 1 2698 0
  99 0008 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
 100              	.LVL11:
 101 000c 041E     		subs	r4, r0, #0
 102              	.LVL12:
2699:../drivers/fsl_flash.c ****     {
 103              		.loc 1 2699 0
 104 000e 0CD1     		bne	.L7
2707:../drivers/fsl_flash.c **** #else
 105              		.loc 1 2707 0
 106 0010 0A4D     		ldr	r5, .L12
 107 0012 0B4B     		ldr	r3, .L12+4
 108 0014 1B68     		ldr	r3, [r3]
 109 0016 2800     		movs	r0, r5
 110              	.LVL13:
 111 0018 9847     		blx	r3
 112              	.LVL14:
2724:../drivers/fsl_flash.c **** 
 113              		.loc 1 2724 0
 114 001a 2B78     		ldrb	r3, [r5]
 115 001c DBB2     		uxtb	r3, r3
 116              	.LVL15:
2727:../drivers/fsl_flash.c ****     {
 117              		.loc 1 2727 0
 118 001e 9A06     		lsls	r2, r3, #26
 119 0020 07D4     		bmi	.L9
2732:../drivers/fsl_flash.c ****     {
 120              		.loc 1 2732 0
 121 0022 DA06     		lsls	r2, r3, #27
 122 0024 07D4     		bmi	.L10
2737:../drivers/fsl_flash.c ****     {
 123              		.loc 1 2737 0
 124 0026 DB07     		lsls	r3, r3, #31
 125 0028 01D4     		bmi	.L11
 126              	.LVL16:
 127              	.L7:
2745:../drivers/fsl_flash.c **** 
 128              		.loc 1 2745 0
 129 002a 2000     		movs	r0, r4
 130              		@ sp needed
 131 002c 70BD     		pop	{r4, r5, r6, pc}
 132              	.LVL17:
 133              	.L11:
2739:../drivers/fsl_flash.c ****     }
 134              		.loc 1 2739 0
 135 002e 6934     		adds	r4, r4, #105
 136              	.LVL18:
 137 0030 FBE7     		b	.L7
 138              	.LVL19:
 139              	.L9:
2729:../drivers/fsl_flash.c ****     }
 140              		.loc 1 2729 0
 141 0032 6724     		movs	r4, #103
 142              	.LVL20:
 143 0034 F9E7     		b	.L7
 144              	.LVL21:
 145              	.L10:
2734:../drivers/fsl_flash.c ****     }
 146              		.loc 1 2734 0
 147 0036 6824     		movs	r4, #104
 148              	.LVL22:
 149 0038 F7E7     		b	.L7
 150              	.L13:
 151 003a C046     		.align	2
 152              	.L12:
 153 003c 00000240 		.word	1073872896
 154 0040 00000000 		.word	.LANCHOR0
 155              		.cfi_endproc
 156              	.LFE78:
 158              		.section	.text.flash_check_range,"ax",%progbits
 159              		.align	1
 160              		.syntax unified
 161              		.code	16
 162              		.thumb_func
 163              		.fpu softvfp
 165              	flash_check_range:
 166              	.LFB84:
2999:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
3000:../drivers/fsl_flash.c **** 
3001:../drivers/fsl_flash.c **** /*! @brief Validates the range and alignment of the given address range.*/
3002:../drivers/fsl_flash.c **** static status_t flash_check_range(flash_config_t *config,
3003:../drivers/fsl_flash.c ****                                   uint32_t startAddress,
3004:../drivers/fsl_flash.c ****                                   uint32_t lengthInBytes,
3005:../drivers/fsl_flash.c ****                                   uint32_t alignmentBaseline)
3006:../drivers/fsl_flash.c **** {
 167              		.loc 1 3006 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172              	.LVL23:
3007:../drivers/fsl_flash.c ****     if (config == NULL)
 173              		.loc 1 3007 0
 174 0000 0028     		cmp	r0, #0
 175 0002 10D0     		beq	.L16
3008:../drivers/fsl_flash.c ****     {
3009:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3010:../drivers/fsl_flash.c ****     }
3011:../drivers/fsl_flash.c **** 
3012:../drivers/fsl_flash.c ****     /* Verify the start and length are alignmentBaseline aligned. */
3013:../drivers/fsl_flash.c ****     if ((startAddress & (alignmentBaseline - 1)) || (lengthInBytes & (alignmentBaseline - 1)))
 176              		.loc 1 3013 0
 177 0004 013B     		subs	r3, r3, #1
 178              	.LVL24:
 179 0006 1942     		tst	r1, r3
 180 0008 0FD1     		bne	.L17
 181              		.loc 1 3013 0 is_stmt 0 discriminator 1
 182 000a 1A42     		tst	r2, r3
 183 000c 0FD1     		bne	.L18
3014:../drivers/fsl_flash.c ****     {
3015:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
3016:../drivers/fsl_flash.c ****     }
3017:../drivers/fsl_flash.c **** 
3018:../drivers/fsl_flash.c ****     /* check for valid range of the target addresses */
3019:../drivers/fsl_flash.c ****     if (
3020:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3021:../drivers/fsl_flash.c ****         ((startAddress >= config->DFlashBlockBase) &&
3022:../drivers/fsl_flash.c ****          ((startAddress + lengthInBytes) <= (config->DFlashBlockBase + config->DFlashTotalSize))) |
3023:../drivers/fsl_flash.c **** #endif
3024:../drivers/fsl_flash.c ****         ((startAddress >= config->PFlashBlockBase) &&
 184              		.loc 1 3024 0 is_stmt 1
 185 000e 0368     		ldr	r3, [r0]
 186              	.LVL25:
3019:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 187              		.loc 1 3019 0
 188 0010 8B42     		cmp	r3, r1
 189 0012 0ED8     		bhi	.L19
3025:../drivers/fsl_flash.c ****          ((startAddress + lengthInBytes) <= (config->PFlashBlockBase + config->PFlashTotalSize))))
 190              		.loc 1 3025 0
 191 0014 8918     		adds	r1, r1, r2
 192              	.LVL26:
 193 0016 4268     		ldr	r2, [r0, #4]
 194              	.LVL27:
 195 0018 9B18     		adds	r3, r3, r2
3024:../drivers/fsl_flash.c ****          ((startAddress + lengthInBytes) <= (config->PFlashBlockBase + config->PFlashTotalSize))))
 196              		.loc 1 3024 0
 197 001a 9942     		cmp	r1, r3
 198 001c 01D8     		bhi	.L21
3026:../drivers/fsl_flash.c ****     {
3027:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
 199              		.loc 1 3027 0
 200 001e 0020     		movs	r0, #0
 201              	.LVL28:
 202 0020 04E0     		b	.L14
 203              	.LVL29:
 204              	.L21:
3028:../drivers/fsl_flash.c ****     }
3029:../drivers/fsl_flash.c **** 
3030:../drivers/fsl_flash.c ****     return kStatus_FLASH_AddressError;
 205              		.loc 1 3030 0
 206 0022 6620     		movs	r0, #102
 207              	.LVL30:
 208 0024 02E0     		b	.L14
 209              	.LVL31:
 210              	.L16:
3009:../drivers/fsl_flash.c ****     }
 211              		.loc 1 3009 0
 212 0026 0420     		movs	r0, #4
 213              	.LVL32:
 214 0028 00E0     		b	.L14
 215              	.LVL33:
 216              	.L17:
3015:../drivers/fsl_flash.c ****     }
 217              		.loc 1 3015 0
 218 002a 6520     		movs	r0, #101
 219              	.LVL34:
 220              	.L14:
3031:../drivers/fsl_flash.c **** }
 221              		.loc 1 3031 0
 222              		@ sp needed
 223 002c 7047     		bx	lr
 224              	.LVL35:
 225              	.L18:
3015:../drivers/fsl_flash.c ****     }
 226              		.loc 1 3015 0
 227 002e 6520     		movs	r0, #101
 228              	.LVL36:
 229 0030 FCE7     		b	.L14
 230              	.LVL37:
 231              	.L19:
3030:../drivers/fsl_flash.c **** }
 232              		.loc 1 3030 0
 233 0032 6620     		movs	r0, #102
 234              	.LVL38:
 235 0034 FAE7     		b	.L14
 236              		.cfi_endproc
 237              	.LFE84:
 239              		.section	.text.flash_check_user_key,"ax",%progbits
 240              		.align	1
 241              		.syntax unified
 242              		.code	16
 243              		.thumb_func
 244              		.fpu softvfp
 246              	flash_check_user_key:
 247              	.LFB86:
3032:../drivers/fsl_flash.c **** 
3033:../drivers/fsl_flash.c **** /*! @brief Gets the right address, sector and block size of current flash type which is indicated b
3034:../drivers/fsl_flash.c **** static status_t flash_get_matched_operation_info(flash_config_t *config,
3035:../drivers/fsl_flash.c ****                                                  uint32_t address,
3036:../drivers/fsl_flash.c ****                                                  flash_operation_config_t *info)
3037:../drivers/fsl_flash.c **** {
3038:../drivers/fsl_flash.c ****     if ((config == NULL) || (info == NULL))
3039:../drivers/fsl_flash.c ****     {
3040:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3041:../drivers/fsl_flash.c ****     }
3042:../drivers/fsl_flash.c **** 
3043:../drivers/fsl_flash.c ****     /* Clean up info Structure*/
3044:../drivers/fsl_flash.c ****     memset(info, 0, sizeof(flash_operation_config_t));
3045:../drivers/fsl_flash.c **** 
3046:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3047:../drivers/fsl_flash.c ****     if ((address >= config->DFlashBlockBase) && (address <= (config->DFlashBlockBase + config->DFla
3048:../drivers/fsl_flash.c ****     {
3049:../drivers/fsl_flash.c ****         /* When required by the command, address bit 23 selects between program flash memory
3050:../drivers/fsl_flash.c ****          * (=0) and data flash memory (=1).*/
3051:../drivers/fsl_flash.c ****         info->convertedAddress = address - config->DFlashBlockBase + 0x800000U;
3052:../drivers/fsl_flash.c ****         info->activeSectorSize = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SECTOR_SIZE;
3053:../drivers/fsl_flash.c ****         info->activeBlockSize = config->DFlashTotalSize / FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_COUNT;
3054:../drivers/fsl_flash.c **** 
3055:../drivers/fsl_flash.c ****         info->blockWriteUnitSize = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_WRITE_UNIT_SIZE;
3056:../drivers/fsl_flash.c ****         info->sectorCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_SECTOR_CMD_ADDRESS_ALIGMENT;
3057:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_SECTION_CMD_ADDRESS_ALIGMENT;
3058:../drivers/fsl_flash.c ****         info->resourceCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_RESOURCE_CMD_ADDRESS_ALIGMENT
3059:../drivers/fsl_flash.c ****         info->checkCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_CHECK_CMD_ADDRESS_ALIGMENT;
3060:../drivers/fsl_flash.c ****     }
3061:../drivers/fsl_flash.c ****     else
3062:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
3063:../drivers/fsl_flash.c ****     {
3064:../drivers/fsl_flash.c ****         info->convertedAddress = address - config->PFlashBlockBase;
3065:../drivers/fsl_flash.c ****         info->activeSectorSize = config->PFlashSectorSize;
3066:../drivers/fsl_flash.c ****         info->activeBlockSize = config->PFlashTotalSize / config->PFlashBlockCount;
3067:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
3068:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
3069:../drivers/fsl_flash.c ****         {
3070:../drivers/fsl_flash.c **** #if FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER || FLASH_SSD_SECONDARY_FLASH_HAS_ITS_
3071:../drivers/fsl_flash.c ****             /* When required by the command, address bit 23 selects between main flash memory
3072:../drivers/fsl_flash.c ****              * (=0) and secondary flash memory (=1).*/
3073:../drivers/fsl_flash.c ****             info->convertedAddress += 0x800000U;
3074:../drivers/fsl_flash.c **** #endif
3075:../drivers/fsl_flash.c ****             info->blockWriteUnitSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE;
3076:../drivers/fsl_flash.c ****         }
3077:../drivers/fsl_flash.c ****         else
3078:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
3079:../drivers/fsl_flash.c ****         {
3080:../drivers/fsl_flash.c ****             info->blockWriteUnitSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE;
3081:../drivers/fsl_flash.c ****         }
3082:../drivers/fsl_flash.c **** 
3083:../drivers/fsl_flash.c ****         info->sectorCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT;
3084:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTION_CMD_ADDRESS_ALIGMENT;
3085:../drivers/fsl_flash.c ****         info->resourceCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_RESOURCE_CMD_ADDRESS_ALIGMENT;
3086:../drivers/fsl_flash.c ****         info->checkCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_CHECK_CMD_ADDRESS_ALIGMENT;
3087:../drivers/fsl_flash.c ****     }
3088:../drivers/fsl_flash.c **** 
3089:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3090:../drivers/fsl_flash.c **** }
3091:../drivers/fsl_flash.c **** 
3092:../drivers/fsl_flash.c **** /*! @brief Validates the given user key for flash erase APIs.*/
3093:../drivers/fsl_flash.c **** static status_t flash_check_user_key(uint32_t key)
3094:../drivers/fsl_flash.c **** {
 248              		.loc 1 3094 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253              	.LVL39:
3095:../drivers/fsl_flash.c ****     /* Validate the user key */
3096:../drivers/fsl_flash.c ****     if (key != kFLASH_ApiEraseKey)
 254              		.loc 1 3096 0
 255 0000 034B     		ldr	r3, .L26
 256 0002 9842     		cmp	r0, r3
 257 0004 01D1     		bne	.L25
3097:../drivers/fsl_flash.c ****     {
3098:../drivers/fsl_flash.c ****         return kStatus_FLASH_EraseKeyError;
3099:../drivers/fsl_flash.c ****     }
3100:../drivers/fsl_flash.c **** 
3101:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 258              		.loc 1 3101 0
 259 0006 0020     		movs	r0, #0
 260              	.LVL40:
 261              	.L22:
3102:../drivers/fsl_flash.c **** }
 262              		.loc 1 3102 0
 263              		@ sp needed
 264 0008 7047     		bx	lr
 265              	.LVL41:
 266              	.L25:
3098:../drivers/fsl_flash.c ****     }
 267              		.loc 1 3098 0
 268 000a 6B20     		movs	r0, #107
 269              	.LVL42:
 270 000c FCE7     		b	.L22
 271              	.L27:
 272 000e C046     		.align	2
 273              	.L26:
 274 0010 6B66656B 		.word	1801807467
 275              		.cfi_endproc
 276              	.LFE86:
 278              		.section	.text.flash_check_resource_range,"ax",%progbits
 279              		.align	1
 280              		.syntax unified
 281              		.code	16
 282              		.thumb_func
 283              		.fpu softvfp
 285              	flash_check_resource_range:
 286              	.LFB87:
3103:../drivers/fsl_flash.c **** 
3104:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3105:../drivers/fsl_flash.c **** /*! @brief Updates FlexNVM memory partition status according to data flash 0 IFR.*/
3106:../drivers/fsl_flash.c **** static status_t flash_update_flexnvm_memory_partition_status(flash_config_t *config)
3107:../drivers/fsl_flash.c **** {
3108:../drivers/fsl_flash.c ****     struct
3109:../drivers/fsl_flash.c ****     {
3110:../drivers/fsl_flash.c ****         uint32_t reserved0;
3111:../drivers/fsl_flash.c ****         uint8_t FlexNVMPartitionCode;
3112:../drivers/fsl_flash.c ****         uint8_t EEPROMDataSetSize;
3113:../drivers/fsl_flash.c ****         uint16_t reserved1;
3114:../drivers/fsl_flash.c ****     } dataIFRReadOut;
3115:../drivers/fsl_flash.c ****     status_t returnCode;
3116:../drivers/fsl_flash.c **** 
3117:../drivers/fsl_flash.c ****     if (config == NULL)
3118:../drivers/fsl_flash.c ****     {
3119:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3120:../drivers/fsl_flash.c ****     }
3121:../drivers/fsl_flash.c **** 
3122:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3123:../drivers/fsl_flash.c ****     /* Get FlexNVM memory partition info from data flash IFR */
3124:../drivers/fsl_flash.c ****     returnCode = FLASH_ReadResource(config, DFLASH_IFR_READRESOURCE_START_ADDRESS, (uint32_t *)&dat
3125:../drivers/fsl_flash.c ****                                     sizeof(dataIFRReadOut), kFLASH_ResourceOptionFlashIfr);
3126:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
3127:../drivers/fsl_flash.c ****     {
3128:../drivers/fsl_flash.c ****         return kStatus_FLASH_PartitionStatusUpdateFailure;
3129:../drivers/fsl_flash.c ****     }
3130:../drivers/fsl_flash.c **** #else
3131:../drivers/fsl_flash.c **** #error "Cannot get FlexNVM memory partition info"
3132:../drivers/fsl_flash.c **** #endif
3133:../drivers/fsl_flash.c **** 
3134:../drivers/fsl_flash.c ****     /* Fill out partitioned EEPROM size */
3135:../drivers/fsl_flash.c ****     dataIFRReadOut.EEPROMDataSetSize &= 0x0FU;
3136:../drivers/fsl_flash.c ****     switch (dataIFRReadOut.EEPROMDataSetSize)
3137:../drivers/fsl_flash.c ****     {
3138:../drivers/fsl_flash.c ****         case 0x00U:
3139:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0000;
3140:../drivers/fsl_flash.c ****             break;
3141:../drivers/fsl_flash.c ****         case 0x01U:
3142:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0001;
3143:../drivers/fsl_flash.c ****             break;
3144:../drivers/fsl_flash.c ****         case 0x02U:
3145:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0010;
3146:../drivers/fsl_flash.c ****             break;
3147:../drivers/fsl_flash.c ****         case 0x03U:
3148:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0011;
3149:../drivers/fsl_flash.c ****             break;
3150:../drivers/fsl_flash.c ****         case 0x04U:
3151:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0100;
3152:../drivers/fsl_flash.c ****             break;
3153:../drivers/fsl_flash.c ****         case 0x05U:
3154:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0101;
3155:../drivers/fsl_flash.c ****             break;
3156:../drivers/fsl_flash.c ****         case 0x06U:
3157:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0110;
3158:../drivers/fsl_flash.c ****             break;
3159:../drivers/fsl_flash.c ****         case 0x07U:
3160:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0111;
3161:../drivers/fsl_flash.c ****             break;
3162:../drivers/fsl_flash.c ****         case 0x08U:
3163:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1000;
3164:../drivers/fsl_flash.c ****             break;
3165:../drivers/fsl_flash.c ****         case 0x09U:
3166:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1001;
3167:../drivers/fsl_flash.c ****             break;
3168:../drivers/fsl_flash.c ****         case 0x0AU:
3169:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1010;
3170:../drivers/fsl_flash.c ****             break;
3171:../drivers/fsl_flash.c ****         case 0x0BU:
3172:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1011;
3173:../drivers/fsl_flash.c ****             break;
3174:../drivers/fsl_flash.c ****         case 0x0CU:
3175:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1100;
3176:../drivers/fsl_flash.c ****             break;
3177:../drivers/fsl_flash.c ****         case 0x0DU:
3178:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1101;
3179:../drivers/fsl_flash.c ****             break;
3180:../drivers/fsl_flash.c ****         case 0x0EU:
3181:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1110;
3182:../drivers/fsl_flash.c ****             break;
3183:../drivers/fsl_flash.c ****         case 0x0FU:
3184:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1111;
3185:../drivers/fsl_flash.c ****             break;
3186:../drivers/fsl_flash.c ****         default:
3187:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED;
3188:../drivers/fsl_flash.c ****             break;
3189:../drivers/fsl_flash.c ****     }
3190:../drivers/fsl_flash.c **** 
3191:../drivers/fsl_flash.c ****     /* Fill out partitioned DFlash size */
3192:../drivers/fsl_flash.c ****     dataIFRReadOut.FlexNVMPartitionCode &= 0x0FU;
3193:../drivers/fsl_flash.c ****     switch (dataIFRReadOut.FlexNVMPartitionCode)
3194:../drivers/fsl_flash.c ****     {
3195:../drivers/fsl_flash.c ****         case 0x00U:
3196:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000 != 0xFFFFFFFF)
3197:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000;
3198:../drivers/fsl_flash.c **** #else
3199:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3200:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000 */
3201:../drivers/fsl_flash.c ****             break;
3202:../drivers/fsl_flash.c ****         case 0x01U:
3203:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001 != 0xFFFFFFFF)
3204:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001;
3205:../drivers/fsl_flash.c **** #else
3206:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3207:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001 */
3208:../drivers/fsl_flash.c ****             break;
3209:../drivers/fsl_flash.c ****         case 0x02U:
3210:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010 != 0xFFFFFFFF)
3211:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010;
3212:../drivers/fsl_flash.c **** #else
3213:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3214:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010 */
3215:../drivers/fsl_flash.c ****             break;
3216:../drivers/fsl_flash.c ****         case 0x03U:
3217:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011 != 0xFFFFFFFF)
3218:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011;
3219:../drivers/fsl_flash.c **** #else
3220:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3221:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011 */
3222:../drivers/fsl_flash.c ****             break;
3223:../drivers/fsl_flash.c ****         case 0x04U:
3224:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100 != 0xFFFFFFFF)
3225:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100;
3226:../drivers/fsl_flash.c **** #else
3227:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3228:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100 */
3229:../drivers/fsl_flash.c ****             break;
3230:../drivers/fsl_flash.c ****         case 0x05U:
3231:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101 != 0xFFFFFFFF)
3232:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101;
3233:../drivers/fsl_flash.c **** #else
3234:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3235:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101 */
3236:../drivers/fsl_flash.c ****             break;
3237:../drivers/fsl_flash.c ****         case 0x06U:
3238:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110 != 0xFFFFFFFF)
3239:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110;
3240:../drivers/fsl_flash.c **** #else
3241:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3242:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110 */
3243:../drivers/fsl_flash.c ****             break;
3244:../drivers/fsl_flash.c ****         case 0x07U:
3245:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111 != 0xFFFFFFFF)
3246:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111;
3247:../drivers/fsl_flash.c **** #else
3248:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3249:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111 */
3250:../drivers/fsl_flash.c ****             break;
3251:../drivers/fsl_flash.c ****         case 0x08U:
3252:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000 != 0xFFFFFFFF)
3253:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000;
3254:../drivers/fsl_flash.c **** #else
3255:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3256:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000 */
3257:../drivers/fsl_flash.c ****             break;
3258:../drivers/fsl_flash.c ****         case 0x09U:
3259:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001 != 0xFFFFFFFF)
3260:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001;
3261:../drivers/fsl_flash.c **** #else
3262:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3263:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001 */
3264:../drivers/fsl_flash.c ****             break;
3265:../drivers/fsl_flash.c ****         case 0x0AU:
3266:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010 != 0xFFFFFFFF)
3267:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010;
3268:../drivers/fsl_flash.c **** #else
3269:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3270:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010 */
3271:../drivers/fsl_flash.c ****             break;
3272:../drivers/fsl_flash.c ****         case 0x0BU:
3273:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011 != 0xFFFFFFFF)
3274:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011;
3275:../drivers/fsl_flash.c **** #else
3276:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3277:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011 */
3278:../drivers/fsl_flash.c ****             break;
3279:../drivers/fsl_flash.c ****         case 0x0CU:
3280:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100 != 0xFFFFFFFF)
3281:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100;
3282:../drivers/fsl_flash.c **** #else
3283:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3284:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100 */
3285:../drivers/fsl_flash.c ****             break;
3286:../drivers/fsl_flash.c ****         case 0x0DU:
3287:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101 != 0xFFFFFFFF)
3288:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101;
3289:../drivers/fsl_flash.c **** #else
3290:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3291:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101 */
3292:../drivers/fsl_flash.c ****             break;
3293:../drivers/fsl_flash.c ****         case 0x0EU:
3294:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110 != 0xFFFFFFFF)
3295:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110;
3296:../drivers/fsl_flash.c **** #else
3297:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3298:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110 */
3299:../drivers/fsl_flash.c ****             break;
3300:../drivers/fsl_flash.c ****         case 0x0FU:
3301:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111 != 0xFFFFFFFF)
3302:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111;
3303:../drivers/fsl_flash.c **** #else
3304:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3305:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111 */
3306:../drivers/fsl_flash.c ****             break;
3307:../drivers/fsl_flash.c ****         default:
3308:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3309:../drivers/fsl_flash.c ****             break;
3310:../drivers/fsl_flash.c ****     }
3311:../drivers/fsl_flash.c **** 
3312:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3313:../drivers/fsl_flash.c **** }
3314:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
3315:../drivers/fsl_flash.c **** 
3316:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3317:../drivers/fsl_flash.c **** /*! @brief Validates the range of the given resource address.*/
3318:../drivers/fsl_flash.c **** static status_t flash_check_resource_range(uint32_t start,
3319:../drivers/fsl_flash.c ****                                            uint32_t lengthInBytes,
3320:../drivers/fsl_flash.c ****                                            uint32_t alignmentBaseline,
3321:../drivers/fsl_flash.c ****                                            flash_read_resource_option_t option)
3322:../drivers/fsl_flash.c **** {
 287              		.loc 1 3322 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292              	.LVL43:
3323:../drivers/fsl_flash.c ****     status_t status;
3324:../drivers/fsl_flash.c ****     uint32_t maxReadbleAddress;
3325:../drivers/fsl_flash.c **** 
3326:../drivers/fsl_flash.c ****     if ((start & (alignmentBaseline - 1)) || (lengthInBytes & (alignmentBaseline - 1)))
 293              		.loc 1 3326 0
 294 0000 013A     		subs	r2, r2, #1
 295              	.LVL44:
 296 0002 1042     		tst	r0, r2
 297 0004 19D1     		bne	.L31
 298              		.loc 1 3326 0 is_stmt 0 discriminator 1
 299 0006 1142     		tst	r1, r2
 300 0008 19D1     		bne	.L32
 301              	.LVL45:
3327:../drivers/fsl_flash.c ****     {
3328:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
3329:../drivers/fsl_flash.c ****     }
3330:../drivers/fsl_flash.c **** 
3331:../drivers/fsl_flash.c ****     status = kStatus_FLASH_Success;
3332:../drivers/fsl_flash.c **** 
3333:../drivers/fsl_flash.c ****     maxReadbleAddress = start + lengthInBytes - 1;
 302              		.loc 1 3333 0 is_stmt 1
 303 000a 4118     		adds	r1, r0, r1
 304              	.LVL46:
 305 000c 4A1E     		subs	r2, r1, #1
 306              	.LVL47:
3334:../drivers/fsl_flash.c ****     if (option == kFLASH_ResourceOptionVersionId)
 307              		.loc 1 3334 0
 308 000e 012B     		cmp	r3, #1
 309 0010 0BD0     		beq	.L39
3335:../drivers/fsl_flash.c ****     {
3336:../drivers/fsl_flash.c ****         if ((start != kFLASH_ResourceRangeVersionIdStart) ||
3337:../drivers/fsl_flash.c ****             ((start + lengthInBytes - 1) != kFLASH_ResourceRangeVersionIdEnd))
3338:../drivers/fsl_flash.c ****         {
3339:../drivers/fsl_flash.c ****             status = kStatus_FLASH_InvalidArgument;
3340:../drivers/fsl_flash.c ****         }
3341:../drivers/fsl_flash.c ****     }
3342:../drivers/fsl_flash.c ****     else if (option == kFLASH_ResourceOptionFlashIfr)
 310              		.loc 1 3342 0
 311 0012 002B     		cmp	r3, #0
 312 0014 17D1     		bne	.L35
3343:../drivers/fsl_flash.c ****     {
3344:../drivers/fsl_flash.c ****         if (maxReadbleAddress < kFLASH_ResourceRangePflashIfrSizeInBytes)
 313              		.loc 1 3344 0
 314 0016 FF2A     		cmp	r2, #255
 315 0018 17D9     		bls	.L36
3345:../drivers/fsl_flash.c ****         {
3346:../drivers/fsl_flash.c ****         }
3347:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
3348:../drivers/fsl_flash.c ****         else if ((start >= kFLASH_ResourceRangePflashSwapIfrStart) &&
3349:../drivers/fsl_flash.c ****                  (maxReadbleAddress <= kFLASH_ResourceRangePflashSwapIfrEnd))
3350:../drivers/fsl_flash.c ****         {
3351:../drivers/fsl_flash.c ****         }
3352:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
3353:../drivers/fsl_flash.c ****         else if ((start >= kFLASH_ResourceRangeDflashIfrStart) &&
 316              		.loc 1 3353 0
 317 001a 0E4B     		ldr	r3, .L41
 318              	.LVL48:
 319 001c 9842     		cmp	r0, r3
 320 001e 16D9     		bls	.L37
 321              		.loc 1 3353 0 is_stmt 0 discriminator 1
 322 0020 0D4B     		ldr	r3, .L41+4
 323 0022 9A42     		cmp	r2, r3
 324 0024 07D8     		bhi	.L40
3331:../drivers/fsl_flash.c **** 
 325              		.loc 1 3331 0 is_stmt 1
 326 0026 0020     		movs	r0, #0
 327              	.LVL49:
 328 0028 08E0     		b	.L28
 329              	.LVL50:
 330              	.L39:
3336:../drivers/fsl_flash.c ****             ((start + lengthInBytes - 1) != kFLASH_ResourceRangeVersionIdEnd))
 331              		.loc 1 3336 0
 332 002a 0028     		cmp	r0, #0
 333 002c 09D1     		bne	.L33
3336:../drivers/fsl_flash.c ****             ((start + lengthInBytes - 1) != kFLASH_ResourceRangeVersionIdEnd))
 334              		.loc 1 3336 0 is_stmt 0 discriminator 1
 335 002e 0829     		cmp	r1, #8
 336 0030 04D0     		beq	.L28
3339:../drivers/fsl_flash.c ****         }
 337              		.loc 1 3339 0 is_stmt 1
 338 0032 0420     		movs	r0, #4
 339              	.LVL51:
 340 0034 02E0     		b	.L28
 341              	.LVL52:
 342              	.L40:
3354:../drivers/fsl_flash.c ****                  (maxReadbleAddress <= kFLASH_ResourceRangeDflashIfrEnd))
3355:../drivers/fsl_flash.c ****         {
3356:../drivers/fsl_flash.c ****         }
3357:../drivers/fsl_flash.c ****         else
3358:../drivers/fsl_flash.c ****         {
3359:../drivers/fsl_flash.c ****             status = kStatus_FLASH_InvalidArgument;
 343              		.loc 1 3359 0
 344 0036 0420     		movs	r0, #4
 345              	.LVL53:
 346 0038 00E0     		b	.L28
 347              	.LVL54:
 348              	.L31:
3328:../drivers/fsl_flash.c ****     }
 349              		.loc 1 3328 0
 350 003a 6520     		movs	r0, #101
 351              	.LVL55:
 352              	.L28:
3360:../drivers/fsl_flash.c ****         }
3361:../drivers/fsl_flash.c ****     }
3362:../drivers/fsl_flash.c ****     else
3363:../drivers/fsl_flash.c ****     {
3364:../drivers/fsl_flash.c ****         status = kStatus_FLASH_InvalidArgument;
3365:../drivers/fsl_flash.c ****     }
3366:../drivers/fsl_flash.c **** 
3367:../drivers/fsl_flash.c ****     return status;
3368:../drivers/fsl_flash.c **** }
 353              		.loc 1 3368 0
 354              		@ sp needed
 355 003c 7047     		bx	lr
 356              	.LVL56:
 357              	.L32:
3328:../drivers/fsl_flash.c ****     }
 358              		.loc 1 3328 0
 359 003e 6520     		movs	r0, #101
 360              	.LVL57:
 361 0040 FCE7     		b	.L28
 362              	.LVL58:
 363              	.L33:
3339:../drivers/fsl_flash.c ****         }
 364              		.loc 1 3339 0
 365 0042 0420     		movs	r0, #4
 366              	.LVL59:
 367 0044 FAE7     		b	.L28
 368              	.LVL60:
 369              	.L35:
3364:../drivers/fsl_flash.c ****     }
 370              		.loc 1 3364 0
 371 0046 0420     		movs	r0, #4
 372              	.LVL61:
 373 0048 F8E7     		b	.L28
 374              	.LVL62:
 375              	.L36:
3331:../drivers/fsl_flash.c **** 
 376              		.loc 1 3331 0
 377 004a 0020     		movs	r0, #0
 378              	.LVL63:
 379 004c F6E7     		b	.L28
 380              	.LVL64:
 381              	.L37:
3359:../drivers/fsl_flash.c ****         }
 382              		.loc 1 3359 0
 383 004e 0420     		movs	r0, #4
 384              	.LVL65:
 385 0050 F4E7     		b	.L28
 386              	.L42:
 387 0052 C046     		.align	2
 388              	.L41:
 389 0054 FFFF7F00 		.word	8388607
 390 0058 FF038000 		.word	8389631
 391              		.cfi_endproc
 392              	.LFE87:
 394              		.section	.text.copy_flash_run_command,"ax",%progbits
 395              		.align	1
 396              		.syntax unified
 397              		.code	16
 398              		.thumb_func
 399              		.fpu softvfp
 401              	copy_flash_run_command:
 402              	.LFB77:
2672:../drivers/fsl_flash.c ****     assert(sizeof(s_flashRunCommandFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWords * 4)
 403              		.loc 1 2672 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              	.LVL66:
 408 0000 10B5     		push	{r4, lr}
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 4, -8
 411              		.cfi_offset 14, -4
 412 0002 0400     		movs	r4, r0
2677:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
 413              		.loc 1 2677 0
 414 0004 0C22     		movs	r2, #12
 415 0006 0349     		ldr	r1, .L44
 416 0008 FFF7FEFF 		bl	memcpy
 417              	.LVL67:
2678:../drivers/fsl_flash.c **** }
 418              		.loc 1 2678 0
 419 000c 0134     		adds	r4, r4, #1
 420              	.LVL68:
 421 000e 024B     		ldr	r3, .L44+4
 422 0010 1C60     		str	r4, [r3]
2679:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 423              		.loc 1 2679 0
 424              		@ sp needed
 425              	.LVL69:
 426 0012 10BD     		pop	{r4, pc}
 427              	.L45:
 428              		.align	2
 429              	.L44:
 430 0014 00000000 		.word	.LANCHOR1
 431 0018 00000000 		.word	.LANCHOR0
 432              		.cfi_endproc
 433              	.LFE77:
 435              		.section	.text.copy_flash_common_bit_operation,"ax",%progbits
 436              		.align	1
 437              		.syntax unified
 438              		.code	16
 439              		.thumb_func
 440              		.fpu softvfp
 442              	copy_flash_common_bit_operation:
 443              	.LFB79:
2753:../drivers/fsl_flash.c ****     assert(sizeof(s_flashCommonBitOperationFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWo
 444              		.loc 1 2753 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              	.LVL70:
 449 0000 10B5     		push	{r4, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 4, -8
 452              		.cfi_offset 14, -4
 453 0002 0400     		movs	r4, r0
2758:../drivers/fsl_flash.c ****            sizeof(s_flashCommonBitOperationFunctionCode));
 454              		.loc 1 2758 0
 455 0004 1C22     		movs	r2, #28
 456 0006 0349     		ldr	r1, .L47
 457 0008 FFF7FEFF 		bl	memcpy
 458              	.LVL71:
2761:../drivers/fsl_flash.c **** }
 459              		.loc 1 2761 0
 460 000c 0134     		adds	r4, r4, #1
 461              	.LVL72:
2760:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
 462              		.loc 1 2760 0
 463 000e 024B     		ldr	r3, .L47+4
 464 0010 1C60     		str	r4, [r3]
2762:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT && FLASH_IS_CACHE_INVALIDATION_AVAILABLE */
 465              		.loc 1 2762 0
 466              		@ sp needed
 467              	.LVL73:
 468 0012 10BD     		pop	{r4, pc}
 469              	.L48:
 470              		.align	2
 471              	.L47:
 472 0014 00000000 		.word	.LANCHOR2
 473 0018 00000000 		.word	.LANCHOR3
 474              		.cfi_endproc
 475              	.LFE79:
 477              		.global	__aeabi_uidiv
 478              		.section	.text.flash_get_matched_operation_info,"ax",%progbits
 479              		.align	1
 480              		.syntax unified
 481              		.code	16
 482              		.thumb_func
 483              		.fpu softvfp
 485              	flash_get_matched_operation_info:
 486              	.LFB85:
3037:../drivers/fsl_flash.c ****     if ((config == NULL) || (info == NULL))
 487              		.loc 1 3037 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL74:
 492 0000 70B5     		push	{r4, r5, r6, lr}
 493              		.cfi_def_cfa_offset 16
 494              		.cfi_offset 4, -16
 495              		.cfi_offset 5, -12
 496              		.cfi_offset 6, -8
 497              		.cfi_offset 14, -4
 498 0002 0500     		movs	r5, r0
 499 0004 0E00     		movs	r6, r1
 500 0006 1400     		movs	r4, r2
3038:../drivers/fsl_flash.c ****     {
 501              		.loc 1 3038 0
 502 0008 0028     		cmp	r0, #0
 503 000a 18D0     		beq	.L51
3038:../drivers/fsl_flash.c ****     {
 504              		.loc 1 3038 0 is_stmt 0 discriminator 1
 505 000c 002A     		cmp	r2, #0
 506 000e 18D0     		beq	.L52
3044:../drivers/fsl_flash.c **** 
 507              		.loc 1 3044 0 is_stmt 1
 508 0010 2022     		movs	r2, #32
 509              	.LVL75:
 510 0012 0021     		movs	r1, #0
 511              	.LVL76:
 512 0014 2000     		movs	r0, r4
 513              	.LVL77:
 514 0016 FFF7FEFF 		bl	memset
 515              	.LVL78:
3064:../drivers/fsl_flash.c ****         info->activeSectorSize = config->PFlashSectorSize;
 516              		.loc 1 3064 0
 517 001a 2B68     		ldr	r3, [r5]
 518 001c F61A     		subs	r6, r6, r3
 519              	.LVL79:
 520 001e 2660     		str	r6, [r4]
3065:../drivers/fsl_flash.c ****         info->activeBlockSize = config->PFlashTotalSize / config->PFlashBlockCount;
 521              		.loc 1 3065 0
 522 0020 EB68     		ldr	r3, [r5, #12]
 523 0022 6360     		str	r3, [r4, #4]
3066:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
 524              		.loc 1 3066 0
 525 0024 6868     		ldr	r0, [r5, #4]
 526 0026 297A     		ldrb	r1, [r5, #8]
 527 0028 FFF7FEFF 		bl	__aeabi_uidiv
 528              	.LVL80:
 529 002c A060     		str	r0, [r4, #8]
3080:../drivers/fsl_flash.c ****         }
 530              		.loc 1 3080 0
 531 002e 0423     		movs	r3, #4
 532 0030 E360     		str	r3, [r4, #12]
3083:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTION_CMD_ADDRESS_ALIGMENT;
 533              		.loc 1 3083 0
 534 0032 2361     		str	r3, [r4, #16]
3084:../drivers/fsl_flash.c ****         info->resourceCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_RESOURCE_CMD_ADDRESS_ALIGMENT;
 535              		.loc 1 3084 0
 536 0034 6361     		str	r3, [r4, #20]
3085:../drivers/fsl_flash.c ****         info->checkCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_CHECK_CMD_ADDRESS_ALIGMENT;
 537              		.loc 1 3085 0
 538 0036 A361     		str	r3, [r4, #24]
3086:../drivers/fsl_flash.c ****     }
 539              		.loc 1 3086 0
 540 0038 E361     		str	r3, [r4, #28]
3089:../drivers/fsl_flash.c **** }
 541              		.loc 1 3089 0
 542 003a 0020     		movs	r0, #0
 543              	.L49:
3090:../drivers/fsl_flash.c **** 
 544              		.loc 1 3090 0
 545              		@ sp needed
 546              	.LVL81:
 547              	.LVL82:
 548 003c 70BD     		pop	{r4, r5, r6, pc}
 549              	.LVL83:
 550              	.L51:
3040:../drivers/fsl_flash.c ****     }
 551              		.loc 1 3040 0
 552 003e 0420     		movs	r0, #4
 553              	.LVL84:
 554 0040 FCE7     		b	.L49
 555              	.LVL85:
 556              	.L52:
 557 0042 0420     		movs	r0, #4
 558              	.LVL86:
 559 0044 FAE7     		b	.L49
 560              		.cfi_endproc
 561              	.LFE85:
 563              		.section	.text.flash_get_protection_info,"ax",%progbits
 564              		.align	1
 565              		.syntax unified
 566              		.code	16
 567              		.thumb_func
 568              		.fpu softvfp
 570              	flash_get_protection_info:
 571              	.LFB88:
3369:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
3370:../drivers/fsl_flash.c **** 
3371:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
3372:../drivers/fsl_flash.c **** /*! @brief Validates the gived swap control option.*/
3373:../drivers/fsl_flash.c **** static status_t flash_check_swap_control_option(flash_swap_control_option_t option)
3374:../drivers/fsl_flash.c **** {
3375:../drivers/fsl_flash.c ****     if ((option == kFLASH_SwapControlOptionIntializeSystem) || (option == kFLASH_SwapControlOptionS
3376:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionSetInCompleteState) || (option == kFLASH_SwapControlOpti
3377:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionDisableSystem))
3378:../drivers/fsl_flash.c ****     {
3379:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
3380:../drivers/fsl_flash.c ****     }
3381:../drivers/fsl_flash.c **** 
3382:../drivers/fsl_flash.c ****     return kStatus_FLASH_InvalidArgument;
3383:../drivers/fsl_flash.c **** }
3384:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
3385:../drivers/fsl_flash.c **** 
3386:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
3387:../drivers/fsl_flash.c **** /*! @brief Validates the gived address to see if it is equal to swap indicator address in pflash sw
3388:../drivers/fsl_flash.c **** static status_t flash_validate_swap_indicator_address(flash_config_t *config, uint32_t address)
3389:../drivers/fsl_flash.c **** {
3390:../drivers/fsl_flash.c ****     flash_swap_ifr_field_data_t flashSwapIfrFieldData;
3391:../drivers/fsl_flash.c ****     uint32_t swapIndicatorAddress;
3392:../drivers/fsl_flash.c **** 
3393:../drivers/fsl_flash.c ****     status_t returnCode;
3394:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3395:../drivers/fsl_flash.c ****     returnCode =
3396:../drivers/fsl_flash.c ****         FLASH_ReadResource(config, kFLASH_ResourceRangePflashSwapIfrStart, flashSwapIfrFieldData.fl
3397:../drivers/fsl_flash.c ****                            sizeof(flashSwapIfrFieldData.flashSwapIfrData), kFLASH_ResourceOptionFla
3398:../drivers/fsl_flash.c **** 
3399:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
3400:../drivers/fsl_flash.c ****     {
3401:../drivers/fsl_flash.c ****         return returnCode;
3402:../drivers/fsl_flash.c ****     }
3403:../drivers/fsl_flash.c **** #else
3404:../drivers/fsl_flash.c ****     {
3405:../drivers/fsl_flash.c ****         /* From RM, the actual info are stored in FCCOB6,7 */
3406:../drivers/fsl_flash.c ****         uint32_t returnValue[2];
3407:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapAddr, returnValue, 4);
3408:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3409:../drivers/fsl_flash.c ****         {
3410:../drivers/fsl_flash.c ****             return returnCode;
3411:../drivers/fsl_flash.c ****         }
3412:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapIndicatorAddress = (uint16_t)returnValue[0];
3413:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapEnable, returnValue, 4);
3414:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3415:../drivers/fsl_flash.c ****         {
3416:../drivers/fsl_flash.c ****             return returnCode;
3417:../drivers/fsl_flash.c ****         }
3418:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapEnableWord = (uint16_t)returnValue[0];
3419:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapDisable, returnValue, 4);
3420:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3421:../drivers/fsl_flash.c ****         {
3422:../drivers/fsl_flash.c ****             return returnCode;
3423:../drivers/fsl_flash.c ****         }
3424:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapDisableWord = (uint16_t)returnValue[0];
3425:../drivers/fsl_flash.c ****     }
3426:../drivers/fsl_flash.c **** #endif
3427:../drivers/fsl_flash.c **** 
3428:../drivers/fsl_flash.c ****     /* The high bits value of Swap Indicator Address is stored in Program Flash Swap IFR Field,
3429:../drivers/fsl_flash.c ****      * the low severval bit value of Swap Indicator Address is always 1'b0 */
3430:../drivers/fsl_flash.c ****     swapIndicatorAddress = (uint32_t)flashSwapIfrFieldData.flashSwapIfrField.swapIndicatorAddress *
3431:../drivers/fsl_flash.c ****                            FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT;
3432:../drivers/fsl_flash.c ****     if (address != swapIndicatorAddress)
3433:../drivers/fsl_flash.c ****     {
3434:../drivers/fsl_flash.c ****         return kStatus_FLASH_SwapIndicatorAddressError;
3435:../drivers/fsl_flash.c ****     }
3436:../drivers/fsl_flash.c **** 
3437:../drivers/fsl_flash.c ****     return returnCode;
3438:../drivers/fsl_flash.c **** }
3439:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
3440:../drivers/fsl_flash.c **** 
3441:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
3442:../drivers/fsl_flash.c **** /*! @brief Validates the gived flexram function option.*/
3443:../drivers/fsl_flash.c **** static inline status_t flasn_check_flexram_function_option_range(flash_flexram_function_option_t op
3444:../drivers/fsl_flash.c **** {
3445:../drivers/fsl_flash.c ****     if ((option != kFLASH_FlexramFunctionOptionAvailableAsRam) &&
3446:../drivers/fsl_flash.c ****         (option != kFLASH_FlexramFunctionOptionAvailableForEeprom))
3447:../drivers/fsl_flash.c ****     {
3448:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3449:../drivers/fsl_flash.c ****     }
3450:../drivers/fsl_flash.c **** 
3451:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3452:../drivers/fsl_flash.c **** }
3453:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
3454:../drivers/fsl_flash.c **** 
3455:../drivers/fsl_flash.c **** /*! @brief Gets the flash protection information (region size, region count).*/
3456:../drivers/fsl_flash.c **** static status_t flash_get_protection_info(flash_config_t *config, flash_protection_config_t *info)
3457:../drivers/fsl_flash.c **** {
 572              		.loc 1 3457 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              	.LVL87:
 577 0000 70B5     		push	{r4, r5, r6, lr}
 578              		.cfi_def_cfa_offset 16
 579              		.cfi_offset 4, -16
 580              		.cfi_offset 5, -12
 581              		.cfi_offset 6, -8
 582              		.cfi_offset 14, -4
 583 0002 0500     		movs	r5, r0
 584 0004 0C00     		movs	r4, r1
3458:../drivers/fsl_flash.c ****     uint32_t pflashTotalSize;
3459:../drivers/fsl_flash.c **** 
3460:../drivers/fsl_flash.c ****     if ((config == NULL) || (info == NULL))
 585              		.loc 1 3460 0
 586 0006 0028     		cmp	r0, #0
 587 0008 18D0     		beq	.L56
 588              		.loc 1 3460 0 is_stmt 0 discriminator 1
 589 000a 0029     		cmp	r1, #0
 590 000c 18D0     		beq	.L57
3461:../drivers/fsl_flash.c ****     {
3462:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3463:../drivers/fsl_flash.c ****     }
3464:../drivers/fsl_flash.c **** 
3465:../drivers/fsl_flash.c ****     /* Clean up info Structure*/
3466:../drivers/fsl_flash.c ****     memset(info, 0, sizeof(flash_protection_config_t));
 591              		.loc 1 3466 0 is_stmt 1
 592 000e 0C22     		movs	r2, #12
 593 0010 0021     		movs	r1, #0
 594              	.LVL88:
 595 0012 2000     		movs	r0, r4
 596              	.LVL89:
 597 0014 FFF7FEFF 		bl	memset
 598              	.LVL90:
3467:../drivers/fsl_flash.c **** 
3468:../drivers/fsl_flash.c **** /* Note: KW40 has a secondary flash, but it doesn't have independent protection register*/
3469:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && (!FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGI
3470:../drivers/fsl_flash.c ****     pflashTotalSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT * MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE 
3471:../drivers/fsl_flash.c ****                       FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT * FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZ
3472:../drivers/fsl_flash.c ****     info->regionBase = MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS;
3473:../drivers/fsl_flash.c **** #else
3474:../drivers/fsl_flash.c ****     pflashTotalSize = config->PFlashTotalSize;
 599              		.loc 1 3474 0
 600 0018 6B68     		ldr	r3, [r5, #4]
 601              	.LVL91:
3475:../drivers/fsl_flash.c ****     info->regionBase = config->PFlashBlockBase;
 602              		.loc 1 3475 0
 603 001a 2A68     		ldr	r2, [r5]
 604 001c 2260     		str	r2, [r4]
3476:../drivers/fsl_flash.c **** #endif
3477:../drivers/fsl_flash.c **** 
3478:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
3479:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
3480:../drivers/fsl_flash.c ****     {
3481:../drivers/fsl_flash.c ****         info->regionCount = SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT;
3482:../drivers/fsl_flash.c ****     }
3483:../drivers/fsl_flash.c ****     else
3484:../drivers/fsl_flash.c **** #endif
3485:../drivers/fsl_flash.c ****     {
3486:../drivers/fsl_flash.c ****         info->regionCount = MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT;
 605              		.loc 1 3486 0
 606 001e 2022     		movs	r2, #32
 607 0020 A260     		str	r2, [r4, #8]
3487:../drivers/fsl_flash.c ****     }
3488:../drivers/fsl_flash.c **** 
3489:../drivers/fsl_flash.c ****     /* Calculate the size of the flash protection region
3490:../drivers/fsl_flash.c ****      * If the flash density is > 32KB, then protection region is 1/32 of total flash density
3491:../drivers/fsl_flash.c ****      * Else if flash density is < 32KB, then flash protection region is set to 1KB */
3492:../drivers/fsl_flash.c ****     if (pflashTotalSize > info->regionCount * 1024)
 608              		.loc 1 3492 0
 609 0022 8022     		movs	r2, #128
 610 0024 1202     		lsls	r2, r2, #8
 611 0026 9342     		cmp	r3, r2
 612 0028 04D8     		bhi	.L58
3493:../drivers/fsl_flash.c ****     {
3494:../drivers/fsl_flash.c ****         info->regionSize = (pflashTotalSize) / info->regionCount;
3495:../drivers/fsl_flash.c ****     }
3496:../drivers/fsl_flash.c ****     else
3497:../drivers/fsl_flash.c ****     {
3498:../drivers/fsl_flash.c ****         info->regionSize = 1024;
 613              		.loc 1 3498 0
 614 002a 8023     		movs	r3, #128
 615              	.LVL92:
 616 002c DB00     		lsls	r3, r3, #3
 617 002e 6360     		str	r3, [r4, #4]
3499:../drivers/fsl_flash.c ****     }
3500:../drivers/fsl_flash.c **** 
3501:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 618              		.loc 1 3501 0
 619 0030 0020     		movs	r0, #0
 620              	.L53:
3502:../drivers/fsl_flash.c **** }
 621              		.loc 1 3502 0
 622              		@ sp needed
 623              	.LVL93:
 624              	.LVL94:
 625 0032 70BD     		pop	{r4, r5, r6, pc}
 626              	.LVL95:
 627              	.L58:
3494:../drivers/fsl_flash.c ****     }
 628              		.loc 1 3494 0
 629 0034 5B09     		lsrs	r3, r3, #5
 630              	.LVL96:
 631 0036 6360     		str	r3, [r4, #4]
3501:../drivers/fsl_flash.c **** }
 632              		.loc 1 3501 0
 633 0038 0020     		movs	r0, #0
 634 003a FAE7     		b	.L53
 635              	.LVL97:
 636              	.L56:
3462:../drivers/fsl_flash.c ****     }
 637              		.loc 1 3462 0
 638 003c 0420     		movs	r0, #4
 639              	.LVL98:
 640 003e F8E7     		b	.L53
 641              	.LVL99:
 642              	.L57:
 643 0040 0420     		movs	r0, #4
 644              	.LVL100:
 645 0042 F6E7     		b	.L53
 646              		.cfi_endproc
 647              	.LFE88:
 649              		.section	.text.FLASH_PrepareExecuteInRamFunctions,"ax",%progbits
 650              		.align	1
 651              		.global	FLASH_PrepareExecuteInRamFunctions
 652              		.syntax unified
 653              		.code	16
 654              		.thumb_func
 655              		.fpu softvfp
 657              	FLASH_PrepareExecuteInRamFunctions:
 658              	.LFB54:
 852:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
 659              		.loc 1 852 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              	.LVL101:
 664 0000 10B5     		push	{r4, lr}
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 4, -8
 667              		.cfi_offset 14, -4
 855:../drivers/fsl_flash.c ****     {
 668              		.loc 1 855 0
 669 0002 0028     		cmp	r0, #0
 670 0004 0CD0     		beq	.L61
 855:../drivers/fsl_flash.c ****     {
 671              		.loc 1 855 0 is_stmt 0 discriminator 1
 672 0006 C469     		ldr	r4, [r0, #28]
 673 0008 002C     		cmp	r4, #0
 674 000a 0BD0     		beq	.L62
 675              	.LVL102:
 862:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 676              		.loc 1 862 0 is_stmt 1
 677 000c 6068     		ldr	r0, [r4, #4]
 678              	.LVL103:
 679 000e FFF7FEFF 		bl	copy_flash_run_command
 680              	.LVL104:
 864:../drivers/fsl_flash.c **** #endif
 681              		.loc 1 864 0
 682 0012 A068     		ldr	r0, [r4, #8]
 683 0014 FFF7FEFF 		bl	copy_flash_common_bit_operation
 684              	.LVL105:
 866:../drivers/fsl_flash.c **** 
 685              		.loc 1 866 0
 686 0018 0223     		movs	r3, #2
 687 001a 2360     		str	r3, [r4]
 868:../drivers/fsl_flash.c **** }
 688              		.loc 1 868 0
 689 001c 0020     		movs	r0, #0
 690              	.LVL106:
 691              	.L59:
 869:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 692              		.loc 1 869 0
 693              		@ sp needed
 694 001e 10BD     		pop	{r4, pc}
 695              	.LVL107:
 696              	.L61:
 857:../drivers/fsl_flash.c ****     }
 697              		.loc 1 857 0
 698 0020 0420     		movs	r0, #4
 699              	.LVL108:
 700 0022 FCE7     		b	.L59
 701              	.LVL109:
 702              	.L62:
 703 0024 0420     		movs	r0, #4
 704              	.LVL110:
 705 0026 FAE7     		b	.L59
 706              		.cfi_endproc
 707              	.LFE54:
 709              		.section	.text.FLASH_Init,"ax",%progbits
 710              		.align	1
 711              		.global	FLASH_Init
 712              		.syntax unified
 713              		.code	16
 714              		.thumb_func
 715              		.fpu softvfp
 717              	FLASH_Init:
 718              	.LFB53:
 736:../drivers/fsl_flash.c ****     if (config == NULL)
 719              		.loc 1 736 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              	.LVL111:
 724 0000 10B5     		push	{r4, lr}
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 4, -8
 727              		.cfi_offset 14, -4
 728 0002 041E     		subs	r4, r0, #0
 737:../drivers/fsl_flash.c ****     {
 729              		.loc 1 737 0
 730 0004 2ED0     		beq	.L67
 731              	.LBB2:
 776:../drivers/fsl_flash.c **** #else
 732              		.loc 1 776 0
 733 0006 184A     		ldr	r2, .L70
 734 0008 184B     		ldr	r3, .L70+4
 735 000a D258     		ldr	r2, [r2, r3]
 736 000c 120E     		lsrs	r2, r2, #24
 737 000e 0F23     		movs	r3, #15
 738 0010 1340     		ands	r3, r2
 739              	.LVL112:
 782:../drivers/fsl_flash.c ****         {
 740              		.loc 1 782 0
 741 0012 0F2B     		cmp	r3, #15
 742 0014 17D0     		beq	.L68
 788:../drivers/fsl_flash.c ****         }
 743              		.loc 1 788 0
 744 0016 5B00     		lsls	r3, r3, #1
 745              	.LVL113:
 746 0018 154A     		ldr	r2, .L70+8
 747              	.LVL114:
 748 001a 9A5A     		ldrh	r2, [r3, r2]
 749 001c 9202     		lsls	r2, r2, #10
 750              	.LVL115:
 751              	.L65:
 792:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 752              		.loc 1 792 0
 753 001e 0023     		movs	r3, #0
 754 0020 2360     		str	r3, [r4]
 793:../drivers/fsl_flash.c ****         config->PFlashBlockCount = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 755              		.loc 1 793 0
 756 0022 6260     		str	r2, [r4, #4]
 794:../drivers/fsl_flash.c ****         config->PFlashSectorSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 757              		.loc 1 794 0
 758 0024 0222     		movs	r2, #2
 759              	.LVL116:
 760 0026 2272     		strb	r2, [r4, #8]
 795:../drivers/fsl_flash.c ****     }
 761              		.loc 1 795 0
 762 0028 8022     		movs	r2, #128
 763 002a D200     		lsls	r2, r2, #3
 764 002c E260     		str	r2, [r4, #12]
 765              	.LBE2:
 813:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentCount = 0;
 766              		.loc 1 813 0
 767 002e 6361     		str	r3, [r4, #20]
 814:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 768              		.loc 1 814 0
 769 0030 A361     		str	r3, [r4, #24]
 820:../drivers/fsl_flash.c ****     {
 770              		.loc 1 820 0
 771 0032 2000     		movs	r0, r4
 772              	.LVL117:
 773 0034 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
 774              	.LVL118:
 775 0038 0028     		cmp	r0, #0
 776 003a 07D1     		bne	.L69
 777              	.L66:
 832:../drivers/fsl_flash.c ****     config->FlexRAMTotalSize = FSL_FEATURE_FLASH_FLEX_RAM_SIZE;
 778              		.loc 1 832 0
 779 003c 0023     		movs	r3, #0
 780 003e 2362     		str	r3, [r4, #32]
 833:../drivers/fsl_flash.c **** 
 781              		.loc 1 833 0
 782 0040 6362     		str	r3, [r4, #36]
 847:../drivers/fsl_flash.c **** }
 783              		.loc 1 847 0
 784 0042 0020     		movs	r0, #0
 785              	.L63:
 848:../drivers/fsl_flash.c **** 
 786              		.loc 1 848 0
 787              		@ sp needed
 788              	.LVL119:
 789 0044 10BD     		pop	{r4, pc}
 790              	.LVL120:
 791              	.L68:
 792              	.LBB3:
 784:../drivers/fsl_flash.c ****         }
 793              		.loc 1 784 0
 794 0046 8022     		movs	r2, #128
 795 0048 D202     		lsls	r2, r2, #11
 796 004a E8E7     		b	.L65
 797              	.LVL121:
 798              	.L69:
 799              	.LBE3:
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 800              		.loc 1 822 0
 801 004c 094B     		ldr	r3, .L70+12
 802 004e 0022     		movs	r2, #0
 803 0050 1A60     		str	r2, [r3]
 823:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 804              		.loc 1 823 0
 805 0052 094A     		ldr	r2, .L70+16
 806 0054 5A60     		str	r2, [r3, #4]
 825:../drivers/fsl_flash.c **** #endif
 807              		.loc 1 825 0
 808 0056 094A     		ldr	r2, .L70+20
 809 0058 9A60     		str	r2, [r3, #8]
 827:../drivers/fsl_flash.c ****         FLASH_PrepareExecuteInRamFunctions(config);
 810              		.loc 1 827 0
 811 005a E361     		str	r3, [r4, #28]
 828:../drivers/fsl_flash.c ****     }
 812              		.loc 1 828 0
 813 005c 2000     		movs	r0, r4
 814 005e FFF7FEFF 		bl	FLASH_PrepareExecuteInRamFunctions
 815              	.LVL122:
 816 0062 EBE7     		b	.L66
 817              	.LVL123:
 818              	.L67:
 739:../drivers/fsl_flash.c ****     }
 819              		.loc 1 739 0
 820 0064 0420     		movs	r0, #4
 821              	.LVL124:
 822 0066 EDE7     		b	.L63
 823              	.L71:
 824              		.align	2
 825              	.L70:
 826 0068 00700440 		.word	1074032640
 827 006c 4C100000 		.word	4172
 828 0070 00000000 		.word	.LANCHOR4
 829 0074 00000000 		.word	.LANCHOR5
 830 0078 00000000 		.word	.LANCHOR6
 831 007c 00000000 		.word	.LANCHOR7
 832              		.cfi_endproc
 833              	.LFE53:
 835              		.section	.text.FLASH_ReadResource,"ax",%progbits
 836              		.align	1
 837              		.global	FLASH_ReadResource
 838              		.syntax unified
 839              		.code	16
 840              		.thumb_func
 841              		.fpu softvfp
 843              	FLASH_ReadResource:
 844              	.LFB61:
1358:../drivers/fsl_flash.c ****     status_t returnCode;
 845              		.loc 1 1358 0
 846              		.cfi_startproc
 847              		@ args = 4, pretend = 0, frame = 32
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              	.LVL125:
 850 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 851              		.cfi_def_cfa_offset 20
 852              		.cfi_offset 4, -20
 853              		.cfi_offset 5, -16
 854              		.cfi_offset 6, -12
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 C646     		mov	lr, r8
 858 0004 00B5     		push	{lr}
 859              		.cfi_def_cfa_offset 24
 860              		.cfi_offset 8, -24
 861 0006 88B0     		sub	sp, sp, #32
 862              		.cfi_def_cfa_offset 56
 863 0008 0500     		movs	r5, r0
 864 000a 0E00     		movs	r6, r1
 865 000c 1400     		movs	r4, r2
 866 000e 1F00     		movs	r7, r3
 867 0010 0EAB     		add	r3, sp, #56
 868              	.LVL126:
 869 0012 1B78     		ldrb	r3, [r3]
 870              	.LVL127:
 871 0014 9846     		mov	r8, r3
1362:../drivers/fsl_flash.c ****     {
 872              		.loc 1 1362 0
 873 0016 0028     		cmp	r0, #0
 874 0018 40D0     		beq	.L79
1362:../drivers/fsl_flash.c ****     {
 875              		.loc 1 1362 0 is_stmt 0 discriminator 1
 876 001a 002A     		cmp	r2, #0
 877 001c 40D0     		beq	.L80
1367:../drivers/fsl_flash.c **** 
 878              		.loc 1 1367 0 is_stmt 1
 879 001e 6A46     		mov	r2, sp
 880              	.LVL128:
 881 0020 FFF7FEFF 		bl	flash_get_matched_operation_info
 882              	.LVL129:
1371:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
 883              		.loc 1 1371 0
 884 0024 069A     		ldr	r2, [sp, #24]
1370:../drivers/fsl_flash.c ****         flash_check_resource_range(start, lengthInBytes, flashOperationInfo.resourceCmdAddressAligm
 885              		.loc 1 1370 0
 886 0026 4346     		mov	r3, r8
 887 0028 3900     		movs	r1, r7
 888 002a 3000     		movs	r0, r6
 889 002c FFF7FEFF 		bl	flash_check_resource_range
 890              	.LVL130:
1372:../drivers/fsl_flash.c ****     {
 891              		.loc 1 1372 0
 892 0030 0028     		cmp	r0, #0
 893 0032 19D0     		beq	.L74
 894              	.LVL131:
 895              	.L72:
1414:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
 896              		.loc 1 1414 0
 897 0034 08B0     		add	sp, sp, #32
 898              		@ sp needed
 899              	.LVL132:
 900              	.LVL133:
 901              	.LVL134:
 902              	.LVL135:
 903 0036 04BC     		pop	{r2}
 904 0038 9046     		mov	r8, r2
 905 003a F0BD     		pop	{r4, r5, r6, r7, pc}
 906              	.LVL136:
 907              	.L82:
1383:../drivers/fsl_flash.c ****         }
 908              		.loc 1 1383 0
 909 003c 4346     		mov	r3, r8
 910 003e 1A06     		lsls	r2, r3, #24
 911 0040 184B     		ldr	r3, .L83
 912 0042 1343     		orrs	r3, r2
 913 0044 184A     		ldr	r2, .L83+4
 914 0046 1360     		str	r3, [r2]
 915              	.L76:
1394:../drivers/fsl_flash.c **** 
 916              		.loc 1 1394 0
 917 0048 2800     		movs	r0, r5
 918              	.LVL137:
 919 004a FFF7FEFF 		bl	flash_command_sequence
 920              	.LVL138:
1396:../drivers/fsl_flash.c ****         {
 921              		.loc 1 1396 0
 922 004e 0028     		cmp	r0, #0
 923 0050 F0D1     		bne	.L72
1402:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
 924              		.loc 1 1402 0
 925 0052 221D     		adds	r2, r4, #4
 926              	.LVL139:
 927 0054 154B     		ldr	r3, .L83+8
 928 0056 1B68     		ldr	r3, [r3]
 929 0058 2360     		str	r3, [r4]
1403:../drivers/fsl_flash.c ****         {
 930              		.loc 1 1403 0
 931 005a 069B     		ldr	r3, [sp, #24]
 932 005c 082B     		cmp	r3, #8
 933 005e 18D0     		beq	.L81
 934              	.L77:
1408:../drivers/fsl_flash.c ****         /* update lengthInBytes for next iteration */
 935              		.loc 1 1408 0
 936 0060 069B     		ldr	r3, [sp, #24]
 937 0062 F618     		adds	r6, r6, r3
 938              	.LVL140:
1410:../drivers/fsl_flash.c ****     }
 939              		.loc 1 1410 0
 940 0064 FF1A     		subs	r7, r7, r3
 941              	.LVL141:
 942 0066 1400     		movs	r4, r2
 943              	.LVL142:
 944              	.L74:
1377:../drivers/fsl_flash.c ****     {
 945              		.loc 1 1377 0
 946 0068 002F     		cmp	r7, #0
 947 006a E3D0     		beq	.L72
1380:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
 948              		.loc 1 1380 0
 949 006c 3202     		lsls	r2, r6, #8
 950 006e 120A     		lsrs	r2, r2, #8
 951 0070 C023     		movs	r3, #192
 952 0072 9B04     		lsls	r3, r3, #18
 953 0074 1343     		orrs	r3, r2
 954 0076 0E4A     		ldr	r2, .L83+12
 955 0078 1360     		str	r3, [r2]
1381:../drivers/fsl_flash.c ****         {
 956              		.loc 1 1381 0
 957 007a 069B     		ldr	r3, [sp, #24]
 958 007c 042B     		cmp	r3, #4
 959 007e DDD0     		beq	.L82
1385:../drivers/fsl_flash.c ****         {
 960              		.loc 1 1385 0
 961 0080 082B     		cmp	r3, #8
 962 0082 E1D1     		bne	.L76
1387:../drivers/fsl_flash.c ****         }
 963              		.loc 1 1387 0
 964 0084 4346     		mov	r3, r8
 965 0086 1A06     		lsls	r2, r3, #24
 966 0088 064B     		ldr	r3, .L83
 967 008a 1343     		orrs	r3, r2
 968 008c 074A     		ldr	r2, .L83+8
 969 008e 1360     		str	r3, [r2]
 970 0090 DAE7     		b	.L76
 971              	.LVL143:
 972              	.L81:
1405:../drivers/fsl_flash.c ****         }
 973              		.loc 1 1405 0
 974 0092 0432     		adds	r2, r2, #4
 975              	.LVL144:
 976 0094 044B     		ldr	r3, .L83+4
 977 0096 1B68     		ldr	r3, [r3]
 978 0098 6360     		str	r3, [r4, #4]
 979 009a E1E7     		b	.L77
 980              	.LVL145:
 981              	.L79:
1364:../drivers/fsl_flash.c ****     }
 982              		.loc 1 1364 0
 983 009c 0420     		movs	r0, #4
 984              	.LVL146:
 985 009e C9E7     		b	.L72
 986              	.LVL147:
 987              	.L80:
 988 00a0 0420     		movs	r0, #4
 989              	.LVL148:
 990 00a2 C7E7     		b	.L72
 991              	.L84:
 992              		.align	2
 993              	.L83:
 994 00a4 FFFFFF00 		.word	16777215
 995 00a8 0C000240 		.word	1073872908
 996 00ac 08000240 		.word	1073872904
 997 00b0 04000240 		.word	1073872900
 998              		.cfi_endproc
 999              	.LFE61:
 1001              		.section	.text.FLASH_ReadOnce,"ax",%progbits
 1002              		.align	1
 1003              		.global	FLASH_ReadOnce
 1004              		.syntax unified
 1005              		.code	16
 1006              		.thumb_func
 1007              		.fpu softvfp
 1009              	FLASH_ReadOnce:
 1010              	.LFB62:
1418:../drivers/fsl_flash.c ****     status_t returnCode;
 1011              		.loc 1 1418 0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              	.LVL149:
 1016 0000 70B5     		push	{r4, r5, r6, lr}
 1017              		.cfi_def_cfa_offset 16
 1018              		.cfi_offset 4, -16
 1019              		.cfi_offset 5, -12
 1020              		.cfi_offset 6, -8
 1021              		.cfi_offset 14, -4
 1022 0002 0C00     		movs	r4, r1
 1023 0004 1600     		movs	r6, r2
 1024 0006 1D00     		movs	r5, r3
1421:../drivers/fsl_flash.c ****     {
 1025              		.loc 1 1421 0
 1026 0008 0028     		cmp	r0, #0
 1027 000a 19D0     		beq	.L87
1421:../drivers/fsl_flash.c ****     {
 1028              		.loc 1 1421 0 is_stmt 0 discriminator 1
 1029 000c 002A     		cmp	r2, #0
 1030 000e 19D0     		beq	.L88
1427:../drivers/fsl_flash.c **** 
 1031              		.loc 1 1427 0 is_stmt 1
 1032 0010 0B04     		lsls	r3, r1, #16
 1033              	.LVL150:
 1034 0012 FF22     		movs	r2, #255
 1035              	.LVL151:
 1036 0014 1204     		lsls	r2, r2, #16
 1037 0016 1A40     		ands	r2, r3
 1038 0018 0B4B     		ldr	r3, .L89
 1039 001a 1343     		orrs	r3, r2
 1040 001c 0B4A     		ldr	r2, .L89+4
 1041 001e 1360     		str	r3, [r2]
1430:../drivers/fsl_flash.c **** 
 1042              		.loc 1 1430 0
 1043 0020 FFF7FEFF 		bl	flash_command_sequence
 1044              	.LVL152:
1432:../drivers/fsl_flash.c ****     {
 1045              		.loc 1 1432 0
 1046 0024 0028     		cmp	r0, #0
 1047 0026 0ED1     		bne	.L85
1434:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
 1048              		.loc 1 1434 0
 1049 0028 094B     		ldr	r3, .L89+8
 1050 002a 1B68     		ldr	r3, [r3]
 1051 002c 3360     		str	r3, [r6]
1439:../drivers/fsl_flash.c ****              /* Range check */
 1052              		.loc 1 1439 0
 1053 002e 103C     		subs	r4, r4, #16
 1054              	.LVL153:
 1055 0030 032C     		cmp	r4, #3
 1056 0032 08D8     		bhi	.L85
1441:../drivers/fsl_flash.c ****             (lengthInBytes == 8))
 1057              		.loc 1 1441 0
 1058 0034 082D     		cmp	r5, #8
 1059 0036 06D1     		bne	.L85
1445:../drivers/fsl_flash.c ****         }
 1060              		.loc 1 1445 0
 1061 0038 064B     		ldr	r3, .L89+12
 1062 003a 1B68     		ldr	r3, [r3]
 1063 003c 7360     		str	r3, [r6, #4]
 1064 003e 02E0     		b	.L85
 1065              	.LVL154:
 1066              	.L87:
1423:../drivers/fsl_flash.c ****     }
 1067              		.loc 1 1423 0
 1068 0040 0420     		movs	r0, #4
 1069              	.LVL155:
 1070 0042 00E0     		b	.L85
 1071              	.LVL156:
 1072              	.L88:
 1073 0044 0420     		movs	r0, #4
 1074              	.LVL157:
 1075              	.L85:
1451:../drivers/fsl_flash.c **** 
 1076              		.loc 1 1451 0
 1077              		@ sp needed
 1078              	.LVL158:
 1079              	.LVL159:
 1080 0046 70BD     		pop	{r4, r5, r6, pc}
 1081              	.L90:
 1082              		.align	2
 1083              	.L89:
 1084 0048 FFFF0041 		.word	1090584575
 1085 004c 04000240 		.word	1073872900
 1086 0050 08000240 		.word	1073872904
 1087 0054 0C000240 		.word	1073872908
 1088              		.cfi_endproc
 1089              	.LFE62:
 1091              		.section	.text.FLASH_GetSecurityState,"ax",%progbits
 1092              		.align	1
 1093              		.global	FLASH_GetSecurityState
 1094              		.syntax unified
 1095              		.code	16
 1096              		.thumb_func
 1097              		.fpu softvfp
 1099              	FLASH_GetSecurityState:
 1100              	.LFB63:
1454:../drivers/fsl_flash.c ****     /* store data read from flash register */
 1101              		.loc 1 1454 0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 1105              		@ link register save eliminated.
 1106              	.LVL160:
1458:../drivers/fsl_flash.c ****     {
 1107              		.loc 1 1458 0
 1108 0000 0028     		cmp	r0, #0
 1109 0002 18D0     		beq	.L95
1458:../drivers/fsl_flash.c ****     {
 1110              		.loc 1 1458 0 is_stmt 0 discriminator 1
 1111 0004 0029     		cmp	r1, #0
 1112 0006 18D0     		beq	.L96
1464:../drivers/fsl_flash.c **** 
 1113              		.loc 1 1464 0 is_stmt 1
 1114 0008 0D4B     		ldr	r3, .L99
 1115 000a 9B78     		ldrb	r3, [r3, #2]
 1116 000c DBB2     		uxtb	r3, r3
 1117              	.LVL161:
1467:../drivers/fsl_flash.c ****     {
 1118              		.loc 1 1467 0
 1119 000e 0322     		movs	r2, #3
 1120 0010 1A40     		ands	r2, r3
 1121 0012 022A     		cmp	r2, #2
 1122 0014 07D0     		beq	.L97
1476:../drivers/fsl_flash.c ****         {
 1123              		.loc 1 1476 0
 1124 0016 3F22     		movs	r2, #63
 1125 0018 9343     		bics	r3, r2
 1126              	.LVL162:
 1127 001a 802B     		cmp	r3, #128
 1128 001c 07D0     		beq	.L98
1484:../drivers/fsl_flash.c ****         }
 1129              		.loc 1 1484 0
 1130 001e 094B     		ldr	r3, .L99+4
 1131 0020 0B60     		str	r3, [r1]
1488:../drivers/fsl_flash.c **** }
 1132              		.loc 1 1488 0
 1133 0022 0020     		movs	r0, #0
 1134              	.LVL163:
 1135              	.L91:
1489:../drivers/fsl_flash.c **** 
 1136              		.loc 1 1489 0
 1137              		@ sp needed
 1138 0024 7047     		bx	lr
 1139              	.LVL164:
 1140              	.L97:
1470:../drivers/fsl_flash.c ****     }
 1141              		.loc 1 1470 0
 1142 0026 084B     		ldr	r3, .L99+8
 1143              	.LVL165:
 1144 0028 0B60     		str	r3, [r1]
1488:../drivers/fsl_flash.c **** }
 1145              		.loc 1 1488 0
 1146 002a 0020     		movs	r0, #0
 1147              	.LVL166:
 1148 002c FAE7     		b	.L91
 1149              	.LVL167:
 1150              	.L98:
1479:../drivers/fsl_flash.c ****         }
 1151              		.loc 1 1479 0
 1152 002e 074B     		ldr	r3, .L99+12
 1153 0030 0B60     		str	r3, [r1]
1488:../drivers/fsl_flash.c **** }
 1154              		.loc 1 1488 0
 1155 0032 0020     		movs	r0, #0
 1156              	.LVL168:
 1157 0034 F6E7     		b	.L91
 1158              	.LVL169:
 1159              	.L95:
1460:../drivers/fsl_flash.c ****     }
 1160              		.loc 1 1460 0
 1161 0036 0420     		movs	r0, #4
 1162              	.LVL170:
 1163 0038 F4E7     		b	.L91
 1164              	.LVL171:
 1165              	.L96:
 1166 003a 0420     		movs	r0, #4
 1167              	.LVL172:
 1168 003c F2E7     		b	.L91
 1169              	.L100:
 1170 003e C046     		.align	2
 1171              	.L99:
 1172 0040 00000240 		.word	1073872896
 1173 0044 A53CC35A 		.word	1522744485
 1174 0048 3CC33CC3 		.word	-1019428036
 1175 004c A55AA55A 		.word	1520786085
 1176              		.cfi_endproc
 1177              	.LFE63:
 1179              		.section	.text.FLASH_SecurityBypass,"ax",%progbits
 1180              		.align	1
 1181              		.global	FLASH_SecurityBypass
 1182              		.syntax unified
 1183              		.code	16
 1184              		.thumb_func
 1185              		.fpu softvfp
 1187              	FLASH_SecurityBypass:
 1188              	.LFB64:
1492:../drivers/fsl_flash.c ****     uint8_t registerValue; /* registerValue */
 1189              		.loc 1 1492 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              	.LVL173:
 1194 0000 10B5     		push	{r4, lr}
 1195              		.cfi_def_cfa_offset 8
 1196              		.cfi_offset 4, -8
 1197              		.cfi_offset 14, -4
1496:../drivers/fsl_flash.c ****     {
 1198              		.loc 1 1496 0
 1199 0002 0028     		cmp	r0, #0
 1200 0004 25D0     		beq	.L103
1496:../drivers/fsl_flash.c ****     {
 1201              		.loc 1 1496 0 is_stmt 0 discriminator 1
 1202 0006 0029     		cmp	r1, #0
 1203 0008 25D0     		beq	.L104
 1204              	.LVL174:
1505:../drivers/fsl_flash.c **** 
 1205              		.loc 1 1505 0 is_stmt 1
 1206 000a 154B     		ldr	r3, .L106
 1207 000c 9B78     		ldrb	r3, [r3, #2]
 1208              	.LVL175:
1509:../drivers/fsl_flash.c ****     {
 1209              		.loc 1 1509 0
 1210 000e 0322     		movs	r2, #3
 1211 0010 1340     		ands	r3, r2
 1212              	.LVL176:
 1213 0012 022B     		cmp	r3, #2
 1214 0014 21D0     		beq	.L105
1512:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[0], backdoorKey[1], backdoorKey[2], bac
 1215              		.loc 1 1512 0
 1216 0016 134B     		ldr	r3, .L106+4
 1217 0018 134A     		ldr	r2, .L106+8
 1218 001a 1A60     		str	r2, [r3]
1513:../drivers/fsl_flash.c ****         kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[4], backdoorKey[5], backdoorKey[6], bac
 1219              		.loc 1 1513 0
 1220 001c 0B78     		ldrb	r3, [r1]
 1221 001e 1B06     		lsls	r3, r3, #24
 1222 0020 4A78     		ldrb	r2, [r1, #1]
 1223 0022 1204     		lsls	r2, r2, #16
 1224 0024 1343     		orrs	r3, r2
 1225 0026 8A78     		ldrb	r2, [r1, #2]
 1226 0028 1202     		lsls	r2, r2, #8
 1227 002a 1343     		orrs	r3, r2
 1228 002c CA78     		ldrb	r2, [r1, #3]
 1229 002e 1343     		orrs	r3, r2
 1230 0030 0E4A     		ldr	r2, .L106+12
 1231 0032 1360     		str	r3, [r2]
1514:../drivers/fsl_flash.c **** 
 1232              		.loc 1 1514 0
 1233 0034 0B79     		ldrb	r3, [r1, #4]
 1234 0036 1B06     		lsls	r3, r3, #24
 1235 0038 4A79     		ldrb	r2, [r1, #5]
 1236 003a 1204     		lsls	r2, r2, #16
 1237 003c 1343     		orrs	r3, r2
 1238 003e 8A79     		ldrb	r2, [r1, #6]
 1239 0040 1202     		lsls	r2, r2, #8
 1240 0042 1343     		orrs	r3, r2
 1241 0044 CA79     		ldrb	r2, [r1, #7]
 1242 0046 1343     		orrs	r3, r2
 1243 0048 094A     		ldr	r2, .L106+16
 1244 004a 1360     		str	r3, [r2]
1517:../drivers/fsl_flash.c ****     }
 1245              		.loc 1 1517 0
 1246 004c FFF7FEFF 		bl	flash_command_sequence
 1247              	.LVL177:
 1248              	.L101:
1521:../drivers/fsl_flash.c **** 
 1249              		.loc 1 1521 0
 1250              		@ sp needed
 1251 0050 10BD     		pop	{r4, pc}
 1252              	.LVL178:
 1253              	.L103:
1498:../drivers/fsl_flash.c ****     }
 1254              		.loc 1 1498 0
 1255 0052 0420     		movs	r0, #4
 1256              	.LVL179:
 1257 0054 FCE7     		b	.L101
 1258              	.LVL180:
 1259              	.L104:
 1260 0056 0420     		movs	r0, #4
 1261              	.LVL181:
 1262 0058 FAE7     		b	.L101
 1263              	.LVL182:
 1264              	.L105:
1502:../drivers/fsl_flash.c **** 
 1265              		.loc 1 1502 0
 1266 005a 0020     		movs	r0, #0
 1267              	.LVL183:
 1268 005c F8E7     		b	.L101
 1269              	.L107:
 1270 005e C046     		.align	2
 1271              	.L106:
 1272 0060 00000240 		.word	1073872896
 1273 0064 04000240 		.word	1073872900
 1274 0068 FFFFFF45 		.word	1174405119
 1275 006c 08000240 		.word	1073872904
 1276 0070 0C000240 		.word	1073872908
 1277              		.cfi_endproc
 1278              	.LFE64:
 1280              		.section	.text.FLASH_VerifyEraseAll,"ax",%progbits
 1281              		.align	1
 1282              		.global	FLASH_VerifyEraseAll
 1283              		.syntax unified
 1284              		.code	16
 1285              		.thumb_func
 1286              		.fpu softvfp
 1288              	FLASH_VerifyEraseAll:
 1289              	.LFB65:
1524:../drivers/fsl_flash.c ****     if (config == NULL)
 1290              		.loc 1 1524 0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 0, uses_anonymous_args = 0
 1294              	.LVL184:
 1295 0000 10B5     		push	{r4, lr}
 1296              		.cfi_def_cfa_offset 8
 1297              		.cfi_offset 4, -8
 1298              		.cfi_offset 14, -4
1525:../drivers/fsl_flash.c ****     {
 1299              		.loc 1 1525 0
 1300 0002 0028     		cmp	r0, #0
 1301 0004 07D0     		beq	.L110
1531:../drivers/fsl_flash.c **** 
 1302              		.loc 1 1531 0
 1303 0006 0904     		lsls	r1, r1, #16
 1304              	.LVL185:
 1305 0008 044B     		ldr	r3, .L111
 1306 000a 1943     		orrs	r1, r3
 1307 000c 044B     		ldr	r3, .L111+4
 1308 000e 1960     		str	r1, [r3]
1534:../drivers/fsl_flash.c **** }
 1309              		.loc 1 1534 0
 1310 0010 FFF7FEFF 		bl	flash_command_sequence
 1311              	.LVL186:
 1312              	.L108:
1535:../drivers/fsl_flash.c **** 
 1313              		.loc 1 1535 0
 1314              		@ sp needed
 1315 0014 10BD     		pop	{r4, pc}
 1316              	.LVL187:
 1317              	.L110:
1527:../drivers/fsl_flash.c ****     }
 1318              		.loc 1 1527 0
 1319 0016 0420     		movs	r0, #4
 1320              	.LVL188:
 1321 0018 FCE7     		b	.L108
 1322              	.L112:
 1323 001a C046     		.align	2
 1324              	.L111:
 1325 001c FFFF0040 		.word	1073807359
 1326 0020 04000240 		.word	1073872900
 1327              		.cfi_endproc
 1328              	.LFE65:
 1330              		.section	.text.FLASH_VerifyErase,"ax",%progbits
 1331              		.align	1
 1332              		.global	FLASH_VerifyErase
 1333              		.syntax unified
 1334              		.code	16
 1335              		.thumb_func
 1336              		.fpu softvfp
 1338              	FLASH_VerifyErase:
 1339              	.LFB66:
1538:../drivers/fsl_flash.c ****     /* Check arguments. */
 1340              		.loc 1 1538 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 40
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              	.LVL189:
 1345 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1346              		.cfi_def_cfa_offset 20
 1347              		.cfi_offset 4, -20
 1348              		.cfi_offset 5, -16
 1349              		.cfi_offset 6, -12
 1350              		.cfi_offset 7, -8
 1351              		.cfi_offset 14, -4
 1352 0002 D646     		mov	lr, r10
 1353 0004 4746     		mov	r7, r8
 1354 0006 80B5     		push	{r7, lr}
 1355              		.cfi_def_cfa_offset 28
 1356              		.cfi_offset 8, -28
 1357              		.cfi_offset 10, -24
 1358 0008 8BB0     		sub	sp, sp, #44
 1359              		.cfi_def_cfa_offset 72
 1360 000a 0600     		movs	r6, r0
 1361 000c 0090     		str	r0, [sp]
 1362 000e 0C00     		movs	r4, r1
 1363 0010 1500     		movs	r5, r2
 1364 0012 9A46     		mov	r10, r3
1546:../drivers/fsl_flash.c **** 
 1365              		.loc 1 1546 0
 1366 0014 02AA     		add	r2, sp, #8
 1367              	.LVL190:
 1368 0016 FFF7FEFF 		bl	flash_get_matched_operation_info
 1369              	.LVL191:
1548:../drivers/fsl_flash.c ****     if (returnCode)
 1370              		.loc 1 1548 0
 1371 001a 079B     		ldr	r3, [sp, #28]
 1372 001c 2A00     		movs	r2, r5
 1373 001e 2100     		movs	r1, r4
 1374 0020 3000     		movs	r0, r6
 1375 0022 FFF7FEFF 		bl	flash_check_range
 1376              	.LVL192:
 1377 0026 0190     		str	r0, [sp, #4]
 1378              	.LVL193:
1549:../drivers/fsl_flash.c ****     {
 1379              		.loc 1 1549 0
 1380 0028 0028     		cmp	r0, #0
 1381 002a 05D0     		beq	.L121
 1382              	.LVL194:
 1383              	.L113:
1594:../drivers/fsl_flash.c **** 
 1384              		.loc 1 1594 0
 1385 002c 0198     		ldr	r0, [sp, #4]
 1386 002e 0BB0     		add	sp, sp, #44
 1387              		@ sp needed
 1388 0030 0CBC     		pop	{r2, r3}
 1389 0032 9046     		mov	r8, r2
 1390 0034 9A46     		mov	r10, r3
 1391 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1392              	.LVL195:
 1393              	.L121:
1554:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
 1394              		.loc 1 1554 0
 1395 0038 02AA     		add	r2, sp, #8
 1396 003a 2100     		movs	r1, r4
 1397 003c 0098     		ldr	r0, [sp]
 1398              	.LVL196:
 1399 003e FFF7FEFF 		bl	flash_get_matched_operation_info
 1400              	.LVL197:
1555:../drivers/fsl_flash.c ****     blockSize = flashOperationInfo.activeBlockSize;
 1401              		.loc 1 1555 0
 1402 0042 029F     		ldr	r7, [sp, #8]
 1403              	.LVL198:
1556:../drivers/fsl_flash.c **** 
 1404              		.loc 1 1556 0
 1405 0044 049B     		ldr	r3, [sp, #16]
 1406 0046 9846     		mov	r8, r3
 1407              	.LVL199:
1558:../drivers/fsl_flash.c ****     if (nextBlockStartAddress == start)
 1408              		.loc 1 1558 0
 1409 0048 7A42     		rsbs	r2, r7, #0
 1410 004a 5B42     		rsbs	r3, r3, #0
 1411              	.LVL200:
 1412 004c 1340     		ands	r3, r2
 1413 004e 5E42     		rsbs	r6, r3, #0
 1414              	.LVL201:
1559:../drivers/fsl_flash.c ****     {
 1415              		.loc 1 1559 0
 1416 0050 B742     		cmp	r7, r6
 1417 0052 1DD1     		bne	.L116
 1418 0054 4246     		mov	r2, r8
 1419 0056 D61A     		subs	r6, r2, r3
 1420              	.LVL202:
 1421 0058 1AE0     		b	.L116
 1422              	.LVL203:
 1423              	.L117:
 1424              	.LBB4:
1575:../drivers/fsl_flash.c **** 
 1425              		.loc 1 1575 0
 1426 005a 0799     		ldr	r1, [sp, #28]
 1427 005c 2000     		movs	r0, r4
 1428 005e FFF7FEFF 		bl	__aeabi_uidiv
 1429              	.LVL204:
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1430              		.loc 1 1578 0
 1431 0062 3A02     		lsls	r2, r7, #8
 1432 0064 120A     		lsrs	r2, r2, #8
 1433 0066 8023     		movs	r3, #128
 1434 0068 5B04     		lsls	r3, r3, #17
 1435 006a 1343     		orrs	r3, r2
 1436 006c 0D4A     		ldr	r2, .L122
 1437 006e 1360     		str	r3, [r2]
1579:../drivers/fsl_flash.c **** 
 1438              		.loc 1 1579 0
 1439 0070 0004     		lsls	r0, r0, #16
 1440              	.LVL205:
 1441 0072 5346     		mov	r3, r10
 1442 0074 1B02     		lsls	r3, r3, #8
 1443 0076 1843     		orrs	r0, r3
 1444 0078 FF23     		movs	r3, #255
 1445 007a 1843     		orrs	r0, r3
 1446 007c 0A4B     		ldr	r3, .L122+4
 1447 007e 1860     		str	r0, [r3]
1582:../drivers/fsl_flash.c ****         if (returnCode)
 1448              		.loc 1 1582 0
 1449 0080 0098     		ldr	r0, [sp]
 1450 0082 FFF7FEFF 		bl	flash_command_sequence
 1451              	.LVL206:
1583:../drivers/fsl_flash.c ****         {
 1452              		.loc 1 1583 0
 1453 0086 0028     		cmp	r0, #0
 1454 0088 09D1     		bne	.L120
1588:../drivers/fsl_flash.c ****         start += verifyLength;
 1455              		.loc 1 1588 0
 1456 008a 2D1B     		subs	r5, r5, r4
 1457              	.LVL207:
1589:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
 1458              		.loc 1 1589 0
 1459 008c 3F19     		adds	r7, r7, r4
 1460              	.LVL208:
1590:../drivers/fsl_flash.c ****     }
 1461              		.loc 1 1590 0
 1462 008e 4644     		add	r6, r6, r8
 1463              	.LVL209:
 1464              	.L116:
 1465              	.LBE4:
1566:../drivers/fsl_flash.c ****     {
 1466              		.loc 1 1566 0
 1467 0090 002D     		cmp	r5, #0
 1468 0092 CBD0     		beq	.L113
 1469              	.LBB5:
1569:../drivers/fsl_flash.c ****         if (verifyLength > remainingBytes)
 1470              		.loc 1 1569 0
 1471 0094 F41B     		subs	r4, r6, r7
 1472              	.LVL210:
1570:../drivers/fsl_flash.c ****         {
 1473              		.loc 1 1570 0
 1474 0096 A542     		cmp	r5, r4
 1475 0098 DFD2     		bcs	.L117
1572:../drivers/fsl_flash.c ****         }
 1476              		.loc 1 1572 0
 1477 009a 2C00     		movs	r4, r5
 1478              	.LVL211:
 1479 009c DDE7     		b	.L117
 1480              	.LVL212:
 1481              	.L120:
1585:../drivers/fsl_flash.c ****         }
 1482              		.loc 1 1585 0
 1483 009e 0190     		str	r0, [sp, #4]
 1484 00a0 C4E7     		b	.L113
 1485              	.L123:
 1486 00a2 C046     		.align	2
 1487              	.L122:
 1488 00a4 04000240 		.word	1073872900
 1489 00a8 08000240 		.word	1073872904
 1490              	.LBE5:
 1491              		.cfi_endproc
 1492              	.LFE66:
 1494              		.section	.text.FLASH_VerifyProgram,"ax",%progbits
 1495              		.align	1
 1496              		.global	FLASH_VerifyProgram
 1497              		.syntax unified
 1498              		.code	16
 1499              		.thumb_func
 1500              		.fpu softvfp
 1502              	FLASH_VerifyProgram:
 1503              	.LFB67:
1603:../drivers/fsl_flash.c ****     status_t returnCode;
 1504              		.loc 1 1603 0
 1505              		.cfi_startproc
 1506              		@ args = 12, pretend = 0, frame = 40
 1507              		@ frame_needed = 0, uses_anonymous_args = 0
 1508              	.LVL213:
 1509 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1510              		.cfi_def_cfa_offset 20
 1511              		.cfi_offset 4, -20
 1512              		.cfi_offset 5, -16
 1513              		.cfi_offset 6, -12
 1514              		.cfi_offset 7, -8
 1515              		.cfi_offset 14, -4
 1516 0002 8BB0     		sub	sp, sp, #44
 1517              		.cfi_def_cfa_offset 64
 1518 0004 0190     		str	r0, [sp, #4]
 1519 0006 0F00     		movs	r7, r1
 1520 0008 1600     		movs	r6, r2
 1521 000a 1D00     		movs	r5, r3
 1522 000c 10AB     		add	r3, sp, #64
 1523              	.LVL214:
 1524 000e 1C78     		ldrb	r4, [r3]
1607:../drivers/fsl_flash.c ****     {
 1525              		.loc 1 1607 0
 1526 0010 002D     		cmp	r5, #0
 1527 0012 34D0     		beq	.L130
1612:../drivers/fsl_flash.c **** 
 1528              		.loc 1 1612 0
 1529 0014 02AA     		add	r2, sp, #8
 1530              	.LVL215:
 1531 0016 FFF7FEFF 		bl	flash_get_matched_operation_info
 1532              	.LVL216:
1614:../drivers/fsl_flash.c ****     if (returnCode)
 1533              		.loc 1 1614 0
 1534 001a 099B     		ldr	r3, [sp, #36]
 1535 001c 3200     		movs	r2, r6
 1536 001e 3900     		movs	r1, r7
 1537 0020 0198     		ldr	r0, [sp, #4]
 1538 0022 FFF7FEFF 		bl	flash_check_range
 1539              	.LVL217:
1615:../drivers/fsl_flash.c ****     {
 1540              		.loc 1 1615 0
 1541 0026 0028     		cmp	r0, #0
 1542 0028 2AD1     		bne	.L124
1620:../drivers/fsl_flash.c **** 
 1543              		.loc 1 1620 0
 1544 002a 029F     		ldr	r7, [sp, #8]
 1545              	.LVL218:
 1546              	.L126:
1622:../drivers/fsl_flash.c ****     {
 1547              		.loc 1 1622 0
 1548 002c 002E     		cmp	r6, #0
 1549 002e 27D0     		beq	.L124
1625:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
 1550              		.loc 1 1625 0
 1551 0030 3A02     		lsls	r2, r7, #8
 1552 0032 120A     		lsrs	r2, r2, #8
 1553 0034 8023     		movs	r3, #128
 1554 0036 9B04     		lsls	r3, r3, #18
 1555 0038 1343     		orrs	r3, r2
 1556 003a 124A     		ldr	r2, .L132
 1557 003c 1360     		str	r3, [r2]
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1558              		.loc 1 1626 0
 1559 003e 2206     		lsls	r2, r4, #24
 1560 0040 114B     		ldr	r3, .L132+4
 1561 0042 1343     		orrs	r3, r2
 1562 0044 114A     		ldr	r2, .L132+8
 1563 0046 1360     		str	r3, [r2]
1627:../drivers/fsl_flash.c **** 
 1564              		.loc 1 1627 0
 1565 0048 114B     		ldr	r3, .L132+12
 1566 004a 2A68     		ldr	r2, [r5]
 1567 004c 1A60     		str	r2, [r3]
1630:../drivers/fsl_flash.c **** 
 1568              		.loc 1 1630 0
 1569 004e 0198     		ldr	r0, [sp, #4]
 1570              	.LVL219:
 1571 0050 FFF7FEFF 		bl	flash_command_sequence
 1572              	.LVL220:
1633:../drivers/fsl_flash.c ****         {
 1573              		.loc 1 1633 0
 1574 0054 0028     		cmp	r0, #0
 1575 0056 07D1     		bne	.L131
1646:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
 1576              		.loc 1 1646 0
 1577 0058 099B     		ldr	r3, [sp, #36]
 1578 005a F61A     		subs	r6, r6, r3
 1579              	.LVL221:
1647:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
 1580              		.loc 1 1647 0
 1581 005c 0322     		movs	r2, #3
 1582 005e 1900     		movs	r1, r3
 1583 0060 9143     		bics	r1, r2
 1584 0062 6D18     		adds	r5, r5, r1
 1585              	.LVL222:
1648:../drivers/fsl_flash.c ****     }
 1586              		.loc 1 1648 0
 1587 0064 FF18     		adds	r7, r7, r3
 1588              	.LVL223:
 1589 0066 E1E7     		b	.L126
 1590              	.L131:
1635:../drivers/fsl_flash.c ****             {
 1591              		.loc 1 1635 0
 1592 0068 119B     		ldr	r3, [sp, #68]
 1593 006a 002B     		cmp	r3, #0
 1594 006c 00D0     		beq	.L128
1637:../drivers/fsl_flash.c ****             }
 1595              		.loc 1 1637 0
 1596 006e 1F60     		str	r7, [r3]
 1597              	.L128:
1639:../drivers/fsl_flash.c ****             {
 1598              		.loc 1 1639 0
 1599 0070 129B     		ldr	r3, [sp, #72]
 1600 0072 002B     		cmp	r3, #0
 1601 0074 04D0     		beq	.L124
1641:../drivers/fsl_flash.c ****             }
 1602              		.loc 1 1641 0
 1603 0076 0023     		movs	r3, #0
 1604 0078 129A     		ldr	r2, [sp, #72]
 1605 007a 1360     		str	r3, [r2]
 1606 007c 00E0     		b	.L124
 1607              	.LVL224:
 1608              	.L130:
1609:../drivers/fsl_flash.c ****     }
 1609              		.loc 1 1609 0
 1610 007e 0420     		movs	r0, #4
 1611              	.LVL225:
 1612              	.L124:
1652:../drivers/fsl_flash.c **** 
 1613              		.loc 1 1652 0
 1614 0080 0BB0     		add	sp, sp, #44
 1615              		@ sp needed
 1616              	.LVL226:
 1617              	.LVL227:
 1618              	.LVL228:
 1619 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 1620              	.L133:
 1621              		.align	2
 1622              	.L132:
 1623 0084 04000240 		.word	1073872900
 1624 0088 FFFFFF00 		.word	16777215
 1625 008c 08000240 		.word	1073872904
 1626 0090 0C000240 		.word	1073872908
 1627              		.cfi_endproc
 1628              	.LFE67:
 1630              		.section	.text.FLASH_VerifyEraseAllExecuteOnlySegments,"ax",%progbits
 1631              		.align	1
 1632              		.global	FLASH_VerifyEraseAllExecuteOnlySegments
 1633              		.syntax unified
 1634              		.code	16
 1635              		.thumb_func
 1636              		.fpu softvfp
 1638              	FLASH_VerifyEraseAllExecuteOnlySegments:
 1639              	.LFB68:
1655:../drivers/fsl_flash.c ****     if (config == NULL)
 1640              		.loc 1 1655 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 0
 1643              		@ frame_needed = 0, uses_anonymous_args = 0
 1644              	.LVL229:
 1645 0000 10B5     		push	{r4, lr}
 1646              		.cfi_def_cfa_offset 8
 1647              		.cfi_offset 4, -8
 1648              		.cfi_offset 14, -4
1656:../drivers/fsl_flash.c ****     {
 1649              		.loc 1 1656 0
 1650 0002 0028     		cmp	r0, #0
 1651 0004 07D0     		beq	.L136
1662:../drivers/fsl_flash.c **** 
 1652              		.loc 1 1662 0
 1653 0006 0904     		lsls	r1, r1, #16
 1654              	.LVL230:
 1655 0008 044B     		ldr	r3, .L137
 1656 000a 1943     		orrs	r1, r3
 1657 000c 044B     		ldr	r3, .L137+4
 1658 000e 1960     		str	r1, [r3]
1665:../drivers/fsl_flash.c **** }
 1659              		.loc 1 1665 0
 1660 0010 FFF7FEFF 		bl	flash_command_sequence
 1661              	.LVL231:
 1662              	.L134:
1666:../drivers/fsl_flash.c **** 
 1663              		.loc 1 1666 0
 1664              		@ sp needed
 1665 0014 10BD     		pop	{r4, pc}
 1666              	.LVL232:
 1667              	.L136:
1658:../drivers/fsl_flash.c ****     }
 1668              		.loc 1 1658 0
 1669 0016 0420     		movs	r0, #4
 1670              	.LVL233:
 1671 0018 FCE7     		b	.L134
 1672              	.L138:
 1673 001a C046     		.align	2
 1674              	.L137:
 1675 001c FFFF004A 		.word	1241579519
 1676 0020 04000240 		.word	1073872900
 1677              		.cfi_endproc
 1678              	.LFE68:
 1680              		.section	.text.FLASH_IsProtected,"ax",%progbits
 1681              		.align	1
 1682              		.global	FLASH_IsProtected
 1683              		.syntax unified
 1684              		.code	16
 1685              		.thumb_func
 1686              		.fpu softvfp
 1688              	FLASH_IsProtected:
 1689              	.LFB69:
1672:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
 1690              		.loc 1 1672 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 176
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694              	.LVL234:
 1695 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1696              		.cfi_def_cfa_offset 20
 1697              		.cfi_offset 4, -20
 1698              		.cfi_offset 5, -16
 1699              		.cfi_offset 6, -12
 1700              		.cfi_offset 7, -8
 1701              		.cfi_offset 14, -4
 1702 0002 C646     		mov	lr, r8
 1703 0004 00B5     		push	{lr}
 1704              		.cfi_def_cfa_offset 24
 1705              		.cfi_offset 8, -24
 1706 0006 ACB0     		sub	sp, sp, #176
 1707              		.cfi_def_cfa_offset 200
 1708 0008 0600     		movs	r6, r0
 1709 000a 0C00     		movs	r4, r1
 1710 000c 1500     		movs	r5, r2
 1711 000e 1F1E     		subs	r7, r3, #0
1691:../drivers/fsl_flash.c ****     {
 1712              		.loc 1 1691 0
 1713 0010 00D1     		bne	.LCB1745
 1714 0012 86E0     		b	.L156	@long jump
 1715              	.LCB1745:
1697:../drivers/fsl_flash.c ****     if (returnCode)
 1716              		.loc 1 1697 0
 1717 0014 0423     		movs	r3, #4
 1718              	.LVL235:
 1719 0016 FFF7FEFF 		bl	flash_check_range
 1720              	.LVL236:
1698:../drivers/fsl_flash.c ****     {
 1721              		.loc 1 1698 0
 1722 001a 0028     		cmp	r0, #0
 1723 001c 03D0     		beq	.L158
 1724              	.LVL237:
 1725              	.L139:
1858:../drivers/fsl_flash.c **** 
 1726              		.loc 1 1858 0
 1727 001e 2CB0     		add	sp, sp, #176
 1728              		@ sp needed
 1729              	.LVL238:
 1730              	.LVL239:
 1731 0020 04BC     		pop	{r2}
 1732 0022 9046     		mov	r8, r2
 1733 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
 1734              	.LVL240:
 1735              	.L158:
1704:../drivers/fsl_flash.c ****     if (returnCode)
 1736              		.loc 1 1704 0
 1737 0026 6946     		mov	r1, sp
 1738 0028 3000     		movs	r0, r6
 1739              	.LVL241:
 1740 002a FFF7FEFF 		bl	flash_get_protection_info
 1741              	.LVL242:
1705:../drivers/fsl_flash.c ****     {
 1742              		.loc 1 1705 0
 1743 002e 0028     		cmp	r0, #0
 1744 0030 F5D1     		bne	.L139
1711:../drivers/fsl_flash.c **** 
 1745              		.loc 1 1711 0
 1746 0032 6519     		adds	r5, r4, r5
 1747              	.LVL243:
1714:../drivers/fsl_flash.c **** 
 1748              		.loc 1 1714 0
 1749 0034 0023     		movs	r3, #0
1717:../drivers/fsl_flash.c ****     {
 1750              		.loc 1 1717 0
 1751 0036 08E0     		b	.L141
 1752              	.LVL244:
 1753              	.L142:
1720:../drivers/fsl_flash.c ****         regionCounter++;
 1754              		.loc 1 1720 0
 1755 0038 019A     		ldr	r2, [sp, #4]
 1756 003a 5A43     		muls	r2, r3
 1757 003c 0099     		ldr	r1, [sp]
 1758 003e 8C46     		mov	ip, r1
 1759 0040 6244     		add	r2, r2, ip
1719:../drivers/fsl_flash.c ****             flashProtectionInfo.regionBase + flashProtectionInfo.regionSize * regionCounter;
 1760              		.loc 1 1719 0
 1761 0042 9E00     		lsls	r6, r3, #2
 1762 0044 03A9     		add	r1, sp, #12
 1763 0046 7250     		str	r2, [r6, r1]
1721:../drivers/fsl_flash.c ****     }
 1764              		.loc 1 1721 0
 1765 0048 0133     		adds	r3, r3, #1
 1766              	.LVL245:
 1767              	.L141:
1717:../drivers/fsl_flash.c ****     {
 1768              		.loc 1 1717 0
 1769 004a 029A     		ldr	r2, [sp, #8]
 1770 004c 9A42     		cmp	r2, r3
 1771 004e F3D2     		bcs	.L142
1733:../drivers/fsl_flash.c ****     while (regionCounter < flashProtectionInfo.regionCount)
 1772              		.loc 1 1733 0
 1773 0050 0023     		movs	r3, #0
 1774              	.LVL246:
 1775              	.L143:
1734:../drivers/fsl_flash.c ****     {
 1776              		.loc 1 1734 0
 1777 0052 9A42     		cmp	r2, r3
 1778 0054 3AD9     		bls	.L159
1756:../drivers/fsl_flash.c ****             {
 1779              		.loc 1 1756 0
 1780 0056 072B     		cmp	r3, #7
 1781 0058 10D9     		bls	.L160
1760:../drivers/fsl_flash.c ****             {
 1782              		.loc 1 1760 0
 1783 005a 1900     		movs	r1, r3
 1784 005c 0839     		subs	r1, r1, #8
 1785 005e 0729     		cmp	r1, #7
 1786 0060 16D9     		bls	.L161
1771:../drivers/fsl_flash.c ****             {
 1787              		.loc 1 1771 0
 1788 0062 1900     		movs	r1, r3
 1789 0064 1039     		subs	r1, r1, #16
 1790 0066 0729     		cmp	r1, #7
 1791 0068 1CD9     		bls	.L162
1778:../drivers/fsl_flash.c ****             {
 1792              		.loc 1 1778 0
 1793 006a 1900     		movs	r1, r3
 1794 006c 1839     		subs	r1, r1, #24
 1795 006e 0729     		cmp	r1, #7
 1796 0070 22D9     		bls	.L163
 1797 0072 0023     		movs	r3, #0
 1798              	.LVL247:
 1799 0074 9C46     		mov	ip, r3
 1800 0076 0022     		movs	r2, #0
 1801 0078 0026     		movs	r6, #0
 1802 007a 30E0     		b	.L152
 1803              	.LVL248:
 1804              	.L160:
1758:../drivers/fsl_flash.c ****             }
 1805              		.loc 1 1758 0
 1806 007c 2A49     		ldr	r1, .L167
 1807 007e 097C     		ldrb	r1, [r1, #16]
 1808 0080 C9B2     		uxtb	r1, r1
 1809 0082 1941     		asrs	r1, r1, r3
 1810 0084 0126     		movs	r6, #1
 1811 0086 3140     		ands	r1, r6
 1812 0088 24AE     		add	r6, sp, #144
 1813 008a F154     		strb	r1, [r6, r3]
 1814              	.L145:
1808:../drivers/fsl_flash.c ****     }
 1815              		.loc 1 1808 0
 1816 008c 0133     		adds	r3, r3, #1
 1817              	.LVL249:
 1818 008e E0E7     		b	.L143
 1819              	.L161:
1762:../drivers/fsl_flash.c ****             }
 1820              		.loc 1 1762 0
 1821 0090 254E     		ldr	r6, .L167
 1822 0092 767C     		ldrb	r6, [r6, #17]
 1823 0094 F6B2     		uxtb	r6, r6
 1824 0096 0E41     		asrs	r6, r6, r1
 1825 0098 3100     		movs	r1, r6
 1826 009a 0126     		movs	r6, #1
 1827 009c 3140     		ands	r1, r6
 1828 009e 24AE     		add	r6, sp, #144
 1829 00a0 F154     		strb	r1, [r6, r3]
 1830 00a2 F3E7     		b	.L145
 1831              	.L162:
1773:../drivers/fsl_flash.c ****             }
 1832              		.loc 1 1773 0
 1833 00a4 204E     		ldr	r6, .L167
 1834 00a6 B67C     		ldrb	r6, [r6, #18]
 1835 00a8 F6B2     		uxtb	r6, r6
 1836 00aa 0E41     		asrs	r6, r6, r1
 1837 00ac 3100     		movs	r1, r6
 1838 00ae 0126     		movs	r6, #1
 1839 00b0 3140     		ands	r1, r6
 1840 00b2 24AE     		add	r6, sp, #144
 1841 00b4 F154     		strb	r1, [r6, r3]
 1842 00b6 E9E7     		b	.L145
 1843              	.L163:
1780:../drivers/fsl_flash.c ****             }
 1844              		.loc 1 1780 0
 1845 00b8 1B4E     		ldr	r6, .L167
 1846 00ba F67C     		ldrb	r6, [r6, #19]
 1847 00bc F6B2     		uxtb	r6, r6
 1848 00be 0E41     		asrs	r6, r6, r1
 1849 00c0 3100     		movs	r1, r6
 1850 00c2 0126     		movs	r6, #1
 1851 00c4 3140     		ands	r1, r6
 1852 00c6 24AE     		add	r6, sp, #144
 1853 00c8 F154     		strb	r1, [r6, r3]
 1854 00ca DFE7     		b	.L145
 1855              	.L159:
 1856 00cc 0023     		movs	r3, #0
 1857              	.LVL250:
 1858 00ce 9C46     		mov	ip, r3
 1859 00d0 0022     		movs	r2, #0
 1860 00d2 0026     		movs	r6, #0
 1861 00d4 03E0     		b	.L152
 1862              	.LVL251:
 1863              	.L151:
1835:../drivers/fsl_flash.c ****         }
 1864              		.loc 1 1835 0
 1865 00d6 019B     		ldr	r3, [sp, #4]
 1866 00d8 9846     		mov	r8, r3
 1867 00da 4444     		add	r4, r4, r8
 1868              	.LVL252:
 1869              	.L150:
1837:../drivers/fsl_flash.c ****     }
 1870              		.loc 1 1837 0
 1871 00dc 0132     		adds	r2, r2, #1
 1872              	.LVL253:
 1873              	.L152:
1817:../drivers/fsl_flash.c ****     {
 1874              		.loc 1 1817 0
 1875 00de AC42     		cmp	r4, r5
 1876 00e0 12D2     		bcs	.L164
1823:../drivers/fsl_flash.c ****         {
 1877              		.loc 1 1823 0
 1878 00e2 9300     		lsls	r3, r2, #2
 1879 00e4 03A9     		add	r1, sp, #12
 1880 00e6 5B58     		ldr	r3, [r3, r1]
 1881 00e8 A342     		cmp	r3, r4
 1882 00ea F7D8     		bhi	.L150
1823:../drivers/fsl_flash.c ****         {
 1883              		.loc 1 1823 0 is_stmt 0 discriminator 1
 1884 00ec 531C     		adds	r3, r2, #1
 1885 00ee 9B00     		lsls	r3, r3, #2
 1886 00f0 5B58     		ldr	r3, [r3, r1]
 1887 00f2 A342     		cmp	r3, r4
 1888 00f4 F2D9     		bls	.L150
1826:../drivers/fsl_flash.c **** 
 1889              		.loc 1 1826 0 is_stmt 1
 1890 00f6 0136     		adds	r6, r6, #1
 1891              	.LVL254:
1830:../drivers/fsl_flash.c ****             {
 1892              		.loc 1 1830 0
 1893 00f8 24AB     		add	r3, sp, #144
 1894 00fa 9B5C     		ldrb	r3, [r3, r2]
 1895 00fc 002B     		cmp	r3, #0
 1896 00fe EAD1     		bne	.L151
1833:../drivers/fsl_flash.c ****             }
 1897              		.loc 1 1833 0
 1898 0100 0133     		adds	r3, r3, #1
 1899 0102 9846     		mov	r8, r3
 1900 0104 C444     		add	ip, ip, r8
 1901              	.LVL255:
 1902 0106 E6E7     		b	.L151
 1903              	.L164:
1841:../drivers/fsl_flash.c ****     {
 1904              		.loc 1 1841 0
 1905 0108 6346     		mov	r3, ip
 1906 010a 002B     		cmp	r3, #0
 1907 010c 04D0     		beq	.L165
 1908              	.LVL256:
1846:../drivers/fsl_flash.c ****     {
 1909              		.loc 1 1846 0
 1910 010e 6645     		cmp	r6, ip
 1911 0110 04D0     		beq	.L166
1854:../drivers/fsl_flash.c ****     }
 1912              		.loc 1 1854 0
 1913 0112 0223     		movs	r3, #2
 1914              	.LVL257:
 1915 0114 3B70     		strb	r3, [r7]
 1916 0116 82E7     		b	.L139
 1917              	.LVL258:
 1918              	.L165:
1843:../drivers/fsl_flash.c ****     }
 1919              		.loc 1 1843 0
 1920 0118 3B70     		strb	r3, [r7]
 1921 011a 80E7     		b	.L139
 1922              	.L166:
1848:../drivers/fsl_flash.c ****     }
 1923              		.loc 1 1848 0
 1924 011c 0123     		movs	r3, #1
 1925              	.LVL259:
 1926 011e 3B70     		strb	r3, [r7]
 1927 0120 7DE7     		b	.L139
 1928              	.LVL260:
 1929              	.L156:
1693:../drivers/fsl_flash.c ****     }
 1930              		.loc 1 1693 0
 1931 0122 0420     		movs	r0, #4
 1932              	.LVL261:
 1933 0124 7BE7     		b	.L139
 1934              	.L168:
 1935 0126 C046     		.align	2
 1936              	.L167:
 1937 0128 00000240 		.word	1073872896
 1938              		.cfi_endproc
 1939              	.LFE69:
 1941              		.section	.text.FLASH_IsExecuteOnly,"ax",%progbits
 1942              		.align	1
 1943              		.global	FLASH_IsExecuteOnly
 1944              		.syntax unified
 1945              		.code	16
 1946              		.thumb_func
 1947              		.fpu softvfp
 1949              	FLASH_IsExecuteOnly:
 1950              	.LFB70:
1864:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 1951              		.loc 1 1864 0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 0
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 1955              	.LVL262:
 1956 0000 10B5     		push	{r4, lr}
 1957              		.cfi_def_cfa_offset 8
 1958              		.cfi_offset 4, -8
 1959              		.cfi_offset 14, -4
 1960 0002 1C1E     		subs	r4, r3, #0
1870:../drivers/fsl_flash.c ****     {
 1961              		.loc 1 1870 0
 1962 0004 07D0     		beq	.L171
1876:../drivers/fsl_flash.c ****     if (returnCode)
 1963              		.loc 1 1876 0
 1964 0006 0423     		movs	r3, #4
 1965              	.LVL263:
 1966 0008 FFF7FEFF 		bl	flash_check_range
 1967              	.LVL264:
1877:../drivers/fsl_flash.c ****     {
 1968              		.loc 1 1877 0
 1969 000c 0028     		cmp	r0, #0
 1970 000e 01D1     		bne	.L169
1978:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 1971              		.loc 1 1978 0
 1972 0010 0023     		movs	r3, #0
 1973 0012 2370     		strb	r3, [r4]
 1974              	.LVL265:
 1975              	.L169:
1982:../drivers/fsl_flash.c **** 
 1976              		.loc 1 1982 0
 1977              		@ sp needed
 1978              	.LVL266:
 1979 0014 10BD     		pop	{r4, pc}
 1980              	.LVL267:
 1981              	.L171:
1872:../drivers/fsl_flash.c ****     }
 1982              		.loc 1 1872 0
 1983 0016 0420     		movs	r0, #4
 1984              	.LVL268:
 1985 0018 FCE7     		b	.L169
 1986              		.cfi_endproc
 1987              	.LFE70:
 1989              		.section	.text.FLASH_GetProperty,"ax",%progbits
 1990              		.align	1
 1991              		.global	FLASH_GetProperty
 1992              		.syntax unified
 1993              		.code	16
 1994              		.thumb_func
 1995              		.fpu softvfp
 1997              	FLASH_GetProperty:
 1998              	.LFB71:
1985:../drivers/fsl_flash.c ****     if ((config == NULL) || (value == NULL))
 1999              		.loc 1 1985 0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 0
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
 2003              	.LVL269:
 2004 0000 10B5     		push	{r4, lr}
 2005              		.cfi_def_cfa_offset 8
 2006              		.cfi_offset 4, -8
 2007              		.cfi_offset 14, -4
 2008 0002 1400     		movs	r4, r2
1986:../drivers/fsl_flash.c ****     {
 2009              		.loc 1 1986 0
 2010 0004 0028     		cmp	r0, #0
 2011 0006 33D0     		beq	.L185
1986:../drivers/fsl_flash.c ****     {
 2012              		.loc 1 1986 0 is_stmt 0 discriminator 1
 2013 0008 002A     		cmp	r2, #0
 2014 000a 33D0     		beq	.L186
1991:../drivers/fsl_flash.c ****     {
 2015              		.loc 1 1991 0 is_stmt 1
 2016 000c 0929     		cmp	r1, #9
 2017 000e 33D8     		bhi	.L187
 2018 0010 8900     		lsls	r1, r1, #2
 2019              	.LVL270:
 2020 0012 1A4B     		ldr	r3, .L188
 2021 0014 5B58     		ldr	r3, [r3, r1]
 2022 0016 9F46     		mov	pc, r3
 2023              		.section	.rodata.FLASH_GetProperty,"a",%progbits
 2024              		.align	2
 2025              	.L175:
 2026 0000 18000000 		.word	.L174
 2027 0004 20000000 		.word	.L176
 2028 0008 28000000 		.word	.L177
 2029 000c 38000000 		.word	.L178
 2030 0010 40000000 		.word	.L179
 2031 0014 48000000 		.word	.L180
 2032 0018 50000000 		.word	.L181
 2033 001c 58000000 		.word	.L182
 2034 0020 60000000 		.word	.L183
 2035 0024 68000000 		.word	.L184
 2036              		.section	.text.FLASH_GetProperty
 2037              	.L174:
1994:../drivers/fsl_flash.c ****             break;
 2038              		.loc 1 1994 0
 2039 0018 C368     		ldr	r3, [r0, #12]
 2040 001a 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2041              		.loc 1 2062 0
 2042 001c 0020     		movs	r0, #0
 2043              	.LVL271:
1995:../drivers/fsl_flash.c **** 
 2044              		.loc 1 1995 0
 2045 001e 28E0     		b	.L172
 2046              	.LVL272:
 2047              	.L176:
1998:../drivers/fsl_flash.c ****             break;
 2048              		.loc 1 1998 0
 2049 0020 4368     		ldr	r3, [r0, #4]
 2050 0022 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2051              		.loc 1 2062 0
 2052 0024 0020     		movs	r0, #0
 2053              	.LVL273:
1999:../drivers/fsl_flash.c **** 
 2054              		.loc 1 1999 0
 2055 0026 24E0     		b	.L172
 2056              	.LVL274:
 2057              	.L177:
2002:../drivers/fsl_flash.c ****             break;
 2058              		.loc 1 2002 0
 2059 0028 4368     		ldr	r3, [r0, #4]
 2060 002a 017A     		ldrb	r1, [r0, #8]
 2061 002c 1800     		movs	r0, r3
 2062              	.LVL275:
 2063 002e FFF7FEFF 		bl	__aeabi_uidiv
 2064              	.LVL276:
 2065 0032 2060     		str	r0, [r4]
2062:../drivers/fsl_flash.c **** }
 2066              		.loc 1 2062 0
 2067 0034 0020     		movs	r0, #0
2003:../drivers/fsl_flash.c **** 
 2068              		.loc 1 2003 0
 2069 0036 1CE0     		b	.L172
 2070              	.LVL277:
 2071              	.L178:
2006:../drivers/fsl_flash.c ****             break;
 2072              		.loc 1 2006 0
 2073 0038 037A     		ldrb	r3, [r0, #8]
 2074 003a 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2075              		.loc 1 2062 0
 2076 003c 0020     		movs	r0, #0
 2077              	.LVL278:
2007:../drivers/fsl_flash.c **** 
 2078              		.loc 1 2007 0
 2079 003e 18E0     		b	.L172
 2080              	.LVL279:
 2081              	.L179:
2010:../drivers/fsl_flash.c ****             break;
 2082              		.loc 1 2010 0
 2083 0040 0368     		ldr	r3, [r0]
 2084 0042 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2085              		.loc 1 2062 0
 2086 0044 0020     		movs	r0, #0
 2087              	.LVL280:
2011:../drivers/fsl_flash.c **** 
 2088              		.loc 1 2011 0
 2089 0046 14E0     		b	.L172
 2090              	.LVL281:
 2091              	.L180:
2015:../drivers/fsl_flash.c **** #else
 2092              		.loc 1 2015 0
 2093 0048 0023     		movs	r3, #0
 2094 004a 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2095              		.loc 1 2062 0
 2096 004c 0020     		movs	r0, #0
 2097              	.LVL282:
2019:../drivers/fsl_flash.c **** 
 2098              		.loc 1 2019 0
 2099 004e 10E0     		b	.L172
 2100              	.LVL283:
 2101              	.L181:
2022:../drivers/fsl_flash.c ****             break;
 2102              		.loc 1 2022 0
 2103 0050 4369     		ldr	r3, [r0, #20]
 2104 0052 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2105              		.loc 1 2062 0
 2106 0054 0020     		movs	r0, #0
 2107              	.LVL284:
2023:../drivers/fsl_flash.c **** 
 2108              		.loc 1 2023 0
 2109 0056 0CE0     		b	.L172
 2110              	.LVL285:
 2111              	.L182:
2026:../drivers/fsl_flash.c ****             break;
 2112              		.loc 1 2026 0
 2113 0058 8369     		ldr	r3, [r0, #24]
 2114 005a 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2115              		.loc 1 2062 0
 2116 005c 0020     		movs	r0, #0
 2117              	.LVL286:
2027:../drivers/fsl_flash.c **** 
 2118              		.loc 1 2027 0
 2119 005e 08E0     		b	.L172
 2120              	.LVL287:
 2121              	.L183:
2030:../drivers/fsl_flash.c ****             break;
 2122              		.loc 1 2030 0
 2123 0060 036A     		ldr	r3, [r0, #32]
 2124 0062 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2125              		.loc 1 2062 0
 2126 0064 0020     		movs	r0, #0
 2127              	.LVL288:
2031:../drivers/fsl_flash.c **** 
 2128              		.loc 1 2031 0
 2129 0066 04E0     		b	.L172
 2130              	.LVL289:
 2131              	.L184:
2034:../drivers/fsl_flash.c ****             break;
 2132              		.loc 1 2034 0
 2133 0068 436A     		ldr	r3, [r0, #36]
 2134 006a 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 2135              		.loc 1 2062 0
 2136 006c 0020     		movs	r0, #0
 2137              	.LVL290:
2035:../drivers/fsl_flash.c **** 
 2138              		.loc 1 2035 0
 2139 006e 00E0     		b	.L172
 2140              	.LVL291:
 2141              	.L185:
1988:../drivers/fsl_flash.c ****     }
 2142              		.loc 1 1988 0
 2143 0070 0420     		movs	r0, #4
 2144              	.LVL292:
 2145              	.L172:
2063:../drivers/fsl_flash.c **** 
 2146              		.loc 1 2063 0
 2147              		@ sp needed
 2148              	.LVL293:
 2149 0072 10BD     		pop	{r4, pc}
 2150              	.LVL294:
 2151              	.L186:
1988:../drivers/fsl_flash.c ****     }
 2152              		.loc 1 1988 0
 2153 0074 0420     		movs	r0, #4
 2154              	.LVL295:
 2155 0076 FCE7     		b	.L172
 2156              	.LVL296:
 2157              	.L187:
2059:../drivers/fsl_flash.c ****     }
 2158              		.loc 1 2059 0
 2159 0078 6A20     		movs	r0, #106
 2160              	.LVL297:
 2161 007a FAE7     		b	.L172
 2162              	.L189:
 2163              		.align	2
 2164              	.L188:
 2165 007c 00000000 		.word	.L175
 2166              		.cfi_endproc
 2167              	.LFE71:
 2169              		.section	.text.FLASH_SetProperty,"ax",%progbits
 2170              		.align	1
 2171              		.global	FLASH_SetProperty
 2172              		.syntax unified
 2173              		.code	16
 2174              		.thumb_func
 2175              		.fpu softvfp
 2177              	FLASH_SetProperty:
 2178              	.LFB72:
2066:../drivers/fsl_flash.c ****     status_t status = kStatus_FLASH_Success;
 2179              		.loc 1 2066 0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183              		@ link register save eliminated.
 2184              	.LVL298:
2069:../drivers/fsl_flash.c ****     {
 2185              		.loc 1 2069 0
 2186 0000 0028     		cmp	r0, #0
 2187 0002 05D0     		beq	.L193
2074:../drivers/fsl_flash.c ****     {
 2188              		.loc 1 2074 0
 2189 0004 0929     		cmp	r1, #9
 2190 0006 01D9     		bls	.L195
2108:../drivers/fsl_flash.c ****             break;
 2191              		.loc 1 2108 0
 2192 0008 6A20     		movs	r0, #106
 2193              	.LVL299:
 2194              	.L190:
2113:../drivers/fsl_flash.c **** 
 2195              		.loc 1 2113 0
 2196              		@ sp needed
 2197 000a 7047     		bx	lr
 2198              	.LVL300:
 2199              	.L195:
2105:../drivers/fsl_flash.c ****             break;
 2200              		.loc 1 2105 0
 2201 000c 7620     		movs	r0, #118
 2202              	.LVL301:
 2203 000e FCE7     		b	.L190
 2204              	.LVL302:
 2205              	.L193:
2071:../drivers/fsl_flash.c ****     }
 2206              		.loc 1 2071 0
 2207 0010 0420     		movs	r0, #4
 2208              	.LVL303:
 2209 0012 FAE7     		b	.L190
 2210              		.cfi_endproc
 2211              	.LFE72:
 2213              		.section	.text.FLASH_PflashSetProtection,"ax",%progbits
 2214              		.align	1
 2215              		.global	FLASH_PflashSetProtection
 2216              		.syntax unified
 2217              		.code	16
 2218              		.thumb_func
 2219              		.fpu softvfp
 2221              	FLASH_PflashSetProtection:
 2222              	.LFB73:
2317:../drivers/fsl_flash.c ****     if (config == NULL)
 2223              		.loc 1 2317 0
 2224              		.cfi_startproc
 2225              		@ args = 0, pretend = 0, frame = 0
 2226              		@ frame_needed = 0, uses_anonymous_args = 0
 2227              		@ link register save eliminated.
 2228              	.LVL304:
2318:../drivers/fsl_flash.c ****     {
 2229              		.loc 1 2318 0
 2230 0000 0028     		cmp	r0, #0
 2231 0002 0AD0     		beq	.L198
2341:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.protl32b != *kFPROTL)
 2232              		.loc 1 2341 0
 2233 0004 064B     		ldr	r3, .L201
 2234 0006 0A68     		ldr	r2, [r1]
 2235 0008 1A60     		str	r2, [r3]
2342:../drivers/fsl_flash.c ****         {
 2236              		.loc 1 2342 0
 2237 000a 0A68     		ldr	r2, [r1]
 2238 000c 1B68     		ldr	r3, [r3]
 2239 000e 9A42     		cmp	r2, r3
 2240 0010 01D1     		bne	.L200
2356:../drivers/fsl_flash.c **** }
 2241              		.loc 1 2356 0
 2242 0012 0020     		movs	r0, #0
 2243              	.LVL305:
 2244              	.L196:
2357:../drivers/fsl_flash.c **** 
 2245              		.loc 1 2357 0
 2246              		@ sp needed
 2247 0014 7047     		bx	lr
 2248              	.LVL306:
 2249              	.L200:
2344:../drivers/fsl_flash.c ****         }
 2250              		.loc 1 2344 0
 2251 0016 6920     		movs	r0, #105
 2252              	.LVL307:
 2253 0018 FCE7     		b	.L196
 2254              	.LVL308:
 2255              	.L198:
2320:../drivers/fsl_flash.c ****     }
 2256              		.loc 1 2320 0
 2257 001a 0420     		movs	r0, #4
 2258              	.LVL309:
 2259 001c FAE7     		b	.L196
 2260              	.L202:
 2261 001e C046     		.align	2
 2262              	.L201:
 2263 0020 10000240 		.word	1073872912
 2264              		.cfi_endproc
 2265              	.LFE73:
 2267              		.section	.text.FLASH_PflashGetProtection,"ax",%progbits
 2268              		.align	1
 2269              		.global	FLASH_PflashGetProtection
 2270              		.syntax unified
 2271              		.code	16
 2272              		.thumb_func
 2273              		.fpu softvfp
 2275              	FLASH_PflashGetProtection:
 2276              	.LFB74:
2360:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
 2277              		.loc 1 2360 0
 2278              		.cfi_startproc
 2279              		@ args = 0, pretend = 0, frame = 0
 2280              		@ frame_needed = 0, uses_anonymous_args = 0
 2281              		@ link register save eliminated.
 2282              	.LVL310:
2361:../drivers/fsl_flash.c ****     {
 2283              		.loc 1 2361 0
 2284 0000 0028     		cmp	r0, #0
 2285 0002 06D0     		beq	.L205
2361:../drivers/fsl_flash.c ****     {
 2286              		.loc 1 2361 0 is_stmt 0 discriminator 1
 2287 0004 0029     		cmp	r1, #0
 2288 0006 06D0     		beq	.L206
2375:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
 2289              		.loc 1 2375 0 is_stmt 1
 2290 0008 044B     		ldr	r3, .L207
 2291 000a 1B68     		ldr	r3, [r3]
 2292 000c 0B60     		str	r3, [r1]
2381:../drivers/fsl_flash.c **** }
 2293              		.loc 1 2381 0
 2294 000e 0020     		movs	r0, #0
 2295              	.LVL311:
 2296              	.L203:
2382:../drivers/fsl_flash.c **** 
 2297              		.loc 1 2382 0
 2298              		@ sp needed
 2299 0010 7047     		bx	lr
 2300              	.LVL312:
 2301              	.L205:
2363:../drivers/fsl_flash.c ****     }
 2302              		.loc 1 2363 0
 2303 0012 0420     		movs	r0, #4
 2304              	.LVL313:
 2305 0014 FCE7     		b	.L203
 2306              	.LVL314:
 2307              	.L206:
 2308 0016 0420     		movs	r0, #4
 2309              	.LVL315:
 2310 0018 FAE7     		b	.L203
 2311              	.L208:
 2312 001a C046     		.align	2
 2313              	.L207:
 2314 001c 10000240 		.word	1073872912
 2315              		.cfi_endproc
 2316              	.LFE74:
 2318              		.section	.text.FLASH_PflashSetPrefetchSpeculation,"ax",%progbits
 2319              		.align	1
 2320              		.global	FLASH_PflashSetPrefetchSpeculation
 2321              		.syntax unified
 2322              		.code	16
 2323              		.thumb_func
 2324              		.fpu softvfp
 2326              	FLASH_PflashSetPrefetchSpeculation:
 2327              	.LFB75:
2471:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
 2328              		.loc 1 2471 0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
 2332              		@ link register save eliminated.
 2333              	.LVL316:
 2334              	.LBB6:
2480:../drivers/fsl_flash.c ****         {
 2335              		.loc 1 2480 0
 2336 0000 0378     		ldrb	r3, [r0]
 2337 0002 012B     		cmp	r3, #1
 2338 0004 0ED0     		beq	.L214
2493:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
 2339              		.loc 1 2493 0
 2340 0006 114A     		ldr	r2, .L216
 2341 0008 1368     		ldr	r3, [r2]
 2342 000a 1149     		ldr	r1, .L216+4
 2343 000c 0B40     		ands	r3, r1
 2344 000e 1360     		str	r3, [r2]
2494:../drivers/fsl_flash.c ****             {
 2345              		.loc 1 2494 0
 2346 0010 4378     		ldrb	r3, [r0, #1]
 2347 0012 002B     		cmp	r3, #0
 2348 0014 11D0     		beq	.L215
2500:../drivers/fsl_flash.c ****             }
 2349              		.loc 1 2500 0
 2350 0016 0D4A     		ldr	r2, .L216
 2351 0018 1368     		ldr	r3, [r2]
 2352 001a 0E49     		ldr	r1, .L216+8
 2353 001c 0B40     		ands	r3, r1
 2354 001e 1360     		str	r3, [r2]
 2355              	.LBE6:
2579:../drivers/fsl_flash.c **** }
 2356              		.loc 1 2579 0
 2357 0020 0020     		movs	r0, #0
 2358              	.LVL317:
 2359              	.L209:
2580:../drivers/fsl_flash.c **** 
 2360              		.loc 1 2580 0
 2361              		@ sp needed
 2362 0022 7047     		bx	lr
 2363              	.LVL318:
 2364              	.L214:
 2365              	.LBB7:
2482:../drivers/fsl_flash.c ****             {
 2366              		.loc 1 2482 0
 2367 0024 4378     		ldrb	r3, [r0, #1]
 2368 0026 002B     		cmp	r3, #0
 2369 0028 0ED0     		beq	.L213
2488:../drivers/fsl_flash.c ****             }
 2370              		.loc 1 2488 0
 2371 002a 084A     		ldr	r2, .L216
 2372 002c 1168     		ldr	r1, [r2]
 2373 002e 8023     		movs	r3, #128
 2374 0030 1B02     		lsls	r3, r3, #8
 2375 0032 0B43     		orrs	r3, r1
 2376 0034 1360     		str	r3, [r2]
 2377              	.LBE7:
2579:../drivers/fsl_flash.c **** }
 2378              		.loc 1 2579 0
 2379 0036 0020     		movs	r0, #0
 2380              	.LVL319:
 2381              	.LBB8:
 2382 0038 F3E7     		b	.L209
 2383              	.LVL320:
 2384              	.L215:
2496:../drivers/fsl_flash.c ****             }
 2385              		.loc 1 2496 0
 2386 003a 1168     		ldr	r1, [r2]
 2387 003c 8023     		movs	r3, #128
 2388 003e DB01     		lsls	r3, r3, #7
 2389 0040 0B43     		orrs	r3, r1
 2390 0042 1360     		str	r3, [r2]
 2391              	.LBE8:
2579:../drivers/fsl_flash.c **** }
 2392              		.loc 1 2579 0
 2393 0044 0020     		movs	r0, #0
 2394              	.LVL321:
 2395              	.LBB9:
 2396 0046 ECE7     		b	.L209
 2397              	.LVL322:
 2398              	.L213:
2484:../drivers/fsl_flash.c ****             }
 2399              		.loc 1 2484 0
 2400 0048 7820     		movs	r0, #120
 2401              	.LVL323:
 2402 004a EAE7     		b	.L209
 2403              	.L217:
 2404              		.align	2
 2405              	.L216:
 2406 004c 0C3000F0 		.word	-268423156
 2407 0050 FF7FFFFF 		.word	-32769
 2408 0054 FFBFFFFF 		.word	-16385
 2409              	.LBE9:
 2410              		.cfi_endproc
 2411              	.LFE75:
 2413              		.section	.text.FLASH_PflashGetPrefetchSpeculation,"ax",%progbits
 2414              		.align	1
 2415              		.global	FLASH_PflashGetPrefetchSpeculation
 2416              		.syntax unified
 2417              		.code	16
 2418              		.thumb_func
 2419              		.fpu softvfp
 2421              	FLASH_PflashGetPrefetchSpeculation:
 2422              	.LFB76:
2583:../drivers/fsl_flash.c ****     memset(speculationStatus, 0, sizeof(flash_prefetch_speculation_status_t));
 2423              		.loc 1 2583 0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 2427              		@ link register save eliminated.
 2428              	.LVL324:
2587:../drivers/fsl_flash.c ****     speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionEnable;
 2429              		.loc 1 2587 0
 2430 0000 0023     		movs	r3, #0
 2431 0002 0370     		strb	r3, [r0]
2588:../drivers/fsl_flash.c **** 
 2432              		.loc 1 2588 0
 2433 0004 4370     		strb	r3, [r0, #1]
 2434              	.LBB10:
2594:../drivers/fsl_flash.c **** #elif defined(MCM0)
 2435              		.loc 1 2594 0
 2436 0006 074B     		ldr	r3, .L222
 2437 0008 DB68     		ldr	r3, [r3, #12]
 2438              	.LVL325:
2598:../drivers/fsl_flash.c ****         {
 2439              		.loc 1 2598 0
 2440 000a 1A04     		lsls	r2, r3, #16
 2441 000c 04D4     		bmi	.L221
2607:../drivers/fsl_flash.c ****             {
 2442              		.loc 1 2607 0
 2443 000e 5B04     		lsls	r3, r3, #17
 2444 0010 05D4     		bmi	.L220
 2445              	.LVL326:
2610:../drivers/fsl_flash.c ****             }
 2446              		.loc 1 2610 0
 2447 0012 0123     		movs	r3, #1
 2448 0014 4370     		strb	r3, [r0, #1]
 2449 0016 02E0     		b	.L220
 2450              	.LVL327:
 2451              	.L221:
2601:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
 2452              		.loc 1 2601 0
 2453 0018 0123     		movs	r3, #1
 2454              	.LVL328:
 2455 001a 0370     		strb	r3, [r0]
2602:../drivers/fsl_flash.c ****         }
 2456              		.loc 1 2602 0
 2457 001c 4370     		strb	r3, [r0, #1]
 2458              	.L220:
 2459              	.LBE10:
2665:../drivers/fsl_flash.c **** 
 2460              		.loc 1 2665 0
 2461 001e 0020     		movs	r0, #0
 2462              	.LVL329:
 2463              		@ sp needed
 2464 0020 7047     		bx	lr
 2465              	.L223:
 2466 0022 C046     		.align	2
 2467              	.L222:
 2468 0024 003000F0 		.word	-268423168
 2469              		.cfi_endproc
 2470              	.LFE76:
 2472              		.section	.text.mcm_flash_cache_clear,"ax",%progbits
 2473              		.align	1
 2474              		.global	mcm_flash_cache_clear
 2475              		.syntax unified
 2476              		.code	16
 2477              		.thumb_func
 2478              		.fpu softvfp
 2480              	mcm_flash_cache_clear:
 2481              	.LFB80:
2768:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase;
 2482              		.loc 1 2768 0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 0
 2485              		@ frame_needed = 0, uses_anonymous_args = 0
 2486 0000 10B5     		push	{r4, lr}
 2487              		.cfi_def_cfa_offset 8
 2488              		.cfi_offset 4, -8
 2489              		.cfi_offset 14, -4
 2490              	.LVL330:
2795:../drivers/fsl_flash.c **** #else  /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
 2491              		.loc 1 2795 0
 2492 0002 8021     		movs	r1, #128
 2493 0004 034B     		ldr	r3, .L225
 2494 0006 1C68     		ldr	r4, [r3]
 2495 0008 0123     		movs	r3, #1
 2496 000a 0A22     		movs	r2, #10
 2497 000c C900     		lsls	r1, r1, #3
 2498 000e 0248     		ldr	r0, .L225+4
 2499 0010 A047     		blx	r4
 2500              	.LVL331:
2804:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_MCM */
 2501              		.loc 1 2804 0
 2502              		@ sp needed
 2503 0012 10BD     		pop	{r4, pc}
 2504              	.L226:
 2505              		.align	2
 2506              	.L225:
 2507 0014 00000000 		.word	.LANCHOR3
 2508 0018 0C3000F0 		.word	-268423156
 2509              		.cfi_endproc
 2510              	.LFE80:
 2512              		.section	.text.flash_cache_clear_process,"ax",%progbits
 2513              		.align	1
 2514              		.syntax unified
 2515              		.code	16
 2516              		.thumb_func
 2517              		.fpu softvfp
 2519              	flash_cache_clear_process:
 2520              	.LFB82:
2943:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2521              		.loc 1 2943 0
 2522              		.cfi_startproc
 2523              		@ args = 0, pretend = 0, frame = 0
 2524              		@ frame_needed = 0, uses_anonymous_args = 0
 2525              	.LVL332:
 2526 0000 10B5     		push	{r4, lr}
 2527              		.cfi_def_cfa_offset 8
 2528              		.cfi_offset 4, -8
 2529              		.cfi_offset 14, -4
 2530 0002 0C00     		movs	r4, r1
2945:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
 2531              		.loc 1 2945 0
 2532 0004 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
 2533              	.LVL333:
2946:../drivers/fsl_flash.c ****     {
 2534              		.loc 1 2946 0
 2535 0008 0028     		cmp	r0, #0
 2536 000a 01D1     		bne	.L227
2955:../drivers/fsl_flash.c ****     {
 2537              		.loc 1 2955 0
 2538 000c 012C     		cmp	r4, #1
 2539 000e 00D0     		beq	.L229
 2540              	.LVL334:
 2541              	.L227:
2976:../drivers/fsl_flash.c **** 
 2542              		.loc 1 2976 0
 2543              		@ sp needed
 2544 0010 10BD     		pop	{r4, pc}
 2545              	.LVL335:
 2546              	.L229:
2958:../drivers/fsl_flash.c **** #endif
 2547              		.loc 1 2958 0
 2548 0012 FFF7FEFF 		bl	mcm_flash_cache_clear
 2549              	.LVL336:
 2550 0016 FBE7     		b	.L227
 2551              		.cfi_endproc
 2552              	.LFE82:
 2554              		.section	.text.flash_cache_clear,"ax",%progbits
 2555              		.align	1
 2556              		.global	flash_cache_clear
 2557              		.syntax unified
 2558              		.code	16
 2559              		.thumb_func
 2560              		.fpu softvfp
 2562              	flash_cache_clear:
 2563              	.LFB81:
2933:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPost);
 2564              		.loc 1 2933 0
 2565              		.cfi_startproc
 2566              		@ args = 0, pretend = 0, frame = 0
 2567              		@ frame_needed = 0, uses_anonymous_args = 0
 2568              	.LVL337:
 2569 0000 10B5     		push	{r4, lr}
 2570              		.cfi_def_cfa_offset 8
 2571              		.cfi_offset 4, -8
 2572              		.cfi_offset 14, -4
2934:../drivers/fsl_flash.c **** }
 2573              		.loc 1 2934 0
 2574 0002 0121     		movs	r1, #1
 2575 0004 FFF7FEFF 		bl	flash_cache_clear_process
 2576              	.LVL338:
2935:../drivers/fsl_flash.c **** 
 2577              		.loc 1 2935 0
 2578              		@ sp needed
 2579 0008 10BD     		pop	{r4, pc}
 2580              		.cfi_endproc
 2581              	.LFE81:
 2583              		.section	.text.FLASH_EraseAll,"ax",%progbits
 2584              		.align	1
 2585              		.global	FLASH_EraseAll
 2586              		.syntax unified
 2587              		.code	16
 2588              		.thumb_func
 2589              		.fpu softvfp
 2591              	FLASH_EraseAll:
 2592              	.LFB55:
 873:../drivers/fsl_flash.c ****     status_t returnCode;
 2593              		.loc 1 873 0
 2594              		.cfi_startproc
 2595              		@ args = 0, pretend = 0, frame = 0
 2596              		@ frame_needed = 0, uses_anonymous_args = 0
 2597              	.LVL339:
 2598 0000 70B5     		push	{r4, r5, r6, lr}
 2599              		.cfi_def_cfa_offset 16
 2600              		.cfi_offset 4, -16
 2601              		.cfi_offset 5, -12
 2602              		.cfi_offset 6, -8
 2603              		.cfi_offset 14, -4
 2604 0002 051E     		subs	r5, r0, #0
 876:../drivers/fsl_flash.c ****     {
 2605              		.loc 1 876 0
 2606 0004 15D0     		beq	.L233
 882:../drivers/fsl_flash.c **** 
 2607              		.loc 1 882 0
 2608 0006 0C4B     		ldr	r3, .L235
 2609 0008 0C4A     		ldr	r2, .L235+4
 2610 000a 1A60     		str	r2, [r3]
 885:../drivers/fsl_flash.c ****     if (returnCode)
 2611              		.loc 1 885 0
 2612 000c 0800     		movs	r0, r1
 2613              	.LVL340:
 2614 000e FFF7FEFF 		bl	flash_check_user_key
 2615              	.LVL341:
 2616 0012 041E     		subs	r4, r0, #0
 2617              	.LVL342:
 886:../drivers/fsl_flash.c ****     {
 2618              		.loc 1 886 0
 2619 0014 01D0     		beq	.L234
 2620              	.LVL343:
 2621              	.L231:
 908:../drivers/fsl_flash.c **** 
 2622              		.loc 1 908 0
 2623 0016 2000     		movs	r0, r4
 2624              		@ sp needed
 2625              	.LVL344:
 2626 0018 70BD     		pop	{r4, r5, r6, pc}
 2627              	.LVL345:
 2628              	.L234:
 891:../drivers/fsl_flash.c **** 
 2629              		.loc 1 891 0
 2630 001a 0021     		movs	r1, #0
 2631 001c 2800     		movs	r0, r5
 2632              	.LVL346:
 2633 001e FFF7FEFF 		bl	flash_cache_clear_process
 2634              	.LVL347:
 894:../drivers/fsl_flash.c **** 
 2635              		.loc 1 894 0
 2636 0022 2800     		movs	r0, r5
 2637 0024 FFF7FEFF 		bl	flash_command_sequence
 2638              	.LVL348:
 2639 0028 0400     		movs	r4, r0
 2640              	.LVL349:
 896:../drivers/fsl_flash.c **** 
 2641              		.loc 1 896 0
 2642 002a 2800     		movs	r0, r5
 2643              	.LVL350:
 2644 002c FFF7FEFF 		bl	flash_cache_clear
 2645              	.LVL351:
 907:../drivers/fsl_flash.c **** }
 2646              		.loc 1 907 0
 2647 0030 F1E7     		b	.L231
 2648              	.LVL352:
 2649              	.L233:
 878:../drivers/fsl_flash.c ****     }
 2650              		.loc 1 878 0
 2651 0032 0424     		movs	r4, #4
 2652 0034 EFE7     		b	.L231
 2653              	.L236:
 2654 0036 C046     		.align	2
 2655              	.L235:
 2656 0038 04000240 		.word	1073872900
 2657 003c FFFFFF44 		.word	1157627903
 2658              		.cfi_endproc
 2659              	.LFE55:
 2661              		.global	__aeabi_uidivmod
 2662              		.section	.text.FLASH_Erase,"ax",%progbits
 2663              		.align	1
 2664              		.global	FLASH_Erase
 2665              		.syntax unified
 2666              		.code	16
 2667              		.thumb_func
 2668              		.fpu softvfp
 2670              	FLASH_Erase:
 2671              	.LFB56:
 911:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 2672              		.loc 1 911 0
 2673              		.cfi_startproc
 2674              		@ args = 0, pretend = 0, frame = 40
 2675              		@ frame_needed = 0, uses_anonymous_args = 0
 2676              	.LVL353:
 2677 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2678              		.cfi_def_cfa_offset 20
 2679              		.cfi_offset 4, -20
 2680              		.cfi_offset 5, -16
 2681              		.cfi_offset 6, -12
 2682              		.cfi_offset 7, -8
 2683              		.cfi_offset 14, -4
 2684 0002 8BB0     		sub	sp, sp, #44
 2685              		.cfi_def_cfa_offset 64
 2686 0004 0600     		movs	r6, r0
 2687 0006 0190     		str	r0, [sp, #4]
 2688 0008 0D00     		movs	r5, r1
 2689 000a 1700     		movs	r7, r2
 2690 000c 1C00     		movs	r4, r3
 918:../drivers/fsl_flash.c **** 
 2691              		.loc 1 918 0
 2692 000e 02AA     		add	r2, sp, #8
 2693              	.LVL354:
 2694 0010 FFF7FEFF 		bl	flash_get_matched_operation_info
 2695              	.LVL355:
 921:../drivers/fsl_flash.c ****     if (returnCode)
 2696              		.loc 1 921 0
 2697 0014 069B     		ldr	r3, [sp, #24]
 2698 0016 3A00     		movs	r2, r7
 2699 0018 2900     		movs	r1, r5
 2700 001a 3000     		movs	r0, r6
 2701 001c FFF7FEFF 		bl	flash_check_range
 2702              	.LVL356:
 2703 0020 051E     		subs	r5, r0, #0
 2704              	.LVL357:
 922:../drivers/fsl_flash.c ****     {
 2705              		.loc 1 922 0
 2706 0022 2CD1     		bne	.L237
 928:../drivers/fsl_flash.c ****     if (returnCode)
 2707              		.loc 1 928 0
 2708 0024 2000     		movs	r0, r4
 2709              	.LVL358:
 2710 0026 FFF7FEFF 		bl	flash_check_user_key
 2711              	.LVL359:
 2712 002a 051E     		subs	r5, r0, #0
 2713              	.LVL360:
 929:../drivers/fsl_flash.c ****     {
 2714              		.loc 1 929 0
 2715 002c 27D1     		bne	.L237
 934:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
 2716              		.loc 1 934 0
 2717 002e 029C     		ldr	r4, [sp, #8]
 2718              	.LVL361:
 935:../drivers/fsl_flash.c **** 
 2719              		.loc 1 935 0
 2720 0030 039E     		ldr	r6, [sp, #12]
 2721              	.LVL362:
 938:../drivers/fsl_flash.c **** 
 2722              		.loc 1 938 0
 2723 0032 3F19     		adds	r7, r7, r4
 2724              	.LVL363:
 2725 0034 013F     		subs	r7, r7, #1
 2726              	.LVL364:
 942:../drivers/fsl_flash.c ****     {
 2727              		.loc 1 942 0
 2728 0036 3100     		movs	r1, r6
 2729 0038 3800     		movs	r0, r7
 2730              	.LVL365:
 2731 003a FFF7FEFF 		bl	__aeabi_uidivmod
 2732              	.LVL366:
 2733 003e 0029     		cmp	r1, #0
 2734 0040 06D0     		beq	.L239
 944:../drivers/fsl_flash.c ****         endAddress = numberOfSectors * sectorSize - 1;
 2735              		.loc 1 944 0
 2736 0042 3100     		movs	r1, r6
 2737 0044 3800     		movs	r0, r7
 2738 0046 FFF7FEFF 		bl	__aeabi_uidiv
 2739              	.LVL367:
 2740 004a 471C     		adds	r7, r0, #1
 2741              	.LVL368:
 945:../drivers/fsl_flash.c ****     }
 2742              		.loc 1 945 0
 2743 004c 7743     		muls	r7, r6
 2744              	.LVL369:
 2745 004e 013F     		subs	r7, r7, #1
 2746              	.LVL370:
 2747              	.L239:
 948:../drivers/fsl_flash.c **** 
 2748              		.loc 1 948 0
 2749 0050 0021     		movs	r1, #0
 2750 0052 0198     		ldr	r0, [sp, #4]
 2751 0054 FFF7FEFF 		bl	flash_cache_clear_process
 2752              	.LVL371:
 2753              	.L240:
 952:../drivers/fsl_flash.c ****     {
 2754              		.loc 1 952 0
 2755 0058 BC42     		cmp	r4, r7
 2756 005a 0DD8     		bhi	.L241
 955:../drivers/fsl_flash.c **** 
 2757              		.loc 1 955 0
 2758 005c 2202     		lsls	r2, r4, #8
 2759 005e 120A     		lsrs	r2, r2, #8
 2760 0060 9023     		movs	r3, #144
 2761 0062 1B05     		lsls	r3, r3, #20
 2762 0064 1343     		orrs	r3, r2
 2763 0066 074A     		ldr	r2, .L243
 2764 0068 1360     		str	r3, [r2]
 958:../drivers/fsl_flash.c **** 
 2765              		.loc 1 958 0
 2766 006a 0198     		ldr	r0, [sp, #4]
 2767 006c FFF7FEFF 		bl	flash_command_sequence
 2768              	.LVL372:
 2769 0070 051E     		subs	r5, r0, #0
 2770              	.LVL373:
 961:../drivers/fsl_flash.c ****         {
 2771              		.loc 1 961 0
 2772 0072 01D1     		bne	.L241
 968:../drivers/fsl_flash.c ****         }
 2773              		.loc 1 968 0
 2774 0074 A419     		adds	r4, r4, r6
 2775              	.LVL374:
 2776 0076 EFE7     		b	.L240
 2777              	.LVL375:
 2778              	.L241:
 972:../drivers/fsl_flash.c **** 
 2779              		.loc 1 972 0
 2780 0078 0198     		ldr	r0, [sp, #4]
 2781 007a FFF7FEFF 		bl	flash_cache_clear
 2782              	.LVL376:
 2783              	.L237:
 975:../drivers/fsl_flash.c **** 
 2784              		.loc 1 975 0
 2785 007e 2800     		movs	r0, r5
 2786 0080 0BB0     		add	sp, sp, #44
 2787              		@ sp needed
 2788              	.LVL377:
 2789 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 2790              	.L244:
 2791              		.align	2
 2792              	.L243:
 2793 0084 04000240 		.word	1073872900
 2794              		.cfi_endproc
 2795              	.LFE56:
 2797              		.section	.text.FLASH_EraseAllUnsecure,"ax",%progbits
 2798              		.align	1
 2799              		.global	FLASH_EraseAllUnsecure
 2800              		.syntax unified
 2801              		.code	16
 2802              		.thumb_func
 2803              		.fpu softvfp
 2805              	FLASH_EraseAllUnsecure:
 2806              	.LFB57:
 979:../drivers/fsl_flash.c ****     status_t returnCode;
 2807              		.loc 1 979 0
 2808              		.cfi_startproc
 2809              		@ args = 0, pretend = 0, frame = 0
 2810              		@ frame_needed = 0, uses_anonymous_args = 0
 2811              	.LVL378:
 2812 0000 70B5     		push	{r4, r5, r6, lr}
 2813              		.cfi_def_cfa_offset 16
 2814              		.cfi_offset 4, -16
 2815              		.cfi_offset 5, -12
 2816              		.cfi_offset 6, -8
 2817              		.cfi_offset 14, -4
 2818 0002 051E     		subs	r5, r0, #0
 982:../drivers/fsl_flash.c ****     {
 2819              		.loc 1 982 0
 2820 0004 15D0     		beq	.L247
 988:../drivers/fsl_flash.c **** 
 2821              		.loc 1 988 0
 2822 0006 0C4B     		ldr	r3, .L249
 2823 0008 0C4A     		ldr	r2, .L249+4
 2824 000a 1A60     		str	r2, [r3]
 991:../drivers/fsl_flash.c ****     if (returnCode)
 2825              		.loc 1 991 0
 2826 000c 0800     		movs	r0, r1
 2827              	.LVL379:
 2828 000e FFF7FEFF 		bl	flash_check_user_key
 2829              	.LVL380:
 2830 0012 041E     		subs	r4, r0, #0
 2831              	.LVL381:
 992:../drivers/fsl_flash.c ****     {
 2832              		.loc 1 992 0
 2833 0014 01D0     		beq	.L248
 2834              	.LVL382:
 2835              	.L245:
1014:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD */
 2836              		.loc 1 1014 0
 2837 0016 2000     		movs	r0, r4
 2838              		@ sp needed
 2839              	.LVL383:
 2840 0018 70BD     		pop	{r4, r5, r6, pc}
 2841              	.LVL384:
 2842              	.L248:
 997:../drivers/fsl_flash.c **** 
 2843              		.loc 1 997 0
 2844 001a 0021     		movs	r1, #0
 2845 001c 2800     		movs	r0, r5
 2846              	.LVL385:
 2847 001e FFF7FEFF 		bl	flash_cache_clear_process
 2848              	.LVL386:
1000:../drivers/fsl_flash.c **** 
 2849              		.loc 1 1000 0
 2850 0022 2800     		movs	r0, r5
 2851 0024 FFF7FEFF 		bl	flash_command_sequence
 2852              	.LVL387:
 2853 0028 0400     		movs	r4, r0
 2854              	.LVL388:
1002:../drivers/fsl_flash.c **** 
 2855              		.loc 1 1002 0
 2856 002a 2800     		movs	r0, r5
 2857              	.LVL389:
 2858 002c FFF7FEFF 		bl	flash_cache_clear
 2859              	.LVL390:
1013:../drivers/fsl_flash.c **** }
 2860              		.loc 1 1013 0
 2861 0030 F1E7     		b	.L245
 2862              	.LVL391:
 2863              	.L247:
 984:../drivers/fsl_flash.c ****     }
 2864              		.loc 1 984 0
 2865 0032 0424     		movs	r4, #4
 2866 0034 EFE7     		b	.L245
 2867              	.L250:
 2868 0036 C046     		.align	2
 2869              	.L249:
 2870 0038 04000240 		.word	1073872900
 2871 003c FFFFFF49 		.word	1241513983
 2872              		.cfi_endproc
 2873              	.LFE57:
 2875              		.section	.text.FLASH_EraseAllExecuteOnlySegments,"ax",%progbits
 2876              		.align	1
 2877              		.global	FLASH_EraseAllExecuteOnlySegments
 2878              		.syntax unified
 2879              		.code	16
 2880              		.thumb_func
 2881              		.fpu softvfp
 2883              	FLASH_EraseAllExecuteOnlySegments:
 2884              	.LFB58:
1018:../drivers/fsl_flash.c ****     status_t returnCode;
 2885              		.loc 1 1018 0
 2886              		.cfi_startproc
 2887              		@ args = 0, pretend = 0, frame = 0
 2888              		@ frame_needed = 0, uses_anonymous_args = 0
 2889              	.LVL392:
 2890 0000 70B5     		push	{r4, r5, r6, lr}
 2891              		.cfi_def_cfa_offset 16
 2892              		.cfi_offset 4, -16
 2893              		.cfi_offset 5, -12
 2894              		.cfi_offset 6, -8
 2895              		.cfi_offset 14, -4
 2896 0002 051E     		subs	r5, r0, #0
1021:../drivers/fsl_flash.c ****     {
 2897              		.loc 1 1021 0
 2898 0004 15D0     		beq	.L253
1028:../drivers/fsl_flash.c **** 
 2899              		.loc 1 1028 0
 2900 0006 0C4B     		ldr	r3, .L255
 2901 0008 0C4A     		ldr	r2, .L255+4
 2902 000a 1A60     		str	r2, [r3]
1031:../drivers/fsl_flash.c ****     if (returnCode)
 2903              		.loc 1 1031 0
 2904 000c 0800     		movs	r0, r1
 2905              	.LVL393:
 2906 000e FFF7FEFF 		bl	flash_check_user_key
 2907              	.LVL394:
 2908 0012 041E     		subs	r4, r0, #0
 2909              	.LVL395:
1032:../drivers/fsl_flash.c ****     {
 2910              		.loc 1 1032 0
 2911 0014 01D0     		beq	.L254
 2912              	.LVL396:
 2913              	.L251:
1045:../drivers/fsl_flash.c **** 
 2914              		.loc 1 1045 0
 2915 0016 2000     		movs	r0, r4
 2916              		@ sp needed
 2917              	.LVL397:
 2918 0018 70BD     		pop	{r4, r5, r6, pc}
 2919              	.LVL398:
 2920              	.L254:
1037:../drivers/fsl_flash.c **** 
 2921              		.loc 1 1037 0
 2922 001a 0021     		movs	r1, #0
 2923 001c 2800     		movs	r0, r5
 2924              	.LVL399:
 2925 001e FFF7FEFF 		bl	flash_cache_clear_process
 2926              	.LVL400:
1040:../drivers/fsl_flash.c **** 
 2927              		.loc 1 1040 0
 2928 0022 2800     		movs	r0, r5
 2929 0024 FFF7FEFF 		bl	flash_command_sequence
 2930              	.LVL401:
 2931 0028 0400     		movs	r4, r0
 2932              	.LVL402:
1042:../drivers/fsl_flash.c **** 
 2933              		.loc 1 1042 0
 2934 002a 2800     		movs	r0, r5
 2935              	.LVL403:
 2936 002c FFF7FEFF 		bl	flash_cache_clear
 2937              	.LVL404:
1044:../drivers/fsl_flash.c **** }
 2938              		.loc 1 1044 0
 2939 0030 F1E7     		b	.L251
 2940              	.LVL405:
 2941              	.L253:
1023:../drivers/fsl_flash.c ****     }
 2942              		.loc 1 1023 0
 2943 0032 0424     		movs	r4, #4
 2944 0034 EFE7     		b	.L251
 2945              	.L256:
 2946 0036 C046     		.align	2
 2947              	.L255:
 2948 0038 04000240 		.word	1073872900
 2949 003c FFFFFF4B 		.word	1275068415
 2950              		.cfi_endproc
 2951              	.LFE58:
 2953              		.section	.text.FLASH_Program,"ax",%progbits
 2954              		.align	1
 2955              		.global	FLASH_Program
 2956              		.syntax unified
 2957              		.code	16
 2958              		.thumb_func
 2959              		.fpu softvfp
 2961              	FLASH_Program:
 2962              	.LFB59:
1048:../drivers/fsl_flash.c ****     status_t returnCode;
 2963              		.loc 1 1048 0
 2964              		.cfi_startproc
 2965              		@ args = 0, pretend = 0, frame = 40
 2966              		@ frame_needed = 0, uses_anonymous_args = 0
 2967              	.LVL406:
 2968 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2969              		.cfi_def_cfa_offset 20
 2970              		.cfi_offset 4, -20
 2971              		.cfi_offset 5, -16
 2972              		.cfi_offset 6, -12
 2973              		.cfi_offset 7, -8
 2974              		.cfi_offset 14, -4
 2975 0002 CE46     		mov	lr, r9
 2976 0004 00B5     		push	{lr}
 2977              		.cfi_def_cfa_offset 24
 2978              		.cfi_offset 9, -24
 2979 0006 8AB0     		sub	sp, sp, #40
 2980              		.cfi_def_cfa_offset 64
 2981 0008 0700     		movs	r7, r0
 2982 000a 0190     		str	r0, [sp, #4]
 2983 000c 0E00     		movs	r6, r1
 2984 000e 1400     		movs	r4, r2
 2985 0010 1D00     		movs	r5, r3
1052:../drivers/fsl_flash.c ****     {
 2986              		.loc 1 1052 0
 2987 0012 002A     		cmp	r2, #0
 2988 0014 42D0     		beq	.L264
1057:../drivers/fsl_flash.c **** 
 2989              		.loc 1 1057 0
 2990 0016 02AA     		add	r2, sp, #8
 2991              	.LVL407:
 2992 0018 FFF7FEFF 		bl	flash_get_matched_operation_info
 2993              	.LVL408:
1060:../drivers/fsl_flash.c ****     if (returnCode)
 2994              		.loc 1 1060 0
 2995 001c 059B     		ldr	r3, [sp, #20]
 2996 001e 2A00     		movs	r2, r5
 2997 0020 3100     		movs	r1, r6
 2998 0022 3800     		movs	r0, r7
 2999 0024 FFF7FEFF 		bl	flash_check_range
 3000              	.LVL409:
 3001 0028 061E     		subs	r6, r0, #0
 3002              	.LVL410:
1061:../drivers/fsl_flash.c ****     {
 3003              		.loc 1 1061 0
 3004 002a 04D0     		beq	.L265
 3005              	.LVL411:
 3006              	.L257:
1108:../drivers/fsl_flash.c **** 
 3007              		.loc 1 1108 0
 3008 002c 3000     		movs	r0, r6
 3009 002e 0AB0     		add	sp, sp, #40
 3010              		@ sp needed
 3011              	.LVL412:
 3012 0030 04BC     		pop	{r2}
 3013 0032 9146     		mov	r9, r2
 3014 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 3015              	.LVL413:
 3016              	.L265:
1066:../drivers/fsl_flash.c **** 
 3017              		.loc 1 1066 0
 3018 0036 029F     		ldr	r7, [sp, #8]
 3019              	.LVL414:
1068:../drivers/fsl_flash.c **** 
 3020              		.loc 1 1068 0
 3021 0038 0021     		movs	r1, #0
 3022 003a 0198     		ldr	r0, [sp, #4]
 3023              	.LVL415:
 3024 003c FFF7FEFF 		bl	flash_cache_clear_process
 3025              	.LVL416:
1070:../drivers/fsl_flash.c ****     {
 3026              		.loc 1 1070 0
 3027 0040 0FE0     		b	.L259
 3028              	.LVL417:
 3029              	.L266:
1076:../drivers/fsl_flash.c ****         }
 3030              		.loc 1 1076 0
 3031 0042 3A02     		lsls	r2, r7, #8
 3032 0044 120A     		lsrs	r2, r2, #8
 3033 0046 C023     		movs	r3, #192
 3034 0048 DB04     		lsls	r3, r3, #19
 3035 004a 1343     		orrs	r3, r2
 3036 004c 144A     		ldr	r2, .L267
 3037 004e 1360     		str	r3, [r2]
 3038              	.L261:
1088:../drivers/fsl_flash.c **** 
 3039              		.loc 1 1088 0
 3040 0050 0198     		ldr	r0, [sp, #4]
 3041 0052 FFF7FEFF 		bl	flash_command_sequence
 3042              	.LVL418:
 3043 0056 061E     		subs	r6, r0, #0
 3044              	.LVL419:
1091:../drivers/fsl_flash.c ****         {
 3045              		.loc 1 1091 0
 3046 0058 1CD1     		bne	.L262
1098:../drivers/fsl_flash.c **** 
 3047              		.loc 1 1098 0
 3048 005a 059B     		ldr	r3, [sp, #20]
 3049 005c FF18     		adds	r7, r7, r3
 3050              	.LVL420:
1101:../drivers/fsl_flash.c ****         }
 3051              		.loc 1 1101 0
 3052 005e ED1A     		subs	r5, r5, r3
 3053              	.LVL421:
 3054 0060 4C46     		mov	r4, r9
 3055              	.LVL422:
 3056              	.L259:
1070:../drivers/fsl_flash.c ****     {
 3057              		.loc 1 1070 0
 3058 0062 002D     		cmp	r5, #0
 3059 0064 16D0     		beq	.L262
1073:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
 3060              		.loc 1 1073 0
 3061 0066 231D     		adds	r3, r4, #4
 3062 0068 9946     		mov	r9, r3
 3063              	.LVL423:
 3064 006a 0E4B     		ldr	r3, .L267+4
 3065              	.LVL424:
 3066 006c 2268     		ldr	r2, [r4]
 3067 006e 1A60     		str	r2, [r3]
1074:../drivers/fsl_flash.c ****         {
 3068              		.loc 1 1074 0
 3069 0070 059B     		ldr	r3, [sp, #20]
 3070 0072 042B     		cmp	r3, #4
 3071 0074 E5D0     		beq	.L266
1078:../drivers/fsl_flash.c ****         {
 3072              		.loc 1 1078 0
 3073 0076 082B     		cmp	r3, #8
 3074 0078 EAD1     		bne	.L261
1080:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
 3075              		.loc 1 1080 0
 3076 007a 9946     		mov	r9, r3
 3077              	.LVL425:
 3078 007c A144     		add	r9, r9, r4
 3079              	.LVL426:
 3080 007e 6268     		ldr	r2, [r4, #4]
 3081 0080 094B     		ldr	r3, .L267+8
 3082 0082 1A60     		str	r2, [r3]
1081:../drivers/fsl_flash.c ****         }
 3083              		.loc 1 1081 0
 3084 0084 3A02     		lsls	r2, r7, #8
 3085 0086 120A     		lsrs	r2, r2, #8
 3086 0088 E023     		movs	r3, #224
 3087 008a DB04     		lsls	r3, r3, #19
 3088 008c 1343     		orrs	r3, r2
 3089 008e 044A     		ldr	r2, .L267
 3090 0090 1360     		str	r3, [r2]
 3091 0092 DDE7     		b	.L261
 3092              	.LVL427:
 3093              	.L262:
1105:../drivers/fsl_flash.c **** 
 3094              		.loc 1 1105 0
 3095 0094 0198     		ldr	r0, [sp, #4]
 3096 0096 FFF7FEFF 		bl	flash_cache_clear
 3097              	.LVL428:
1107:../drivers/fsl_flash.c **** }
 3098              		.loc 1 1107 0
 3099 009a C7E7     		b	.L257
 3100              	.LVL429:
 3101              	.L264:
1054:../drivers/fsl_flash.c ****     }
 3102              		.loc 1 1054 0
 3103 009c 0426     		movs	r6, #4
 3104 009e C5E7     		b	.L257
 3105              	.L268:
 3106              		.align	2
 3107              	.L267:
 3108 00a0 04000240 		.word	1073872900
 3109 00a4 08000240 		.word	1073872904
 3110 00a8 0C000240 		.word	1073872908
 3111              		.cfi_endproc
 3112              	.LFE59:
 3114              		.section	.text.FLASH_ProgramOnce,"ax",%progbits
 3115              		.align	1
 3116              		.global	FLASH_ProgramOnce
 3117              		.syntax unified
 3118              		.code	16
 3119              		.thumb_func
 3120              		.fpu softvfp
 3122              	FLASH_ProgramOnce:
 3123              	.LFB60:
1111:../drivers/fsl_flash.c ****     status_t returnCode;
 3124              		.loc 1 1111 0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 3128              	.LVL430:
 3129 0000 70B5     		push	{r4, r5, r6, lr}
 3130              		.cfi_def_cfa_offset 16
 3131              		.cfi_offset 4, -16
 3132              		.cfi_offset 5, -12
 3133              		.cfi_offset 6, -8
 3134              		.cfi_offset 14, -4
 3135 0002 041E     		subs	r4, r0, #0
1114:../drivers/fsl_flash.c ****     {
 3136              		.loc 1 1114 0
 3137 0004 22D0     		beq	.L272
1114:../drivers/fsl_flash.c ****     {
 3138              		.loc 1 1114 0 is_stmt 0 discriminator 1
 3139 0006 002A     		cmp	r2, #0
 3140 0008 22D0     		beq	.L273
1120:../drivers/fsl_flash.c **** 
 3141              		.loc 1 1120 0 is_stmt 1
 3142 000a 0804     		lsls	r0, r1, #16
 3143              	.LVL431:
 3144 000c FF25     		movs	r5, #255
 3145 000e 2D04     		lsls	r5, r5, #16
 3146 0010 0540     		ands	r5, r0
 3147 0012 1048     		ldr	r0, .L275
 3148 0014 2843     		orrs	r0, r5
 3149 0016 104D     		ldr	r5, .L275+4
 3150 0018 2860     		str	r0, [r5]
1122:../drivers/fsl_flash.c **** 
 3151              		.loc 1 1122 0
 3152 001a 1048     		ldr	r0, .L275+8
 3153 001c 1568     		ldr	r5, [r2]
 3154 001e 0560     		str	r5, [r0]
1128:../drivers/fsl_flash.c ****          /* Range check */
 3155              		.loc 1 1128 0
 3156 0020 1039     		subs	r1, r1, #16
 3157              	.LVL432:
 3158 0022 0329     		cmp	r1, #3
 3159 0024 01D8     		bhi	.L271
1130:../drivers/fsl_flash.c ****         (lengthInBytes == 8))
 3160              		.loc 1 1130 0
 3161 0026 082B     		cmp	r3, #8
 3162 0028 0CD0     		beq	.L274
 3163              	.LVL433:
 3164              	.L271:
1138:../drivers/fsl_flash.c **** 
 3165              		.loc 1 1138 0
 3166 002a 0021     		movs	r1, #0
 3167              	.LVL434:
 3168 002c 2000     		movs	r0, r4
 3169 002e FFF7FEFF 		bl	flash_cache_clear_process
 3170              	.LVL435:
1141:../drivers/fsl_flash.c **** 
 3171              		.loc 1 1141 0
 3172 0032 2000     		movs	r0, r4
 3173 0034 FFF7FEFF 		bl	flash_command_sequence
 3174              	.LVL436:
 3175 0038 0500     		movs	r5, r0
 3176              	.LVL437:
1143:../drivers/fsl_flash.c **** 
 3177              		.loc 1 1143 0
 3178 003a 2000     		movs	r0, r4
 3179              	.LVL438:
 3180 003c FFF7FEFF 		bl	flash_cache_clear
 3181              	.LVL439:
 3182              	.L269:
1146:../drivers/fsl_flash.c **** 
 3183              		.loc 1 1146 0
 3184 0040 2800     		movs	r0, r5
 3185              		@ sp needed
 3186              	.LVL440:
 3187 0042 70BD     		pop	{r4, r5, r6, pc}
 3188              	.LVL441:
 3189              	.L274:
1134:../drivers/fsl_flash.c ****     }
 3190              		.loc 1 1134 0
 3191 0044 5268     		ldr	r2, [r2, #4]
 3192              	.LVL442:
 3193 0046 064B     		ldr	r3, .L275+12
 3194              	.LVL443:
 3195 0048 1A60     		str	r2, [r3]
 3196 004a EEE7     		b	.L271
 3197              	.LVL444:
 3198              	.L272:
1116:../drivers/fsl_flash.c ****     }
 3199              		.loc 1 1116 0
 3200 004c 0425     		movs	r5, #4
 3201 004e F7E7     		b	.L269
 3202              	.L273:
 3203 0050 0425     		movs	r5, #4
 3204 0052 F5E7     		b	.L269
 3205              	.L276:
 3206              		.align	2
 3207              	.L275:
 3208 0054 FFFF0043 		.word	1124139007
 3209 0058 04000240 		.word	1073872900
 3210 005c 08000240 		.word	1073872904
 3211 0060 0C000240 		.word	1073872908
 3212              		.cfi_endproc
 3213              	.LFE60:
 3215              		.global	kPFlashDensities
 3216              		.global	kFPROTL
 3217              		.global	kFCCOBx
 3218              		.section	.bss.callFlashCommonBitOperation,"aw",%nobits
 3219              		.align	2
 3220              		.set	.LANCHOR3,. + 0
 3223              	callFlashCommonBitOperation:
 3224 0000 00000000 		.space	4
 3225              		.section	.bss.callFlashRunCommand,"aw",%nobits
 3226              		.align	2
 3227              		.set	.LANCHOR0,. + 0
 3230              	callFlashRunCommand:
 3231 0000 00000000 		.space	4
 3232              		.section	.bss.s_flashCommonBitOperation,"aw",%nobits
 3233              		.align	2
 3234              		.set	.LANCHOR7,. + 0
 3237              	s_flashCommonBitOperation:
 3238 0000 00000000 		.space	64
 3238      00000000 
 3238      00000000 
 3238      00000000 
 3238      00000000 
 3239              		.section	.bss.s_flashExecuteInRamFunctionInfo,"aw",%nobits
 3240              		.align	2
 3241              		.set	.LANCHOR5,. + 0
 3244              	s_flashExecuteInRamFunctionInfo:
 3245 0000 00000000 		.space	12
 3245      00000000 
 3245      00000000 
 3246              		.section	.bss.s_flashRunCommand,"aw",%nobits
 3247              		.align	2
 3248              		.set	.LANCHOR6,. + 0
 3251              	s_flashRunCommand:
 3252 0000 00000000 		.space	64
 3252      00000000 
 3252      00000000 
 3252      00000000 
 3252      00000000 
 3253              		.section	.rodata.kFCCOBx,"a",%progbits
 3254              		.align	2
 3257              	kFCCOBx:
 3258 0000 04000240 		.word	1073872900
 3259              		.section	.rodata.kFPROTL,"a",%progbits
 3260              		.align	2
 3263              	kFPROTL:
 3264 0000 10000240 		.word	1073872912
 3265              		.section	.rodata.kPFlashDensities,"a",%progbits
 3266              		.align	2
 3267              		.set	.LANCHOR4,. + 0
 3270              	kPFlashDensities:
 3271 0000 0800     		.short	8
 3272 0002 1000     		.short	16
 3273 0004 1800     		.short	24
 3274 0006 2000     		.short	32
 3275 0008 3000     		.short	48
 3276 000a 4000     		.short	64
 3277 000c 6000     		.short	96
 3278 000e 8000     		.short	128
 3279 0010 C000     		.short	192
 3280 0012 0001     		.short	256
 3281 0014 8001     		.short	384
 3282 0016 0002     		.short	512
 3283 0018 0003     		.short	768
 3284 001a 0004     		.short	1024
 3285 001c 0006     		.short	1536
 3286              		.section	.rodata.s_flashCommonBitOperationFunctionCode,"a",%progbits
 3287              		.align	2
 3288              		.set	.LANCHOR2,. + 0
 3291              	s_flashCommonBitOperationFunctionCode:
 3292 0000 10B5     		.short	-19184
 3293 0002 0029     		.short	10496
 3294 0004 05D0     		.short	-12283
 3295 0006 0468     		.short	26628
 3296 0008 8C43     		.short	17292
 3297 000a 9340     		.short	16531
 3298 000c 1940     		.short	16409
 3299 000e 2143     		.short	17185
 3300 0010 0160     		.short	24577
 3301 0012 BFF3     		.short	-3137
 3302 0014 6F8F     		.short	-28817
 3303 0016 BFF3     		.short	-3137
 3304 0018 4F8F     		.short	-28849
 3305 001a 10BD     		.short	-17136
 3306              		.section	.rodata.s_flashRunCommandFunctionCode,"a",%progbits
 3307              		.align	2
 3308              		.set	.LANCHOR1,. + 0
 3311              	s_flashRunCommandFunctionCode:
 3312 0000 8021     		.short	8576
 3313 0002 0170     		.short	28673
 3314 0004 0278     		.short	30722
 3315 0006 0A42     		.short	16906
 3316 0008 FCD0     		.short	-12036
 3317 000a 7047     		.short	18288
 3318              		.text
 3319              	.Letext0:
 3320              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 3321              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3322              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 3323              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 3324              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 3325              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 3326              		.file 8 "../CMSIS/system_MKL17Z4.h"
 3327              		.file 9 "../CMSIS/MKL17Z4.h"
 3328              		.file 10 "../drivers/fsl_common.h"
 3329              		.file 11 "../drivers/fsl_clock.h"
 3330              		.file 12 "../drivers/fsl_flash.h"
 3331              		.file 13 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_flash.c
     /tmp/ccPds6SN.s:16     .text.flash_check_execute_in_ram_function_info:0000000000000000 $t
     /tmp/ccPds6SN.s:22     .text.flash_check_execute_in_ram_function_info:0000000000000000 flash_check_execute_in_ram_function_info
     /tmp/ccPds6SN.s:75     .text.flash_command_sequence:0000000000000000 $t
     /tmp/ccPds6SN.s:81     .text.flash_command_sequence:0000000000000000 flash_command_sequence
     /tmp/ccPds6SN.s:153    .text.flash_command_sequence:000000000000003c $d
     /tmp/ccPds6SN.s:159    .text.flash_check_range:0000000000000000 $t
     /tmp/ccPds6SN.s:165    .text.flash_check_range:0000000000000000 flash_check_range
     /tmp/ccPds6SN.s:240    .text.flash_check_user_key:0000000000000000 $t
     /tmp/ccPds6SN.s:246    .text.flash_check_user_key:0000000000000000 flash_check_user_key
     /tmp/ccPds6SN.s:274    .text.flash_check_user_key:0000000000000010 $d
     /tmp/ccPds6SN.s:279    .text.flash_check_resource_range:0000000000000000 $t
     /tmp/ccPds6SN.s:285    .text.flash_check_resource_range:0000000000000000 flash_check_resource_range
     /tmp/ccPds6SN.s:389    .text.flash_check_resource_range:0000000000000054 $d
     /tmp/ccPds6SN.s:395    .text.copy_flash_run_command:0000000000000000 $t
     /tmp/ccPds6SN.s:401    .text.copy_flash_run_command:0000000000000000 copy_flash_run_command
     /tmp/ccPds6SN.s:430    .text.copy_flash_run_command:0000000000000014 $d
     /tmp/ccPds6SN.s:436    .text.copy_flash_common_bit_operation:0000000000000000 $t
     /tmp/ccPds6SN.s:442    .text.copy_flash_common_bit_operation:0000000000000000 copy_flash_common_bit_operation
     /tmp/ccPds6SN.s:472    .text.copy_flash_common_bit_operation:0000000000000014 $d
     /tmp/ccPds6SN.s:479    .text.flash_get_matched_operation_info:0000000000000000 $t
     /tmp/ccPds6SN.s:485    .text.flash_get_matched_operation_info:0000000000000000 flash_get_matched_operation_info
     /tmp/ccPds6SN.s:564    .text.flash_get_protection_info:0000000000000000 $t
     /tmp/ccPds6SN.s:570    .text.flash_get_protection_info:0000000000000000 flash_get_protection_info
     /tmp/ccPds6SN.s:650    .text.FLASH_PrepareExecuteInRamFunctions:0000000000000000 $t
     /tmp/ccPds6SN.s:657    .text.FLASH_PrepareExecuteInRamFunctions:0000000000000000 FLASH_PrepareExecuteInRamFunctions
     /tmp/ccPds6SN.s:710    .text.FLASH_Init:0000000000000000 $t
     /tmp/ccPds6SN.s:717    .text.FLASH_Init:0000000000000000 FLASH_Init
     /tmp/ccPds6SN.s:826    .text.FLASH_Init:0000000000000068 $d
     /tmp/ccPds6SN.s:836    .text.FLASH_ReadResource:0000000000000000 $t
     /tmp/ccPds6SN.s:843    .text.FLASH_ReadResource:0000000000000000 FLASH_ReadResource
     /tmp/ccPds6SN.s:994    .text.FLASH_ReadResource:00000000000000a4 $d
     /tmp/ccPds6SN.s:1002   .text.FLASH_ReadOnce:0000000000000000 $t
     /tmp/ccPds6SN.s:1009   .text.FLASH_ReadOnce:0000000000000000 FLASH_ReadOnce
     /tmp/ccPds6SN.s:1084   .text.FLASH_ReadOnce:0000000000000048 $d
     /tmp/ccPds6SN.s:1092   .text.FLASH_GetSecurityState:0000000000000000 $t
     /tmp/ccPds6SN.s:1099   .text.FLASH_GetSecurityState:0000000000000000 FLASH_GetSecurityState
     /tmp/ccPds6SN.s:1172   .text.FLASH_GetSecurityState:0000000000000040 $d
     /tmp/ccPds6SN.s:1180   .text.FLASH_SecurityBypass:0000000000000000 $t
     /tmp/ccPds6SN.s:1187   .text.FLASH_SecurityBypass:0000000000000000 FLASH_SecurityBypass
     /tmp/ccPds6SN.s:1272   .text.FLASH_SecurityBypass:0000000000000060 $d
     /tmp/ccPds6SN.s:1281   .text.FLASH_VerifyEraseAll:0000000000000000 $t
     /tmp/ccPds6SN.s:1288   .text.FLASH_VerifyEraseAll:0000000000000000 FLASH_VerifyEraseAll
     /tmp/ccPds6SN.s:1325   .text.FLASH_VerifyEraseAll:000000000000001c $d
     /tmp/ccPds6SN.s:1331   .text.FLASH_VerifyErase:0000000000000000 $t
     /tmp/ccPds6SN.s:1338   .text.FLASH_VerifyErase:0000000000000000 FLASH_VerifyErase
     /tmp/ccPds6SN.s:1488   .text.FLASH_VerifyErase:00000000000000a4 $d
     /tmp/ccPds6SN.s:1495   .text.FLASH_VerifyProgram:0000000000000000 $t
     /tmp/ccPds6SN.s:1502   .text.FLASH_VerifyProgram:0000000000000000 FLASH_VerifyProgram
     /tmp/ccPds6SN.s:1623   .text.FLASH_VerifyProgram:0000000000000084 $d
     /tmp/ccPds6SN.s:1631   .text.FLASH_VerifyEraseAllExecuteOnlySegments:0000000000000000 $t
     /tmp/ccPds6SN.s:1638   .text.FLASH_VerifyEraseAllExecuteOnlySegments:0000000000000000 FLASH_VerifyEraseAllExecuteOnlySegments
     /tmp/ccPds6SN.s:1675   .text.FLASH_VerifyEraseAllExecuteOnlySegments:000000000000001c $d
     /tmp/ccPds6SN.s:1681   .text.FLASH_IsProtected:0000000000000000 $t
     /tmp/ccPds6SN.s:1688   .text.FLASH_IsProtected:0000000000000000 FLASH_IsProtected
     /tmp/ccPds6SN.s:1937   .text.FLASH_IsProtected:0000000000000128 $d
     /tmp/ccPds6SN.s:1942   .text.FLASH_IsExecuteOnly:0000000000000000 $t
     /tmp/ccPds6SN.s:1949   .text.FLASH_IsExecuteOnly:0000000000000000 FLASH_IsExecuteOnly
     /tmp/ccPds6SN.s:1990   .text.FLASH_GetProperty:0000000000000000 $t
     /tmp/ccPds6SN.s:1997   .text.FLASH_GetProperty:0000000000000000 FLASH_GetProperty
     /tmp/ccPds6SN.s:2024   .rodata.FLASH_GetProperty:0000000000000000 $d
     /tmp/ccPds6SN.s:2165   .text.FLASH_GetProperty:000000000000007c $d
     /tmp/ccPds6SN.s:2170   .text.FLASH_SetProperty:0000000000000000 $t
     /tmp/ccPds6SN.s:2177   .text.FLASH_SetProperty:0000000000000000 FLASH_SetProperty
     /tmp/ccPds6SN.s:2214   .text.FLASH_PflashSetProtection:0000000000000000 $t
     /tmp/ccPds6SN.s:2221   .text.FLASH_PflashSetProtection:0000000000000000 FLASH_PflashSetProtection
     /tmp/ccPds6SN.s:2263   .text.FLASH_PflashSetProtection:0000000000000020 $d
     /tmp/ccPds6SN.s:2268   .text.FLASH_PflashGetProtection:0000000000000000 $t
     /tmp/ccPds6SN.s:2275   .text.FLASH_PflashGetProtection:0000000000000000 FLASH_PflashGetProtection
     /tmp/ccPds6SN.s:2314   .text.FLASH_PflashGetProtection:000000000000001c $d
     /tmp/ccPds6SN.s:2319   .text.FLASH_PflashSetPrefetchSpeculation:0000000000000000 $t
     /tmp/ccPds6SN.s:2326   .text.FLASH_PflashSetPrefetchSpeculation:0000000000000000 FLASH_PflashSetPrefetchSpeculation
     /tmp/ccPds6SN.s:2406   .text.FLASH_PflashSetPrefetchSpeculation:000000000000004c $d
     /tmp/ccPds6SN.s:2414   .text.FLASH_PflashGetPrefetchSpeculation:0000000000000000 $t
     /tmp/ccPds6SN.s:2421   .text.FLASH_PflashGetPrefetchSpeculation:0000000000000000 FLASH_PflashGetPrefetchSpeculation
     /tmp/ccPds6SN.s:2468   .text.FLASH_PflashGetPrefetchSpeculation:0000000000000024 $d
     /tmp/ccPds6SN.s:2473   .text.mcm_flash_cache_clear:0000000000000000 $t
     /tmp/ccPds6SN.s:2480   .text.mcm_flash_cache_clear:0000000000000000 mcm_flash_cache_clear
     /tmp/ccPds6SN.s:2507   .text.mcm_flash_cache_clear:0000000000000014 $d
     /tmp/ccPds6SN.s:2513   .text.flash_cache_clear_process:0000000000000000 $t
     /tmp/ccPds6SN.s:2519   .text.flash_cache_clear_process:0000000000000000 flash_cache_clear_process
     /tmp/ccPds6SN.s:2555   .text.flash_cache_clear:0000000000000000 $t
     /tmp/ccPds6SN.s:2562   .text.flash_cache_clear:0000000000000000 flash_cache_clear
     /tmp/ccPds6SN.s:2584   .text.FLASH_EraseAll:0000000000000000 $t
     /tmp/ccPds6SN.s:2591   .text.FLASH_EraseAll:0000000000000000 FLASH_EraseAll
     /tmp/ccPds6SN.s:2656   .text.FLASH_EraseAll:0000000000000038 $d
     /tmp/ccPds6SN.s:2663   .text.FLASH_Erase:0000000000000000 $t
     /tmp/ccPds6SN.s:2670   .text.FLASH_Erase:0000000000000000 FLASH_Erase
     /tmp/ccPds6SN.s:2793   .text.FLASH_Erase:0000000000000084 $d
     /tmp/ccPds6SN.s:2798   .text.FLASH_EraseAllUnsecure:0000000000000000 $t
     /tmp/ccPds6SN.s:2805   .text.FLASH_EraseAllUnsecure:0000000000000000 FLASH_EraseAllUnsecure
     /tmp/ccPds6SN.s:2870   .text.FLASH_EraseAllUnsecure:0000000000000038 $d
     /tmp/ccPds6SN.s:2876   .text.FLASH_EraseAllExecuteOnlySegments:0000000000000000 $t
     /tmp/ccPds6SN.s:2883   .text.FLASH_EraseAllExecuteOnlySegments:0000000000000000 FLASH_EraseAllExecuteOnlySegments
     /tmp/ccPds6SN.s:2948   .text.FLASH_EraseAllExecuteOnlySegments:0000000000000038 $d
     /tmp/ccPds6SN.s:2954   .text.FLASH_Program:0000000000000000 $t
     /tmp/ccPds6SN.s:2961   .text.FLASH_Program:0000000000000000 FLASH_Program
     /tmp/ccPds6SN.s:3108   .text.FLASH_Program:00000000000000a0 $d
     /tmp/ccPds6SN.s:3115   .text.FLASH_ProgramOnce:0000000000000000 $t
     /tmp/ccPds6SN.s:3122   .text.FLASH_ProgramOnce:0000000000000000 FLASH_ProgramOnce
     /tmp/ccPds6SN.s:3208   .text.FLASH_ProgramOnce:0000000000000054 $d
     /tmp/ccPds6SN.s:3270   .rodata.kPFlashDensities:0000000000000000 kPFlashDensities
     /tmp/ccPds6SN.s:3263   .rodata.kFPROTL:0000000000000000 kFPROTL
     /tmp/ccPds6SN.s:3257   .rodata.kFCCOBx:0000000000000000 kFCCOBx
     /tmp/ccPds6SN.s:3219   .bss.callFlashCommonBitOperation:0000000000000000 $d
     /tmp/ccPds6SN.s:3223   .bss.callFlashCommonBitOperation:0000000000000000 callFlashCommonBitOperation
     /tmp/ccPds6SN.s:3226   .bss.callFlashRunCommand:0000000000000000 $d
     /tmp/ccPds6SN.s:3230   .bss.callFlashRunCommand:0000000000000000 callFlashRunCommand
     /tmp/ccPds6SN.s:3233   .bss.s_flashCommonBitOperation:0000000000000000 $d
     /tmp/ccPds6SN.s:3237   .bss.s_flashCommonBitOperation:0000000000000000 s_flashCommonBitOperation
     /tmp/ccPds6SN.s:3240   .bss.s_flashExecuteInRamFunctionInfo:0000000000000000 $d
     /tmp/ccPds6SN.s:3244   .bss.s_flashExecuteInRamFunctionInfo:0000000000000000 s_flashExecuteInRamFunctionInfo
     /tmp/ccPds6SN.s:3247   .bss.s_flashRunCommand:0000000000000000 $d
     /tmp/ccPds6SN.s:3251   .bss.s_flashRunCommand:0000000000000000 s_flashRunCommand
     /tmp/ccPds6SN.s:3254   .rodata.kFCCOBx:0000000000000000 $d
     /tmp/ccPds6SN.s:3260   .rodata.kFPROTL:0000000000000000 $d
     /tmp/ccPds6SN.s:3266   .rodata.kPFlashDensities:0000000000000000 $d
     /tmp/ccPds6SN.s:3287   .rodata.s_flashCommonBitOperationFunctionCode:0000000000000000 $d
     /tmp/ccPds6SN.s:3291   .rodata.s_flashCommonBitOperationFunctionCode:0000000000000000 s_flashCommonBitOperationFunctionCode
     /tmp/ccPds6SN.s:3307   .rodata.s_flashRunCommandFunctionCode:0000000000000000 $d
     /tmp/ccPds6SN.s:3311   .rodata.s_flashRunCommandFunctionCode:0000000000000000 s_flashRunCommandFunctionCode

UNDEFINED SYMBOLS
memcpy
__aeabi_uidiv
memset
__aeabi_uidivmod
