   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_flexio_i2c_master.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.FLEXIO_I2C_GetInstance,"ax",%progbits
  16              		.align	1
  17              		.global	FLEXIO_I2C_GetInstance
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	FLEXIO_I2C_GetInstance:
  24              	.LFB70:
  25              		.file 1 "../drivers/fsl_flexio_i2c_master.c"
   1:../drivers/fsl_flexio_i2c_master.c **** /*
   2:../drivers/fsl_flexio_i2c_master.c ****  * The Clear BSD License
   3:../drivers/fsl_flexio_i2c_master.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_flexio_i2c_master.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_flexio_i2c_master.c ****  * All rights reserved.
   6:../drivers/fsl_flexio_i2c_master.c ****  *
   7:../drivers/fsl_flexio_i2c_master.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_flexio_i2c_master.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_flexio_i2c_master.c ****  * that the following conditions are met:
  10:../drivers/fsl_flexio_i2c_master.c ****  *
  11:../drivers/fsl_flexio_i2c_master.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_flexio_i2c_master.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_flexio_i2c_master.c ****  *
  14:../drivers/fsl_flexio_i2c_master.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_flexio_i2c_master.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_flexio_i2c_master.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_flexio_i2c_master.c ****  *
  18:../drivers/fsl_flexio_i2c_master.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_flexio_i2c_master.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_flexio_i2c_master.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_flexio_i2c_master.c ****  *
  22:../drivers/fsl_flexio_i2c_master.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_flexio_i2c_master.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_flexio_i2c_master.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_flexio_i2c_master.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_flexio_i2c_master.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_flexio_i2c_master.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_flexio_i2c_master.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_flexio_i2c_master.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_flexio_i2c_master.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_flexio_i2c_master.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_flexio_i2c_master.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_flexio_i2c_master.c ****  */
  34:../drivers/fsl_flexio_i2c_master.c **** 
  35:../drivers/fsl_flexio_i2c_master.c **** #include "fsl_flexio_i2c_master.h"
  36:../drivers/fsl_flexio_i2c_master.c **** 
  37:../drivers/fsl_flexio_i2c_master.c **** /*******************************************************************************
  38:../drivers/fsl_flexio_i2c_master.c ****  * Definitions
  39:../drivers/fsl_flexio_i2c_master.c ****  ******************************************************************************/
  40:../drivers/fsl_flexio_i2c_master.c **** 
  41:../drivers/fsl_flexio_i2c_master.c **** /*! @brief  FLEXIO I2C transfer state */
  42:../drivers/fsl_flexio_i2c_master.c **** enum _flexio_i2c_master_transfer_states
  43:../drivers/fsl_flexio_i2c_master.c **** {
  44:../drivers/fsl_flexio_i2c_master.c ****     kFLEXIO_I2C_Idle = 0x0U,             /*!< I2C bus idle */
  45:../drivers/fsl_flexio_i2c_master.c ****     kFLEXIO_I2C_CheckAddress = 0x1U,     /*!< 7-bit address check state */
  46:../drivers/fsl_flexio_i2c_master.c ****     kFLEXIO_I2C_SendCommand = 0x2U,      /*!< Send command byte phase */
  47:../drivers/fsl_flexio_i2c_master.c ****     kFLEXIO_I2C_SendData = 0x3U,         /*!< Send data transfer phase*/
  48:../drivers/fsl_flexio_i2c_master.c ****     kFLEXIO_I2C_ReceiveDataBegin = 0x4U, /*!< Receive data begin transfer phase*/
  49:../drivers/fsl_flexio_i2c_master.c ****     kFLEXIO_I2C_ReceiveData = 0x5U,      /*!< Receive data transfer phase*/
  50:../drivers/fsl_flexio_i2c_master.c **** };
  51:../drivers/fsl_flexio_i2c_master.c **** 
  52:../drivers/fsl_flexio_i2c_master.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  53:../drivers/fsl_flexio_i2c_master.c **** extern const clock_ip_name_t s_flexioClocks[];
  54:../drivers/fsl_flexio_i2c_master.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  55:../drivers/fsl_flexio_i2c_master.c **** 
  56:../drivers/fsl_flexio_i2c_master.c **** extern FLEXIO_Type *const s_flexioBases[];
  57:../drivers/fsl_flexio_i2c_master.c **** 
  58:../drivers/fsl_flexio_i2c_master.c **** /*******************************************************************************
  59:../drivers/fsl_flexio_i2c_master.c ****  * Prototypes
  60:../drivers/fsl_flexio_i2c_master.c ****  ******************************************************************************/
  61:../drivers/fsl_flexio_i2c_master.c **** 
  62:../drivers/fsl_flexio_i2c_master.c **** extern uint32_t FLEXIO_GetInstance(FLEXIO_Type *base);
  63:../drivers/fsl_flexio_i2c_master.c **** 
  64:../drivers/fsl_flexio_i2c_master.c **** /*!
  65:../drivers/fsl_flexio_i2c_master.c ****  * @brief Set up master transfer, send slave address and decide the initial
  66:../drivers/fsl_flexio_i2c_master.c ****  * transfer state.
  67:../drivers/fsl_flexio_i2c_master.c ****  *
  68:../drivers/fsl_flexio_i2c_master.c ****  * @param base pointer to FLEXIO_I2C_Type structure
  69:../drivers/fsl_flexio_i2c_master.c ****  * @param handle pointer to flexio_i2c_master_handle_t structure which stores the transfer state
  70:../drivers/fsl_flexio_i2c_master.c ****  * @param transfer pointer to flexio_i2c_master_transfer_t structure
  71:../drivers/fsl_flexio_i2c_master.c ****  */
  72:../drivers/fsl_flexio_i2c_master.c **** static status_t FLEXIO_I2C_MasterTransferInitStateMachine(FLEXIO_I2C_Type *base,
  73:../drivers/fsl_flexio_i2c_master.c ****                                                           flexio_i2c_master_handle_t *handle,
  74:../drivers/fsl_flexio_i2c_master.c ****                                                           flexio_i2c_master_transfer_t *xfer);
  75:../drivers/fsl_flexio_i2c_master.c **** 
  76:../drivers/fsl_flexio_i2c_master.c **** /*!
  77:../drivers/fsl_flexio_i2c_master.c ****  * @brief Master run transfer state machine to perform a byte of transfer.
  78:../drivers/fsl_flexio_i2c_master.c ****  *
  79:../drivers/fsl_flexio_i2c_master.c ****  * @param base pointer to FLEXIO_I2C_Type structure
  80:../drivers/fsl_flexio_i2c_master.c ****  * @param handle pointer to flexio_i2c_master_handle_t structure which stores the transfer state
  81:../drivers/fsl_flexio_i2c_master.c ****  * @param statusFlags flexio i2c hardware status
  82:../drivers/fsl_flexio_i2c_master.c ****  * @retval kStatus_Success Successfully run state machine
  83:../drivers/fsl_flexio_i2c_master.c ****  * @retval kStatus_FLEXIO_I2C_Nak Receive Nak during transfer
  84:../drivers/fsl_flexio_i2c_master.c ****  */
  85:../drivers/fsl_flexio_i2c_master.c **** static status_t FLEXIO_I2C_MasterTransferRunStateMachine(FLEXIO_I2C_Type *base,
  86:../drivers/fsl_flexio_i2c_master.c ****                                                          flexio_i2c_master_handle_t *handle,
  87:../drivers/fsl_flexio_i2c_master.c ****                                                          uint32_t statusFlags);
  88:../drivers/fsl_flexio_i2c_master.c **** 
  89:../drivers/fsl_flexio_i2c_master.c **** /*!
  90:../drivers/fsl_flexio_i2c_master.c ****  * @brief Complete transfer, disable interrupt and call callback.
  91:../drivers/fsl_flexio_i2c_master.c ****  *
  92:../drivers/fsl_flexio_i2c_master.c ****  * @param base pointer to FLEXIO_I2C_Type structure
  93:../drivers/fsl_flexio_i2c_master.c ****  * @param handle pointer to flexio_i2c_master_handle_t structure which stores the transfer state
  94:../drivers/fsl_flexio_i2c_master.c ****  * @param status flexio transfer status
  95:../drivers/fsl_flexio_i2c_master.c ****  */
  96:../drivers/fsl_flexio_i2c_master.c **** static void FLEXIO_I2C_MasterTransferComplete(FLEXIO_I2C_Type *base,
  97:../drivers/fsl_flexio_i2c_master.c ****                                               flexio_i2c_master_handle_t *handle,
  98:../drivers/fsl_flexio_i2c_master.c ****                                               status_t status);
  99:../drivers/fsl_flexio_i2c_master.c **** 
 100:../drivers/fsl_flexio_i2c_master.c **** /*******************************************************************************
 101:../drivers/fsl_flexio_i2c_master.c ****  * Codes
 102:../drivers/fsl_flexio_i2c_master.c ****  ******************************************************************************/
 103:../drivers/fsl_flexio_i2c_master.c **** 
 104:../drivers/fsl_flexio_i2c_master.c **** uint32_t FLEXIO_I2C_GetInstance(FLEXIO_I2C_Type *base)
 105:../drivers/fsl_flexio_i2c_master.c **** {
  26              		.loc 1 105 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
 106:../drivers/fsl_flexio_i2c_master.c ****     return FLEXIO_GetInstance(base->flexioBase);
  35              		.loc 1 106 0
  36 0002 0068     		ldr	r0, [r0]
  37              	.LVL1:
  38 0004 FFF7FEFF 		bl	FLEXIO_GetInstance
  39              	.LVL2:
 107:../drivers/fsl_flexio_i2c_master.c **** }
  40              		.loc 1 107 0
  41              		@ sp needed
  42 0008 10BD     		pop	{r4, pc}
  43              		.cfi_endproc
  44              	.LFE70:
  46              		.global	__aeabi_uidiv
  47              		.section	.text.FLEXIO_I2C_MasterInit,"ax",%progbits
  48              		.align	1
  49              		.global	FLEXIO_I2C_MasterInit
  50              		.syntax unified
  51              		.code	16
  52              		.thumb_func
  53              		.fpu softvfp
  55              	FLEXIO_I2C_MasterInit:
  56              	.LFB74:
 108:../drivers/fsl_flexio_i2c_master.c **** 
 109:../drivers/fsl_flexio_i2c_master.c **** static status_t FLEXIO_I2C_MasterTransferInitStateMachine(FLEXIO_I2C_Type *base,
 110:../drivers/fsl_flexio_i2c_master.c ****                                                           flexio_i2c_master_handle_t *handle,
 111:../drivers/fsl_flexio_i2c_master.c ****                                                           flexio_i2c_master_transfer_t *xfer)
 112:../drivers/fsl_flexio_i2c_master.c **** {
 113:../drivers/fsl_flexio_i2c_master.c ****     bool needRestart;
 114:../drivers/fsl_flexio_i2c_master.c ****     uint32_t byteCount;
 115:../drivers/fsl_flexio_i2c_master.c **** 
 116:../drivers/fsl_flexio_i2c_master.c ****     /* Init the handle member. */
 117:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.slaveAddress = xfer->slaveAddress;
 118:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.direction = xfer->direction;
 119:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.subaddress = xfer->subaddress;
 120:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.subaddressSize = xfer->subaddressSize;
 121:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.data = xfer->data;
 122:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.dataSize = xfer->dataSize;
 123:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.flags = xfer->flags;
 124:../drivers/fsl_flexio_i2c_master.c ****     handle->transferSize = xfer->dataSize;
 125:../drivers/fsl_flexio_i2c_master.c **** 
 126:../drivers/fsl_flexio_i2c_master.c ****     /* Initial state, i2c check address state. */
 127:../drivers/fsl_flexio_i2c_master.c ****     handle->state = kFLEXIO_I2C_CheckAddress;
 128:../drivers/fsl_flexio_i2c_master.c **** 
 129:../drivers/fsl_flexio_i2c_master.c ****     /* Clear all status before transfer. */
 130:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterClearStatusFlags(base, kFLEXIO_I2C_ReceiveNakFlag);
 131:../drivers/fsl_flexio_i2c_master.c **** 
 132:../drivers/fsl_flexio_i2c_master.c ****     /* Calculate whether need to send re-start. */
 133:../drivers/fsl_flexio_i2c_master.c ****     needRestart = (handle->transfer.subaddressSize != 0) && (handle->transfer.direction == kFLEXIO_
 134:../drivers/fsl_flexio_i2c_master.c **** 
 135:../drivers/fsl_flexio_i2c_master.c ****     /* Calculate total byte count in a frame. */
 136:../drivers/fsl_flexio_i2c_master.c ****     byteCount = 1;
 137:../drivers/fsl_flexio_i2c_master.c **** 
 138:../drivers/fsl_flexio_i2c_master.c ****     if (!needRestart)
 139:../drivers/fsl_flexio_i2c_master.c ****     {
 140:../drivers/fsl_flexio_i2c_master.c ****         byteCount += handle->transfer.dataSize;
 141:../drivers/fsl_flexio_i2c_master.c ****     }
 142:../drivers/fsl_flexio_i2c_master.c **** 
 143:../drivers/fsl_flexio_i2c_master.c ****     if (handle->transfer.subaddressSize != 0)
 144:../drivers/fsl_flexio_i2c_master.c ****     {
 145:../drivers/fsl_flexio_i2c_master.c ****         byteCount += handle->transfer.subaddressSize;
 146:../drivers/fsl_flexio_i2c_master.c ****         /* Next state, send command byte. */
 147:../drivers/fsl_flexio_i2c_master.c ****         handle->state = kFLEXIO_I2C_SendCommand;
 148:../drivers/fsl_flexio_i2c_master.c ****     }
 149:../drivers/fsl_flexio_i2c_master.c **** 
 150:../drivers/fsl_flexio_i2c_master.c ****     /* Configure data count. */
 151:../drivers/fsl_flexio_i2c_master.c ****     if (FLEXIO_I2C_MasterSetTransferCount(base, byteCount) != kStatus_Success)
 152:../drivers/fsl_flexio_i2c_master.c ****     {
 153:../drivers/fsl_flexio_i2c_master.c ****         return kStatus_InvalidArgument;
 154:../drivers/fsl_flexio_i2c_master.c ****     }
 155:../drivers/fsl_flexio_i2c_master.c **** 
 156:../drivers/fsl_flexio_i2c_master.c ****     while (!((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shifterIndex[0]))))
 157:../drivers/fsl_flexio_i2c_master.c ****     {
 158:../drivers/fsl_flexio_i2c_master.c ****     }
 159:../drivers/fsl_flexio_i2c_master.c **** 
 160:../drivers/fsl_flexio_i2c_master.c ****     /* Send address byte first. */
 161:../drivers/fsl_flexio_i2c_master.c ****     if (needRestart)
 162:../drivers/fsl_flexio_i2c_master.c ****     {
 163:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_I2C_MasterStart(base, handle->transfer.slaveAddress, kFLEXIO_I2C_Write);
 164:../drivers/fsl_flexio_i2c_master.c ****     }
 165:../drivers/fsl_flexio_i2c_master.c ****     else
 166:../drivers/fsl_flexio_i2c_master.c ****     {
 167:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_I2C_MasterStart(base, handle->transfer.slaveAddress, handle->transfer.direction);
 168:../drivers/fsl_flexio_i2c_master.c ****     }
 169:../drivers/fsl_flexio_i2c_master.c **** 
 170:../drivers/fsl_flexio_i2c_master.c ****     return kStatus_Success;
 171:../drivers/fsl_flexio_i2c_master.c **** }
 172:../drivers/fsl_flexio_i2c_master.c **** 
 173:../drivers/fsl_flexio_i2c_master.c **** static status_t FLEXIO_I2C_MasterTransferRunStateMachine(FLEXIO_I2C_Type *base,
 174:../drivers/fsl_flexio_i2c_master.c ****                                                          flexio_i2c_master_handle_t *handle,
 175:../drivers/fsl_flexio_i2c_master.c ****                                                          uint32_t statusFlags)
 176:../drivers/fsl_flexio_i2c_master.c **** {
 177:../drivers/fsl_flexio_i2c_master.c ****     if (statusFlags & kFLEXIO_I2C_ReceiveNakFlag)
 178:../drivers/fsl_flexio_i2c_master.c ****     {
 179:../drivers/fsl_flexio_i2c_master.c ****         /* Clear receive nak flag. */
 180:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_ClearShifterErrorFlags(base->flexioBase, 1U << base->shifterIndex[1]);
 181:../drivers/fsl_flexio_i2c_master.c **** 
 182:../drivers/fsl_flexio_i2c_master.c ****         if ((!((handle->state == kFLEXIO_I2C_SendData) && (handle->transfer.dataSize == 0U))) &&
 183:../drivers/fsl_flexio_i2c_master.c ****             (!(((handle->state == kFLEXIO_I2C_ReceiveData) || (handle->state == kFLEXIO_I2C_Receive
 184:../drivers/fsl_flexio_i2c_master.c ****                (handle->transfer.dataSize == 1U))))
 185:../drivers/fsl_flexio_i2c_master.c ****         {
 186:../drivers/fsl_flexio_i2c_master.c ****             FLEXIO_I2C_MasterReadByte(base);
 187:../drivers/fsl_flexio_i2c_master.c **** 
 188:../drivers/fsl_flexio_i2c_master.c ****             FLEXIO_I2C_MasterAbortStop(base);
 189:../drivers/fsl_flexio_i2c_master.c **** 
 190:../drivers/fsl_flexio_i2c_master.c ****             handle->state = kFLEXIO_I2C_Idle;
 191:../drivers/fsl_flexio_i2c_master.c **** 
 192:../drivers/fsl_flexio_i2c_master.c ****             return kStatus_FLEXIO_I2C_Nak;
 193:../drivers/fsl_flexio_i2c_master.c ****         }
 194:../drivers/fsl_flexio_i2c_master.c ****     }
 195:../drivers/fsl_flexio_i2c_master.c **** 
 196:../drivers/fsl_flexio_i2c_master.c ****     if (handle->state == kFLEXIO_I2C_CheckAddress)
 197:../drivers/fsl_flexio_i2c_master.c ****     {
 198:../drivers/fsl_flexio_i2c_master.c ****         if (handle->transfer.direction == kFLEXIO_I2C_Write)
 199:../drivers/fsl_flexio_i2c_master.c ****         {
 200:../drivers/fsl_flexio_i2c_master.c ****             /* Next state, send data. */
 201:../drivers/fsl_flexio_i2c_master.c ****             handle->state = kFLEXIO_I2C_SendData;
 202:../drivers/fsl_flexio_i2c_master.c ****         }
 203:../drivers/fsl_flexio_i2c_master.c ****         else
 204:../drivers/fsl_flexio_i2c_master.c ****         {
 205:../drivers/fsl_flexio_i2c_master.c ****             /* Next state, receive data begin. */
 206:../drivers/fsl_flexio_i2c_master.c ****             handle->state = kFLEXIO_I2C_ReceiveDataBegin;
 207:../drivers/fsl_flexio_i2c_master.c ****         }
 208:../drivers/fsl_flexio_i2c_master.c ****     }
 209:../drivers/fsl_flexio_i2c_master.c **** 
 210:../drivers/fsl_flexio_i2c_master.c ****     if ((statusFlags & kFLEXIO_I2C_RxFullFlag) && (handle->state != kFLEXIO_I2C_ReceiveData))
 211:../drivers/fsl_flexio_i2c_master.c ****     {
 212:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_I2C_MasterReadByte(base);
 213:../drivers/fsl_flexio_i2c_master.c ****     }
 214:../drivers/fsl_flexio_i2c_master.c **** 
 215:../drivers/fsl_flexio_i2c_master.c ****     switch (handle->state)
 216:../drivers/fsl_flexio_i2c_master.c ****     {
 217:../drivers/fsl_flexio_i2c_master.c ****         case kFLEXIO_I2C_SendCommand:
 218:../drivers/fsl_flexio_i2c_master.c ****             if (statusFlags & kFLEXIO_I2C_TxEmptyFlag)
 219:../drivers/fsl_flexio_i2c_master.c ****             {
 220:../drivers/fsl_flexio_i2c_master.c ****                 if (handle->transfer.subaddressSize > 0)
 221:../drivers/fsl_flexio_i2c_master.c ****                 {
 222:../drivers/fsl_flexio_i2c_master.c ****                     handle->transfer.subaddressSize--;
 223:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterWriteByte(
 224:../drivers/fsl_flexio_i2c_master.c ****                         base, ((handle->transfer.subaddress) >> (8 * handle->transfer.subaddressSiz
 225:../drivers/fsl_flexio_i2c_master.c **** 
 226:../drivers/fsl_flexio_i2c_master.c ****                     if (handle->transfer.subaddressSize == 0)
 227:../drivers/fsl_flexio_i2c_master.c ****                     {
 228:../drivers/fsl_flexio_i2c_master.c ****                         /* Load re-start in advance. */
 229:../drivers/fsl_flexio_i2c_master.c ****                         if (handle->transfer.direction == kFLEXIO_I2C_Read)
 230:../drivers/fsl_flexio_i2c_master.c ****                         {
 231:../drivers/fsl_flexio_i2c_master.c ****                             while (!((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base-
 232:../drivers/fsl_flexio_i2c_master.c ****                             {
 233:../drivers/fsl_flexio_i2c_master.c ****                             }
 234:../drivers/fsl_flexio_i2c_master.c ****                             FLEXIO_I2C_MasterRepeatedStart(base);
 235:../drivers/fsl_flexio_i2c_master.c ****                         }
 236:../drivers/fsl_flexio_i2c_master.c ****                     }
 237:../drivers/fsl_flexio_i2c_master.c ****                 }
 238:../drivers/fsl_flexio_i2c_master.c ****                 else
 239:../drivers/fsl_flexio_i2c_master.c ****                 {
 240:../drivers/fsl_flexio_i2c_master.c ****                     if (handle->transfer.direction == kFLEXIO_I2C_Write)
 241:../drivers/fsl_flexio_i2c_master.c ****                     {
 242:../drivers/fsl_flexio_i2c_master.c ****                         /* Next state, send data. */
 243:../drivers/fsl_flexio_i2c_master.c ****                         handle->state = kFLEXIO_I2C_SendData;
 244:../drivers/fsl_flexio_i2c_master.c **** 
 245:../drivers/fsl_flexio_i2c_master.c ****                         /* Send first byte of data. */
 246:../drivers/fsl_flexio_i2c_master.c ****                         if (handle->transfer.dataSize > 0)
 247:../drivers/fsl_flexio_i2c_master.c ****                         {
 248:../drivers/fsl_flexio_i2c_master.c ****                             FLEXIO_I2C_MasterWriteByte(base, *handle->transfer.data);
 249:../drivers/fsl_flexio_i2c_master.c **** 
 250:../drivers/fsl_flexio_i2c_master.c ****                             handle->transfer.data++;
 251:../drivers/fsl_flexio_i2c_master.c ****                             handle->transfer.dataSize--;
 252:../drivers/fsl_flexio_i2c_master.c ****                         }
 253:../drivers/fsl_flexio_i2c_master.c ****                     }
 254:../drivers/fsl_flexio_i2c_master.c ****                     else
 255:../drivers/fsl_flexio_i2c_master.c ****                     {
 256:../drivers/fsl_flexio_i2c_master.c ****                         FLEXIO_I2C_MasterSetTransferCount(base, (handle->transfer.dataSize + 1));
 257:../drivers/fsl_flexio_i2c_master.c ****                         FLEXIO_I2C_MasterStart(base, handle->transfer.slaveAddress, kFLEXIO_I2C_Rea
 258:../drivers/fsl_flexio_i2c_master.c **** 
 259:../drivers/fsl_flexio_i2c_master.c ****                         /* Next state, receive data begin. */
 260:../drivers/fsl_flexio_i2c_master.c ****                         handle->state = kFLEXIO_I2C_ReceiveDataBegin;
 261:../drivers/fsl_flexio_i2c_master.c ****                     }
 262:../drivers/fsl_flexio_i2c_master.c ****                 }
 263:../drivers/fsl_flexio_i2c_master.c ****             }
 264:../drivers/fsl_flexio_i2c_master.c ****             break;
 265:../drivers/fsl_flexio_i2c_master.c **** 
 266:../drivers/fsl_flexio_i2c_master.c ****         /* Send command byte. */
 267:../drivers/fsl_flexio_i2c_master.c ****         case kFLEXIO_I2C_SendData:
 268:../drivers/fsl_flexio_i2c_master.c ****             if (statusFlags & kFLEXIO_I2C_TxEmptyFlag)
 269:../drivers/fsl_flexio_i2c_master.c ****             {
 270:../drivers/fsl_flexio_i2c_master.c ****                 /* Send one byte of data. */
 271:../drivers/fsl_flexio_i2c_master.c ****                 if (handle->transfer.dataSize > 0)
 272:../drivers/fsl_flexio_i2c_master.c ****                 {
 273:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterWriteByte(base, *handle->transfer.data);
 274:../drivers/fsl_flexio_i2c_master.c **** 
 275:../drivers/fsl_flexio_i2c_master.c ****                     handle->transfer.data++;
 276:../drivers/fsl_flexio_i2c_master.c ****                     handle->transfer.dataSize--;
 277:../drivers/fsl_flexio_i2c_master.c ****                 }
 278:../drivers/fsl_flexio_i2c_master.c ****                 else
 279:../drivers/fsl_flexio_i2c_master.c ****                 {
 280:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterStop(base);
 281:../drivers/fsl_flexio_i2c_master.c **** 
 282:../drivers/fsl_flexio_i2c_master.c ****                     while (!(FLEXIO_I2C_MasterGetStatusFlags(base) & kFLEXIO_I2C_RxFullFlag))
 283:../drivers/fsl_flexio_i2c_master.c ****                     {
 284:../drivers/fsl_flexio_i2c_master.c ****                     }
 285:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterReadByte(base);
 286:../drivers/fsl_flexio_i2c_master.c **** 
 287:../drivers/fsl_flexio_i2c_master.c ****                     handle->state = kFLEXIO_I2C_Idle;
 288:../drivers/fsl_flexio_i2c_master.c ****                 }
 289:../drivers/fsl_flexio_i2c_master.c ****             }
 290:../drivers/fsl_flexio_i2c_master.c ****             break;
 291:../drivers/fsl_flexio_i2c_master.c **** 
 292:../drivers/fsl_flexio_i2c_master.c ****         case kFLEXIO_I2C_ReceiveDataBegin:
 293:../drivers/fsl_flexio_i2c_master.c ****             if (statusFlags & kFLEXIO_I2C_RxFullFlag)
 294:../drivers/fsl_flexio_i2c_master.c ****             {
 295:../drivers/fsl_flexio_i2c_master.c ****                 handle->state = kFLEXIO_I2C_ReceiveData;
 296:../drivers/fsl_flexio_i2c_master.c ****                 /* Send nak at the last receive byte. */
 297:../drivers/fsl_flexio_i2c_master.c ****                 if (handle->transfer.dataSize == 1)
 298:../drivers/fsl_flexio_i2c_master.c ****                 {
 299:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterEnableAck(base, false);
 300:../drivers/fsl_flexio_i2c_master.c ****                     while (!((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shifter
 301:../drivers/fsl_flexio_i2c_master.c ****                     {
 302:../drivers/fsl_flexio_i2c_master.c ****                     }
 303:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterStop(base);
 304:../drivers/fsl_flexio_i2c_master.c ****                 }
 305:../drivers/fsl_flexio_i2c_master.c ****                 else
 306:../drivers/fsl_flexio_i2c_master.c ****                 {
 307:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterEnableAck(base, true);
 308:../drivers/fsl_flexio_i2c_master.c ****                 }
 309:../drivers/fsl_flexio_i2c_master.c ****             }
 310:../drivers/fsl_flexio_i2c_master.c ****             else if (statusFlags & kFLEXIO_I2C_TxEmptyFlag)
 311:../drivers/fsl_flexio_i2c_master.c ****             {
 312:../drivers/fsl_flexio_i2c_master.c ****                 /* Read one byte of data. */
 313:../drivers/fsl_flexio_i2c_master.c ****                 FLEXIO_I2C_MasterWriteByte(base, 0xFFFFFFFFU);
 314:../drivers/fsl_flexio_i2c_master.c ****             }
 315:../drivers/fsl_flexio_i2c_master.c ****             else
 316:../drivers/fsl_flexio_i2c_master.c ****             {
 317:../drivers/fsl_flexio_i2c_master.c ****             }
 318:../drivers/fsl_flexio_i2c_master.c ****             break;
 319:../drivers/fsl_flexio_i2c_master.c **** 
 320:../drivers/fsl_flexio_i2c_master.c ****         case kFLEXIO_I2C_ReceiveData:
 321:../drivers/fsl_flexio_i2c_master.c ****             if (statusFlags & kFLEXIO_I2C_RxFullFlag)
 322:../drivers/fsl_flexio_i2c_master.c ****             {
 323:../drivers/fsl_flexio_i2c_master.c ****                 *handle->transfer.data = FLEXIO_I2C_MasterReadByte(base);
 324:../drivers/fsl_flexio_i2c_master.c ****                 handle->transfer.data++;
 325:../drivers/fsl_flexio_i2c_master.c ****                 if (handle->transfer.dataSize--)
 326:../drivers/fsl_flexio_i2c_master.c ****                 {
 327:../drivers/fsl_flexio_i2c_master.c ****                     if (handle->transfer.dataSize == 0)
 328:../drivers/fsl_flexio_i2c_master.c ****                     {
 329:../drivers/fsl_flexio_i2c_master.c ****                         FLEXIO_I2C_MasterDisableInterrupts(base, kFLEXIO_I2C_RxFullInterruptEnable)
 330:../drivers/fsl_flexio_i2c_master.c ****                         handle->state = kFLEXIO_I2C_Idle;
 331:../drivers/fsl_flexio_i2c_master.c ****                     }
 332:../drivers/fsl_flexio_i2c_master.c **** 
 333:../drivers/fsl_flexio_i2c_master.c ****                     /* Send nak at the last receive byte. */
 334:../drivers/fsl_flexio_i2c_master.c ****                     if (handle->transfer.dataSize == 1)
 335:../drivers/fsl_flexio_i2c_master.c ****                     {
 336:../drivers/fsl_flexio_i2c_master.c ****                         FLEXIO_I2C_MasterEnableAck(base, false);
 337:../drivers/fsl_flexio_i2c_master.c ****                         while (!((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shi
 338:../drivers/fsl_flexio_i2c_master.c ****                         {
 339:../drivers/fsl_flexio_i2c_master.c ****                         }
 340:../drivers/fsl_flexio_i2c_master.c ****                         FLEXIO_I2C_MasterStop(base);
 341:../drivers/fsl_flexio_i2c_master.c ****                     }
 342:../drivers/fsl_flexio_i2c_master.c ****                 }
 343:../drivers/fsl_flexio_i2c_master.c ****             }
 344:../drivers/fsl_flexio_i2c_master.c ****             else if (statusFlags & kFLEXIO_I2C_TxEmptyFlag)
 345:../drivers/fsl_flexio_i2c_master.c ****             {
 346:../drivers/fsl_flexio_i2c_master.c ****                 if (handle->transfer.dataSize > 1)
 347:../drivers/fsl_flexio_i2c_master.c ****                 {
 348:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterWriteByte(base, 0xFFFFFFFFU);
 349:../drivers/fsl_flexio_i2c_master.c ****                 }
 350:../drivers/fsl_flexio_i2c_master.c ****             }
 351:../drivers/fsl_flexio_i2c_master.c ****             else
 352:../drivers/fsl_flexio_i2c_master.c ****             {
 353:../drivers/fsl_flexio_i2c_master.c ****             }
 354:../drivers/fsl_flexio_i2c_master.c ****             break;
 355:../drivers/fsl_flexio_i2c_master.c **** 
 356:../drivers/fsl_flexio_i2c_master.c ****         default:
 357:../drivers/fsl_flexio_i2c_master.c ****             break;
 358:../drivers/fsl_flexio_i2c_master.c ****     }
 359:../drivers/fsl_flexio_i2c_master.c **** 
 360:../drivers/fsl_flexio_i2c_master.c ****     return kStatus_Success;
 361:../drivers/fsl_flexio_i2c_master.c **** }
 362:../drivers/fsl_flexio_i2c_master.c **** 
 363:../drivers/fsl_flexio_i2c_master.c **** static void FLEXIO_I2C_MasterTransferComplete(FLEXIO_I2C_Type *base,
 364:../drivers/fsl_flexio_i2c_master.c ****                                               flexio_i2c_master_handle_t *handle,
 365:../drivers/fsl_flexio_i2c_master.c ****                                               status_t status)
 366:../drivers/fsl_flexio_i2c_master.c **** {
 367:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterDisableInterrupts(base, kFLEXIO_I2C_TxEmptyInterruptEnable | kFLEXIO_I2C_RxFul
 368:../drivers/fsl_flexio_i2c_master.c **** 
 369:../drivers/fsl_flexio_i2c_master.c ****     if (handle->completionCallback)
 370:../drivers/fsl_flexio_i2c_master.c ****     {
 371:../drivers/fsl_flexio_i2c_master.c ****         handle->completionCallback(base, handle, status, handle->userData);
 372:../drivers/fsl_flexio_i2c_master.c ****     }
 373:../drivers/fsl_flexio_i2c_master.c **** }
 374:../drivers/fsl_flexio_i2c_master.c **** 
 375:../drivers/fsl_flexio_i2c_master.c **** status_t FLEXIO_I2C_MasterInit(FLEXIO_I2C_Type *base, flexio_i2c_master_config_t *masterConfig, uin
 376:../drivers/fsl_flexio_i2c_master.c **** {
  57              		.loc 1 376 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 56
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              	.LVL3:
  62 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  63              		.cfi_def_cfa_offset 20
  64              		.cfi_offset 4, -20
  65              		.cfi_offset 5, -16
  66              		.cfi_offset 6, -12
  67              		.cfi_offset 7, -8
  68              		.cfi_offset 14, -4
  69 0002 D646     		mov	lr, r10
  70 0004 4F46     		mov	r7, r9
  71 0006 80B5     		push	{r7, lr}
  72              		.cfi_def_cfa_offset 28
  73              		.cfi_offset 9, -28
  74              		.cfi_offset 10, -24
  75 0008 8FB0     		sub	sp, sp, #60
  76              		.cfi_def_cfa_offset 88
  77 000a 0500     		movs	r5, r0
  78 000c 0F00     		movs	r7, r1
  79 000e 0192     		str	r2, [sp, #4]
  80              	.LVL4:
 377:../drivers/fsl_flexio_i2c_master.c ****     assert(base && masterConfig);
 378:../drivers/fsl_flexio_i2c_master.c **** 
 379:../drivers/fsl_flexio_i2c_master.c ****     flexio_shifter_config_t shifterConfig;
 380:../drivers/fsl_flexio_i2c_master.c ****     flexio_timer_config_t timerConfig;
 381:../drivers/fsl_flexio_i2c_master.c ****     uint32_t controlVal = 0;
 382:../drivers/fsl_flexio_i2c_master.c ****     uint16_t timerDiv = 0;
 383:../drivers/fsl_flexio_i2c_master.c ****     status_t result = kStatus_Success;
 384:../drivers/fsl_flexio_i2c_master.c **** 
 385:../drivers/fsl_flexio_i2c_master.c ****     memset(&shifterConfig, 0, sizeof(shifterConfig));
  81              		.loc 1 385 0
  82 0010 09AC     		add	r4, sp, #36
  83 0012 1422     		movs	r2, #20
  84              	.LVL5:
  85 0014 0021     		movs	r1, #0
  86              	.LVL6:
  87 0016 2000     		movs	r0, r4
  88              	.LVL7:
  89 0018 FFF7FEFF 		bl	memset
  90              	.LVL8:
 386:../drivers/fsl_flexio_i2c_master.c ****     memset(&timerConfig, 0, sizeof(timerConfig));
  91              		.loc 1 386 0
  92 001c 1C22     		movs	r2, #28
  93 001e 0021     		movs	r1, #0
  94 0020 02A8     		add	r0, sp, #8
  95 0022 FFF7FEFF 		bl	memset
  96              	.LVL9:
 387:../drivers/fsl_flexio_i2c_master.c **** 
 388:../drivers/fsl_flexio_i2c_master.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 389:../drivers/fsl_flexio_i2c_master.c ****     /* Ungate flexio clock. */
 390:../drivers/fsl_flexio_i2c_master.c ****     CLOCK_EnableClock(s_flexioClocks[FLEXIO_I2C_GetInstance(base)]);
  97              		.loc 1 390 0
  98 0026 2800     		movs	r0, r5
  99 0028 FFF7FEFF 		bl	FLEXIO_I2C_GetInstance
 100              	.LVL10:
 101 002c 8000     		lsls	r0, r0, #2
 102 002e 504B     		ldr	r3, .L6
 103 0030 C358     		ldr	r3, [r0, r3]
 104              	.LVL11:
 105              	.LBB70:
 106              	.LBB71:
 107              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  53:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  54:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  55:../drivers/fsl_clock.h ****  * the driver.
  56:../drivers/fsl_clock.h ****  *
  57:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  58:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  59:../drivers/fsl_clock.h ****  */
  60:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  61:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  62:../drivers/fsl_clock.h **** #endif
  63:../drivers/fsl_clock.h **** 
  64:../drivers/fsl_clock.h **** /*******************************************************************************
  65:../drivers/fsl_clock.h ****  * Definitions
  66:../drivers/fsl_clock.h ****  ******************************************************************************/
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @name Driver version */
  69:../drivers/fsl_clock.h **** /*@{*/
  70:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.1.1. */
  71:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 1, 1))
  72:../drivers/fsl_clock.h **** /*@}*/
  73:../drivers/fsl_clock.h **** 
  74:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  75:../drivers/fsl_clock.h ****  *
  76:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  77:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  78:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  79:../drivers/fsl_clock.h ****  * @code
  80:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  81:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to clock driver.
  82:../drivers/fsl_clock.h ****  * @endcode
  83:../drivers/fsl_clock.h ****  *
  84:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up the
  85:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
  86:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  87:../drivers/fsl_clock.h ****  */
  88:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
  89:../drivers/fsl_clock.h **** 
  90:../drivers/fsl_clock.h **** /*! @brief The external XTAL32/EXTAL32/RTC_CLKIN clock frequency.
  91:../drivers/fsl_clock.h ****  *
  92:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
  93:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
  94:../drivers/fsl_clock.h ****  *
  95:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up
  96:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
  97:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  98:../drivers/fsl_clock.h ****  */
  99:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 100:../drivers/fsl_clock.h **** 
 101:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 102:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 103:../drivers/fsl_clock.h ****     {                  \
 104:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 105:../drivers/fsl_clock.h ****     }
 106:../drivers/fsl_clock.h **** 
 107:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 108:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 109:../drivers/fsl_clock.h ****     {               \
 110:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 111:../drivers/fsl_clock.h ****     }
 112:../drivers/fsl_clock.h **** 
 113:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 114:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 115:../drivers/fsl_clock.h ****     {               \
 116:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 117:../drivers/fsl_clock.h ****     }
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SPI. */
 120:../drivers/fsl_clock.h **** #define SPI_CLOCKS               \
 121:../drivers/fsl_clock.h ****     {                            \
 122:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1 \
 123:../drivers/fsl_clock.h ****     }
 124:../drivers/fsl_clock.h **** 
 125:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 126:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 127:../drivers/fsl_clock.h ****     {               \
 128:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 129:../drivers/fsl_clock.h ****     }
 130:../drivers/fsl_clock.h **** 
 131:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 132:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 133:../drivers/fsl_clock.h ****     {                                                                        \
 134:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 135:../drivers/fsl_clock.h ****     }
 136:../drivers/fsl_clock.h **** 
 137:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPUART. */
 138:../drivers/fsl_clock.h **** #define LPUART_CLOCKS                  \
 139:../drivers/fsl_clock.h ****     {                                  \
 140:../drivers/fsl_clock.h ****         kCLOCK_Lpuart0, kCLOCK_Lpuart1 \
 141:../drivers/fsl_clock.h ****     }
 142:../drivers/fsl_clock.h **** 
 143:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 144:../drivers/fsl_clock.h **** #define DAC_CLOCKS  \
 145:../drivers/fsl_clock.h ****     {               \
 146:../drivers/fsl_clock.h ****         kCLOCK_Dac0 \
 147:../drivers/fsl_clock.h ****     }
 148:../drivers/fsl_clock.h **** 
 149:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 150:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 151:../drivers/fsl_clock.h ****     {                 \
 152:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 153:../drivers/fsl_clock.h ****     }
 154:../drivers/fsl_clock.h **** 
 155:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 156:../drivers/fsl_clock.h **** #define ADC16_CLOCKS \
 157:../drivers/fsl_clock.h ****     {                \
 158:../drivers/fsl_clock.h ****         kCLOCK_Adc0  \
 159:../drivers/fsl_clock.h ****     }
 160:../drivers/fsl_clock.h **** 
 161:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXIO. */
 162:../drivers/fsl_clock.h **** #define FLEXIO_CLOCKS  \
 163:../drivers/fsl_clock.h ****     {                  \
 164:../drivers/fsl_clock.h ****         kCLOCK_Flexio0 \
 165:../drivers/fsl_clock.h ****     }
 166:../drivers/fsl_clock.h **** 
 167:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 168:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 169:../drivers/fsl_clock.h ****     {                \
 170:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 171:../drivers/fsl_clock.h ****     }
 172:../drivers/fsl_clock.h **** 
 173:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMA. */
 174:../drivers/fsl_clock.h **** #define DMA_CLOCKS  \
 175:../drivers/fsl_clock.h ****     {               \
 176:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 177:../drivers/fsl_clock.h ****     }
 178:../drivers/fsl_clock.h **** 
 179:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 180:../drivers/fsl_clock.h **** #define UART_CLOCKS                                      \
 181:../drivers/fsl_clock.h ****     {                                                    \
 182:../drivers/fsl_clock.h ****         kCLOCK_IpInvalid, kCLOCK_IpInvalid, kCLOCK_Uart2 \
 183:../drivers/fsl_clock.h ****     }
 184:../drivers/fsl_clock.h **** 
 185:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for TPM. */
 186:../drivers/fsl_clock.h **** #define TPM_CLOCKS                            \
 187:../drivers/fsl_clock.h ****     {                                         \
 188:../drivers/fsl_clock.h ****         kCLOCK_Tpm0, kCLOCK_Tpm1, kCLOCK_Tpm2 \
 189:../drivers/fsl_clock.h ****     }
 190:../drivers/fsl_clock.h **** 
 191:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 192:../drivers/fsl_clock.h **** #define I2C_CLOCKS               \
 193:../drivers/fsl_clock.h ****     {                            \
 194:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1 \
 195:../drivers/fsl_clock.h ****     }
 196:../drivers/fsl_clock.h **** 
 197:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 198:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 199:../drivers/fsl_clock.h ****     {               \
 200:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 201:../drivers/fsl_clock.h ****     }
 202:../drivers/fsl_clock.h **** 
 203:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 204:../drivers/fsl_clock.h **** #define CMP_CLOCKS  \
 205:../drivers/fsl_clock.h ****     {               \
 206:../drivers/fsl_clock.h ****         kCLOCK_Cmp0 \
 207:../drivers/fsl_clock.h ****     }
 208:../drivers/fsl_clock.h **** 
 209:../drivers/fsl_clock.h **** /*!
 210:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 211:../drivers/fsl_clock.h ****  */
 212:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 213:../drivers/fsl_clock.h **** 
 214:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 215:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 216:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 217:../drivers/fsl_clock.h **** 
 218:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC SYS_CLK
 219:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC SYS_CLK
 220:../drivers/fsl_clock.h **** #define SPI0_CLK_SRC BUS_CLK
 221:../drivers/fsl_clock.h **** #define SPI1_CLK_SRC SYS_CLK
 222:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 223:../drivers/fsl_clock.h **** 
 224:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 225:../drivers/fsl_clock.h **** typedef enum _clock_name
 226:../drivers/fsl_clock.h **** {
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 229:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 230:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 231:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 232:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 233:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 234:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 235:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 236:../drivers/fsl_clock.h **** 
 237:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 238:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 239:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 240:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 241:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 242:../drivers/fsl_clock.h **** 
 243:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 244:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 245:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 246:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 247:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 248:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 249:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 250:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 251:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 252:../drivers/fsl_clock.h **** 
 253:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 254:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 255:../drivers/fsl_clock.h **** 
 256:../drivers/fsl_clock.h **** } clock_name_t;
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 259:../drivers/fsl_clock.h **** 
 260:../drivers/fsl_clock.h ****  clock_gate_t definition:
 261:../drivers/fsl_clock.h **** 
 262:../drivers/fsl_clock.h ****  31                              16                              0
 263:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 264:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 265:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 266:../drivers/fsl_clock.h **** 
 267:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 268:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 271:../drivers/fsl_clock.h **** 
 272:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 273:../drivers/fsl_clock.h **** 
 274:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 275:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 276:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 277:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 278:../drivers/fsl_clock.h **** 
 279:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 280:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 281:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 282:../drivers/fsl_clock.h **** 
 283:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 284:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 285:../drivers/fsl_clock.h **** 
 286:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 287:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 288:../drivers/fsl_clock.h **** {
 289:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 290:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 291:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 292:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 293:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 294:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 295:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x1034U, 22U),
 296:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x1034U, 23U),
 297:../drivers/fsl_clock.h **** 
 298:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 299:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 300:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 301:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 302:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 303:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 304:../drivers/fsl_clock.h ****     kCLOCK_Lpuart0 = CLK_GATE_DEFINE(0x1038U, 20U),
 305:../drivers/fsl_clock.h ****     kCLOCK_Lpuart1 = CLK_GATE_DEFINE(0x1038U, 21U),
 306:../drivers/fsl_clock.h ****     kCLOCK_Flexio0 = CLK_GATE_DEFINE(0x1038U, 31U),
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 309:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 310:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 311:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 312:../drivers/fsl_clock.h ****     kCLOCK_Tpm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 313:../drivers/fsl_clock.h ****     kCLOCK_Tpm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 314:../drivers/fsl_clock.h ****     kCLOCK_Tpm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 315:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 316:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 317:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x103CU, 31U),
 318:../drivers/fsl_clock.h **** 
 319:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 8U),
 320:../drivers/fsl_clock.h **** } clock_ip_name_t;
 321:../drivers/fsl_clock.h **** 
 322:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 323:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 324:../drivers/fsl_clock.h **** {
 325:../drivers/fsl_clock.h ****     uint8_t er32kSrc; /*!< ERCLK32K source selection.   */
 326:../drivers/fsl_clock.h ****     uint32_t clkdiv1; /*!< SIM_CLKDIV1.                 */
 327:../drivers/fsl_clock.h **** } sim_clock_config_t;
 328:../drivers/fsl_clock.h **** 
 329:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 330:../drivers/fsl_clock.h **** enum _osc_cap_load
 331:../drivers/fsl_clock.h **** {
 332:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 333:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 334:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 335:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 336:../drivers/fsl_clock.h **** };
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 339:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 342:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 343:../drivers/fsl_clock.h **** };
 344:../drivers/fsl_clock.h **** 
 345:../drivers/fsl_clock.h **** /*! @brief The OSC configuration for OSCERCLK. */
 346:../drivers/fsl_clock.h **** typedef struct _oscer_config
 347:../drivers/fsl_clock.h **** {
 348:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of \ref _oscer_enable_mode. */
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h **** } oscer_config_t;
 351:../drivers/fsl_clock.h **** 
 352:../drivers/fsl_clock.h **** /*! @brief The OSC work mode. */
 353:../drivers/fsl_clock.h **** typedef enum _osc_mode
 354:../drivers/fsl_clock.h **** {
 355:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U,                                            /*!< Use external clock.   */
 356:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK,                    /*!< Oscillator low power. */
 357:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = MCG_C2_EREFS0_MASK | MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 358:../drivers/fsl_clock.h **** } osc_mode_t;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** /*!
 361:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 362:../drivers/fsl_clock.h ****  *
 363:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 364:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 365:../drivers/fsl_clock.h ****  * according to the board settings:
 366:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 367:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 368:../drivers/fsl_clock.h ****  */
 369:../drivers/fsl_clock.h **** typedef struct _osc_config
 370:../drivers/fsl_clock.h **** {
 371:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 372:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 373:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 374:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 375:../drivers/fsl_clock.h **** } osc_config_t;
 376:../drivers/fsl_clock.h **** 
 377:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock source selection. */
 378:../drivers/fsl_clock.h **** typedef enum _mcglite_clkout_src
 379:../drivers/fsl_clock.h **** {
 380:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcHirc, /*!< MCGOUTCLK source is HIRC */
 381:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcLirc, /*!< MCGOUTCLK source is LIRC */
 382:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcExt,  /*!< MCGOUTCLK source is external clock source */
 383:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcReserved
 384:../drivers/fsl_clock.h **** } mcglite_clkout_src_t;
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h **** /*! @brief MCG_Lite LIRC select. */
 387:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_mode
 388:../drivers/fsl_clock.h **** {
 389:../drivers/fsl_clock.h ****     kMCGLITE_Lirc2M, /*!< Slow internal reference(LIRC) 2 MHz clock selected */
 390:../drivers/fsl_clock.h ****     kMCGLITE_Lirc8M, /*!< Slow internal reference(LIRC) 8 MHz clock selected */
 391:../drivers/fsl_clock.h **** } mcglite_lirc_mode_t;
 392:../drivers/fsl_clock.h **** 
 393:../drivers/fsl_clock.h **** /*! @brief MCG_Lite divider factor selection for clock source*/
 394:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_div
 395:../drivers/fsl_clock.h **** {
 396:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy1 = 0U, /*!< Divider is 1    */
 397:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy2,      /*!< Divider is 2    */
 398:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy4,      /*!< Divider is 4    */
 399:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy8,      /*!< Divider is 8    */
 400:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy16,     /*!< Divider is 16   */
 401:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy32,     /*!< Divider is 32   */
 402:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy64,     /*!< Divider is 64   */
 403:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy128     /*!< Divider is 128  */
 404:../drivers/fsl_clock.h **** } mcglite_lirc_div_t;
 405:../drivers/fsl_clock.h **** 
 406:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock mode definitions */
 407:../drivers/fsl_clock.h **** typedef enum _mcglite_mode
 408:../drivers/fsl_clock.h **** {
 409:../drivers/fsl_clock.h ****     kMCGLITE_ModeHirc48M, /*!< Clock mode is HIRC 48 M  */
 410:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc8M,  /*!< Clock mode is LIRC 8 M   */
 411:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc2M,  /*!< Clock mode is LIRC 2 M   */
 412:../drivers/fsl_clock.h ****     kMCGLITE_ModeExt,     /*!< Clock mode is EXT       */
 413:../drivers/fsl_clock.h ****     kMCGLITE_ModeError    /*!< Unknown mode            */
 414:../drivers/fsl_clock.h **** } mcglite_mode_t;
 415:../drivers/fsl_clock.h **** 
 416:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 417:../drivers/fsl_clock.h **** enum _mcglite_irclk_enable_mode
 418:../drivers/fsl_clock.h **** {
 419:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 420:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 421:../drivers/fsl_clock.h **** };
 422:../drivers/fsl_clock.h **** 
 423:../drivers/fsl_clock.h **** /*! @brief MCG_Lite configure structure for mode change. */
 424:../drivers/fsl_clock.h **** typedef struct _mcglite_config
 425:../drivers/fsl_clock.h **** {
 426:../drivers/fsl_clock.h ****     mcglite_clkout_src_t outSrc;  /*!< MCGOUT clock select.                */
 427:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode;      /*!< MCGIRCLK enable mode, OR'ed value of _mcglite_irclk_enable_m
 428:../drivers/fsl_clock.h ****     mcglite_lirc_mode_t ircs;     /*!< MCG_C2[IRCS].                       */
 429:../drivers/fsl_clock.h ****     mcglite_lirc_div_t fcrdiv;    /*!< MCG_SC[FCRDIV].                     */
 430:../drivers/fsl_clock.h ****     mcglite_lirc_div_t lircDiv2;  /*!< MCG_MC[LIRC_DIV2].                  */
 431:../drivers/fsl_clock.h ****     bool hircEnableInNotHircMode; /*!< HIRC enable when not in HIRC mode.  */
 432:../drivers/fsl_clock.h **** } mcglite_config_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*******************************************************************************
 435:../drivers/fsl_clock.h ****  * API
 436:../drivers/fsl_clock.h ****  ******************************************************************************/
 437:../drivers/fsl_clock.h **** 
 438:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 439:../drivers/fsl_clock.h **** extern "C" {
 440:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*!
 443:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 444:../drivers/fsl_clock.h ****  *
 445:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 446:../drivers/fsl_clock.h ****  */
 447:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 448:../drivers/fsl_clock.h **** {
 449:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 108              		.loc 2 449 0
 109 0032 1A0C     		lsrs	r2, r3, #16
 110 0034 4F49     		ldr	r1, .L6+4
 111 0036 8C46     		mov	ip, r1
 112 0038 6244     		add	r2, r2, ip
 113              	.LVL12:
 450:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 114              		.loc 2 450 0
 115 003a 1168     		ldr	r1, [r2]
 116 003c 1B04     		lsls	r3, r3, #16
 117              	.LVL13:
 118 003e 1B0C     		lsrs	r3, r3, #16
 119 0040 0126     		movs	r6, #1
 120 0042 3000     		movs	r0, r6
 121              	.LVL14:
 122 0044 9840     		lsls	r0, r0, r3
 123 0046 0300     		movs	r3, r0
 124 0048 0B43     		orrs	r3, r1
 125 004a 1360     		str	r3, [r2]
 126              	.LVL15:
 127              	.LBE71:
 128              	.LBE70:
 391:../drivers/fsl_flexio_i2c_master.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 392:../drivers/fsl_flexio_i2c_master.c **** 
 393:../drivers/fsl_flexio_i2c_master.c ****     /* Do hardware configuration. */
 394:../drivers/fsl_flexio_i2c_master.c ****     /* 1. Configure the shifter 0 for tx. */
 395:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.timerSelect = base->timerIndex[1];
 129              		.loc 1 395 0
 130 004c 6B7A     		ldrb	r3, [r5, #9]
 131 004e 0993     		str	r3, [sp, #36]
 396:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.timerPolarity = kFLEXIO_ShifterTimerPolarityOnPositive;
 132              		.loc 1 396 0
 133 0050 0023     		movs	r3, #0
 134 0052 9946     		mov	r9, r3
 135 0054 2371     		strb	r3, [r4, #4]
 397:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.pinConfig = kFLEXIO_PinConfigOpenDrainOrBidirection;
 136              		.loc 1 397 0
 137 0056 6671     		strb	r6, [r4, #5]
 398:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.pinSelect = base->SDAPinIndex;
 138              		.loc 1 398 0
 139 0058 2B79     		ldrb	r3, [r5, #4]
 140 005a A360     		str	r3, [r4, #8]
 399:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.pinPolarity = kFLEXIO_PinActiveLow;
 141              		.loc 1 399 0
 142 005c 2673     		strb	r6, [r4, #12]
 400:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.shifterMode = kFLEXIO_ShifterModeTransmit;
 143              		.loc 1 400 0
 144 005e 0223     		movs	r3, #2
 145 0060 9A46     		mov	r10, r3
 146 0062 6373     		strb	r3, [r4, #13]
 401:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.inputSource = kFLEXIO_ShifterInputFromPin;
 147              		.loc 1 401 0
 148 0064 4B46     		mov	r3, r9
 149 0066 A373     		strb	r3, [r4, #14]
 402:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.shifterStop = kFLEXIO_ShifterStopBitHigh;
 150              		.loc 1 402 0
 151 0068 0323     		movs	r3, #3
 152 006a E373     		strb	r3, [r4, #15]
 403:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.shifterStart = kFLEXIO_ShifterStartBitLow;
 153              		.loc 1 403 0
 154 006c 5346     		mov	r3, r10
 155 006e 2374     		strb	r3, [r4, #16]
 404:../drivers/fsl_flexio_i2c_master.c **** 
 405:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_SetShifterConfig(base->flexioBase, base->shifterIndex[0], &shifterConfig);
 156              		.loc 1 405 0
 157 0070 A979     		ldrb	r1, [r5, #6]
 158 0072 2200     		movs	r2, r4
 159 0074 2868     		ldr	r0, [r5]
 160 0076 FFF7FEFF 		bl	FLEXIO_SetShifterConfig
 161              	.LVL16:
 406:../drivers/fsl_flexio_i2c_master.c **** 
 407:../drivers/fsl_flexio_i2c_master.c ****     /* 2. Configure the shifter 1 for rx. */
 408:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.timerSelect = base->timerIndex[1];
 162              		.loc 1 408 0
 163 007a 6B7A     		ldrb	r3, [r5, #9]
 164 007c 0993     		str	r3, [sp, #36]
 409:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.timerPolarity = kFLEXIO_ShifterTimerPolarityOnNegitive;
 165              		.loc 1 409 0
 166 007e 2671     		strb	r6, [r4, #4]
 410:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
 167              		.loc 1 410 0
 168 0080 4B46     		mov	r3, r9
 169 0082 6371     		strb	r3, [r4, #5]
 411:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.pinSelect = base->SDAPinIndex;
 170              		.loc 1 411 0
 171 0084 2B79     		ldrb	r3, [r5, #4]
 172 0086 A360     		str	r3, [r4, #8]
 412:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.pinPolarity = kFLEXIO_PinActiveHigh;
 173              		.loc 1 412 0
 174 0088 4B46     		mov	r3, r9
 175 008a 2373     		strb	r3, [r4, #12]
 413:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.shifterMode = kFLEXIO_ShifterModeReceive;
 176              		.loc 1 413 0
 177 008c 6673     		strb	r6, [r4, #13]
 414:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.inputSource = kFLEXIO_ShifterInputFromPin;
 178              		.loc 1 414 0
 179 008e A373     		strb	r3, [r4, #14]
 415:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.shifterStop = kFLEXIO_ShifterStopBitLow;
 180              		.loc 1 415 0
 181 0090 5346     		mov	r3, r10
 182 0092 E373     		strb	r3, [r4, #15]
 416:../drivers/fsl_flexio_i2c_master.c ****     shifterConfig.shifterStart = kFLEXIO_ShifterStartBitDisabledLoadDataOnEnable;
 183              		.loc 1 416 0
 184 0094 4B46     		mov	r3, r9
 185 0096 2374     		strb	r3, [r4, #16]
 417:../drivers/fsl_flexio_i2c_master.c **** 
 418:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_SetShifterConfig(base->flexioBase, base->shifterIndex[1], &shifterConfig);
 186              		.loc 1 418 0
 187 0098 E979     		ldrb	r1, [r5, #7]
 188 009a 2200     		movs	r2, r4
 189 009c 2868     		ldr	r0, [r5]
 190 009e FFF7FEFF 		bl	FLEXIO_SetShifterConfig
 191              	.LVL17:
 419:../drivers/fsl_flexio_i2c_master.c **** 
 420:../drivers/fsl_flexio_i2c_master.c ****     /*3. Configure the timer 0 for generating bit clock. */
 421:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.triggerSelect = FLEXIO_TIMER_TRIGGER_SEL_SHIFTnSTAT(base->shifterIndex[0]);
 192              		.loc 1 421 0
 193 00a2 AB79     		ldrb	r3, [r5, #6]
 194 00a4 9B00     		lsls	r3, r3, #2
 195 00a6 3343     		orrs	r3, r6
 196 00a8 0293     		str	r3, [sp, #8]
 422:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.triggerPolarity = kFLEXIO_TimerTriggerPolarityActiveLow;
 197              		.loc 1 422 0
 198 00aa 02AB     		add	r3, sp, #8
 199 00ac 1E71     		strb	r6, [r3, #4]
 423:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.triggerSource = kFLEXIO_TimerTriggerSourceInternal;
 200              		.loc 1 423 0
 201 00ae 5E71     		strb	r6, [r3, #5]
 424:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.pinConfig = kFLEXIO_PinConfigOpenDrainOrBidirection;
 202              		.loc 1 424 0
 203 00b0 9E71     		strb	r6, [r3, #6]
 425:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.pinSelect = base->SCLPinIndex;
 204              		.loc 1 425 0
 205 00b2 6B79     		ldrb	r3, [r5, #5]
 206 00b4 0493     		str	r3, [sp, #16]
 426:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.pinPolarity = kFLEXIO_PinActiveHigh;
 207              		.loc 1 426 0
 208 00b6 02AB     		add	r3, sp, #8
 209 00b8 4946     		mov	r1, r9
 210 00ba 1973     		strb	r1, [r3, #12]
 427:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerMode = kFLEXIO_TimerModeDual8BitBaudBit;
 211              		.loc 1 427 0
 212 00bc 5E73     		strb	r6, [r3, #13]
 428:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerOutput = kFLEXIO_TimerOutputZeroNotAffectedByReset;
 213              		.loc 1 428 0
 214 00be 9E73     		strb	r6, [r3, #14]
 429:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerDecrement = kFLEXIO_TimerDecSrcOnFlexIOClockShiftTimerOutput;
 215              		.loc 1 429 0
 216 00c0 D973     		strb	r1, [r3, #15]
 430:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerReset = kFLEXIO_TimerResetOnTimerPinEqualToTimerOutput;
 217              		.loc 1 430 0
 218 00c2 5146     		mov	r1, r10
 219 00c4 1974     		strb	r1, [r3, #16]
 431:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerDisable = kFLEXIO_TimerDisableOnTimerCompare;
 220              		.loc 1 431 0
 221 00c6 5974     		strb	r1, [r3, #17]
 432:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerEnable = kFLEXIO_TimerEnableOnTriggerHigh;
 222              		.loc 1 432 0
 223 00c8 9974     		strb	r1, [r3, #18]
 433:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerStop = kFLEXIO_TimerStopBitEnableOnTimerDisable;
 224              		.loc 1 433 0
 225 00ca D974     		strb	r1, [r3, #19]
 434:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerStart = kFLEXIO_TimerStartBitEnabled;
 226              		.loc 1 434 0
 227 00cc 1E75     		strb	r6, [r3, #20]
 435:../drivers/fsl_flexio_i2c_master.c **** 
 436:../drivers/fsl_flexio_i2c_master.c ****     /* Set TIMCMP[7:0] = (baud rate divider / 2) - 1. */
 437:../drivers/fsl_flexio_i2c_master.c ****     timerDiv = (srcClock_Hz / masterConfig->baudRate_Bps) / 2 - 1;
 228              		.loc 1 437 0
 229 00ce 7968     		ldr	r1, [r7, #4]
 230 00d0 0198     		ldr	r0, [sp, #4]
 231 00d2 FFF7FEFF 		bl	__aeabi_uidiv
 232              	.LVL18:
 233 00d6 4008     		lsrs	r0, r0, #1
 234 00d8 80B2     		uxth	r0, r0
 235 00da 0138     		subs	r0, r0, #1
 236 00dc 80B2     		uxth	r0, r0
 237              	.LVL19:
 438:../drivers/fsl_flexio_i2c_master.c **** 
 439:../drivers/fsl_flexio_i2c_master.c ****     if (timerDiv > 0xFFU)
 238              		.loc 1 439 0
 239 00de FF28     		cmp	r0, #255
 240 00e0 44D8     		bhi	.L5
 440:../drivers/fsl_flexio_i2c_master.c ****     {
 441:../drivers/fsl_flexio_i2c_master.c ****         result = kStatus_InvalidArgument;
 442:../drivers/fsl_flexio_i2c_master.c ****         return result;
 443:../drivers/fsl_flexio_i2c_master.c ****     }
 444:../drivers/fsl_flexio_i2c_master.c **** 
 445:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerCompare = timerDiv;
 241              		.loc 1 445 0
 242 00e2 0890     		str	r0, [sp, #32]
 446:../drivers/fsl_flexio_i2c_master.c **** 
 447:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_SetTimerConfig(base->flexioBase, base->timerIndex[0], &timerConfig);
 243              		.loc 1 447 0
 244 00e4 297A     		ldrb	r1, [r5, #8]
 245 00e6 02AA     		add	r2, sp, #8
 246 00e8 2868     		ldr	r0, [r5]
 247              	.LVL20:
 248 00ea FFF7FEFF 		bl	FLEXIO_SetTimerConfig
 249              	.LVL21:
 448:../drivers/fsl_flexio_i2c_master.c **** 
 449:../drivers/fsl_flexio_i2c_master.c ****     /* 4. Configure the timer 1 for controlling shifters. */
 450:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.triggerSelect = FLEXIO_TIMER_TRIGGER_SEL_SHIFTnSTAT(base->shifterIndex[0]);
 250              		.loc 1 450 0
 251 00ee AA79     		ldrb	r2, [r5, #6]
 252 00f0 9200     		lsls	r2, r2, #2
 253 00f2 0123     		movs	r3, #1
 254 00f4 1A43     		orrs	r2, r3
 255 00f6 0292     		str	r2, [sp, #8]
 451:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.triggerPolarity = kFLEXIO_TimerTriggerPolarityActiveLow;
 256              		.loc 1 451 0
 257 00f8 02AA     		add	r2, sp, #8
 258 00fa 1371     		strb	r3, [r2, #4]
 452:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.triggerSource = kFLEXIO_TimerTriggerSourceInternal;
 259              		.loc 1 452 0
 260 00fc 5371     		strb	r3, [r2, #5]
 453:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
 261              		.loc 1 453 0
 262 00fe 0022     		movs	r2, #0
 263 0100 02A9     		add	r1, sp, #8
 264 0102 8A71     		strb	r2, [r1, #6]
 454:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.pinSelect = base->SCLPinIndex;
 265              		.loc 1 454 0
 266 0104 6979     		ldrb	r1, [r5, #5]
 267 0106 0491     		str	r1, [sp, #16]
 455:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.pinPolarity = kFLEXIO_PinActiveLow;
 268              		.loc 1 455 0
 269 0108 02A9     		add	r1, sp, #8
 270 010a 0B73     		strb	r3, [r1, #12]
 456:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerMode = kFLEXIO_TimerModeSingle16Bit;
 271              		.loc 1 456 0
 272 010c 0321     		movs	r1, #3
 273 010e 02A8     		add	r0, sp, #8
 274 0110 4173     		strb	r1, [r0, #13]
 457:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerOutput = kFLEXIO_TimerOutputOneNotAffectedByReset;
 275              		.loc 1 457 0
 276 0112 8273     		strb	r2, [r0, #14]
 458:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerDecrement = kFLEXIO_TimerDecSrcOnPinInputShiftPinInput;
 277              		.loc 1 458 0
 278 0114 0221     		movs	r1, #2
 279 0116 C173     		strb	r1, [r0, #15]
 459:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerReset = kFLEXIO_TimerResetNever;
 280              		.loc 1 459 0
 281 0118 0274     		strb	r2, [r0, #16]
 460:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerDisable = kFLEXIO_TimerDisableOnPreTimerDisable;
 282              		.loc 1 460 0
 283 011a 0200     		movs	r2, r0
 284 011c 4374     		strb	r3, [r0, #17]
 461:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerEnable = kFLEXIO_TimerEnableOnPrevTimerEnable;
 285              		.loc 1 461 0
 286 011e 8374     		strb	r3, [r0, #18]
 462:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerStop = kFLEXIO_TimerStopBitEnableOnTimerCompare;
 287              		.loc 1 462 0
 288 0120 C374     		strb	r3, [r0, #19]
 463:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerStart = kFLEXIO_TimerStartBitEnabled;
 289              		.loc 1 463 0
 290 0122 0375     		strb	r3, [r0, #20]
 464:../drivers/fsl_flexio_i2c_master.c **** 
 465:../drivers/fsl_flexio_i2c_master.c ****     /* Set TIMCMP[15:0] = (number of bits x 2) - 1. */
 466:../drivers/fsl_flexio_i2c_master.c ****     timerConfig.timerCompare = 8 * 2 - 1;
 291              		.loc 1 466 0
 292 0124 0E33     		adds	r3, r3, #14
 293 0126 0893     		str	r3, [sp, #32]
 467:../drivers/fsl_flexio_i2c_master.c **** 
 468:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_SetTimerConfig(base->flexioBase, base->timerIndex[1], &timerConfig);
 294              		.loc 1 468 0
 295 0128 697A     		ldrb	r1, [r5, #9]
 296 012a 2868     		ldr	r0, [r5]
 297 012c FFF7FEFF 		bl	FLEXIO_SetTimerConfig
 298              	.LVL22:
 469:../drivers/fsl_flexio_i2c_master.c **** 
 470:../drivers/fsl_flexio_i2c_master.c ****     /* Configure FLEXIO I2C Master. */
 471:../drivers/fsl_flexio_i2c_master.c ****     controlVal = base->flexioBase->CTRL;
 299              		.loc 1 471 0
 300 0130 2C68     		ldr	r4, [r5]
 301 0132 A268     		ldr	r2, [r4, #8]
 302              	.LVL23:
 472:../drivers/fsl_flexio_i2c_master.c ****     controlVal &=
 303              		.loc 1 472 0
 304 0134 104B     		ldr	r3, .L6+8
 305 0136 1A40     		ands	r2, r3
 306              	.LVL24:
 473:../drivers/fsl_flexio_i2c_master.c ****         ~(FLEXIO_CTRL_DOZEN_MASK | FLEXIO_CTRL_DBGE_MASK | FLEXIO_CTRL_FASTACC_MASK | FLEXIO_CTRL_F
 474:../drivers/fsl_flexio_i2c_master.c ****     controlVal |= (FLEXIO_CTRL_DBGE(masterConfig->enableInDebug) | FLEXIO_CTRL_FASTACC(masterConfig
 307              		.loc 1 474 0
 308 0138 BB78     		ldrb	r3, [r7, #2]
 309 013a 9B07     		lsls	r3, r3, #30
 310 013c 8021     		movs	r1, #128
 311 013e C905     		lsls	r1, r1, #23
 312 0140 0B40     		ands	r3, r1
 313 0142 F878     		ldrb	r0, [r7, #3]
 314 0144 8000     		lsls	r0, r0, #2
 315 0146 0421     		movs	r1, #4
 316 0148 0140     		ands	r1, r0
 317 014a 0B43     		orrs	r3, r1
 475:../drivers/fsl_flexio_i2c_master.c ****                    FLEXIO_CTRL_FLEXEN(masterConfig->enableMaster));
 318              		.loc 1 475 0
 319 014c 3978     		ldrb	r1, [r7]
 474:../drivers/fsl_flexio_i2c_master.c ****                    FLEXIO_CTRL_FLEXEN(masterConfig->enableMaster));
 320              		.loc 1 474 0
 321 014e 0B43     		orrs	r3, r1
 322 0150 1343     		orrs	r3, r2
 323              	.LVL25:
 476:../drivers/fsl_flexio_i2c_master.c ****     if (!masterConfig->enableInDoze)
 324              		.loc 1 476 0
 325 0152 7A78     		ldrb	r2, [r7, #1]
 326 0154 002A     		cmp	r2, #0
 327 0156 02D1     		bne	.L4
 477:../drivers/fsl_flexio_i2c_master.c ****     {
 478:../drivers/fsl_flexio_i2c_master.c ****         controlVal |= FLEXIO_CTRL_DOZEN_MASK;
 328              		.loc 1 478 0
 329 0158 8022     		movs	r2, #128
 330 015a 1206     		lsls	r2, r2, #24
 331 015c 1343     		orrs	r3, r2
 332              	.LVL26:
 333              	.L4:
 479:../drivers/fsl_flexio_i2c_master.c ****     }
 480:../drivers/fsl_flexio_i2c_master.c **** 
 481:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->CTRL = controlVal;
 334              		.loc 1 481 0
 335 015e A360     		str	r3, [r4, #8]
 482:../drivers/fsl_flexio_i2c_master.c ****     return result;
 336              		.loc 1 482 0
 337 0160 0020     		movs	r0, #0
 338              	.LVL27:
 339              	.L2:
 483:../drivers/fsl_flexio_i2c_master.c **** }
 340              		.loc 1 483 0
 341 0162 0FB0     		add	sp, sp, #60
 342              		@ sp needed
 343              	.LVL28:
 344              	.LVL29:
 345 0164 0CBC     		pop	{r2, r3}
 346 0166 9146     		mov	r9, r2
 347 0168 9A46     		mov	r10, r3
 348 016a F0BD     		pop	{r4, r5, r6, r7, pc}
 349              	.LVL30:
 350              	.L5:
 442:../drivers/fsl_flexio_i2c_master.c ****     }
 351              		.loc 1 442 0
 352 016c 0420     		movs	r0, #4
 353              	.LVL31:
 354 016e F8E7     		b	.L2
 355              	.L7:
 356              		.align	2
 357              	.L6:
 358 0170 00000000 		.word	s_flexioClocks
 359 0174 00700440 		.word	1074032640
 360 0178 FAFFFF3F 		.word	1073741818
 361              		.cfi_endproc
 362              	.LFE74:
 364              		.section	.text.FLEXIO_I2C_MasterDeinit,"ax",%progbits
 365              		.align	1
 366              		.global	FLEXIO_I2C_MasterDeinit
 367              		.syntax unified
 368              		.code	16
 369              		.thumb_func
 370              		.fpu softvfp
 372              	FLEXIO_I2C_MasterDeinit:
 373              	.LFB75:
 484:../drivers/fsl_flexio_i2c_master.c **** 
 485:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterDeinit(FLEXIO_I2C_Type *base)
 486:../drivers/fsl_flexio_i2c_master.c **** {
 374              		.loc 1 486 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              	.LVL32:
 379 0000 10B5     		push	{r4, lr}
 380              		.cfi_def_cfa_offset 8
 381              		.cfi_offset 4, -8
 382              		.cfi_offset 14, -4
 487:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->SHIFTCFG[base->shifterIndex[0]] = 0;
 383              		.loc 1 487 0
 384 0002 8279     		ldrb	r2, [r0, #6]
 385 0004 4032     		adds	r2, r2, #64
 386 0006 9200     		lsls	r2, r2, #2
 387 0008 0023     		movs	r3, #0
 388 000a 0168     		ldr	r1, [r0]
 389 000c 5350     		str	r3, [r2, r1]
 488:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->SHIFTCTL[base->shifterIndex[0]] = 0;
 390              		.loc 1 488 0
 391 000e 8279     		ldrb	r2, [r0, #6]
 392 0010 2032     		adds	r2, r2, #32
 393 0012 9200     		lsls	r2, r2, #2
 394 0014 0168     		ldr	r1, [r0]
 395 0016 5350     		str	r3, [r2, r1]
 489:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->SHIFTCFG[base->shifterIndex[1]] = 0;
 396              		.loc 1 489 0
 397 0018 C279     		ldrb	r2, [r0, #7]
 398 001a 4032     		adds	r2, r2, #64
 399 001c 9200     		lsls	r2, r2, #2
 400 001e 0168     		ldr	r1, [r0]
 401 0020 5350     		str	r3, [r2, r1]
 490:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->SHIFTCTL[base->shifterIndex[1]] = 0;
 402              		.loc 1 490 0
 403 0022 C279     		ldrb	r2, [r0, #7]
 404 0024 2032     		adds	r2, r2, #32
 405 0026 9200     		lsls	r2, r2, #2
 406 0028 0168     		ldr	r1, [r0]
 407 002a 5350     		str	r3, [r2, r1]
 491:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMCFG[base->timerIndex[0]] = 0;
 408              		.loc 1 491 0
 409 002c 027A     		ldrb	r2, [r0, #8]
 410 002e 2132     		adds	r2, r2, #33
 411 0030 FF32     		adds	r2, r2, #255
 412 0032 9200     		lsls	r2, r2, #2
 413 0034 0168     		ldr	r1, [r0]
 414 0036 5350     		str	r3, [r2, r1]
 492:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMCMP[base->timerIndex[0]] = 0;
 415              		.loc 1 492 0
 416 0038 027A     		ldrb	r2, [r0, #8]
 417 003a 4132     		adds	r2, r2, #65
 418 003c FF32     		adds	r2, r2, #255
 419 003e 9200     		lsls	r2, r2, #2
 420 0040 0168     		ldr	r1, [r0]
 421 0042 5350     		str	r3, [r2, r1]
 493:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMCTL[base->timerIndex[0]] = 0;
 422              		.loc 1 493 0
 423 0044 027A     		ldrb	r2, [r0, #8]
 424 0046 0132     		adds	r2, r2, #1
 425 0048 FF32     		adds	r2, r2, #255
 426 004a 9200     		lsls	r2, r2, #2
 427 004c 0168     		ldr	r1, [r0]
 428 004e 5350     		str	r3, [r2, r1]
 494:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMCFG[base->timerIndex[1]] = 0;
 429              		.loc 1 494 0
 430 0050 427A     		ldrb	r2, [r0, #9]
 431 0052 2132     		adds	r2, r2, #33
 432 0054 FF32     		adds	r2, r2, #255
 433 0056 9200     		lsls	r2, r2, #2
 434 0058 0168     		ldr	r1, [r0]
 435 005a 5350     		str	r3, [r2, r1]
 495:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMCMP[base->timerIndex[1]] = 0;
 436              		.loc 1 495 0
 437 005c 427A     		ldrb	r2, [r0, #9]
 438 005e 4132     		adds	r2, r2, #65
 439 0060 FF32     		adds	r2, r2, #255
 440 0062 9200     		lsls	r2, r2, #2
 441 0064 0168     		ldr	r1, [r0]
 442 0066 5350     		str	r3, [r2, r1]
 496:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMCTL[base->timerIndex[1]] = 0;
 443              		.loc 1 496 0
 444 0068 427A     		ldrb	r2, [r0, #9]
 445 006a 0132     		adds	r2, r2, #1
 446 006c FF32     		adds	r2, r2, #255
 447 006e 9200     		lsls	r2, r2, #2
 448 0070 0168     		ldr	r1, [r0]
 449 0072 5350     		str	r3, [r2, r1]
 497:../drivers/fsl_flexio_i2c_master.c ****     /* Clear the shifter flag. */
 498:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->SHIFTSTAT = (1U << base->shifterIndex[0]);
 450              		.loc 1 498 0
 451 0074 8179     		ldrb	r1, [r0, #6]
 452 0076 0268     		ldr	r2, [r0]
 453 0078 0133     		adds	r3, r3, #1
 454 007a 1C00     		movs	r4, r3
 455 007c 8C40     		lsls	r4, r4, r1
 456 007e 1461     		str	r4, [r2, #16]
 499:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->SHIFTSTAT = (1U << base->shifterIndex[1]);
 457              		.loc 1 499 0
 458 0080 C179     		ldrb	r1, [r0, #7]
 459 0082 0268     		ldr	r2, [r0]
 460 0084 1C00     		movs	r4, r3
 461 0086 8C40     		lsls	r4, r4, r1
 462 0088 1461     		str	r4, [r2, #16]
 500:../drivers/fsl_flexio_i2c_master.c ****     /* Clear the timer flag. */
 501:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMSTAT = (1U << base->timerIndex[0]);
 463              		.loc 1 501 0
 464 008a 017A     		ldrb	r1, [r0, #8]
 465 008c 0268     		ldr	r2, [r0]
 466 008e 1C00     		movs	r4, r3
 467 0090 8C40     		lsls	r4, r4, r1
 468 0092 9461     		str	r4, [r2, #24]
 502:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMSTAT = (1U << base->timerIndex[1]);
 469              		.loc 1 502 0
 470 0094 417A     		ldrb	r1, [r0, #9]
 471 0096 0268     		ldr	r2, [r0]
 472 0098 8B40     		lsls	r3, r3, r1
 473 009a 9361     		str	r3, [r2, #24]
 503:../drivers/fsl_flexio_i2c_master.c **** }
 474              		.loc 1 503 0
 475              		@ sp needed
 476 009c 10BD     		pop	{r4, pc}
 477              		.cfi_endproc
 478              	.LFE75:
 480              		.section	.text.FLEXIO_I2C_MasterGetDefaultConfig,"ax",%progbits
 481              		.align	1
 482              		.global	FLEXIO_I2C_MasterGetDefaultConfig
 483              		.syntax unified
 484              		.code	16
 485              		.thumb_func
 486              		.fpu softvfp
 488              	FLEXIO_I2C_MasterGetDefaultConfig:
 489              	.LFB76:
 504:../drivers/fsl_flexio_i2c_master.c **** 
 505:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterGetDefaultConfig(flexio_i2c_master_config_t *masterConfig)
 506:../drivers/fsl_flexio_i2c_master.c **** {
 490              		.loc 1 506 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL33:
 507:../drivers/fsl_flexio_i2c_master.c ****     assert(masterConfig);
 508:../drivers/fsl_flexio_i2c_master.c **** 
 509:../drivers/fsl_flexio_i2c_master.c ****     masterConfig->enableMaster = true;
 496              		.loc 1 509 0
 497 0000 0122     		movs	r2, #1
 498 0002 0270     		strb	r2, [r0]
 510:../drivers/fsl_flexio_i2c_master.c ****     masterConfig->enableInDoze = false;
 499              		.loc 1 510 0
 500 0004 0023     		movs	r3, #0
 501 0006 4370     		strb	r3, [r0, #1]
 511:../drivers/fsl_flexio_i2c_master.c ****     masterConfig->enableInDebug = true;
 502              		.loc 1 511 0
 503 0008 8270     		strb	r2, [r0, #2]
 512:../drivers/fsl_flexio_i2c_master.c ****     masterConfig->enableFastAccess = false;
 504              		.loc 1 512 0
 505 000a C370     		strb	r3, [r0, #3]
 513:../drivers/fsl_flexio_i2c_master.c **** 
 514:../drivers/fsl_flexio_i2c_master.c ****     /* Default baud rate at 100kbps. */
 515:../drivers/fsl_flexio_i2c_master.c ****     masterConfig->baudRate_Bps = 100000U;
 506              		.loc 1 515 0
 507 000c 014B     		ldr	r3, .L10
 508 000e 4360     		str	r3, [r0, #4]
 516:../drivers/fsl_flexio_i2c_master.c **** }
 509              		.loc 1 516 0
 510              		@ sp needed
 511 0010 7047     		bx	lr
 512              	.L11:
 513 0012 C046     		.align	2
 514              	.L10:
 515 0014 A0860100 		.word	100000
 516              		.cfi_endproc
 517              	.LFE76:
 519              		.section	.text.FLEXIO_I2C_MasterGetStatusFlags,"ax",%progbits
 520              		.align	1
 521              		.global	FLEXIO_I2C_MasterGetStatusFlags
 522              		.syntax unified
 523              		.code	16
 524              		.thumb_func
 525              		.fpu softvfp
 527              	FLEXIO_I2C_MasterGetStatusFlags:
 528              	.LFB77:
 517:../drivers/fsl_flexio_i2c_master.c **** 
 518:../drivers/fsl_flexio_i2c_master.c **** uint32_t FLEXIO_I2C_MasterGetStatusFlags(FLEXIO_I2C_Type *base)
 519:../drivers/fsl_flexio_i2c_master.c **** {
 529              		.loc 1 519 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              	.LVL34:
 534 0000 70B5     		push	{r4, r5, r6, lr}
 535              		.cfi_def_cfa_offset 16
 536              		.cfi_offset 4, -16
 537              		.cfi_offset 5, -12
 538              		.cfi_offset 6, -8
 539              		.cfi_offset 14, -4
 540 0002 0500     		movs	r5, r0
 541              	.LVL35:
 520:../drivers/fsl_flexio_i2c_master.c ****     uint32_t status = 0;
 521:../drivers/fsl_flexio_i2c_master.c **** 
 522:../drivers/fsl_flexio_i2c_master.c ****     status =
 523:../drivers/fsl_flexio_i2c_master.c ****         ((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shifterIndex[0])) >> base->
 542              		.loc 1 523 0
 543 0004 0468     		ldr	r4, [r0]
 544              	.LVL36:
 545              	.LBB72:
 546              	.LBB73:
 547              		.file 3 "../drivers/fsl_flexio.h"
   1:../drivers/fsl_flexio.h **** /*
   2:../drivers/fsl_flexio.h ****  * The Clear BSD License
   3:../drivers/fsl_flexio.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_flexio.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_flexio.h ****  * All rights reserved.
   6:../drivers/fsl_flexio.h ****  *
   7:../drivers/fsl_flexio.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_flexio.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_flexio.h ****  * that the following conditions are met:
  10:../drivers/fsl_flexio.h ****  *
  11:../drivers/fsl_flexio.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_flexio.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_flexio.h ****  *
  14:../drivers/fsl_flexio.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_flexio.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_flexio.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_flexio.h ****  *
  18:../drivers/fsl_flexio.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_flexio.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_flexio.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_flexio.h ****  *
  22:../drivers/fsl_flexio.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_flexio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_flexio.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_flexio.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_flexio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_flexio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_flexio.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_flexio.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_flexio.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_flexio.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_flexio.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_flexio.h ****  */
  34:../drivers/fsl_flexio.h **** #ifndef _FSL_FLEXIO_H_
  35:../drivers/fsl_flexio.h **** #define _FSL_FLEXIO_H_
  36:../drivers/fsl_flexio.h **** 
  37:../drivers/fsl_flexio.h **** #include "fsl_common.h"
  38:../drivers/fsl_flexio.h **** 
  39:../drivers/fsl_flexio.h **** /*!
  40:../drivers/fsl_flexio.h ****  * @addtogroup flexio_driver
  41:../drivers/fsl_flexio.h ****  * @{
  42:../drivers/fsl_flexio.h ****  */
  43:../drivers/fsl_flexio.h **** 
  44:../drivers/fsl_flexio.h **** /*******************************************************************************
  45:../drivers/fsl_flexio.h ****  * Definitions
  46:../drivers/fsl_flexio.h ****  ******************************************************************************/
  47:../drivers/fsl_flexio.h **** 
  48:../drivers/fsl_flexio.h **** /*! @name Driver version */
  49:../drivers/fsl_flexio.h **** /*@{*/
  50:../drivers/fsl_flexio.h **** /*! @brief FlexIO driver version 2.0.2. */
  51:../drivers/fsl_flexio.h **** #define FSL_FLEXIO_DRIVER_VERSION (MAKE_VERSION(2, 0, 2))
  52:../drivers/fsl_flexio.h **** /*@}*/
  53:../drivers/fsl_flexio.h **** 
  54:../drivers/fsl_flexio.h **** /*! @brief Calculate FlexIO timer trigger.*/
  55:../drivers/fsl_flexio.h **** #define FLEXIO_TIMER_TRIGGER_SEL_PININPUT(x) ((uint32_t)(x) << 1U)
  56:../drivers/fsl_flexio.h **** #define FLEXIO_TIMER_TRIGGER_SEL_SHIFTnSTAT(x) (((uint32_t)(x) << 2U) | 0x1U)
  57:../drivers/fsl_flexio.h **** #define FLEXIO_TIMER_TRIGGER_SEL_TIMn(x) (((uint32_t)(x) << 2U) | 0x3U)
  58:../drivers/fsl_flexio.h **** 
  59:../drivers/fsl_flexio.h **** /*! @brief Define time of timer trigger polarity.*/
  60:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_trigger_polarity
  61:../drivers/fsl_flexio.h **** {
  62:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerPolarityActiveHigh = 0x0U, /*!< Active high. */
  63:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerPolarityActiveLow = 0x1U,  /*!< Active low. */
  64:../drivers/fsl_flexio.h **** } flexio_timer_trigger_polarity_t;
  65:../drivers/fsl_flexio.h **** 
  66:../drivers/fsl_flexio.h **** /*! @brief Define type of timer trigger source.*/
  67:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_trigger_source
  68:../drivers/fsl_flexio.h **** {
  69:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerSourceExternal = 0x0U, /*!< External trigger selected. */
  70:../drivers/fsl_flexio.h ****     kFLEXIO_TimerTriggerSourceInternal = 0x1U, /*!< Internal trigger selected. */
  71:../drivers/fsl_flexio.h **** } flexio_timer_trigger_source_t;
  72:../drivers/fsl_flexio.h **** 
  73:../drivers/fsl_flexio.h **** /*! @brief Define type of timer/shifter pin configuration.*/
  74:../drivers/fsl_flexio.h **** typedef enum _flexio_pin_config
  75:../drivers/fsl_flexio.h **** {
  76:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigOutputDisabled = 0x0U,         /*!< Pin output disabled. */
  77:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigOpenDrainOrBidirection = 0x1U, /*!< Pin open drain or bidirectional output ena
  78:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigBidirectionOutputData = 0x2U,  /*!< Pin bidirectional output data. */
  79:../drivers/fsl_flexio.h ****     kFLEXIO_PinConfigOutput = 0x3U,                 /*!< Pin output. */
  80:../drivers/fsl_flexio.h **** } flexio_pin_config_t;
  81:../drivers/fsl_flexio.h **** 
  82:../drivers/fsl_flexio.h **** /*! @brief Definition of pin polarity.*/
  83:../drivers/fsl_flexio.h **** typedef enum _flexio_pin_polarity
  84:../drivers/fsl_flexio.h **** {
  85:../drivers/fsl_flexio.h ****     kFLEXIO_PinActiveHigh = 0x0U, /*!< Active high. */
  86:../drivers/fsl_flexio.h ****     kFLEXIO_PinActiveLow = 0x1U,  /*!< Active low. */
  87:../drivers/fsl_flexio.h **** } flexio_pin_polarity_t;
  88:../drivers/fsl_flexio.h **** 
  89:../drivers/fsl_flexio.h **** /*! @brief Define type of timer work mode.*/
  90:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_mode
  91:../drivers/fsl_flexio.h **** {
  92:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeDisabled = 0x0U,        /*!< Timer Disabled. */
  93:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeDual8BitBaudBit = 0x1U, /*!< Dual 8-bit counters baud/bit mode. */
  94:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeDual8BitPWM = 0x2U,     /*!< Dual 8-bit counters PWM mode. */
  95:../drivers/fsl_flexio.h ****     kFLEXIO_TimerModeSingle16Bit = 0x3U,     /*!< Single 16-bit counter mode. */
  96:../drivers/fsl_flexio.h **** } flexio_timer_mode_t;
  97:../drivers/fsl_flexio.h **** 
  98:../drivers/fsl_flexio.h **** /*! @brief Define type of timer initial output or timer reset condition.*/
  99:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_output
 100:../drivers/fsl_flexio.h **** {
 101:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputOneNotAffectedByReset = 0x0U,  /*!< Logic one when enabled and is not affect
 102:../drivers/fsl_flexio.h ****                                                        reset. */
 103:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputZeroNotAffectedByReset = 0x1U, /*!< Logic zero when enabled and is not affec
 104:../drivers/fsl_flexio.h ****                                                        reset. */
 105:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputOneAffectedByReset = 0x2U,     /*!< Logic one when enabled and on timer rese
 106:../drivers/fsl_flexio.h ****     kFLEXIO_TimerOutputZeroAffectedByReset = 0x3U,    /*!< Logic zero when enabled and on timer res
 107:../drivers/fsl_flexio.h **** } flexio_timer_output_t;
 108:../drivers/fsl_flexio.h **** 
 109:../drivers/fsl_flexio.h **** /*! @brief Define type of timer decrement.*/
 110:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_decrement_source
 111:../drivers/fsl_flexio.h **** {
 112:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnFlexIOClockShiftTimerOutput = 0x0U,   /*!< Decrement counter on FlexIO clo
 113:../drivers/fsl_flexio.h ****                                                                 equals Timer output. */
 114:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnTriggerInputShiftTimerOutput = 0x1U,  /*!< Decrement counter on Trigger in
 115:../drivers/fsl_flexio.h ****                                                                 Shift clock equals Timer output. */
 116:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnPinInputShiftPinInput = 0x2U,         /*!< Decrement counter on Pin input 
 117:../drivers/fsl_flexio.h ****                                                                 Shift clock equals Pin input. */
 118:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDecSrcOnTriggerInputShiftTriggerInput = 0x3U, /*!< Decrement counter on Trigger in
 119:../drivers/fsl_flexio.h ****                                                                 Shift clock equals Trigger input. *
 120:../drivers/fsl_flexio.h **** } flexio_timer_decrement_source_t;
 121:../drivers/fsl_flexio.h **** 
 122:../drivers/fsl_flexio.h **** /*! @brief Define type of timer reset condition.*/
 123:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_reset_condition
 124:../drivers/fsl_flexio.h **** {
 125:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetNever = 0x0U,                            /*!< Timer never reset. */
 126:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerPinEqualToTimerOutput = 0x2U,     /*!< Timer reset on Timer Pin equal 
 127:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerTriggerEqualToTimerOutput = 0x3U, /*!< Timer reset on Timer Trigger eq
 128:../drivers/fsl_flexio.h ****                                                                 Timer Output. */
 129:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerPinRisingEdge = 0x4U,             /*!< Timer reset on Timer Pin rising
 130:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerTriggerRisingEdge = 0x6U,         /*!< Timer reset on Trigger rising e
 131:../drivers/fsl_flexio.h ****     kFLEXIO_TimerResetOnTimerTriggerBothEdge = 0x7U,           /*!< Timer reset on Trigger rising o
 132:../drivers/fsl_flexio.h **** } flexio_timer_reset_condition_t;
 133:../drivers/fsl_flexio.h **** 
 134:../drivers/fsl_flexio.h **** /*! @brief Define type of timer disable condition.*/
 135:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_disable_condition
 136:../drivers/fsl_flexio.h **** {
 137:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableNever = 0x0U,                    /*!< Timer never disabled. */
 138:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnPreTimerDisable = 0x1U,        /*!< Timer disabled on Timer N-1 disable. 
 139:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnTimerCompare = 0x2U,           /*!< Timer disabled on Timer compare. */
 140:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnTimerCompareTriggerLow = 0x3U, /*!< Timer disabled on Timer compare and T
 141:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnPinBothEdge = 0x4U,            /*!< Timer disabled on Pin rising or falli
 142:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnPinBothEdgeTriggerHigh = 0x5U, /*!< Timer disabled on Pin rising or falli
 143:../drivers/fsl_flexio.h ****                                                           Trigger is high. */
 144:../drivers/fsl_flexio.h ****     kFLEXIO_TimerDisableOnTriggerFallingEdge = 0x6U,     /*!< Timer disabled on Trigger falling edg
 145:../drivers/fsl_flexio.h **** } flexio_timer_disable_condition_t;
 146:../drivers/fsl_flexio.h **** 
 147:../drivers/fsl_flexio.h **** /*! @brief Define type of timer enable condition.*/
 148:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_enable_condition
 149:../drivers/fsl_flexio.h **** {
 150:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnabledAlways = 0x0U,                    /*!< Timer always enabled. */
 151:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnPrevTimerEnable = 0x1U,          /*!< Timer enabled on Timer N-1 enable. *
 152:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerHigh = 0x2U,              /*!< Timer enabled on Trigger high. */
 153:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerHighPinHigh = 0x3U,       /*!< Timer enabled on Trigger high and Pi
 154:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnPinRisingEdge = 0x4U,            /*!< Timer enabled on Pin rising edge. */
 155:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnPinRisingEdgeTriggerHigh = 0x5U, /*!< Timer enabled on Pin rising edge and
 156:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerRisingEdge = 0x6U,        /*!< Timer enabled on Trigger rising edge
 157:../drivers/fsl_flexio.h ****     kFLEXIO_TimerEnableOnTriggerBothEdge = 0x7U,          /*!< Timer enabled on Trigger rising or f
 158:../drivers/fsl_flexio.h **** } flexio_timer_enable_condition_t;
 159:../drivers/fsl_flexio.h **** 
 160:../drivers/fsl_flexio.h **** /*! @brief Define type of timer stop bit generate condition.*/
 161:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_stop_bit_condition
 162:../drivers/fsl_flexio.h **** {
 163:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitDisabled = 0x0U,                    /*!< Stop bit disabled. */
 164:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitEnableOnTimerCompare = 0x1U,        /*!< Stop bit is enabled on timer compa
 165:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitEnableOnTimerDisable = 0x2U,        /*!< Stop bit is enabled on timer disab
 166:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStopBitEnableOnTimerCompareDisable = 0x3U, /*!< Stop bit is enabled on timer compa
 167:../drivers/fsl_flexio.h ****                                                              disable. */
 168:../drivers/fsl_flexio.h **** } flexio_timer_stop_bit_condition_t;
 169:../drivers/fsl_flexio.h **** 
 170:../drivers/fsl_flexio.h **** /*! @brief Define type of timer start bit generate condition.*/
 171:../drivers/fsl_flexio.h **** typedef enum _flexio_timer_start_bit_condition
 172:../drivers/fsl_flexio.h **** {
 173:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStartBitDisabled = 0x0U, /*!< Start bit disabled. */
 174:../drivers/fsl_flexio.h ****     kFLEXIO_TimerStartBitEnabled = 0x1U,  /*!< Start bit enabled. */
 175:../drivers/fsl_flexio.h **** } flexio_timer_start_bit_condition_t;
 176:../drivers/fsl_flexio.h **** 
 177:../drivers/fsl_flexio.h **** /*! @brief Define type of timer polarity for shifter control. */
 178:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_timer_polarity
 179:../drivers/fsl_flexio.h **** {
 180:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterTimerPolarityOnPositive = 0x0U, /* Shift on positive edge of shift clock. */
 181:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterTimerPolarityOnNegitive = 0x1U, /* Shift on negative edge of shift clock. */
 182:../drivers/fsl_flexio.h **** } flexio_shifter_timer_polarity_t;
 183:../drivers/fsl_flexio.h **** 
 184:../drivers/fsl_flexio.h **** /*! @brief Define type of shifter working mode.*/
 185:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_mode
 186:../drivers/fsl_flexio.h **** {
 187:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterDisabled = 0x0U,            /*!< Shifter is disabled. */
 188:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeReceive = 0x1U,         /*!< Receive mode. */
 189:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeTransmit = 0x2U,        /*!< Transmit mode. */
 190:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeMatchStore = 0x4U,      /*!< Match store mode. */
 191:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeMatchContinuous = 0x5U, /*!< Match continuous mode. */
 192:../drivers/fsl_flexio.h **** #if FSL_FEATURE_FLEXIO_HAS_STATE_MODE
 193:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeState = 0x6U, /*!< SHIFTBUF contents are used for storing
 194:../drivers/fsl_flexio.h ****                                       programmable state attributes. */
 195:../drivers/fsl_flexio.h **** #endif                               /* FSL_FEATURE_FLEXIO_HAS_STATE_MODE */
 196:../drivers/fsl_flexio.h **** #if FSL_FEATURE_FLEXIO_HAS_LOGIC_MODE
 197:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterModeLogic = 0x7U, /*!< SHIFTBUF contents are used for implementing
 198:../drivers/fsl_flexio.h ****                                      programmable logic look up table. */
 199:../drivers/fsl_flexio.h **** #endif                               /* FSL_FEATURE_FLEXIO_HAS_LOGIC_MODE */
 200:../drivers/fsl_flexio.h **** } flexio_shifter_mode_t;
 201:../drivers/fsl_flexio.h **** 
 202:../drivers/fsl_flexio.h **** /*! @brief Define type of shifter input source.*/
 203:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_input_source
 204:../drivers/fsl_flexio.h **** {
 205:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterInputFromPin = 0x0U,               /*!< Shifter input from pin. */
 206:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterInputFromNextShifterOutput = 0x1U, /*!< Shifter input from Shifter N+1. */
 207:../drivers/fsl_flexio.h **** } flexio_shifter_input_source_t;
 208:../drivers/fsl_flexio.h **** 
 209:../drivers/fsl_flexio.h **** /*! @brief Define of STOP bit configuration.*/
 210:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_stop_bit
 211:../drivers/fsl_flexio.h **** {
 212:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStopBitDisable = 0x0U, /*!< Disable shifter stop bit. */
 213:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStopBitLow = 0x2U,     /*!< Set shifter stop bit to logic low level. */
 214:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStopBitHigh = 0x3U,    /*!< Set shifter stop bit to logic high level. */
 215:../drivers/fsl_flexio.h **** } flexio_shifter_stop_bit_t;
 216:../drivers/fsl_flexio.h **** 
 217:../drivers/fsl_flexio.h **** /*! @brief Define type of START bit configuration.*/
 218:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_start_bit
 219:../drivers/fsl_flexio.h **** {
 220:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitDisabledLoadDataOnEnable = 0x0U, /*!< Disable shifter start bit, transmi
 221:../drivers/fsl_flexio.h ****                                                              data on enable. */
 222:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitDisabledLoadDataOnShift = 0x1U,  /*!< Disable shifter start bit, transmi
 223:../drivers/fsl_flexio.h ****                                                              data on first shift. */
 224:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitLow = 0x2U,                      /*!< Set shifter start bit to logic low
 225:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterStartBitHigh = 0x3U,                     /*!< Set shifter start bit to logic hig
 226:../drivers/fsl_flexio.h **** } flexio_shifter_start_bit_t;
 227:../drivers/fsl_flexio.h **** 
 228:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO shifter buffer type*/
 229:../drivers/fsl_flexio.h **** typedef enum _flexio_shifter_buffer_type
 230:../drivers/fsl_flexio.h **** {
 231:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBuffer = 0x0U,               /*!< Shifter Buffer N Register. */
 232:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferBitSwapped = 0x1U,     /*!< Shifter Buffer N Bit Byte Swapped Register. */
 233:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferByteSwapped = 0x2U,    /*!< Shifter Buffer N Byte Swapped Register. */
 234:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferBitByteSwapped = 0x3U, /*!< Shifter Buffer N Bit Swapped Register. */
 235:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_BYTE_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUF
 236:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferNibbleByteSwapped = 0x4U, /*!< Shifter Buffer N Nibble Byte Swapped Regist
 237:../drivers/fsl_flexio.h **** #endif                                             /*FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_BYTE
 238:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_HALF_WORD_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFE
 239:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferHalfWordSwapped = 0x5U, /*!< Shifter Buffer N Half Word Swapped Register. 
 240:../drivers/fsl_flexio.h **** #endif
 241:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_NIBBLE_SWAP) && FSL_FEATURE_FLEXIO_HAS_SHFT_BUFFER_N
 242:../drivers/fsl_flexio.h ****     kFLEXIO_ShifterBufferNibbleSwapped = 0x6U, /*!< Shifter Buffer N Nibble Swapped Register. */
 243:../drivers/fsl_flexio.h **** #endif
 244:../drivers/fsl_flexio.h **** } flexio_shifter_buffer_type_t;
 245:../drivers/fsl_flexio.h **** 
 246:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO user configuration structure. */
 247:../drivers/fsl_flexio.h **** typedef struct _flexio_config_
 248:../drivers/fsl_flexio.h **** {
 249:../drivers/fsl_flexio.h ****     bool enableFlexio;     /*!< Enable/disable FlexIO module */
 250:../drivers/fsl_flexio.h ****     bool enableInDoze;     /*!< Enable/disable FlexIO operation in doze mode */
 251:../drivers/fsl_flexio.h ****     bool enableInDebug;    /*!< Enable/disable FlexIO operation in debug mode */
 252:../drivers/fsl_flexio.h ****     bool enableFastAccess; /*!< Enable/disable fast access to FlexIO registers, fast access require
 253:../drivers/fsl_flexio.h ****                            the FlexIO clock to be at least twice the frequency of the bus clock. */
 254:../drivers/fsl_flexio.h **** } flexio_config_t;
 255:../drivers/fsl_flexio.h **** 
 256:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO timer configuration structure. */
 257:../drivers/fsl_flexio.h **** typedef struct _flexio_timer_config
 258:../drivers/fsl_flexio.h **** {
 259:../drivers/fsl_flexio.h ****     /* Trigger. */
 260:../drivers/fsl_flexio.h ****     uint32_t triggerSelect;                          /*!< The internal trigger selection number usi
 261:../drivers/fsl_flexio.h ****     flexio_timer_trigger_polarity_t triggerPolarity; /*!< Trigger Polarity. */
 262:../drivers/fsl_flexio.h ****     flexio_timer_trigger_source_t triggerSource;     /*!< Trigger Source, internal (see 'trgsel') o
 263:../drivers/fsl_flexio.h ****     /* Pin. */
 264:../drivers/fsl_flexio.h ****     flexio_pin_config_t pinConfig;     /*!< Timer Pin Configuration. */
 265:../drivers/fsl_flexio.h ****     uint32_t pinSelect;                /*!< Timer Pin number Select. */
 266:../drivers/fsl_flexio.h ****     flexio_pin_polarity_t pinPolarity; /*!< Timer Pin Polarity. */
 267:../drivers/fsl_flexio.h ****     /* Timer. */
 268:../drivers/fsl_flexio.h ****     flexio_timer_mode_t timerMode;                  /*!< Timer work Mode. */
 269:../drivers/fsl_flexio.h ****     flexio_timer_output_t timerOutput;              /*!< Configures the initial state of the Timer 
 270:../drivers/fsl_flexio.h ****                                                     whether it is affected by the Timer reset. */
 271:../drivers/fsl_flexio.h ****     flexio_timer_decrement_source_t timerDecrement; /*!< Configures the source of the Timer decreme
 272:../drivers/fsl_flexio.h ****                                                     source of the Shift clock. */
 273:../drivers/fsl_flexio.h ****     flexio_timer_reset_condition_t timerReset;      /*!< Configures the condition that causes the t
 274:../drivers/fsl_flexio.h ****                                                     (and optionally the timer output) to be reset. 
 275:../drivers/fsl_flexio.h ****     flexio_timer_disable_condition_t timerDisable;  /*!< Configures the condition that causes the T
 276:../drivers/fsl_flexio.h ****                                                     disabled and stop decrementing. */
 277:../drivers/fsl_flexio.h ****     flexio_timer_enable_condition_t timerEnable;    /*!< Configures the condition that causes the T
 278:../drivers/fsl_flexio.h ****                                                     enabled and start decrementing. */
 279:../drivers/fsl_flexio.h ****     flexio_timer_stop_bit_condition_t timerStop;    /*!< Timer STOP Bit generation. */
 280:../drivers/fsl_flexio.h ****     flexio_timer_start_bit_condition_t timerStart;  /*!< Timer STRAT Bit generation. */
 281:../drivers/fsl_flexio.h ****     uint32_t timerCompare;                          /*!< Value for Timer Compare N Register. */
 282:../drivers/fsl_flexio.h **** } flexio_timer_config_t;
 283:../drivers/fsl_flexio.h **** 
 284:../drivers/fsl_flexio.h **** /*! @brief Define FlexIO shifter configuration structure. */
 285:../drivers/fsl_flexio.h **** typedef struct _flexio_shifter_config
 286:../drivers/fsl_flexio.h **** {
 287:../drivers/fsl_flexio.h ****     /* Timer. */
 288:../drivers/fsl_flexio.h ****     uint32_t timerSelect;                          /*!< Selects which Timer is used for controlling
 289:../drivers/fsl_flexio.h ****                                                     logic/shift register and generating the Shift c
 290:../drivers/fsl_flexio.h ****     flexio_shifter_timer_polarity_t timerPolarity; /*!< Timer Polarity. */
 291:../drivers/fsl_flexio.h ****     /* Pin. */
 292:../drivers/fsl_flexio.h ****     flexio_pin_config_t pinConfig;     /*!< Shifter Pin Configuration. */
 293:../drivers/fsl_flexio.h ****     uint32_t pinSelect;                /*!< Shifter Pin number Select. */
 294:../drivers/fsl_flexio.h ****     flexio_pin_polarity_t pinPolarity; /*!< Shifter Pin Polarity. */
 295:../drivers/fsl_flexio.h ****     /* Shifter. */
 296:../drivers/fsl_flexio.h ****     flexio_shifter_mode_t shifterMode; /*!< Configures the mode of the Shifter. */
 297:../drivers/fsl_flexio.h **** #if FSL_FEATURE_FLEXIO_HAS_PARALLEL_WIDTH
 298:../drivers/fsl_flexio.h ****     uint32_t parallelWidth;                    /*!< Configures the parallel width when using parall
 299:../drivers/fsl_flexio.h **** #endif                                         /* FSL_FEATURE_FLEXIO_HAS_PARALLEL_WIDTH */
 300:../drivers/fsl_flexio.h ****     flexio_shifter_input_source_t inputSource; /*!< Selects the input source for the shifter. */
 301:../drivers/fsl_flexio.h ****     flexio_shifter_stop_bit_t shifterStop;     /*!< Shifter STOP bit. */
 302:../drivers/fsl_flexio.h ****     flexio_shifter_start_bit_t shifterStart;   /*!< Shifter START bit. */
 303:../drivers/fsl_flexio.h **** } flexio_shifter_config_t;
 304:../drivers/fsl_flexio.h **** 
 305:../drivers/fsl_flexio.h **** /*! @brief typedef for FlexIO simulated driver interrupt handler.*/
 306:../drivers/fsl_flexio.h **** typedef void (*flexio_isr_t)(void *base, void *handle);
 307:../drivers/fsl_flexio.h **** 
 308:../drivers/fsl_flexio.h **** /*******************************************************************************
 309:../drivers/fsl_flexio.h ****  * API
 310:../drivers/fsl_flexio.h ****  ******************************************************************************/
 311:../drivers/fsl_flexio.h **** 
 312:../drivers/fsl_flexio.h **** #if defined(__cplusplus)
 313:../drivers/fsl_flexio.h **** extern "C" {
 314:../drivers/fsl_flexio.h **** #endif /*_cplusplus*/
 315:../drivers/fsl_flexio.h **** 
 316:../drivers/fsl_flexio.h **** /*!
 317:../drivers/fsl_flexio.h ****  * @name FlexIO Initialization and De-initialization
 318:../drivers/fsl_flexio.h ****  * @{
 319:../drivers/fsl_flexio.h ****  */
 320:../drivers/fsl_flexio.h **** 
 321:../drivers/fsl_flexio.h **** /*!
 322:../drivers/fsl_flexio.h ****  * @brief Gets the default configuration to configure the FlexIO module. The configuration
 323:../drivers/fsl_flexio.h ****  * can used directly to call the FLEXIO_Configure().
 324:../drivers/fsl_flexio.h ****  *
 325:../drivers/fsl_flexio.h ****  * Example:
 326:../drivers/fsl_flexio.h ****    @code
 327:../drivers/fsl_flexio.h ****    flexio_config_t config;
 328:../drivers/fsl_flexio.h ****    FLEXIO_GetDefaultConfig(&config);
 329:../drivers/fsl_flexio.h ****    @endcode
 330:../drivers/fsl_flexio.h ****  *
 331:../drivers/fsl_flexio.h ****  * @param userConfig pointer to flexio_config_t structure
 332:../drivers/fsl_flexio.h **** */
 333:../drivers/fsl_flexio.h **** void FLEXIO_GetDefaultConfig(flexio_config_t *userConfig);
 334:../drivers/fsl_flexio.h **** 
 335:../drivers/fsl_flexio.h **** /*!
 336:../drivers/fsl_flexio.h ****  * @brief Configures the FlexIO with a FlexIO configuration. The configuration structure
 337:../drivers/fsl_flexio.h ****  * can be filled by the user or be set with default values by FLEXIO_GetDefaultConfig().
 338:../drivers/fsl_flexio.h ****  *
 339:../drivers/fsl_flexio.h ****  * Example
 340:../drivers/fsl_flexio.h ****    @code
 341:../drivers/fsl_flexio.h ****    flexio_config_t config = {
 342:../drivers/fsl_flexio.h ****    .enableFlexio = true,
 343:../drivers/fsl_flexio.h ****    .enableInDoze = false,
 344:../drivers/fsl_flexio.h ****    .enableInDebug = true,
 345:../drivers/fsl_flexio.h ****    .enableFastAccess = false
 346:../drivers/fsl_flexio.h ****    };
 347:../drivers/fsl_flexio.h ****    FLEXIO_Configure(base, &config);
 348:../drivers/fsl_flexio.h ****    @endcode
 349:../drivers/fsl_flexio.h ****  *
 350:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 351:../drivers/fsl_flexio.h ****  * @param userConfig pointer to flexio_config_t structure
 352:../drivers/fsl_flexio.h **** */
 353:../drivers/fsl_flexio.h **** void FLEXIO_Init(FLEXIO_Type *base, const flexio_config_t *userConfig);
 354:../drivers/fsl_flexio.h **** 
 355:../drivers/fsl_flexio.h **** /*!
 356:../drivers/fsl_flexio.h ****  * @brief Gates the FlexIO clock. Call this API to stop the FlexIO clock.
 357:../drivers/fsl_flexio.h ****  *
 358:../drivers/fsl_flexio.h ****  * @note After calling this API, call the FLEXO_Init to use the FlexIO module.
 359:../drivers/fsl_flexio.h ****  *
 360:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 361:../drivers/fsl_flexio.h **** */
 362:../drivers/fsl_flexio.h **** void FLEXIO_Deinit(FLEXIO_Type *base);
 363:../drivers/fsl_flexio.h **** 
 364:../drivers/fsl_flexio.h **** /* @} */
 365:../drivers/fsl_flexio.h **** 
 366:../drivers/fsl_flexio.h **** /*!
 367:../drivers/fsl_flexio.h ****  * @name FlexIO Basic Operation
 368:../drivers/fsl_flexio.h ****  * @{
 369:../drivers/fsl_flexio.h ****  */
 370:../drivers/fsl_flexio.h **** 
 371:../drivers/fsl_flexio.h **** /*!
 372:../drivers/fsl_flexio.h ****  * @brief Resets the FlexIO module.
 373:../drivers/fsl_flexio.h ****  *
 374:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 375:../drivers/fsl_flexio.h **** */
 376:../drivers/fsl_flexio.h **** void FLEXIO_Reset(FLEXIO_Type *base);
 377:../drivers/fsl_flexio.h **** 
 378:../drivers/fsl_flexio.h **** /*!
 379:../drivers/fsl_flexio.h ****  * @brief Enables the FlexIO module operation.
 380:../drivers/fsl_flexio.h ****  *
 381:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 382:../drivers/fsl_flexio.h ****  * @param enable true to enable, false to disable.
 383:../drivers/fsl_flexio.h **** */
 384:../drivers/fsl_flexio.h **** static inline void FLEXIO_Enable(FLEXIO_Type *base, bool enable)
 385:../drivers/fsl_flexio.h **** {
 386:../drivers/fsl_flexio.h ****     if (enable)
 387:../drivers/fsl_flexio.h ****     {
 388:../drivers/fsl_flexio.h ****         base->CTRL |= FLEXIO_CTRL_FLEXEN_MASK;
 389:../drivers/fsl_flexio.h ****     }
 390:../drivers/fsl_flexio.h ****     else
 391:../drivers/fsl_flexio.h ****     {
 392:../drivers/fsl_flexio.h ****         base->CTRL &= ~FLEXIO_CTRL_FLEXEN_MASK;
 393:../drivers/fsl_flexio.h ****     }
 394:../drivers/fsl_flexio.h **** }
 395:../drivers/fsl_flexio.h **** 
 396:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_PIN_STATUS) && FSL_FEATURE_FLEXIO_HAS_PIN_STATUS
 397:../drivers/fsl_flexio.h **** /*!
 398:../drivers/fsl_flexio.h ****  * @brief Reads the input data on each of the FlexIO pins.
 399:../drivers/fsl_flexio.h ****  *
 400:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 401:../drivers/fsl_flexio.h ****  * @return FlexIO pin input data
 402:../drivers/fsl_flexio.h **** */
 403:../drivers/fsl_flexio.h **** static inline uint32_t FLEXIO_ReadPinInput(FLEXIO_Type *base)
 404:../drivers/fsl_flexio.h **** {
 405:../drivers/fsl_flexio.h ****     return base->PIN;
 406:../drivers/fsl_flexio.h **** }
 407:../drivers/fsl_flexio.h **** #endif /*FSL_FEATURE_FLEXIO_HAS_PIN_STATUS*/
 408:../drivers/fsl_flexio.h **** 
 409:../drivers/fsl_flexio.h **** #if defined(FSL_FEATURE_FLEXIO_HAS_STATE_MODE) && FSL_FEATURE_FLEXIO_HAS_STATE_MODE
 410:../drivers/fsl_flexio.h **** /*!
 411:../drivers/fsl_flexio.h ****  * @brief Gets the current state pointer for state mode use.
 412:../drivers/fsl_flexio.h ****  *
 413:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 414:../drivers/fsl_flexio.h ****  * @return current State pointer
 415:../drivers/fsl_flexio.h **** */
 416:../drivers/fsl_flexio.h **** static inline uint8_t FLEXIO_GetShifterState(FLEXIO_Type *base)
 417:../drivers/fsl_flexio.h **** {
 418:../drivers/fsl_flexio.h ****     return ((base->SHIFTSTATE) & FLEXIO_SHIFTSTATE_STATE_MASK);
 419:../drivers/fsl_flexio.h **** }
 420:../drivers/fsl_flexio.h **** #endif /*FSL_FEATURE_FLEXIO_HAS_STATE_MODE*/
 421:../drivers/fsl_flexio.h **** 
 422:../drivers/fsl_flexio.h **** /*!
 423:../drivers/fsl_flexio.h ****  * @brief Configures the shifter with the shifter configuration. The configuration structure
 424:../drivers/fsl_flexio.h ****  * covers both the SHIFTCTL and SHIFTCFG registers. To configure the shifter to the proper
 425:../drivers/fsl_flexio.h ****  * mode, select which timer controls the shifter to shift, whether to generate start bit/stop
 426:../drivers/fsl_flexio.h ****  *  bit, and the polarity of start bit and stop bit.
 427:../drivers/fsl_flexio.h ****  *
 428:../drivers/fsl_flexio.h ****  * Example
 429:../drivers/fsl_flexio.h ****    @code
 430:../drivers/fsl_flexio.h ****    flexio_shifter_config_t config = {
 431:../drivers/fsl_flexio.h ****    .timerSelect = 0,
 432:../drivers/fsl_flexio.h ****    .timerPolarity = kFLEXIO_ShifterTimerPolarityOnPositive,
 433:../drivers/fsl_flexio.h ****    .pinConfig = kFLEXIO_PinConfigOpenDrainOrBidirection,
 434:../drivers/fsl_flexio.h ****    .pinPolarity = kFLEXIO_PinActiveLow,
 435:../drivers/fsl_flexio.h ****    .shifterMode = kFLEXIO_ShifterModeTransmit,
 436:../drivers/fsl_flexio.h ****    .inputSource = kFLEXIO_ShifterInputFromPin,
 437:../drivers/fsl_flexio.h ****    .shifterStop = kFLEXIO_ShifterStopBitHigh,
 438:../drivers/fsl_flexio.h ****    .shifterStart = kFLEXIO_ShifterStartBitLow
 439:../drivers/fsl_flexio.h ****    };
 440:../drivers/fsl_flexio.h ****    FLEXIO_SetShifterConfig(base, &config);
 441:../drivers/fsl_flexio.h ****    @endcode
 442:../drivers/fsl_flexio.h ****  *
 443:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 444:../drivers/fsl_flexio.h ****  * @param index Shifter index
 445:../drivers/fsl_flexio.h ****  * @param shifterConfig Pointer to flexio_shifter_config_t structure
 446:../drivers/fsl_flexio.h **** */
 447:../drivers/fsl_flexio.h **** void FLEXIO_SetShifterConfig(FLEXIO_Type *base, uint8_t index, const flexio_shifter_config_t *shift
 448:../drivers/fsl_flexio.h **** /*!
 449:../drivers/fsl_flexio.h ****  * @brief Configures the timer with the timer configuration. The configuration structure
 450:../drivers/fsl_flexio.h ****  * covers both the TIMCTL and TIMCFG registers. To configure the timer to the proper
 451:../drivers/fsl_flexio.h ****  * mode, select trigger source for timer and the timer pin output and the timing for timer.
 452:../drivers/fsl_flexio.h ****  *
 453:../drivers/fsl_flexio.h ****  * Example
 454:../drivers/fsl_flexio.h ****    @code
 455:../drivers/fsl_flexio.h ****    flexio_timer_config_t config = {
 456:../drivers/fsl_flexio.h ****    .triggerSelect = FLEXIO_TIMER_TRIGGER_SEL_SHIFTnSTAT(0),
 457:../drivers/fsl_flexio.h ****    .triggerPolarity = kFLEXIO_TimerTriggerPolarityActiveLow,
 458:../drivers/fsl_flexio.h ****    .triggerSource = kFLEXIO_TimerTriggerSourceInternal,
 459:../drivers/fsl_flexio.h ****    .pinConfig = kFLEXIO_PinConfigOpenDrainOrBidirection,
 460:../drivers/fsl_flexio.h ****    .pinSelect = 0,
 461:../drivers/fsl_flexio.h ****    .pinPolarity = kFLEXIO_PinActiveHigh,
 462:../drivers/fsl_flexio.h ****    .timerMode = kFLEXIO_TimerModeDual8BitBaudBit,
 463:../drivers/fsl_flexio.h ****    .timerOutput = kFLEXIO_TimerOutputZeroNotAffectedByReset,
 464:../drivers/fsl_flexio.h ****    .timerDecrement = kFLEXIO_TimerDecSrcOnFlexIOClockShiftTimerOutput,
 465:../drivers/fsl_flexio.h ****    .timerReset = kFLEXIO_TimerResetOnTimerPinEqualToTimerOutput,
 466:../drivers/fsl_flexio.h ****    .timerDisable = kFLEXIO_TimerDisableOnTimerCompare,
 467:../drivers/fsl_flexio.h ****    .timerEnable = kFLEXIO_TimerEnableOnTriggerHigh,
 468:../drivers/fsl_flexio.h ****    .timerStop = kFLEXIO_TimerStopBitEnableOnTimerDisable,
 469:../drivers/fsl_flexio.h ****    .timerStart = kFLEXIO_TimerStartBitEnabled
 470:../drivers/fsl_flexio.h ****    };
 471:../drivers/fsl_flexio.h ****    FLEXIO_SetTimerConfig(base, &config);
 472:../drivers/fsl_flexio.h ****    @endcode
 473:../drivers/fsl_flexio.h ****  *
 474:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 475:../drivers/fsl_flexio.h ****  * @param index Timer index
 476:../drivers/fsl_flexio.h ****  * @param timerConfig Pointer to the flexio_timer_config_t structure
 477:../drivers/fsl_flexio.h **** */
 478:../drivers/fsl_flexio.h **** void FLEXIO_SetTimerConfig(FLEXIO_Type *base, uint8_t index, const flexio_timer_config_t *timerConf
 479:../drivers/fsl_flexio.h **** 
 480:../drivers/fsl_flexio.h **** /* @} */
 481:../drivers/fsl_flexio.h **** 
 482:../drivers/fsl_flexio.h **** /*!
 483:../drivers/fsl_flexio.h ****  * @name FlexIO Interrupt Operation
 484:../drivers/fsl_flexio.h ****  * @{
 485:../drivers/fsl_flexio.h ****  */
 486:../drivers/fsl_flexio.h **** 
 487:../drivers/fsl_flexio.h **** /*!
 488:../drivers/fsl_flexio.h ****  * @brief Enables the shifter status interrupt. The interrupt generates when the corresponding SSF 
 489:../drivers/fsl_flexio.h ****  *
 490:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 491:../drivers/fsl_flexio.h ****  * @param mask The shifter status mask which can be calculated by (1 << shifter index)
 492:../drivers/fsl_flexio.h ****  * @note For multiple shifter status interrupt enable, for example, two shifter status enable, can 
 493:../drivers/fsl_flexio.h ****  * the mask by using ((1 << shifter index0) | (1 << shifter index1))
 494:../drivers/fsl_flexio.h **** */
 495:../drivers/fsl_flexio.h **** static inline void FLEXIO_EnableShifterStatusInterrupts(FLEXIO_Type *base, uint32_t mask)
 496:../drivers/fsl_flexio.h **** {
 497:../drivers/fsl_flexio.h ****     base->SHIFTSIEN |= mask;
 498:../drivers/fsl_flexio.h **** }
 499:../drivers/fsl_flexio.h **** 
 500:../drivers/fsl_flexio.h **** /*!
 501:../drivers/fsl_flexio.h ****  * @brief Disables the shifter status interrupt. The interrupt won't generate when the correspondin
 502:../drivers/fsl_flexio.h ****  *
 503:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 504:../drivers/fsl_flexio.h ****  * @param mask The shifter status mask which can be calculated by (1 << shifter index)
 505:../drivers/fsl_flexio.h ****  * @note For multiple shifter status interrupt enable, for example, two shifter status enable, can 
 506:../drivers/fsl_flexio.h ****  * the mask by using ((1 << shifter index0) | (1 << shifter index1))
 507:../drivers/fsl_flexio.h **** */
 508:../drivers/fsl_flexio.h **** static inline void FLEXIO_DisableShifterStatusInterrupts(FLEXIO_Type *base, uint32_t mask)
 509:../drivers/fsl_flexio.h **** {
 510:../drivers/fsl_flexio.h ****     base->SHIFTSIEN &= ~mask;
 511:../drivers/fsl_flexio.h **** }
 512:../drivers/fsl_flexio.h **** 
 513:../drivers/fsl_flexio.h **** /*!
 514:../drivers/fsl_flexio.h ****  * @brief Enables the shifter error interrupt. The interrupt generates when the corresponding SEF i
 515:../drivers/fsl_flexio.h ****  *
 516:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 517:../drivers/fsl_flexio.h ****  * @param mask The shifter error mask which can be calculated by (1 << shifter index)
 518:../drivers/fsl_flexio.h ****  * @note For multiple shifter error interrupt enable, for example, two shifter error enable, can ca
 519:../drivers/fsl_flexio.h ****  * the mask by using ((1 << shifter index0) | (1 << shifter index1))
 520:../drivers/fsl_flexio.h **** */
 521:../drivers/fsl_flexio.h **** static inline void FLEXIO_EnableShifterErrorInterrupts(FLEXIO_Type *base, uint32_t mask)
 522:../drivers/fsl_flexio.h **** {
 523:../drivers/fsl_flexio.h ****     base->SHIFTEIEN |= mask;
 524:../drivers/fsl_flexio.h **** }
 525:../drivers/fsl_flexio.h **** 
 526:../drivers/fsl_flexio.h **** /*!
 527:../drivers/fsl_flexio.h ****  * @brief Disables the shifter error interrupt. The interrupt won't generate when the corresponding
 528:../drivers/fsl_flexio.h ****  *
 529:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 530:../drivers/fsl_flexio.h ****  * @param mask The shifter error mask which can be calculated by (1 << shifter index)
 531:../drivers/fsl_flexio.h ****  * @note For multiple shifter error interrupt enable, for example, two shifter error enable, can ca
 532:../drivers/fsl_flexio.h ****  * the mask by using ((1 << shifter index0) | (1 << shifter index1))
 533:../drivers/fsl_flexio.h **** */
 534:../drivers/fsl_flexio.h **** static inline void FLEXIO_DisableShifterErrorInterrupts(FLEXIO_Type *base, uint32_t mask)
 535:../drivers/fsl_flexio.h **** {
 536:../drivers/fsl_flexio.h ****     base->SHIFTEIEN &= ~mask;
 537:../drivers/fsl_flexio.h **** }
 538:../drivers/fsl_flexio.h **** 
 539:../drivers/fsl_flexio.h **** /*!
 540:../drivers/fsl_flexio.h ****  * @brief Enables the timer status interrupt. The interrupt generates when the corresponding SSF is
 541:../drivers/fsl_flexio.h ****  *
 542:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 543:../drivers/fsl_flexio.h ****  * @param mask The timer status mask which can be calculated by (1 << timer index)
 544:../drivers/fsl_flexio.h ****  * @note For multiple timer status interrupt enable, for example, two timer status enable, can calc
 545:../drivers/fsl_flexio.h ****  * the mask by using ((1 << timer index0) | (1 << timer index1))
 546:../drivers/fsl_flexio.h **** */
 547:../drivers/fsl_flexio.h **** static inline void FLEXIO_EnableTimerStatusInterrupts(FLEXIO_Type *base, uint32_t mask)
 548:../drivers/fsl_flexio.h **** {
 549:../drivers/fsl_flexio.h ****     base->TIMIEN |= mask;
 550:../drivers/fsl_flexio.h **** }
 551:../drivers/fsl_flexio.h **** 
 552:../drivers/fsl_flexio.h **** /*!
 553:../drivers/fsl_flexio.h ****  * @brief Disables the timer status interrupt. The interrupt won't generate when the corresponding 
 554:../drivers/fsl_flexio.h ****  *
 555:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 556:../drivers/fsl_flexio.h ****  * @param mask The timer status mask which can be calculated by (1 << timer index)
 557:../drivers/fsl_flexio.h ****  * @note For multiple timer status interrupt enable, for example, two timer status enable, can calc
 558:../drivers/fsl_flexio.h ****  * the mask by using ((1 << timer index0) | (1 << timer index1))
 559:../drivers/fsl_flexio.h **** */
 560:../drivers/fsl_flexio.h **** static inline void FLEXIO_DisableTimerStatusInterrupts(FLEXIO_Type *base, uint32_t mask)
 561:../drivers/fsl_flexio.h **** {
 562:../drivers/fsl_flexio.h ****     base->TIMIEN &= ~mask;
 563:../drivers/fsl_flexio.h **** }
 564:../drivers/fsl_flexio.h **** 
 565:../drivers/fsl_flexio.h **** /* @} */
 566:../drivers/fsl_flexio.h **** 
 567:../drivers/fsl_flexio.h **** /*!
 568:../drivers/fsl_flexio.h ****  * @name FlexIO Status Operation
 569:../drivers/fsl_flexio.h ****  * @{
 570:../drivers/fsl_flexio.h ****  */
 571:../drivers/fsl_flexio.h **** 
 572:../drivers/fsl_flexio.h **** /*!
 573:../drivers/fsl_flexio.h ****  * @brief Gets the shifter status flags.
 574:../drivers/fsl_flexio.h ****  *
 575:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 576:../drivers/fsl_flexio.h ****  * @return Shifter status flags
 577:../drivers/fsl_flexio.h **** */
 578:../drivers/fsl_flexio.h **** static inline uint32_t FLEXIO_GetShifterStatusFlags(FLEXIO_Type *base)
 579:../drivers/fsl_flexio.h **** {
 580:../drivers/fsl_flexio.h ****     return ((base->SHIFTSTAT) & FLEXIO_SHIFTSTAT_SSF_MASK);
 548              		.loc 3 580 0
 549 0006 2369     		ldr	r3, [r4, #16]
 550 0008 0F22     		movs	r2, #15
 551 000a 1340     		ands	r3, r2
 552              	.LVL37:
 553              	.LBE73:
 554              	.LBE72:
 555              		.loc 1 523 0
 556 000c 8679     		ldrb	r6, [r0, #6]
 557 000e 0121     		movs	r1, #1
 558 0010 0800     		movs	r0, r1
 559              	.LVL38:
 560 0012 B040     		lsls	r0, r0, r6
 561 0014 0340     		ands	r3, r0
 522:../drivers/fsl_flexio_i2c_master.c ****         ((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shifterIndex[0])) >> base->
 562              		.loc 1 522 0
 563 0016 F340     		lsrs	r3, r3, r6
 564              	.LVL39:
 565              	.LBB74:
 566              	.LBB75:
 567              		.loc 3 580 0
 568 0018 2069     		ldr	r0, [r4, #16]
 569 001a 1040     		ands	r0, r2
 570              	.LVL40:
 571              	.LBE75:
 572              	.LBE74:
 524:../drivers/fsl_flexio_i2c_master.c ****     status |=
 525:../drivers/fsl_flexio_i2c_master.c ****         (((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shifterIndex[1])) >> (base
 573              		.loc 1 525 0
 574 001c ED79     		ldrb	r5, [r5, #7]
 575              	.LVL41:
 576 001e A940     		lsls	r1, r1, r5
 577 0020 0840     		ands	r0, r1
 578 0022 E840     		lsrs	r0, r0, r5
 526:../drivers/fsl_flexio_i2c_master.c ****          << 1U);
 579              		.loc 1 526 0
 580 0024 4000     		lsls	r0, r0, #1
 524:../drivers/fsl_flexio_i2c_master.c ****     status |=
 581              		.loc 1 524 0
 582 0026 1843     		orrs	r0, r3
 583              	.LVL42:
 584              	.LBB76:
 585              	.LBB77:
 581:../drivers/fsl_flexio.h **** }
 582:../drivers/fsl_flexio.h **** 
 583:../drivers/fsl_flexio.h **** /*!
 584:../drivers/fsl_flexio.h ****  * @brief Clears the shifter status flags.
 585:../drivers/fsl_flexio.h ****  *
 586:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 587:../drivers/fsl_flexio.h ****  * @param mask The shifter status mask which can be calculated by (1 << shifter index)
 588:../drivers/fsl_flexio.h ****  * @note For clearing multiple shifter status flags, for example, two shifter status flags, can cal
 589:../drivers/fsl_flexio.h ****  * the mask by using ((1 << shifter index0) | (1 << shifter index1))
 590:../drivers/fsl_flexio.h **** */
 591:../drivers/fsl_flexio.h **** static inline void FLEXIO_ClearShifterStatusFlags(FLEXIO_Type *base, uint32_t mask)
 592:../drivers/fsl_flexio.h **** {
 593:../drivers/fsl_flexio.h ****     base->SHIFTSTAT = mask;
 594:../drivers/fsl_flexio.h **** }
 595:../drivers/fsl_flexio.h **** 
 596:../drivers/fsl_flexio.h **** /*!
 597:../drivers/fsl_flexio.h ****  * @brief Gets the shifter error flags.
 598:../drivers/fsl_flexio.h ****  *
 599:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 600:../drivers/fsl_flexio.h ****  * @return Shifter error flags
 601:../drivers/fsl_flexio.h **** */
 602:../drivers/fsl_flexio.h **** static inline uint32_t FLEXIO_GetShifterErrorFlags(FLEXIO_Type *base)
 603:../drivers/fsl_flexio.h **** {
 604:../drivers/fsl_flexio.h ****     return ((base->SHIFTERR) & FLEXIO_SHIFTERR_SEF_MASK);
 586              		.loc 3 604 0
 587 0028 6369     		ldr	r3, [r4, #20]
 588 002a 1A40     		ands	r2, r3
 589              	.LVL43:
 590              	.LBE77:
 591              	.LBE76:
 527:../drivers/fsl_flexio_i2c_master.c ****     status |=
 528:../drivers/fsl_flexio_i2c_master.c ****         (((FLEXIO_GetShifterErrorFlags(base->flexioBase) & (1U << base->shifterIndex[1])) >> (base-
 592              		.loc 1 528 0
 593 002c 0A40     		ands	r2, r1
 594 002e EA40     		lsrs	r2, r2, r5
 529:../drivers/fsl_flexio_i2c_master.c ****          << 2U);
 595              		.loc 1 529 0
 596 0030 9200     		lsls	r2, r2, #2
 527:../drivers/fsl_flexio_i2c_master.c ****     status |=
 597              		.loc 1 527 0
 598 0032 1043     		orrs	r0, r2
 599              	.LVL44:
 530:../drivers/fsl_flexio_i2c_master.c **** 
 531:../drivers/fsl_flexio_i2c_master.c ****     return status;
 532:../drivers/fsl_flexio_i2c_master.c **** }
 600              		.loc 1 532 0
 601              		@ sp needed
 602 0034 70BD     		pop	{r4, r5, r6, pc}
 603              		.cfi_endproc
 604              	.LFE77:
 606              		.section	.text.FLEXIO_I2C_MasterClearStatusFlags,"ax",%progbits
 607              		.align	1
 608              		.global	FLEXIO_I2C_MasterClearStatusFlags
 609              		.syntax unified
 610              		.code	16
 611              		.thumb_func
 612              		.fpu softvfp
 614              	FLEXIO_I2C_MasterClearStatusFlags:
 615              	.LFB78:
 533:../drivers/fsl_flexio_i2c_master.c **** 
 534:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterClearStatusFlags(FLEXIO_I2C_Type *base, uint32_t mask)
 535:../drivers/fsl_flexio_i2c_master.c **** {
 616              		.loc 1 535 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              	.LVL45:
 621 0000 10B5     		push	{r4, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 4, -8
 624              		.cfi_offset 14, -4
 536:../drivers/fsl_flexio_i2c_master.c ****     if (mask & kFLEXIO_I2C_TxEmptyFlag)
 625              		.loc 1 536 0
 626 0002 CB07     		lsls	r3, r1, #31
 627 0004 04D5     		bpl	.L14
 537:../drivers/fsl_flexio_i2c_master.c ****     {
 538:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_ClearShifterStatusFlags(base->flexioBase, 1U << base->shifterIndex[0]);
 628              		.loc 1 538 0
 629 0006 0268     		ldr	r2, [r0]
 630 0008 8479     		ldrb	r4, [r0, #6]
 631 000a 0123     		movs	r3, #1
 632 000c A340     		lsls	r3, r3, r4
 633              	.LVL46:
 634              	.LBB78:
 635              	.LBB79:
 593:../drivers/fsl_flexio.h **** }
 636              		.loc 3 593 0
 637 000e 1361     		str	r3, [r2, #16]
 638              	.LVL47:
 639              	.L14:
 640              	.LBE79:
 641              	.LBE78:
 539:../drivers/fsl_flexio_i2c_master.c ****     }
 540:../drivers/fsl_flexio_i2c_master.c **** 
 541:../drivers/fsl_flexio_i2c_master.c ****     if (mask & kFLEXIO_I2C_RxFullFlag)
 642              		.loc 1 541 0
 643 0010 8B07     		lsls	r3, r1, #30
 644 0012 04D5     		bpl	.L15
 542:../drivers/fsl_flexio_i2c_master.c ****     {
 543:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_ClearShifterStatusFlags(base->flexioBase, 1U << base->shifterIndex[1]);
 645              		.loc 1 543 0
 646 0014 0268     		ldr	r2, [r0]
 647 0016 C479     		ldrb	r4, [r0, #7]
 648 0018 0123     		movs	r3, #1
 649 001a A340     		lsls	r3, r3, r4
 650              	.LVL48:
 651              	.LBB80:
 652              	.LBB81:
 593:../drivers/fsl_flexio.h **** }
 653              		.loc 3 593 0
 654 001c 1361     		str	r3, [r2, #16]
 655              	.LVL49:
 656              	.L15:
 657              	.LBE81:
 658              	.LBE80:
 544:../drivers/fsl_flexio_i2c_master.c ****     }
 545:../drivers/fsl_flexio_i2c_master.c **** 
 546:../drivers/fsl_flexio_i2c_master.c ****     if (mask & kFLEXIO_I2C_ReceiveNakFlag)
 659              		.loc 1 546 0
 660 001e 4B07     		lsls	r3, r1, #29
 661 0020 04D5     		bpl	.L13
 547:../drivers/fsl_flexio_i2c_master.c ****     {
 548:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_ClearShifterErrorFlags(base->flexioBase, 1U << base->shifterIndex[1]);
 662              		.loc 1 548 0
 663 0022 0268     		ldr	r2, [r0]
 664 0024 C179     		ldrb	r1, [r0, #7]
 665              	.LVL50:
 666 0026 0123     		movs	r3, #1
 667 0028 8B40     		lsls	r3, r3, r1
 668              	.LVL51:
 669              	.LBB82:
 670              	.LBB83:
 605:../drivers/fsl_flexio.h **** }
 606:../drivers/fsl_flexio.h **** 
 607:../drivers/fsl_flexio.h **** /*!
 608:../drivers/fsl_flexio.h ****  * @brief Clears the shifter error flags.
 609:../drivers/fsl_flexio.h ****  *
 610:../drivers/fsl_flexio.h ****  * @param base FlexIO peripheral base address
 611:../drivers/fsl_flexio.h ****  * @param mask The shifter error mask which can be calculated by (1 << shifter index)
 612:../drivers/fsl_flexio.h ****  * @note For clearing multiple shifter error flags, for example, two shifter error flags, can calcu
 613:../drivers/fsl_flexio.h ****  * the mask by using ((1 << shifter index0) | (1 << shifter index1))
 614:../drivers/fsl_flexio.h **** */
 615:../drivers/fsl_flexio.h **** static inline void FLEXIO_ClearShifterErrorFlags(FLEXIO_Type *base, uint32_t mask)
 616:../drivers/fsl_flexio.h **** {
 617:../drivers/fsl_flexio.h ****     base->SHIFTERR = mask;
 671              		.loc 3 617 0
 672 002a 5361     		str	r3, [r2, #20]
 673              	.LVL52:
 674              	.L13:
 675              	.LBE83:
 676              	.LBE82:
 549:../drivers/fsl_flexio_i2c_master.c ****     }
 550:../drivers/fsl_flexio_i2c_master.c **** }
 677              		.loc 1 550 0
 678              		@ sp needed
 679 002c 10BD     		pop	{r4, pc}
 680              		.cfi_endproc
 681              	.LFE78:
 683              		.section	.text.FLEXIO_I2C_MasterEnableInterrupts,"ax",%progbits
 684              		.align	1
 685              		.global	FLEXIO_I2C_MasterEnableInterrupts
 686              		.syntax unified
 687              		.code	16
 688              		.thumb_func
 689              		.fpu softvfp
 691              	FLEXIO_I2C_MasterEnableInterrupts:
 692              	.LFB79:
 551:../drivers/fsl_flexio_i2c_master.c **** 
 552:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterEnableInterrupts(FLEXIO_I2C_Type *base, uint32_t mask)
 553:../drivers/fsl_flexio_i2c_master.c **** {
 693              		.loc 1 553 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              	.LVL53:
 698 0000 10B5     		push	{r4, lr}
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 4, -8
 701              		.cfi_offset 14, -4
 554:../drivers/fsl_flexio_i2c_master.c ****     if (mask & kFLEXIO_I2C_TxEmptyInterruptEnable)
 702              		.loc 1 554 0
 703 0002 CB07     		lsls	r3, r1, #31
 704 0004 06D5     		bpl	.L18
 555:../drivers/fsl_flexio_i2c_master.c ****     {
 556:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_EnableShifterStatusInterrupts(base->flexioBase, 1U << base->shifterIndex[0]);
 705              		.loc 1 556 0
 706 0006 0268     		ldr	r2, [r0]
 707 0008 8479     		ldrb	r4, [r0, #6]
 708 000a 0123     		movs	r3, #1
 709 000c A340     		lsls	r3, r3, r4
 710              	.LVL54:
 711              	.LBB84:
 712              	.LBB85:
 497:../drivers/fsl_flexio.h **** }
 713              		.loc 3 497 0
 714 000e 146A     		ldr	r4, [r2, #32]
 715 0010 2343     		orrs	r3, r4
 716              	.LVL55:
 717 0012 1362     		str	r3, [r2, #32]
 718              	.LVL56:
 719              	.L18:
 720              	.LBE85:
 721              	.LBE84:
 557:../drivers/fsl_flexio_i2c_master.c ****     }
 558:../drivers/fsl_flexio_i2c_master.c ****     if (mask & kFLEXIO_I2C_RxFullInterruptEnable)
 722              		.loc 1 558 0
 723 0014 8B07     		lsls	r3, r1, #30
 724 0016 06D5     		bpl	.L17
 559:../drivers/fsl_flexio_i2c_master.c ****     {
 560:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_EnableShifterStatusInterrupts(base->flexioBase, 1U << base->shifterIndex[1]);
 725              		.loc 1 560 0
 726 0018 0268     		ldr	r2, [r0]
 727 001a C179     		ldrb	r1, [r0, #7]
 728              	.LVL57:
 729 001c 0123     		movs	r3, #1
 730 001e 8B40     		lsls	r3, r3, r1
 731              	.LVL58:
 732              	.LBB86:
 733              	.LBB87:
 497:../drivers/fsl_flexio.h **** }
 734              		.loc 3 497 0
 735 0020 116A     		ldr	r1, [r2, #32]
 736 0022 0B43     		orrs	r3, r1
 737              	.LVL59:
 738 0024 1362     		str	r3, [r2, #32]
 739              	.LVL60:
 740              	.L17:
 741              	.LBE87:
 742              	.LBE86:
 561:../drivers/fsl_flexio_i2c_master.c ****     }
 562:../drivers/fsl_flexio_i2c_master.c **** }
 743              		.loc 1 562 0
 744              		@ sp needed
 745 0026 10BD     		pop	{r4, pc}
 746              		.cfi_endproc
 747              	.LFE79:
 749              		.section	.text.FLEXIO_I2C_MasterDisableInterrupts,"ax",%progbits
 750              		.align	1
 751              		.global	FLEXIO_I2C_MasterDisableInterrupts
 752              		.syntax unified
 753              		.code	16
 754              		.thumb_func
 755              		.fpu softvfp
 757              	FLEXIO_I2C_MasterDisableInterrupts:
 758              	.LFB80:
 563:../drivers/fsl_flexio_i2c_master.c **** 
 564:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterDisableInterrupts(FLEXIO_I2C_Type *base, uint32_t mask)
 565:../drivers/fsl_flexio_i2c_master.c **** {
 759              		.loc 1 565 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763              	.LVL61:
 764 0000 10B5     		push	{r4, lr}
 765              		.cfi_def_cfa_offset 8
 766              		.cfi_offset 4, -8
 767              		.cfi_offset 14, -4
 566:../drivers/fsl_flexio_i2c_master.c ****     if (mask & kFLEXIO_I2C_TxEmptyInterruptEnable)
 768              		.loc 1 566 0
 769 0002 CB07     		lsls	r3, r1, #31
 770 0004 06D5     		bpl	.L21
 567:../drivers/fsl_flexio_i2c_master.c ****     {
 568:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_DisableShifterStatusInterrupts(base->flexioBase, 1U << base->shifterIndex[0]);
 771              		.loc 1 568 0
 772 0006 0468     		ldr	r4, [r0]
 773 0008 8379     		ldrb	r3, [r0, #6]
 774 000a 0122     		movs	r2, #1
 775 000c 9A40     		lsls	r2, r2, r3
 776              	.LVL62:
 777              	.LBB88:
 778              	.LBB89:
 510:../drivers/fsl_flexio.h **** }
 779              		.loc 3 510 0
 780 000e 236A     		ldr	r3, [r4, #32]
 781 0010 9343     		bics	r3, r2
 782 0012 2362     		str	r3, [r4, #32]
 783              	.LVL63:
 784              	.L21:
 785              	.LBE89:
 786              	.LBE88:
 569:../drivers/fsl_flexio_i2c_master.c ****     }
 570:../drivers/fsl_flexio_i2c_master.c ****     if (mask & kFLEXIO_I2C_RxFullInterruptEnable)
 787              		.loc 1 570 0
 788 0014 8B07     		lsls	r3, r1, #30
 789 0016 06D5     		bpl	.L20
 571:../drivers/fsl_flexio_i2c_master.c ****     {
 572:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_DisableShifterStatusInterrupts(base->flexioBase, 1U << base->shifterIndex[1]);
 790              		.loc 1 572 0
 791 0018 0168     		ldr	r1, [r0]
 792              	.LVL64:
 793 001a C379     		ldrb	r3, [r0, #7]
 794 001c 0122     		movs	r2, #1
 795 001e 9A40     		lsls	r2, r2, r3
 796              	.LVL65:
 797              	.LBB90:
 798              	.LBB91:
 510:../drivers/fsl_flexio.h **** }
 799              		.loc 3 510 0
 800 0020 0B6A     		ldr	r3, [r1, #32]
 801 0022 9343     		bics	r3, r2
 802 0024 0B62     		str	r3, [r1, #32]
 803              	.LVL66:
 804              	.L20:
 805              	.LBE91:
 806              	.LBE90:
 573:../drivers/fsl_flexio_i2c_master.c ****     }
 574:../drivers/fsl_flexio_i2c_master.c **** }
 807              		.loc 1 574 0
 808              		@ sp needed
 809 0026 10BD     		pop	{r4, pc}
 810              		.cfi_endproc
 811              	.LFE80:
 813              		.section	.text.FLEXIO_I2C_MasterTransferComplete,"ax",%progbits
 814              		.align	1
 815              		.syntax unified
 816              		.code	16
 817              		.thumb_func
 818              		.fpu softvfp
 820              	FLEXIO_I2C_MasterTransferComplete:
 821              	.LFB73:
 366:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterDisableInterrupts(base, kFLEXIO_I2C_TxEmptyInterruptEnable | kFLEXIO_I2C_RxFul
 822              		.loc 1 366 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              	.LVL67:
 827 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 828              		.cfi_def_cfa_offset 24
 829              		.cfi_offset 3, -24
 830              		.cfi_offset 4, -20
 831              		.cfi_offset 5, -16
 832              		.cfi_offset 6, -12
 833              		.cfi_offset 7, -8
 834              		.cfi_offset 14, -4
 835 0002 0600     		movs	r6, r0
 836 0004 0C00     		movs	r4, r1
 837 0006 1700     		movs	r7, r2
 367:../drivers/fsl_flexio_i2c_master.c **** 
 838              		.loc 1 367 0
 839 0008 0321     		movs	r1, #3
 840              	.LVL68:
 841 000a FFF7FEFF 		bl	FLEXIO_I2C_MasterDisableInterrupts
 842              	.LVL69:
 369:../drivers/fsl_flexio_i2c_master.c ****     {
 843              		.loc 1 369 0
 844 000e 256A     		ldr	r5, [r4, #32]
 845 0010 002D     		cmp	r5, #0
 846 0012 04D0     		beq	.L23
 371:../drivers/fsl_flexio_i2c_master.c ****     }
 847              		.loc 1 371 0
 848 0014 636A     		ldr	r3, [r4, #36]
 849 0016 3A00     		movs	r2, r7
 850 0018 2100     		movs	r1, r4
 851 001a 3000     		movs	r0, r6
 852 001c A847     		blx	r5
 853              	.LVL70:
 854              	.L23:
 373:../drivers/fsl_flexio_i2c_master.c **** 
 855              		.loc 1 373 0
 856              		@ sp needed
 857              	.LVL71:
 858              	.LVL72:
 859              	.LVL73:
 860 001e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 861              		.cfi_endproc
 862              	.LFE73:
 864              		.section	.text.FLEXIO_I2C_MasterSetBaudRate,"ax",%progbits
 865              		.align	1
 866              		.global	FLEXIO_I2C_MasterSetBaudRate
 867              		.syntax unified
 868              		.code	16
 869              		.thumb_func
 870              		.fpu softvfp
 872              	FLEXIO_I2C_MasterSetBaudRate:
 873              	.LFB81:
 575:../drivers/fsl_flexio_i2c_master.c **** 
 576:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterSetBaudRate(FLEXIO_I2C_Type *base, uint32_t baudRate_Bps, uint32_t srcClock_H
 577:../drivers/fsl_flexio_i2c_master.c **** {
 874              		.loc 1 577 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              	.LVL74:
 879 0000 70B5     		push	{r4, r5, r6, lr}
 880              		.cfi_def_cfa_offset 16
 881              		.cfi_offset 4, -16
 882              		.cfi_offset 5, -12
 883              		.cfi_offset 6, -8
 884              		.cfi_offset 14, -4
 885 0002 0500     		movs	r5, r0
 886              	.LVL75:
 578:../drivers/fsl_flexio_i2c_master.c ****     uint16_t timerDiv = 0;
 579:../drivers/fsl_flexio_i2c_master.c ****     uint16_t timerCmp = 0;
 580:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_Type *flexioBase = base->flexioBase;
 887              		.loc 1 580 0
 888 0004 0468     		ldr	r4, [r0]
 889              	.LVL76:
 581:../drivers/fsl_flexio_i2c_master.c **** 
 582:../drivers/fsl_flexio_i2c_master.c ****     /* Set TIMCMP[7:0] = (baud rate divider / 2) - 1.*/
 583:../drivers/fsl_flexio_i2c_master.c ****     timerDiv = srcClock_Hz / baudRate_Bps;
 890              		.loc 1 583 0
 891 0006 1000     		movs	r0, r2
 892              	.LVL77:
 893 0008 FFF7FEFF 		bl	__aeabi_uidiv
 894              	.LVL78:
 895 000c 80B2     		uxth	r0, r0
 896              	.LVL79:
 584:../drivers/fsl_flexio_i2c_master.c ****     timerDiv = timerDiv / 2 - 1U;
 897              		.loc 1 584 0
 898 000e 4008     		lsrs	r0, r0, #1
 899              	.LVL80:
 900 0010 0138     		subs	r0, r0, #1
 901 0012 80B2     		uxth	r0, r0
 902              	.LVL81:
 585:../drivers/fsl_flexio_i2c_master.c **** 
 586:../drivers/fsl_flexio_i2c_master.c ****     timerCmp = flexioBase->TIMCMP[base->timerIndex[0]];
 903              		.loc 1 586 0
 904 0014 2B7A     		ldrb	r3, [r5, #8]
 905 0016 4133     		adds	r3, r3, #65
 906 0018 FF33     		adds	r3, r3, #255
 907 001a 9B00     		lsls	r3, r3, #2
 908 001c 1A59     		ldr	r2, [r3, r4]
 909 001e 92B2     		uxth	r2, r2
 910              	.LVL82:
 587:../drivers/fsl_flexio_i2c_master.c ****     timerCmp &= 0xFF00;
 911              		.loc 1 587 0
 912 0020 FF21     		movs	r1, #255
 913 0022 8A43     		bics	r2, r1
 914              	.LVL83:
 588:../drivers/fsl_flexio_i2c_master.c ****     timerCmp |= timerDiv;
 915              		.loc 1 588 0
 916 0024 1043     		orrs	r0, r2
 917              	.LVL84:
 589:../drivers/fsl_flexio_i2c_master.c **** 
 590:../drivers/fsl_flexio_i2c_master.c ****     flexioBase->TIMCMP[base->timerIndex[0]] = timerCmp;
 918              		.loc 1 590 0
 919 0026 1851     		str	r0, [r3, r4]
 591:../drivers/fsl_flexio_i2c_master.c **** }
 920              		.loc 1 591 0
 921              		@ sp needed
 922              	.LVL85:
 923              	.LVL86:
 924 0028 70BD     		pop	{r4, r5, r6, pc}
 925              		.cfi_endproc
 926              	.LFE81:
 928              		.section	.text.FLEXIO_I2C_MasterSetTransferCount,"ax",%progbits
 929              		.align	1
 930              		.global	FLEXIO_I2C_MasterSetTransferCount
 931              		.syntax unified
 932              		.code	16
 933              		.thumb_func
 934              		.fpu softvfp
 936              	FLEXIO_I2C_MasterSetTransferCount:
 937              	.LFB82:
 592:../drivers/fsl_flexio_i2c_master.c **** 
 593:../drivers/fsl_flexio_i2c_master.c **** status_t FLEXIO_I2C_MasterSetTransferCount(FLEXIO_I2C_Type *base, uint8_t count)
 594:../drivers/fsl_flexio_i2c_master.c **** {
 938              		.loc 1 594 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942              	.LVL87:
 943 0000 30B5     		push	{r4, r5, lr}
 944              		.cfi_def_cfa_offset 12
 945              		.cfi_offset 4, -12
 946              		.cfi_offset 5, -8
 947              		.cfi_offset 14, -4
 595:../drivers/fsl_flexio_i2c_master.c ****     if (count > 14U)
 948              		.loc 1 595 0
 949 0002 0E29     		cmp	r1, #14
 950 0004 1CD8     		bhi	.L28
 951              	.LVL88:
 596:../drivers/fsl_flexio_i2c_master.c ****     {
 597:../drivers/fsl_flexio_i2c_master.c ****         return kStatus_InvalidArgument;
 598:../drivers/fsl_flexio_i2c_master.c ****     }
 599:../drivers/fsl_flexio_i2c_master.c **** 
 600:../drivers/fsl_flexio_i2c_master.c ****     uint16_t timerCmp = 0;
 601:../drivers/fsl_flexio_i2c_master.c ****     uint32_t timerConfig = 0;
 602:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_Type *flexioBase = base->flexioBase;
 952              		.loc 1 602 0
 953 0006 0468     		ldr	r4, [r0]
 954              	.LVL89:
 603:../drivers/fsl_flexio_i2c_master.c **** 
 604:../drivers/fsl_flexio_i2c_master.c ****     timerCmp = flexioBase->TIMCMP[base->timerIndex[0]];
 955              		.loc 1 604 0
 956 0008 027A     		ldrb	r2, [r0, #8]
 957 000a 4132     		adds	r2, r2, #65
 958 000c FF32     		adds	r2, r2, #255
 959 000e 9200     		lsls	r2, r2, #2
 960 0010 1359     		ldr	r3, [r2, r4]
 961              	.LVL90:
 605:../drivers/fsl_flexio_i2c_master.c ****     timerCmp &= 0x00FFU;
 962              		.loc 1 605 0
 963 0012 FF25     		movs	r5, #255
 964 0014 1D40     		ands	r5, r3
 965              	.LVL91:
 606:../drivers/fsl_flexio_i2c_master.c ****     timerCmp |= (count * 18 + 1U) << 8U;
 966              		.loc 1 606 0
 967 0016 CB00     		lsls	r3, r1, #3
 968 0018 C918     		adds	r1, r1, r3
 969              	.LVL92:
 970 001a 4B00     		lsls	r3, r1, #1
 971 001c 0133     		adds	r3, r3, #1
 972 001e 1B02     		lsls	r3, r3, #8
 973 0020 9BB2     		uxth	r3, r3
 974 0022 2B43     		orrs	r3, r5
 975              	.LVL93:
 607:../drivers/fsl_flexio_i2c_master.c ****     flexioBase->TIMCMP[base->timerIndex[0]] = timerCmp;
 976              		.loc 1 607 0
 977 0024 1351     		str	r3, [r2, r4]
 608:../drivers/fsl_flexio_i2c_master.c ****     timerConfig = flexioBase->TIMCFG[base->timerIndex[0]];
 978              		.loc 1 608 0
 979 0026 037A     		ldrb	r3, [r0, #8]
 980              	.LVL94:
 981 0028 2133     		adds	r3, r3, #33
 982 002a FF33     		adds	r3, r3, #255
 983 002c 9B00     		lsls	r3, r3, #2
 984 002e 1A59     		ldr	r2, [r3, r4]
 985              	.LVL95:
 609:../drivers/fsl_flexio_i2c_master.c ****     timerConfig &= ~FLEXIO_TIMCFG_TIMDIS_MASK;
 986              		.loc 1 609 0
 987 0030 0449     		ldr	r1, .L29
 988              	.LVL96:
 989 0032 1140     		ands	r1, r2
 990              	.LVL97:
 610:../drivers/fsl_flexio_i2c_master.c ****     timerConfig |= FLEXIO_TIMCFG_TIMDIS(kFLEXIO_TimerDisableOnTimerCompare);
 991              		.loc 1 610 0
 992 0034 8022     		movs	r2, #128
 993 0036 9201     		lsls	r2, r2, #6
 994 0038 0A43     		orrs	r2, r1
 995              	.LVL98:
 611:../drivers/fsl_flexio_i2c_master.c ****     flexioBase->TIMCFG[base->timerIndex[0]] = timerConfig;
 996              		.loc 1 611 0
 997 003a 1A51     		str	r2, [r3, r4]
 612:../drivers/fsl_flexio_i2c_master.c **** 
 613:../drivers/fsl_flexio_i2c_master.c ****     return kStatus_Success;
 998              		.loc 1 613 0
 999 003c 0020     		movs	r0, #0
 1000              	.LVL99:
 1001              	.L26:
 614:../drivers/fsl_flexio_i2c_master.c **** }
 1002              		.loc 1 614 0
 1003              		@ sp needed
 1004 003e 30BD     		pop	{r4, r5, pc}
 1005              	.LVL100:
 1006              	.L28:
 597:../drivers/fsl_flexio_i2c_master.c ****     }
 1007              		.loc 1 597 0
 1008 0040 0420     		movs	r0, #4
 1009              	.LVL101:
 1010 0042 FCE7     		b	.L26
 1011              	.L30:
 1012              		.align	2
 1013              	.L29:
 1014 0044 FF8FFFFF 		.word	-28673
 1015              		.cfi_endproc
 1016              	.LFE82:
 1018              		.section	.text.FLEXIO_I2C_MasterStart,"ax",%progbits
 1019              		.align	1
 1020              		.global	FLEXIO_I2C_MasterStart
 1021              		.syntax unified
 1022              		.code	16
 1023              		.thumb_func
 1024              		.fpu softvfp
 1026              	FLEXIO_I2C_MasterStart:
 1027              	.LFB83:
 615:../drivers/fsl_flexio_i2c_master.c **** 
 616:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterStart(FLEXIO_I2C_Type *base, uint8_t address, flexio_i2c_direction_t directio
 617:../drivers/fsl_flexio_i2c_master.c **** {
 1028              		.loc 1 617 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              		@ link register save eliminated.
 1033              	.LVL102:
 618:../drivers/fsl_flexio_i2c_master.c ****     uint32_t data;
 619:../drivers/fsl_flexio_i2c_master.c **** 
 620:../drivers/fsl_flexio_i2c_master.c ****     data = ((uint32_t)address) << 1U | ((direction == kFLEXIO_I2C_Read) ? 1U : 0U);
 1034              		.loc 1 620 0
 1035 0000 4900     		lsls	r1, r1, #1
 1036              	.LVL103:
 1037 0002 012A     		cmp	r2, #1
 1038 0004 07D0     		beq	.L34
 1039 0006 0023     		movs	r3, #0
 1040              	.L32:
 1041              		.loc 1 620 0 is_stmt 0 discriminator 4
 1042 0008 1943     		orrs	r1, r3
 1043              	.LVL104:
 1044              	.LBB92:
 1045              	.LBB93:
 1046              		.file 4 "../drivers/fsl_flexio_i2c_master.h"
   1:../drivers/fsl_flexio_i2c_master.h **** /*
   2:../drivers/fsl_flexio_i2c_master.h ****  * The Clear BSD License
   3:../drivers/fsl_flexio_i2c_master.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_flexio_i2c_master.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_flexio_i2c_master.h ****  * All rights reserved.
   6:../drivers/fsl_flexio_i2c_master.h ****  *
   7:../drivers/fsl_flexio_i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_flexio_i2c_master.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_flexio_i2c_master.h ****  * that the following conditions are met:
  10:../drivers/fsl_flexio_i2c_master.h ****  *
  11:../drivers/fsl_flexio_i2c_master.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_flexio_i2c_master.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_flexio_i2c_master.h ****  *
  14:../drivers/fsl_flexio_i2c_master.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_flexio_i2c_master.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_flexio_i2c_master.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_flexio_i2c_master.h ****  *
  18:../drivers/fsl_flexio_i2c_master.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_flexio_i2c_master.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_flexio_i2c_master.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_flexio_i2c_master.h ****  *
  22:../drivers/fsl_flexio_i2c_master.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_flexio_i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_flexio_i2c_master.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_flexio_i2c_master.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_flexio_i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_flexio_i2c_master.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_flexio_i2c_master.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_flexio_i2c_master.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_flexio_i2c_master.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_flexio_i2c_master.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_flexio_i2c_master.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_flexio_i2c_master.h ****  */
  34:../drivers/fsl_flexio_i2c_master.h **** #ifndef _FSL_FLEXIO_I2C_MASTER_H_
  35:../drivers/fsl_flexio_i2c_master.h **** #define _FSL_FLEXIO_I2C_MASTER_H_
  36:../drivers/fsl_flexio_i2c_master.h **** 
  37:../drivers/fsl_flexio_i2c_master.h **** #include "fsl_common.h"
  38:../drivers/fsl_flexio_i2c_master.h **** #include "fsl_flexio.h"
  39:../drivers/fsl_flexio_i2c_master.h **** 
  40:../drivers/fsl_flexio_i2c_master.h **** /*!
  41:../drivers/fsl_flexio_i2c_master.h ****  * @addtogroup flexio_i2c_master
  42:../drivers/fsl_flexio_i2c_master.h ****  * @{
  43:../drivers/fsl_flexio_i2c_master.h ****  */
  44:../drivers/fsl_flexio_i2c_master.h **** 
  45:../drivers/fsl_flexio_i2c_master.h **** /*******************************************************************************
  46:../drivers/fsl_flexio_i2c_master.h ****  * Definitions
  47:../drivers/fsl_flexio_i2c_master.h ****  ******************************************************************************/
  48:../drivers/fsl_flexio_i2c_master.h **** 
  49:../drivers/fsl_flexio_i2c_master.h **** /*! @name Driver version */
  50:../drivers/fsl_flexio_i2c_master.h **** /*@{*/
  51:../drivers/fsl_flexio_i2c_master.h **** /*! @brief FlexIO I2C master driver version 2.1.4. */
  52:../drivers/fsl_flexio_i2c_master.h **** #define FSL_FLEXIO_I2C_MASTER_DRIVER_VERSION (MAKE_VERSION(2, 1, 4))
  53:../drivers/fsl_flexio_i2c_master.h **** /*@}*/
  54:../drivers/fsl_flexio_i2c_master.h **** 
  55:../drivers/fsl_flexio_i2c_master.h **** /*! @brief  FlexIO I2C transfer status*/
  56:../drivers/fsl_flexio_i2c_master.h **** enum _flexio_i2c_status
  57:../drivers/fsl_flexio_i2c_master.h **** {
  58:../drivers/fsl_flexio_i2c_master.h ****     kStatus_FLEXIO_I2C_Busy = MAKE_STATUS(kStatusGroup_FLEXIO_I2C, 0), /*!< I2C is busy doing trans
  59:../drivers/fsl_flexio_i2c_master.h ****     kStatus_FLEXIO_I2C_Idle = MAKE_STATUS(kStatusGroup_FLEXIO_I2C, 1), /*!< I2C is busy doing trans
  60:../drivers/fsl_flexio_i2c_master.h ****     kStatus_FLEXIO_I2C_Nak = MAKE_STATUS(kStatusGroup_FLEXIO_I2C, 2),  /*!< NAK received during tra
  61:../drivers/fsl_flexio_i2c_master.h **** };
  62:../drivers/fsl_flexio_i2c_master.h **** 
  63:../drivers/fsl_flexio_i2c_master.h **** /*! @brief Define FlexIO I2C master interrupt mask. */
  64:../drivers/fsl_flexio_i2c_master.h **** enum _flexio_i2c_master_interrupt
  65:../drivers/fsl_flexio_i2c_master.h **** {
  66:../drivers/fsl_flexio_i2c_master.h ****     kFLEXIO_I2C_TxEmptyInterruptEnable = 0x1U, /*!< Tx buffer empty interrupt enable. */
  67:../drivers/fsl_flexio_i2c_master.h ****     kFLEXIO_I2C_RxFullInterruptEnable = 0x2U,  /*!< Rx buffer full interrupt enable. */
  68:../drivers/fsl_flexio_i2c_master.h **** };
  69:../drivers/fsl_flexio_i2c_master.h **** 
  70:../drivers/fsl_flexio_i2c_master.h **** /*! @brief Define FlexIO I2C master status mask. */
  71:../drivers/fsl_flexio_i2c_master.h **** enum _flexio_i2c_master_status_flags
  72:../drivers/fsl_flexio_i2c_master.h **** {
  73:../drivers/fsl_flexio_i2c_master.h ****     kFLEXIO_I2C_TxEmptyFlag = 0x1U,    /*!< Tx shifter empty flag. */
  74:../drivers/fsl_flexio_i2c_master.h ****     kFLEXIO_I2C_RxFullFlag = 0x2U,     /*!< Rx shifter full/Transfer complete flag. */
  75:../drivers/fsl_flexio_i2c_master.h ****     kFLEXIO_I2C_ReceiveNakFlag = 0x4U, /*!< Receive NAK flag. */
  76:../drivers/fsl_flexio_i2c_master.h **** };
  77:../drivers/fsl_flexio_i2c_master.h **** 
  78:../drivers/fsl_flexio_i2c_master.h **** /*! @brief Direction of master transfer.*/
  79:../drivers/fsl_flexio_i2c_master.h **** typedef enum _flexio_i2c_direction
  80:../drivers/fsl_flexio_i2c_master.h **** {
  81:../drivers/fsl_flexio_i2c_master.h ****     kFLEXIO_I2C_Write = 0x0U, /*!< Master send to slave. */
  82:../drivers/fsl_flexio_i2c_master.h ****     kFLEXIO_I2C_Read = 0x1U,  /*!< Master receive from slave. */
  83:../drivers/fsl_flexio_i2c_master.h **** } flexio_i2c_direction_t;
  84:../drivers/fsl_flexio_i2c_master.h **** 
  85:../drivers/fsl_flexio_i2c_master.h **** /*! @brief Define FlexIO I2C master access structure typedef. */
  86:../drivers/fsl_flexio_i2c_master.h **** typedef struct _flexio_i2c_type
  87:../drivers/fsl_flexio_i2c_master.h **** {
  88:../drivers/fsl_flexio_i2c_master.h ****     FLEXIO_Type *flexioBase; /*!< FlexIO base pointer. */
  89:../drivers/fsl_flexio_i2c_master.h ****     uint8_t SDAPinIndex;     /*!< Pin select for I2C SDA. */
  90:../drivers/fsl_flexio_i2c_master.h ****     uint8_t SCLPinIndex;     /*!< Pin select for I2C SCL. */
  91:../drivers/fsl_flexio_i2c_master.h ****     uint8_t shifterIndex[2]; /*!< Shifter index used in FlexIO I2C. */
  92:../drivers/fsl_flexio_i2c_master.h ****     uint8_t timerIndex[2];   /*!< Timer index used in FlexIO I2C. */
  93:../drivers/fsl_flexio_i2c_master.h **** } FLEXIO_I2C_Type;
  94:../drivers/fsl_flexio_i2c_master.h **** 
  95:../drivers/fsl_flexio_i2c_master.h **** /*! @brief Define FlexIO I2C master user configuration structure. */
  96:../drivers/fsl_flexio_i2c_master.h **** typedef struct _flexio_i2c_master_config
  97:../drivers/fsl_flexio_i2c_master.h **** {
  98:../drivers/fsl_flexio_i2c_master.h ****     bool enableMaster;     /*!< Enables the FlexIO I2C peripheral at initialization time. */
  99:../drivers/fsl_flexio_i2c_master.h ****     bool enableInDoze;     /*!< Enable/disable FlexIO operation in doze mode. */
 100:../drivers/fsl_flexio_i2c_master.h ****     bool enableInDebug;    /*!< Enable/disable FlexIO operation in debug mode. */
 101:../drivers/fsl_flexio_i2c_master.h ****     bool enableFastAccess; /*!< Enable/disable fast access to FlexIO registers, fast access require
 102:../drivers/fsl_flexio_i2c_master.h ****                            the FlexIO clock to be at least twice the frequency of the bus clock. */
 103:../drivers/fsl_flexio_i2c_master.h ****     uint32_t baudRate_Bps; /*!< Baud rate in Bps. */
 104:../drivers/fsl_flexio_i2c_master.h **** } flexio_i2c_master_config_t;
 105:../drivers/fsl_flexio_i2c_master.h **** 
 106:../drivers/fsl_flexio_i2c_master.h **** /*! @brief Define FlexIO I2C master transfer structure. */
 107:../drivers/fsl_flexio_i2c_master.h **** typedef struct _flexio_i2c_master_transfer
 108:../drivers/fsl_flexio_i2c_master.h **** {
 109:../drivers/fsl_flexio_i2c_master.h ****     uint32_t flags;                   /*!< Transfer flag which controls the transfer, reserved for 
 110:../drivers/fsl_flexio_i2c_master.h ****     uint8_t slaveAddress;             /*!< 7-bit slave address. */
 111:../drivers/fsl_flexio_i2c_master.h ****     flexio_i2c_direction_t direction; /*!< Transfer direction, read or write. */
 112:../drivers/fsl_flexio_i2c_master.h ****     uint32_t subaddress;              /*!< Sub address. Transferred MSB first. */
 113:../drivers/fsl_flexio_i2c_master.h ****     uint8_t subaddressSize;           /*!< Size of command buffer. */
 114:../drivers/fsl_flexio_i2c_master.h ****     uint8_t volatile *data;           /*!< Transfer buffer. */
 115:../drivers/fsl_flexio_i2c_master.h ****     volatile size_t dataSize;         /*!< Transfer size. */
 116:../drivers/fsl_flexio_i2c_master.h **** } flexio_i2c_master_transfer_t;
 117:../drivers/fsl_flexio_i2c_master.h **** 
 118:../drivers/fsl_flexio_i2c_master.h **** /*! @brief FlexIO I2C master handle typedef. */
 119:../drivers/fsl_flexio_i2c_master.h **** typedef struct _flexio_i2c_master_handle flexio_i2c_master_handle_t;
 120:../drivers/fsl_flexio_i2c_master.h **** 
 121:../drivers/fsl_flexio_i2c_master.h **** /*! @brief FlexIO I2C master transfer callback typedef. */
 122:../drivers/fsl_flexio_i2c_master.h **** typedef void (*flexio_i2c_master_transfer_callback_t)(FLEXIO_I2C_Type *base,
 123:../drivers/fsl_flexio_i2c_master.h ****                                                       flexio_i2c_master_handle_t *handle,
 124:../drivers/fsl_flexio_i2c_master.h ****                                                       status_t status,
 125:../drivers/fsl_flexio_i2c_master.h ****                                                       void *userData);
 126:../drivers/fsl_flexio_i2c_master.h **** 
 127:../drivers/fsl_flexio_i2c_master.h **** /*! @brief Define FlexIO I2C master handle structure. */
 128:../drivers/fsl_flexio_i2c_master.h **** struct _flexio_i2c_master_handle
 129:../drivers/fsl_flexio_i2c_master.h **** {
 130:../drivers/fsl_flexio_i2c_master.h ****     flexio_i2c_master_transfer_t transfer;                    /*!< FlexIO I2C master transfer copy.
 131:../drivers/fsl_flexio_i2c_master.h ****     size_t transferSize;                                      /*!< Total bytes to be transferred. *
 132:../drivers/fsl_flexio_i2c_master.h ****     uint8_t state;                                            /*!< Transfer state maintained during
 133:../drivers/fsl_flexio_i2c_master.h ****     flexio_i2c_master_transfer_callback_t completionCallback; /*!< Callback function called at tran
 134:../drivers/fsl_flexio_i2c_master.h ****                                                               /*!< Callback function called at tran
 135:../drivers/fsl_flexio_i2c_master.h ****     void *userData;                                           /*!< Callback parameter passed to cal
 136:../drivers/fsl_flexio_i2c_master.h **** };
 137:../drivers/fsl_flexio_i2c_master.h **** 
 138:../drivers/fsl_flexio_i2c_master.h **** /*******************************************************************************
 139:../drivers/fsl_flexio_i2c_master.h ****  * API
 140:../drivers/fsl_flexio_i2c_master.h ****  ******************************************************************************/
 141:../drivers/fsl_flexio_i2c_master.h **** 
 142:../drivers/fsl_flexio_i2c_master.h **** #if defined(__cplusplus)
 143:../drivers/fsl_flexio_i2c_master.h **** extern "C" {
 144:../drivers/fsl_flexio_i2c_master.h **** #endif /*_cplusplus*/
 145:../drivers/fsl_flexio_i2c_master.h **** 
 146:../drivers/fsl_flexio_i2c_master.h **** /*!
 147:../drivers/fsl_flexio_i2c_master.h ****  * @name Initialization and deinitialization
 148:../drivers/fsl_flexio_i2c_master.h ****  * @{
 149:../drivers/fsl_flexio_i2c_master.h ****  */
 150:../drivers/fsl_flexio_i2c_master.h **** 
 151:../drivers/fsl_flexio_i2c_master.h **** /*!
 152:../drivers/fsl_flexio_i2c_master.h ****  * @brief Ungates the FlexIO clock, resets the FlexIO module, and configures the FlexIO I2C
 153:../drivers/fsl_flexio_i2c_master.h ****  * hardware configuration.
 154:../drivers/fsl_flexio_i2c_master.h ****  *
 155:../drivers/fsl_flexio_i2c_master.h ****  * Example
 156:../drivers/fsl_flexio_i2c_master.h ****    @code
 157:../drivers/fsl_flexio_i2c_master.h ****    FLEXIO_I2C_Type base = {
 158:../drivers/fsl_flexio_i2c_master.h ****    .flexioBase = FLEXIO,
 159:../drivers/fsl_flexio_i2c_master.h ****    .SDAPinIndex = 0,
 160:../drivers/fsl_flexio_i2c_master.h ****    .SCLPinIndex = 1,
 161:../drivers/fsl_flexio_i2c_master.h ****    .shifterIndex = {0,1},
 162:../drivers/fsl_flexio_i2c_master.h ****    .timerIndex = {0,1}
 163:../drivers/fsl_flexio_i2c_master.h ****    };
 164:../drivers/fsl_flexio_i2c_master.h ****    flexio_i2c_master_config_t config = {
 165:../drivers/fsl_flexio_i2c_master.h ****    .enableInDoze = false,
 166:../drivers/fsl_flexio_i2c_master.h ****    .enableInDebug = true,
 167:../drivers/fsl_flexio_i2c_master.h ****    .enableFastAccess = false,
 168:../drivers/fsl_flexio_i2c_master.h ****    .baudRate_Bps = 100000
 169:../drivers/fsl_flexio_i2c_master.h ****    };
 170:../drivers/fsl_flexio_i2c_master.h ****    FLEXIO_I2C_MasterInit(base, &config, srcClock_Hz);
 171:../drivers/fsl_flexio_i2c_master.h ****    @endcode
 172:../drivers/fsl_flexio_i2c_master.h ****  *
 173:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 174:../drivers/fsl_flexio_i2c_master.h ****  * @param masterConfig Pointer to flexio_i2c_master_config_t structure.
 175:../drivers/fsl_flexio_i2c_master.h ****  * @param srcClock_Hz FlexIO source clock in Hz.
 176:../drivers/fsl_flexio_i2c_master.h ****  * @retval kStatus_Success Initialization successful
 177:../drivers/fsl_flexio_i2c_master.h ****  * @retval kStatus_InvalidArgument The source clock exceed upper range limitation
 178:../drivers/fsl_flexio_i2c_master.h **** */
 179:../drivers/fsl_flexio_i2c_master.h **** status_t FLEXIO_I2C_MasterInit(FLEXIO_I2C_Type *base, flexio_i2c_master_config_t *masterConfig, uin
 180:../drivers/fsl_flexio_i2c_master.h **** 
 181:../drivers/fsl_flexio_i2c_master.h **** /*!
 182:../drivers/fsl_flexio_i2c_master.h ****  * @brief De-initializes the FlexIO I2C master peripheral. Calling this API Resets the FlexIO I2C m
 183:../drivers/fsl_flexio_i2c_master.h ****  * shifer and timer config, module can't work unless the FLEXIO_I2C_MasterInit is called.
 184:../drivers/fsl_flexio_i2c_master.h ****  *
 185:../drivers/fsl_flexio_i2c_master.h ****  * @param base pointer to FLEXIO_I2C_Type structure.
 186:../drivers/fsl_flexio_i2c_master.h ****  */
 187:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterDeinit(FLEXIO_I2C_Type *base);
 188:../drivers/fsl_flexio_i2c_master.h **** 
 189:../drivers/fsl_flexio_i2c_master.h **** /*!
 190:../drivers/fsl_flexio_i2c_master.h ****  * @brief Gets the default configuration to configure the FlexIO module. The configuration
 191:../drivers/fsl_flexio_i2c_master.h ****  * can be used directly for calling the FLEXIO_I2C_MasterInit().
 192:../drivers/fsl_flexio_i2c_master.h ****  *
 193:../drivers/fsl_flexio_i2c_master.h ****  * Example:
 194:../drivers/fsl_flexio_i2c_master.h ****    @code
 195:../drivers/fsl_flexio_i2c_master.h ****    flexio_i2c_master_config_t config;
 196:../drivers/fsl_flexio_i2c_master.h ****    FLEXIO_I2C_MasterGetDefaultConfig(&config);
 197:../drivers/fsl_flexio_i2c_master.h ****    @endcode
 198:../drivers/fsl_flexio_i2c_master.h ****  * @param masterConfig Pointer to flexio_i2c_master_config_t structure.
 199:../drivers/fsl_flexio_i2c_master.h **** */
 200:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterGetDefaultConfig(flexio_i2c_master_config_t *masterConfig);
 201:../drivers/fsl_flexio_i2c_master.h **** 
 202:../drivers/fsl_flexio_i2c_master.h **** /*!
 203:../drivers/fsl_flexio_i2c_master.h ****  * @brief Enables/disables the FlexIO module operation.
 204:../drivers/fsl_flexio_i2c_master.h ****  *
 205:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 206:../drivers/fsl_flexio_i2c_master.h ****  * @param enable Pass true to enable module, false does not have any effect.
 207:../drivers/fsl_flexio_i2c_master.h **** */
 208:../drivers/fsl_flexio_i2c_master.h **** static inline void FLEXIO_I2C_MasterEnable(FLEXIO_I2C_Type *base, bool enable)
 209:../drivers/fsl_flexio_i2c_master.h **** {
 210:../drivers/fsl_flexio_i2c_master.h ****     if (enable)
 211:../drivers/fsl_flexio_i2c_master.h ****     {
 212:../drivers/fsl_flexio_i2c_master.h ****         base->flexioBase->CTRL |= FLEXIO_CTRL_FLEXEN_MASK;
 213:../drivers/fsl_flexio_i2c_master.h ****     }
 214:../drivers/fsl_flexio_i2c_master.h **** }
 215:../drivers/fsl_flexio_i2c_master.h **** 
 216:../drivers/fsl_flexio_i2c_master.h **** /* @} */
 217:../drivers/fsl_flexio_i2c_master.h **** 
 218:../drivers/fsl_flexio_i2c_master.h **** /*!
 219:../drivers/fsl_flexio_i2c_master.h ****  * @name Status
 220:../drivers/fsl_flexio_i2c_master.h ****  * @{
 221:../drivers/fsl_flexio_i2c_master.h ****  */
 222:../drivers/fsl_flexio_i2c_master.h **** 
 223:../drivers/fsl_flexio_i2c_master.h **** /*!
 224:../drivers/fsl_flexio_i2c_master.h ****  * @brief Gets the FlexIO I2C master status flags.
 225:../drivers/fsl_flexio_i2c_master.h ****  *
 226:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure
 227:../drivers/fsl_flexio_i2c_master.h ****  * @return Status flag, use status flag to AND #_flexio_i2c_master_status_flags can get the related
 228:../drivers/fsl_flexio_i2c_master.h **** */
 229:../drivers/fsl_flexio_i2c_master.h **** 
 230:../drivers/fsl_flexio_i2c_master.h **** uint32_t FLEXIO_I2C_MasterGetStatusFlags(FLEXIO_I2C_Type *base);
 231:../drivers/fsl_flexio_i2c_master.h **** 
 232:../drivers/fsl_flexio_i2c_master.h **** /*!
 233:../drivers/fsl_flexio_i2c_master.h ****  * @brief Clears the FlexIO I2C master status flags.
 234:../drivers/fsl_flexio_i2c_master.h ****  *
 235:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 236:../drivers/fsl_flexio_i2c_master.h ****  * @param mask Status flag.
 237:../drivers/fsl_flexio_i2c_master.h ****  *      The parameter can be any combination of the following values:
 238:../drivers/fsl_flexio_i2c_master.h ****  *          @arg kFLEXIO_I2C_RxFullFlag
 239:../drivers/fsl_flexio_i2c_master.h ****  *          @arg kFLEXIO_I2C_ReceiveNakFlag
 240:../drivers/fsl_flexio_i2c_master.h **** */
 241:../drivers/fsl_flexio_i2c_master.h **** 
 242:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterClearStatusFlags(FLEXIO_I2C_Type *base, uint32_t mask);
 243:../drivers/fsl_flexio_i2c_master.h **** 
 244:../drivers/fsl_flexio_i2c_master.h **** /*@}*/
 245:../drivers/fsl_flexio_i2c_master.h **** 
 246:../drivers/fsl_flexio_i2c_master.h **** /*!
 247:../drivers/fsl_flexio_i2c_master.h ****  * @name Interrupts
 248:../drivers/fsl_flexio_i2c_master.h ****  * @{
 249:../drivers/fsl_flexio_i2c_master.h ****  */
 250:../drivers/fsl_flexio_i2c_master.h **** 
 251:../drivers/fsl_flexio_i2c_master.h **** /*!
 252:../drivers/fsl_flexio_i2c_master.h ****  * @brief Enables the FlexIO i2c master interrupt requests.
 253:../drivers/fsl_flexio_i2c_master.h ****  *
 254:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 255:../drivers/fsl_flexio_i2c_master.h ****  * @param mask Interrupt source.
 256:../drivers/fsl_flexio_i2c_master.h ****  *     Currently only one interrupt request source:
 257:../drivers/fsl_flexio_i2c_master.h ****  *     @arg kFLEXIO_I2C_TransferCompleteInterruptEnable
 258:../drivers/fsl_flexio_i2c_master.h ****  */
 259:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterEnableInterrupts(FLEXIO_I2C_Type *base, uint32_t mask);
 260:../drivers/fsl_flexio_i2c_master.h **** 
 261:../drivers/fsl_flexio_i2c_master.h **** /*!
 262:../drivers/fsl_flexio_i2c_master.h ****  * @brief Disables the FlexIO I2C master interrupt requests.
 263:../drivers/fsl_flexio_i2c_master.h ****  *
 264:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 265:../drivers/fsl_flexio_i2c_master.h ****  * @param mask Interrupt source.
 266:../drivers/fsl_flexio_i2c_master.h ****  */
 267:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterDisableInterrupts(FLEXIO_I2C_Type *base, uint32_t mask);
 268:../drivers/fsl_flexio_i2c_master.h **** 
 269:../drivers/fsl_flexio_i2c_master.h **** /*@}*/
 270:../drivers/fsl_flexio_i2c_master.h **** 
 271:../drivers/fsl_flexio_i2c_master.h **** /*!
 272:../drivers/fsl_flexio_i2c_master.h ****  * @name Bus Operations
 273:../drivers/fsl_flexio_i2c_master.h ****  * @{
 274:../drivers/fsl_flexio_i2c_master.h ****  */
 275:../drivers/fsl_flexio_i2c_master.h **** 
 276:../drivers/fsl_flexio_i2c_master.h **** /*!
 277:../drivers/fsl_flexio_i2c_master.h ****  * @brief Sets the FlexIO I2C master transfer baudrate.
 278:../drivers/fsl_flexio_i2c_master.h ****  *
 279:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure
 280:../drivers/fsl_flexio_i2c_master.h ****  * @param baudRate_Bps the baud rate value in HZ
 281:../drivers/fsl_flexio_i2c_master.h ****  * @param srcClock_Hz source clock in HZ
 282:../drivers/fsl_flexio_i2c_master.h ****  */
 283:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterSetBaudRate(FLEXIO_I2C_Type *base, uint32_t baudRate_Bps, uint32_t srcClock_H
 284:../drivers/fsl_flexio_i2c_master.h **** 
 285:../drivers/fsl_flexio_i2c_master.h **** /*!
 286:../drivers/fsl_flexio_i2c_master.h ****  * @brief Sends START + 7-bit address to the bus.
 287:../drivers/fsl_flexio_i2c_master.h ****  *
 288:../drivers/fsl_flexio_i2c_master.h ****  * @note This API should be called when the transfer configuration is ready to send a START signal
 289:../drivers/fsl_flexio_i2c_master.h ****  * and 7-bit address to the bus. This is a non-blocking API, which returns directly after the addre
 290:../drivers/fsl_flexio_i2c_master.h ****  * is put into the data register but the address transfer is not finished on the bus. Ensure that
 291:../drivers/fsl_flexio_i2c_master.h ****  * the kFLEXIO_I2C_RxFullFlag status is asserted before calling this API.
 292:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 293:../drivers/fsl_flexio_i2c_master.h ****  * @param address 7-bit address.
 294:../drivers/fsl_flexio_i2c_master.h ****  * @param direction transfer direction.
 295:../drivers/fsl_flexio_i2c_master.h ****  *     This parameter is one of the values in flexio_i2c_direction_t:
 296:../drivers/fsl_flexio_i2c_master.h ****  *        @arg kFLEXIO_I2C_Write: Transmit
 297:../drivers/fsl_flexio_i2c_master.h ****  *        @arg kFLEXIO_I2C_Read:  Receive
 298:../drivers/fsl_flexio_i2c_master.h ****  */
 299:../drivers/fsl_flexio_i2c_master.h **** 
 300:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterStart(FLEXIO_I2C_Type *base, uint8_t address, flexio_i2c_direction_t directio
 301:../drivers/fsl_flexio_i2c_master.h **** 
 302:../drivers/fsl_flexio_i2c_master.h **** /*!
 303:../drivers/fsl_flexio_i2c_master.h ****  * @brief Sends the stop signal on the bus.
 304:../drivers/fsl_flexio_i2c_master.h ****  *
 305:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 306:../drivers/fsl_flexio_i2c_master.h ****  */
 307:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterStop(FLEXIO_I2C_Type *base);
 308:../drivers/fsl_flexio_i2c_master.h **** 
 309:../drivers/fsl_flexio_i2c_master.h **** /*!
 310:../drivers/fsl_flexio_i2c_master.h ****  * @brief Sends the repeated start signal on the bus.
 311:../drivers/fsl_flexio_i2c_master.h ****  *
 312:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 313:../drivers/fsl_flexio_i2c_master.h ****  */
 314:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterRepeatedStart(FLEXIO_I2C_Type *base);
 315:../drivers/fsl_flexio_i2c_master.h **** 
 316:../drivers/fsl_flexio_i2c_master.h **** /*!
 317:../drivers/fsl_flexio_i2c_master.h ****  * @brief Sends the stop signal when transfer is still on-going.
 318:../drivers/fsl_flexio_i2c_master.h ****  *
 319:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 320:../drivers/fsl_flexio_i2c_master.h ****  */
 321:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterAbortStop(FLEXIO_I2C_Type *base);
 322:../drivers/fsl_flexio_i2c_master.h **** 
 323:../drivers/fsl_flexio_i2c_master.h **** /*!
 324:../drivers/fsl_flexio_i2c_master.h ****  * @brief Configures the sent ACK/NAK for the following byte.
 325:../drivers/fsl_flexio_i2c_master.h ****  *
 326:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 327:../drivers/fsl_flexio_i2c_master.h ****  * @param enable True to configure send ACK, false configure to send NAK.
 328:../drivers/fsl_flexio_i2c_master.h ****  */
 329:../drivers/fsl_flexio_i2c_master.h **** void FLEXIO_I2C_MasterEnableAck(FLEXIO_I2C_Type *base, bool enable);
 330:../drivers/fsl_flexio_i2c_master.h **** 
 331:../drivers/fsl_flexio_i2c_master.h **** /*!
 332:../drivers/fsl_flexio_i2c_master.h ****  * @brief Sets the number of bytes to be transferred from a start signal to a stop signal.
 333:../drivers/fsl_flexio_i2c_master.h ****  *
 334:../drivers/fsl_flexio_i2c_master.h ****  * @note Call this API before a transfer begins because the timer generates a number of clocks acco
 335:../drivers/fsl_flexio_i2c_master.h ****  * to the number of bytes that need to be transferred.
 336:../drivers/fsl_flexio_i2c_master.h ****  *
 337:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 338:../drivers/fsl_flexio_i2c_master.h ****  * @param count Number of bytes need to be transferred from a start signal to a re-start/stop signa
 339:../drivers/fsl_flexio_i2c_master.h ****  * @retval kStatus_Success Successfully configured the count.
 340:../drivers/fsl_flexio_i2c_master.h ****  * @retval kStatus_InvalidArgument Input argument is invalid.
 341:../drivers/fsl_flexio_i2c_master.h **** */
 342:../drivers/fsl_flexio_i2c_master.h **** status_t FLEXIO_I2C_MasterSetTransferCount(FLEXIO_I2C_Type *base, uint8_t count);
 343:../drivers/fsl_flexio_i2c_master.h **** 
 344:../drivers/fsl_flexio_i2c_master.h **** /*!
 345:../drivers/fsl_flexio_i2c_master.h ****  * @brief Writes one byte of data to the I2C bus.
 346:../drivers/fsl_flexio_i2c_master.h ****  *
 347:../drivers/fsl_flexio_i2c_master.h ****  * @note This is a non-blocking API, which returns directly after the data is put into the
 348:../drivers/fsl_flexio_i2c_master.h ****  * data register but the data transfer is not finished on the bus. Ensure that
 349:../drivers/fsl_flexio_i2c_master.h ****  * the TxEmptyFlag is asserted before calling this API.
 350:../drivers/fsl_flexio_i2c_master.h ****  *
 351:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 352:../drivers/fsl_flexio_i2c_master.h ****  * @param data a byte of data.
 353:../drivers/fsl_flexio_i2c_master.h ****  */
 354:../drivers/fsl_flexio_i2c_master.h **** static inline void FLEXIO_I2C_MasterWriteByte(FLEXIO_I2C_Type *base, uint32_t data)
 355:../drivers/fsl_flexio_i2c_master.h **** {
 356:../drivers/fsl_flexio_i2c_master.h ****     base->flexioBase->SHIFTBUFBBS[base->shifterIndex[0]] = data;
 1047              		.loc 4 356 0 is_stmt 1 discriminator 4
 1048 000a 0268     		ldr	r2, [r0]
 1049              	.LVL105:
 1050 000c 8379     		ldrb	r3, [r0, #6]
 1051 000e E033     		adds	r3, r3, #224
 1052 0010 9B00     		lsls	r3, r3, #2
 1053 0012 9950     		str	r1, [r3, r2]
 1054              	.LVL106:
 1055              	.LBE93:
 1056              	.LBE92:
 621:../drivers/fsl_flexio_i2c_master.c **** 
 622:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterWriteByte(base, data);
 623:../drivers/fsl_flexio_i2c_master.c **** }
 1057              		.loc 1 623 0 discriminator 4
 1058              		@ sp needed
 1059 0014 7047     		bx	lr
 1060              	.LVL107:
 1061              	.L34:
 620:../drivers/fsl_flexio_i2c_master.c **** 
 1062              		.loc 1 620 0
 1063 0016 0123     		movs	r3, #1
 1064 0018 F6E7     		b	.L32
 1065              		.cfi_endproc
 1066              	.LFE83:
 1068              		.section	.text.FLEXIO_I2C_MasterTransferInitStateMachine,"ax",%progbits
 1069              		.align	1
 1070              		.syntax unified
 1071              		.code	16
 1072              		.thumb_func
 1073              		.fpu softvfp
 1075              	FLEXIO_I2C_MasterTransferInitStateMachine:
 1076              	.LFB71:
 112:../drivers/fsl_flexio_i2c_master.c ****     bool needRestart;
 1077              		.loc 1 112 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 0
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              	.LVL108:
 1082 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1083              		.cfi_def_cfa_offset 24
 1084              		.cfi_offset 3, -24
 1085              		.cfi_offset 4, -20
 1086              		.cfi_offset 5, -16
 1087              		.cfi_offset 6, -12
 1088              		.cfi_offset 7, -8
 1089              		.cfi_offset 14, -4
 1090 0002 0600     		movs	r6, r0
 1091 0004 0D00     		movs	r5, r1
 117:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.direction = xfer->direction;
 1092              		.loc 1 117 0
 1093 0006 1379     		ldrb	r3, [r2, #4]
 1094 0008 0B71     		strb	r3, [r1, #4]
 118:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.subaddress = xfer->subaddress;
 1095              		.loc 1 118 0
 1096 000a 5379     		ldrb	r3, [r2, #5]
 1097 000c 4B71     		strb	r3, [r1, #5]
 119:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.subaddressSize = xfer->subaddressSize;
 1098              		.loc 1 119 0
 1099 000e 9368     		ldr	r3, [r2, #8]
 1100 0010 8B60     		str	r3, [r1, #8]
 120:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.data = xfer->data;
 1101              		.loc 1 120 0
 1102 0012 137B     		ldrb	r3, [r2, #12]
 1103 0014 0B73     		strb	r3, [r1, #12]
 121:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.dataSize = xfer->dataSize;
 1104              		.loc 1 121 0
 1105 0016 1369     		ldr	r3, [r2, #16]
 1106 0018 0B61     		str	r3, [r1, #16]
 122:../drivers/fsl_flexio_i2c_master.c ****     handle->transfer.flags = xfer->flags;
 1107              		.loc 1 122 0
 1108 001a 5369     		ldr	r3, [r2, #20]
 1109 001c 4B61     		str	r3, [r1, #20]
 123:../drivers/fsl_flexio_i2c_master.c ****     handle->transferSize = xfer->dataSize;
 1110              		.loc 1 123 0
 1111 001e 1368     		ldr	r3, [r2]
 1112 0020 0B60     		str	r3, [r1]
 124:../drivers/fsl_flexio_i2c_master.c **** 
 1113              		.loc 1 124 0
 1114 0022 5369     		ldr	r3, [r2, #20]
 1115 0024 8B61     		str	r3, [r1, #24]
 127:../drivers/fsl_flexio_i2c_master.c **** 
 1116              		.loc 1 127 0
 1117 0026 0123     		movs	r3, #1
 1118 0028 0B77     		strb	r3, [r1, #28]
 130:../drivers/fsl_flexio_i2c_master.c **** 
 1119              		.loc 1 130 0
 1120 002a 0421     		movs	r1, #4
 1121              	.LVL109:
 1122 002c FFF7FEFF 		bl	FLEXIO_I2C_MasterClearStatusFlags
 1123              	.LVL110:
 133:../drivers/fsl_flexio_i2c_master.c **** 
 1124              		.loc 1 133 0
 1125 0030 2B7B     		ldrb	r3, [r5, #12]
 1126 0032 002B     		cmp	r3, #0
 1127 0034 04D0     		beq	.L42
 133:../drivers/fsl_flexio_i2c_master.c **** 
 1128              		.loc 1 133 0 is_stmt 0 discriminator 1
 1129 0036 6A79     		ldrb	r2, [r5, #5]
 1130 0038 012A     		cmp	r2, #1
 1131 003a 23D0     		beq	.L43
 133:../drivers/fsl_flexio_i2c_master.c **** 
 1132              		.loc 1 133 0
 1133 003c 0027     		movs	r7, #0
 1134 003e 00E0     		b	.L36
 1135              	.L42:
 1136 0040 0027     		movs	r7, #0
 1137              	.L36:
 1138              	.LVL111:
 138:../drivers/fsl_flexio_i2c_master.c ****     {
 1139              		.loc 1 138 0 is_stmt 1 discriminator 6
 1140 0042 002F     		cmp	r7, #0
 1141 0044 20D1     		bne	.L44
 140:../drivers/fsl_flexio_i2c_master.c ****     }
 1142              		.loc 1 140 0
 1143 0046 6969     		ldr	r1, [r5, #20]
 1144 0048 0131     		adds	r1, r1, #1
 1145              	.LVL112:
 1146              	.L37:
 143:../drivers/fsl_flexio_i2c_master.c ****     {
 1147              		.loc 1 143 0
 1148 004a 002B     		cmp	r3, #0
 1149 004c 02D0     		beq	.L38
 145:../drivers/fsl_flexio_i2c_master.c ****         /* Next state, send command byte. */
 1150              		.loc 1 145 0
 1151 004e C918     		adds	r1, r1, r3
 1152              	.LVL113:
 147:../drivers/fsl_flexio_i2c_master.c ****     }
 1153              		.loc 1 147 0
 1154 0050 0223     		movs	r3, #2
 1155 0052 2B77     		strb	r3, [r5, #28]
 1156              	.L38:
 151:../drivers/fsl_flexio_i2c_master.c ****     {
 1157              		.loc 1 151 0
 1158 0054 C9B2     		uxtb	r1, r1
 1159              	.LVL114:
 1160 0056 3000     		movs	r0, r6
 1161 0058 FFF7FEFF 		bl	FLEXIO_I2C_MasterSetTransferCount
 1162              	.LVL115:
 1163 005c 041E     		subs	r4, r0, #0
 1164 005e 1BD1     		bne	.L45
 1165              	.L40:
 156:../drivers/fsl_flexio_i2c_master.c ****     {
 1166              		.loc 1 156 0 discriminator 1
 1167 0060 3368     		ldr	r3, [r6]
 1168              	.LVL116:
 1169              	.LBB94:
 1170              	.LBB95:
 580:../drivers/fsl_flexio.h **** }
 1171              		.loc 3 580 0 discriminator 1
 1172 0062 1B69     		ldr	r3, [r3, #16]
 1173              	.LVL117:
 1174 0064 0F22     		movs	r2, #15
 1175 0066 1A40     		ands	r2, r3
 1176              	.LVL118:
 1177              	.LBE95:
 1178              	.LBE94:
 156:../drivers/fsl_flexio_i2c_master.c ****     {
 1179              		.loc 1 156 0 discriminator 1
 1180 0068 B179     		ldrb	r1, [r6, #6]
 1181 006a 0123     		movs	r3, #1
 1182 006c 8B40     		lsls	r3, r3, r1
 1183 006e 1A42     		tst	r2, r3
 1184 0070 F6D0     		beq	.L40
 161:../drivers/fsl_flexio_i2c_master.c ****     {
 1185              		.loc 1 161 0
 1186 0072 002F     		cmp	r7, #0
 1187 0074 0AD1     		bne	.L46
 167:../drivers/fsl_flexio_i2c_master.c ****     }
 1188              		.loc 1 167 0
 1189 0076 6A79     		ldrb	r2, [r5, #5]
 1190 0078 2979     		ldrb	r1, [r5, #4]
 1191 007a 3000     		movs	r0, r6
 1192 007c FFF7FEFF 		bl	FLEXIO_I2C_MasterStart
 1193              	.LVL119:
 1194              	.L35:
 171:../drivers/fsl_flexio_i2c_master.c **** 
 1195              		.loc 1 171 0
 1196 0080 2000     		movs	r0, r4
 1197              		@ sp needed
 1198              	.LVL120:
 1199              	.LVL121:
 1200              	.LVL122:
 1201 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1202              	.LVL123:
 1203              	.L43:
 133:../drivers/fsl_flexio_i2c_master.c **** 
 1204              		.loc 1 133 0
 1205 0084 0127     		movs	r7, #1
 1206 0086 DCE7     		b	.L36
 1207              	.LVL124:
 1208              	.L44:
 136:../drivers/fsl_flexio_i2c_master.c **** 
 1209              		.loc 1 136 0
 1210 0088 0121     		movs	r1, #1
 1211 008a DEE7     		b	.L37
 1212              	.LVL125:
 1213              	.L46:
 163:../drivers/fsl_flexio_i2c_master.c ****     }
 1214              		.loc 1 163 0
 1215 008c 2979     		ldrb	r1, [r5, #4]
 1216 008e 0022     		movs	r2, #0
 1217 0090 3000     		movs	r0, r6
 1218 0092 FFF7FEFF 		bl	FLEXIO_I2C_MasterStart
 1219              	.LVL126:
 1220 0096 F3E7     		b	.L35
 1221              	.L45:
 153:../drivers/fsl_flexio_i2c_master.c ****     }
 1222              		.loc 1 153 0
 1223 0098 0424     		movs	r4, #4
 1224 009a F1E7     		b	.L35
 1225              		.cfi_endproc
 1226              	.LFE71:
 1228              		.section	.text.FLEXIO_I2C_MasterRepeatedStart,"ax",%progbits
 1229              		.align	1
 1230              		.global	FLEXIO_I2C_MasterRepeatedStart
 1231              		.syntax unified
 1232              		.code	16
 1233              		.thumb_func
 1234              		.fpu softvfp
 1236              	FLEXIO_I2C_MasterRepeatedStart:
 1237              	.LFB84:
 624:../drivers/fsl_flexio_i2c_master.c **** 
 625:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterRepeatedStart(FLEXIO_I2C_Type *base)
 626:../drivers/fsl_flexio_i2c_master.c **** {
 1238              		.loc 1 626 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 1243              	.LVL127:
 1244              	.LBB96:
 1245              	.LBB97:
 1246              		.loc 4 356 0
 1247 0000 0268     		ldr	r2, [r0]
 1248 0002 8379     		ldrb	r3, [r0, #6]
 1249 0004 E033     		adds	r3, r3, #224
 1250 0006 9B00     		lsls	r3, r3, #2
 1251 0008 0121     		movs	r1, #1
 1252 000a 4942     		rsbs	r1, r1, #0
 1253 000c 9950     		str	r1, [r3, r2]
 1254              	.LVL128:
 1255              	.LBE97:
 1256              	.LBE96:
 627:../drivers/fsl_flexio_i2c_master.c ****     /* Prepare for RESTART condition, no stop.*/
 628:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterWriteByte(base, 0xFFFFFFFFU);
 629:../drivers/fsl_flexio_i2c_master.c **** }
 1257              		.loc 1 629 0
 1258              		@ sp needed
 1259 000e 7047     		bx	lr
 1260              		.cfi_endproc
 1261              	.LFE84:
 1263              		.section	.text.FLEXIO_I2C_MasterStop,"ax",%progbits
 1264              		.align	1
 1265              		.global	FLEXIO_I2C_MasterStop
 1266              		.syntax unified
 1267              		.code	16
 1268              		.thumb_func
 1269              		.fpu softvfp
 1271              	FLEXIO_I2C_MasterStop:
 1272              	.LFB85:
 630:../drivers/fsl_flexio_i2c_master.c **** 
 631:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterStop(FLEXIO_I2C_Type *base)
 632:../drivers/fsl_flexio_i2c_master.c **** {
 1273              		.loc 1 632 0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277              	.LVL129:
 1278 0000 10B5     		push	{r4, lr}
 1279              		.cfi_def_cfa_offset 8
 1280              		.cfi_offset 4, -8
 1281              		.cfi_offset 14, -4
 1282 0002 0400     		movs	r4, r0
 633:../drivers/fsl_flexio_i2c_master.c ****     /* Prepare normal stop. */
 634:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterSetTransferCount(base, 0x0U);
 1283              		.loc 1 634 0
 1284 0004 0021     		movs	r1, #0
 1285 0006 FFF7FEFF 		bl	FLEXIO_I2C_MasterSetTransferCount
 1286              	.LVL130:
 1287              	.LBB98:
 1288              	.LBB99:
 1289              		.loc 4 356 0
 1290 000a 2268     		ldr	r2, [r4]
 1291 000c A379     		ldrb	r3, [r4, #6]
 1292 000e E033     		adds	r3, r3, #224
 1293 0010 9B00     		lsls	r3, r3, #2
 1294 0012 0021     		movs	r1, #0
 1295 0014 9950     		str	r1, [r3, r2]
 1296              	.LVL131:
 1297              	.LBE99:
 1298              	.LBE98:
 635:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterWriteByte(base, 0x0U);
 636:../drivers/fsl_flexio_i2c_master.c **** }
 1299              		.loc 1 636 0
 1300              		@ sp needed
 1301              	.LVL132:
 1302 0016 10BD     		pop	{r4, pc}
 1303              		.cfi_endproc
 1304              	.LFE85:
 1306              		.section	.text.FLEXIO_I2C_MasterAbortStop,"ax",%progbits
 1307              		.align	1
 1308              		.global	FLEXIO_I2C_MasterAbortStop
 1309              		.syntax unified
 1310              		.code	16
 1311              		.thumb_func
 1312              		.fpu softvfp
 1314              	FLEXIO_I2C_MasterAbortStop:
 1315              	.LFB86:
 637:../drivers/fsl_flexio_i2c_master.c **** 
 638:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterAbortStop(FLEXIO_I2C_Type *base)
 639:../drivers/fsl_flexio_i2c_master.c **** {
 1316              		.loc 1 639 0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320              	.LVL133:
 1321 0000 10B5     		push	{r4, lr}
 1322              		.cfi_def_cfa_offset 8
 1323              		.cfi_offset 4, -8
 1324              		.cfi_offset 14, -4
 640:../drivers/fsl_flexio_i2c_master.c ****     uint32_t tmpConfig;
 641:../drivers/fsl_flexio_i2c_master.c **** 
 642:../drivers/fsl_flexio_i2c_master.c ****     /* Prepare abort stop. */
 643:../drivers/fsl_flexio_i2c_master.c ****     tmpConfig = base->flexioBase->TIMCFG[base->timerIndex[0]];
 1325              		.loc 1 643 0
 1326 0002 0468     		ldr	r4, [r0]
 1327 0004 037A     		ldrb	r3, [r0, #8]
 1328 0006 2133     		adds	r3, r3, #33
 1329 0008 FF33     		adds	r3, r3, #255
 1330 000a 9B00     		lsls	r3, r3, #2
 1331 000c 1A59     		ldr	r2, [r3, r4]
 1332              	.LVL134:
 644:../drivers/fsl_flexio_i2c_master.c ****     tmpConfig &= ~FLEXIO_TIMCFG_TIMDIS_MASK;
 1333              		.loc 1 644 0
 1334 000e 0349     		ldr	r1, .L50
 1335 0010 1140     		ands	r1, r2
 1336              	.LVL135:
 645:../drivers/fsl_flexio_i2c_master.c ****     tmpConfig |= FLEXIO_TIMCFG_TIMDIS(kFLEXIO_TimerDisableOnPinBothEdge);
 1337              		.loc 1 645 0
 1338 0012 8022     		movs	r2, #128
 1339 0014 D201     		lsls	r2, r2, #7
 1340 0016 0A43     		orrs	r2, r1
 1341              	.LVL136:
 646:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->TIMCFG[base->timerIndex[0]] = tmpConfig;
 1342              		.loc 1 646 0
 1343 0018 1A51     		str	r2, [r3, r4]
 647:../drivers/fsl_flexio_i2c_master.c **** }
 1344              		.loc 1 647 0
 1345              		@ sp needed
 1346 001a 10BD     		pop	{r4, pc}
 1347              	.L51:
 1348              		.align	2
 1349              	.L50:
 1350 001c FF8FFFFF 		.word	-28673
 1351              		.cfi_endproc
 1352              	.LFE86:
 1354              		.section	.text.FLEXIO_I2C_MasterEnableAck,"ax",%progbits
 1355              		.align	1
 1356              		.global	FLEXIO_I2C_MasterEnableAck
 1357              		.syntax unified
 1358              		.code	16
 1359              		.thumb_func
 1360              		.fpu softvfp
 1362              	FLEXIO_I2C_MasterEnableAck:
 1363              	.LFB87:
 648:../drivers/fsl_flexio_i2c_master.c **** 
 649:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterEnableAck(FLEXIO_I2C_Type *base, bool enable)
 650:../drivers/fsl_flexio_i2c_master.c **** {
 1364              		.loc 1 650 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 1368              	.LVL137:
 1369 0000 10B5     		push	{r4, lr}
 1370              		.cfi_def_cfa_offset 8
 1371              		.cfi_offset 4, -8
 1372              		.cfi_offset 14, -4
 1373              	.LVL138:
 651:../drivers/fsl_flexio_i2c_master.c ****     uint32_t tmpConfig = 0;
 652:../drivers/fsl_flexio_i2c_master.c **** 
 653:../drivers/fsl_flexio_i2c_master.c ****     tmpConfig = base->flexioBase->SHIFTCFG[base->shifterIndex[0]];
 1374              		.loc 1 653 0
 1375 0002 0468     		ldr	r4, [r0]
 1376 0004 8379     		ldrb	r3, [r0, #6]
 1377 0006 1A00     		movs	r2, r3
 1378 0008 4032     		adds	r2, r2, #64
 1379 000a 9200     		lsls	r2, r2, #2
 1380 000c 1259     		ldr	r2, [r2, r4]
 1381              	.LVL139:
 654:../drivers/fsl_flexio_i2c_master.c ****     tmpConfig &= ~FLEXIO_SHIFTCFG_SSTOP_MASK;
 1382              		.loc 1 654 0
 1383 000e 3020     		movs	r0, #48
 1384              	.LVL140:
 1385 0010 8243     		bics	r2, r0
 1386              	.LVL141:
 655:../drivers/fsl_flexio_i2c_master.c ****     if (enable)
 1387              		.loc 1 655 0
 1388 0012 0029     		cmp	r1, #0
 1389 0014 05D1     		bne	.L55
 656:../drivers/fsl_flexio_i2c_master.c ****     {
 657:../drivers/fsl_flexio_i2c_master.c ****         tmpConfig |= FLEXIO_SHIFTCFG_SSTOP(kFLEXIO_ShifterStopBitLow);
 658:../drivers/fsl_flexio_i2c_master.c ****     }
 659:../drivers/fsl_flexio_i2c_master.c ****     else
 660:../drivers/fsl_flexio_i2c_master.c ****     {
 661:../drivers/fsl_flexio_i2c_master.c ****         tmpConfig |= FLEXIO_SHIFTCFG_SSTOP(kFLEXIO_ShifterStopBitHigh);
 1390              		.loc 1 661 0
 1391 0016 3021     		movs	r1, #48
 1392              	.LVL142:
 1393 0018 0A43     		orrs	r2, r1
 1394              	.LVL143:
 1395              	.L54:
 662:../drivers/fsl_flexio_i2c_master.c ****     }
 663:../drivers/fsl_flexio_i2c_master.c ****     base->flexioBase->SHIFTCFG[base->shifterIndex[0]] = tmpConfig;
 1396              		.loc 1 663 0
 1397 001a 4033     		adds	r3, r3, #64
 1398 001c 9B00     		lsls	r3, r3, #2
 1399 001e 1A51     		str	r2, [r3, r4]
 664:../drivers/fsl_flexio_i2c_master.c **** }
 1400              		.loc 1 664 0
 1401              		@ sp needed
 1402 0020 10BD     		pop	{r4, pc}
 1403              	.LVL144:
 1404              	.L55:
 657:../drivers/fsl_flexio_i2c_master.c ****     }
 1405              		.loc 1 657 0
 1406 0022 2021     		movs	r1, #32
 1407              	.LVL145:
 1408 0024 0A43     		orrs	r2, r1
 1409              	.LVL146:
 1410 0026 F8E7     		b	.L54
 1411              		.cfi_endproc
 1412              	.LFE87:
 1414              		.section	.text.FLEXIO_I2C_MasterTransferRunStateMachine,"ax",%progbits
 1415              		.align	1
 1416              		.syntax unified
 1417              		.code	16
 1418              		.thumb_func
 1419              		.fpu softvfp
 1421              	FLEXIO_I2C_MasterTransferRunStateMachine:
 1422              	.LFB72:
 176:../drivers/fsl_flexio_i2c_master.c ****     if (statusFlags & kFLEXIO_I2C_ReceiveNakFlag)
 1423              		.loc 1 176 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 1427              	.LVL147:
 1428 0000 70B5     		push	{r4, r5, r6, lr}
 1429              		.cfi_def_cfa_offset 16
 1430              		.cfi_offset 4, -16
 1431              		.cfi_offset 5, -12
 1432              		.cfi_offset 6, -8
 1433              		.cfi_offset 14, -4
 1434 0002 0500     		movs	r5, r0
 1435 0004 0C00     		movs	r4, r1
 177:../drivers/fsl_flexio_i2c_master.c ****     {
 1436              		.loc 1 177 0
 1437 0006 5307     		lsls	r3, r2, #29
 1438 0008 0ED5     		bpl	.L57
 180:../drivers/fsl_flexio_i2c_master.c **** 
 1439              		.loc 1 180 0
 1440 000a 0168     		ldr	r1, [r0]
 1441              	.LVL148:
 1442 000c C079     		ldrb	r0, [r0, #7]
 1443              	.LVL149:
 1444 000e 0123     		movs	r3, #1
 1445 0010 8340     		lsls	r3, r3, r0
 1446              	.LVL150:
 1447              	.LBB100:
 1448              	.LBB101:
 1449              		.loc 3 617 0
 1450 0012 4B61     		str	r3, [r1, #20]
 1451              	.LVL151:
 1452              	.LBE101:
 1453              	.LBE100:
 182:../drivers/fsl_flexio_i2c_master.c ****             (!(((handle->state == kFLEXIO_I2C_ReceiveData) || (handle->state == kFLEXIO_I2C_Receive
 1454              		.loc 1 182 0
 1455 0014 237F     		ldrb	r3, [r4, #28]
 1456 0016 032B     		cmp	r3, #3
 1457 0018 3DD0     		beq	.L91
 1458              	.L58:
 183:../drivers/fsl_flexio_i2c_master.c ****                (handle->transfer.dataSize == 1U))))
 1459              		.loc 1 183 0 discriminator 3
 1460 001a 043B     		subs	r3, r3, #4
 1461 001c DBB2     		uxtb	r3, r3
 182:../drivers/fsl_flexio_i2c_master.c ****             (!(((handle->state == kFLEXIO_I2C_ReceiveData) || (handle->state == kFLEXIO_I2C_Receive
 1462              		.loc 1 182 0 discriminator 3
 1463 001e 012B     		cmp	r3, #1
 1464 0020 3DD8     		bhi	.L59
 184:../drivers/fsl_flexio_i2c_master.c ****         {
 1465              		.loc 1 184 0
 1466 0022 6369     		ldr	r3, [r4, #20]
 183:../drivers/fsl_flexio_i2c_master.c ****                (handle->transfer.dataSize == 1U))))
 1467              		.loc 1 183 0
 1468 0024 012B     		cmp	r3, #1
 1469 0026 3AD1     		bne	.L59
 1470              	.L57:
 196:../drivers/fsl_flexio_i2c_master.c ****     {
 1471              		.loc 1 196 0
 1472 0028 237F     		ldrb	r3, [r4, #28]
 1473 002a 012B     		cmp	r3, #1
 1474 002c 43D0     		beq	.L92
 1475              	.L61:
 210:../drivers/fsl_flexio_i2c_master.c ****     {
 1476              		.loc 1 210 0
 1477 002e 0223     		movs	r3, #2
 1478 0030 1340     		ands	r3, r2
 1479 0032 07D0     		beq	.L63
 210:../drivers/fsl_flexio_i2c_master.c ****     {
 1480              		.loc 1 210 0 is_stmt 0 discriminator 1
 1481 0034 217F     		ldrb	r1, [r4, #28]
 1482 0036 0529     		cmp	r1, #5
 1483 0038 04D0     		beq	.L63
 1484              	.LVL152:
 1485              	.LBB102:
 1486              	.LBB103:
 357:../drivers/fsl_flexio_i2c_master.h **** }
 358:../drivers/fsl_flexio_i2c_master.h **** 
 359:../drivers/fsl_flexio_i2c_master.h **** /*!
 360:../drivers/fsl_flexio_i2c_master.h ****  * @brief Reads one byte of data from the I2C bus.
 361:../drivers/fsl_flexio_i2c_master.h ****  *
 362:../drivers/fsl_flexio_i2c_master.h ****  * @note This is a non-blocking API, which returns directly after the data is read from the
 363:../drivers/fsl_flexio_i2c_master.h ****  * data register. Ensure that the data is ready in the register.
 364:../drivers/fsl_flexio_i2c_master.h ****  *
 365:../drivers/fsl_flexio_i2c_master.h ****  * @param base Pointer to FLEXIO_I2C_Type structure.
 366:../drivers/fsl_flexio_i2c_master.h ****  * @return data byte read.
 367:../drivers/fsl_flexio_i2c_master.h ****  */
 368:../drivers/fsl_flexio_i2c_master.h **** static inline uint8_t FLEXIO_I2C_MasterReadByte(FLEXIO_I2C_Type *base)
 369:../drivers/fsl_flexio_i2c_master.h **** {
 370:../drivers/fsl_flexio_i2c_master.h ****     return base->flexioBase->SHIFTBUFBIS[base->shifterIndex[1]];
 1487              		.loc 4 370 0 is_stmt 1
 1488 003a E979     		ldrb	r1, [r5, #7]
 1489 003c A031     		adds	r1, r1, #160
 1490 003e 8900     		lsls	r1, r1, #2
 1491 0040 2868     		ldr	r0, [r5]
 1492 0042 0958     		ldr	r1, [r1, r0]
 1493              	.LVL153:
 1494              	.L63:
 1495              	.LBE103:
 1496              	.LBE102:
 215:../drivers/fsl_flexio_i2c_master.c ****     {
 1497              		.loc 1 215 0
 1498 0044 217F     		ldrb	r1, [r4, #28]
 1499 0046 0329     		cmp	r1, #3
 1500 0048 00D1     		bne	.LCB1328
 1501 004a 90E0     		b	.L64	@long jump
 1502              	.LCB1328:
 1503 004c 3CD9     		bls	.L93
 1504 004e 0429     		cmp	r1, #4
 1505 0050 00D1     		bne	.LCB1332
 1506 0052 B2E0     		b	.L67	@long jump
 1507              	.LCB1332:
 1508 0054 0529     		cmp	r1, #5
 1509 0056 00D0     		beq	.LCB1334
 1510 0058 00E1     		b	.L80	@long jump
 1511              	.LCB1334:
 321:../drivers/fsl_flexio_i2c_master.c ****             {
 1512              		.loc 1 321 0
 1513 005a 002B     		cmp	r3, #0
 1514 005c 00D1     		bne	.LCB1336
 1515 005e EFE0     		b	.L77	@long jump
 1516              	.LCB1336:
 1517              	.LVL154:
 1518              	.LBB104:
 1519              	.LBB105:
 1520              		.loc 4 370 0
 1521 0060 EB79     		ldrb	r3, [r5, #7]
 1522 0062 A033     		adds	r3, r3, #160
 1523 0064 9B00     		lsls	r3, r3, #2
 1524 0066 2A68     		ldr	r2, [r5]
 1525              	.LVL155:
 1526 0068 9B58     		ldr	r3, [r3, r2]
 1527 006a DBB2     		uxtb	r3, r3
 1528              	.LVL156:
 1529              	.LBE105:
 1530              	.LBE104:
 323:../drivers/fsl_flexio_i2c_master.c ****                 handle->transfer.data++;
 1531              		.loc 1 323 0
 1532 006c 2269     		ldr	r2, [r4, #16]
 1533 006e 1370     		strb	r3, [r2]
 324:../drivers/fsl_flexio_i2c_master.c ****                 if (handle->transfer.dataSize--)
 1534              		.loc 1 324 0
 1535 0070 2369     		ldr	r3, [r4, #16]
 1536 0072 0133     		adds	r3, r3, #1
 1537 0074 2361     		str	r3, [r4, #16]
 325:../drivers/fsl_flexio_i2c_master.c ****                 {
 1538              		.loc 1 325 0
 1539 0076 6369     		ldr	r3, [r4, #20]
 1540 0078 5A1E     		subs	r2, r3, #1
 1541 007a 6261     		str	r2, [r4, #20]
 1542 007c 002B     		cmp	r3, #0
 1543 007e 00D1     		bne	.LCB1362
 1544 0080 F8E0     		b	.L87	@long jump
 1545              	.LCB1362:
 327:../drivers/fsl_flexio_i2c_master.c ****                     {
 1546              		.loc 1 327 0
 1547 0082 6369     		ldr	r3, [r4, #20]
 1548 0084 002B     		cmp	r3, #0
 1549 0086 00D1     		bne	.LCB1365
 1550 0088 C1E0     		b	.L94	@long jump
 1551              	.LCB1365:
 1552              	.L78:
 334:../drivers/fsl_flexio_i2c_master.c ****                     {
 1553              		.loc 1 334 0
 1554 008a 6369     		ldr	r3, [r4, #20]
 1555 008c 012B     		cmp	r3, #1
 1556 008e 00D1     		bne	.LCB1369
 1557 0090 C4E0     		b	.L95	@long jump
 1558              	.LCB1369:
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1559              		.loc 1 360 0
 1560 0092 0020     		movs	r0, #0
 1561 0094 0EE0     		b	.L56
 1562              	.LVL157:
 1563              	.L91:
 182:../drivers/fsl_flexio_i2c_master.c ****             (!(((handle->state == kFLEXIO_I2C_ReceiveData) || (handle->state == kFLEXIO_I2C_Receive
 1564              		.loc 1 182 0 discriminator 2
 1565 0096 6169     		ldr	r1, [r4, #20]
 1566 0098 0029     		cmp	r1, #0
 1567 009a C5D0     		beq	.L57
 1568 009c BDE7     		b	.L58
 1569              	.L59:
 1570              	.LVL158:
 1571              	.LBB106:
 1572              	.LBB107:
 1573              		.loc 4 370 0
 1574 009e EB79     		ldrb	r3, [r5, #7]
 1575 00a0 A033     		adds	r3, r3, #160
 1576 00a2 9B00     		lsls	r3, r3, #2
 1577 00a4 2A68     		ldr	r2, [r5]
 1578              	.LVL159:
 1579 00a6 9B58     		ldr	r3, [r3, r2]
 1580              	.LVL160:
 1581              	.LBE107:
 1582              	.LBE106:
 188:../drivers/fsl_flexio_i2c_master.c **** 
 1583              		.loc 1 188 0
 1584 00a8 2800     		movs	r0, r5
 1585 00aa FFF7FEFF 		bl	FLEXIO_I2C_MasterAbortStop
 1586              	.LVL161:
 190:../drivers/fsl_flexio_i2c_master.c **** 
 1587              		.loc 1 190 0
 1588 00ae 0023     		movs	r3, #0
 1589 00b0 2377     		strb	r3, [r4, #28]
 192:../drivers/fsl_flexio_i2c_master.c ****         }
 1590              		.loc 1 192 0
 1591 00b2 7348     		ldr	r0, .L97
 1592              	.L56:
 361:../drivers/fsl_flexio_i2c_master.c **** 
 1593              		.loc 1 361 0
 1594              		@ sp needed
 1595              	.LVL162:
 1596              	.LVL163:
 1597 00b4 70BD     		pop	{r4, r5, r6, pc}
 1598              	.LVL164:
 1599              	.L92:
 198:../drivers/fsl_flexio_i2c_master.c ****         {
 1600              		.loc 1 198 0
 1601 00b6 6379     		ldrb	r3, [r4, #5]
 1602 00b8 002B     		cmp	r3, #0
 1603 00ba 02D1     		bne	.L62
 201:../drivers/fsl_flexio_i2c_master.c ****         }
 1604              		.loc 1 201 0
 1605 00bc 0333     		adds	r3, r3, #3
 1606 00be 2377     		strb	r3, [r4, #28]
 1607 00c0 B5E7     		b	.L61
 1608              	.L62:
 206:../drivers/fsl_flexio_i2c_master.c ****         }
 1609              		.loc 1 206 0
 1610 00c2 0423     		movs	r3, #4
 1611 00c4 2377     		strb	r3, [r4, #28]
 1612 00c6 B2E7     		b	.L61
 1613              	.L93:
 215:../drivers/fsl_flexio_i2c_master.c ****     {
 1614              		.loc 1 215 0
 1615 00c8 0229     		cmp	r1, #2
 1616 00ca 00D0     		beq	.LCB1440
 1617 00cc C6E0     		b	.L80	@long jump
 1618              	.LCB1440:
 218:../drivers/fsl_flexio_i2c_master.c ****             {
 1619              		.loc 1 218 0
 1620 00ce D307     		lsls	r3, r2, #31
 1621 00d0 00D4     		bmi	.LCB1444
 1622 00d2 C5E0     		b	.L81	@long jump
 1623              	.LCB1444:
 220:../drivers/fsl_flexio_i2c_master.c ****                 {
 1624              		.loc 1 220 0
 1625 00d4 237B     		ldrb	r3, [r4, #12]
 1626 00d6 002B     		cmp	r3, #0
 1627 00d8 21D0     		beq	.L69
 222:../drivers/fsl_flexio_i2c_master.c ****                     FLEXIO_I2C_MasterWriteByte(
 1628              		.loc 1 222 0
 1629 00da 013B     		subs	r3, r3, #1
 1630 00dc DBB2     		uxtb	r3, r3
 1631 00de 2373     		strb	r3, [r4, #12]
 224:../drivers/fsl_flexio_i2c_master.c **** 
 1632              		.loc 1 224 0
 1633 00e0 DB00     		lsls	r3, r3, #3
 223:../drivers/fsl_flexio_i2c_master.c ****                         base, ((handle->transfer.subaddress) >> (8 * handle->transfer.subaddressSiz
 1634              		.loc 1 223 0
 1635 00e2 A268     		ldr	r2, [r4, #8]
 1636              	.LVL165:
 1637 00e4 DA40     		lsrs	r2, r2, r3
 1638              	.LVL166:
 1639              	.LBB108:
 1640              	.LBB109:
 356:../drivers/fsl_flexio_i2c_master.h **** }
 1641              		.loc 4 356 0
 1642 00e6 AB79     		ldrb	r3, [r5, #6]
 1643 00e8 E033     		adds	r3, r3, #224
 1644 00ea 9B00     		lsls	r3, r3, #2
 1645 00ec 2968     		ldr	r1, [r5]
 1646 00ee 5A50     		str	r2, [r3, r1]
 1647              	.LVL167:
 1648              	.LBE109:
 1649              	.LBE108:
 226:../drivers/fsl_flexio_i2c_master.c ****                     {
 1650              		.loc 1 226 0
 1651 00f0 237B     		ldrb	r3, [r4, #12]
 1652 00f2 002B     		cmp	r3, #0
 1653 00f4 00D0     		beq	.LCB1472
 1654 00f6 B5E0     		b	.L82	@long jump
 1655              	.LCB1472:
 229:../drivers/fsl_flexio_i2c_master.c ****                         {
 1656              		.loc 1 229 0
 1657 00f8 6379     		ldrb	r3, [r4, #5]
 1658 00fa 012B     		cmp	r3, #1
 1659 00fc 01D0     		beq	.L70
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1660              		.loc 1 360 0
 1661 00fe 0020     		movs	r0, #0
 1662 0100 D8E7     		b	.L56
 1663              	.L70:
 231:../drivers/fsl_flexio_i2c_master.c ****                             {
 1664              		.loc 1 231 0 discriminator 1
 1665 0102 2B68     		ldr	r3, [r5]
 1666              	.LVL168:
 1667              	.LBB110:
 1668              	.LBB111:
 580:../drivers/fsl_flexio.h **** }
 1669              		.loc 3 580 0 discriminator 1
 1670 0104 1B69     		ldr	r3, [r3, #16]
 1671              	.LVL169:
 1672 0106 0F22     		movs	r2, #15
 1673 0108 1A40     		ands	r2, r3
 1674              	.LVL170:
 1675              	.LBE111:
 1676              	.LBE110:
 231:../drivers/fsl_flexio_i2c_master.c ****                             {
 1677              		.loc 1 231 0 discriminator 1
 1678 010a A979     		ldrb	r1, [r5, #6]
 1679 010c 0123     		movs	r3, #1
 1680 010e 8B40     		lsls	r3, r3, r1
 1681 0110 1A42     		tst	r2, r3
 1682 0112 F6D0     		beq	.L70
 234:../drivers/fsl_flexio_i2c_master.c ****                         }
 1683              		.loc 1 234 0
 1684 0114 2800     		movs	r0, r5
 1685 0116 FFF7FEFF 		bl	FLEXIO_I2C_MasterRepeatedStart
 1686              	.LVL171:
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1687              		.loc 1 360 0
 1688 011a 0020     		movs	r0, #0
 1689 011c CAE7     		b	.L56
 1690              	.LVL172:
 1691              	.L69:
 240:../drivers/fsl_flexio_i2c_master.c ****                     {
 1692              		.loc 1 240 0
 1693 011e 6379     		ldrb	r3, [r4, #5]
 1694 0120 002B     		cmp	r3, #0
 1695 0122 15D1     		bne	.L71
 243:../drivers/fsl_flexio_i2c_master.c **** 
 1696              		.loc 1 243 0
 1697 0124 0333     		adds	r3, r3, #3
 1698 0126 2377     		strb	r3, [r4, #28]
 246:../drivers/fsl_flexio_i2c_master.c ****                         {
 1699              		.loc 1 246 0
 1700 0128 6369     		ldr	r3, [r4, #20]
 1701 012a 002B     		cmp	r3, #0
 1702 012c 00D1     		bne	.LCB1515
 1703 012e 9BE0     		b	.L84	@long jump
 1704              	.LCB1515:
 248:../drivers/fsl_flexio_i2c_master.c **** 
 1705              		.loc 1 248 0
 1706 0130 2369     		ldr	r3, [r4, #16]
 1707 0132 1A78     		ldrb	r2, [r3]
 1708              	.LVL173:
 1709 0134 D2B2     		uxtb	r2, r2
 1710              	.LVL174:
 1711              	.LBB112:
 1712              	.LBB113:
 356:../drivers/fsl_flexio_i2c_master.h **** }
 1713              		.loc 4 356 0
 1714 0136 2968     		ldr	r1, [r5]
 1715 0138 AB79     		ldrb	r3, [r5, #6]
 1716 013a E033     		adds	r3, r3, #224
 1717 013c 9B00     		lsls	r3, r3, #2
 1718 013e 5A50     		str	r2, [r3, r1]
 1719              	.LVL175:
 1720              	.LBE113:
 1721              	.LBE112:
 250:../drivers/fsl_flexio_i2c_master.c ****                             handle->transfer.dataSize--;
 1722              		.loc 1 250 0
 1723 0140 2369     		ldr	r3, [r4, #16]
 1724 0142 0133     		adds	r3, r3, #1
 1725 0144 2361     		str	r3, [r4, #16]
 251:../drivers/fsl_flexio_i2c_master.c ****                         }
 1726              		.loc 1 251 0
 1727 0146 6369     		ldr	r3, [r4, #20]
 1728 0148 013B     		subs	r3, r3, #1
 1729 014a 6361     		str	r3, [r4, #20]
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1730              		.loc 1 360 0
 1731 014c 0020     		movs	r0, #0
 1732 014e B1E7     		b	.L56
 1733              	.LVL176:
 1734              	.L71:
 256:../drivers/fsl_flexio_i2c_master.c ****                         FLEXIO_I2C_MasterStart(base, handle->transfer.slaveAddress, kFLEXIO_I2C_Rea
 1735              		.loc 1 256 0
 1736 0150 6169     		ldr	r1, [r4, #20]
 1737 0152 0131     		adds	r1, r1, #1
 1738 0154 C9B2     		uxtb	r1, r1
 1739 0156 2800     		movs	r0, r5
 1740 0158 FFF7FEFF 		bl	FLEXIO_I2C_MasterSetTransferCount
 1741              	.LVL177:
 257:../drivers/fsl_flexio_i2c_master.c **** 
 1742              		.loc 1 257 0
 1743 015c 2179     		ldrb	r1, [r4, #4]
 1744 015e 0122     		movs	r2, #1
 1745 0160 2800     		movs	r0, r5
 1746 0162 FFF7FEFF 		bl	FLEXIO_I2C_MasterStart
 1747              	.LVL178:
 260:../drivers/fsl_flexio_i2c_master.c ****                     }
 1748              		.loc 1 260 0
 1749 0166 0423     		movs	r3, #4
 1750 0168 2377     		strb	r3, [r4, #28]
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1751              		.loc 1 360 0
 1752 016a 0020     		movs	r0, #0
 1753 016c A2E7     		b	.L56
 1754              	.LVL179:
 1755              	.L64:
 268:../drivers/fsl_flexio_i2c_master.c ****             {
 1756              		.loc 1 268 0
 1757 016e D307     		lsls	r3, r2, #31
 1758 0170 7CD5     		bpl	.L85
 271:../drivers/fsl_flexio_i2c_master.c ****                 {
 1759              		.loc 1 271 0
 1760 0172 6369     		ldr	r3, [r4, #20]
 1761 0174 002B     		cmp	r3, #0
 1762 0176 0FD0     		beq	.L72
 273:../drivers/fsl_flexio_i2c_master.c **** 
 1763              		.loc 1 273 0
 1764 0178 2369     		ldr	r3, [r4, #16]
 1765 017a 1A78     		ldrb	r2, [r3]
 1766              	.LVL180:
 1767 017c D2B2     		uxtb	r2, r2
 1768              	.LVL181:
 1769              	.LBB114:
 1770              	.LBB115:
 356:../drivers/fsl_flexio_i2c_master.h **** }
 1771              		.loc 4 356 0
 1772 017e 2968     		ldr	r1, [r5]
 1773 0180 AB79     		ldrb	r3, [r5, #6]
 1774 0182 E033     		adds	r3, r3, #224
 1775 0184 9B00     		lsls	r3, r3, #2
 1776 0186 5A50     		str	r2, [r3, r1]
 1777              	.LVL182:
 1778              	.LBE115:
 1779              	.LBE114:
 275:../drivers/fsl_flexio_i2c_master.c ****                     handle->transfer.dataSize--;
 1780              		.loc 1 275 0
 1781 0188 2369     		ldr	r3, [r4, #16]
 1782 018a 0133     		adds	r3, r3, #1
 1783 018c 2361     		str	r3, [r4, #16]
 276:../drivers/fsl_flexio_i2c_master.c ****                 }
 1784              		.loc 1 276 0
 1785 018e 6369     		ldr	r3, [r4, #20]
 1786 0190 013B     		subs	r3, r3, #1
 1787 0192 6361     		str	r3, [r4, #20]
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1788              		.loc 1 360 0
 1789 0194 0020     		movs	r0, #0
 1790 0196 8DE7     		b	.L56
 1791              	.LVL183:
 1792              	.L72:
 280:../drivers/fsl_flexio_i2c_master.c **** 
 1793              		.loc 1 280 0
 1794 0198 2800     		movs	r0, r5
 1795 019a FFF7FEFF 		bl	FLEXIO_I2C_MasterStop
 1796              	.LVL184:
 1797              	.L73:
 282:../drivers/fsl_flexio_i2c_master.c ****                     {
 1798              		.loc 1 282 0 discriminator 1
 1799 019e 2800     		movs	r0, r5
 1800 01a0 FFF7FEFF 		bl	FLEXIO_I2C_MasterGetStatusFlags
 1801              	.LVL185:
 1802 01a4 8307     		lsls	r3, r0, #30
 1803 01a6 FAD5     		bpl	.L73
 1804              	.LVL186:
 1805              	.LBB116:
 1806              	.LBB117:
 1807              		.loc 4 370 0
 1808 01a8 2A68     		ldr	r2, [r5]
 1809 01aa EB79     		ldrb	r3, [r5, #7]
 1810 01ac A033     		adds	r3, r3, #160
 1811 01ae 9B00     		lsls	r3, r3, #2
 1812 01b0 9B58     		ldr	r3, [r3, r2]
 1813              	.LVL187:
 1814              	.LBE117:
 1815              	.LBE116:
 287:../drivers/fsl_flexio_i2c_master.c ****                 }
 1816              		.loc 1 287 0
 1817 01b2 0023     		movs	r3, #0
 1818 01b4 2377     		strb	r3, [r4, #28]
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1819              		.loc 1 360 0
 1820 01b6 0020     		movs	r0, #0
 1821 01b8 7CE7     		b	.L56
 1822              	.LVL188:
 1823              	.L67:
 293:../drivers/fsl_flexio_i2c_master.c ****             {
 1824              		.loc 1 293 0
 1825 01ba 002B     		cmp	r3, #0
 1826 01bc 1CD0     		beq	.L74
 295:../drivers/fsl_flexio_i2c_master.c ****                 /* Send nak at the last receive byte. */
 1827              		.loc 1 295 0
 1828 01be 0523     		movs	r3, #5
 1829 01c0 2377     		strb	r3, [r4, #28]
 297:../drivers/fsl_flexio_i2c_master.c ****                 {
 1830              		.loc 1 297 0
 1831 01c2 6369     		ldr	r3, [r4, #20]
 1832 01c4 012B     		cmp	r3, #1
 1833 01c6 05D0     		beq	.L96
 307:../drivers/fsl_flexio_i2c_master.c ****                 }
 1834              		.loc 1 307 0
 1835 01c8 0121     		movs	r1, #1
 1836 01ca 2800     		movs	r0, r5
 1837 01cc FFF7FEFF 		bl	FLEXIO_I2C_MasterEnableAck
 1838              	.LVL189:
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1839              		.loc 1 360 0
 1840 01d0 0020     		movs	r0, #0
 1841 01d2 6FE7     		b	.L56
 1842              	.LVL190:
 1843              	.L96:
 299:../drivers/fsl_flexio_i2c_master.c ****                     while (!((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shifter
 1844              		.loc 1 299 0
 1845 01d4 0021     		movs	r1, #0
 1846 01d6 2800     		movs	r0, r5
 1847 01d8 FFF7FEFF 		bl	FLEXIO_I2C_MasterEnableAck
 1848              	.LVL191:
 1849              	.L76:
 300:../drivers/fsl_flexio_i2c_master.c ****                     {
 1850              		.loc 1 300 0 discriminator 1
 1851 01dc 2B68     		ldr	r3, [r5]
 1852              	.LVL192:
 1853              	.LBB118:
 1854              	.LBB119:
 580:../drivers/fsl_flexio.h **** }
 1855              		.loc 3 580 0 discriminator 1
 1856 01de 1B69     		ldr	r3, [r3, #16]
 1857              	.LVL193:
 1858 01e0 0F22     		movs	r2, #15
 1859 01e2 1A40     		ands	r2, r3
 1860              	.LVL194:
 1861              	.LBE119:
 1862              	.LBE118:
 300:../drivers/fsl_flexio_i2c_master.c ****                     {
 1863              		.loc 1 300 0 discriminator 1
 1864 01e4 A979     		ldrb	r1, [r5, #6]
 1865 01e6 0123     		movs	r3, #1
 1866 01e8 8B40     		lsls	r3, r3, r1
 1867 01ea 1A42     		tst	r2, r3
 1868 01ec F6D0     		beq	.L76
 303:../drivers/fsl_flexio_i2c_master.c ****                 }
 1869              		.loc 1 303 0
 1870 01ee 2800     		movs	r0, r5
 1871 01f0 FFF7FEFF 		bl	FLEXIO_I2C_MasterStop
 1872              	.LVL195:
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1873              		.loc 1 360 0
 1874 01f4 0020     		movs	r0, #0
 1875 01f6 5DE7     		b	.L56
 1876              	.LVL196:
 1877              	.L74:
 310:../drivers/fsl_flexio_i2c_master.c ****             {
 1878              		.loc 1 310 0
 1879 01f8 D307     		lsls	r3, r2, #31
 1880 01fa 39D5     		bpl	.L86
 1881              	.LVL197:
 1882              	.LBB120:
 1883              	.LBB121:
 356:../drivers/fsl_flexio_i2c_master.h **** }
 1884              		.loc 4 356 0
 1885 01fc 2A68     		ldr	r2, [r5]
 1886              	.LVL198:
 1887 01fe AB79     		ldrb	r3, [r5, #6]
 1888 0200 E033     		adds	r3, r3, #224
 1889 0202 9B00     		lsls	r3, r3, #2
 1890 0204 0121     		movs	r1, #1
 1891 0206 4942     		rsbs	r1, r1, #0
 1892 0208 9950     		str	r1, [r3, r2]
 1893              	.LBE121:
 1894              	.LBE120:
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1895              		.loc 1 360 0
 1896 020a 0020     		movs	r0, #0
 1897 020c 52E7     		b	.L56
 1898              	.LVL199:
 1899              	.L94:
 329:../drivers/fsl_flexio_i2c_master.c ****                         handle->state = kFLEXIO_I2C_Idle;
 1900              		.loc 1 329 0
 1901 020e 0221     		movs	r1, #2
 1902 0210 2800     		movs	r0, r5
 1903 0212 FFF7FEFF 		bl	FLEXIO_I2C_MasterDisableInterrupts
 1904              	.LVL200:
 330:../drivers/fsl_flexio_i2c_master.c ****                     }
 1905              		.loc 1 330 0
 1906 0216 0023     		movs	r3, #0
 1907 0218 2377     		strb	r3, [r4, #28]
 1908 021a 36E7     		b	.L78
 1909              	.L95:
 336:../drivers/fsl_flexio_i2c_master.c ****                         while (!((FLEXIO_GetShifterStatusFlags(base->flexioBase) & (1U << base->shi
 1910              		.loc 1 336 0
 1911 021c 0021     		movs	r1, #0
 1912 021e 2800     		movs	r0, r5
 1913 0220 FFF7FEFF 		bl	FLEXIO_I2C_MasterEnableAck
 1914              	.LVL201:
 1915              	.L79:
 337:../drivers/fsl_flexio_i2c_master.c ****                         {
 1916              		.loc 1 337 0 discriminator 1
 1917 0224 2B68     		ldr	r3, [r5]
 1918              	.LVL202:
 1919              	.LBB122:
 1920              	.LBB123:
 580:../drivers/fsl_flexio.h **** }
 1921              		.loc 3 580 0 discriminator 1
 1922 0226 1B69     		ldr	r3, [r3, #16]
 1923              	.LVL203:
 1924 0228 0F22     		movs	r2, #15
 1925 022a 1A40     		ands	r2, r3
 1926              	.LVL204:
 1927              	.LBE123:
 1928              	.LBE122:
 337:../drivers/fsl_flexio_i2c_master.c ****                         {
 1929              		.loc 1 337 0 discriminator 1
 1930 022c A979     		ldrb	r1, [r5, #6]
 1931 022e 0123     		movs	r3, #1
 1932 0230 8B40     		lsls	r3, r3, r1
 1933 0232 1A42     		tst	r2, r3
 1934 0234 F6D0     		beq	.L79
 340:../drivers/fsl_flexio_i2c_master.c ****                     }
 1935              		.loc 1 340 0
 1936 0236 2800     		movs	r0, r5
 1937 0238 FFF7FEFF 		bl	FLEXIO_I2C_MasterStop
 1938              	.LVL205:
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1939              		.loc 1 360 0
 1940 023c 0020     		movs	r0, #0
 1941 023e 39E7     		b	.L56
 1942              	.LVL206:
 1943              	.L77:
 344:../drivers/fsl_flexio_i2c_master.c ****             {
 1944              		.loc 1 344 0
 1945 0240 D307     		lsls	r3, r2, #31
 1946 0242 19D5     		bpl	.L89
 346:../drivers/fsl_flexio_i2c_master.c ****                 {
 1947              		.loc 1 346 0
 1948 0244 6369     		ldr	r3, [r4, #20]
 1949 0246 012B     		cmp	r3, #1
 1950 0248 18D9     		bls	.L90
 1951              	.LVL207:
 1952              	.LBB124:
 1953              	.LBB125:
 356:../drivers/fsl_flexio_i2c_master.h **** }
 1954              		.loc 4 356 0
 1955 024a 2A68     		ldr	r2, [r5]
 1956              	.LVL208:
 1957 024c AB79     		ldrb	r3, [r5, #6]
 1958 024e E033     		adds	r3, r3, #224
 1959 0250 9B00     		lsls	r3, r3, #2
 1960 0252 0121     		movs	r1, #1
 1961 0254 4942     		rsbs	r1, r1, #0
 1962 0256 9950     		str	r1, [r3, r2]
 1963              	.LBE125:
 1964              	.LBE124:
 360:../drivers/fsl_flexio_i2c_master.c **** }
 1965              		.loc 1 360 0
 1966 0258 0020     		movs	r0, #0
 1967 025a 2BE7     		b	.L56
 1968              	.LVL209:
 1969              	.L80:
 1970 025c 0020     		movs	r0, #0
 1971 025e 29E7     		b	.L56
 1972              	.L81:
 1973 0260 0020     		movs	r0, #0
 1974 0262 27E7     		b	.L56
 1975              	.LVL210:
 1976              	.L82:
 1977 0264 0020     		movs	r0, #0
 1978 0266 25E7     		b	.L56
 1979              	.LVL211:
 1980              	.L84:
 1981 0268 0020     		movs	r0, #0
 1982 026a 23E7     		b	.L56
 1983              	.L85:
 1984 026c 0020     		movs	r0, #0
 1985 026e 21E7     		b	.L56
 1986              	.L86:
 1987 0270 0020     		movs	r0, #0
 1988 0272 1FE7     		b	.L56
 1989              	.LVL212:
 1990              	.L87:
 1991 0274 0020     		movs	r0, #0
 1992 0276 1DE7     		b	.L56
 1993              	.LVL213:
 1994              	.L89:
 1995 0278 0020     		movs	r0, #0
 1996 027a 1BE7     		b	.L56
 1997              	.L90:
 1998 027c 0020     		movs	r0, #0
 1999 027e 19E7     		b	.L56
 2000              	.L98:
 2001              		.align	2
 2002              	.L97:
 2003 0280 22030000 		.word	802
 2004              		.cfi_endproc
 2005              	.LFE72:
 2007              		.section	.text.FLEXIO_I2C_MasterTransferHandleIRQ,"ax",%progbits
 2008              		.align	1
 2009              		.global	FLEXIO_I2C_MasterTransferHandleIRQ
 2010              		.syntax unified
 2011              		.code	16
 2012              		.thumb_func
 2013              		.fpu softvfp
 2015              	FLEXIO_I2C_MasterTransferHandleIRQ:
 2016              	.LFB95:
 665:../drivers/fsl_flexio_i2c_master.c **** 
 666:../drivers/fsl_flexio_i2c_master.c **** status_t FLEXIO_I2C_MasterWriteBlocking(FLEXIO_I2C_Type *base, const uint8_t *txBuff, uint8_t txSiz
 667:../drivers/fsl_flexio_i2c_master.c **** {
 668:../drivers/fsl_flexio_i2c_master.c ****     assert(txBuff);
 669:../drivers/fsl_flexio_i2c_master.c ****     assert(txSize);
 670:../drivers/fsl_flexio_i2c_master.c **** 
 671:../drivers/fsl_flexio_i2c_master.c ****     uint32_t status;
 672:../drivers/fsl_flexio_i2c_master.c **** 
 673:../drivers/fsl_flexio_i2c_master.c ****     while (txSize--)
 674:../drivers/fsl_flexio_i2c_master.c ****     {
 675:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_I2C_MasterWriteByte(base, *txBuff++);
 676:../drivers/fsl_flexio_i2c_master.c **** 
 677:../drivers/fsl_flexio_i2c_master.c ****         /* Wait until data transfer complete. */
 678:../drivers/fsl_flexio_i2c_master.c ****         while (!((status = FLEXIO_I2C_MasterGetStatusFlags(base)) & kFLEXIO_I2C_RxFullFlag))
 679:../drivers/fsl_flexio_i2c_master.c ****         {
 680:../drivers/fsl_flexio_i2c_master.c ****         }
 681:../drivers/fsl_flexio_i2c_master.c **** 
 682:../drivers/fsl_flexio_i2c_master.c ****         if (status & kFLEXIO_I2C_ReceiveNakFlag)
 683:../drivers/fsl_flexio_i2c_master.c ****         {
 684:../drivers/fsl_flexio_i2c_master.c ****             FLEXIO_ClearShifterErrorFlags(base->flexioBase, 1U << base->shifterIndex[1]);
 685:../drivers/fsl_flexio_i2c_master.c ****             return kStatus_FLEXIO_I2C_Nak;
 686:../drivers/fsl_flexio_i2c_master.c ****         }
 687:../drivers/fsl_flexio_i2c_master.c ****     }
 688:../drivers/fsl_flexio_i2c_master.c ****     return kStatus_Success;
 689:../drivers/fsl_flexio_i2c_master.c **** }
 690:../drivers/fsl_flexio_i2c_master.c **** 
 691:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterReadBlocking(FLEXIO_I2C_Type *base, uint8_t *rxBuff, uint8_t rxSize)
 692:../drivers/fsl_flexio_i2c_master.c **** {
 693:../drivers/fsl_flexio_i2c_master.c ****     assert(rxBuff);
 694:../drivers/fsl_flexio_i2c_master.c ****     assert(rxSize);
 695:../drivers/fsl_flexio_i2c_master.c **** 
 696:../drivers/fsl_flexio_i2c_master.c ****     while (rxSize--)
 697:../drivers/fsl_flexio_i2c_master.c ****     {
 698:../drivers/fsl_flexio_i2c_master.c ****         /* Wait until data transfer complete. */
 699:../drivers/fsl_flexio_i2c_master.c ****         while (!(FLEXIO_I2C_MasterGetStatusFlags(base) & kFLEXIO_I2C_RxFullFlag))
 700:../drivers/fsl_flexio_i2c_master.c ****         {
 701:../drivers/fsl_flexio_i2c_master.c ****         }
 702:../drivers/fsl_flexio_i2c_master.c **** 
 703:../drivers/fsl_flexio_i2c_master.c ****         *rxBuff++ = FLEXIO_I2C_MasterReadByte(base);
 704:../drivers/fsl_flexio_i2c_master.c ****     }
 705:../drivers/fsl_flexio_i2c_master.c **** }
 706:../drivers/fsl_flexio_i2c_master.c **** 
 707:../drivers/fsl_flexio_i2c_master.c **** status_t FLEXIO_I2C_MasterTransferBlocking(FLEXIO_I2C_Type *base, flexio_i2c_master_transfer_t *xfe
 708:../drivers/fsl_flexio_i2c_master.c **** {
 709:../drivers/fsl_flexio_i2c_master.c ****     assert(xfer);
 710:../drivers/fsl_flexio_i2c_master.c **** 
 711:../drivers/fsl_flexio_i2c_master.c ****     flexio_i2c_master_handle_t tmpHandle;
 712:../drivers/fsl_flexio_i2c_master.c ****     uint32_t statusFlags;
 713:../drivers/fsl_flexio_i2c_master.c ****     uint32_t result = kStatus_Success;
 714:../drivers/fsl_flexio_i2c_master.c **** 
 715:../drivers/fsl_flexio_i2c_master.c ****     /* Zero the handle. */
 716:../drivers/fsl_flexio_i2c_master.c ****     memset(&tmpHandle, 0, sizeof(tmpHandle));
 717:../drivers/fsl_flexio_i2c_master.c **** 
 718:../drivers/fsl_flexio_i2c_master.c ****     /* Set up transfer machine. */
 719:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterTransferInitStateMachine(base, &tmpHandle, xfer);
 720:../drivers/fsl_flexio_i2c_master.c **** 
 721:../drivers/fsl_flexio_i2c_master.c ****     do
 722:../drivers/fsl_flexio_i2c_master.c ****     {
 723:../drivers/fsl_flexio_i2c_master.c ****         /* Wait either tx empty or rx full flag is asserted. */
 724:../drivers/fsl_flexio_i2c_master.c ****         while (!((statusFlags = FLEXIO_I2C_MasterGetStatusFlags(base)) &
 725:../drivers/fsl_flexio_i2c_master.c ****                  (kFLEXIO_I2C_TxEmptyFlag | kFLEXIO_I2C_RxFullFlag)))
 726:../drivers/fsl_flexio_i2c_master.c ****         {
 727:../drivers/fsl_flexio_i2c_master.c ****         }
 728:../drivers/fsl_flexio_i2c_master.c **** 
 729:../drivers/fsl_flexio_i2c_master.c ****         result = FLEXIO_I2C_MasterTransferRunStateMachine(base, &tmpHandle, statusFlags);
 730:../drivers/fsl_flexio_i2c_master.c **** 
 731:../drivers/fsl_flexio_i2c_master.c ****     } while ((tmpHandle.state != kFLEXIO_I2C_Idle) && (result == kStatus_Success));
 732:../drivers/fsl_flexio_i2c_master.c **** 
 733:../drivers/fsl_flexio_i2c_master.c ****     return result;
 734:../drivers/fsl_flexio_i2c_master.c **** }
 735:../drivers/fsl_flexio_i2c_master.c **** 
 736:../drivers/fsl_flexio_i2c_master.c **** status_t FLEXIO_I2C_MasterTransferCreateHandle(FLEXIO_I2C_Type *base,
 737:../drivers/fsl_flexio_i2c_master.c ****                                                flexio_i2c_master_handle_t *handle,
 738:../drivers/fsl_flexio_i2c_master.c ****                                                flexio_i2c_master_transfer_callback_t callback,
 739:../drivers/fsl_flexio_i2c_master.c ****                                                void *userData)
 740:../drivers/fsl_flexio_i2c_master.c **** {
 741:../drivers/fsl_flexio_i2c_master.c ****     assert(handle);
 742:../drivers/fsl_flexio_i2c_master.c **** 
 743:../drivers/fsl_flexio_i2c_master.c ****     IRQn_Type flexio_irqs[] = FLEXIO_IRQS;
 744:../drivers/fsl_flexio_i2c_master.c **** 
 745:../drivers/fsl_flexio_i2c_master.c ****     /* Zero the handle. */
 746:../drivers/fsl_flexio_i2c_master.c ****     memset(handle, 0, sizeof(*handle));
 747:../drivers/fsl_flexio_i2c_master.c **** 
 748:../drivers/fsl_flexio_i2c_master.c ****     /* Register callback and userData. */
 749:../drivers/fsl_flexio_i2c_master.c ****     handle->completionCallback = callback;
 750:../drivers/fsl_flexio_i2c_master.c ****     handle->userData = userData;
 751:../drivers/fsl_flexio_i2c_master.c **** 
 752:../drivers/fsl_flexio_i2c_master.c ****     /* Enable interrupt in NVIC. */
 753:../drivers/fsl_flexio_i2c_master.c ****     EnableIRQ(flexio_irqs[FLEXIO_I2C_GetInstance(base)]);
 754:../drivers/fsl_flexio_i2c_master.c **** 
 755:../drivers/fsl_flexio_i2c_master.c ****     /* Save the context in global variables to support the double weak mechanism. */
 756:../drivers/fsl_flexio_i2c_master.c ****     return FLEXIO_RegisterHandleIRQ(base, handle, FLEXIO_I2C_MasterTransferHandleIRQ);
 757:../drivers/fsl_flexio_i2c_master.c **** }
 758:../drivers/fsl_flexio_i2c_master.c **** 
 759:../drivers/fsl_flexio_i2c_master.c **** status_t FLEXIO_I2C_MasterTransferNonBlocking(FLEXIO_I2C_Type *base,
 760:../drivers/fsl_flexio_i2c_master.c ****                                               flexio_i2c_master_handle_t *handle,
 761:../drivers/fsl_flexio_i2c_master.c ****                                               flexio_i2c_master_transfer_t *xfer)
 762:../drivers/fsl_flexio_i2c_master.c **** {
 763:../drivers/fsl_flexio_i2c_master.c ****     assert(handle);
 764:../drivers/fsl_flexio_i2c_master.c ****     assert(xfer);
 765:../drivers/fsl_flexio_i2c_master.c **** 
 766:../drivers/fsl_flexio_i2c_master.c ****     if (handle->state != kFLEXIO_I2C_Idle)
 767:../drivers/fsl_flexio_i2c_master.c ****     {
 768:../drivers/fsl_flexio_i2c_master.c ****         return kStatus_FLEXIO_I2C_Busy;
 769:../drivers/fsl_flexio_i2c_master.c ****     }
 770:../drivers/fsl_flexio_i2c_master.c ****     else
 771:../drivers/fsl_flexio_i2c_master.c ****     {
 772:../drivers/fsl_flexio_i2c_master.c ****         /* Set up transfer machine. */
 773:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_I2C_MasterTransferInitStateMachine(base, handle, xfer);
 774:../drivers/fsl_flexio_i2c_master.c **** 
 775:../drivers/fsl_flexio_i2c_master.c ****         /* Enable both tx empty and rxfull interrupt. */
 776:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_I2C_MasterEnableInterrupts(base, kFLEXIO_I2C_TxEmptyInterruptEnable | kFLEXIO_I2C_Rx
 777:../drivers/fsl_flexio_i2c_master.c **** 
 778:../drivers/fsl_flexio_i2c_master.c ****         return kStatus_Success;
 779:../drivers/fsl_flexio_i2c_master.c ****     }
 780:../drivers/fsl_flexio_i2c_master.c **** }
 781:../drivers/fsl_flexio_i2c_master.c **** 
 782:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterTransferAbort(FLEXIO_I2C_Type *base, flexio_i2c_master_handle_t *handle)
 783:../drivers/fsl_flexio_i2c_master.c **** {
 784:../drivers/fsl_flexio_i2c_master.c ****     assert(handle);
 785:../drivers/fsl_flexio_i2c_master.c **** 
 786:../drivers/fsl_flexio_i2c_master.c ****     /* Disable interrupts. */
 787:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_MasterDisableInterrupts(base, kFLEXIO_I2C_TxEmptyInterruptEnable | kFLEXIO_I2C_RxFul
 788:../drivers/fsl_flexio_i2c_master.c **** 
 789:../drivers/fsl_flexio_i2c_master.c ****     /* Reset to idle state. */
 790:../drivers/fsl_flexio_i2c_master.c ****     handle->state = kFLEXIO_I2C_Idle;
 791:../drivers/fsl_flexio_i2c_master.c **** }
 792:../drivers/fsl_flexio_i2c_master.c **** 
 793:../drivers/fsl_flexio_i2c_master.c **** status_t FLEXIO_I2C_MasterTransferGetCount(FLEXIO_I2C_Type *base, flexio_i2c_master_handle_t *handl
 794:../drivers/fsl_flexio_i2c_master.c **** {
 795:../drivers/fsl_flexio_i2c_master.c ****     if (!count)
 796:../drivers/fsl_flexio_i2c_master.c ****     {
 797:../drivers/fsl_flexio_i2c_master.c ****         return kStatus_InvalidArgument;
 798:../drivers/fsl_flexio_i2c_master.c ****     }
 799:../drivers/fsl_flexio_i2c_master.c **** 
 800:../drivers/fsl_flexio_i2c_master.c ****     *count = handle->transferSize - handle->transfer.dataSize;
 801:../drivers/fsl_flexio_i2c_master.c **** 
 802:../drivers/fsl_flexio_i2c_master.c ****     return kStatus_Success;
 803:../drivers/fsl_flexio_i2c_master.c **** }
 804:../drivers/fsl_flexio_i2c_master.c **** 
 805:../drivers/fsl_flexio_i2c_master.c **** void FLEXIO_I2C_MasterTransferHandleIRQ(void *i2cType, void *i2cHandle)
 806:../drivers/fsl_flexio_i2c_master.c **** {
 2017              		.loc 1 806 0
 2018              		.cfi_startproc
 2019              		@ args = 0, pretend = 0, frame = 0
 2020              		@ frame_needed = 0, uses_anonymous_args = 0
 2021              	.LVL214:
 2022 0000 70B5     		push	{r4, r5, r6, lr}
 2023              		.cfi_def_cfa_offset 16
 2024              		.cfi_offset 4, -16
 2025              		.cfi_offset 5, -12
 2026              		.cfi_offset 6, -8
 2027              		.cfi_offset 14, -4
 2028 0002 0400     		movs	r4, r0
 2029 0004 0D00     		movs	r5, r1
 2030              	.LVL215:
 807:../drivers/fsl_flexio_i2c_master.c ****     FLEXIO_I2C_Type *base = (FLEXIO_I2C_Type *)i2cType;
 808:../drivers/fsl_flexio_i2c_master.c ****     flexio_i2c_master_handle_t *handle = (flexio_i2c_master_handle_t *)i2cHandle;
 809:../drivers/fsl_flexio_i2c_master.c ****     uint32_t statusFlags;
 810:../drivers/fsl_flexio_i2c_master.c ****     status_t result;
 811:../drivers/fsl_flexio_i2c_master.c **** 
 812:../drivers/fsl_flexio_i2c_master.c ****     statusFlags = FLEXIO_I2C_MasterGetStatusFlags(base);
 2031              		.loc 1 812 0
 2032 0006 FFF7FEFF 		bl	FLEXIO_I2C_MasterGetStatusFlags
 2033              	.LVL216:
 2034 000a 0200     		movs	r2, r0
 2035              	.LVL217:
 813:../drivers/fsl_flexio_i2c_master.c **** 
 814:../drivers/fsl_flexio_i2c_master.c ****     result = FLEXIO_I2C_MasterTransferRunStateMachine(base, handle, statusFlags);
 2036              		.loc 1 814 0
 2037 000c 2900     		movs	r1, r5
 2038 000e 2000     		movs	r0, r4
 2039              	.LVL218:
 2040 0010 FFF7FEFF 		bl	FLEXIO_I2C_MasterTransferRunStateMachine
 2041              	.LVL219:
 815:../drivers/fsl_flexio_i2c_master.c **** 
 816:../drivers/fsl_flexio_i2c_master.c ****     if (handle->state == kFLEXIO_I2C_Idle)
 2042              		.loc 1 816 0
 2043 0014 2B7F     		ldrb	r3, [r5, #28]
 2044 0016 002B     		cmp	r3, #0
 2045 0018 00D0     		beq	.L101
 2046              	.LVL220:
 2047              	.L99:
 817:../drivers/fsl_flexio_i2c_master.c ****     {
 818:../drivers/fsl_flexio_i2c_master.c ****         FLEXIO_I2C_MasterTransferComplete(base, handle, result);
 819:../drivers/fsl_flexio_i2c_master.c ****     }
 820:../drivers/fsl_flexio_i2c_master.c **** }
 2048              		.loc 1 820 0
 2049              		@ sp needed
 2050              	.LVL221:
 2051              	.LVL222:
 2052 001a 70BD     		pop	{r4, r5, r6, pc}
 2053              	.LVL223:
 2054              	.L101:
 818:../drivers/fsl_flexio_i2c_master.c ****     }
 2055              		.loc 1 818 0
 2056 001c 0200     		movs	r2, r0
 2057 001e 2900     		movs	r1, r5
 2058 0020 2000     		movs	r0, r4
 2059              	.LVL224:
 2060 0022 FFF7FEFF 		bl	FLEXIO_I2C_MasterTransferComplete
 2061              	.LVL225:
 2062              		.loc 1 820 0
 2063 0026 F8E7     		b	.L99
 2064              		.cfi_endproc
 2065              	.LFE95:
 2067              		.section	.text.FLEXIO_I2C_MasterWriteBlocking,"ax",%progbits
 2068              		.align	1
 2069              		.global	FLEXIO_I2C_MasterWriteBlocking
 2070              		.syntax unified
 2071              		.code	16
 2072              		.thumb_func
 2073              		.fpu softvfp
 2075              	FLEXIO_I2C_MasterWriteBlocking:
 2076              	.LFB88:
 667:../drivers/fsl_flexio_i2c_master.c ****     assert(txBuff);
 2077              		.loc 1 667 0
 2078              		.cfi_startproc
 2079              		@ args = 0, pretend = 0, frame = 0
 2080              		@ frame_needed = 0, uses_anonymous_args = 0
 2081              	.LVL226:
 2082 0000 70B5     		push	{r4, r5, r6, lr}
 2083              		.cfi_def_cfa_offset 16
 2084              		.cfi_offset 4, -16
 2085              		.cfi_offset 5, -12
 2086              		.cfi_offset 6, -8
 2087              		.cfi_offset 14, -4
 2088 0002 0400     		movs	r4, r0
 2089              	.LVL227:
 2090              	.L103:
 673:../drivers/fsl_flexio_i2c_master.c ****     {
 2091              		.loc 1 673 0
 2092 0004 551E     		subs	r5, r2, #1
 2093 0006 EDB2     		uxtb	r5, r5
 2094              	.LVL228:
 2095 0008 002A     		cmp	r2, #0
 2096 000a 17D0     		beq	.L108
 675:../drivers/fsl_flexio_i2c_master.c **** 
 2097              		.loc 1 675 0
 2098 000c 4E1C     		adds	r6, r1, #1
 2099              	.LVL229:
 2100 000e 0A78     		ldrb	r2, [r1]
 2101              	.LVL230:
 2102              	.LBB126:
 2103              	.LBB127:
 356:../drivers/fsl_flexio_i2c_master.h **** }
 2104              		.loc 4 356 0
 2105 0010 A379     		ldrb	r3, [r4, #6]
 2106 0012 E033     		adds	r3, r3, #224
 2107 0014 9B00     		lsls	r3, r3, #2
 2108 0016 2168     		ldr	r1, [r4]
 2109 0018 5A50     		str	r2, [r3, r1]
 2110              	.LVL231:
 2111              	.L104:
 2112              	.LBE127:
 2113              	.LBE126:
 678:../drivers/fsl_flexio_i2c_master.c ****         {
 2114              		.loc 1 678 0 discriminator 1
 2115 001a 2000     		movs	r0, r4
 2116 001c FFF7FEFF 		bl	FLEXIO_I2C_MasterGetStatusFlags
 2117              	.LVL232:
 2118 0020 8307     		lsls	r3, r0, #30
 2119 0022 FAD5     		bpl	.L104
 673:../drivers/fsl_flexio_i2c_master.c ****     {
 2120              		.loc 1 673 0
 2121 0024 2A00     		movs	r2, r5
 682:../drivers/fsl_flexio_i2c_master.c ****         {
 2122              		.loc 1 682 0
 2123 0026 4307     		lsls	r3, r0, #29
 2124 0028 01D4     		bmi	.L109
 675:../drivers/fsl_flexio_i2c_master.c **** 
 2125              		.loc 1 675 0
 2126 002a 3100     		movs	r1, r6
 2127 002c EAE7     		b	.L103
 2128              	.L109:
 684:../drivers/fsl_flexio_i2c_master.c ****             return kStatus_FLEXIO_I2C_Nak;
 2129              		.loc 1 684 0
 2130 002e 2268     		ldr	r2, [r4]
 2131 0030 E179     		ldrb	r1, [r4, #7]
 2132 0032 0123     		movs	r3, #1
 2133 0034 8B40     		lsls	r3, r3, r1
 2134              	.LVL233:
 2135              	.LBB128:
 2136              	.LBB129:
 2137              		.loc 3 617 0
 2138 0036 5361     		str	r3, [r2, #20]
 2139              	.LVL234:
 2140              	.LBE129:
 2141              	.LBE128:
 685:../drivers/fsl_flexio_i2c_master.c ****         }
 2142              		.loc 1 685 0
 2143 0038 0148     		ldr	r0, .L110
 2144              	.LVL235:
 2145 003a 00E0     		b	.L102
 2146              	.LVL236:
 2147              	.L108:
 688:../drivers/fsl_flexio_i2c_master.c **** }
 2148              		.loc 1 688 0
 2149 003c 0020     		movs	r0, #0
 2150              	.LVL237:
 2151              	.L102:
 689:../drivers/fsl_flexio_i2c_master.c **** 
 2152              		.loc 1 689 0
 2153              		@ sp needed
 2154              	.LVL238:
 2155              	.LVL239:
 2156 003e 70BD     		pop	{r4, r5, r6, pc}
 2157              	.L111:
 2158              		.align	2
 2159              	.L110:
 2160 0040 22030000 		.word	802
 2161              		.cfi_endproc
 2162              	.LFE88:
 2164              		.section	.text.FLEXIO_I2C_MasterReadBlocking,"ax",%progbits
 2165              		.align	1
 2166              		.global	FLEXIO_I2C_MasterReadBlocking
 2167              		.syntax unified
 2168              		.code	16
 2169              		.thumb_func
 2170              		.fpu softvfp
 2172              	FLEXIO_I2C_MasterReadBlocking:
 2173              	.LFB89:
 692:../drivers/fsl_flexio_i2c_master.c ****     assert(rxBuff);
 2174              		.loc 1 692 0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              	.LVL240:
 2179 0000 70B5     		push	{r4, r5, r6, lr}
 2180              		.cfi_def_cfa_offset 16
 2181              		.cfi_offset 4, -16
 2182              		.cfi_offset 5, -12
 2183              		.cfi_offset 6, -8
 2184              		.cfi_offset 14, -4
 2185 0002 0400     		movs	r4, r0
 2186 0004 0D00     		movs	r5, r1
 696:../drivers/fsl_flexio_i2c_master.c ****     {
 2187              		.loc 1 696 0
 2188 0006 0CE0     		b	.L113
 2189              	.LVL241:
 2190              	.L114:
 699:../drivers/fsl_flexio_i2c_master.c ****         {
 2191              		.loc 1 699 0 discriminator 1
 2192 0008 2000     		movs	r0, r4
 2193 000a FFF7FEFF 		bl	FLEXIO_I2C_MasterGetStatusFlags
 2194              	.LVL242:
 2195 000e 8307     		lsls	r3, r0, #30
 2196 0010 FAD5     		bpl	.L114
 2197              	.LVL243:
 2198              	.LBB130:
 2199              	.LBB131:
 2200              		.loc 4 370 0
 2201 0012 E379     		ldrb	r3, [r4, #7]
 2202 0014 A033     		adds	r3, r3, #160
 2203 0016 9B00     		lsls	r3, r3, #2
 2204 0018 2268     		ldr	r2, [r4]
 2205 001a 9B58     		ldr	r3, [r3, r2]
 2206              	.LVL244:
 2207              	.LBE131:
 2208              	.LBE130:
 703:../drivers/fsl_flexio_i2c_master.c ****     }
 2209              		.loc 1 703 0
 2210 001c 2B70     		strb	r3, [r5]
 696:../drivers/fsl_flexio_i2c_master.c ****     {
 2211              		.loc 1 696 0
 2212 001e 3200     		movs	r2, r6
 703:../drivers/fsl_flexio_i2c_master.c ****     }
 2213              		.loc 1 703 0
 2214 0020 0135     		adds	r5, r5, #1
 2215              	.LVL245:
 2216              	.L113:
 696:../drivers/fsl_flexio_i2c_master.c ****     {
 2217              		.loc 1 696 0
 2218 0022 561E     		subs	r6, r2, #1
 2219 0024 F6B2     		uxtb	r6, r6
 2220              	.LVL246:
 2221 0026 002A     		cmp	r2, #0
 2222 0028 EED1     		bne	.L114
 705:../drivers/fsl_flexio_i2c_master.c **** 
 2223              		.loc 1 705 0
 2224              		@ sp needed
 2225              	.LVL247:
 2226              	.LVL248:
 2227              	.LVL249:
 2228 002a 70BD     		pop	{r4, r5, r6, pc}
 2229              		.cfi_endproc
 2230              	.LFE89:
 2232              		.section	.text.FLEXIO_I2C_MasterTransferBlocking,"ax",%progbits
 2233              		.align	1
 2234              		.global	FLEXIO_I2C_MasterTransferBlocking
 2235              		.syntax unified
 2236              		.code	16
 2237              		.thumb_func
 2238              		.fpu softvfp
 2240              	FLEXIO_I2C_MasterTransferBlocking:
 2241              	.LFB90:
 708:../drivers/fsl_flexio_i2c_master.c ****     assert(xfer);
 2242              		.loc 1 708 0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 40
 2245              		@ frame_needed = 0, uses_anonymous_args = 0
 2246              	.LVL250:
 2247 0000 30B5     		push	{r4, r5, lr}
 2248              		.cfi_def_cfa_offset 12
 2249              		.cfi_offset 4, -12
 2250              		.cfi_offset 5, -8
 2251              		.cfi_offset 14, -4
 2252 0002 8BB0     		sub	sp, sp, #44
 2253              		.cfi_def_cfa_offset 56
 2254 0004 0400     		movs	r4, r0
 2255 0006 0D00     		movs	r5, r1
 2256              	.LVL251:
 716:../drivers/fsl_flexio_i2c_master.c **** 
 2257              		.loc 1 716 0
 2258 0008 2822     		movs	r2, #40
 2259 000a 0021     		movs	r1, #0
 2260              	.LVL252:
 2261 000c 6846     		mov	r0, sp
 2262              	.LVL253:
 2263 000e FFF7FEFF 		bl	memset
 2264              	.LVL254:
 719:../drivers/fsl_flexio_i2c_master.c **** 
 2265              		.loc 1 719 0
 2266 0012 2A00     		movs	r2, r5
 2267 0014 6946     		mov	r1, sp
 2268 0016 2000     		movs	r0, r4
 2269 0018 FFF7FEFF 		bl	FLEXIO_I2C_MasterTransferInitStateMachine
 2270              	.LVL255:
 2271              	.L116:
 724:../drivers/fsl_flexio_i2c_master.c ****                  (kFLEXIO_I2C_TxEmptyFlag | kFLEXIO_I2C_RxFullFlag)))
 2272              		.loc 1 724 0 discriminator 1
 2273 001c 2000     		movs	r0, r4
 2274 001e FFF7FEFF 		bl	FLEXIO_I2C_MasterGetStatusFlags
 2275              	.LVL256:
 2276 0022 8307     		lsls	r3, r0, #30
 2277 0024 FAD0     		beq	.L116
 729:../drivers/fsl_flexio_i2c_master.c **** 
 2278              		.loc 1 729 0
 2279 0026 0200     		movs	r2, r0
 2280 0028 6946     		mov	r1, sp
 2281 002a 2000     		movs	r0, r4
 2282              	.LVL257:
 2283 002c FFF7FEFF 		bl	FLEXIO_I2C_MasterTransferRunStateMachine
 2284              	.LVL258:
 731:../drivers/fsl_flexio_i2c_master.c **** 
 2285              		.loc 1 731 0
 2286 0030 6B46     		mov	r3, sp
 2287 0032 1B7F     		ldrb	r3, [r3, #28]
 2288 0034 002B     		cmp	r3, #0
 2289 0036 01D0     		beq	.L115
 731:../drivers/fsl_flexio_i2c_master.c **** 
 2290              		.loc 1 731 0 is_stmt 0 discriminator 1
 2291 0038 0028     		cmp	r0, #0
 2292 003a EFD0     		beq	.L116
 2293              	.L115:
 734:../drivers/fsl_flexio_i2c_master.c **** 
 2294              		.loc 1 734 0 is_stmt 1
 2295 003c 0BB0     		add	sp, sp, #44
 2296              		@ sp needed
 2297              	.LVL259:
 2298              	.LVL260:
 2299 003e 30BD     		pop	{r4, r5, pc}
 2300              		.cfi_endproc
 2301              	.LFE90:
 2303              		.section	.text.FLEXIO_I2C_MasterTransferCreateHandle,"ax",%progbits
 2304              		.align	1
 2305              		.global	FLEXIO_I2C_MasterTransferCreateHandle
 2306              		.syntax unified
 2307              		.code	16
 2308              		.thumb_func
 2309              		.fpu softvfp
 2311              	FLEXIO_I2C_MasterTransferCreateHandle:
 2312              	.LFB91:
 740:../drivers/fsl_flexio_i2c_master.c ****     assert(handle);
 2313              		.loc 1 740 0
 2314              		.cfi_startproc
 2315              		@ args = 0, pretend = 0, frame = 0
 2316              		@ frame_needed = 0, uses_anonymous_args = 0
 2317              	.LVL261:
 2318 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2319              		.cfi_def_cfa_offset 24
 2320              		.cfi_offset 3, -24
 2321              		.cfi_offset 4, -20
 2322              		.cfi_offset 5, -16
 2323              		.cfi_offset 6, -12
 2324              		.cfi_offset 7, -8
 2325              		.cfi_offset 14, -4
 2326 0002 0500     		movs	r5, r0
 2327 0004 0C00     		movs	r4, r1
 2328 0006 1700     		movs	r7, r2
 2329 0008 1E00     		movs	r6, r3
 746:../drivers/fsl_flexio_i2c_master.c **** 
 2330              		.loc 1 746 0
 2331 000a 2022     		movs	r2, #32
 2332              	.LVL262:
 2333 000c 0021     		movs	r1, #0
 2334              	.LVL263:
 2335 000e 2000     		movs	r0, r4
 2336              	.LVL264:
 2337 0010 FFF7FEFF 		bl	memset
 2338              	.LVL265:
 749:../drivers/fsl_flexio_i2c_master.c ****     handle->userData = userData;
 2339              		.loc 1 749 0
 2340 0014 2762     		str	r7, [r4, #32]
 750:../drivers/fsl_flexio_i2c_master.c **** 
 2341              		.loc 1 750 0
 2342 0016 6662     		str	r6, [r4, #36]
 753:../drivers/fsl_flexio_i2c_master.c **** 
 2343              		.loc 1 753 0
 2344 0018 2800     		movs	r0, r5
 2345 001a FFF7FEFF 		bl	FLEXIO_I2C_GetInstance
 2346              	.LVL266:
 2347              	.LBB132:
 2348              	.LBB133:
 2349              	.LBB134:
 2350              		.file 5 "../CMSIS/core_cm0plus.h"
   1:../CMSIS/core_cm0plus.h **** /**************************************************************************//**
   2:../CMSIS/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:../CMSIS/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm0plus.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm0plus.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
   7:../CMSIS/core_cm0plus.h **** /*
   8:../CMSIS/core_cm0plus.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm0plus.h ****  *
  10:../CMSIS/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm0plus.h ****  *
  12:../CMSIS/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm0plus.h ****  *
  16:../CMSIS/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm0plus.h ****  *
  18:../CMSIS/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm0plus.h ****  * limitations under the License.
  23:../CMSIS/core_cm0plus.h ****  */
  24:../CMSIS/core_cm0plus.h **** 
  25:../CMSIS/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm0plus.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm0plus.h **** #endif
  30:../CMSIS/core_cm0plus.h **** 
  31:../CMSIS/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:../CMSIS/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:../CMSIS/core_cm0plus.h **** 
  34:../CMSIS/core_cm0plus.h **** #include <stdint.h>
  35:../CMSIS/core_cm0plus.h **** 
  36:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm0plus.h ****  extern "C" {
  38:../CMSIS/core_cm0plus.h **** #endif
  39:../CMSIS/core_cm0plus.h **** 
  40:../CMSIS/core_cm0plus.h **** /**
  41:../CMSIS/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm0plus.h **** 
  44:../CMSIS/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm0plus.h **** 
  47:../CMSIS/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm0plus.h **** 
  50:../CMSIS/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm0plus.h ****  */
  53:../CMSIS/core_cm0plus.h **** 
  54:../CMSIS/core_cm0plus.h **** 
  55:../CMSIS/core_cm0plus.h **** /*******************************************************************************
  56:../CMSIS/core_cm0plus.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
  58:../CMSIS/core_cm0plus.h **** /**
  59:../CMSIS/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:../CMSIS/core_cm0plus.h ****   @{
  61:../CMSIS/core_cm0plus.h ****  */
  62:../CMSIS/core_cm0plus.h **** 
  63:../CMSIS/core_cm0plus.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm0plus.h ****  
  65:../CMSIS/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:../CMSIS/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:../CMSIS/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:../CMSIS/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:../CMSIS/core_cm0plus.h **** 
  71:../CMSIS/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:../CMSIS/core_cm0plus.h **** 
  73:../CMSIS/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm0plus.h ****     This core does not support an FPU at all
  75:../CMSIS/core_cm0plus.h **** */
  76:../CMSIS/core_cm0plus.h **** #define __FPU_USED       0U
  77:../CMSIS/core_cm0plus.h **** 
  78:../CMSIS/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:../CMSIS/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:../CMSIS/core_cm0plus.h ****   #endif
  82:../CMSIS/core_cm0plus.h **** 
  83:../CMSIS/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:../CMSIS/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:../CMSIS/core_cm0plus.h ****   #endif
  87:../CMSIS/core_cm0plus.h **** 
  88:../CMSIS/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:../CMSIS/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:../CMSIS/core_cm0plus.h ****   #endif
  92:../CMSIS/core_cm0plus.h **** 
  93:../CMSIS/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:../CMSIS/core_cm0plus.h ****   #if defined __ARMVFP__
  95:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:../CMSIS/core_cm0plus.h ****   #endif
  97:../CMSIS/core_cm0plus.h **** 
  98:../CMSIS/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:../CMSIS/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:../CMSIS/core_cm0plus.h ****   #endif
 102:../CMSIS/core_cm0plus.h **** 
 103:../CMSIS/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:../CMSIS/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:../CMSIS/core_cm0plus.h ****   #endif
 107:../CMSIS/core_cm0plus.h **** 
 108:../CMSIS/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:../CMSIS/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:../CMSIS/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:../CMSIS/core_cm0plus.h ****   #endif
 112:../CMSIS/core_cm0plus.h **** 
 113:../CMSIS/core_cm0plus.h **** #endif
 114:../CMSIS/core_cm0plus.h **** 
 115:../CMSIS/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:../CMSIS/core_cm0plus.h **** 
 117:../CMSIS/core_cm0plus.h **** 
 118:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
 119:../CMSIS/core_cm0plus.h **** }
 120:../CMSIS/core_cm0plus.h **** #endif
 121:../CMSIS/core_cm0plus.h **** 
 122:../CMSIS/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:../CMSIS/core_cm0plus.h **** 
 124:../CMSIS/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:../CMSIS/core_cm0plus.h **** 
 126:../CMSIS/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:../CMSIS/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:../CMSIS/core_cm0plus.h **** 
 129:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
 130:../CMSIS/core_cm0plus.h ****  extern "C" {
 131:../CMSIS/core_cm0plus.h **** #endif
 132:../CMSIS/core_cm0plus.h **** 
 133:../CMSIS/core_cm0plus.h **** /* check device defines and use defaults */
 134:../CMSIS/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:../CMSIS/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:../CMSIS/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:../CMSIS/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:../CMSIS/core_cm0plus.h ****   #endif
 139:../CMSIS/core_cm0plus.h **** 
 140:../CMSIS/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:../CMSIS/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:../CMSIS/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:../CMSIS/core_cm0plus.h ****   #endif
 144:../CMSIS/core_cm0plus.h **** 
 145:../CMSIS/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:../CMSIS/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:../CMSIS/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:../CMSIS/core_cm0plus.h ****   #endif
 149:../CMSIS/core_cm0plus.h **** 
 150:../CMSIS/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:../CMSIS/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:../CMSIS/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:../CMSIS/core_cm0plus.h ****   #endif
 154:../CMSIS/core_cm0plus.h **** 
 155:../CMSIS/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:../CMSIS/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:../CMSIS/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:../CMSIS/core_cm0plus.h ****   #endif
 159:../CMSIS/core_cm0plus.h **** #endif
 160:../CMSIS/core_cm0plus.h **** 
 161:../CMSIS/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:../CMSIS/core_cm0plus.h **** /**
 163:../CMSIS/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:../CMSIS/core_cm0plus.h **** 
 165:../CMSIS/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:../CMSIS/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:../CMSIS/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:../CMSIS/core_cm0plus.h **** */
 169:../CMSIS/core_cm0plus.h **** #ifdef __cplusplus
 170:../CMSIS/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:../CMSIS/core_cm0plus.h **** #else
 172:../CMSIS/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:../CMSIS/core_cm0plus.h **** #endif
 174:../CMSIS/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:../CMSIS/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:../CMSIS/core_cm0plus.h **** 
 177:../CMSIS/core_cm0plus.h **** /* following defines should be used for structure members */
 178:../CMSIS/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:../CMSIS/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:../CMSIS/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:../CMSIS/core_cm0plus.h **** 
 182:../CMSIS/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:../CMSIS/core_cm0plus.h **** 
 184:../CMSIS/core_cm0plus.h **** 
 185:../CMSIS/core_cm0plus.h **** 
 186:../CMSIS/core_cm0plus.h **** /*******************************************************************************
 187:../CMSIS/core_cm0plus.h ****  *                 Register Abstraction
 188:../CMSIS/core_cm0plus.h ****   Core Register contain:
 189:../CMSIS/core_cm0plus.h ****   - Core Register
 190:../CMSIS/core_cm0plus.h ****   - Core NVIC Register
 191:../CMSIS/core_cm0plus.h ****   - Core SCB Register
 192:../CMSIS/core_cm0plus.h ****   - Core SysTick Register
 193:../CMSIS/core_cm0plus.h ****   - Core MPU Register
 194:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
 195:../CMSIS/core_cm0plus.h **** /**
 196:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:../CMSIS/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:../CMSIS/core_cm0plus.h **** */
 199:../CMSIS/core_cm0plus.h **** 
 200:../CMSIS/core_cm0plus.h **** /**
 201:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:../CMSIS/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:../CMSIS/core_cm0plus.h ****   @{
 205:../CMSIS/core_cm0plus.h ****  */
 206:../CMSIS/core_cm0plus.h **** 
 207:../CMSIS/core_cm0plus.h **** /**
 208:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:../CMSIS/core_cm0plus.h ****  */
 210:../CMSIS/core_cm0plus.h **** typedef union
 211:../CMSIS/core_cm0plus.h **** {
 212:../CMSIS/core_cm0plus.h ****   struct
 213:../CMSIS/core_cm0plus.h ****   {
 214:../CMSIS/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:../CMSIS/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:../CMSIS/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:../CMSIS/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:../CMSIS/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:../CMSIS/core_cm0plus.h **** } APSR_Type;
 222:../CMSIS/core_cm0plus.h **** 
 223:../CMSIS/core_cm0plus.h **** /* APSR Register Definitions */
 224:../CMSIS/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:../CMSIS/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:../CMSIS/core_cm0plus.h **** 
 227:../CMSIS/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:../CMSIS/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:../CMSIS/core_cm0plus.h **** 
 230:../CMSIS/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:../CMSIS/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:../CMSIS/core_cm0plus.h **** 
 233:../CMSIS/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:../CMSIS/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:../CMSIS/core_cm0plus.h **** 
 236:../CMSIS/core_cm0plus.h **** 
 237:../CMSIS/core_cm0plus.h **** /**
 238:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:../CMSIS/core_cm0plus.h ****  */
 240:../CMSIS/core_cm0plus.h **** typedef union
 241:../CMSIS/core_cm0plus.h **** {
 242:../CMSIS/core_cm0plus.h ****   struct
 243:../CMSIS/core_cm0plus.h ****   {
 244:../CMSIS/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:../CMSIS/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:../CMSIS/core_cm0plus.h **** } IPSR_Type;
 249:../CMSIS/core_cm0plus.h **** 
 250:../CMSIS/core_cm0plus.h **** /* IPSR Register Definitions */
 251:../CMSIS/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:../CMSIS/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:../CMSIS/core_cm0plus.h **** 
 254:../CMSIS/core_cm0plus.h **** 
 255:../CMSIS/core_cm0plus.h **** /**
 256:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:../CMSIS/core_cm0plus.h ****  */
 258:../CMSIS/core_cm0plus.h **** typedef union
 259:../CMSIS/core_cm0plus.h **** {
 260:../CMSIS/core_cm0plus.h ****   struct
 261:../CMSIS/core_cm0plus.h ****   {
 262:../CMSIS/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:../CMSIS/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:../CMSIS/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:../CMSIS/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:../CMSIS/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:../CMSIS/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:../CMSIS/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:../CMSIS/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:../CMSIS/core_cm0plus.h **** } xPSR_Type;
 273:../CMSIS/core_cm0plus.h **** 
 274:../CMSIS/core_cm0plus.h **** /* xPSR Register Definitions */
 275:../CMSIS/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:../CMSIS/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:../CMSIS/core_cm0plus.h **** 
 278:../CMSIS/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:../CMSIS/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:../CMSIS/core_cm0plus.h **** 
 281:../CMSIS/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:../CMSIS/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:../CMSIS/core_cm0plus.h **** 
 284:../CMSIS/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:../CMSIS/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:../CMSIS/core_cm0plus.h **** 
 287:../CMSIS/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:../CMSIS/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:../CMSIS/core_cm0plus.h **** 
 290:../CMSIS/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:../CMSIS/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:../CMSIS/core_cm0plus.h **** 
 293:../CMSIS/core_cm0plus.h **** 
 294:../CMSIS/core_cm0plus.h **** /**
 295:../CMSIS/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:../CMSIS/core_cm0plus.h ****  */
 297:../CMSIS/core_cm0plus.h **** typedef union
 298:../CMSIS/core_cm0plus.h **** {
 299:../CMSIS/core_cm0plus.h ****   struct
 300:../CMSIS/core_cm0plus.h ****   {
 301:../CMSIS/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:../CMSIS/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:../CMSIS/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:../CMSIS/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm0plus.h **** } CONTROL_Type;
 307:../CMSIS/core_cm0plus.h **** 
 308:../CMSIS/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:../CMSIS/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:../CMSIS/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:../CMSIS/core_cm0plus.h **** 
 312:../CMSIS/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:../CMSIS/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:../CMSIS/core_cm0plus.h **** 
 315:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:../CMSIS/core_cm0plus.h **** 
 317:../CMSIS/core_cm0plus.h **** 
 318:../CMSIS/core_cm0plus.h **** /**
 319:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:../CMSIS/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:../CMSIS/core_cm0plus.h ****   @{
 323:../CMSIS/core_cm0plus.h ****  */
 324:../CMSIS/core_cm0plus.h **** 
 325:../CMSIS/core_cm0plus.h **** /**
 326:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:../CMSIS/core_cm0plus.h ****  */
 328:../CMSIS/core_cm0plus.h **** typedef struct
 329:../CMSIS/core_cm0plus.h **** {
 330:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:../CMSIS/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:../CMSIS/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:../CMSIS/core_cm0plus.h **** }  NVIC_Type;
 341:../CMSIS/core_cm0plus.h **** 
 342:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:../CMSIS/core_cm0plus.h **** 
 344:../CMSIS/core_cm0plus.h **** 
 345:../CMSIS/core_cm0plus.h **** /**
 346:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:../CMSIS/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:../CMSIS/core_cm0plus.h ****   @{
 350:../CMSIS/core_cm0plus.h ****  */
 351:../CMSIS/core_cm0plus.h **** 
 352:../CMSIS/core_cm0plus.h **** /**
 353:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:../CMSIS/core_cm0plus.h ****  */
 355:../CMSIS/core_cm0plus.h **** typedef struct
 356:../CMSIS/core_cm0plus.h **** {
 357:../CMSIS/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:../CMSIS/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:../CMSIS/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:../CMSIS/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:../CMSIS/core_cm0plus.h **** #else
 362:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED0;
 363:../CMSIS/core_cm0plus.h **** #endif
 364:../CMSIS/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:../CMSIS/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:../CMSIS/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:../CMSIS/core_cm0plus.h ****         uint32_t RESERVED1;
 368:../CMSIS/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:../CMSIS/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:../CMSIS/core_cm0plus.h **** } SCB_Type;
 371:../CMSIS/core_cm0plus.h **** 
 372:../CMSIS/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:../CMSIS/core_cm0plus.h **** 
 376:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:../CMSIS/core_cm0plus.h **** 
 379:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:../CMSIS/core_cm0plus.h **** 
 382:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:../CMSIS/core_cm0plus.h **** 
 385:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:../CMSIS/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:../CMSIS/core_cm0plus.h **** 
 388:../CMSIS/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:../CMSIS/core_cm0plus.h **** 
 392:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:../CMSIS/core_cm0plus.h **** 
 395:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:../CMSIS/core_cm0plus.h **** 
 398:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:../CMSIS/core_cm0plus.h **** 
 401:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:../CMSIS/core_cm0plus.h **** 
 404:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:../CMSIS/core_cm0plus.h **** 
 407:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:../CMSIS/core_cm0plus.h **** 
 410:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:../CMSIS/core_cm0plus.h **** 
 413:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:../CMSIS/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:../CMSIS/core_cm0plus.h **** 
 416:../CMSIS/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:../CMSIS/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:../CMSIS/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:../CMSIS/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:../CMSIS/core_cm0plus.h **** #endif
 421:../CMSIS/core_cm0plus.h **** 
 422:../CMSIS/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:../CMSIS/core_cm0plus.h **** 
 426:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:../CMSIS/core_cm0plus.h **** 
 429:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:../CMSIS/core_cm0plus.h **** 
 432:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:../CMSIS/core_cm0plus.h **** 
 435:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:../CMSIS/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:../CMSIS/core_cm0plus.h **** 
 438:../CMSIS/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:../CMSIS/core_cm0plus.h **** 
 442:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:../CMSIS/core_cm0plus.h **** 
 445:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:../CMSIS/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:../CMSIS/core_cm0plus.h **** 
 448:../CMSIS/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:../CMSIS/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:../CMSIS/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:../CMSIS/core_cm0plus.h **** 
 452:../CMSIS/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:../CMSIS/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:../CMSIS/core_cm0plus.h **** 
 455:../CMSIS/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:../CMSIS/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:../CMSIS/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:../CMSIS/core_cm0plus.h **** 
 459:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:../CMSIS/core_cm0plus.h **** 
 461:../CMSIS/core_cm0plus.h **** 
 462:../CMSIS/core_cm0plus.h **** /**
 463:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:../CMSIS/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:../CMSIS/core_cm0plus.h ****   @{
 467:../CMSIS/core_cm0plus.h ****  */
 468:../CMSIS/core_cm0plus.h **** 
 469:../CMSIS/core_cm0plus.h **** /**
 470:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:../CMSIS/core_cm0plus.h ****  */
 472:../CMSIS/core_cm0plus.h **** typedef struct
 473:../CMSIS/core_cm0plus.h **** {
 474:../CMSIS/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:../CMSIS/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:../CMSIS/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:../CMSIS/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:../CMSIS/core_cm0plus.h **** } SysTick_Type;
 479:../CMSIS/core_cm0plus.h **** 
 480:../CMSIS/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:../CMSIS/core_cm0plus.h **** 
 484:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:../CMSIS/core_cm0plus.h **** 
 487:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:../CMSIS/core_cm0plus.h **** 
 490:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:../CMSIS/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:../CMSIS/core_cm0plus.h **** 
 493:../CMSIS/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:../CMSIS/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:../CMSIS/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:../CMSIS/core_cm0plus.h **** 
 497:../CMSIS/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:../CMSIS/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:../CMSIS/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:../CMSIS/core_cm0plus.h **** 
 501:../CMSIS/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:../CMSIS/core_cm0plus.h **** 
 505:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:../CMSIS/core_cm0plus.h **** 
 508:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:../CMSIS/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:../CMSIS/core_cm0plus.h **** 
 511:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:../CMSIS/core_cm0plus.h **** 
 513:../CMSIS/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:../CMSIS/core_cm0plus.h **** /**
 515:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:../CMSIS/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:../CMSIS/core_cm0plus.h ****   @{
 519:../CMSIS/core_cm0plus.h ****  */
 520:../CMSIS/core_cm0plus.h **** 
 521:../CMSIS/core_cm0plus.h **** /**
 522:../CMSIS/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:../CMSIS/core_cm0plus.h ****  */
 524:../CMSIS/core_cm0plus.h **** typedef struct
 525:../CMSIS/core_cm0plus.h **** {
 526:../CMSIS/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:../CMSIS/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:../CMSIS/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:../CMSIS/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:../CMSIS/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:../CMSIS/core_cm0plus.h **** } MPU_Type;
 532:../CMSIS/core_cm0plus.h **** 
 533:../CMSIS/core_cm0plus.h **** /* MPU Type Register Definitions */
 534:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 535:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 536:../CMSIS/core_cm0plus.h **** 
 537:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 538:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 539:../CMSIS/core_cm0plus.h **** 
 540:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 541:../CMSIS/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 542:../CMSIS/core_cm0plus.h **** 
 543:../CMSIS/core_cm0plus.h **** /* MPU Control Register Definitions */
 544:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 545:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 546:../CMSIS/core_cm0plus.h **** 
 547:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 548:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 549:../CMSIS/core_cm0plus.h **** 
 550:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 551:../CMSIS/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 552:../CMSIS/core_cm0plus.h **** 
 553:../CMSIS/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 554:../CMSIS/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 555:../CMSIS/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 556:../CMSIS/core_cm0plus.h **** 
 557:../CMSIS/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 558:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 559:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 560:../CMSIS/core_cm0plus.h **** 
 561:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 562:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 563:../CMSIS/core_cm0plus.h **** 
 564:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 565:../CMSIS/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 566:../CMSIS/core_cm0plus.h **** 
 567:../CMSIS/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 568:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 569:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 570:../CMSIS/core_cm0plus.h **** 
 571:../CMSIS/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 572:../CMSIS/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 573:../CMSIS/core_cm0plus.h **** 
 574:../CMSIS/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 575:../CMSIS/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 576:../CMSIS/core_cm0plus.h **** 
 577:../CMSIS/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 578:../CMSIS/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 579:../CMSIS/core_cm0plus.h **** 
 580:../CMSIS/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 581:../CMSIS/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 582:../CMSIS/core_cm0plus.h **** 
 583:../CMSIS/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 584:../CMSIS/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 585:../CMSIS/core_cm0plus.h **** 
 586:../CMSIS/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 587:../CMSIS/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 588:../CMSIS/core_cm0plus.h **** 
 589:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 590:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 591:../CMSIS/core_cm0plus.h **** 
 592:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 593:../CMSIS/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 594:../CMSIS/core_cm0plus.h **** 
 595:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 596:../CMSIS/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 597:../CMSIS/core_cm0plus.h **** 
 598:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 599:../CMSIS/core_cm0plus.h **** #endif
 600:../CMSIS/core_cm0plus.h **** 
 601:../CMSIS/core_cm0plus.h **** 
 602:../CMSIS/core_cm0plus.h **** /**
 603:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 604:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 605:../CMSIS/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 606:../CMSIS/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 607:../CMSIS/core_cm0plus.h ****   @{
 608:../CMSIS/core_cm0plus.h ****  */
 609:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 610:../CMSIS/core_cm0plus.h **** 
 611:../CMSIS/core_cm0plus.h **** 
 612:../CMSIS/core_cm0plus.h **** /**
 613:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 614:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 615:../CMSIS/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 616:../CMSIS/core_cm0plus.h ****   @{
 617:../CMSIS/core_cm0plus.h ****  */
 618:../CMSIS/core_cm0plus.h **** 
 619:../CMSIS/core_cm0plus.h **** /**
 620:../CMSIS/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 621:../CMSIS/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 622:../CMSIS/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 623:../CMSIS/core_cm0plus.h ****   \return           Masked and shifted value.
 624:../CMSIS/core_cm0plus.h **** */
 625:../CMSIS/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 626:../CMSIS/core_cm0plus.h **** 
 627:../CMSIS/core_cm0plus.h **** /**
 628:../CMSIS/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 629:../CMSIS/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 630:../CMSIS/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 631:../CMSIS/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 632:../CMSIS/core_cm0plus.h **** */
 633:../CMSIS/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 634:../CMSIS/core_cm0plus.h **** 
 635:../CMSIS/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 636:../CMSIS/core_cm0plus.h **** 
 637:../CMSIS/core_cm0plus.h **** 
 638:../CMSIS/core_cm0plus.h **** /**
 639:../CMSIS/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 640:../CMSIS/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 641:../CMSIS/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 642:../CMSIS/core_cm0plus.h ****   @{
 643:../CMSIS/core_cm0plus.h ****  */
 644:../CMSIS/core_cm0plus.h **** 
 645:../CMSIS/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 646:../CMSIS/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 647:../CMSIS/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 648:../CMSIS/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 649:../CMSIS/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 650:../CMSIS/core_cm0plus.h **** 
 651:../CMSIS/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 652:../CMSIS/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 653:../CMSIS/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 654:../CMSIS/core_cm0plus.h **** 
 655:../CMSIS/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 656:../CMSIS/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 657:../CMSIS/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 658:../CMSIS/core_cm0plus.h **** #endif
 659:../CMSIS/core_cm0plus.h **** 
 660:../CMSIS/core_cm0plus.h **** /*@} */
 661:../CMSIS/core_cm0plus.h **** 
 662:../CMSIS/core_cm0plus.h **** 
 663:../CMSIS/core_cm0plus.h **** 
 664:../CMSIS/core_cm0plus.h **** /*******************************************************************************
 665:../CMSIS/core_cm0plus.h ****  *                Hardware Abstraction Layer
 666:../CMSIS/core_cm0plus.h ****   Core Function Interface contains:
 667:../CMSIS/core_cm0plus.h ****   - Core NVIC Functions
 668:../CMSIS/core_cm0plus.h ****   - Core SysTick Functions
 669:../CMSIS/core_cm0plus.h ****   - Core Register Access Functions
 670:../CMSIS/core_cm0plus.h ****  ******************************************************************************/
 671:../CMSIS/core_cm0plus.h **** /**
 672:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 673:../CMSIS/core_cm0plus.h **** */
 674:../CMSIS/core_cm0plus.h **** 
 675:../CMSIS/core_cm0plus.h **** 
 676:../CMSIS/core_cm0plus.h **** 
 677:../CMSIS/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 678:../CMSIS/core_cm0plus.h **** /**
 679:../CMSIS/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 680:../CMSIS/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 681:../CMSIS/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 682:../CMSIS/core_cm0plus.h ****   @{
 683:../CMSIS/core_cm0plus.h ****  */
 684:../CMSIS/core_cm0plus.h **** 
 685:../CMSIS/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 686:../CMSIS/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 687:../CMSIS/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 688:../CMSIS/core_cm0plus.h ****   #endif
 689:../CMSIS/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 690:../CMSIS/core_cm0plus.h **** #else
 691:../CMSIS/core_cm0plus.h **** /*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0+ */
 692:../CMSIS/core_cm0plus.h **** /*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0+ */
 693:../CMSIS/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 694:../CMSIS/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 695:../CMSIS/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 696:../CMSIS/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 697:../CMSIS/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 698:../CMSIS/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 699:../CMSIS/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 700:../CMSIS/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 701:../CMSIS/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 702:../CMSIS/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 703:../CMSIS/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 704:../CMSIS/core_cm0plus.h **** 
 705:../CMSIS/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 706:../CMSIS/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 707:../CMSIS/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 708:../CMSIS/core_cm0plus.h ****   #endif
 709:../CMSIS/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 710:../CMSIS/core_cm0plus.h **** #else
 711:../CMSIS/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 712:../CMSIS/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 713:../CMSIS/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 714:../CMSIS/core_cm0plus.h **** 
 715:../CMSIS/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 716:../CMSIS/core_cm0plus.h **** 
 717:../CMSIS/core_cm0plus.h **** 
 718:../CMSIS/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 719:../CMSIS/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 720:../CMSIS/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 721:../CMSIS/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 722:../CMSIS/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 723:../CMSIS/core_cm0plus.h **** 
 724:../CMSIS/core_cm0plus.h **** 
 725:../CMSIS/core_cm0plus.h **** /**
 726:../CMSIS/core_cm0plus.h ****   \brief   Enable Interrupt
 727:../CMSIS/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 728:../CMSIS/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 729:../CMSIS/core_cm0plus.h ****   \note    IRQn must not be negative.
 730:../CMSIS/core_cm0plus.h ****  */
 731:../CMSIS/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 732:../CMSIS/core_cm0plus.h **** {
 733:../CMSIS/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 734:../CMSIS/core_cm0plus.h ****   {
 735:../CMSIS/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 2351              		.loc 5 735 0
 2352 001e 054B     		ldr	r3, .L120
 2353 0020 8022     		movs	r2, #128
 2354 0022 D201     		lsls	r2, r2, #7
 2355 0024 1A60     		str	r2, [r3]
 2356              	.LVL267:
 2357              	.LBE134:
 2358              	.LBE133:
 2359              	.LBE132:
 756:../drivers/fsl_flexio_i2c_master.c **** }
 2360              		.loc 1 756 0
 2361 0026 044A     		ldr	r2, .L120+4
 2362 0028 2100     		movs	r1, r4
 2363 002a 2800     		movs	r0, r5
 2364 002c FFF7FEFF 		bl	FLEXIO_RegisterHandleIRQ
 2365              	.LVL268:
 757:../drivers/fsl_flexio_i2c_master.c **** 
 2366              		.loc 1 757 0
 2367              		@ sp needed
 2368              	.LVL269:
 2369              	.LVL270:
 2370              	.LVL271:
 2371              	.LVL272:
 2372 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2373              	.L121:
 2374 0032 C046     		.align	2
 2375              	.L120:
 2376 0034 00E100E0 		.word	-536813312
 2377 0038 00000000 		.word	FLEXIO_I2C_MasterTransferHandleIRQ
 2378              		.cfi_endproc
 2379              	.LFE91:
 2381              		.section	.text.FLEXIO_I2C_MasterTransferNonBlocking,"ax",%progbits
 2382              		.align	1
 2383              		.global	FLEXIO_I2C_MasterTransferNonBlocking
 2384              		.syntax unified
 2385              		.code	16
 2386              		.thumb_func
 2387              		.fpu softvfp
 2389              	FLEXIO_I2C_MasterTransferNonBlocking:
 2390              	.LFB92:
 762:../drivers/fsl_flexio_i2c_master.c ****     assert(handle);
 2391              		.loc 1 762 0
 2392              		.cfi_startproc
 2393              		@ args = 0, pretend = 0, frame = 0
 2394              		@ frame_needed = 0, uses_anonymous_args = 0
 2395              	.LVL273:
 2396 0000 10B5     		push	{r4, lr}
 2397              		.cfi_def_cfa_offset 8
 2398              		.cfi_offset 4, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0400     		movs	r4, r0
 766:../drivers/fsl_flexio_i2c_master.c ****     {
 2401              		.loc 1 766 0
 2402 0004 0B7F     		ldrb	r3, [r1, #28]
 2403 0006 002B     		cmp	r3, #0
 2404 0008 07D1     		bne	.L124
 773:../drivers/fsl_flexio_i2c_master.c **** 
 2405              		.loc 1 773 0
 2406 000a FFF7FEFF 		bl	FLEXIO_I2C_MasterTransferInitStateMachine
 2407              	.LVL274:
 776:../drivers/fsl_flexio_i2c_master.c **** 
 2408              		.loc 1 776 0
 2409 000e 0321     		movs	r1, #3
 2410 0010 2000     		movs	r0, r4
 2411 0012 FFF7FEFF 		bl	FLEXIO_I2C_MasterEnableInterrupts
 2412              	.LVL275:
 778:../drivers/fsl_flexio_i2c_master.c ****     }
 2413              		.loc 1 778 0
 2414 0016 0020     		movs	r0, #0
 2415              	.L122:
 780:../drivers/fsl_flexio_i2c_master.c **** 
 2416              		.loc 1 780 0
 2417              		@ sp needed
 2418              	.LVL276:
 2419 0018 10BD     		pop	{r4, pc}
 2420              	.LVL277:
 2421              	.L124:
 768:../drivers/fsl_flexio_i2c_master.c ****     }
 2422              		.loc 1 768 0
 2423 001a C820     		movs	r0, #200
 2424              	.LVL278:
 2425 001c 8000     		lsls	r0, r0, #2
 2426 001e FBE7     		b	.L122
 2427              		.cfi_endproc
 2428              	.LFE92:
 2430              		.section	.text.FLEXIO_I2C_MasterTransferAbort,"ax",%progbits
 2431              		.align	1
 2432              		.global	FLEXIO_I2C_MasterTransferAbort
 2433              		.syntax unified
 2434              		.code	16
 2435              		.thumb_func
 2436              		.fpu softvfp
 2438              	FLEXIO_I2C_MasterTransferAbort:
 2439              	.LFB93:
 783:../drivers/fsl_flexio_i2c_master.c ****     assert(handle);
 2440              		.loc 1 783 0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              	.LVL279:
 2445 0000 10B5     		push	{r4, lr}
 2446              		.cfi_def_cfa_offset 8
 2447              		.cfi_offset 4, -8
 2448              		.cfi_offset 14, -4
 2449 0002 0C00     		movs	r4, r1
 787:../drivers/fsl_flexio_i2c_master.c **** 
 2450              		.loc 1 787 0
 2451 0004 0321     		movs	r1, #3
 2452              	.LVL280:
 2453 0006 FFF7FEFF 		bl	FLEXIO_I2C_MasterDisableInterrupts
 2454              	.LVL281:
 790:../drivers/fsl_flexio_i2c_master.c **** }
 2455              		.loc 1 790 0
 2456 000a 0023     		movs	r3, #0
 2457 000c 2377     		strb	r3, [r4, #28]
 791:../drivers/fsl_flexio_i2c_master.c **** 
 2458              		.loc 1 791 0
 2459              		@ sp needed
 2460              	.LVL282:
 2461 000e 10BD     		pop	{r4, pc}
 2462              		.cfi_endproc
 2463              	.LFE93:
 2465              		.section	.text.FLEXIO_I2C_MasterTransferGetCount,"ax",%progbits
 2466              		.align	1
 2467              		.global	FLEXIO_I2C_MasterTransferGetCount
 2468              		.syntax unified
 2469              		.code	16
 2470              		.thumb_func
 2471              		.fpu softvfp
 2473              	FLEXIO_I2C_MasterTransferGetCount:
 2474              	.LFB94:
 794:../drivers/fsl_flexio_i2c_master.c ****     if (!count)
 2475              		.loc 1 794 0
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 0
 2478              		@ frame_needed = 0, uses_anonymous_args = 0
 2479              		@ link register save eliminated.
 2480              	.LVL283:
 795:../drivers/fsl_flexio_i2c_master.c ****     {
 2481              		.loc 1 795 0
 2482 0000 002A     		cmp	r2, #0
 2483 0002 05D0     		beq	.L128
 800:../drivers/fsl_flexio_i2c_master.c **** 
 2484              		.loc 1 800 0
 2485 0004 8B69     		ldr	r3, [r1, #24]
 2486 0006 4969     		ldr	r1, [r1, #20]
 2487              	.LVL284:
 2488 0008 5B1A     		subs	r3, r3, r1
 2489 000a 1360     		str	r3, [r2]
 802:../drivers/fsl_flexio_i2c_master.c **** }
 2490              		.loc 1 802 0
 2491 000c 0020     		movs	r0, #0
 2492              	.LVL285:
 2493              	.L126:
 803:../drivers/fsl_flexio_i2c_master.c **** 
 2494              		.loc 1 803 0
 2495              		@ sp needed
 2496 000e 7047     		bx	lr
 2497              	.LVL286:
 2498              	.L128:
 797:../drivers/fsl_flexio_i2c_master.c ****     }
 2499              		.loc 1 797 0
 2500 0010 0420     		movs	r0, #4
 2501              	.LVL287:
 2502 0012 FCE7     		b	.L126
 2503              		.cfi_endproc
 2504              	.LFE94:
 2506              		.text
 2507              	.Letext0:
 2508              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2509              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2510              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 2511              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 2512              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 2513              		.file 11 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 2514              		.file 12 "../CMSIS/MKL17Z4.h"
 2515              		.file 13 "../CMSIS/system_MKL17Z4.h"
 2516              		.file 14 "../drivers/fsl_common.h"
 2517              		.file 15 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_flexio_i2c_master.c
     /tmp/cc5XFDl1.s:16     .text.FLEXIO_I2C_GetInstance:0000000000000000 $t
     /tmp/cc5XFDl1.s:23     .text.FLEXIO_I2C_GetInstance:0000000000000000 FLEXIO_I2C_GetInstance
     /tmp/cc5XFDl1.s:48     .text.FLEXIO_I2C_MasterInit:0000000000000000 $t
     /tmp/cc5XFDl1.s:55     .text.FLEXIO_I2C_MasterInit:0000000000000000 FLEXIO_I2C_MasterInit
     /tmp/cc5XFDl1.s:358    .text.FLEXIO_I2C_MasterInit:0000000000000170 $d
     /tmp/cc5XFDl1.s:365    .text.FLEXIO_I2C_MasterDeinit:0000000000000000 $t
     /tmp/cc5XFDl1.s:372    .text.FLEXIO_I2C_MasterDeinit:0000000000000000 FLEXIO_I2C_MasterDeinit
     /tmp/cc5XFDl1.s:481    .text.FLEXIO_I2C_MasterGetDefaultConfig:0000000000000000 $t
     /tmp/cc5XFDl1.s:488    .text.FLEXIO_I2C_MasterGetDefaultConfig:0000000000000000 FLEXIO_I2C_MasterGetDefaultConfig
     /tmp/cc5XFDl1.s:515    .text.FLEXIO_I2C_MasterGetDefaultConfig:0000000000000014 $d
     /tmp/cc5XFDl1.s:520    .text.FLEXIO_I2C_MasterGetStatusFlags:0000000000000000 $t
     /tmp/cc5XFDl1.s:527    .text.FLEXIO_I2C_MasterGetStatusFlags:0000000000000000 FLEXIO_I2C_MasterGetStatusFlags
     /tmp/cc5XFDl1.s:607    .text.FLEXIO_I2C_MasterClearStatusFlags:0000000000000000 $t
     /tmp/cc5XFDl1.s:614    .text.FLEXIO_I2C_MasterClearStatusFlags:0000000000000000 FLEXIO_I2C_MasterClearStatusFlags
     /tmp/cc5XFDl1.s:684    .text.FLEXIO_I2C_MasterEnableInterrupts:0000000000000000 $t
     /tmp/cc5XFDl1.s:691    .text.FLEXIO_I2C_MasterEnableInterrupts:0000000000000000 FLEXIO_I2C_MasterEnableInterrupts
     /tmp/cc5XFDl1.s:750    .text.FLEXIO_I2C_MasterDisableInterrupts:0000000000000000 $t
     /tmp/cc5XFDl1.s:757    .text.FLEXIO_I2C_MasterDisableInterrupts:0000000000000000 FLEXIO_I2C_MasterDisableInterrupts
     /tmp/cc5XFDl1.s:814    .text.FLEXIO_I2C_MasterTransferComplete:0000000000000000 $t
     /tmp/cc5XFDl1.s:820    .text.FLEXIO_I2C_MasterTransferComplete:0000000000000000 FLEXIO_I2C_MasterTransferComplete
     /tmp/cc5XFDl1.s:865    .text.FLEXIO_I2C_MasterSetBaudRate:0000000000000000 $t
     /tmp/cc5XFDl1.s:872    .text.FLEXIO_I2C_MasterSetBaudRate:0000000000000000 FLEXIO_I2C_MasterSetBaudRate
     /tmp/cc5XFDl1.s:929    .text.FLEXIO_I2C_MasterSetTransferCount:0000000000000000 $t
     /tmp/cc5XFDl1.s:936    .text.FLEXIO_I2C_MasterSetTransferCount:0000000000000000 FLEXIO_I2C_MasterSetTransferCount
     /tmp/cc5XFDl1.s:1014   .text.FLEXIO_I2C_MasterSetTransferCount:0000000000000044 $d
     /tmp/cc5XFDl1.s:1019   .text.FLEXIO_I2C_MasterStart:0000000000000000 $t
     /tmp/cc5XFDl1.s:1026   .text.FLEXIO_I2C_MasterStart:0000000000000000 FLEXIO_I2C_MasterStart
     /tmp/cc5XFDl1.s:1069   .text.FLEXIO_I2C_MasterTransferInitStateMachine:0000000000000000 $t
     /tmp/cc5XFDl1.s:1075   .text.FLEXIO_I2C_MasterTransferInitStateMachine:0000000000000000 FLEXIO_I2C_MasterTransferInitStateMachine
     /tmp/cc5XFDl1.s:1229   .text.FLEXIO_I2C_MasterRepeatedStart:0000000000000000 $t
     /tmp/cc5XFDl1.s:1236   .text.FLEXIO_I2C_MasterRepeatedStart:0000000000000000 FLEXIO_I2C_MasterRepeatedStart
     /tmp/cc5XFDl1.s:1264   .text.FLEXIO_I2C_MasterStop:0000000000000000 $t
     /tmp/cc5XFDl1.s:1271   .text.FLEXIO_I2C_MasterStop:0000000000000000 FLEXIO_I2C_MasterStop
     /tmp/cc5XFDl1.s:1307   .text.FLEXIO_I2C_MasterAbortStop:0000000000000000 $t
     /tmp/cc5XFDl1.s:1314   .text.FLEXIO_I2C_MasterAbortStop:0000000000000000 FLEXIO_I2C_MasterAbortStop
     /tmp/cc5XFDl1.s:1350   .text.FLEXIO_I2C_MasterAbortStop:000000000000001c $d
     /tmp/cc5XFDl1.s:1355   .text.FLEXIO_I2C_MasterEnableAck:0000000000000000 $t
     /tmp/cc5XFDl1.s:1362   .text.FLEXIO_I2C_MasterEnableAck:0000000000000000 FLEXIO_I2C_MasterEnableAck
     /tmp/cc5XFDl1.s:1415   .text.FLEXIO_I2C_MasterTransferRunStateMachine:0000000000000000 $t
     /tmp/cc5XFDl1.s:1421   .text.FLEXIO_I2C_MasterTransferRunStateMachine:0000000000000000 FLEXIO_I2C_MasterTransferRunStateMachine
     /tmp/cc5XFDl1.s:2003   .text.FLEXIO_I2C_MasterTransferRunStateMachine:0000000000000280 $d
     /tmp/cc5XFDl1.s:2008   .text.FLEXIO_I2C_MasterTransferHandleIRQ:0000000000000000 $t
     /tmp/cc5XFDl1.s:2015   .text.FLEXIO_I2C_MasterTransferHandleIRQ:0000000000000000 FLEXIO_I2C_MasterTransferHandleIRQ
     /tmp/cc5XFDl1.s:2068   .text.FLEXIO_I2C_MasterWriteBlocking:0000000000000000 $t
     /tmp/cc5XFDl1.s:2075   .text.FLEXIO_I2C_MasterWriteBlocking:0000000000000000 FLEXIO_I2C_MasterWriteBlocking
     /tmp/cc5XFDl1.s:2160   .text.FLEXIO_I2C_MasterWriteBlocking:0000000000000040 $d
     /tmp/cc5XFDl1.s:2165   .text.FLEXIO_I2C_MasterReadBlocking:0000000000000000 $t
     /tmp/cc5XFDl1.s:2172   .text.FLEXIO_I2C_MasterReadBlocking:0000000000000000 FLEXIO_I2C_MasterReadBlocking
     /tmp/cc5XFDl1.s:2233   .text.FLEXIO_I2C_MasterTransferBlocking:0000000000000000 $t
     /tmp/cc5XFDl1.s:2240   .text.FLEXIO_I2C_MasterTransferBlocking:0000000000000000 FLEXIO_I2C_MasterTransferBlocking
     /tmp/cc5XFDl1.s:2304   .text.FLEXIO_I2C_MasterTransferCreateHandle:0000000000000000 $t
     /tmp/cc5XFDl1.s:2311   .text.FLEXIO_I2C_MasterTransferCreateHandle:0000000000000000 FLEXIO_I2C_MasterTransferCreateHandle
     /tmp/cc5XFDl1.s:2376   .text.FLEXIO_I2C_MasterTransferCreateHandle:0000000000000034 $d
     /tmp/cc5XFDl1.s:2382   .text.FLEXIO_I2C_MasterTransferNonBlocking:0000000000000000 $t
     /tmp/cc5XFDl1.s:2389   .text.FLEXIO_I2C_MasterTransferNonBlocking:0000000000000000 FLEXIO_I2C_MasterTransferNonBlocking
     /tmp/cc5XFDl1.s:2431   .text.FLEXIO_I2C_MasterTransferAbort:0000000000000000 $t
     /tmp/cc5XFDl1.s:2438   .text.FLEXIO_I2C_MasterTransferAbort:0000000000000000 FLEXIO_I2C_MasterTransferAbort
     /tmp/cc5XFDl1.s:2466   .text.FLEXIO_I2C_MasterTransferGetCount:0000000000000000 $t
     /tmp/cc5XFDl1.s:2473   .text.FLEXIO_I2C_MasterTransferGetCount:0000000000000000 FLEXIO_I2C_MasterTransferGetCount

UNDEFINED SYMBOLS
FLEXIO_GetInstance
__aeabi_uidiv
memset
FLEXIO_SetShifterConfig
FLEXIO_SetTimerConfig
s_flexioClocks
FLEXIO_RegisterHandleIRQ
