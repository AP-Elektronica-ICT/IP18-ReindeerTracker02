   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"fsl_dac.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.DAC_GetInstance,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	DAC_GetInstance:
  23              	.LFB58:
  24              		.file 1 "../drivers/fsl_dac.c"
   1:../drivers/fsl_dac.c **** /*
   2:../drivers/fsl_dac.c ****  * The Clear BSD License
   3:../drivers/fsl_dac.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_dac.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_dac.c ****  * All rights reserved.
   6:../drivers/fsl_dac.c ****  *
   7:../drivers/fsl_dac.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_dac.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_dac.c ****  * that the following conditions are met:
  10:../drivers/fsl_dac.c ****  *
  11:../drivers/fsl_dac.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_dac.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_dac.c ****  *
  14:../drivers/fsl_dac.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_dac.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_dac.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_dac.c ****  *
  18:../drivers/fsl_dac.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_dac.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_dac.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_dac.c ****  *
  22:../drivers/fsl_dac.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_dac.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_dac.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_dac.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_dac.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_dac.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_dac.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_dac.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_dac.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_dac.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_dac.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_dac.c ****  */
  34:../drivers/fsl_dac.c **** 
  35:../drivers/fsl_dac.c **** #include "fsl_dac.h"
  36:../drivers/fsl_dac.c **** 
  37:../drivers/fsl_dac.c **** /*******************************************************************************
  38:../drivers/fsl_dac.c ****  * Prototypes
  39:../drivers/fsl_dac.c ****  ******************************************************************************/
  40:../drivers/fsl_dac.c **** /*!
  41:../drivers/fsl_dac.c ****  * @brief Get instance number for DAC module.
  42:../drivers/fsl_dac.c ****  *
  43:../drivers/fsl_dac.c ****  * @param base DAC peripheral base address
  44:../drivers/fsl_dac.c ****  */
  45:../drivers/fsl_dac.c **** static uint32_t DAC_GetInstance(DAC_Type *base);
  46:../drivers/fsl_dac.c **** 
  47:../drivers/fsl_dac.c **** /*******************************************************************************
  48:../drivers/fsl_dac.c ****  * Variables
  49:../drivers/fsl_dac.c ****  ******************************************************************************/
  50:../drivers/fsl_dac.c **** /*! @brief Pointers to DAC bases for each instance. */
  51:../drivers/fsl_dac.c **** static DAC_Type *const s_dacBases[] = DAC_BASE_PTRS;
  52:../drivers/fsl_dac.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  53:../drivers/fsl_dac.c **** /*! @brief Pointers to DAC clocks for each instance. */
  54:../drivers/fsl_dac.c **** static const clock_ip_name_t s_dacClocks[] = DAC_CLOCKS;
  55:../drivers/fsl_dac.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  56:../drivers/fsl_dac.c **** 
  57:../drivers/fsl_dac.c **** /*******************************************************************************
  58:../drivers/fsl_dac.c ****  * Codes
  59:../drivers/fsl_dac.c ****  ******************************************************************************/
  60:../drivers/fsl_dac.c **** static uint32_t DAC_GetInstance(DAC_Type *base)
  61:../drivers/fsl_dac.c **** {
  25              		.loc 1 61 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  62:../drivers/fsl_dac.c ****     uint32_t instance;
  63:../drivers/fsl_dac.c **** 
  64:../drivers/fsl_dac.c ****     /* Find the instance index from base address mappings. */
  65:../drivers/fsl_dac.c ****     for (instance = 0; instance < ARRAY_SIZE(s_dacBases); instance++)
  31              		.loc 1 65 0
  32 0000 0023     		movs	r3, #0
  33              	.LVL1:
  34              	.L2:
  35              		.loc 1 65 0 is_stmt 0 discriminator 1
  36 0002 002B     		cmp	r3, #0
  37 0004 01D0     		beq	.L4
  38              	.L1:
  66:../drivers/fsl_dac.c ****     {
  67:../drivers/fsl_dac.c ****         if (s_dacBases[instance] == base)
  68:../drivers/fsl_dac.c ****         {
  69:../drivers/fsl_dac.c ****             break;
  70:../drivers/fsl_dac.c ****         }
  71:../drivers/fsl_dac.c ****     }
  72:../drivers/fsl_dac.c **** 
  73:../drivers/fsl_dac.c ****     assert(instance < ARRAY_SIZE(s_dacBases));
  74:../drivers/fsl_dac.c **** 
  75:../drivers/fsl_dac.c ****     return instance;
  76:../drivers/fsl_dac.c **** }
  39              		.loc 1 76 0 is_stmt 1
  40 0006 1800     		movs	r0, r3
  41              	.LVL2:
  42              		@ sp needed
  43 0008 7047     		bx	lr
  44              	.LVL3:
  45              	.L4:
  67:../drivers/fsl_dac.c ****         {
  46              		.loc 1 67 0
  47 000a 024A     		ldr	r2, .L5
  48 000c 9042     		cmp	r0, r2
  49 000e FAD0     		beq	.L1
  65:../drivers/fsl_dac.c ****     {
  50              		.loc 1 65 0 discriminator 2
  51 0010 0133     		adds	r3, r3, #1
  52              	.LVL4:
  53 0012 F6E7     		b	.L2
  54              	.L6:
  55              		.align	2
  56              	.L5:
  57 0014 00F00340 		.word	1073999872
  58              		.cfi_endproc
  59              	.LFE58:
  61              		.section	.text.DAC_Init,"ax",%progbits
  62              		.align	1
  63              		.global	DAC_Init
  64              		.syntax unified
  65              		.code	16
  66              		.thumb_func
  67              		.fpu softvfp
  69              	DAC_Init:
  70              	.LFB59:
  77:../drivers/fsl_dac.c **** 
  78:../drivers/fsl_dac.c **** void DAC_Init(DAC_Type *base, const dac_config_t *config)
  79:../drivers/fsl_dac.c **** {
  71              		.loc 1 79 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              	.LVL5:
  76 0000 70B5     		push	{r4, r5, r6, lr}
  77              		.cfi_def_cfa_offset 16
  78              		.cfi_offset 4, -16
  79              		.cfi_offset 5, -12
  80              		.cfi_offset 6, -8
  81              		.cfi_offset 14, -4
  82 0002 0400     		movs	r4, r0
  83 0004 0D00     		movs	r5, r1
  80:../drivers/fsl_dac.c ****     assert(NULL != config);
  81:../drivers/fsl_dac.c **** 
  82:../drivers/fsl_dac.c ****     uint8_t tmp8;
  83:../drivers/fsl_dac.c **** 
  84:../drivers/fsl_dac.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  85:../drivers/fsl_dac.c ****     /* Enable the clock. */
  86:../drivers/fsl_dac.c ****     CLOCK_EnableClock(s_dacClocks[DAC_GetInstance(base)]);
  84              		.loc 1 86 0
  85 0006 FFF7FEFF 		bl	DAC_GetInstance
  86              	.LVL6:
  87              	.LBB8:
  88              	.LBB9:
  89              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  53:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  54:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  55:../drivers/fsl_clock.h ****  * the driver.
  56:../drivers/fsl_clock.h ****  *
  57:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  58:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  59:../drivers/fsl_clock.h ****  */
  60:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  61:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  62:../drivers/fsl_clock.h **** #endif
  63:../drivers/fsl_clock.h **** 
  64:../drivers/fsl_clock.h **** /*******************************************************************************
  65:../drivers/fsl_clock.h ****  * Definitions
  66:../drivers/fsl_clock.h ****  ******************************************************************************/
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @name Driver version */
  69:../drivers/fsl_clock.h **** /*@{*/
  70:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.1.1. */
  71:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 1, 1))
  72:../drivers/fsl_clock.h **** /*@}*/
  73:../drivers/fsl_clock.h **** 
  74:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  75:../drivers/fsl_clock.h ****  *
  76:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  77:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  78:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  79:../drivers/fsl_clock.h ****  * @code
  80:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  81:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to clock driver.
  82:../drivers/fsl_clock.h ****  * @endcode
  83:../drivers/fsl_clock.h ****  *
  84:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up the
  85:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
  86:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  87:../drivers/fsl_clock.h ****  */
  88:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
  89:../drivers/fsl_clock.h **** 
  90:../drivers/fsl_clock.h **** /*! @brief The external XTAL32/EXTAL32/RTC_CLKIN clock frequency.
  91:../drivers/fsl_clock.h ****  *
  92:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
  93:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
  94:../drivers/fsl_clock.h ****  *
  95:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where one core needs to set up
  96:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
  97:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
  98:../drivers/fsl_clock.h ****  */
  99:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 100:../drivers/fsl_clock.h **** 
 101:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 102:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 103:../drivers/fsl_clock.h ****     {                  \
 104:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 105:../drivers/fsl_clock.h ****     }
 106:../drivers/fsl_clock.h **** 
 107:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 108:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 109:../drivers/fsl_clock.h ****     {               \
 110:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 111:../drivers/fsl_clock.h ****     }
 112:../drivers/fsl_clock.h **** 
 113:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 114:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 115:../drivers/fsl_clock.h ****     {               \
 116:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 117:../drivers/fsl_clock.h ****     }
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SPI. */
 120:../drivers/fsl_clock.h **** #define SPI_CLOCKS               \
 121:../drivers/fsl_clock.h ****     {                            \
 122:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1 \
 123:../drivers/fsl_clock.h ****     }
 124:../drivers/fsl_clock.h **** 
 125:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 126:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 127:../drivers/fsl_clock.h ****     {               \
 128:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 129:../drivers/fsl_clock.h ****     }
 130:../drivers/fsl_clock.h **** 
 131:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 132:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 133:../drivers/fsl_clock.h ****     {                                                                        \
 134:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 135:../drivers/fsl_clock.h ****     }
 136:../drivers/fsl_clock.h **** 
 137:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPUART. */
 138:../drivers/fsl_clock.h **** #define LPUART_CLOCKS                  \
 139:../drivers/fsl_clock.h ****     {                                  \
 140:../drivers/fsl_clock.h ****         kCLOCK_Lpuart0, kCLOCK_Lpuart1 \
 141:../drivers/fsl_clock.h ****     }
 142:../drivers/fsl_clock.h **** 
 143:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 144:../drivers/fsl_clock.h **** #define DAC_CLOCKS  \
 145:../drivers/fsl_clock.h ****     {               \
 146:../drivers/fsl_clock.h ****         kCLOCK_Dac0 \
 147:../drivers/fsl_clock.h ****     }
 148:../drivers/fsl_clock.h **** 
 149:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 150:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 151:../drivers/fsl_clock.h ****     {                 \
 152:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 153:../drivers/fsl_clock.h ****     }
 154:../drivers/fsl_clock.h **** 
 155:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 156:../drivers/fsl_clock.h **** #define ADC16_CLOCKS \
 157:../drivers/fsl_clock.h ****     {                \
 158:../drivers/fsl_clock.h ****         kCLOCK_Adc0  \
 159:../drivers/fsl_clock.h ****     }
 160:../drivers/fsl_clock.h **** 
 161:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXIO. */
 162:../drivers/fsl_clock.h **** #define FLEXIO_CLOCKS  \
 163:../drivers/fsl_clock.h ****     {                  \
 164:../drivers/fsl_clock.h ****         kCLOCK_Flexio0 \
 165:../drivers/fsl_clock.h ****     }
 166:../drivers/fsl_clock.h **** 
 167:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 168:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 169:../drivers/fsl_clock.h ****     {                \
 170:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 171:../drivers/fsl_clock.h ****     }
 172:../drivers/fsl_clock.h **** 
 173:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMA. */
 174:../drivers/fsl_clock.h **** #define DMA_CLOCKS  \
 175:../drivers/fsl_clock.h ****     {               \
 176:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 177:../drivers/fsl_clock.h ****     }
 178:../drivers/fsl_clock.h **** 
 179:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 180:../drivers/fsl_clock.h **** #define UART_CLOCKS                                      \
 181:../drivers/fsl_clock.h ****     {                                                    \
 182:../drivers/fsl_clock.h ****         kCLOCK_IpInvalid, kCLOCK_IpInvalid, kCLOCK_Uart2 \
 183:../drivers/fsl_clock.h ****     }
 184:../drivers/fsl_clock.h **** 
 185:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for TPM. */
 186:../drivers/fsl_clock.h **** #define TPM_CLOCKS                            \
 187:../drivers/fsl_clock.h ****     {                                         \
 188:../drivers/fsl_clock.h ****         kCLOCK_Tpm0, kCLOCK_Tpm1, kCLOCK_Tpm2 \
 189:../drivers/fsl_clock.h ****     }
 190:../drivers/fsl_clock.h **** 
 191:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 192:../drivers/fsl_clock.h **** #define I2C_CLOCKS               \
 193:../drivers/fsl_clock.h ****     {                            \
 194:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1 \
 195:../drivers/fsl_clock.h ****     }
 196:../drivers/fsl_clock.h **** 
 197:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 198:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 199:../drivers/fsl_clock.h ****     {               \
 200:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 201:../drivers/fsl_clock.h ****     }
 202:../drivers/fsl_clock.h **** 
 203:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 204:../drivers/fsl_clock.h **** #define CMP_CLOCKS  \
 205:../drivers/fsl_clock.h ****     {               \
 206:../drivers/fsl_clock.h ****         kCLOCK_Cmp0 \
 207:../drivers/fsl_clock.h ****     }
 208:../drivers/fsl_clock.h **** 
 209:../drivers/fsl_clock.h **** /*!
 210:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 211:../drivers/fsl_clock.h ****  */
 212:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 213:../drivers/fsl_clock.h **** 
 214:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 215:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 216:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 217:../drivers/fsl_clock.h **** 
 218:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC SYS_CLK
 219:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC SYS_CLK
 220:../drivers/fsl_clock.h **** #define SPI0_CLK_SRC BUS_CLK
 221:../drivers/fsl_clock.h **** #define SPI1_CLK_SRC SYS_CLK
 222:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 223:../drivers/fsl_clock.h **** 
 224:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 225:../drivers/fsl_clock.h **** typedef enum _clock_name
 226:../drivers/fsl_clock.h **** {
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 229:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 230:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 231:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 232:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 233:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 234:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 235:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 236:../drivers/fsl_clock.h **** 
 237:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 238:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 239:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 240:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 241:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 242:../drivers/fsl_clock.h **** 
 243:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 244:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 245:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 246:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 247:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 248:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 249:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 250:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 251:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 252:../drivers/fsl_clock.h **** 
 253:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 254:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 255:../drivers/fsl_clock.h **** 
 256:../drivers/fsl_clock.h **** } clock_name_t;
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 259:../drivers/fsl_clock.h **** 
 260:../drivers/fsl_clock.h ****  clock_gate_t definition:
 261:../drivers/fsl_clock.h **** 
 262:../drivers/fsl_clock.h ****  31                              16                              0
 263:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 264:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 265:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 266:../drivers/fsl_clock.h **** 
 267:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 268:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 271:../drivers/fsl_clock.h **** 
 272:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 273:../drivers/fsl_clock.h **** 
 274:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 275:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 276:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 277:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 278:../drivers/fsl_clock.h **** 
 279:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 280:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 281:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 282:../drivers/fsl_clock.h **** 
 283:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 284:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 285:../drivers/fsl_clock.h **** 
 286:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 287:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 288:../drivers/fsl_clock.h **** {
 289:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 290:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 291:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 292:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 293:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 294:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 295:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x1034U, 22U),
 296:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x1034U, 23U),
 297:../drivers/fsl_clock.h **** 
 298:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 299:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 300:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 301:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 302:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 303:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 304:../drivers/fsl_clock.h ****     kCLOCK_Lpuart0 = CLK_GATE_DEFINE(0x1038U, 20U),
 305:../drivers/fsl_clock.h ****     kCLOCK_Lpuart1 = CLK_GATE_DEFINE(0x1038U, 21U),
 306:../drivers/fsl_clock.h ****     kCLOCK_Flexio0 = CLK_GATE_DEFINE(0x1038U, 31U),
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 309:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 310:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 311:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 312:../drivers/fsl_clock.h ****     kCLOCK_Tpm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 313:../drivers/fsl_clock.h ****     kCLOCK_Tpm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 314:../drivers/fsl_clock.h ****     kCLOCK_Tpm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 315:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 316:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 317:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x103CU, 31U),
 318:../drivers/fsl_clock.h **** 
 319:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 8U),
 320:../drivers/fsl_clock.h **** } clock_ip_name_t;
 321:../drivers/fsl_clock.h **** 
 322:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 323:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 324:../drivers/fsl_clock.h **** {
 325:../drivers/fsl_clock.h ****     uint8_t er32kSrc; /*!< ERCLK32K source selection.   */
 326:../drivers/fsl_clock.h ****     uint32_t clkdiv1; /*!< SIM_CLKDIV1.                 */
 327:../drivers/fsl_clock.h **** } sim_clock_config_t;
 328:../drivers/fsl_clock.h **** 
 329:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 330:../drivers/fsl_clock.h **** enum _osc_cap_load
 331:../drivers/fsl_clock.h **** {
 332:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 333:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 334:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 335:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 336:../drivers/fsl_clock.h **** };
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 339:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 342:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 343:../drivers/fsl_clock.h **** };
 344:../drivers/fsl_clock.h **** 
 345:../drivers/fsl_clock.h **** /*! @brief The OSC configuration for OSCERCLK. */
 346:../drivers/fsl_clock.h **** typedef struct _oscer_config
 347:../drivers/fsl_clock.h **** {
 348:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of \ref _oscer_enable_mode. */
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h **** } oscer_config_t;
 351:../drivers/fsl_clock.h **** 
 352:../drivers/fsl_clock.h **** /*! @brief The OSC work mode. */
 353:../drivers/fsl_clock.h **** typedef enum _osc_mode
 354:../drivers/fsl_clock.h **** {
 355:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U,                                            /*!< Use external clock.   */
 356:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK,                    /*!< Oscillator low power. */
 357:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = MCG_C2_EREFS0_MASK | MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 358:../drivers/fsl_clock.h **** } osc_mode_t;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** /*!
 361:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 362:../drivers/fsl_clock.h ****  *
 363:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 364:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 365:../drivers/fsl_clock.h ****  * according to the board settings:
 366:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 367:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 368:../drivers/fsl_clock.h ****  */
 369:../drivers/fsl_clock.h **** typedef struct _osc_config
 370:../drivers/fsl_clock.h **** {
 371:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 372:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 373:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 374:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 375:../drivers/fsl_clock.h **** } osc_config_t;
 376:../drivers/fsl_clock.h **** 
 377:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock source selection. */
 378:../drivers/fsl_clock.h **** typedef enum _mcglite_clkout_src
 379:../drivers/fsl_clock.h **** {
 380:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcHirc, /*!< MCGOUTCLK source is HIRC */
 381:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcLirc, /*!< MCGOUTCLK source is LIRC */
 382:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcExt,  /*!< MCGOUTCLK source is external clock source */
 383:../drivers/fsl_clock.h ****     kMCGLITE_ClkSrcReserved
 384:../drivers/fsl_clock.h **** } mcglite_clkout_src_t;
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h **** /*! @brief MCG_Lite LIRC select. */
 387:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_mode
 388:../drivers/fsl_clock.h **** {
 389:../drivers/fsl_clock.h ****     kMCGLITE_Lirc2M, /*!< Slow internal reference(LIRC) 2 MHz clock selected */
 390:../drivers/fsl_clock.h ****     kMCGLITE_Lirc8M, /*!< Slow internal reference(LIRC) 8 MHz clock selected */
 391:../drivers/fsl_clock.h **** } mcglite_lirc_mode_t;
 392:../drivers/fsl_clock.h **** 
 393:../drivers/fsl_clock.h **** /*! @brief MCG_Lite divider factor selection for clock source*/
 394:../drivers/fsl_clock.h **** typedef enum _mcglite_lirc_div
 395:../drivers/fsl_clock.h **** {
 396:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy1 = 0U, /*!< Divider is 1    */
 397:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy2,      /*!< Divider is 2    */
 398:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy4,      /*!< Divider is 4    */
 399:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy8,      /*!< Divider is 8    */
 400:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy16,     /*!< Divider is 16   */
 401:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy32,     /*!< Divider is 32   */
 402:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy64,     /*!< Divider is 64   */
 403:../drivers/fsl_clock.h ****     kMCGLITE_LircDivBy128     /*!< Divider is 128  */
 404:../drivers/fsl_clock.h **** } mcglite_lirc_div_t;
 405:../drivers/fsl_clock.h **** 
 406:../drivers/fsl_clock.h **** /*! @brief MCG_Lite clock mode definitions */
 407:../drivers/fsl_clock.h **** typedef enum _mcglite_mode
 408:../drivers/fsl_clock.h **** {
 409:../drivers/fsl_clock.h ****     kMCGLITE_ModeHirc48M, /*!< Clock mode is HIRC 48 M  */
 410:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc8M,  /*!< Clock mode is LIRC 8 M   */
 411:../drivers/fsl_clock.h ****     kMCGLITE_ModeLirc2M,  /*!< Clock mode is LIRC 2 M   */
 412:../drivers/fsl_clock.h ****     kMCGLITE_ModeExt,     /*!< Clock mode is EXT       */
 413:../drivers/fsl_clock.h ****     kMCGLITE_ModeError    /*!< Unknown mode            */
 414:../drivers/fsl_clock.h **** } mcglite_mode_t;
 415:../drivers/fsl_clock.h **** 
 416:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 417:../drivers/fsl_clock.h **** enum _mcglite_irclk_enable_mode
 418:../drivers/fsl_clock.h **** {
 419:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 420:../drivers/fsl_clock.h ****     kMCGLITE_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 421:../drivers/fsl_clock.h **** };
 422:../drivers/fsl_clock.h **** 
 423:../drivers/fsl_clock.h **** /*! @brief MCG_Lite configure structure for mode change. */
 424:../drivers/fsl_clock.h **** typedef struct _mcglite_config
 425:../drivers/fsl_clock.h **** {
 426:../drivers/fsl_clock.h ****     mcglite_clkout_src_t outSrc;  /*!< MCGOUT clock select.                */
 427:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode;      /*!< MCGIRCLK enable mode, OR'ed value of _mcglite_irclk_enable_m
 428:../drivers/fsl_clock.h ****     mcglite_lirc_mode_t ircs;     /*!< MCG_C2[IRCS].                       */
 429:../drivers/fsl_clock.h ****     mcglite_lirc_div_t fcrdiv;    /*!< MCG_SC[FCRDIV].                     */
 430:../drivers/fsl_clock.h ****     mcglite_lirc_div_t lircDiv2;  /*!< MCG_MC[LIRC_DIV2].                  */
 431:../drivers/fsl_clock.h ****     bool hircEnableInNotHircMode; /*!< HIRC enable when not in HIRC mode.  */
 432:../drivers/fsl_clock.h **** } mcglite_config_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*******************************************************************************
 435:../drivers/fsl_clock.h ****  * API
 436:../drivers/fsl_clock.h ****  ******************************************************************************/
 437:../drivers/fsl_clock.h **** 
 438:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 439:../drivers/fsl_clock.h **** extern "C" {
 440:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*!
 443:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 444:../drivers/fsl_clock.h ****  *
 445:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 446:../drivers/fsl_clock.h ****  */
 447:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 448:../drivers/fsl_clock.h **** {
 449:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 450:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
  90              		.loc 2 450 0
  91 000a 0C4A     		ldr	r2, .L11
  92 000c 1168     		ldr	r1, [r2]
  93 000e 8023     		movs	r3, #128
  94 0010 1B06     		lsls	r3, r3, #24
  95 0012 0B43     		orrs	r3, r1
  96 0014 1360     		str	r3, [r2]
  97              	.LVL7:
  98              	.LBE9:
  99              	.LBE8:
  87:../drivers/fsl_dac.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  88:../drivers/fsl_dac.c **** 
  89:../drivers/fsl_dac.c ****     /* Configure. */
  90:../drivers/fsl_dac.c ****     /* DACx_C0. */
  91:../drivers/fsl_dac.c ****     tmp8 = base->C0 & ~(DAC_C0_DACRFS_MASK | DAC_C0_LPEN_MASK);
 100              		.loc 1 91 0
 101 0016 2123     		movs	r3, #33
 102 0018 E35C     		ldrb	r3, [r4, r3]
 103 001a 4822     		movs	r2, #72
 104 001c 9343     		bics	r3, r2
 105              	.LVL8:
  92:../drivers/fsl_dac.c ****     if (kDAC_ReferenceVoltageSourceVref2 == config->referenceVoltageSource)
 106              		.loc 1 92 0
 107 001e 2A78     		ldrb	r2, [r5]
 108 0020 012A     		cmp	r2, #1
 109 0022 07D0     		beq	.L10
 110              	.L8:
  93:../drivers/fsl_dac.c ****     {
  94:../drivers/fsl_dac.c ****         tmp8 |= DAC_C0_DACRFS_MASK;
  95:../drivers/fsl_dac.c ****     }
  96:../drivers/fsl_dac.c ****     if (config->enableLowPowerMode)
 111              		.loc 1 96 0
 112 0024 6A78     		ldrb	r2, [r5, #1]
 113 0026 002A     		cmp	r2, #0
 114 0028 01D0     		beq	.L9
  97:../drivers/fsl_dac.c ****     {
  98:../drivers/fsl_dac.c ****         tmp8 |= DAC_C0_LPEN_MASK;
 115              		.loc 1 98 0
 116 002a 0822     		movs	r2, #8
 117 002c 1343     		orrs	r3, r2
 118              	.LVL9:
 119              	.L9:
  99:../drivers/fsl_dac.c ****     }
 100:../drivers/fsl_dac.c ****     base->C0 = tmp8;
 120              		.loc 1 100 0
 121 002e 2122     		movs	r2, #33
 122 0030 A354     		strb	r3, [r4, r2]
 101:../drivers/fsl_dac.c **** 
 102:../drivers/fsl_dac.c ****     /* DAC_Enable(base, true); */
 103:../drivers/fsl_dac.c ****     /* Tip: The DAC output can be enabled till then after user sets their own available data in app
 104:../drivers/fsl_dac.c **** }
 123              		.loc 1 104 0
 124              		@ sp needed
 125              	.LVL10:
 126              	.LVL11:
 127 0032 70BD     		pop	{r4, r5, r6, pc}
 128              	.LVL12:
 129              	.L10:
  94:../drivers/fsl_dac.c ****     }
 130              		.loc 1 94 0
 131 0034 4022     		movs	r2, #64
 132 0036 1343     		orrs	r3, r2
 133              	.LVL13:
 134 0038 F4E7     		b	.L8
 135              	.L12:
 136 003a C046     		.align	2
 137              	.L11:
 138 003c 3C800440 		.word	1074036796
 139              		.cfi_endproc
 140              	.LFE59:
 142              		.section	.text.DAC_Deinit,"ax",%progbits
 143              		.align	1
 144              		.global	DAC_Deinit
 145              		.syntax unified
 146              		.code	16
 147              		.thumb_func
 148              		.fpu softvfp
 150              	DAC_Deinit:
 151              	.LFB60:
 105:../drivers/fsl_dac.c **** 
 106:../drivers/fsl_dac.c **** void DAC_Deinit(DAC_Type *base)
 107:../drivers/fsl_dac.c **** {
 152              		.loc 1 107 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL14:
 157 0000 10B5     		push	{r4, lr}
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 4, -8
 160              		.cfi_offset 14, -4
 161              	.LVL15:
 162              	.LBB10:
 163              	.LBB11:
 164              		.file 3 "../drivers/fsl_dac.h"
   1:../drivers/fsl_dac.h **** /*
   2:../drivers/fsl_dac.h ****  * The Clear BSD License
   3:../drivers/fsl_dac.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_dac.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_dac.h ****  * All rights reserved.
   6:../drivers/fsl_dac.h ****  *
   7:../drivers/fsl_dac.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_dac.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_dac.h ****  * that the following conditions are met:
  10:../drivers/fsl_dac.h ****  *
  11:../drivers/fsl_dac.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_dac.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_dac.h ****  *
  14:../drivers/fsl_dac.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_dac.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_dac.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_dac.h ****  *
  18:../drivers/fsl_dac.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_dac.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_dac.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_dac.h ****  *
  22:../drivers/fsl_dac.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_dac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_dac.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_dac.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_dac.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_dac.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_dac.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_dac.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_dac.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_dac.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_dac.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_dac.h ****  */
  34:../drivers/fsl_dac.h **** 
  35:../drivers/fsl_dac.h **** #ifndef _FSL_DAC_H_
  36:../drivers/fsl_dac.h **** #define _FSL_DAC_H_
  37:../drivers/fsl_dac.h **** 
  38:../drivers/fsl_dac.h **** #include "fsl_common.h"
  39:../drivers/fsl_dac.h **** 
  40:../drivers/fsl_dac.h **** /*!
  41:../drivers/fsl_dac.h ****  * @addtogroup dac
  42:../drivers/fsl_dac.h ****  * @{
  43:../drivers/fsl_dac.h ****  */
  44:../drivers/fsl_dac.h **** 
  45:../drivers/fsl_dac.h **** 
  46:../drivers/fsl_dac.h **** /*******************************************************************************
  47:../drivers/fsl_dac.h ****  * Definitions
  48:../drivers/fsl_dac.h ****  ******************************************************************************/
  49:../drivers/fsl_dac.h **** 
  50:../drivers/fsl_dac.h **** /*! @name Driver version */
  51:../drivers/fsl_dac.h **** /*@{*/
  52:../drivers/fsl_dac.h **** /*! @brief DAC driver version 2.0.1. */
  53:../drivers/fsl_dac.h **** #define FSL_DAC_DRIVER_VERSION (MAKE_VERSION(2, 0, 1))
  54:../drivers/fsl_dac.h **** /*@}*/
  55:../drivers/fsl_dac.h **** 
  56:../drivers/fsl_dac.h **** /*!
  57:../drivers/fsl_dac.h ****  * @brief DAC buffer flags.
  58:../drivers/fsl_dac.h ****  */
  59:../drivers/fsl_dac.h **** enum _dac_buffer_status_flags
  60:../drivers/fsl_dac.h **** {
  61:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION
  62:../drivers/fsl_dac.h ****     kDAC_BufferWatermarkFlag = DAC_SR_DACBFWMF_MASK,                  /*!< DAC Buffer Watermark Fla
  63:../drivers/fsl_dac.h **** #endif                                                                /* FSL_FEATURE_DAC_HAS_WATERM
  64:../drivers/fsl_dac.h ****     kDAC_BufferReadPointerTopPositionFlag = DAC_SR_DACBFRPTF_MASK,    /*!< DAC Buffer Read Pointer 
  65:../drivers/fsl_dac.h ****     kDAC_BufferReadPointerBottomPositionFlag = DAC_SR_DACBFRPBF_MASK, /*!< DAC Buffer Read Pointer 
  66:../drivers/fsl_dac.h ****                                                                            Flag. */
  67:../drivers/fsl_dac.h **** };
  68:../drivers/fsl_dac.h **** 
  69:../drivers/fsl_dac.h **** /*!
  70:../drivers/fsl_dac.h ****  * @brief DAC buffer interrupts.
  71:../drivers/fsl_dac.h ****  */
  72:../drivers/fsl_dac.h **** enum _dac_buffer_interrupt_enable
  73:../drivers/fsl_dac.h **** {
  74:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION
  75:../drivers/fsl_dac.h ****     kDAC_BufferWatermarkInterruptEnable = DAC_C0_DACBWIEN_MASK,         /*!< DAC Buffer Watermark I
  76:../drivers/fsl_dac.h **** #endif                                                                  /* FSL_FEATURE_DAC_HAS_WATE
  77:../drivers/fsl_dac.h ****     kDAC_BufferReadPointerTopInterruptEnable = DAC_C0_DACBTIEN_MASK,    /*!< DAC Buffer Read Pointe
  78:../drivers/fsl_dac.h ****                                                                              Enable. */
  79:../drivers/fsl_dac.h ****     kDAC_BufferReadPointerBottomInterruptEnable = DAC_C0_DACBBIEN_MASK, /*!< DAC Buffer Read Pointe
  80:../drivers/fsl_dac.h ****                                                                              Interrupt Enable */
  81:../drivers/fsl_dac.h **** };
  82:../drivers/fsl_dac.h **** 
  83:../drivers/fsl_dac.h **** /*!
  84:../drivers/fsl_dac.h ****  * @brief DAC reference voltage source.
  85:../drivers/fsl_dac.h ****  */
  86:../drivers/fsl_dac.h **** typedef enum _dac_reference_voltage_source
  87:../drivers/fsl_dac.h **** {
  88:../drivers/fsl_dac.h ****     kDAC_ReferenceVoltageSourceVref1 = 0U, /*!< The DAC selects DACREF_1 as the reference voltage. 
  89:../drivers/fsl_dac.h ****     kDAC_ReferenceVoltageSourceVref2 = 1U, /*!< The DAC selects DACREF_2 as the reference voltage. 
  90:../drivers/fsl_dac.h **** } dac_reference_voltage_source_t;
  91:../drivers/fsl_dac.h **** 
  92:../drivers/fsl_dac.h **** /*!
  93:../drivers/fsl_dac.h ****  * @brief DAC buffer trigger mode.
  94:../drivers/fsl_dac.h ****  */
  95:../drivers/fsl_dac.h **** typedef enum _dac_buffer_trigger_mode
  96:../drivers/fsl_dac.h **** {
  97:../drivers/fsl_dac.h ****     kDAC_BufferTriggerByHardwareMode = 0U, /*!< The DAC hardware trigger is selected. */
  98:../drivers/fsl_dac.h ****     kDAC_BufferTriggerBySoftwareMode = 1U, /*!< The DAC software trigger is selected. */
  99:../drivers/fsl_dac.h **** } dac_buffer_trigger_mode_t;
 100:../drivers/fsl_dac.h **** 
 101:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION
 102:../drivers/fsl_dac.h **** /*!
 103:../drivers/fsl_dac.h ****  * @brief DAC buffer watermark.
 104:../drivers/fsl_dac.h ****  */
 105:../drivers/fsl_dac.h **** typedef enum _dac_buffer_watermark
 106:../drivers/fsl_dac.h **** {
 107:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_1_WORD) && FSL_FEATURE_DAC_HAS_WATERMARK_1_WORD
 108:../drivers/fsl_dac.h ****     kDAC_BufferWatermark1Word = 0U, /*!< 1 word  away from the upper limit. */
 109:../drivers/fsl_dac.h **** #endif                              /* FSL_FEATURE_DAC_HAS_WATERMARK_1_WORD */
 110:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_2_WORDS) && FSL_FEATURE_DAC_HAS_WATERMARK_2_WORDS
 111:../drivers/fsl_dac.h ****     kDAC_BufferWatermark2Word = 1U, /*!< 2 words away from the upper limit. */
 112:../drivers/fsl_dac.h **** #endif                              /* FSL_FEATURE_DAC_HAS_WATERMARK_2_WORDS */
 113:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_3_WORDS) && FSL_FEATURE_DAC_HAS_WATERMARK_3_WORDS
 114:../drivers/fsl_dac.h ****     kDAC_BufferWatermark3Word = 2U, /*!< 3 words away from the upper limit. */
 115:../drivers/fsl_dac.h **** #endif                              /* FSL_FEATURE_DAC_HAS_WATERMARK_3_WORDS */
 116:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_4_WORDS) && FSL_FEATURE_DAC_HAS_WATERMARK_4_WORDS
 117:../drivers/fsl_dac.h ****     kDAC_BufferWatermark4Word = 3U, /*!< 4 words away from the upper limit. */
 118:../drivers/fsl_dac.h **** #endif                              /* FSL_FEATURE_DAC_HAS_WATERMARK_4_WORDS */
 119:../drivers/fsl_dac.h **** } dac_buffer_watermark_t;
 120:../drivers/fsl_dac.h **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION */
 121:../drivers/fsl_dac.h **** 
 122:../drivers/fsl_dac.h **** /*!
 123:../drivers/fsl_dac.h ****  * @brief DAC buffer work mode.
 124:../drivers/fsl_dac.h ****  */
 125:../drivers/fsl_dac.h **** typedef enum _dac_buffer_work_mode
 126:../drivers/fsl_dac.h **** {
 127:../drivers/fsl_dac.h ****     kDAC_BufferWorkAsNormalMode = 0U, /*!< Normal mode. */
 128:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_BUFFER_SWING_MODE) && FSL_FEATURE_DAC_HAS_BUFFER_SWING_MODE
 129:../drivers/fsl_dac.h ****     kDAC_BufferWorkAsSwingMode,       /*!< Swing mode. */
 130:../drivers/fsl_dac.h **** #endif                                /* FSL_FEATURE_DAC_HAS_BUFFER_SWING_MODE */
 131:../drivers/fsl_dac.h ****     kDAC_BufferWorkAsOneTimeScanMode, /*!< One-Time Scan mode. */
 132:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_BUFFER_FIFO_MODE) && FSL_FEATURE_DAC_HAS_BUFFER_FIFO_MODE
 133:../drivers/fsl_dac.h ****     kDAC_BufferWorkAsFIFOMode, /*!< FIFO mode. */
 134:../drivers/fsl_dac.h **** #endif                         /* FSL_FEATURE_DAC_HAS_BUFFER_FIFO_MODE */
 135:../drivers/fsl_dac.h **** } dac_buffer_work_mode_t;
 136:../drivers/fsl_dac.h **** 
 137:../drivers/fsl_dac.h **** /*!
 138:../drivers/fsl_dac.h ****  * @brief DAC module configuration.
 139:../drivers/fsl_dac.h ****  */
 140:../drivers/fsl_dac.h **** typedef struct _dac_config
 141:../drivers/fsl_dac.h **** {
 142:../drivers/fsl_dac.h ****     dac_reference_voltage_source_t referenceVoltageSource; /*!< Select the DAC reference voltage so
 143:../drivers/fsl_dac.h ****     bool enableLowPowerMode;                               /*!< Enable the low-power mode. */
 144:../drivers/fsl_dac.h **** } dac_config_t;
 145:../drivers/fsl_dac.h **** 
 146:../drivers/fsl_dac.h **** /*!
 147:../drivers/fsl_dac.h ****  * @brief DAC buffer configuration.
 148:../drivers/fsl_dac.h ****  */
 149:../drivers/fsl_dac.h **** typedef struct _dac_buffer_config
 150:../drivers/fsl_dac.h **** {
 151:../drivers/fsl_dac.h ****     dac_buffer_trigger_mode_t triggerMode; /*!< Select the buffer's trigger mode. */
 152:../drivers/fsl_dac.h **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION
 153:../drivers/fsl_dac.h ****     dac_buffer_watermark_t watermark; /*!< Select the buffer's watermark. */
 154:../drivers/fsl_dac.h **** #endif                                /* FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION */
 155:../drivers/fsl_dac.h ****     dac_buffer_work_mode_t workMode;  /*!< Select the buffer's work mode. */
 156:../drivers/fsl_dac.h ****     uint8_t upperLimit;               /*!< Set the upper limit for the buffer index.
 157:../drivers/fsl_dac.h ****                                            Normally, 0-15 is available for a buffer with 16 items. 
 158:../drivers/fsl_dac.h **** } dac_buffer_config_t;
 159:../drivers/fsl_dac.h **** 
 160:../drivers/fsl_dac.h **** /*******************************************************************************
 161:../drivers/fsl_dac.h ****  * API
 162:../drivers/fsl_dac.h ****  ******************************************************************************/
 163:../drivers/fsl_dac.h **** #if defined(__cplusplus)
 164:../drivers/fsl_dac.h **** extern "C" {
 165:../drivers/fsl_dac.h **** #endif
 166:../drivers/fsl_dac.h **** 
 167:../drivers/fsl_dac.h **** /*!
 168:../drivers/fsl_dac.h ****  * @name Initialization
 169:../drivers/fsl_dac.h ****  * @{
 170:../drivers/fsl_dac.h ****  */
 171:../drivers/fsl_dac.h **** 
 172:../drivers/fsl_dac.h **** /*!
 173:../drivers/fsl_dac.h ****  * @brief Initializes the DAC module.
 174:../drivers/fsl_dac.h ****  *
 175:../drivers/fsl_dac.h ****  * This function initializes the DAC module including the following operations.
 176:../drivers/fsl_dac.h ****  *  - Enabling the clock for DAC module.
 177:../drivers/fsl_dac.h ****  *  - Configuring the DAC converter with a user configuration.
 178:../drivers/fsl_dac.h ****  *  - Enabling the DAC module.
 179:../drivers/fsl_dac.h ****  *
 180:../drivers/fsl_dac.h ****  * @param base DAC peripheral base address.
 181:../drivers/fsl_dac.h ****  * @param config Pointer to the configuration structure. See "dac_config_t".
 182:../drivers/fsl_dac.h ****  */
 183:../drivers/fsl_dac.h **** void DAC_Init(DAC_Type *base, const dac_config_t *config);
 184:../drivers/fsl_dac.h **** 
 185:../drivers/fsl_dac.h **** /*!
 186:../drivers/fsl_dac.h ****  * @brief De-initializes the DAC module.
 187:../drivers/fsl_dac.h ****  *
 188:../drivers/fsl_dac.h ****  * This function de-initializes the DAC module including the following operations.
 189:../drivers/fsl_dac.h ****  *  - Disabling the DAC module.
 190:../drivers/fsl_dac.h ****  *  - Disabling the clock for the DAC module.
 191:../drivers/fsl_dac.h ****  *
 192:../drivers/fsl_dac.h ****  * @param base DAC peripheral base address.
 193:../drivers/fsl_dac.h ****  */
 194:../drivers/fsl_dac.h **** void DAC_Deinit(DAC_Type *base);
 195:../drivers/fsl_dac.h **** 
 196:../drivers/fsl_dac.h **** /*!
 197:../drivers/fsl_dac.h ****  * @brief Initializes the DAC user configuration structure.
 198:../drivers/fsl_dac.h ****  *
 199:../drivers/fsl_dac.h ****  * This function initializes the user configuration structure to a default value. The default value
 200:../drivers/fsl_dac.h ****  * @code
 201:../drivers/fsl_dac.h ****  *   config->referenceVoltageSource = kDAC_ReferenceVoltageSourceVref2;
 202:../drivers/fsl_dac.h ****  *   config->enableLowPowerMode = false;
 203:../drivers/fsl_dac.h ****  * @endcode
 204:../drivers/fsl_dac.h ****  * @param config Pointer to the configuration structure. See "dac_config_t".
 205:../drivers/fsl_dac.h ****  */
 206:../drivers/fsl_dac.h **** void DAC_GetDefaultConfig(dac_config_t *config);
 207:../drivers/fsl_dac.h **** 
 208:../drivers/fsl_dac.h **** /*!
 209:../drivers/fsl_dac.h ****  * @brief Enables the DAC module.
 210:../drivers/fsl_dac.h ****  *
 211:../drivers/fsl_dac.h ****  * @param base DAC peripheral base address.
 212:../drivers/fsl_dac.h ****  * @param enable Enables or disables the feature.
 213:../drivers/fsl_dac.h ****  */
 214:../drivers/fsl_dac.h **** static inline void DAC_Enable(DAC_Type *base, bool enable)
 215:../drivers/fsl_dac.h **** {
 216:../drivers/fsl_dac.h ****     if (enable)
 217:../drivers/fsl_dac.h ****     {
 218:../drivers/fsl_dac.h ****         base->C0 |= DAC_C0_DACEN_MASK;
 219:../drivers/fsl_dac.h ****     }
 220:../drivers/fsl_dac.h ****     else
 221:../drivers/fsl_dac.h ****     {
 222:../drivers/fsl_dac.h ****         base->C0 &= ~DAC_C0_DACEN_MASK;
 165              		.loc 3 222 0
 166 0002 2122     		movs	r2, #33
 167 0004 835C     		ldrb	r3, [r0, r2]
 168 0006 7F21     		movs	r1, #127
 169 0008 0B40     		ands	r3, r1
 170 000a 8354     		strb	r3, [r0, r2]
 171              	.LVL16:
 172              	.LBE11:
 173              	.LBE10:
 108:../drivers/fsl_dac.c ****     DAC_Enable(base, false);
 109:../drivers/fsl_dac.c **** 
 110:../drivers/fsl_dac.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 111:../drivers/fsl_dac.c ****     /* Disable the clock. */
 112:../drivers/fsl_dac.c ****     CLOCK_DisableClock(s_dacClocks[DAC_GetInstance(base)]);
 174              		.loc 1 112 0
 175 000c FFF7FEFF 		bl	DAC_GetInstance
 176              	.LVL17:
 177              	.LBB12:
 178              	.LBB13:
 451:../drivers/fsl_clock.h **** }
 452:../drivers/fsl_clock.h **** 
 453:../drivers/fsl_clock.h **** /*!
 454:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 455:../drivers/fsl_clock.h ****  *
 456:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 457:../drivers/fsl_clock.h ****  */
 458:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 459:../drivers/fsl_clock.h **** {
 460:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 461:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 179              		.loc 2 461 0
 180 0010 024A     		ldr	r2, .L14
 181 0012 1368     		ldr	r3, [r2]
 182 0014 5B00     		lsls	r3, r3, #1
 183 0016 5B08     		lsrs	r3, r3, #1
 184 0018 1360     		str	r3, [r2]
 185              	.LVL18:
 186              	.LBE13:
 187              	.LBE12:
 113:../drivers/fsl_dac.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 114:../drivers/fsl_dac.c **** }
 188              		.loc 1 114 0
 189              		@ sp needed
 190 001a 10BD     		pop	{r4, pc}
 191              	.L15:
 192              		.align	2
 193              	.L14:
 194 001c 3C800440 		.word	1074036796
 195              		.cfi_endproc
 196              	.LFE60:
 198              		.section	.text.DAC_GetDefaultConfig,"ax",%progbits
 199              		.align	1
 200              		.global	DAC_GetDefaultConfig
 201              		.syntax unified
 202              		.code	16
 203              		.thumb_func
 204              		.fpu softvfp
 206              	DAC_GetDefaultConfig:
 207              	.LFB61:
 115:../drivers/fsl_dac.c **** 
 116:../drivers/fsl_dac.c **** void DAC_GetDefaultConfig(dac_config_t *config)
 117:../drivers/fsl_dac.c **** {
 208              		.loc 1 117 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LVL19:
 118:../drivers/fsl_dac.c ****     assert(NULL != config);
 119:../drivers/fsl_dac.c **** 
 120:../drivers/fsl_dac.c ****     config->referenceVoltageSource = kDAC_ReferenceVoltageSourceVref2;
 214              		.loc 1 120 0
 215 0000 0123     		movs	r3, #1
 216 0002 0370     		strb	r3, [r0]
 121:../drivers/fsl_dac.c ****     config->enableLowPowerMode = false;
 217              		.loc 1 121 0
 218 0004 0023     		movs	r3, #0
 219 0006 4370     		strb	r3, [r0, #1]
 122:../drivers/fsl_dac.c **** }
 220              		.loc 1 122 0
 221              		@ sp needed
 222 0008 7047     		bx	lr
 223              		.cfi_endproc
 224              	.LFE61:
 226              		.section	.text.DAC_SetBufferConfig,"ax",%progbits
 227              		.align	1
 228              		.global	DAC_SetBufferConfig
 229              		.syntax unified
 230              		.code	16
 231              		.thumb_func
 232              		.fpu softvfp
 234              	DAC_SetBufferConfig:
 235              	.LFB62:
 123:../drivers/fsl_dac.c **** 
 124:../drivers/fsl_dac.c **** void DAC_SetBufferConfig(DAC_Type *base, const dac_buffer_config_t *config)
 125:../drivers/fsl_dac.c **** {
 236              		.loc 1 125 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              	.LVL20:
 241 0000 30B5     		push	{r4, r5, lr}
 242              		.cfi_def_cfa_offset 12
 243              		.cfi_offset 4, -12
 244              		.cfi_offset 5, -8
 245              		.cfi_offset 14, -4
 126:../drivers/fsl_dac.c ****     assert(NULL != config);
 127:../drivers/fsl_dac.c **** 
 128:../drivers/fsl_dac.c ****     uint8_t tmp8;
 129:../drivers/fsl_dac.c **** 
 130:../drivers/fsl_dac.c ****     /* DACx_C0. */
 131:../drivers/fsl_dac.c ****     tmp8 = base->C0 & ~(DAC_C0_DACTRGSEL_MASK);
 246              		.loc 1 131 0
 247 0002 2123     		movs	r3, #33
 248 0004 C35C     		ldrb	r3, [r0, r3]
 249 0006 2022     		movs	r2, #32
 250 0008 9343     		bics	r3, r2
 251              	.LVL21:
 132:../drivers/fsl_dac.c ****     if (kDAC_BufferTriggerBySoftwareMode == config->triggerMode)
 252              		.loc 1 132 0
 253 000a 0A78     		ldrb	r2, [r1]
 254 000c 012A     		cmp	r2, #1
 255 000e 17D0     		beq	.L19
 256              	.L18:
 133:../drivers/fsl_dac.c ****     {
 134:../drivers/fsl_dac.c ****         tmp8 |= DAC_C0_DACTRGSEL_MASK;
 135:../drivers/fsl_dac.c ****     }
 136:../drivers/fsl_dac.c ****     base->C0 = tmp8;
 257              		.loc 1 136 0
 258 0010 2122     		movs	r2, #33
 259 0012 8354     		strb	r3, [r0, r2]
 137:../drivers/fsl_dac.c **** 
 138:../drivers/fsl_dac.c ****     /* DACx_C1. */
 139:../drivers/fsl_dac.c ****     tmp8 = base->C1 &
 260              		.loc 1 139 0
 261 0014 2224     		movs	r4, #34
 262 0016 035D     		ldrb	r3, [r0, r4]
 263              	.LVL22:
 264 0018 1B3A     		subs	r2, r2, #27
 265              	.LVL23:
 266 001a 9343     		bics	r3, r2
 267 001c 1A00     		movs	r2, r3
 268              	.LVL24:
 140:../drivers/fsl_dac.c ****            ~(
 141:../drivers/fsl_dac.c **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION
 142:../drivers/fsl_dac.c ****                DAC_C1_DACBFWM_MASK |
 143:../drivers/fsl_dac.c **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION */
 144:../drivers/fsl_dac.c ****                DAC_C1_DACBFMD_MASK);
 145:../drivers/fsl_dac.c **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION
 146:../drivers/fsl_dac.c ****     tmp8 |= DAC_C1_DACBFWM(config->watermark);
 147:../drivers/fsl_dac.c **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION */
 148:../drivers/fsl_dac.c ****     tmp8 |= DAC_C1_DACBFMD(config->workMode);
 269              		.loc 1 148 0
 270 001e 4B78     		ldrb	r3, [r1, #1]
 271 0020 5B00     		lsls	r3, r3, #1
 272 0022 0625     		movs	r5, #6
 273 0024 2B40     		ands	r3, r5
 274 0026 1343     		orrs	r3, r2
 275              	.LVL25:
 149:../drivers/fsl_dac.c ****     base->C1 = tmp8;
 276              		.loc 1 149 0
 277 0028 0355     		strb	r3, [r0, r4]
 150:../drivers/fsl_dac.c **** 
 151:../drivers/fsl_dac.c ****     /* DACx_C2. */
 152:../drivers/fsl_dac.c ****     tmp8 = base->C2 & ~DAC_C2_DACBFUP_MASK;
 278              		.loc 1 152 0
 279 002a 0134     		adds	r4, r4, #1
 280 002c 035D     		ldrb	r3, [r0, r4]
 281              	.LVL26:
 282 002e 0122     		movs	r2, #1
 283 0030 9343     		bics	r3, r2
 284 0032 1A00     		movs	r2, r3
 285              	.LVL27:
 153:../drivers/fsl_dac.c ****     tmp8 |= DAC_C2_DACBFUP(config->upperLimit);
 286              		.loc 1 153 0
 287 0034 8978     		ldrb	r1, [r1, #2]
 288              	.LVL28:
 289 0036 0123     		movs	r3, #1
 290 0038 0B40     		ands	r3, r1
 291 003a 1343     		orrs	r3, r2
 292              	.LVL29:
 154:../drivers/fsl_dac.c ****     base->C2 = tmp8;
 293              		.loc 1 154 0
 294 003c 0355     		strb	r3, [r0, r4]
 155:../drivers/fsl_dac.c **** }
 295              		.loc 1 155 0
 296              		@ sp needed
 297 003e 30BD     		pop	{r4, r5, pc}
 298              	.LVL30:
 299              	.L19:
 134:../drivers/fsl_dac.c ****     }
 300              		.loc 1 134 0
 301 0040 2022     		movs	r2, #32
 302 0042 1343     		orrs	r3, r2
 303              	.LVL31:
 304 0044 E4E7     		b	.L18
 305              		.cfi_endproc
 306              	.LFE62:
 308              		.section	.text.DAC_GetDefaultBufferConfig,"ax",%progbits
 309              		.align	1
 310              		.global	DAC_GetDefaultBufferConfig
 311              		.syntax unified
 312              		.code	16
 313              		.thumb_func
 314              		.fpu softvfp
 316              	DAC_GetDefaultBufferConfig:
 317              	.LFB63:
 156:../drivers/fsl_dac.c **** 
 157:../drivers/fsl_dac.c **** void DAC_GetDefaultBufferConfig(dac_buffer_config_t *config)
 158:../drivers/fsl_dac.c **** {
 318              		.loc 1 158 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323              	.LVL32:
 159:../drivers/fsl_dac.c ****     assert(NULL != config);
 160:../drivers/fsl_dac.c **** 
 161:../drivers/fsl_dac.c ****     config->triggerMode = kDAC_BufferTriggerBySoftwareMode;
 324              		.loc 1 161 0
 325 0000 0123     		movs	r3, #1
 326 0002 0370     		strb	r3, [r0]
 162:../drivers/fsl_dac.c **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION
 163:../drivers/fsl_dac.c ****     config->watermark = kDAC_BufferWatermark1Word;
 164:../drivers/fsl_dac.c **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_SELECTION */
 165:../drivers/fsl_dac.c ****     config->workMode = kDAC_BufferWorkAsNormalMode;
 327              		.loc 1 165 0
 328 0004 0022     		movs	r2, #0
 329 0006 4270     		strb	r2, [r0, #1]
 166:../drivers/fsl_dac.c ****     config->upperLimit = DAC_DATL_COUNT - 1U;
 330              		.loc 1 166 0
 331 0008 8370     		strb	r3, [r0, #2]
 167:../drivers/fsl_dac.c **** }
 332              		.loc 1 167 0
 333              		@ sp needed
 334 000a 7047     		bx	lr
 335              		.cfi_endproc
 336              	.LFE63:
 338              		.section	.text.DAC_SetBufferValue,"ax",%progbits
 339              		.align	1
 340              		.global	DAC_SetBufferValue
 341              		.syntax unified
 342              		.code	16
 343              		.thumb_func
 344              		.fpu softvfp
 346              	DAC_SetBufferValue:
 347              	.LFB64:
 168:../drivers/fsl_dac.c **** 
 169:../drivers/fsl_dac.c **** void DAC_SetBufferValue(DAC_Type *base, uint8_t index, uint16_t value)
 170:../drivers/fsl_dac.c **** {
 348              		.loc 1 170 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353              	.LVL33:
 171:../drivers/fsl_dac.c ****     assert(index < DAC_DATL_COUNT);
 172:../drivers/fsl_dac.c **** 
 173:../drivers/fsl_dac.c ****     base->DAT[index].DATL = (uint8_t)(0xFFU & value);         /* Low 8-bit. */
 354              		.loc 1 173 0
 355 0000 D3B2     		uxtb	r3, r2
 356 0002 4900     		lsls	r1, r1, #1
 357              	.LVL34:
 358 0004 0B54     		strb	r3, [r1, r0]
 174:../drivers/fsl_dac.c ****     base->DAT[index].DATH = (uint8_t)((0xF00U & value) >> 8); /* High 4-bit. */
 359              		.loc 1 174 0
 360 0006 120A     		lsrs	r2, r2, #8
 361              	.LVL35:
 362 0008 0F23     		movs	r3, #15
 363 000a 1A40     		ands	r2, r3
 364 000c 4018     		adds	r0, r0, r1
 365              	.LVL36:
 366 000e 4270     		strb	r2, [r0, #1]
 175:../drivers/fsl_dac.c **** }
 367              		.loc 1 175 0
 368              		@ sp needed
 369 0010 7047     		bx	lr
 370              		.cfi_endproc
 371              	.LFE64:
 373              		.section	.text.DAC_SetBufferReadPointer,"ax",%progbits
 374              		.align	1
 375              		.global	DAC_SetBufferReadPointer
 376              		.syntax unified
 377              		.code	16
 378              		.thumb_func
 379              		.fpu softvfp
 381              	DAC_SetBufferReadPointer:
 382              	.LFB65:
 176:../drivers/fsl_dac.c **** 
 177:../drivers/fsl_dac.c **** void DAC_SetBufferReadPointer(DAC_Type *base, uint8_t index)
 178:../drivers/fsl_dac.c **** {
 383              		.loc 1 178 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              	.LVL37:
 388 0000 10B5     		push	{r4, lr}
 389              		.cfi_def_cfa_offset 8
 390              		.cfi_offset 4, -8
 391              		.cfi_offset 14, -4
 179:../drivers/fsl_dac.c ****     assert(index < DAC_DATL_COUNT);
 180:../drivers/fsl_dac.c **** 
 181:../drivers/fsl_dac.c ****     uint8_t tmp8 = base->C2 & ~DAC_C2_DACBFRP_MASK;
 392              		.loc 1 181 0
 393 0002 2322     		movs	r2, #35
 394 0004 835C     		ldrb	r3, [r0, r2]
 395 0006 1024     		movs	r4, #16
 396 0008 A343     		bics	r3, r4
 397              	.LVL38:
 182:../drivers/fsl_dac.c **** 
 183:../drivers/fsl_dac.c ****     tmp8 |= DAC_C2_DACBFRP(index);
 398              		.loc 1 183 0
 399 000a 0901     		lsls	r1, r1, #4
 400              	.LVL39:
 401 000c 2140     		ands	r1, r4
 402 000e 1943     		orrs	r1, r3
 403              	.LVL40:
 184:../drivers/fsl_dac.c ****     base->C2 = tmp8;
 404              		.loc 1 184 0
 405 0010 8154     		strb	r1, [r0, r2]
 185:../drivers/fsl_dac.c **** }
 406              		.loc 1 185 0
 407              		@ sp needed
 408 0012 10BD     		pop	{r4, pc}
 409              		.cfi_endproc
 410              	.LFE65:
 412              		.section	.text.DAC_EnableBufferInterrupts,"ax",%progbits
 413              		.align	1
 414              		.global	DAC_EnableBufferInterrupts
 415              		.syntax unified
 416              		.code	16
 417              		.thumb_func
 418              		.fpu softvfp
 420              	DAC_EnableBufferInterrupts:
 421              	.LFB66:
 186:../drivers/fsl_dac.c **** 
 187:../drivers/fsl_dac.c **** void DAC_EnableBufferInterrupts(DAC_Type *base, uint32_t mask)
 188:../drivers/fsl_dac.c **** {
 422              		.loc 1 188 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              	.LVL41:
 427 0000 10B5     		push	{r4, lr}
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 4, -8
 430              		.cfi_offset 14, -4
 431              	.LVL42:
 189:../drivers/fsl_dac.c ****     mask &= (
 190:../drivers/fsl_dac.c **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION
 191:../drivers/fsl_dac.c ****         DAC_C0_DACBWIEN_MASK |
 192:../drivers/fsl_dac.c **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION */
 193:../drivers/fsl_dac.c ****         DAC_C0_DACBTIEN_MASK | DAC_C0_DACBBIEN_MASK);
 194:../drivers/fsl_dac.c ****     base->C0 |= ((uint8_t)mask); /* Write 1 to enable. */
 432              		.loc 1 194 0
 433 0002 2124     		movs	r4, #33
 434 0004 035D     		ldrb	r3, [r0, r4]
 435 0006 0322     		movs	r2, #3
 436 0008 1140     		ands	r1, r2
 437              	.LVL43:
 438 000a 1943     		orrs	r1, r3
 439              	.LVL44:
 440 000c 0155     		strb	r1, [r0, r4]
 195:../drivers/fsl_dac.c **** }
 441              		.loc 1 195 0
 442              		@ sp needed
 443 000e 10BD     		pop	{r4, pc}
 444              		.cfi_endproc
 445              	.LFE66:
 447              		.section	.text.DAC_DisableBufferInterrupts,"ax",%progbits
 448              		.align	1
 449              		.global	DAC_DisableBufferInterrupts
 450              		.syntax unified
 451              		.code	16
 452              		.thumb_func
 453              		.fpu softvfp
 455              	DAC_DisableBufferInterrupts:
 456              	.LFB67:
 196:../drivers/fsl_dac.c **** 
 197:../drivers/fsl_dac.c **** void DAC_DisableBufferInterrupts(DAC_Type *base, uint32_t mask)
 198:../drivers/fsl_dac.c **** {
 457              		.loc 1 198 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              	.LVL45:
 462 0000 10B5     		push	{r4, lr}
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 4, -8
 465              		.cfi_offset 14, -4
 466              	.LVL46:
 199:../drivers/fsl_dac.c ****     mask &= (
 200:../drivers/fsl_dac.c **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION
 201:../drivers/fsl_dac.c ****         DAC_C0_DACBWIEN_MASK |
 202:../drivers/fsl_dac.c **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION */
 203:../drivers/fsl_dac.c ****         DAC_C0_DACBTIEN_MASK | DAC_C0_DACBBIEN_MASK);
 204:../drivers/fsl_dac.c ****     base->C0 &= (uint8_t)(~((uint8_t)mask)); /* Write 0 to disable. */
 467              		.loc 1 204 0
 468 0002 2124     		movs	r4, #33
 469 0004 035D     		ldrb	r3, [r0, r4]
 470 0006 0322     		movs	r2, #3
 471 0008 1140     		ands	r1, r2
 472              	.LVL47:
 473 000a 8B43     		bics	r3, r1
 474 000c 0355     		strb	r3, [r0, r4]
 205:../drivers/fsl_dac.c **** }
 475              		.loc 1 205 0
 476              		@ sp needed
 477 000e 10BD     		pop	{r4, pc}
 478              		.cfi_endproc
 479              	.LFE67:
 481              		.section	.text.DAC_GetBufferStatusFlags,"ax",%progbits
 482              		.align	1
 483              		.global	DAC_GetBufferStatusFlags
 484              		.syntax unified
 485              		.code	16
 486              		.thumb_func
 487              		.fpu softvfp
 489              	DAC_GetBufferStatusFlags:
 490              	.LFB68:
 206:../drivers/fsl_dac.c **** 
 207:../drivers/fsl_dac.c **** uint32_t DAC_GetBufferStatusFlags(DAC_Type *base)
 208:../drivers/fsl_dac.c **** {
 491              		.loc 1 208 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496              	.LVL48:
 209:../drivers/fsl_dac.c ****     return (uint32_t)(base->SR & (
 497              		.loc 1 209 0
 498 0000 2023     		movs	r3, #32
 499 0002 C05C     		ldrb	r0, [r0, r3]
 500              	.LVL49:
 501 0004 1D3B     		subs	r3, r3, #29
 502 0006 1840     		ands	r0, r3
 210:../drivers/fsl_dac.c **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION
 211:../drivers/fsl_dac.c ****                                      DAC_SR_DACBFWMF_MASK |
 212:../drivers/fsl_dac.c **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION */
 213:../drivers/fsl_dac.c ****                                      DAC_SR_DACBFRPTF_MASK | DAC_SR_DACBFRPBF_MASK));
 214:../drivers/fsl_dac.c **** }
 503              		.loc 1 214 0
 504              		@ sp needed
 505 0008 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE68:
 509              		.section	.text.DAC_ClearBufferStatusFlags,"ax",%progbits
 510              		.align	1
 511              		.global	DAC_ClearBufferStatusFlags
 512              		.syntax unified
 513              		.code	16
 514              		.thumb_func
 515              		.fpu softvfp
 517              	DAC_ClearBufferStatusFlags:
 518              	.LFB69:
 215:../drivers/fsl_dac.c **** 
 216:../drivers/fsl_dac.c **** void DAC_ClearBufferStatusFlags(DAC_Type *base, uint32_t mask)
 217:../drivers/fsl_dac.c **** {
 519              		.loc 1 217 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              	.LVL50:
 524 0000 10B5     		push	{r4, lr}
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 4, -8
 527              		.cfi_offset 14, -4
 528              	.LVL51:
 218:../drivers/fsl_dac.c ****     mask &= (
 219:../drivers/fsl_dac.c **** #if defined(FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION) && FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION
 220:../drivers/fsl_dac.c ****         DAC_SR_DACBFWMF_MASK |
 221:../drivers/fsl_dac.c **** #endif /* FSL_FEATURE_DAC_HAS_WATERMARK_DETECTION */
 222:../drivers/fsl_dac.c ****         DAC_SR_DACBFRPTF_MASK | DAC_SR_DACBFRPBF_MASK);
 223:../drivers/fsl_dac.c ****     base->SR &= (uint8_t)(~((uint8_t)mask)); /* Write 0 to clear flags. */
 529              		.loc 1 223 0
 530 0002 2024     		movs	r4, #32
 531 0004 035D     		ldrb	r3, [r0, r4]
 532 0006 0322     		movs	r2, #3
 533 0008 1140     		ands	r1, r2
 534              	.LVL52:
 535 000a 8B43     		bics	r3, r1
 536 000c 0355     		strb	r3, [r0, r4]
 224:../drivers/fsl_dac.c **** }
 537              		.loc 1 224 0
 538              		@ sp needed
 539 000e 10BD     		pop	{r4, pc}
 540              		.cfi_endproc
 541              	.LFE69:
 543              		.text
 544              	.Letext0:
 545              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 546              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 547              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 548              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 549              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 550              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 551              		.file 10 "../CMSIS/system_MKL17Z4.h"
 552              		.file 11 "../CMSIS/MKL17Z4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsl_dac.c
     /tmp/ccl8gjZJ.s:16     .text.DAC_GetInstance:0000000000000000 $t
     /tmp/ccl8gjZJ.s:22     .text.DAC_GetInstance:0000000000000000 DAC_GetInstance
     /tmp/ccl8gjZJ.s:57     .text.DAC_GetInstance:0000000000000014 $d
     /tmp/ccl8gjZJ.s:62     .text.DAC_Init:0000000000000000 $t
     /tmp/ccl8gjZJ.s:69     .text.DAC_Init:0000000000000000 DAC_Init
     /tmp/ccl8gjZJ.s:138    .text.DAC_Init:000000000000003c $d
     /tmp/ccl8gjZJ.s:143    .text.DAC_Deinit:0000000000000000 $t
     /tmp/ccl8gjZJ.s:150    .text.DAC_Deinit:0000000000000000 DAC_Deinit
     /tmp/ccl8gjZJ.s:194    .text.DAC_Deinit:000000000000001c $d
     /tmp/ccl8gjZJ.s:199    .text.DAC_GetDefaultConfig:0000000000000000 $t
     /tmp/ccl8gjZJ.s:206    .text.DAC_GetDefaultConfig:0000000000000000 DAC_GetDefaultConfig
     /tmp/ccl8gjZJ.s:227    .text.DAC_SetBufferConfig:0000000000000000 $t
     /tmp/ccl8gjZJ.s:234    .text.DAC_SetBufferConfig:0000000000000000 DAC_SetBufferConfig
     /tmp/ccl8gjZJ.s:309    .text.DAC_GetDefaultBufferConfig:0000000000000000 $t
     /tmp/ccl8gjZJ.s:316    .text.DAC_GetDefaultBufferConfig:0000000000000000 DAC_GetDefaultBufferConfig
     /tmp/ccl8gjZJ.s:339    .text.DAC_SetBufferValue:0000000000000000 $t
     /tmp/ccl8gjZJ.s:346    .text.DAC_SetBufferValue:0000000000000000 DAC_SetBufferValue
     /tmp/ccl8gjZJ.s:374    .text.DAC_SetBufferReadPointer:0000000000000000 $t
     /tmp/ccl8gjZJ.s:381    .text.DAC_SetBufferReadPointer:0000000000000000 DAC_SetBufferReadPointer
     /tmp/ccl8gjZJ.s:413    .text.DAC_EnableBufferInterrupts:0000000000000000 $t
     /tmp/ccl8gjZJ.s:420    .text.DAC_EnableBufferInterrupts:0000000000000000 DAC_EnableBufferInterrupts
     /tmp/ccl8gjZJ.s:448    .text.DAC_DisableBufferInterrupts:0000000000000000 $t
     /tmp/ccl8gjZJ.s:455    .text.DAC_DisableBufferInterrupts:0000000000000000 DAC_DisableBufferInterrupts
     /tmp/ccl8gjZJ.s:482    .text.DAC_GetBufferStatusFlags:0000000000000000 $t
     /tmp/ccl8gjZJ.s:489    .text.DAC_GetBufferStatusFlags:0000000000000000 DAC_GetBufferStatusFlags
     /tmp/ccl8gjZJ.s:510    .text.DAC_ClearBufferStatusFlags:0000000000000000 $t
     /tmp/ccl8gjZJ.s:517    .text.DAC_ClearBufferStatusFlags:0000000000000000 DAC_ClearBufferStatusFlags

NO UNDEFINED SYMBOLS
