   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"pin_mux.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.BOARD_InitPins,"ax",%progbits
  18              		.align	1
  19              		.global	BOARD_InitPins
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	BOARD_InitPins:
  26              	.LFB157:
  27              		.file 1 "../board/pin_mux.c"
   1:../board/pin_mux.c **** /*
   2:../board/pin_mux.c ****  * The Clear BSD License
   3:../board/pin_mux.c ****  * Copyright (c) 2016, Freescale Semiconductor, Inc.
   4:../board/pin_mux.c ****  * Copyright 2016-2017 NXP
   5:../board/pin_mux.c ****  * All rights reserved.
   6:../board/pin_mux.c ****  *
   7:../board/pin_mux.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../board/pin_mux.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../board/pin_mux.c ****  * that the following conditions are met:
  10:../board/pin_mux.c ****  *
  11:../board/pin_mux.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../board/pin_mux.c ****  *   of conditions and the following disclaimer.
  13:../board/pin_mux.c ****  *
  14:../board/pin_mux.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../board/pin_mux.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../board/pin_mux.c ****  *   other materials provided with the distribution.
  17:../board/pin_mux.c ****  *
  18:../board/pin_mux.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../board/pin_mux.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../board/pin_mux.c ****  *   software without specific prior written permission.
  21:../board/pin_mux.c ****  *
  22:../board/pin_mux.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../board/pin_mux.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../board/pin_mux.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../board/pin_mux.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../board/pin_mux.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../board/pin_mux.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../board/pin_mux.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../board/pin_mux.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../board/pin_mux.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../board/pin_mux.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../board/pin_mux.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../board/pin_mux.c ****  */
  34:../board/pin_mux.c **** 
  35:../board/pin_mux.c **** /*
  36:../board/pin_mux.c ****  * TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
  37:../board/pin_mux.c **** !!GlobalInfo
  38:../board/pin_mux.c **** product: Pins v3.0
  39:../board/pin_mux.c **** processor: MK64FN1M0xxx12
  40:../board/pin_mux.c **** package_id: MK64FN1M0VLL12
  41:../board/pin_mux.c **** mcu_data: ksdk2_0
  42:../board/pin_mux.c **** processor_version: 2.0.0
  43:../board/pin_mux.c ****  * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS ***********
  44:../board/pin_mux.c ****  */
  45:../board/pin_mux.c **** 
  46:../board/pin_mux.c **** #include "fsl_common.h"
  47:../board/pin_mux.c **** #include "fsl_port.h"
  48:../board/pin_mux.c **** #include "pin_mux.h"
  49:../board/pin_mux.c **** 
  50:../board/pin_mux.c **** /*FUNCTION**********************************************************************
  51:../board/pin_mux.c ****  * 
  52:../board/pin_mux.c ****  * Function Name : BOARD_InitBootPins
  53:../board/pin_mux.c ****  * Description   : Calls initialization functions.
  54:../board/pin_mux.c ****  * 
  55:../board/pin_mux.c ****  *END**************************************************************************/
  56:../board/pin_mux.c **** void BOARD_InitBootPins(void) {
  57:../board/pin_mux.c ****     BOARD_InitPins();
  58:../board/pin_mux.c **** }
  59:../board/pin_mux.c **** 
  60:../board/pin_mux.c **** #define PIN16_IDX                       16u   /*!< Pin number for pin 16 in a port */
  61:../board/pin_mux.c **** #define PIN17_IDX                       17u   /*!< Pin number for pin 17 in a port */
  62:../board/pin_mux.c **** #define SOPT5_UART0TXSRC_UART_TX      0x00u   /*!< UART 0 transmit data source select: UART0_TX pin
  63:../board/pin_mux.c **** 
  64:../board/pin_mux.c **** /*
  65:../board/pin_mux.c ****  * TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
  66:../board/pin_mux.c **** BOARD_InitPins:
  67:../board/pin_mux.c **** - options: {callFromInitBoot: 'true', coreID: core0, enableClock: 'true'}
  68:../board/pin_mux.c **** - pin_list:
  69:../board/pin_mux.c ****   - {pin_num: '62', peripheral: UART0, signal: RX, pin_signal: PTB16/SPI1_SOUT/UART0_RX/FTM_CLKIN0/
  70:../board/pin_mux.c ****   - {pin_num: '63', peripheral: UART0, signal: TX, pin_signal: PTB17/SPI1_SIN/UART0_TX/FTM_CLKIN1/F
  71:../board/pin_mux.c ****  * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS ***********
  72:../board/pin_mux.c ****  */
  73:../board/pin_mux.c **** 
  74:../board/pin_mux.c **** /*FUNCTION**********************************************************************
  75:../board/pin_mux.c ****  *
  76:../board/pin_mux.c ****  * Function Name : BOARD_InitPins
  77:../board/pin_mux.c ****  * Description   : Configures pin routing and optionally pin electrical features
  78:../board/pin_mux.c ****  *
  79:../board/pin_mux.c ****  *END**************************************************************************/
  80:../board/pin_mux.c **** void BOARD_InitPins(void) {
  28              		.loc 1 80 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              	.LBB48:
  35              	.LBB49:
  36              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
  37              		.loc 2 695 0
  38 0000 2A4B     		ldr	r3, .L2
  39              	.LBE49:
  40              	.LBE48:
  81:../board/pin_mux.c ****   CLOCK_EnableClock(kCLOCK_PortB);                           /* Port B Clock Gate Control: Clock en
  82:../board/pin_mux.c ****   CLOCK_EnableClock(kCLOCK_PortC);
  83:../board/pin_mux.c ****   CLOCK_EnableClock(kCLOCK_PortD);
  84:../board/pin_mux.c **** 
  85:../board/pin_mux.c ****   //PORT_SetPinInterruptConfig(PORTC, 6u, kPORT_InterruptRisingEdge);
  86:../board/pin_mux.c **** 
  87:../board/pin_mux.c ****   PORT_SetPinMux(PORTB, PIN16_IDX, kPORT_MuxAlt3);           /* PORTB16 (pin 62) is configured as U
  88:../board/pin_mux.c ****   PORT_SetPinMux(PORTB, PIN17_IDX, kPORT_MuxAlt3);           /* PORTB17 (pin 63) is configured as U
  89:../board/pin_mux.c **** 
  90:../board/pin_mux.c ****   PORT_SetPinMux(PORTB, 21u, kPORT_MuxAsGpio);
  91:../board/pin_mux.c ****   PORT_SetPinMux(PORTB, 22u, kPORT_MuxAsGpio);
  92:../board/pin_mux.c ****   PORT_SetPinMux(PORTB, 11u, kPORT_MuxAsGpio);	//boostreg enable pin
  93:../board/pin_mux.c **** 
  94:../board/pin_mux.c **** 
  95:../board/pin_mux.c ****   //PORT_SetPinMux(PORTC, 6u, kPORT_MuxAsGpio);	// wakeup pin for stock frdm
  96:../board/pin_mux.c **** 
  97:../board/pin_mux.c **** 
  98:../board/pin_mux.c ****   PORT_SetPinMux(PORTC, 4u, kPORT_MuxAsGpio);
  99:../board/pin_mux.c **** 
 100:../board/pin_mux.c ****   PORT_SetPinMux(PORTC, 16u, kPORT_MuxAlt3);				// UART3 PIN RX (nbiot)
 101:../board/pin_mux.c ****   PORT_SetPinMux(PORTC, 17u, kPORT_MuxAlt3);				// UART3 PIN TX (nbiot)
 102:../board/pin_mux.c **** 
 103:../board/pin_mux.c ****   PORT_SetPinMux(PORTD, 2u, kPORT_MuxAlt3);				// UART2 PIN RX (gps)
 104:../board/pin_mux.c ****   PORT_SetPinMux(PORTD, 3u, kPORT_MuxAlt3);				// UART2 PIN TX (gps)
 105:../board/pin_mux.c **** 
 106:../board/pin_mux.c ****   SIM->SOPT5 = ((SIM->SOPT5 &
  41              		.loc 1 106 0
  42 0002 2B49     		ldr	r1, .L2+4
  43              	.LBB51:
  44              	.LBB50:
  45              		.loc 2 695 0
  46 0004 1A68     		ldr	r2, [r3]
  47 0006 42F48062 		orr	r2, r2, #1024
  48 000a 1A60     		str	r2, [r3]
  49              	.LVL1:
  50              	.LBE50:
  51              	.LBE51:
  52              	.LBB52:
  53              	.LBB53:
  54 000c 1A68     		ldr	r2, [r3]
  55 000e 42F40062 		orr	r2, r2, #2048
  56 0012 1A60     		str	r2, [r3]
  57              	.LVL2:
  58              	.LBE53:
  59              	.LBE52:
  60              	.LBB54:
  61              	.LBB55:
  62 0014 1A68     		ldr	r2, [r3]
  63 0016 42F48052 		orr	r2, r2, #4096
  64 001a 1A60     		str	r2, [r3]
  65              	.LVL3:
  66              	.LBE55:
  67              	.LBE54:
  68              	.LBB56:
  69              	.LBB57:
  70              		.file 3 "../drivers/fsl_port.h"
   1:../drivers/fsl_port.h **** /*
   2:../drivers/fsl_port.h ****  * The Clear BSD License
   3:../drivers/fsl_port.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_port.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_port.h ****  * All rights reserved.
   6:../drivers/fsl_port.h ****  *
   7:../drivers/fsl_port.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_port.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_port.h ****  * that the following conditions are met:
  10:../drivers/fsl_port.h ****  *
  11:../drivers/fsl_port.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_port.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_port.h ****  *
  14:../drivers/fsl_port.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_port.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_port.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_port.h ****  *
  18:../drivers/fsl_port.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_port.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_port.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_port.h ****  *
  22:../drivers/fsl_port.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_port.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_port.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_port.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_port.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_port.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_port.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_port.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_port.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_port.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_port.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_port.h ****  */
  34:../drivers/fsl_port.h **** #ifndef _FSL_PORT_H_
  35:../drivers/fsl_port.h **** #define _FSL_PORT_H_
  36:../drivers/fsl_port.h **** 
  37:../drivers/fsl_port.h **** #include "fsl_common.h"
  38:../drivers/fsl_port.h **** 
  39:../drivers/fsl_port.h **** /*!
  40:../drivers/fsl_port.h ****  * @addtogroup port
  41:../drivers/fsl_port.h ****  * @{
  42:../drivers/fsl_port.h ****  */
  43:../drivers/fsl_port.h **** 
  44:../drivers/fsl_port.h **** /*******************************************************************************
  45:../drivers/fsl_port.h ****  * Definitions
  46:../drivers/fsl_port.h ****  ******************************************************************************/
  47:../drivers/fsl_port.h **** 
  48:../drivers/fsl_port.h **** /*! @name Driver version */
  49:../drivers/fsl_port.h **** /*@{*/
  50:../drivers/fsl_port.h **** /*! Version 2.0.2. */
  51:../drivers/fsl_port.h **** #define FSL_PORT_DRIVER_VERSION (MAKE_VERSION(2, 0, 2))
  52:../drivers/fsl_port.h **** /*@}*/
  53:../drivers/fsl_port.h **** 
  54:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_PULL_ENABLE) && FSL_FEATURE_PORT_HAS_PULL_ENABLE
  55:../drivers/fsl_port.h **** /*! @brief Internal resistor pull feature selection */
  56:../drivers/fsl_port.h **** enum _port_pull
  57:../drivers/fsl_port.h **** {
  58:../drivers/fsl_port.h ****     kPORT_PullDisable = 0U, /*!< Internal pull-up/down resistor is disabled. */
  59:../drivers/fsl_port.h ****     kPORT_PullDown = 2U,    /*!< Internal pull-down resistor is enabled. */
  60:../drivers/fsl_port.h ****     kPORT_PullUp = 3U,      /*!< Internal pull-up resistor is enabled. */
  61:../drivers/fsl_port.h **** };
  62:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_PULL_ENABLE */
  63:../drivers/fsl_port.h **** 
  64:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_SLEW_RATE) && FSL_FEATURE_PORT_HAS_SLEW_RATE
  65:../drivers/fsl_port.h **** /*! @brief Slew rate selection */
  66:../drivers/fsl_port.h **** enum _port_slew_rate
  67:../drivers/fsl_port.h **** {
  68:../drivers/fsl_port.h ****     kPORT_FastSlewRate = 0U, /*!< Fast slew rate is configured. */
  69:../drivers/fsl_port.h ****     kPORT_SlowSlewRate = 1U, /*!< Slow slew rate is configured. */
  70:../drivers/fsl_port.h **** };
  71:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_SLEW_RATE */
  72:../drivers/fsl_port.h **** 
  73:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_OPEN_DRAIN) && FSL_FEATURE_PORT_HAS_OPEN_DRAIN
  74:../drivers/fsl_port.h **** /*! @brief Open Drain feature enable/disable */
  75:../drivers/fsl_port.h **** enum _port_open_drain_enable
  76:../drivers/fsl_port.h **** {
  77:../drivers/fsl_port.h ****     kPORT_OpenDrainDisable = 0U, /*!< Open drain output is disabled. */
  78:../drivers/fsl_port.h ****     kPORT_OpenDrainEnable = 1U,  /*!< Open drain output is enabled. */
  79:../drivers/fsl_port.h **** };
  80:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_OPEN_DRAIN */
  81:../drivers/fsl_port.h **** 
  82:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_PASSIVE_FILTER) && FSL_FEATURE_PORT_HAS_PASSIVE_FILTER
  83:../drivers/fsl_port.h **** /*! @brief Passive filter feature enable/disable */
  84:../drivers/fsl_port.h **** enum _port_passive_filter_enable
  85:../drivers/fsl_port.h **** {
  86:../drivers/fsl_port.h ****     kPORT_PassiveFilterDisable = 0U, /*!< Passive input filter is disabled. */
  87:../drivers/fsl_port.h ****     kPORT_PassiveFilterEnable = 1U,  /*!< Passive input filter is enabled. */
  88:../drivers/fsl_port.h **** };
  89:../drivers/fsl_port.h **** #endif
  90:../drivers/fsl_port.h **** 
  91:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH) && FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH
  92:../drivers/fsl_port.h **** /*! @brief Configures the drive strength. */
  93:../drivers/fsl_port.h **** enum _port_drive_strength
  94:../drivers/fsl_port.h **** {
  95:../drivers/fsl_port.h ****     kPORT_LowDriveStrength = 0U,  /*!< Low-drive strength is configured. */
  96:../drivers/fsl_port.h ****     kPORT_HighDriveStrength = 1U, /*!< High-drive strength is configured. */
  97:../drivers/fsl_port.h **** };
  98:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH */
  99:../drivers/fsl_port.h **** 
 100:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK) && FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK
 101:../drivers/fsl_port.h **** /*! @brief Unlock/lock the pin control register field[15:0] */
 102:../drivers/fsl_port.h **** enum _port_lock_register
 103:../drivers/fsl_port.h **** {
 104:../drivers/fsl_port.h ****     kPORT_UnlockRegister = 0U, /*!< Pin Control Register fields [15:0] are not locked. */
 105:../drivers/fsl_port.h ****     kPORT_LockRegister = 1U,   /*!< Pin Control Register fields [15:0] are locked. */
 106:../drivers/fsl_port.h **** };
 107:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK */
 108:../drivers/fsl_port.h **** 
 109:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_PCR_MUX_WIDTH) && FSL_FEATURE_PORT_PCR_MUX_WIDTH
 110:../drivers/fsl_port.h **** /*! @brief Pin mux selection */
 111:../drivers/fsl_port.h **** typedef enum _port_mux
 112:../drivers/fsl_port.h **** {
 113:../drivers/fsl_port.h ****     kPORT_PinDisabledOrAnalog = 0U, /*!< Corresponding pin is disabled, but is used as an analog pi
 114:../drivers/fsl_port.h ****     kPORT_MuxAsGpio = 1U,           /*!< Corresponding pin is configured as GPIO. */
 115:../drivers/fsl_port.h ****     kPORT_MuxAlt2 = 2U,             /*!< Chip-specific */
 116:../drivers/fsl_port.h ****     kPORT_MuxAlt3 = 3U,             /*!< Chip-specific */
 117:../drivers/fsl_port.h ****     kPORT_MuxAlt4 = 4U,             /*!< Chip-specific */
 118:../drivers/fsl_port.h ****     kPORT_MuxAlt5 = 5U,             /*!< Chip-specific */
 119:../drivers/fsl_port.h ****     kPORT_MuxAlt6 = 6U,             /*!< Chip-specific */
 120:../drivers/fsl_port.h ****     kPORT_MuxAlt7 = 7U,             /*!< Chip-specific */
 121:../drivers/fsl_port.h ****     kPORT_MuxAlt8 = 8U,             /*!< Chip-specific */
 122:../drivers/fsl_port.h ****     kPORT_MuxAlt9 = 9U,             /*!< Chip-specific */
 123:../drivers/fsl_port.h ****     kPORT_MuxAlt10 = 10U,           /*!< Chip-specific */
 124:../drivers/fsl_port.h ****     kPORT_MuxAlt11 = 11U,           /*!< Chip-specific */
 125:../drivers/fsl_port.h ****     kPORT_MuxAlt12 = 12U,           /*!< Chip-specific */
 126:../drivers/fsl_port.h ****     kPORT_MuxAlt13 = 13U,           /*!< Chip-specific */
 127:../drivers/fsl_port.h ****     kPORT_MuxAlt14 = 14U,           /*!< Chip-specific */
 128:../drivers/fsl_port.h ****     kPORT_MuxAlt15 = 15U,           /*!< Chip-specific */
 129:../drivers/fsl_port.h **** } port_mux_t;
 130:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_PCR_MUX_WIDTH */
 131:../drivers/fsl_port.h **** 
 132:../drivers/fsl_port.h **** /*! @brief Configures the interrupt generation condition. */
 133:../drivers/fsl_port.h **** typedef enum _port_interrupt
 134:../drivers/fsl_port.h **** {
 135:../drivers/fsl_port.h ****     kPORT_InterruptOrDMADisabled = 0x0U, /*!< Interrupt/DMA request is disabled. */
 136:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_DMA_REQUEST) && FSL_FEATURE_PORT_HAS_DMA_REQUEST
 137:../drivers/fsl_port.h ****     kPORT_DMARisingEdge = 0x1U,  /*!< DMA request on rising edge. */
 138:../drivers/fsl_port.h ****     kPORT_DMAFallingEdge = 0x2U, /*!< DMA request on falling edge. */
 139:../drivers/fsl_port.h ****     kPORT_DMAEitherEdge = 0x3U,  /*!< DMA request on either edge. */
 140:../drivers/fsl_port.h **** #endif
 141:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_IRQC_FLAG) && FSL_FEATURE_PORT_HAS_IRQC_FLAG
 142:../drivers/fsl_port.h ****     kPORT_FlagRisingEdge = 0x05U,  /*!< Flag sets on rising edge. */
 143:../drivers/fsl_port.h ****     kPORT_FlagFallingEdge = 0x06U, /*!< Flag sets on falling edge. */
 144:../drivers/fsl_port.h ****     kPORT_FlagEitherEdge = 0x07U,  /*!< Flag sets on either edge. */
 145:../drivers/fsl_port.h **** #endif
 146:../drivers/fsl_port.h ****     kPORT_InterruptLogicZero = 0x8U,   /*!< Interrupt when logic zero. */
 147:../drivers/fsl_port.h ****     kPORT_InterruptRisingEdge = 0x9U,  /*!< Interrupt on rising edge. */
 148:../drivers/fsl_port.h ****     kPORT_InterruptFallingEdge = 0xAU, /*!< Interrupt on falling edge. */
 149:../drivers/fsl_port.h ****     kPORT_InterruptEitherEdge = 0xBU,  /*!< Interrupt on either edge. */
 150:../drivers/fsl_port.h ****     kPORT_InterruptLogicOne = 0xCU,    /*!< Interrupt when logic one. */
 151:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_IRQC_TRIGGER) && FSL_FEATURE_PORT_HAS_IRQC_TRIGGER
 152:../drivers/fsl_port.h ****     kPORT_ActiveHighTriggerOutputEnable = 0xDU, /*!< Enable active high-trigger output. */
 153:../drivers/fsl_port.h ****     kPORT_ActiveLowTriggerOutputEnable = 0xEU,  /*!< Enable active low-trigger output. */
 154:../drivers/fsl_port.h **** #endif
 155:../drivers/fsl_port.h **** } port_interrupt_t;
 156:../drivers/fsl_port.h **** 
 157:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_DIGITAL_FILTER) && FSL_FEATURE_PORT_HAS_DIGITAL_FILTER
 158:../drivers/fsl_port.h **** /*! @brief Digital filter clock source selection */
 159:../drivers/fsl_port.h **** typedef enum _port_digital_filter_clock_source
 160:../drivers/fsl_port.h **** {
 161:../drivers/fsl_port.h ****     kPORT_BusClock = 0U, /*!< Digital filters are clocked by the bus clock. */
 162:../drivers/fsl_port.h ****     kPORT_LpoClock = 1U, /*!< Digital filters are clocked by the 1 kHz LPO clock. */
 163:../drivers/fsl_port.h **** } port_digital_filter_clock_source_t;
 164:../drivers/fsl_port.h **** 
 165:../drivers/fsl_port.h **** /*! @brief PORT digital filter feature configuration definition */
 166:../drivers/fsl_port.h **** typedef struct _port_digital_filter_config
 167:../drivers/fsl_port.h **** {
 168:../drivers/fsl_port.h ****     uint32_t digitalFilterWidth;                    /*!< Set digital filter width */
 169:../drivers/fsl_port.h ****     port_digital_filter_clock_source_t clockSource; /*!< Set digital filter clockSource */
 170:../drivers/fsl_port.h **** } port_digital_filter_config_t;
 171:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_DIGITAL_FILTER */
 172:../drivers/fsl_port.h **** 
 173:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_PCR_MUX_WIDTH) && FSL_FEATURE_PORT_PCR_MUX_WIDTH
 174:../drivers/fsl_port.h **** /*! @brief PORT pin configuration structure */
 175:../drivers/fsl_port.h **** typedef struct _port_pin_config
 176:../drivers/fsl_port.h **** {
 177:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_PULL_ENABLE) && FSL_FEATURE_PORT_HAS_PULL_ENABLE
 178:../drivers/fsl_port.h ****     uint16_t pullSelect : 2; /*!< No-pull/pull-down/pull-up select */
 179:../drivers/fsl_port.h **** #else
 180:../drivers/fsl_port.h ****     uint16_t : 2;
 181:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_PULL_ENABLE */
 182:../drivers/fsl_port.h **** 
 183:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_SLEW_RATE) && FSL_FEATURE_PORT_HAS_SLEW_RATE
 184:../drivers/fsl_port.h ****     uint16_t slewRate : 1; /*!< Fast/slow slew rate Configure */
 185:../drivers/fsl_port.h **** #else
 186:../drivers/fsl_port.h ****     uint16_t : 1;
 187:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_SLEW_RATE */
 188:../drivers/fsl_port.h **** 
 189:../drivers/fsl_port.h ****     uint16_t : 1;
 190:../drivers/fsl_port.h **** 
 191:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_PASSIVE_FILTER) && FSL_FEATURE_PORT_HAS_PASSIVE_FILTER
 192:../drivers/fsl_port.h ****     uint16_t passiveFilterEnable : 1; /*!< Passive filter enable/disable */
 193:../drivers/fsl_port.h **** #else
 194:../drivers/fsl_port.h ****     uint16_t : 1;
 195:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_PASSIVE_FILTER */
 196:../drivers/fsl_port.h **** 
 197:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_OPEN_DRAIN) && FSL_FEATURE_PORT_HAS_OPEN_DRAIN
 198:../drivers/fsl_port.h ****     uint16_t openDrainEnable : 1; /*!< Open drain enable/disable */
 199:../drivers/fsl_port.h **** #else
 200:../drivers/fsl_port.h ****     uint16_t : 1;
 201:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_OPEN_DRAIN */
 202:../drivers/fsl_port.h **** 
 203:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH) && FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH
 204:../drivers/fsl_port.h ****     uint16_t driveStrength : 1; /*!< Fast/slow drive strength configure */
 205:../drivers/fsl_port.h **** #else
 206:../drivers/fsl_port.h ****     uint16_t : 1;
 207:../drivers/fsl_port.h **** #endif
 208:../drivers/fsl_port.h **** 
 209:../drivers/fsl_port.h ****     uint16_t : 1;
 210:../drivers/fsl_port.h **** 
 211:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_PCR_MUX_WIDTH) && (FSL_FEATURE_PORT_PCR_MUX_WIDTH == 3)
 212:../drivers/fsl_port.h ****     uint16_t mux : 3; /*!< Pin mux Configure */
 213:../drivers/fsl_port.h ****     uint16_t : 4;
 214:../drivers/fsl_port.h **** #elif defined(FSL_FEATURE_PORT_PCR_MUX_WIDTH) && (FSL_FEATURE_PORT_PCR_MUX_WIDTH == 4)
 215:../drivers/fsl_port.h ****     uint16_t mux : 4; /*!< Pin mux Configure */
 216:../drivers/fsl_port.h ****     uint16_t : 3;
 217:../drivers/fsl_port.h **** #else
 218:../drivers/fsl_port.h ****     uint16_t : 7,
 219:../drivers/fsl_port.h **** #endif
 220:../drivers/fsl_port.h **** 
 221:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK) && FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK
 222:../drivers/fsl_port.h ****     uint16_t lockRegister : 1; /*!< Lock/unlock the PCR field[15:0] */
 223:../drivers/fsl_port.h **** #else
 224:../drivers/fsl_port.h ****     uint16_t : 1;
 225:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK */
 226:../drivers/fsl_port.h **** } port_pin_config_t;
 227:../drivers/fsl_port.h **** #endif /* FSL_FEATURE_PORT_PCR_MUX_WIDTH */
 228:../drivers/fsl_port.h **** 
 229:../drivers/fsl_port.h **** /*******************************************************************************
 230:../drivers/fsl_port.h **** * API
 231:../drivers/fsl_port.h **** ******************************************************************************/
 232:../drivers/fsl_port.h **** 
 233:../drivers/fsl_port.h **** #if defined(__cplusplus)
 234:../drivers/fsl_port.h **** extern "C" {
 235:../drivers/fsl_port.h **** #endif
 236:../drivers/fsl_port.h **** 
 237:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_PCR_MUX_WIDTH) && FSL_FEATURE_PORT_PCR_MUX_WIDTH
 238:../drivers/fsl_port.h **** /*! @name Configuration */
 239:../drivers/fsl_port.h **** /*@{*/
 240:../drivers/fsl_port.h **** 
 241:../drivers/fsl_port.h **** /*!
 242:../drivers/fsl_port.h ****  * @brief Sets the port PCR register.
 243:../drivers/fsl_port.h ****  *
 244:../drivers/fsl_port.h ****  * This is an example to define an input pin or output pin PCR configuration.
 245:../drivers/fsl_port.h ****  * @code
 246:../drivers/fsl_port.h ****  * // Define a digital input pin PCR configuration
 247:../drivers/fsl_port.h ****  * port_pin_config_t config = {
 248:../drivers/fsl_port.h ****  *      kPORT_PullUp,
 249:../drivers/fsl_port.h ****  *      kPORT_FastSlewRate,
 250:../drivers/fsl_port.h ****  *      kPORT_PassiveFilterDisable,
 251:../drivers/fsl_port.h ****  *      kPORT_OpenDrainDisable,
 252:../drivers/fsl_port.h ****  *      kPORT_LowDriveStrength,
 253:../drivers/fsl_port.h ****  *      kPORT_MuxAsGpio,
 254:../drivers/fsl_port.h ****  *      kPORT_UnLockRegister,
 255:../drivers/fsl_port.h ****  * };
 256:../drivers/fsl_port.h ****  * @endcode
 257:../drivers/fsl_port.h ****  *
 258:../drivers/fsl_port.h ****  * @param base   PORT peripheral base pointer.
 259:../drivers/fsl_port.h ****  * @param pin    PORT pin number.
 260:../drivers/fsl_port.h ****  * @param config PORT PCR register configuration structure.
 261:../drivers/fsl_port.h ****  */
 262:../drivers/fsl_port.h **** static inline void PORT_SetPinConfig(PORT_Type *base, uint32_t pin, const port_pin_config_t *config
 263:../drivers/fsl_port.h **** {
 264:../drivers/fsl_port.h ****     assert(config);
 265:../drivers/fsl_port.h ****     uint32_t addr = (uint32_t)&base->PCR[pin];
 266:../drivers/fsl_port.h ****     *(volatile uint16_t *)(addr) = *((const uint16_t *)config);
 267:../drivers/fsl_port.h **** }
 268:../drivers/fsl_port.h **** 
 269:../drivers/fsl_port.h **** /*!
 270:../drivers/fsl_port.h ****  * @brief Sets the port PCR register for multiple pins.
 271:../drivers/fsl_port.h ****  *
 272:../drivers/fsl_port.h ****  * This is an example to define input pins or output pins PCR configuration.
 273:../drivers/fsl_port.h ****  * @code
 274:../drivers/fsl_port.h ****  * // Define a digital input pin PCR configuration
 275:../drivers/fsl_port.h ****  * port_pin_config_t config = {
 276:../drivers/fsl_port.h ****  *      kPORT_PullUp ,
 277:../drivers/fsl_port.h ****  *      kPORT_PullEnable,
 278:../drivers/fsl_port.h ****  *      kPORT_FastSlewRate,
 279:../drivers/fsl_port.h ****  *      kPORT_PassiveFilterDisable,
 280:../drivers/fsl_port.h ****  *      kPORT_OpenDrainDisable,
 281:../drivers/fsl_port.h ****  *      kPORT_LowDriveStrength,
 282:../drivers/fsl_port.h ****  *      kPORT_MuxAsGpio,
 283:../drivers/fsl_port.h ****  *      kPORT_UnlockRegister,
 284:../drivers/fsl_port.h ****  * };
 285:../drivers/fsl_port.h ****  * @endcode
 286:../drivers/fsl_port.h ****  *
 287:../drivers/fsl_port.h ****  * @param base   PORT peripheral base pointer.
 288:../drivers/fsl_port.h ****  * @param mask   PORT pin number macro.
 289:../drivers/fsl_port.h ****  * @param config PORT PCR register configuration structure.
 290:../drivers/fsl_port.h ****  */
 291:../drivers/fsl_port.h **** static inline void PORT_SetMultiplePinsConfig(PORT_Type *base, uint32_t mask, const port_pin_config
 292:../drivers/fsl_port.h **** {
 293:../drivers/fsl_port.h ****     assert(config);
 294:../drivers/fsl_port.h **** 
 295:../drivers/fsl_port.h ****     uint16_t pcrl = *((const uint16_t *)config);
 296:../drivers/fsl_port.h **** 
 297:../drivers/fsl_port.h ****     if (mask & 0xffffU)
 298:../drivers/fsl_port.h ****     {
 299:../drivers/fsl_port.h ****         base->GPCLR = ((mask & 0xffffU) << 16) | pcrl;
 300:../drivers/fsl_port.h ****     }
 301:../drivers/fsl_port.h ****     if (mask >> 16)
 302:../drivers/fsl_port.h ****     {
 303:../drivers/fsl_port.h ****         base->GPCHR = (mask & 0xffff0000U) | pcrl;
 304:../drivers/fsl_port.h ****     }
 305:../drivers/fsl_port.h **** }
 306:../drivers/fsl_port.h **** 
 307:../drivers/fsl_port.h **** #if defined(FSL_FEATURE_PORT_HAS_MULTIPLE_IRQ_CONFIG) && FSL_FEATURE_PORT_HAS_MULTIPLE_IRQ_CONFIG
 308:../drivers/fsl_port.h **** /*!
 309:../drivers/fsl_port.h ****  * @brief Sets the port interrupt configuration in PCR register for multiple pins.
 310:../drivers/fsl_port.h ****  *
 311:../drivers/fsl_port.h ****  * @param base   PORT peripheral base pointer.
 312:../drivers/fsl_port.h ****  * @param mask   PORT pin number macro.
 313:../drivers/fsl_port.h ****  * @param config  PORT pin interrupt configuration.
 314:../drivers/fsl_port.h ****  *        - #kPORT_InterruptOrDMADisabled: Interrupt/DMA request disabled.
 315:../drivers/fsl_port.h ****  *        - #kPORT_DMARisingEdge : DMA request on rising edge(if the DMA requests exit).
 316:../drivers/fsl_port.h ****  *        - #kPORT_DMAFallingEdge: DMA request on falling edge(if the DMA requests exit).
 317:../drivers/fsl_port.h ****  *        - #kPORT_DMAEitherEdge : DMA request on either edge(if the DMA requests exit).
 318:../drivers/fsl_port.h ****  *        - #kPORT_FlagRisingEdge : Flag sets on rising edge(if the Flag states exit).
 319:../drivers/fsl_port.h ****  *        - #kPORT_FlagFallingEdge : Flag sets on falling edge(if the Flag states exit).
 320:../drivers/fsl_port.h ****  *        - #kPORT_FlagEitherEdge : Flag sets on either edge(if the Flag states exit).
 321:../drivers/fsl_port.h ****  *        - #kPORT_InterruptLogicZero  : Interrupt when logic zero.
 322:../drivers/fsl_port.h ****  *        - #kPORT_InterruptRisingEdge : Interrupt on rising edge.
 323:../drivers/fsl_port.h ****  *        - #kPORT_InterruptFallingEdge: Interrupt on falling edge.
 324:../drivers/fsl_port.h ****  *        - #kPORT_InterruptEitherEdge : Interrupt on either edge.
 325:../drivers/fsl_port.h ****  *        - #kPORT_InterruptLogicOne   : Interrupt when logic one.
 326:../drivers/fsl_port.h ****  *        - #kPORT_ActiveHighTriggerOutputEnable : Enable active high-trigger output (if the trigge
 327:../drivers/fsl_port.h ****  *        - #kPORT_ActiveLowTriggerOutputEnable  : Enable active low-trigger output (if the trigger
 328:../drivers/fsl_port.h ****  */
 329:../drivers/fsl_port.h **** static inline void PORT_SetMultipleInterruptPinsConfig(PORT_Type *base, uint32_t mask, port_interru
 330:../drivers/fsl_port.h **** {
 331:../drivers/fsl_port.h ****     assert(config);
 332:../drivers/fsl_port.h **** 
 333:../drivers/fsl_port.h ****     if (mask & 0xffffU)
 334:../drivers/fsl_port.h ****     {
 335:../drivers/fsl_port.h ****         base->GICLR = (config << 16) | (mask & 0xffffU);
 336:../drivers/fsl_port.h ****     }
 337:../drivers/fsl_port.h ****     if (mask >> 16)
 338:../drivers/fsl_port.h ****     {
 339:../drivers/fsl_port.h ****         base->GICHR = (config << 16) | (mask & 0xffff0000U);
 340:../drivers/fsl_port.h ****     }
 341:../drivers/fsl_port.h **** }
 342:../drivers/fsl_port.h **** #endif
 343:../drivers/fsl_port.h **** 
 344:../drivers/fsl_port.h **** /*!
 345:../drivers/fsl_port.h ****  * @brief Configures the pin muxing.
 346:../drivers/fsl_port.h ****  *
 347:../drivers/fsl_port.h ****  * @param base  PORT peripheral base pointer.
 348:../drivers/fsl_port.h ****  * @param pin   PORT pin number.
 349:../drivers/fsl_port.h ****  * @param mux   pin muxing slot selection.
 350:../drivers/fsl_port.h ****  *        - #kPORT_PinDisabledOrAnalog: Pin disabled or work in analog function.
 351:../drivers/fsl_port.h ****  *        - #kPORT_MuxAsGpio          : Set as GPIO.
 352:../drivers/fsl_port.h ****  *        - #kPORT_MuxAlt2            : chip-specific.
 353:../drivers/fsl_port.h ****  *        - #kPORT_MuxAlt3            : chip-specific.
 354:../drivers/fsl_port.h ****  *        - #kPORT_MuxAlt4            : chip-specific.
 355:../drivers/fsl_port.h ****  *        - #kPORT_MuxAlt5            : chip-specific.
 356:../drivers/fsl_port.h ****  *        - #kPORT_MuxAlt6            : chip-specific.
 357:../drivers/fsl_port.h ****  *        - #kPORT_MuxAlt7            : chip-specific.
 358:../drivers/fsl_port.h ****  * @Note : This function is NOT recommended to use together with the PORT_SetPinsConfig, because
 359:../drivers/fsl_port.h ****  *         the PORT_SetPinsConfig need to configure the pin mux anyway (Otherwise the pin mux is
 360:../drivers/fsl_port.h ****  *         reset to zero : kPORT_PinDisabledOrAnalog).
 361:../drivers/fsl_port.h ****  *        This function is recommended to use to reset the pin mux
 362:../drivers/fsl_port.h ****  *
 363:../drivers/fsl_port.h ****  */
 364:../drivers/fsl_port.h **** static inline void PORT_SetPinMux(PORT_Type *base, uint32_t pin, port_mux_t mux)
 365:../drivers/fsl_port.h **** {
 366:../drivers/fsl_port.h ****     base->PCR[pin] = (base->PCR[pin] & ~PORT_PCR_MUX_MASK) | PORT_PCR_MUX(mux);
  71              		.loc 3 366 0
  72 001c 254B     		ldr	r3, .L2+8
  73 001e 1A6C     		ldr	r2, [r3, #64]
  74 0020 22F4E062 		bic	r2, r2, #1792
  75 0024 42F44072 		orr	r2, r2, #768
  76 0028 1A64     		str	r2, [r3, #64]
  77              	.LVL4:
  78              	.LBE57:
  79              	.LBE56:
  80              	.LBB58:
  81              	.LBB59:
  82 002a 5A6C     		ldr	r2, [r3, #68]
  83 002c 22F4E062 		bic	r2, r2, #1792
  84 0030 42F44072 		orr	r2, r2, #768
  85 0034 5A64     		str	r2, [r3, #68]
  86              	.LVL5:
  87              	.LBE59:
  88              	.LBE58:
  89              	.LBB60:
  90              	.LBB61:
  91 0036 5A6D     		ldr	r2, [r3, #84]
  92 0038 22F4E062 		bic	r2, r2, #1792
  93 003c 42F48072 		orr	r2, r2, #256
  94 0040 5A65     		str	r2, [r3, #84]
  95              	.LVL6:
  96              	.LBE61:
  97              	.LBE60:
  98              	.LBB62:
  99              	.LBB63:
 100 0042 9A6D     		ldr	r2, [r3, #88]
 101 0044 22F4E062 		bic	r2, r2, #1792
 102 0048 42F48072 		orr	r2, r2, #256
 103 004c 9A65     		str	r2, [r3, #88]
 104              	.LVL7:
 105              	.LBE63:
 106              	.LBE62:
 107              	.LBB64:
 108              	.LBB65:
 109 004e DA6A     		ldr	r2, [r3, #44]
 110 0050 22F4E062 		bic	r2, r2, #1792
 111 0054 42F48072 		orr	r2, r2, #256
 112 0058 DA62     		str	r2, [r3, #44]
 113              	.LVL8:
 114              	.LBE65:
 115              	.LBE64:
 116              	.LBB66:
 117              	.LBB67:
 118 005a 03F58053 		add	r3, r3, #4096
 119 005e 1A69     		ldr	r2, [r3, #16]
 120 0060 22F4E062 		bic	r2, r2, #1792
 121 0064 42F48072 		orr	r2, r2, #256
 122 0068 1A61     		str	r2, [r3, #16]
 123              	.LVL9:
 124              	.LBE67:
 125              	.LBE66:
 126              	.LBB68:
 127              	.LBB69:
 128 006a 1A6C     		ldr	r2, [r3, #64]
 129 006c 22F4E062 		bic	r2, r2, #1792
 130 0070 42F44072 		orr	r2, r2, #768
 131 0074 1A64     		str	r2, [r3, #64]
 132              	.LVL10:
 133              	.LBE69:
 134              	.LBE68:
 135              	.LBB70:
 136              	.LBB71:
 137 0076 5A6C     		ldr	r2, [r3, #68]
 138 0078 22F4E062 		bic	r2, r2, #1792
 139 007c 42F44072 		orr	r2, r2, #768
 140 0080 5A64     		str	r2, [r3, #68]
 141              	.LVL11:
 142              	.LBE71:
 143              	.LBE70:
 144              	.LBB72:
 145              	.LBB73:
 146 0082 0D4A     		ldr	r2, .L2+12
 147 0084 9368     		ldr	r3, [r2, #8]
 148 0086 23F4E063 		bic	r3, r3, #1792
 149 008a 43F44073 		orr	r3, r3, #768
 150 008e 9360     		str	r3, [r2, #8]
 151              	.LVL12:
 152              	.LBE73:
 153              	.LBE72:
 154              	.LBB74:
 155              	.LBB75:
 156 0090 D368     		ldr	r3, [r2, #12]
 157 0092 23F4E063 		bic	r3, r3, #1792
 158 0096 43F44073 		orr	r3, r3, #768
 159 009a D360     		str	r3, [r2, #12]
 160              	.LVL13:
 161              	.LBE75:
 162              	.LBE74:
 163              		.loc 1 106 0
 164 009c 41F21002 		movw	r2, #4112
 165 00a0 8B58     		ldr	r3, [r1, r2]
 107:../board/pin_mux.c ****     (~(SIM_SOPT5_UART0TXSRC_MASK)))                          /* Mask bits to zero which are setting
 108:../board/pin_mux.c ****       | SIM_SOPT5_UART0TXSRC(SOPT5_UART0TXSRC_UART_TX)       /* UART 0 transmit data source select:
 166              		.loc 1 108 0
 167 00a2 23F00303 		bic	r3, r3, #3
 106:../board/pin_mux.c ****     (~(SIM_SOPT5_UART0TXSRC_MASK)))                          /* Mask bits to zero which are setting
 168              		.loc 1 106 0
 169 00a6 8B50     		str	r3, [r1, r2]
 109:../board/pin_mux.c ****     );
 110:../board/pin_mux.c **** }
 170              		.loc 1 110 0
 171 00a8 7047     		bx	lr
 172              	.L3:
 173 00aa 00BF     		.align	2
 174              	.L2:
 175 00ac 38800440 		.word	1074036792
 176 00b0 00700440 		.word	1074032640
 177 00b4 00A00440 		.word	1074044928
 178 00b8 00C00440 		.word	1074053120
 179              		.cfi_endproc
 180              	.LFE157:
 182              		.section	.text.BOARD_InitBootPins,"ax",%progbits
 183              		.align	1
 184              		.global	BOARD_InitBootPins
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 188              		.fpu fpv4-sp-d16
 190              	BOARD_InitBootPins:
 191              	.LFB156:
  56:../board/pin_mux.c ****     BOARD_InitPins();
 192              		.loc 1 56 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
  57:../board/pin_mux.c **** }
 197              		.loc 1 57 0
 198 0000 FFF7FEBF 		b	BOARD_InitPins
 199              	.LVL14:
 200              		.cfi_endproc
 201              	.LFE156:
 203              		.text
 204              	.Letext0:
 205              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 206              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 207              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 208              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 209              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 210              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 211              		.file 10 "../CMSIS/core_cm4.h"
 212              		.file 11 "../CMSIS/system_MK64F12.h"
 213              		.file 12 "../CMSIS/MK64F12.h"
