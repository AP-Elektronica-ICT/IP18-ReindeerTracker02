   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"system_MK64F12.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	1
  19              		.global	SystemInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SystemInit:
  26              	.LFB123:
  27              		.file 1 "../CMSIS/system_MK64F12.c"
   1:../CMSIS/system_MK64F12.c **** /*
   2:../CMSIS/system_MK64F12.c **** ** ###################################################################
   3:../CMSIS/system_MK64F12.c **** **     Processors:          MK64FN1M0CAJ12
   4:../CMSIS/system_MK64F12.c **** **                          MK64FN1M0VDC12
   5:../CMSIS/system_MK64F12.c **** **                          MK64FN1M0VLL12
   6:../CMSIS/system_MK64F12.c **** **                          MK64FN1M0VLQ12
   7:../CMSIS/system_MK64F12.c **** **                          MK64FN1M0VMD12
   8:../CMSIS/system_MK64F12.c **** **                          MK64FX512VDC12
   9:../CMSIS/system_MK64F12.c **** **                          MK64FX512VLL12
  10:../CMSIS/system_MK64F12.c **** **                          MK64FX512VLQ12
  11:../CMSIS/system_MK64F12.c **** **                          MK64FX512VMD12
  12:../CMSIS/system_MK64F12.c **** **
  13:../CMSIS/system_MK64F12.c **** **     Compilers:           Keil ARM C/C++ Compiler
  14:../CMSIS/system_MK64F12.c **** **                          Freescale C/C++ for Embedded ARM
  15:../CMSIS/system_MK64F12.c **** **                          GNU C Compiler
  16:../CMSIS/system_MK64F12.c **** **                          IAR ANSI C/C++ Compiler for ARM
  17:../CMSIS/system_MK64F12.c **** **                          MCUXpresso Compiler
  18:../CMSIS/system_MK64F12.c **** **
  19:../CMSIS/system_MK64F12.c **** **     Reference manual:    K64P144M120SF5RM, Rev.2, January 2014
  20:../CMSIS/system_MK64F12.c **** **     Version:             rev. 2.9, 2016-03-21
  21:../CMSIS/system_MK64F12.c **** **     Build:               b170713
  22:../CMSIS/system_MK64F12.c **** **
  23:../CMSIS/system_MK64F12.c **** **     Abstract:
  24:../CMSIS/system_MK64F12.c **** **         Provides a system configuration function and a global variable that
  25:../CMSIS/system_MK64F12.c **** **         contains the system frequency. It configures the device and initializes
  26:../CMSIS/system_MK64F12.c **** **         the oscillator (PLL) that is part of the microcontroller device.
  27:../CMSIS/system_MK64F12.c **** **
  28:../CMSIS/system_MK64F12.c **** **     Copyright 2016 Freescale Semiconductor, Inc.
  29:../CMSIS/system_MK64F12.c **** **     Copyright 2016-2017 NXP
  30:../CMSIS/system_MK64F12.c **** **     Redistribution and use in source and binary forms, with or without modification,
  31:../CMSIS/system_MK64F12.c **** **     are permitted provided that the following conditions are met:
  32:../CMSIS/system_MK64F12.c **** **
  33:../CMSIS/system_MK64F12.c **** **     1. Redistributions of source code must retain the above copyright notice, this list
  34:../CMSIS/system_MK64F12.c **** **       of conditions and the following disclaimer.
  35:../CMSIS/system_MK64F12.c **** **
  36:../CMSIS/system_MK64F12.c **** **     2. Redistributions in binary form must reproduce the above copyright notice, this
  37:../CMSIS/system_MK64F12.c **** **       list of conditions and the following disclaimer in the documentation and/or
  38:../CMSIS/system_MK64F12.c **** **       other materials provided with the distribution.
  39:../CMSIS/system_MK64F12.c **** **
  40:../CMSIS/system_MK64F12.c **** **     3. Neither the name of the copyright holder nor the names of its
  41:../CMSIS/system_MK64F12.c **** **       contributors may be used to endorse or promote products derived from this
  42:../CMSIS/system_MK64F12.c **** **       software without specific prior written permission.
  43:../CMSIS/system_MK64F12.c **** **
  44:../CMSIS/system_MK64F12.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  45:../CMSIS/system_MK64F12.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  46:../CMSIS/system_MK64F12.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  47:../CMSIS/system_MK64F12.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  48:../CMSIS/system_MK64F12.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  49:../CMSIS/system_MK64F12.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  50:../CMSIS/system_MK64F12.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  51:../CMSIS/system_MK64F12.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  52:../CMSIS/system_MK64F12.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  53:../CMSIS/system_MK64F12.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  54:../CMSIS/system_MK64F12.c **** **
  55:../CMSIS/system_MK64F12.c **** **     http:                 www.nxp.com
  56:../CMSIS/system_MK64F12.c **** **     mail:                 support@nxp.com
  57:../CMSIS/system_MK64F12.c **** **
  58:../CMSIS/system_MK64F12.c **** **     Revisions:
  59:../CMSIS/system_MK64F12.c **** **     - rev. 1.0 (2013-08-12)
  60:../CMSIS/system_MK64F12.c **** **         Initial version.
  61:../CMSIS/system_MK64F12.c **** **     - rev. 2.0 (2013-10-29)
  62:../CMSIS/system_MK64F12.c **** **         Register accessor macros added to the memory map.
  63:../CMSIS/system_MK64F12.c **** **         Symbols for Processor Expert memory map compatibility added to the memory map.
  64:../CMSIS/system_MK64F12.c **** **         Startup file for gcc has been updated according to CMSIS 3.2.
  65:../CMSIS/system_MK64F12.c **** **         System initialization updated.
  66:../CMSIS/system_MK64F12.c **** **         MCG - registers updated.
  67:../CMSIS/system_MK64F12.c **** **         PORTA, PORTB, PORTC, PORTE - registers for digital filter removed.
  68:../CMSIS/system_MK64F12.c **** **     - rev. 2.1 (2013-10-30)
  69:../CMSIS/system_MK64F12.c **** **         Definition of BITBAND macros updated to support peripherals with 32-bit acces disabled.
  70:../CMSIS/system_MK64F12.c **** **     - rev. 2.2 (2013-12-09)
  71:../CMSIS/system_MK64F12.c **** **         DMA - EARS register removed.
  72:../CMSIS/system_MK64F12.c **** **         AIPS0, AIPS1 - MPRA register updated.
  73:../CMSIS/system_MK64F12.c **** **     - rev. 2.3 (2014-01-24)
  74:../CMSIS/system_MK64F12.c **** **         Update according to reference manual rev. 2
  75:../CMSIS/system_MK64F12.c **** **         ENET, MCG, MCM, SIM, USB - registers updated
  76:../CMSIS/system_MK64F12.c **** **     - rev. 2.4 (2014-02-10)
  77:../CMSIS/system_MK64F12.c **** **         The declaration of clock configurations has been moved to separate header file system_MK
  78:../CMSIS/system_MK64F12.c **** **         Update of SystemInit() and SystemCoreClockUpdate() functions.
  79:../CMSIS/system_MK64F12.c **** **     - rev. 2.5 (2014-02-10)
  80:../CMSIS/system_MK64F12.c **** **         The declaration of clock configurations has been moved to separate header file system_MK
  81:../CMSIS/system_MK64F12.c **** **         Update of SystemInit() and SystemCoreClockUpdate() functions.
  82:../CMSIS/system_MK64F12.c **** **         Module access macro module_BASES replaced by module_BASE_PTRS.
  83:../CMSIS/system_MK64F12.c **** **     - rev. 2.6 (2014-08-28)
  84:../CMSIS/system_MK64F12.c **** **         Update of system files - default clock configuration changed.
  85:../CMSIS/system_MK64F12.c **** **         Update of startup files - possibility to override DefaultISR added.
  86:../CMSIS/system_MK64F12.c **** **     - rev. 2.7 (2014-10-14)
  87:../CMSIS/system_MK64F12.c **** **         Interrupt INT_LPTimer renamed to INT_LPTMR0, interrupt INT_Watchdog renamed to INT_WDOG_
  88:../CMSIS/system_MK64F12.c **** **     - rev. 2.8 (2015-02-19)
  89:../CMSIS/system_MK64F12.c **** **         Renamed interrupt vector LLW to LLWU.
  90:../CMSIS/system_MK64F12.c **** **     - rev. 2.9 (2016-03-21)
  91:../CMSIS/system_MK64F12.c **** **         Added MK64FN1M0CAJ12 part.
  92:../CMSIS/system_MK64F12.c **** **         GPIO - renamed port instances: PTx -> GPIOx.
  93:../CMSIS/system_MK64F12.c **** **
  94:../CMSIS/system_MK64F12.c **** ** ###################################################################
  95:../CMSIS/system_MK64F12.c **** */
  96:../CMSIS/system_MK64F12.c **** 
  97:../CMSIS/system_MK64F12.c **** /*!
  98:../CMSIS/system_MK64F12.c ****  * @file MK64F12
  99:../CMSIS/system_MK64F12.c ****  * @version 2.9
 100:../CMSIS/system_MK64F12.c ****  * @date 2016-03-21
 101:../CMSIS/system_MK64F12.c ****  * @brief Device specific configuration file for MK64F12 (implementation file)
 102:../CMSIS/system_MK64F12.c ****  *
 103:../CMSIS/system_MK64F12.c ****  * Provides a system configuration function and a global variable that contains
 104:../CMSIS/system_MK64F12.c ****  * the system frequency. It configures the device and initializes the oscillator
 105:../CMSIS/system_MK64F12.c ****  * (PLL) that is part of the microcontroller device.
 106:../CMSIS/system_MK64F12.c ****  */
 107:../CMSIS/system_MK64F12.c **** 
 108:../CMSIS/system_MK64F12.c **** #include <stdint.h>
 109:../CMSIS/system_MK64F12.c **** #include "fsl_device_registers.h"
 110:../CMSIS/system_MK64F12.c **** 
 111:../CMSIS/system_MK64F12.c **** 
 112:../CMSIS/system_MK64F12.c **** 
 113:../CMSIS/system_MK64F12.c **** /* ----------------------------------------------------------------------------
 114:../CMSIS/system_MK64F12.c ****    -- Core clock
 115:../CMSIS/system_MK64F12.c ****    ---------------------------------------------------------------------------- */
 116:../CMSIS/system_MK64F12.c **** 
 117:../CMSIS/system_MK64F12.c **** uint32_t SystemCoreClock = DEFAULT_SYSTEM_CLOCK;
 118:../CMSIS/system_MK64F12.c **** 
 119:../CMSIS/system_MK64F12.c **** /* ----------------------------------------------------------------------------
 120:../CMSIS/system_MK64F12.c ****    -- SystemInit()
 121:../CMSIS/system_MK64F12.c ****    ---------------------------------------------------------------------------- */
 122:../CMSIS/system_MK64F12.c **** 
 123:../CMSIS/system_MK64F12.c **** void SystemInit (void) {
  28              		.loc 1 123 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 124:../CMSIS/system_MK64F12.c **** #if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
 125:../CMSIS/system_MK64F12.c ****   SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));    /* set CP10, CP11 Full Access */
  33              		.loc 1 125 0
  34 0000 084A     		ldr	r2, .L2
  35 0002 D2F88830 		ldr	r3, [r2, #136]
  36 0006 43F47003 		orr	r3, r3, #15728640
  37 000a C2F88830 		str	r3, [r2, #136]
 126:../CMSIS/system_MK64F12.c **** #endif /* ((__FPU_PRESENT == 1) && (__FPU_USED == 1)) */
 127:../CMSIS/system_MK64F12.c **** #if (DISABLE_WDOG)
 128:../CMSIS/system_MK64F12.c ****   /* WDOG->UNLOCK: WDOGUNLOCK=0xC520 */
 129:../CMSIS/system_MK64F12.c ****   WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xC520); /* Key 1 */
  38              		.loc 1 129 0
  39 000e 064B     		ldr	r3, .L2+4
  40 0010 4CF22052 		movw	r2, #50464
  41 0014 DA81     		strh	r2, [r3, #14]	@ movhi
 130:../CMSIS/system_MK64F12.c ****   /* WDOG->UNLOCK: WDOGUNLOCK=0xD928 */
 131:../CMSIS/system_MK64F12.c ****   WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xD928); /* Key 2 */
  42              		.loc 1 131 0
  43 0016 4DF62812 		movw	r2, #55592
  44 001a DA81     		strh	r2, [r3, #14]	@ movhi
 132:../CMSIS/system_MK64F12.c ****   /* WDOG->STCTRLH: ?=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,?=0,?=1,WAITEN=1,STOPEN=1,DBGE
 133:../CMSIS/system_MK64F12.c ****   WDOG->STCTRLH = WDOG_STCTRLH_BYTESEL(0x00) |
  45              		.loc 1 133 0
  46 001c 4FF4E972 		mov	r2, #466
  47 0020 1A80     		strh	r2, [r3]	@ movhi
  48 0022 7047     		bx	lr
  49              	.L3:
  50              		.align	2
  51              	.L2:
  52 0024 00ED00E0 		.word	-536810240
  53 0028 00200540 		.word	1074077696
  54              		.cfi_endproc
  55              	.LFE123:
  57              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  58              		.align	1
  59              		.global	SystemCoreClockUpdate
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv4-sp-d16
  65              	SystemCoreClockUpdate:
  66              	.LFB124:
 134:../CMSIS/system_MK64F12.c ****                  WDOG_STCTRLH_WAITEN_MASK |
 135:../CMSIS/system_MK64F12.c ****                  WDOG_STCTRLH_STOPEN_MASK |
 136:../CMSIS/system_MK64F12.c ****                  WDOG_STCTRLH_ALLOWUPDATE_MASK |
 137:../CMSIS/system_MK64F12.c ****                  WDOG_STCTRLH_CLKSRC_MASK |
 138:../CMSIS/system_MK64F12.c ****                  0x0100U;
 139:../CMSIS/system_MK64F12.c **** #endif /* (DISABLE_WDOG) */
 140:../CMSIS/system_MK64F12.c **** 
 141:../CMSIS/system_MK64F12.c **** }
 142:../CMSIS/system_MK64F12.c **** 
 143:../CMSIS/system_MK64F12.c **** /* ----------------------------------------------------------------------------
 144:../CMSIS/system_MK64F12.c ****    -- SystemCoreClockUpdate()
 145:../CMSIS/system_MK64F12.c ****    ---------------------------------------------------------------------------- */
 146:../CMSIS/system_MK64F12.c **** 
 147:../CMSIS/system_MK64F12.c **** void SystemCoreClockUpdate (void) {
  67              		.loc 1 147 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
 148:../CMSIS/system_MK64F12.c ****   uint32_t MCGOUTClock;                /* Variable to store output clock frequency of the MCG modul
 149:../CMSIS/system_MK64F12.c ****   uint16_t Divider;
 150:../CMSIS/system_MK64F12.c **** 
 151:../CMSIS/system_MK64F12.c ****   if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x00U) {
  72              		.loc 1 151 0
  73 0000 544A     		ldr	r2, .L44
  74 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  75 0004 13F0C00F 		tst	r3, #192
  76 0008 7ED1     		bne	.L5
 152:../CMSIS/system_MK64F12.c ****     /* Output of FLL or PLL is selected */
 153:../CMSIS/system_MK64F12.c ****     if ((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U) {
  77              		.loc 1 153 0
  78 000a 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
  79 000c 5806     		lsls	r0, r3, #25
  80 000e 6ED4     		bmi	.L6
 154:../CMSIS/system_MK64F12.c ****       /* FLL is selected */
 155:../CMSIS/system_MK64F12.c ****       if ((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U) {
  81              		.loc 1 155 0
  82 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  83 0012 5907     		lsls	r1, r3, #29
  84 0014 3FD4     		bmi	.L30
 156:../CMSIS/system_MK64F12.c ****         /* External reference clock is selected */
 157:../CMSIS/system_MK64F12.c ****         switch (MCG->C7 & MCG_C7_OSCSEL_MASK) {
  85              		.loc 1 157 0
  86 0016 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
  87 0018 13F00303 		ands	r3, r3, #3
  88 001c 1DD0     		beq	.L31
 158:../CMSIS/system_MK64F12.c ****         case 0x00U:
 159:../CMSIS/system_MK64F12.c ****           MCGOUTClock = CPU_XTAL_CLK_HZ; /* System oscillator drives MCG clock */
 160:../CMSIS/system_MK64F12.c ****           break;
 161:../CMSIS/system_MK64F12.c ****         case 0x01U:
 162:../CMSIS/system_MK64F12.c ****           MCGOUTClock = CPU_XTAL32k_CLK_HZ; /* RTC 32 kHz oscillator drives MCG clock */
 163:../CMSIS/system_MK64F12.c ****           break;
 164:../CMSIS/system_MK64F12.c ****         case 0x02U:
 165:../CMSIS/system_MK64F12.c ****         default:
 166:../CMSIS/system_MK64F12.c ****           MCGOUTClock = CPU_INT_IRC_CLK_HZ; /* IRC 48MHz oscillator drives MCG clock */
  89              		.loc 1 166 0
  90 001e 012B     		cmp	r3, #1
  91 0020 4D48     		ldr	r0, .L44+4
  92 0022 08BF     		it	eq
  93 0024 4FF40040 		moveq	r0, #32768
  94              	.L9:
  95              	.LVL0:
 167:../CMSIS/system_MK64F12.c ****           break;
 168:../CMSIS/system_MK64F12.c ****         }
 169:../CMSIS/system_MK64F12.c ****         if (((MCG->C2 & MCG_C2_RANGE_MASK) != 0x00U) && ((MCG->C7 & MCG_C7_OSCSEL_MASK) != 0x01U)) 
  96              		.loc 1 169 0
  97 0028 4A4A     		ldr	r2, .L44
  98 002a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
  99 002c 13F0300F 		tst	r3, #48
 100 0030 1146     		mov	r1, r2
 101 0032 28D0     		beq	.L11
 102              		.loc 1 169 0 is_stmt 0 discriminator 1
 103 0034 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 104 0036 03F00303 		and	r3, r3, #3
 105 003a 012B     		cmp	r3, #1
 106 003c 23D0     		beq	.L11
 170:../CMSIS/system_MK64F12.c ****           switch (MCG->C1 & MCG_C1_FRDIV_MASK) {
 107              		.loc 1 170 0 is_stmt 1
 108 003e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 109 0040 01F03801 		and	r1, r1, #56
 110 0044 3029     		cmp	r1, #48
 111 0046 0AD0     		beq	.L13
 112 0048 3829     		cmp	r1, #56
 113 004a 21D0     		beq	.L32
 171:../CMSIS/system_MK64F12.c ****           case 0x38U:
 172:../CMSIS/system_MK64F12.c ****             Divider = 1536U;
 173:../CMSIS/system_MK64F12.c ****             break;
 174:../CMSIS/system_MK64F12.c ****           case 0x30U:
 175:../CMSIS/system_MK64F12.c ****             Divider = 1280U;
 176:../CMSIS/system_MK64F12.c ****             break;
 177:../CMSIS/system_MK64F12.c ****           default:
 178:../CMSIS/system_MK64F12.c ****             Divider = (uint16_t)(32LU << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
 114              		.loc 1 178 0
 115 004c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 116 004e C3F3C202 		ubfx	r2, r3, #3, #3
 117 0052 2023     		movs	r3, #32
 118              	.L42:
 179:../CMSIS/system_MK64F12.c ****             break;
 180:../CMSIS/system_MK64F12.c ****           }
 181:../CMSIS/system_MK64F12.c ****         } else {/* ((MCG->C2 & MCG_C2_RANGE_MASK) != 0x00U) */
 182:../CMSIS/system_MK64F12.c ****           Divider = (uint16_t)(1LU << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
 119              		.loc 1 182 0
 120 0054 9340     		lsls	r3, r3, r2
 121 0056 9BB2     		uxth	r3, r3
 122              	.LVL1:
 123 0058 03E0     		b	.L14
 124              	.LVL2:
 125              	.L31:
 159:../CMSIS/system_MK64F12.c ****           break;
 126              		.loc 1 159 0
 127 005a 4048     		ldr	r0, .L44+8
 128 005c E4E7     		b	.L9
 129              	.LVL3:
 130              	.L13:
 175:../CMSIS/system_MK64F12.c ****             break;
 131              		.loc 1 175 0
 132 005e 4FF4A063 		mov	r3, #1280
 133              	.L14:
 134              	.LVL4:
 183:../CMSIS/system_MK64F12.c ****         }
 184:../CMSIS/system_MK64F12.c ****         MCGOUTClock = (MCGOUTClock / Divider); /* Calculate the divided FLL reference clock */
 135              		.loc 1 184 0
 136 0062 B0FBF3F3 		udiv	r3, r0, r3
 137              	.LVL5:
 138              	.L7:
 185:../CMSIS/system_MK64F12.c ****       } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
 186:../CMSIS/system_MK64F12.c ****         MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* The slow internal reference clock is selected */
 187:../CMSIS/system_MK64F12.c ****       } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
 188:../CMSIS/system_MK64F12.c ****       /* Select correct multiplier to calculate the MCG output clock  */
 189:../CMSIS/system_MK64F12.c ****       switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
 139              		.loc 1 189 0
 140 0066 3B4A     		ldr	r2, .L44
 141 0068 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 142 006a 02F0E002 		and	r2, r2, #224
 143 006e 602A     		cmp	r2, #96
 144 0070 31D0     		beq	.L16
 145 0072 13D8     		bhi	.L17
 146 0074 202A     		cmp	r2, #32
 147 0076 28D0     		beq	.L18
 148 0078 402A     		cmp	r2, #64
 149 007a 29D0     		beq	.L19
 150 007c 9AB9     		cbnz	r2, .L15
 190:../CMSIS/system_MK64F12.c ****         case 0x00U:
 191:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 640U;
 151              		.loc 1 191 0
 152 007e 4FF42072 		mov	r2, #640
 153              	.L43:
 192:../CMSIS/system_MK64F12.c ****           break;
 193:../CMSIS/system_MK64F12.c ****         case 0x20U:
 194:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 1280U;
 195:../CMSIS/system_MK64F12.c ****           break;
 196:../CMSIS/system_MK64F12.c ****         case 0x40U:
 197:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 1920U;
 198:../CMSIS/system_MK64F12.c ****           break;
 199:../CMSIS/system_MK64F12.c ****         case 0x60U:
 200:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 2560U;
 201:../CMSIS/system_MK64F12.c ****           break;
 202:../CMSIS/system_MK64F12.c ****         case 0x80U:
 203:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 732U;
 204:../CMSIS/system_MK64F12.c ****           break;
 205:../CMSIS/system_MK64F12.c ****         case 0xA0U:
 206:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 1464U;
 207:../CMSIS/system_MK64F12.c ****           break;
 208:../CMSIS/system_MK64F12.c ****         case 0xC0U:
 209:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 2197U;
 210:../CMSIS/system_MK64F12.c ****           break;
 211:../CMSIS/system_MK64F12.c ****         case 0xE0U:
 212:../CMSIS/system_MK64F12.c ****           MCGOUTClock *= 2929U;
 154              		.loc 1 212 0
 155 0082 5343     		muls	r3, r2, r3
 156              	.LVL6:
 213:../CMSIS/system_MK64F12.c ****           break;
 157              		.loc 1 213 0
 158 0084 0FE0     		b	.L15
 159              	.LVL7:
 160              	.L11:
 182:../CMSIS/system_MK64F12.c ****         }
 161              		.loc 1 182 0
 162 0086 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 163 0088 C3F3C202 		ubfx	r2, r3, #3, #3
 164 008c 0123     		movs	r3, #1
 165 008e E1E7     		b	.L42
 166              	.L32:
 172:../CMSIS/system_MK64F12.c ****             break;
 167              		.loc 1 172 0
 168 0090 4FF4C063 		mov	r3, #1536
 169 0094 E5E7     		b	.L14
 170              	.LVL8:
 171              	.L30:
 186:../CMSIS/system_MK64F12.c ****       } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
 172              		.loc 1 186 0
 173 0096 4FF40043 		mov	r3, #32768
 174 009a E4E7     		b	.L7
 175              	.LVL9:
 176              	.L17:
 189:../CMSIS/system_MK64F12.c ****         case 0x00U:
 177              		.loc 1 189 0
 178 009c A02A     		cmp	r2, #160
 179 009e 20D0     		beq	.L21
 180 00a0 0CD8     		bhi	.L22
 181 00a2 802A     		cmp	r2, #128
 182 00a4 1AD0     		beq	.L23
 183              	.LVL10:
 184              	.L15:
 214:../CMSIS/system_MK64F12.c ****         default:
 215:../CMSIS/system_MK64F12.c ****           break;
 216:../CMSIS/system_MK64F12.c ****       }
 217:../CMSIS/system_MK64F12.c ****     } else { /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U)) */
 218:../CMSIS/system_MK64F12.c ****       /* PLL is selected */
 219:../CMSIS/system_MK64F12.c ****       Divider = (((uint16_t)MCG->C5 & MCG_C5_PRDIV0_MASK) + 0x01U);
 220:../CMSIS/system_MK64F12.c ****       MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider); /* Calculate the PLL reference clock */
 221:../CMSIS/system_MK64F12.c ****       Divider = (((uint16_t)MCG->C6 & MCG_C6_VDIV0_MASK) + 24U);
 222:../CMSIS/system_MK64F12.c ****       MCGOUTClock *= Divider;          /* Calculate the MCG output clock */
 223:../CMSIS/system_MK64F12.c ****     } /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U)) */
 224:../CMSIS/system_MK64F12.c ****   } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x40U) {
 225:../CMSIS/system_MK64F12.c ****     /* Internal reference clock is selected */
 226:../CMSIS/system_MK64F12.c ****     if ((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U) {
 227:../CMSIS/system_MK64F12.c ****       MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* Slow internal reference clock selected */
 228:../CMSIS/system_MK64F12.c ****     } else { /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
 229:../CMSIS/system_MK64F12.c ****       Divider = (uint16_t)(0x01LU << ((MCG->SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT));
 230:../CMSIS/system_MK64F12.c ****       MCGOUTClock = (uint32_t) (CPU_INT_FAST_CLK_HZ / Divider); /* Fast internal reference clock se
 231:../CMSIS/system_MK64F12.c ****     } /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
 232:../CMSIS/system_MK64F12.c ****   } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U) {
 233:../CMSIS/system_MK64F12.c ****     /* External reference clock is selected */
 234:../CMSIS/system_MK64F12.c ****     switch (MCG->C7 & MCG_C7_OSCSEL_MASK) {
 235:../CMSIS/system_MK64F12.c ****     case 0x00U:
 236:../CMSIS/system_MK64F12.c ****       MCGOUTClock = CPU_XTAL_CLK_HZ;   /* System oscillator drives MCG clock */
 237:../CMSIS/system_MK64F12.c ****       break;
 238:../CMSIS/system_MK64F12.c ****     case 0x01U:
 239:../CMSIS/system_MK64F12.c ****       MCGOUTClock = CPU_XTAL32k_CLK_HZ; /* RTC 32 kHz oscillator drives MCG clock */
 240:../CMSIS/system_MK64F12.c ****       break;
 241:../CMSIS/system_MK64F12.c ****     case 0x02U:
 242:../CMSIS/system_MK64F12.c ****     default:
 243:../CMSIS/system_MK64F12.c ****       MCGOUTClock = CPU_INT_IRC_CLK_HZ; /* IRC 48MHz oscillator drives MCG clock */
 244:../CMSIS/system_MK64F12.c ****       break;
 245:../CMSIS/system_MK64F12.c ****     }
 246:../CMSIS/system_MK64F12.c ****   } else { /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
 247:../CMSIS/system_MK64F12.c ****     /* Reserved value */
 248:../CMSIS/system_MK64F12.c ****     return;
 249:../CMSIS/system_MK64F12.c ****   } /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
 250:../CMSIS/system_MK64F12.c ****   SystemCoreClock = (MCGOUTClock / (0x01U + ((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDI
 185              		.loc 1 250 0
 186 00a6 41F24402 		movw	r2, #4164
 187 00aa 2D49     		ldr	r1, .L44+12
 188 00ac 8A58     		ldr	r2, [r1, r2]
 189 00ae 120F     		lsrs	r2, r2, #28
 190 00b0 0132     		adds	r2, r2, #1
 191 00b2 B3FBF2F3 		udiv	r3, r3, r2
 192              	.LVL11:
 193 00b6 2B4A     		ldr	r2, .L44+16
 194 00b8 1360     		str	r3, [r2]
 195              	.L4:
 196 00ba 7047     		bx	lr
 197              	.LVL12:
 198              	.L22:
 189:../CMSIS/system_MK64F12.c ****         case 0x00U:
 199              		.loc 1 189 0
 200 00bc C02A     		cmp	r2, #192
 201 00be 13D0     		beq	.L24
 202 00c0 E02A     		cmp	r2, #224
 203 00c2 F0D1     		bne	.L15
 212:../CMSIS/system_MK64F12.c ****           break;
 204              		.loc 1 212 0
 205 00c4 40F67132 		movw	r2, #2929
 206 00c8 DBE7     		b	.L43
 207              	.L18:
 194:../CMSIS/system_MK64F12.c ****           break;
 208              		.loc 1 194 0
 209 00ca 4FF4A062 		mov	r2, #1280
 210 00ce D8E7     		b	.L43
 211              	.L19:
 197:../CMSIS/system_MK64F12.c ****           break;
 212              		.loc 1 197 0
 213 00d0 4FF4F062 		mov	r2, #1920
 214 00d4 D5E7     		b	.L43
 215              	.L16:
 200:../CMSIS/system_MK64F12.c ****           break;
 216              		.loc 1 200 0
 217 00d6 4FF42062 		mov	r2, #2560
 218 00da D2E7     		b	.L43
 219              	.L23:
 203:../CMSIS/system_MK64F12.c ****           break;
 220              		.loc 1 203 0
 221 00dc 4FF43772 		mov	r2, #732
 222 00e0 CFE7     		b	.L43
 223              	.L21:
 206:../CMSIS/system_MK64F12.c ****           break;
 224              		.loc 1 206 0
 225 00e2 4FF4B762 		mov	r2, #1464
 226 00e6 CCE7     		b	.L43
 227              	.L24:
 209:../CMSIS/system_MK64F12.c ****           break;
 228              		.loc 1 209 0
 229 00e8 40F69502 		movw	r2, #2197
 230 00ec C9E7     		b	.L43
 231              	.LVL13:
 232              	.L6:
 219:../CMSIS/system_MK64F12.c ****       MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider); /* Calculate the PLL reference clock */
 233              		.loc 1 219 0
 234 00ee 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 235              	.LVL14:
 220:../CMSIS/system_MK64F12.c ****       Divider = (((uint16_t)MCG->C6 & MCG_C6_VDIV0_MASK) + 24U);
 236              		.loc 1 220 0
 237 00f0 1A49     		ldr	r1, .L44+8
 219:../CMSIS/system_MK64F12.c ****       MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider); /* Calculate the PLL reference clock */
 238              		.loc 1 219 0
 239 00f2 03F01F03 		and	r3, r3, #31
 240              	.LVL15:
 220:../CMSIS/system_MK64F12.c ****       Divider = (((uint16_t)MCG->C6 & MCG_C6_VDIV0_MASK) + 24U);
 241              		.loc 1 220 0
 242 00f6 0133     		adds	r3, r3, #1
 243 00f8 B1FBF3F1 		udiv	r1, r1, r3
 244              	.LVL16:
 221:../CMSIS/system_MK64F12.c ****       MCGOUTClock *= Divider;          /* Calculate the MCG output clock */
 245              		.loc 1 221 0
 246 00fc 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 247              	.LVL17:
 248 00fe 03F01F03 		and	r3, r3, #31
 249              	.LVL18:
 222:../CMSIS/system_MK64F12.c ****     } /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U)) */
 250              		.loc 1 222 0
 251 0102 1833     		adds	r3, r3, #24
 252 0104 4B43     		muls	r3, r1, r3
 253              	.LVL19:
 254 0106 CEE7     		b	.L15
 255              	.LVL20:
 256              	.L5:
 224:../CMSIS/system_MK64F12.c ****     /* Internal reference clock is selected */
 257              		.loc 1 224 0
 258 0108 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 259 010a 03F0C003 		and	r3, r3, #192
 260 010e 402B     		cmp	r3, #64
 261 0110 0BD1     		bne	.L26
 226:../CMSIS/system_MK64F12.c ****       MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* Slow internal reference clock selected */
 262              		.loc 1 226 0
 263 0112 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 264 0114 DB07     		lsls	r3, r3, #31
 265 0116 17D5     		bpl	.L33
 229:../CMSIS/system_MK64F12.c ****       MCGOUTClock = (uint32_t) (CPU_INT_FAST_CLK_HZ / Divider); /* Fast internal reference clock se
 266              		.loc 1 229 0
 267 0118 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 268              	.LVL21:
 269 011a C3F34202 		ubfx	r2, r3, #1, #3
 270 011e 0123     		movs	r3, #1
 271              	.LVL22:
 272 0120 9340     		lsls	r3, r3, r2
 230:../CMSIS/system_MK64F12.c ****     } /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
 273              		.loc 1 230 0
 274 0122 114A     		ldr	r2, .L44+20
 275 0124 B2FBF3F3 		udiv	r3, r2, r3
 276              	.LVL23:
 277 0128 BDE7     		b	.L15
 278              	.LVL24:
 279              	.L26:
 232:../CMSIS/system_MK64F12.c ****     /* External reference clock is selected */
 280              		.loc 1 232 0
 281 012a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 282 012c 03F0C003 		and	r3, r3, #192
 283 0130 802B     		cmp	r3, #128
 284 0132 C2D1     		bne	.L4
 234:../CMSIS/system_MK64F12.c ****     case 0x00U:
 285              		.loc 1 234 0
 286 0134 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 287 0136 13F00303 		ands	r3, r3, #3
 288 013a 08D0     		beq	.L34
 243:../CMSIS/system_MK64F12.c ****       break;
 289              		.loc 1 243 0
 290 013c 012B     		cmp	r3, #1
 291 013e 064B     		ldr	r3, .L44+4
 292 0140 08BF     		it	eq
 293 0142 4FF40043 		moveq	r3, #32768
 294 0146 AEE7     		b	.L15
 295              	.L33:
 227:../CMSIS/system_MK64F12.c ****     } else { /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
 296              		.loc 1 227 0
 297 0148 4FF40043 		mov	r3, #32768
 298 014c ABE7     		b	.L15
 299              	.L34:
 236:../CMSIS/system_MK64F12.c ****       break;
 300              		.loc 1 236 0
 301 014e 034B     		ldr	r3, .L44+8
 302 0150 A9E7     		b	.L15
 303              	.L45:
 304 0152 00BF     		.align	2
 305              	.L44:
 306 0154 00400640 		.word	1074151424
 307 0158 006CDC02 		.word	48000000
 308 015c 80F0FA02 		.word	50000000
 309 0160 00700440 		.word	1074032640
 310 0164 00000000 		.word	.LANCHOR0
 311 0168 00093D00 		.word	4000000
 312              		.cfi_endproc
 313              	.LFE124:
 315              		.global	SystemCoreClock
 316              		.section	.data.SystemCoreClock,"aw",%progbits
 317              		.align	2
 318              		.set	.LANCHOR0,. + 0
 321              	SystemCoreClock:
 322 0000 00004001 		.word	20971520
 323              		.text
 324              	.Letext0:
 325              		.file 2 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 326              		.file 3 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 327              		.file 4 "../CMSIS/core_cm4.h"
 328              		.file 5 "../CMSIS/system_MK64F12.h"
 329              		.file 6 "../CMSIS/MK64F12.h"
