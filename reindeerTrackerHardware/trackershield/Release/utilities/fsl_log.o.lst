   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_log.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.LOG_Init,"ax",%progbits
  18              		.align	1
  19              		.global	LOG_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	LOG_Init:
  26              	.LFB147:
  27              		.file 1 "../utilities/fsl_log.c"
   1:../utilities/fsl_log.c **** /*
   2:../utilities/fsl_log.c ****  * The Clear BSD License
   3:../utilities/fsl_log.c ****  * Copyright 2017 NXP
   4:../utilities/fsl_log.c ****  * All rights reserved.
   5:../utilities/fsl_log.c ****  *
   6:../utilities/fsl_log.c ****  *
   7:../utilities/fsl_log.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../utilities/fsl_log.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../utilities/fsl_log.c ****  * that the following conditions are met:
  10:../utilities/fsl_log.c ****  *
  11:../utilities/fsl_log.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../utilities/fsl_log.c ****  *   of conditions and the following disclaimer.
  13:../utilities/fsl_log.c ****  *
  14:../utilities/fsl_log.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../utilities/fsl_log.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../utilities/fsl_log.c ****  *   other materials provided with the distribution.
  17:../utilities/fsl_log.c ****  *
  18:../utilities/fsl_log.c ****  * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  19:../utilities/fsl_log.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../utilities/fsl_log.c ****  *   software without specific prior written permission.
  21:../utilities/fsl_log.c ****  *
  22:../utilities/fsl_log.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../utilities/fsl_log.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../utilities/fsl_log.c ****  * ANY EPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../utilities/fsl_log.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../utilities/fsl_log.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../utilities/fsl_log.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../utilities/fsl_log.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../utilities/fsl_log.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../utilities/fsl_log.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../utilities/fsl_log.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../utilities/fsl_log.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../utilities/fsl_log.c ****  *
  34:../utilities/fsl_log.c ****  */
  35:../utilities/fsl_log.c **** #include "fsl_log.h"
  36:../utilities/fsl_log.c **** #include "fsl_debug_console_conf.h"
  37:../utilities/fsl_log.c **** #include "fsl_io.h"
  38:../utilities/fsl_log.c **** #ifdef FSL_RTOS_FREE_RTOS
  39:../utilities/fsl_log.c **** #include "FreeRTOS.h"
  40:../utilities/fsl_log.c **** #include "task.h"
  41:../utilities/fsl_log.c **** #include "semphr.h"
  42:../utilities/fsl_log.c **** #endif
  43:../utilities/fsl_log.c **** /*******************************************************************************
  44:../utilities/fsl_log.c ****  * Definitions
  45:../utilities/fsl_log.c ****  ******************************************************************************/
  46:../utilities/fsl_log.c **** #ifndef BACKSPACE
  47:../utilities/fsl_log.c **** /*! @brief character backspace ASCII value */
  48:../utilities/fsl_log.c **** #define BACKSPACE 127
  49:../utilities/fsl_log.c **** #endif
  50:../utilities/fsl_log.c **** 
  51:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
  52:../utilities/fsl_log.c **** /*! @brief increase pop member */
  53:../utilities/fsl_log.c **** #define LOG_CHECK_BUFFER_INDEX_OVERFLOW(index)          \
  54:../utilities/fsl_log.c ****     {                                                   \
  55:../utilities/fsl_log.c ****         if (index >= DEBUG_CONSOLE_TRANSMIT_BUFFER_LEN) \
  56:../utilities/fsl_log.c ****         {                                               \
  57:../utilities/fsl_log.c ****             index -= DEBUG_CONSOLE_TRANSMIT_BUFFER_LEN; \
  58:../utilities/fsl_log.c ****         }                                               \
  59:../utilities/fsl_log.c ****     \
  60:../utilities/fsl_log.c **** \
  61:../utilities/fsl_log.c **** }
  62:../utilities/fsl_log.c **** 
  63:../utilities/fsl_log.c **** /*! @brief get current runing environment is ISR or not */
  64:../utilities/fsl_log.c **** #ifdef __CA7_REV
  65:../utilities/fsl_log.c **** #define IS_RUNNING_IN_ISR() SystemGetIRQNestingLevel()
  66:../utilities/fsl_log.c **** #else
  67:../utilities/fsl_log.c **** #define IS_RUNNING_IN_ISR() __get_IPSR()
  68:../utilities/fsl_log.c **** #endif /* __CA7_REV */
  69:../utilities/fsl_log.c **** 
  70:../utilities/fsl_log.c **** #else
  71:../utilities/fsl_log.c **** #define IS_RUNNING_IN_ISR() (0U)
  72:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
  73:../utilities/fsl_log.c **** 
  74:../utilities/fsl_log.c **** /* define for rtos */
  75:../utilities/fsl_log.c **** #if (DEBUG_CONSOLE_SYNCHRONIZATION_MODE == DEBUG_CONSOLE_SYNCHRONIZATION_FREERTOS)
  76:../utilities/fsl_log.c **** /* metex semaphore */
  77:../utilities/fsl_log.c **** #define LOG_CREATE_MUTEX_SEMAPHORE(mutex) (mutex = xSemaphoreCreateMutex())
  78:../utilities/fsl_log.c **** 
  79:../utilities/fsl_log.c **** #define LOG_GIVE_MUTEX_SEMAPHORE(mutex) \
  80:../utilities/fsl_log.c ****     \
  81:../utilities/fsl_log.c **** {                                \
  82:../utilities/fsl_log.c ****         if (IS_RUNNING_IN_ISR() == 0U)  \
  83:../utilities/fsl_log.c ****         {                               \
  84:../utilities/fsl_log.c ****             xSemaphoreGive(mutex);      \
  85:../utilities/fsl_log.c ****         }                               \
  86:../utilities/fsl_log.c ****     \
  87:../utilities/fsl_log.c **** }
  88:../utilities/fsl_log.c **** 
  89:../utilities/fsl_log.c **** #define LOG_TAKE_MUTEX_SEMAPHORE_BLOCKING(mutex)  \
  90:../utilities/fsl_log.c ****     \
  91:../utilities/fsl_log.c **** {                                          \
  92:../utilities/fsl_log.c ****         if (IS_RUNNING_IN_ISR() == 0U)            \
  93:../utilities/fsl_log.c ****         {                                         \
  94:../utilities/fsl_log.c ****             xSemaphoreTake(mutex, portMAX_DELAY); \
  95:../utilities/fsl_log.c ****         }                                         \
  96:../utilities/fsl_log.c ****     \
  97:../utilities/fsl_log.c **** }
  98:../utilities/fsl_log.c **** 
  99:../utilities/fsl_log.c **** #define LOG_TAKE_MUTEX_SEMAPHORE_NONBLOCKING(mutex, result) \
 100:../utilities/fsl_log.c ****     \
 101:../utilities/fsl_log.c **** {                                                    \
 102:../utilities/fsl_log.c ****         if (IS_RUNNING_IN_ISR() == 0U)                      \
 103:../utilities/fsl_log.c ****         {                                                   \
 104:../utilities/fsl_log.c ****             result = xSemaphoreTake(mutex, 0U);             \
 105:../utilities/fsl_log.c ****         }                                                   \
 106:../utilities/fsl_log.c ****         else                                                \
 107:../utilities/fsl_log.c ****         {                                                   \
 108:../utilities/fsl_log.c ****             result = 1U;                                    \
 109:../utilities/fsl_log.c ****         }                                                   \
 110:../utilities/fsl_log.c ****     \
 111:../utilities/fsl_log.c **** }
 112:../utilities/fsl_log.c **** 
 113:../utilities/fsl_log.c **** /* Binary semaphore */
 114:../utilities/fsl_log.c **** #define LOG_CREATE_BINARY_SEMAPHORE(binary) (binary = xSemaphoreCreateBinary())
 115:../utilities/fsl_log.c **** #define LOG_TAKE_BINARY_SEMAPHORE_BLOCKING(binary) (xSemaphoreTake(binary, portMAX_DELAY))
 116:../utilities/fsl_log.c **** #define LOG_GIVE_BINARY_SEMAPHORE_FROM_ISR(binary) (xSemaphoreGiveFromISR(binary, NULL))
 117:../utilities/fsl_log.c **** 
 118:../utilities/fsl_log.c **** #elif(DEBUG_CONSOLE_SYNCHRONIZATION_MODE == DEBUG_CONSOLE_SYNCHRONIZATION_BM)
 119:../utilities/fsl_log.c **** 
 120:../utilities/fsl_log.c **** #define LOG_CREATE_MUTEX_SEMAPHORE(mutex)
 121:../utilities/fsl_log.c **** #define LOG_TAKE_MUTEX_SEMAPHORE_BLOCKING(mutex)
 122:../utilities/fsl_log.c **** #define LOG_GIVE_MUTEX_SEMAPHORE(mutex)
 123:../utilities/fsl_log.c **** #define LOG_CREATE_BINARY_SEMAPHORE(binary)
 124:../utilities/fsl_log.c **** #define LOG_TAKE_MUTEX_SEMAPHORE_NONBLOCKING(mutex, result) (result = 1U)
 125:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 126:../utilities/fsl_log.c **** #define LOG_TAKE_BINARY_SEMAPHORE_BLOCKING(binary) \
 127:../utilities/fsl_log.c ****     \
 128:../utilities/fsl_log.c **** {                                           \
 129:../utilities/fsl_log.c ****         while (!binary)                            \
 130:../utilities/fsl_log.c ****             ;                                      \
 131:../utilities/fsl_log.c ****         binary = false;                            \
 132:../utilities/fsl_log.c ****     \
 133:../utilities/fsl_log.c **** \
 134:../utilities/fsl_log.c **** }
 135:../utilities/fsl_log.c **** #define LOG_GIVE_BINARY_SEMAPHORE_FROM_ISR(binary) (binary = true)
 136:../utilities/fsl_log.c **** #else
 137:../utilities/fsl_log.c **** #define LOG_TAKE_BINARY_SEMAPHORE_BLOCKING(binary)
 138:../utilities/fsl_log.c **** #define LOG_GIVE_BINARY_SEMAPHORE_FROM_ISR(binary)
 139:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 140:../utilities/fsl_log.c **** 
 141:../utilities/fsl_log.c **** /* add other implementation here
 142:../utilities/fsl_log.c **** *such as :
 143:../utilities/fsl_log.c **** * #elif(DEBUG_CONSOLE_SYNCHRONIZATION_MODE == DEBUG_CONSOLE_SYNCHRONIZATION_xxx)
 144:../utilities/fsl_log.c **** */
 145:../utilities/fsl_log.c **** 
 146:../utilities/fsl_log.c **** #else
 147:../utilities/fsl_log.c **** 
 148:../utilities/fsl_log.c **** #define LOG_CREATE_MUTEX_SEMAPHORE(mutex)
 149:../utilities/fsl_log.c **** #define LOG_TAKE_MUTEX_SEMAPHORE_BLOCKING(mutex)
 150:../utilities/fsl_log.c **** #define LOG_TAKE_MUTEX_SEMAPHORE_NONBLOCKING(mutex, result) (result = 1U)
 151:../utilities/fsl_log.c **** #define LOG_GIVE_MUTEX_SEMAPHORE(mutex)
 152:../utilities/fsl_log.c **** #define LOG_CREATE_BINARY_SEMAPHORE(binary)
 153:../utilities/fsl_log.c **** #define LOG_TAKE_BINARY_SEMAPHORE_BLOCKING(binary)
 154:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_SYNCHRONIZATION_MODE == DEBUG_CONSOLE_SYNCHRONIZATION_FREERTOS */
 155:../utilities/fsl_log.c **** 
 156:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 157:../utilities/fsl_log.c **** /*! @brief Define the buffer
 158:../utilities/fsl_log.c **** * The total buffer size should be calucate as (BUFFER_SUPPORT_LOG_LENGTH + 1) * BUFFER_SUPPORT_LOG_
 159:../utilities/fsl_log.c **** */
 160:../utilities/fsl_log.c **** typedef struct _log_buffer
 161:../utilities/fsl_log.c **** {
 162:../utilities/fsl_log.c ****     volatile uint16_t totalIndex;                     /*!< indicate the total usage of the buffer *
 163:../utilities/fsl_log.c ****     volatile uint16_t pushIndex;                      /*!< indicate the next push index */
 164:../utilities/fsl_log.c ****     volatile uint16_t popIndex;                       /*!< indicate the pop index */
 165:../utilities/fsl_log.c ****     uint8_t txBuf[DEBUG_CONSOLE_TRANSMIT_BUFFER_LEN]; /*!< buffer to store printf log */
 166:../utilities/fsl_log.c **** 
 167:../utilities/fsl_log.c ****     uint8_t rxBuf[DEBUG_CONSOLE_RECEIVE_BUFFER_LEN]; /*!< buffer to store scanf log */
 168:../utilities/fsl_log.c **** } log_buffer_t;
 169:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 170:../utilities/fsl_log.c **** 
 171:../utilities/fsl_log.c **** /*******************************************************************************
 172:../utilities/fsl_log.c ****  * Variables
 173:../utilities/fsl_log.c ****  ******************************************************************************/
 174:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 175:../utilities/fsl_log.c **** /* A global log buffer */
 176:../utilities/fsl_log.c **** static log_buffer_t s_log_buffer;
 177:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 178:../utilities/fsl_log.c **** 
 179:../utilities/fsl_log.c **** /* lock definition */
 180:../utilities/fsl_log.c **** #if (DEBUG_CONSOLE_SYNCHRONIZATION_MODE == DEBUG_CONSOLE_SYNCHRONIZATION_FREERTOS)
 181:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 182:../utilities/fsl_log.c **** static SemaphoreHandle_t s_logPushSemaphore = NULL;
 183:../utilities/fsl_log.c **** static SemaphoreHandle_t s_logReadSemaphore = NULL;
 184:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 185:../utilities/fsl_log.c **** static SemaphoreHandle_t s_logPopSemaphore = NULL;
 186:../utilities/fsl_log.c **** static SemaphoreHandle_t s_logReadWaitSemaphore = NULL;
 187:../utilities/fsl_log.c **** 
 188:../utilities/fsl_log.c **** #elif(DEBUG_CONSOLE_SYNCHRONIZATION_MODE == DEBUG_CONSOLE_SYNCHRONIZATION_BM)
 189:../utilities/fsl_log.c **** 
 190:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 191:../utilities/fsl_log.c **** 
 192:../utilities/fsl_log.c **** static volatile bool s_logReadWaitSemaphore = false; /* transferred event from ISR for bare-metal +
 193:../utilities/fsl_log.c **** 
 194:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 195:../utilities/fsl_log.c **** 
 196:../utilities/fsl_log.c **** #else
 197:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 198:../utilities/fsl_log.c **** 
 199:../utilities/fsl_log.c **** /*******************************************************************************
 200:../utilities/fsl_log.c **** * Prototypes
 201:../utilities/fsl_log.c **** ******************************************************************************/
 202:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 203:../utilities/fsl_log.c **** /*!
 204:../utilities/fsl_log.c ****  * @brief callback function for IO layer to notify LOG
 205:../utilities/fsl_log.c ****  *
 206:../utilities/fsl_log.c ****  * @param size last transfer data size
 207:../utilities/fsl_log.c ****  * @param receive indicate a RX transfer
 208:../utilities/fsl_log.c ****  * @param transmit indicate a TX transfer
 209:../utilities/fsl_log.c ****  *
 210:../utilities/fsl_log.c ****  */
 211:../utilities/fsl_log.c **** static void LOG_Transferred(size_t *size, bool receive, bool transmit);
 212:../utilities/fsl_log.c **** 
 213:../utilities/fsl_log.c **** /*!
 214:../utilities/fsl_log.c ****  * @brief log push function
 215:../utilities/fsl_log.c ****  *
 216:../utilities/fsl_log.c ****  * @param buf target buffer
 217:../utilities/fsl_log.c ****  * @param size log size
 218:../utilities/fsl_log.c ****  *
 219:../utilities/fsl_log.c ****  */
 220:../utilities/fsl_log.c **** static int LOG_BufPush(uint8_t *buf, size_t size);
 221:../utilities/fsl_log.c **** 
 222:../utilities/fsl_log.c **** /*!
 223:../utilities/fsl_log.c ****  * @brief Get next avaliable log
 224:../utilities/fsl_log.c ****  *
 225:../utilities/fsl_log.c ****  * @param next avaliable size
 226:../utilities/fsl_log.c ****  * @return next avaliable address
 227:../utilities/fsl_log.c ****  */
 228:../utilities/fsl_log.c **** static uint8_t *LOG_BufGetNextAvaliableLog(size_t *size);
 229:../utilities/fsl_log.c **** 
 230:../utilities/fsl_log.c **** /*!
 231:../utilities/fsl_log.c ****  * @brief buf pop
 232:../utilities/fsl_log.c ****  *
 233:../utilities/fsl_log.c ****  * @param size log size popped and next available log size
 234:../utilities/fsl_log.c ****  * @return next avaliable address
 235:../utilities/fsl_log.c ****  */
 236:../utilities/fsl_log.c **** static uint8_t *LOG_BufPop(size_t *size);
 237:../utilities/fsl_log.c **** 
 238:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 239:../utilities/fsl_log.c **** 
 240:../utilities/fsl_log.c **** /*!
 241:../utilities/fsl_log.c ****  * @brief read one character
 242:../utilities/fsl_log.c ****  *
 243:../utilities/fsl_log.c ****  * @param ch character address
 244:../utilities/fsl_log.c ****  * @return indicate the read status
 245:../utilities/fsl_log.c ****  *
 246:../utilities/fsl_log.c ****  */
 247:../utilities/fsl_log.c **** static status_t LOG_ReadOneCharacter(uint8_t *ch);
 248:../utilities/fsl_log.c **** 
 249:../utilities/fsl_log.c **** #if DEBUG_CONSOLE_ENABLE_ECHO_FUNCTION
 250:../utilities/fsl_log.c **** /*!
 251:../utilities/fsl_log.c ****  * @brief echo one character
 252:../utilities/fsl_log.c ****  *
 253:../utilities/fsl_log.c ****  * @param ch character address
 254:../utilities/fsl_log.c ****  * @param isGetchar flag to distinguish getchar from scanf
 255:../utilities/fsl_log.c ****  * @param index special for scanf to support backspace
 256:../utilities/fsl_log.c ****  * @return indicate the read status
 257:../utilities/fsl_log.c ****  *
 258:../utilities/fsl_log.c ****  */
 259:../utilities/fsl_log.c **** static status_t LOG_EchoCharacter(uint8_t *ch, bool isGetChar, int *index);
 260:../utilities/fsl_log.c **** #endif
 261:../utilities/fsl_log.c **** 
 262:../utilities/fsl_log.c **** /*******************************************************************************
 263:../utilities/fsl_log.c ****  * Code
 264:../utilities/fsl_log.c ****  ******************************************************************************/
 265:../utilities/fsl_log.c **** status_t LOG_Init(uint32_t baseAddr, uint8_t device, uint32_t baudRate, uint32_t clkSrcFreq)
 266:../utilities/fsl_log.c **** {
  28              		.loc 1 266 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 13B5     		push	{r0, r1, r4, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37              		.loc 1 266 0
  38 0002 1446     		mov	r4, r2
 267:../utilities/fsl_log.c ****     io_state_t io;
 268:../utilities/fsl_log.c ****     /* init io */
 269:../utilities/fsl_log.c ****     io.ioBase = (void *)baseAddr;
  39              		.loc 1 269 0
  40 0004 0090     		str	r0, [sp]
 266:../utilities/fsl_log.c ****     io_state_t io;
  41              		.loc 1 266 0
  42 0006 1A46     		mov	r2, r3
  43              	.LVL1:
 270:../utilities/fsl_log.c ****     io.ioType = device;
  44              		.loc 1 270 0
  45 0008 8DF80410 		strb	r1, [sp, #4]
 271:../utilities/fsl_log.c **** 
 272:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 273:../utilities/fsl_log.c ****     /* memset the global queue */
 274:../utilities/fsl_log.c ****     memset(&s_log_buffer, 0U, sizeof(s_log_buffer));
 275:../utilities/fsl_log.c ****     /* init callback for NON-BLOCKING */
 276:../utilities/fsl_log.c ****     io.callBack = LOG_Transferred;
 277:../utilities/fsl_log.c ****     /* io init function */
 278:../utilities/fsl_log.c ****     IO_Init(&io, baudRate, clkSrcFreq, s_log_buffer.rxBuf);
 279:../utilities/fsl_log.c ****     /* Debug console buffer push lock create */
 280:../utilities/fsl_log.c ****     LOG_CREATE_MUTEX_SEMAPHORE(s_logPushSemaphore);
 281:../utilities/fsl_log.c ****     /* Debug console get/scanf mutex lock create */
 282:../utilities/fsl_log.c ****     LOG_CREATE_MUTEX_SEMAPHORE(s_logReadSemaphore);
 283:../utilities/fsl_log.c **** #else
 284:../utilities/fsl_log.c ****     IO_Init(&io, baudRate, clkSrcFreq, NULL);
  46              		.loc 1 284 0
  47 000c 6846     		mov	r0, sp
  48              	.LVL2:
  49 000e 0023     		movs	r3, #0
  50              	.LVL3:
  51 0010 2146     		mov	r1, r4
  52              	.LVL4:
  53 0012 FFF7FEFF 		bl	IO_Init
  54              	.LVL5:
 285:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 286:../utilities/fsl_log.c **** 
 287:../utilities/fsl_log.c ****     /* Debug console lock create */
 288:../utilities/fsl_log.c ****     LOG_CREATE_MUTEX_SEMAPHORE(s_logPopSemaphore);
 289:../utilities/fsl_log.c ****     LOG_CREATE_BINARY_SEMAPHORE(s_logReadWaitSemaphore);
 290:../utilities/fsl_log.c **** 
 291:../utilities/fsl_log.c ****     return kStatus_Success;
 292:../utilities/fsl_log.c **** }
  55              		.loc 1 292 0
  56 0016 0020     		movs	r0, #0
  57 0018 02B0     		add	sp, sp, #8
  58              		.cfi_def_cfa_offset 8
  59              		@ sp needed
  60 001a 10BD     		pop	{r4, pc}
  61              		.cfi_endproc
  62              	.LFE147:
  64              		.section	.text.LOG_Deinit,"ax",%progbits
  65              		.align	1
  66              		.global	LOG_Deinit
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu fpv4-sp-d16
  72              	LOG_Deinit:
  73              	.LFB148:
 293:../utilities/fsl_log.c **** 
 294:../utilities/fsl_log.c **** void LOG_Deinit(void)
 295:../utilities/fsl_log.c **** {
  74              		.loc 1 295 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
 296:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 297:../utilities/fsl_log.c ****     /* memset the global queue */
 298:../utilities/fsl_log.c ****     memset(&s_log_buffer, 0U, sizeof(s_log_buffer));
 299:../utilities/fsl_log.c **** #endif /*DEBUG_CONSOLE_TRANSFER_NON_BLOCKING*/
 300:../utilities/fsl_log.c ****     /* Deinit IO */
 301:../utilities/fsl_log.c ****     IO_Deinit();
  79              		.loc 1 301 0
  80 0000 FFF7FEBF 		b	IO_Deinit
  81              	.LVL6:
  82              		.cfi_endproc
  83              	.LFE148:
  85              		.section	.text.LOG_WaitIdle,"ax",%progbits
  86              		.align	1
  87              		.global	LOG_WaitIdle
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu fpv4-sp-d16
  93              	LOG_WaitIdle:
  94              	.LFB149:
 302:../utilities/fsl_log.c **** }
 303:../utilities/fsl_log.c **** 
 304:../utilities/fsl_log.c **** status_t LOG_WaitIdle(void)
 305:../utilities/fsl_log.c **** {
  95              		.loc 1 305 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99 0000 08B5     		push	{r3, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
 306:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 307:../utilities/fsl_log.c ****     /* wait buffer empty */
 308:../utilities/fsl_log.c ****     while (!(s_log_buffer.totalIndex == 0U))
 309:../utilities/fsl_log.c ****         ;
 310:../utilities/fsl_log.c **** #endif /*DEBUG_CONSOLE_TRANSFER_NON_BLOCKING*/
 311:../utilities/fsl_log.c ****     /* wait IO idle */
 312:../utilities/fsl_log.c ****     IO_WaitIdle();
 103              		.loc 1 312 0
 104 0002 FFF7FEFF 		bl	IO_WaitIdle
 105              	.LVL7:
 313:../utilities/fsl_log.c **** 
 314:../utilities/fsl_log.c ****     return kStatus_Success;
 315:../utilities/fsl_log.c **** }
 106              		.loc 1 315 0
 107 0006 0020     		movs	r0, #0
 108 0008 08BD     		pop	{r3, pc}
 109              		.cfi_endproc
 110              	.LFE149:
 112              		.section	.text.LOG_Pop,"ax",%progbits
 113              		.align	1
 114              		.global	LOG_Pop
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu fpv4-sp-d16
 120              	LOG_Pop:
 121              	.LFB151:
 316:../utilities/fsl_log.c **** 
 317:../utilities/fsl_log.c **** int LOG_Push(uint8_t *buf, size_t size)
 318:../utilities/fsl_log.c **** {
 319:../utilities/fsl_log.c ****     assert(buf != NULL);
 320:../utilities/fsl_log.c **** 
 321:../utilities/fsl_log.c **** #ifdef DEBUG_CONSOLE_TRANSFER_NON_BLOCKING
 322:../utilities/fsl_log.c ****     /* push to buffer */
 323:../utilities/fsl_log.c ****     LOG_BufPush(buf, size);
 324:../utilities/fsl_log.c ****     buf = LOG_BufGetNextAvaliableLog(&size);
 325:../utilities/fsl_log.c **** #endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */
 326:../utilities/fsl_log.c ****     /* pop log */
 327:../utilities/fsl_log.c ****     return LOG_Pop(buf, size);
 328:../utilities/fsl_log.c **** }
 329:../utilities/fsl_log.c **** 
 330:../utilities/fsl_log.c **** int LOG_Pop(uint8_t *buf, size_t size)
 331:../utilities/fsl_log.c **** {
 122              		.loc 1 331 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL8:
 127 0000 10B5     		push	{r4, lr}
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 4, -8
 130              		.cfi_offset 14, -4
 332:../utilities/fsl_log.c ****     uint8_t getLock = 0U;
 333:../utilities/fsl_log.c **** 
 334:../utilities/fsl_log.c ****     if ((0 != size) && (NULL != buf))
 131              		.loc 1 334 0
 132 0002 0C46     		mov	r4, r1
 133 0004 21B1     		cbz	r1, .L5
 134              		.loc 1 334 0 is_stmt 0 discriminator 1
 135 0006 20B1     		cbz	r0, .L7
 136              	.LVL9:
 335:../utilities/fsl_log.c ****     {
 336:../utilities/fsl_log.c ****         /* take POP lock, should be non-blocking */
 337:../utilities/fsl_log.c ****         LOG_TAKE_MUTEX_SEMAPHORE_NONBLOCKING(s_logPopSemaphore, getLock);
 338:../utilities/fsl_log.c **** 
 339:../utilities/fsl_log.c ****         if (getLock)
 340:../utilities/fsl_log.c ****         {
 341:../utilities/fsl_log.c ****             /* call IO transfer function */
 342:../utilities/fsl_log.c ****             if (IO_Transfer(buf, size, true) != kStatus_Success)
 137              		.loc 1 342 0 is_stmt 1
 138 0008 0122     		movs	r2, #1
 139 000a FFF7FEFF 		bl	IO_Transfer
 140              	.LVL10:
 141 000e 00B1     		cbz	r0, .L7
 142              	.LVL11:
 143              	.L5:
 343:../utilities/fsl_log.c ****             {
 344:../utilities/fsl_log.c ****                 size = 0U;
 144              		.loc 1 344 0
 145 0010 0024     		movs	r4, #0
 146              	.LVL12:
 147              	.L7:
 345:../utilities/fsl_log.c ****             }
 346:../utilities/fsl_log.c ****             /* release POP lock */
 347:../utilities/fsl_log.c ****             LOG_GIVE_MUTEX_SEMAPHORE(s_logPopSemaphore);
 348:../utilities/fsl_log.c ****         }
 349:../utilities/fsl_log.c ****     }
 350:../utilities/fsl_log.c **** 
 351:../utilities/fsl_log.c ****     return size;
 352:../utilities/fsl_log.c **** }
 148              		.loc 1 352 0
 149 0012 2046     		mov	r0, r4
 150 0014 10BD     		pop	{r4, pc}
 151              		.cfi_endproc
 152              	.LFE151:
 154              		.section	.text.LOG_Push,"ax",%progbits
 155              		.align	1
 156              		.global	LOG_Push
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 160              		.fpu fpv4-sp-d16
 162              	LOG_Push:
 163              	.LFB150:
 318:../utilities/fsl_log.c ****     assert(buf != NULL);
 164              		.loc 1 318 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169              	.LVL13:
 327:../utilities/fsl_log.c **** }
 170              		.loc 1 327 0
 171 0000 FFF7FEBF 		b	LOG_Pop
 172              	.LVL14:
 173              		.cfi_endproc
 174              	.LFE150:
 176              		.section	.text.LOG_ReadLine,"ax",%progbits
 177              		.align	1
 178              		.global	LOG_ReadLine
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv4-sp-d16
 184              	LOG_ReadLine:
 185              	.LFB152:
 353:../utilities/fsl_log.c **** 
 354:../utilities/fsl_log.c **** int LOG_ReadLine(uint8_t *buf, size_t size)
 355:../utilities/fsl_log.c **** {
 186              		.loc 1 355 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL15:
 191 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 192              		.cfi_def_cfa_offset 24
 193              		.cfi_offset 3, -24
 194              		.cfi_offset 4, -20
 195              		.cfi_offset 5, -16
 196              		.cfi_offset 6, -12
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199              		.loc 1 355 0
 200 0002 0546     		mov	r5, r0
 201 0004 0F46     		mov	r7, r1
 356:../utilities/fsl_log.c ****     assert(buf != NULL);
 357:../utilities/fsl_log.c **** 
 358:../utilities/fsl_log.c ****     int i = 0;
 359:../utilities/fsl_log.c **** 
 360:../utilities/fsl_log.c ****     /* take mutex lock function */
 361:../utilities/fsl_log.c ****     LOG_TAKE_MUTEX_SEMAPHORE_BLOCKING(s_logReadSemaphore);
 362:../utilities/fsl_log.c **** 
 363:../utilities/fsl_log.c ****     for (i = 0; i < size; i++)
 202              		.loc 1 363 0
 203 0006 0024     		movs	r4, #0
 204              	.LVL16:
 205              	.L17:
 206              		.loc 1 363 0 is_stmt 0 discriminator 1
 207 0008 BC42     		cmp	r4, r7
 208 000a 04D3     		bcc	.L22
 364:../utilities/fsl_log.c ****     {
 365:../utilities/fsl_log.c ****         /* recieve one char every time */
 366:../utilities/fsl_log.c ****         if (LOG_ReadOneCharacter(&buf[i]) != kStatus_Success)
 367:../utilities/fsl_log.c ****         {
 368:../utilities/fsl_log.c ****             return -1;
 369:../utilities/fsl_log.c ****         }
 370:../utilities/fsl_log.c **** #if DEBUG_CONSOLE_ENABLE_ECHO_FUNCTION
 371:../utilities/fsl_log.c ****         LOG_EchoCharacter(&buf[i], false, &i);
 372:../utilities/fsl_log.c **** #endif
 373:../utilities/fsl_log.c ****         /* analysis data */
 374:../utilities/fsl_log.c ****         if ((buf[i] == '\r') || (buf[i] == '\n'))
 375:../utilities/fsl_log.c ****         {
 376:../utilities/fsl_log.c ****             /* End of Line. */
 377:../utilities/fsl_log.c ****             if (i == 0)
 378:../utilities/fsl_log.c ****             {
 379:../utilities/fsl_log.c ****                 buf[i] = '\0';
 380:../utilities/fsl_log.c ****                 i = -1;
 381:../utilities/fsl_log.c ****             }
 382:../utilities/fsl_log.c ****             else
 383:../utilities/fsl_log.c ****             {
 384:../utilities/fsl_log.c ****                 break;
 385:../utilities/fsl_log.c ****             }
 386:../utilities/fsl_log.c ****         }
 387:../utilities/fsl_log.c ****     }
 388:../utilities/fsl_log.c ****     /* get char should not add '\0'*/
 389:../utilities/fsl_log.c ****     if (i == size)
 209              		.loc 1 389 0 is_stmt 1
 210 000c 0DD1     		bne	.L21
 390:../utilities/fsl_log.c ****     {
 391:../utilities/fsl_log.c ****         buf[i] = '\0';
 211              		.loc 1 391 0
 212 000e 0023     		movs	r3, #0
 213 0010 2B55     		strb	r3, [r5, r4]
 214              	.LVL17:
 215              	.L16:
 392:../utilities/fsl_log.c ****     }
 393:../utilities/fsl_log.c ****     else
 394:../utilities/fsl_log.c ****     {
 395:../utilities/fsl_log.c ****         buf[i + 1] = '\0';
 396:../utilities/fsl_log.c ****     }
 397:../utilities/fsl_log.c **** 
 398:../utilities/fsl_log.c ****     /* release mutex lock function */
 399:../utilities/fsl_log.c ****     LOG_GIVE_MUTEX_SEMAPHORE(s_logReadSemaphore);
 400:../utilities/fsl_log.c **** 
 401:../utilities/fsl_log.c ****     return i;
 402:../utilities/fsl_log.c **** }
 216              		.loc 1 402 0
 217 0012 2046     		mov	r0, r4
 218 0014 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 219              	.LVL18:
 220              	.L22:
 366:../utilities/fsl_log.c ****         {
 221              		.loc 1 366 0
 222 0016 2E19     		adds	r6, r5, r4
 223              	.LVL19:
 224              	.LBB4:
 225              	.LBB5:
 403:../utilities/fsl_log.c **** 
 404:../utilities/fsl_log.c **** int LOG_ReadCharacter(uint8_t *ch)
 405:../utilities/fsl_log.c **** {
 406:../utilities/fsl_log.c ****     assert(ch != NULL);
 407:../utilities/fsl_log.c ****     int ret = 0;
 408:../utilities/fsl_log.c **** 
 409:../utilities/fsl_log.c ****     /* take mutex lock function */
 410:../utilities/fsl_log.c ****     LOG_TAKE_MUTEX_SEMAPHORE_BLOCKING(s_logReadSemaphore);
 411:../utilities/fsl_log.c ****     /* read one character */
 412:../utilities/fsl_log.c ****     if (LOG_ReadOneCharacter(ch) == kStatus_Success)
 413:../utilities/fsl_log.c ****     {
 414:../utilities/fsl_log.c ****         ret = 1;
 415:../utilities/fsl_log.c **** #if DEBUG_CONSOLE_ENABLE_ECHO_FUNCTION
 416:../utilities/fsl_log.c ****         LOG_EchoCharacter(ch, true, NULL);
 417:../utilities/fsl_log.c **** #endif
 418:../utilities/fsl_log.c ****     }
 419:../utilities/fsl_log.c ****     else
 420:../utilities/fsl_log.c ****     {
 421:../utilities/fsl_log.c ****         ret = -1;
 422:../utilities/fsl_log.c ****     }
 423:../utilities/fsl_log.c **** 
 424:../utilities/fsl_log.c ****     /* release mutex lock function */
 425:../utilities/fsl_log.c ****     LOG_GIVE_MUTEX_SEMAPHORE(s_logReadSemaphore);
 426:../utilities/fsl_log.c **** 
 427:../utilities/fsl_log.c ****     return ret;
 428:../utilities/fsl_log.c **** }
 429:../utilities/fsl_log.c **** 
 430:../utilities/fsl_log.c **** static status_t LOG_ReadOneCharacter(uint8_t *ch)
 431:../utilities/fsl_log.c **** {
 432:../utilities/fsl_log.c ****     /* recieve one char every time */
 433:../utilities/fsl_log.c ****     if (IO_Transfer(ch, 1U, false) != kStatus_Success)
 226              		.loc 1 433 0
 227 0018 0022     		movs	r2, #0
 228 001a 0121     		movs	r1, #1
 229 001c 3046     		mov	r0, r6
 230 001e FFF7FEFF 		bl	IO_Transfer
 231              	.LVL20:
 232 0022 30B1     		cbz	r0, .L29
 233              	.LBE5:
 234              	.LBE4:
 368:../utilities/fsl_log.c ****         }
 235              		.loc 1 368 0
 236 0024 4FF0FF34 		mov	r4, #-1
 237              	.LVL21:
 238 0028 F3E7     		b	.L16
 239              	.LVL22:
 240              	.L21:
 395:../utilities/fsl_log.c ****     }
 241              		.loc 1 395 0
 242 002a 2544     		add	r5, r5, r4
 243              	.LVL23:
 244 002c 0023     		movs	r3, #0
 245 002e 6B70     		strb	r3, [r5, #1]
 246 0030 EFE7     		b	.L16
 247              	.LVL24:
 248              	.L29:
 374:../utilities/fsl_log.c ****         {
 249              		.loc 1 374 0
 250 0032 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
 251 0034 0D2B     		cmp	r3, #13
 252 0036 01D0     		beq	.L23
 374:../utilities/fsl_log.c ****         {
 253              		.loc 1 374 0 is_stmt 0 discriminator 1
 254 0038 0A2B     		cmp	r3, #10
 255 003a 04D1     		bne	.L20
 256              	.L23:
 377:../utilities/fsl_log.c ****             {
 257              		.loc 1 377 0 is_stmt 1
 258 003c 002C     		cmp	r4, #0
 259 003e F4D1     		bne	.L21
 379:../utilities/fsl_log.c ****                 i = -1;
 260              		.loc 1 379 0
 261 0040 3470     		strb	r4, [r6]
 262              	.LVL25:
 380:../utilities/fsl_log.c ****             }
 263              		.loc 1 380 0
 264 0042 4FF0FF34 		mov	r4, #-1
 265              	.LVL26:
 266              	.L20:
 363:../utilities/fsl_log.c ****     {
 267              		.loc 1 363 0 discriminator 2
 268 0046 0134     		adds	r4, r4, #1
 269              	.LVL27:
 270 0048 DEE7     		b	.L17
 271              		.cfi_endproc
 272              	.LFE152:
 274              		.section	.text.LOG_ReadCharacter,"ax",%progbits
 275              		.align	1
 276              		.global	LOG_ReadCharacter
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	LOG_ReadCharacter:
 283              	.LFB153:
 405:../utilities/fsl_log.c ****     assert(ch != NULL);
 284              		.loc 1 405 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              	.LVL28:
 289 0000 08B5     		push	{r3, lr}
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 3, -8
 292              		.cfi_offset 14, -4
 293              	.LBB8:
 294              	.LBB9:
 295              		.loc 1 433 0
 296 0002 0022     		movs	r2, #0
 297 0004 0121     		movs	r1, #1
 298 0006 FFF7FEFF 		bl	IO_Transfer
 299              	.LVL29:
 300 000a 0028     		cmp	r0, #0
 301              	.LBE9:
 302              	.LBE8:
 428:../utilities/fsl_log.c **** 
 303              		.loc 1 428 0
 304 000c 0CBF     		ite	eq
 305 000e 0120     		moveq	r0, #1
 306 0010 4FF0FF30 		movne	r0, #-1
 307 0014 08BD     		pop	{r3, pc}
 308              		.cfi_endproc
 309              	.LFE153:
 311              		.text
 312              	.Letext0:
 313              		.file 2 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 314              		.file 3 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 315              		.file 4 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 316              		.file 5 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 317              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 318              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 319              		.file 8 "../CMSIS/core_cm4.h"
 320              		.file 9 "../CMSIS/system_MK64F12.h"
 321              		.file 10 "../drivers/fsl_common.h"
 322              		.file 11 "../drivers/fsl_clock.h"
 323              		.file 12 "../utilities/fsl_io.h"
