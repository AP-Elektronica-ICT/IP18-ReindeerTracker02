   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_str.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ScanIgnoreWhiteSpace,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	ScanIgnoreWhiteSpace:
  25              	.LFB147:
  26              		.file 1 "../utilities/fsl_str.c"
   1:../utilities/fsl_str.c **** /*
   2:../utilities/fsl_str.c ****  * The Clear BSD License
   3:../utilities/fsl_str.c ****  * Copyright 2017 NXP
   4:../utilities/fsl_str.c ****  * All rights reserved.
   5:../utilities/fsl_str.c ****  *
   6:../utilities/fsl_str.c ****  *
   7:../utilities/fsl_str.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../utilities/fsl_str.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../utilities/fsl_str.c ****  * that the following conditions are met:
  10:../utilities/fsl_str.c ****  *
  11:../utilities/fsl_str.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../utilities/fsl_str.c ****  *   of conditions and the following disclaimer.
  13:../utilities/fsl_str.c ****  *
  14:../utilities/fsl_str.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../utilities/fsl_str.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../utilities/fsl_str.c ****  *   other materials provided with the distribution.
  17:../utilities/fsl_str.c ****  *
  18:../utilities/fsl_str.c ****  * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  19:../utilities/fsl_str.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../utilities/fsl_str.c ****  *   software without specific prior written permission.
  21:../utilities/fsl_str.c ****  *
  22:../utilities/fsl_str.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../utilities/fsl_str.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../utilities/fsl_str.c ****  * ANY EPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../utilities/fsl_str.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../utilities/fsl_str.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../utilities/fsl_str.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../utilities/fsl_str.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../utilities/fsl_str.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../utilities/fsl_str.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../utilities/fsl_str.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../utilities/fsl_str.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../utilities/fsl_str.c ****  *
  34:../utilities/fsl_str.c ****  */
  35:../utilities/fsl_str.c **** #include <math.h>
  36:../utilities/fsl_str.c **** #include <stdarg.h>
  37:../utilities/fsl_str.c **** #include <stdlib.h>
  38:../utilities/fsl_str.c **** #include "fsl_str.h"
  39:../utilities/fsl_str.c **** #include "fsl_debug_console_conf.h"
  40:../utilities/fsl_str.c **** 
  41:../utilities/fsl_str.c **** /*******************************************************************************
  42:../utilities/fsl_str.c ****  * Definitions
  43:../utilities/fsl_str.c ****  ******************************************************************************/
  44:../utilities/fsl_str.c **** 
  45:../utilities/fsl_str.c **** /*! @brief The overflow value.*/
  46:../utilities/fsl_str.c **** #ifndef HUGE_VAL
  47:../utilities/fsl_str.c **** #define HUGE_VAL (99.e99)
  48:../utilities/fsl_str.c **** #endif /* HUGE_VAL */
  49:../utilities/fsl_str.c **** 
  50:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
  51:../utilities/fsl_str.c **** static double fnum = 0.0;
  52:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
  53:../utilities/fsl_str.c **** 
  54:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
  55:../utilities/fsl_str.c **** /*! @brief Specification modifier flags for printf. */
  56:../utilities/fsl_str.c **** enum _debugconsole_printf_flag
  57:../utilities/fsl_str.c **** {
  58:../utilities/fsl_str.c ****     kPRINTF_Minus = 0x01U,              /*!< Minus FLag. */
  59:../utilities/fsl_str.c ****     kPRINTF_Plus = 0x02U,               /*!< Plus Flag. */
  60:../utilities/fsl_str.c ****     kPRINTF_Space = 0x04U,              /*!< Space Flag. */
  61:../utilities/fsl_str.c ****     kPRINTF_Zero = 0x08U,               /*!< Zero Flag. */
  62:../utilities/fsl_str.c ****     kPRINTF_Pound = 0x10U,              /*!< Pound Flag. */
  63:../utilities/fsl_str.c ****     kPRINTF_LengthChar = 0x20U,         /*!< Length: Char Flag. */
  64:../utilities/fsl_str.c ****     kPRINTF_LengthShortInt = 0x40U,     /*!< Length: Short Int Flag. */
  65:../utilities/fsl_str.c ****     kPRINTF_LengthLongInt = 0x80U,      /*!< Length: Long Int Flag. */
  66:../utilities/fsl_str.c ****     kPRINTF_LengthLongLongInt = 0x100U, /*!< Length: Long Long Int Flag. */
  67:../utilities/fsl_str.c **** };
  68:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
  69:../utilities/fsl_str.c **** 
  70:../utilities/fsl_str.c **** /*! @brief Specification modifier flags for scanf. */
  71:../utilities/fsl_str.c **** enum _debugconsole_scanf_flag
  72:../utilities/fsl_str.c **** {
  73:../utilities/fsl_str.c ****     kSCANF_Suppress = 0x2U,      /*!< Suppress Flag. */
  74:../utilities/fsl_str.c ****     kSCANF_DestMask = 0x7cU,     /*!< Destination Mask. */
  75:../utilities/fsl_str.c ****     kSCANF_DestChar = 0x4U,      /*!< Destination Char Flag. */
  76:../utilities/fsl_str.c ****     kSCANF_DestString = 0x8U,    /*!< Destination String FLag. */
  77:../utilities/fsl_str.c ****     kSCANF_DestSet = 0x10U,      /*!< Destination Set Flag. */
  78:../utilities/fsl_str.c ****     kSCANF_DestInt = 0x20U,      /*!< Destination Int Flag. */
  79:../utilities/fsl_str.c ****     kSCANF_DestFloat = 0x30U,    /*!< Destination Float Flag. */
  80:../utilities/fsl_str.c ****     kSCANF_LengthMask = 0x1f00U, /*!< Length Mask Flag. */
  81:../utilities/fsl_str.c **** #if SCANF_ADVANCED_ENABLE
  82:../utilities/fsl_str.c ****     kSCANF_LengthChar = 0x100U,        /*!< Length Char Flag. */
  83:../utilities/fsl_str.c ****     kSCANF_LengthShortInt = 0x200U,    /*!< Length ShortInt Flag. */
  84:../utilities/fsl_str.c ****     kSCANF_LengthLongInt = 0x400U,     /*!< Length LongInt Flag. */
  85:../utilities/fsl_str.c ****     kSCANF_LengthLongLongInt = 0x800U, /*!< Length LongLongInt Flag. */
  86:../utilities/fsl_str.c **** #endif                                 /* SCANF_ADVANCED_ENABLE */
  87:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
  88:../utilities/fsl_str.c ****     kSCANF_LengthLongLongDouble = 0x1000U, /*!< Length LongLongDuoble Flag. */
  89:../utilities/fsl_str.c **** #endif                                     /*PRINTF_FLOAT_ENABLE */
  90:../utilities/fsl_str.c ****     kSCANF_TypeSinged = 0x2000U,           /*!< TypeSinged Flag. */
  91:../utilities/fsl_str.c **** };
  92:../utilities/fsl_str.c **** 
  93:../utilities/fsl_str.c **** /*! @brief Keil: suppress ellipsis warning in va_arg usage below. */
  94:../utilities/fsl_str.c **** #if defined(__CC_ARM)
  95:../utilities/fsl_str.c **** #pragma diag_suppress 1256
  96:../utilities/fsl_str.c **** #endif /* __CC_ARM */
  97:../utilities/fsl_str.c **** 
  98:../utilities/fsl_str.c **** /*******************************************************************************
  99:../utilities/fsl_str.c ****  * Prototypes
 100:../utilities/fsl_str.c ****  ******************************************************************************/
 101:../utilities/fsl_str.c **** /*!
 102:../utilities/fsl_str.c ****  * @brief Scanline function which ignores white spaces.
 103:../utilities/fsl_str.c ****  *
 104:../utilities/fsl_str.c ****  * @param[in]   s The address of the string pointer to update.
 105:../utilities/fsl_str.c ****  * @return      String without white spaces.
 106:../utilities/fsl_str.c ****  */
 107:../utilities/fsl_str.c **** static uint32_t ScanIgnoreWhiteSpace(const char **s);
 108:../utilities/fsl_str.c **** 
 109:../utilities/fsl_str.c **** /*!
 110:../utilities/fsl_str.c ****  * @brief Converts a radix number to a string and return its length.
 111:../utilities/fsl_str.c ****  *
 112:../utilities/fsl_str.c ****  * @param[in] numstr    Converted string of the number.
 113:../utilities/fsl_str.c ****  * @param[in] nump      Pointer to the number.
 114:../utilities/fsl_str.c ****  * @param[in] neg       Polarity of the number.
 115:../utilities/fsl_str.c ****  * @param[in] radix     The radix to be converted to.
 116:../utilities/fsl_str.c ****  * @param[in] use_caps  Used to identify %x/X output format.
 117:../utilities/fsl_str.c **** 
 118:../utilities/fsl_str.c ****  * @return Length of the converted string.
 119:../utilities/fsl_str.c ****  */
 120:../utilities/fsl_str.c **** static int32_t ConvertRadixNumToString(char *numstr, void *nump, int32_t neg, int32_t radix, bool u
 121:../utilities/fsl_str.c **** 
 122:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 123:../utilities/fsl_str.c **** /*!
 124:../utilities/fsl_str.c ****  * @brief Converts a floating radix number to a string and return its length.
 125:../utilities/fsl_str.c ****  *
 126:../utilities/fsl_str.c ****  * @param[in] numstr            Converted string of the number.
 127:../utilities/fsl_str.c ****  * @param[in] nump              Pointer to the number.
 128:../utilities/fsl_str.c ****  * @param[in] radix             The radix to be converted to.
 129:../utilities/fsl_str.c ****  * @param[in] precision_width   Specify the precision width.
 130:../utilities/fsl_str.c **** 
 131:../utilities/fsl_str.c ****  * @return Length of the converted string.
 132:../utilities/fsl_str.c ****  */
 133:../utilities/fsl_str.c **** static int32_t ConvertFloatRadixNumToString(char *numstr, void *nump, int32_t radix, uint32_t preci
 134:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 135:../utilities/fsl_str.c **** 
 136:../utilities/fsl_str.c **** /*!
 137:../utilities/fsl_str.c **** *
 138:../utilities/fsl_str.c ****  */
 139:../utilities/fsl_str.c **** double modf(double input_dbl, double *intpart_ptr);
 140:../utilities/fsl_str.c **** 
 141:../utilities/fsl_str.c **** /*************Code for process formatted data*******************************/
 142:../utilities/fsl_str.c **** 
 143:../utilities/fsl_str.c **** static uint32_t ScanIgnoreWhiteSpace(const char **s)
 144:../utilities/fsl_str.c **** {
  27              		.loc 1 144 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 145:../utilities/fsl_str.c ****     uint8_t count = 0;
 146:../utilities/fsl_str.c ****     uint8_t c;
 147:../utilities/fsl_str.c **** 
 148:../utilities/fsl_str.c ****     c = **s;
  33              		.loc 1 148 0
  34 0000 0368     		ldr	r3, [r0]
  35 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  36              	.LVL1:
 149:../utilities/fsl_str.c ****     while ((c == ' ') || (c == '\t') || (c == '\n') || (c == '\r') || (c == '\v') || (c == '\f'))
  37              		.loc 1 149 0
  38 0004 0022     		movs	r2, #0
  39              	.LVL2:
  40              	.L2:
  41 0006 202B     		cmp	r3, #32
  42 0008 04D0     		beq	.L3
  43              		.loc 1 149 0 is_stmt 0 discriminator 1
  44 000a 093B     		subs	r3, r3, #9
  45              	.LVL3:
  46 000c 042B     		cmp	r3, #4
  47 000e 01D9     		bls	.L3
 150:../utilities/fsl_str.c ****     {
 151:../utilities/fsl_str.c ****         count++;
 152:../utilities/fsl_str.c ****         (*s)++;
 153:../utilities/fsl_str.c ****         c = **s;
 154:../utilities/fsl_str.c ****     }
 155:../utilities/fsl_str.c ****     return count;
 156:../utilities/fsl_str.c **** }
  48              		.loc 1 156 0 is_stmt 1
  49 0010 D0B2     		uxtb	r0, r2
  50              	.LVL4:
  51 0012 7047     		bx	lr
  52              	.LVL5:
  53              	.L3:
 152:../utilities/fsl_str.c ****         c = **s;
  54              		.loc 1 152 0
  55 0014 0368     		ldr	r3, [r0]
  56 0016 591C     		adds	r1, r3, #1
  57 0018 0160     		str	r1, [r0]
 153:../utilities/fsl_str.c ****     }
  58              		.loc 1 153 0
  59 001a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  60              	.LVL6:
  61 001c 0132     		adds	r2, r2, #1
  62              	.LVL7:
  63 001e F2E7     		b	.L2
  64              		.cfi_endproc
  65              	.LFE147:
  67              		.section	.text.StrFormatPrintf,"ax",%progbits
  68              		.align	1
  69              		.global	StrFormatPrintf
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	StrFormatPrintf:
  76              	.LFB149:
 157:../utilities/fsl_str.c **** 
 158:../utilities/fsl_str.c **** static int32_t ConvertRadixNumToString(char *numstr, void *nump, int32_t neg, int32_t radix, bool u
 159:../utilities/fsl_str.c **** {
 160:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 161:../utilities/fsl_str.c ****     int64_t a;
 162:../utilities/fsl_str.c ****     int64_t b;
 163:../utilities/fsl_str.c ****     int64_t c;
 164:../utilities/fsl_str.c **** 
 165:../utilities/fsl_str.c ****     uint64_t ua;
 166:../utilities/fsl_str.c ****     uint64_t ub;
 167:../utilities/fsl_str.c ****     uint64_t uc;
 168:../utilities/fsl_str.c **** #else
 169:../utilities/fsl_str.c ****     int32_t a;
 170:../utilities/fsl_str.c ****     int32_t b;
 171:../utilities/fsl_str.c ****     int32_t c;
 172:../utilities/fsl_str.c **** 
 173:../utilities/fsl_str.c ****     uint32_t ua;
 174:../utilities/fsl_str.c ****     uint32_t ub;
 175:../utilities/fsl_str.c ****     uint32_t uc;
 176:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 177:../utilities/fsl_str.c **** 
 178:../utilities/fsl_str.c ****     int32_t nlen;
 179:../utilities/fsl_str.c ****     char *nstrp;
 180:../utilities/fsl_str.c **** 
 181:../utilities/fsl_str.c ****     nlen = 0;
 182:../utilities/fsl_str.c ****     nstrp = numstr;
 183:../utilities/fsl_str.c ****     *nstrp++ = '\0';
 184:../utilities/fsl_str.c **** 
 185:../utilities/fsl_str.c ****     if (neg)
 186:../utilities/fsl_str.c ****     {
 187:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 188:../utilities/fsl_str.c ****         a = *(int64_t *)nump;
 189:../utilities/fsl_str.c **** #else
 190:../utilities/fsl_str.c ****         a = *(int32_t *)nump;
 191:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 192:../utilities/fsl_str.c ****         if (a == 0)
 193:../utilities/fsl_str.c ****         {
 194:../utilities/fsl_str.c ****             *nstrp = '0';
 195:../utilities/fsl_str.c ****             ++nlen;
 196:../utilities/fsl_str.c ****             return nlen;
 197:../utilities/fsl_str.c ****         }
 198:../utilities/fsl_str.c ****         while (a != 0)
 199:../utilities/fsl_str.c ****         {
 200:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 201:../utilities/fsl_str.c ****             b = (int64_t)a / (int64_t)radix;
 202:../utilities/fsl_str.c ****             c = (int64_t)a - ((int64_t)b * (int64_t)radix);
 203:../utilities/fsl_str.c ****             if (c < 0)
 204:../utilities/fsl_str.c ****             {
 205:../utilities/fsl_str.c ****                 uc = (uint64_t)c;
 206:../utilities/fsl_str.c ****                 c = (int64_t)(~uc) + 1 + '0';
 207:../utilities/fsl_str.c ****             }
 208:../utilities/fsl_str.c **** #else
 209:../utilities/fsl_str.c ****             b = a / radix;
 210:../utilities/fsl_str.c ****             c = a - (b * radix);
 211:../utilities/fsl_str.c ****             if (c < 0)
 212:../utilities/fsl_str.c ****             {
 213:../utilities/fsl_str.c ****                 uc = (uint32_t)c;
 214:../utilities/fsl_str.c ****                 c = (uint32_t)(~uc) + 1 + '0';
 215:../utilities/fsl_str.c ****             }
 216:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 217:../utilities/fsl_str.c ****             else
 218:../utilities/fsl_str.c ****             {
 219:../utilities/fsl_str.c ****                 c = c + '0';
 220:../utilities/fsl_str.c ****             }
 221:../utilities/fsl_str.c ****             a = b;
 222:../utilities/fsl_str.c ****             *nstrp++ = (char)c;
 223:../utilities/fsl_str.c ****             ++nlen;
 224:../utilities/fsl_str.c ****         }
 225:../utilities/fsl_str.c ****     }
 226:../utilities/fsl_str.c ****     else
 227:../utilities/fsl_str.c ****     {
 228:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 229:../utilities/fsl_str.c ****         ua = *(uint64_t *)nump;
 230:../utilities/fsl_str.c **** #else
 231:../utilities/fsl_str.c ****         ua = *(uint32_t *)nump;
 232:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 233:../utilities/fsl_str.c ****         if (ua == 0)
 234:../utilities/fsl_str.c ****         {
 235:../utilities/fsl_str.c ****             *nstrp = '0';
 236:../utilities/fsl_str.c ****             ++nlen;
 237:../utilities/fsl_str.c ****             return nlen;
 238:../utilities/fsl_str.c ****         }
 239:../utilities/fsl_str.c ****         while (ua != 0)
 240:../utilities/fsl_str.c ****         {
 241:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 242:../utilities/fsl_str.c ****             ub = (uint64_t)ua / (uint64_t)radix;
 243:../utilities/fsl_str.c ****             uc = (uint64_t)ua - ((uint64_t)ub * (uint64_t)radix);
 244:../utilities/fsl_str.c **** #else
 245:../utilities/fsl_str.c ****             ub = ua / (uint32_t)radix;
 246:../utilities/fsl_str.c ****             uc = ua - (ub * (uint32_t)radix);
 247:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 248:../utilities/fsl_str.c **** 
 249:../utilities/fsl_str.c ****             if (uc < 10)
 250:../utilities/fsl_str.c ****             {
 251:../utilities/fsl_str.c ****                 uc = uc + '0';
 252:../utilities/fsl_str.c ****             }
 253:../utilities/fsl_str.c ****             else
 254:../utilities/fsl_str.c ****             {
 255:../utilities/fsl_str.c ****                 uc = uc - 10 + (use_caps ? 'A' : 'a');
 256:../utilities/fsl_str.c ****             }
 257:../utilities/fsl_str.c ****             ua = ub;
 258:../utilities/fsl_str.c ****             *nstrp++ = (char)uc;
 259:../utilities/fsl_str.c ****             ++nlen;
 260:../utilities/fsl_str.c ****         }
 261:../utilities/fsl_str.c ****     }
 262:../utilities/fsl_str.c ****     return nlen;
 263:../utilities/fsl_str.c **** }
 264:../utilities/fsl_str.c **** 
 265:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 266:../utilities/fsl_str.c **** static int32_t ConvertFloatRadixNumToString(char *numstr, void *nump, int32_t radix, uint32_t preci
 267:../utilities/fsl_str.c **** {
 268:../utilities/fsl_str.c ****     int32_t a;
 269:../utilities/fsl_str.c ****     int32_t b;
 270:../utilities/fsl_str.c ****     int32_t c;
 271:../utilities/fsl_str.c ****     int32_t i;
 272:../utilities/fsl_str.c ****     uint32_t uc;
 273:../utilities/fsl_str.c ****     double fa;
 274:../utilities/fsl_str.c ****     double dc;
 275:../utilities/fsl_str.c ****     double fb;
 276:../utilities/fsl_str.c ****     double r;
 277:../utilities/fsl_str.c ****     double fractpart;
 278:../utilities/fsl_str.c ****     double intpart;
 279:../utilities/fsl_str.c **** 
 280:../utilities/fsl_str.c ****     int32_t nlen;
 281:../utilities/fsl_str.c ****     char *nstrp;
 282:../utilities/fsl_str.c ****     nlen = 0;
 283:../utilities/fsl_str.c ****     nstrp = numstr;
 284:../utilities/fsl_str.c ****     *nstrp++ = '\0';
 285:../utilities/fsl_str.c ****     r = *(double *)nump;
 286:../utilities/fsl_str.c ****     if (!r)
 287:../utilities/fsl_str.c ****     {
 288:../utilities/fsl_str.c ****         *nstrp = '0';
 289:../utilities/fsl_str.c ****         ++nlen;
 290:../utilities/fsl_str.c ****         return nlen;
 291:../utilities/fsl_str.c ****     }
 292:../utilities/fsl_str.c ****     fractpart = modf((double)r, (double *)&intpart);
 293:../utilities/fsl_str.c ****     /* Process fractional part. */
 294:../utilities/fsl_str.c ****     for (i = 0; i < precision_width; i++)
 295:../utilities/fsl_str.c ****     {
 296:../utilities/fsl_str.c ****         fractpart *= radix;
 297:../utilities/fsl_str.c ****     }
 298:../utilities/fsl_str.c ****     if (r >= 0)
 299:../utilities/fsl_str.c ****     {
 300:../utilities/fsl_str.c ****         fa = fractpart + (double)0.5;
 301:../utilities/fsl_str.c ****         if (fa >= pow(10, precision_width))
 302:../utilities/fsl_str.c ****         {
 303:../utilities/fsl_str.c ****             intpart++;
 304:../utilities/fsl_str.c ****         }
 305:../utilities/fsl_str.c ****     }
 306:../utilities/fsl_str.c ****     else
 307:../utilities/fsl_str.c ****     {
 308:../utilities/fsl_str.c ****         fa = fractpart - (double)0.5;
 309:../utilities/fsl_str.c ****         if (fa <= -pow(10, precision_width))
 310:../utilities/fsl_str.c ****         {
 311:../utilities/fsl_str.c ****             intpart--;
 312:../utilities/fsl_str.c ****         }
 313:../utilities/fsl_str.c ****     }
 314:../utilities/fsl_str.c ****     for (i = 0; i < precision_width; i++)
 315:../utilities/fsl_str.c ****     {
 316:../utilities/fsl_str.c ****         fb = fa / (int32_t)radix;
 317:../utilities/fsl_str.c ****         dc = (fa - (int64_t)fb * (int32_t)radix);
 318:../utilities/fsl_str.c ****         c = (int32_t)dc;
 319:../utilities/fsl_str.c ****         if (c < 0)
 320:../utilities/fsl_str.c ****         {
 321:../utilities/fsl_str.c ****             uc = (uint32_t)c;
 322:../utilities/fsl_str.c ****             c = (int32_t)(~uc) + 1 + '0';
 323:../utilities/fsl_str.c ****         }
 324:../utilities/fsl_str.c ****         else
 325:../utilities/fsl_str.c ****         {
 326:../utilities/fsl_str.c ****             c = c + '0';
 327:../utilities/fsl_str.c ****         }
 328:../utilities/fsl_str.c ****         fa = fb;
 329:../utilities/fsl_str.c ****         *nstrp++ = (char)c;
 330:../utilities/fsl_str.c ****         ++nlen;
 331:../utilities/fsl_str.c ****     }
 332:../utilities/fsl_str.c ****     *nstrp++ = (char)'.';
 333:../utilities/fsl_str.c ****     ++nlen;
 334:../utilities/fsl_str.c ****     a = (int32_t)intpart;
 335:../utilities/fsl_str.c ****     if (a == 0)
 336:../utilities/fsl_str.c ****     {
 337:../utilities/fsl_str.c ****         *nstrp++ = '0';
 338:../utilities/fsl_str.c ****         ++nlen;
 339:../utilities/fsl_str.c ****     }
 340:../utilities/fsl_str.c ****     else
 341:../utilities/fsl_str.c ****     {
 342:../utilities/fsl_str.c ****         while (a != 0)
 343:../utilities/fsl_str.c ****         {
 344:../utilities/fsl_str.c ****             b = (int32_t)a / (int32_t)radix;
 345:../utilities/fsl_str.c ****             c = (int32_t)a - ((int32_t)b * (int32_t)radix);
 346:../utilities/fsl_str.c ****             if (c < 0)
 347:../utilities/fsl_str.c ****             {
 348:../utilities/fsl_str.c ****                 uc = (uint32_t)c;
 349:../utilities/fsl_str.c ****                 c = (int32_t)(~uc) + 1 + '0';
 350:../utilities/fsl_str.c ****             }
 351:../utilities/fsl_str.c ****             else
 352:../utilities/fsl_str.c ****             {
 353:../utilities/fsl_str.c ****                 c = c + '0';
 354:../utilities/fsl_str.c ****             }
 355:../utilities/fsl_str.c ****             a = b;
 356:../utilities/fsl_str.c ****             *nstrp++ = (char)c;
 357:../utilities/fsl_str.c ****             ++nlen;
 358:../utilities/fsl_str.c ****         }
 359:../utilities/fsl_str.c ****     }
 360:../utilities/fsl_str.c ****     return nlen;
 361:../utilities/fsl_str.c **** }
 362:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 363:../utilities/fsl_str.c **** 
 364:../utilities/fsl_str.c **** int StrFormatPrintf(const char *fmt, va_list ap, char *buf, printfCb cb)
 365:../utilities/fsl_str.c **** {
  77              		.loc 1 365 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 48
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL8:
  82 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  83              		.cfi_def_cfa_offset 36
  84              		.cfi_offset 4, -36
  85              		.cfi_offset 5, -32
  86              		.cfi_offset 6, -28
  87              		.cfi_offset 7, -24
  88              		.cfi_offset 8, -20
  89              		.cfi_offset 9, -16
  90              		.cfi_offset 10, -12
  91              		.cfi_offset 11, -8
  92              		.cfi_offset 14, -4
  93 0004 8DB0     		sub	sp, sp, #52
  94              		.cfi_def_cfa_offset 88
 366:../utilities/fsl_str.c ****     /* va_list ap; */
 367:../utilities/fsl_str.c ****     char *p;
 368:../utilities/fsl_str.c ****     int32_t c;
 369:../utilities/fsl_str.c **** 
 370:../utilities/fsl_str.c ****     char vstr[33];
 371:../utilities/fsl_str.c ****     char *vstrp = NULL;
 372:../utilities/fsl_str.c ****     int32_t vlen = 0;
 373:../utilities/fsl_str.c **** 
 374:../utilities/fsl_str.c ****     int32_t done;
 375:../utilities/fsl_str.c ****     int32_t count = 0;
  95              		.loc 1 375 0
  96 0006 0DF13009 		add	r9, sp, #48
  97 000a 0025     		movs	r5, #0
  98 000c 49F8285D 		str	r5, [r9, #-40]!
 365:../utilities/fsl_str.c ****     /* va_list ap; */
  99              		.loc 1 365 0
 100 0010 9246     		mov	r10, r2
 101 0012 9B46     		mov	fp, r3
 102 0014 8846     		mov	r8, r1
 103              	.LVL9:
 376:../utilities/fsl_str.c **** 
 377:../utilities/fsl_str.c ****     uint32_t field_width;
 378:../utilities/fsl_str.c ****     uint32_t precision_width;
 379:../utilities/fsl_str.c ****     char *sval;
 380:../utilities/fsl_str.c ****     int32_t cval;
 381:../utilities/fsl_str.c ****     bool use_caps;
 382:../utilities/fsl_str.c ****     uint8_t radix = 0;
 383:../utilities/fsl_str.c **** 
 384:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 385:../utilities/fsl_str.c ****     uint32_t flags_used;
 386:../utilities/fsl_str.c ****     int32_t schar, dschar;
 387:../utilities/fsl_str.c ****     int64_t ival;
 388:../utilities/fsl_str.c ****     uint64_t uval = 0;
 389:../utilities/fsl_str.c ****     bool valid_precision_width;
 390:../utilities/fsl_str.c **** #else
 391:../utilities/fsl_str.c ****     int32_t ival;
 392:../utilities/fsl_str.c ****     uint32_t uval = 0;
 393:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 394:../utilities/fsl_str.c **** 
 395:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 396:../utilities/fsl_str.c ****     double fval;
 397:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 398:../utilities/fsl_str.c **** 
 399:../utilities/fsl_str.c ****     /* Start parsing apart the format string and display appropriate formats and data. */
 400:../utilities/fsl_str.c ****     for (p = (char *)fmt; (c = *p) != 0; p++)
 104              		.loc 1 400 0
 105 0016 0090     		str	r0, [sp]
 372:../utilities/fsl_str.c **** 
 106              		.loc 1 372 0
 107 0018 2E46     		mov	r6, r5
 371:../utilities/fsl_str.c ****     int32_t vlen = 0;
 108              		.loc 1 371 0
 109 001a 2C46     		mov	r4, r5
 110              	.LVL10:
 111              	.L8:
 112              		.loc 1 400 0 discriminator 1
 113 001c 009B     		ldr	r3, [sp]
 114 001e 93F90020 		ldrsb	r2, [r3]
 115              	.LVL11:
 116 0022 1AB9     		cbnz	r2, .L49
 117              	.LVL12:
 401:../utilities/fsl_str.c ****     {
 402:../utilities/fsl_str.c ****         /*
 403:../utilities/fsl_str.c ****          * All formats begin with a '%' marker.  Special chars like
 404:../utilities/fsl_str.c ****          * '\n' or '\t' are normally converted to the appropriate
 405:../utilities/fsl_str.c ****          * character by the __compiler__.  Thus, no need for this
 406:../utilities/fsl_str.c ****          * routine to account for the '\' character.
 407:../utilities/fsl_str.c ****          */
 408:../utilities/fsl_str.c ****         if (c != '%')
 409:../utilities/fsl_str.c ****         {
 410:../utilities/fsl_str.c ****             cb(buf, &count, c, 1);
 411:../utilities/fsl_str.c ****             /* By using 'continue', the next iteration of the loop is used, skipping the code that 
 412:../utilities/fsl_str.c ****             continue;
 413:../utilities/fsl_str.c ****         }
 414:../utilities/fsl_str.c **** 
 415:../utilities/fsl_str.c ****         use_caps = true;
 416:../utilities/fsl_str.c **** 
 417:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 418:../utilities/fsl_str.c ****         /* First check for specification modifier flags. */
 419:../utilities/fsl_str.c ****         flags_used = 0;
 420:../utilities/fsl_str.c ****         done = false;
 421:../utilities/fsl_str.c ****         while (!done)
 422:../utilities/fsl_str.c ****         {
 423:../utilities/fsl_str.c ****             switch (*++p)
 424:../utilities/fsl_str.c ****             {
 425:../utilities/fsl_str.c ****                 case '-':
 426:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Minus;
 427:../utilities/fsl_str.c ****                     break;
 428:../utilities/fsl_str.c ****                 case '+':
 429:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Plus;
 430:../utilities/fsl_str.c ****                     break;
 431:../utilities/fsl_str.c ****                 case ' ':
 432:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Space;
 433:../utilities/fsl_str.c ****                     break;
 434:../utilities/fsl_str.c ****                 case '0':
 435:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Zero;
 436:../utilities/fsl_str.c ****                     break;
 437:../utilities/fsl_str.c ****                 case '#':
 438:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_Pound;
 439:../utilities/fsl_str.c ****                     break;
 440:../utilities/fsl_str.c ****                 default:
 441:../utilities/fsl_str.c ****                     /* We've gone one char too far. */
 442:../utilities/fsl_str.c ****                     --p;
 443:../utilities/fsl_str.c ****                     done = true;
 444:../utilities/fsl_str.c ****                     break;
 445:../utilities/fsl_str.c ****             }
 446:../utilities/fsl_str.c ****         }
 447:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 448:../utilities/fsl_str.c **** 
 449:../utilities/fsl_str.c ****         /* Next check for minimum field width. */
 450:../utilities/fsl_str.c ****         field_width = 0;
 451:../utilities/fsl_str.c ****         done = false;
 452:../utilities/fsl_str.c ****         while (!done)
 453:../utilities/fsl_str.c ****         {
 454:../utilities/fsl_str.c ****             c = *++p;
 455:../utilities/fsl_str.c ****             if ((c >= '0') && (c <= '9'))
 456:../utilities/fsl_str.c ****             {
 457:../utilities/fsl_str.c ****                 field_width = (field_width * 10) + (c - '0');
 458:../utilities/fsl_str.c ****             }
 459:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 460:../utilities/fsl_str.c ****             else if (c == '*')
 461:../utilities/fsl_str.c ****             {
 462:../utilities/fsl_str.c ****                 field_width = (uint32_t)va_arg(ap, uint32_t);
 463:../utilities/fsl_str.c ****             }
 464:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 465:../utilities/fsl_str.c ****             else
 466:../utilities/fsl_str.c ****             {
 467:../utilities/fsl_str.c ****                 /* We've gone one char too far. */
 468:../utilities/fsl_str.c ****                 --p;
 469:../utilities/fsl_str.c ****                 done = true;
 470:../utilities/fsl_str.c ****             }
 471:../utilities/fsl_str.c ****         }
 472:../utilities/fsl_str.c ****         /* Next check for the width and precision field separator. */
 473:../utilities/fsl_str.c ****         precision_width = 6;
 474:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 475:../utilities/fsl_str.c ****         valid_precision_width = false;
 476:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 477:../utilities/fsl_str.c ****         if (*++p == '.')
 478:../utilities/fsl_str.c ****         {
 479:../utilities/fsl_str.c ****             /* Must get precision field width, if present. */
 480:../utilities/fsl_str.c ****             precision_width = 0;
 481:../utilities/fsl_str.c ****             done = false;
 482:../utilities/fsl_str.c ****             while (!done)
 483:../utilities/fsl_str.c ****             {
 484:../utilities/fsl_str.c ****                 c = *++p;
 485:../utilities/fsl_str.c ****                 if ((c >= '0') && (c <= '9'))
 486:../utilities/fsl_str.c ****                 {
 487:../utilities/fsl_str.c ****                     precision_width = (precision_width * 10) + (c - '0');
 488:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 489:../utilities/fsl_str.c ****                     valid_precision_width = true;
 490:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 491:../utilities/fsl_str.c ****                 }
 492:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 493:../utilities/fsl_str.c ****                 else if (c == '*')
 494:../utilities/fsl_str.c ****                 {
 495:../utilities/fsl_str.c ****                     precision_width = (uint32_t)va_arg(ap, uint32_t);
 496:../utilities/fsl_str.c ****                     valid_precision_width = true;
 497:../utilities/fsl_str.c ****                 }
 498:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 499:../utilities/fsl_str.c ****                 else
 500:../utilities/fsl_str.c ****                 {
 501:../utilities/fsl_str.c ****                     /* We've gone one char too far. */
 502:../utilities/fsl_str.c ****                     --p;
 503:../utilities/fsl_str.c ****                     done = true;
 504:../utilities/fsl_str.c ****                 }
 505:../utilities/fsl_str.c ****             }
 506:../utilities/fsl_str.c ****         }
 507:../utilities/fsl_str.c ****         else
 508:../utilities/fsl_str.c ****         {
 509:../utilities/fsl_str.c ****             /* We've gone one char too far. */
 510:../utilities/fsl_str.c ****             --p;
 511:../utilities/fsl_str.c ****         }
 512:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 513:../utilities/fsl_str.c ****         /*
 514:../utilities/fsl_str.c ****          * Check for the length modifier.
 515:../utilities/fsl_str.c ****          */
 516:../utilities/fsl_str.c ****         switch (/* c = */ *++p)
 517:../utilities/fsl_str.c ****         {
 518:../utilities/fsl_str.c ****             case 'h':
 519:../utilities/fsl_str.c ****                 if (*++p != 'h')
 520:../utilities/fsl_str.c ****                 {
 521:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthShortInt;
 522:../utilities/fsl_str.c ****                     --p;
 523:../utilities/fsl_str.c ****                 }
 524:../utilities/fsl_str.c ****                 else
 525:../utilities/fsl_str.c ****                 {
 526:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthChar;
 527:../utilities/fsl_str.c ****                 }
 528:../utilities/fsl_str.c ****                 break;
 529:../utilities/fsl_str.c ****             case 'l':
 530:../utilities/fsl_str.c ****                 if (*++p != 'l')
 531:../utilities/fsl_str.c ****                 {
 532:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthLongInt;
 533:../utilities/fsl_str.c ****                     --p;
 534:../utilities/fsl_str.c ****                 }
 535:../utilities/fsl_str.c ****                 else
 536:../utilities/fsl_str.c ****                 {
 537:../utilities/fsl_str.c ****                     flags_used |= kPRINTF_LengthLongLongInt;
 538:../utilities/fsl_str.c ****                 }
 539:../utilities/fsl_str.c ****                 break;
 540:../utilities/fsl_str.c ****             default:
 541:../utilities/fsl_str.c ****                 /* we've gone one char too far */
 542:../utilities/fsl_str.c ****                 --p;
 543:../utilities/fsl_str.c ****                 break;
 544:../utilities/fsl_str.c ****         }
 545:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 546:../utilities/fsl_str.c ****         /* Now we're ready to examine the format. */
 547:../utilities/fsl_str.c ****         c = *++p;
 548:../utilities/fsl_str.c ****         {
 549:../utilities/fsl_str.c ****             if ((c == 'd') || (c == 'i') || (c == 'f') || (c == 'F') || (c == 'x') || (c == 'X') ||
 550:../utilities/fsl_str.c ****                 (c == 'b') || (c == 'p') || (c == 'u'))
 551:../utilities/fsl_str.c ****             {
 552:../utilities/fsl_str.c ****                 if ((c == 'd') || (c == 'i'))
 553:../utilities/fsl_str.c ****                 {
 554:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 555:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_LengthLongLongInt)
 556:../utilities/fsl_str.c ****                     {
 557:../utilities/fsl_str.c ****                         ival = (int64_t)va_arg(ap, int64_t);
 558:../utilities/fsl_str.c ****                     }
 559:../utilities/fsl_str.c ****                     else
 560:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 561:../utilities/fsl_str.c ****                     {
 562:../utilities/fsl_str.c ****                         ival = (int32_t)va_arg(ap, int32_t);
 563:../utilities/fsl_str.c ****                     }
 564:../utilities/fsl_str.c ****                     vlen = ConvertRadixNumToString(vstr, &ival, true, 10, use_caps);
 565:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 566:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 567:../utilities/fsl_str.c ****                     if (ival < 0)
 568:../utilities/fsl_str.c ****                     {
 569:../utilities/fsl_str.c ****                         schar = '-';
 570:../utilities/fsl_str.c ****                         ++vlen;
 571:../utilities/fsl_str.c ****                     }
 572:../utilities/fsl_str.c ****                     else
 573:../utilities/fsl_str.c ****                     {
 574:../utilities/fsl_str.c ****                         if (flags_used & kPRINTF_Plus)
 575:../utilities/fsl_str.c ****                         {
 576:../utilities/fsl_str.c ****                             schar = '+';
 577:../utilities/fsl_str.c ****                             ++vlen;
 578:../utilities/fsl_str.c ****                         }
 579:../utilities/fsl_str.c ****                         else
 580:../utilities/fsl_str.c ****                         {
 581:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Space)
 582:../utilities/fsl_str.c ****                             {
 583:../utilities/fsl_str.c ****                                 schar = ' ';
 584:../utilities/fsl_str.c ****                                 ++vlen;
 585:../utilities/fsl_str.c ****                             }
 586:../utilities/fsl_str.c ****                             else
 587:../utilities/fsl_str.c ****                             {
 588:../utilities/fsl_str.c ****                                 schar = 0;
 589:../utilities/fsl_str.c ****                             }
 590:../utilities/fsl_str.c ****                         }
 591:../utilities/fsl_str.c ****                     }
 592:../utilities/fsl_str.c ****                     dschar = false;
 593:../utilities/fsl_str.c ****                     /* Do the ZERO pad. */
 594:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 595:../utilities/fsl_str.c ****                     {
 596:../utilities/fsl_str.c ****                         if (schar)
 597:../utilities/fsl_str.c ****                         {
 598:../utilities/fsl_str.c ****                             cb(buf, &count, schar, 1);
 599:../utilities/fsl_str.c ****                         }
 600:../utilities/fsl_str.c ****                         dschar = true;
 601:../utilities/fsl_str.c **** 
 602:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 603:../utilities/fsl_str.c ****                         vlen = field_width;
 604:../utilities/fsl_str.c ****                     }
 605:../utilities/fsl_str.c ****                     else
 606:../utilities/fsl_str.c ****                     {
 607:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 608:../utilities/fsl_str.c ****                         {
 609:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 610:../utilities/fsl_str.c ****                             if (schar)
 611:../utilities/fsl_str.c ****                             {
 612:../utilities/fsl_str.c ****                                 cb(buf, &count, schar, 1);
 613:../utilities/fsl_str.c ****                             }
 614:../utilities/fsl_str.c ****                             dschar = true;
 615:../utilities/fsl_str.c ****                         }
 616:../utilities/fsl_str.c ****                     }
 617:../utilities/fsl_str.c ****                     /* The string was built in reverse order, now display in correct order. */
 618:../utilities/fsl_str.c ****                     if ((!dschar) && schar)
 619:../utilities/fsl_str.c ****                     {
 620:../utilities/fsl_str.c ****                         cb(buf, &count, schar, 1);
 621:../utilities/fsl_str.c ****                     }
 622:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 623:../utilities/fsl_str.c ****                 }
 624:../utilities/fsl_str.c **** 
 625:../utilities/fsl_str.c **** #if PRINTF_FLOAT_ENABLE
 626:../utilities/fsl_str.c ****                 if ((c == 'f') || (c == 'F'))
 627:../utilities/fsl_str.c ****                 {
 628:../utilities/fsl_str.c ****                     fval = (double)va_arg(ap, double);
 629:../utilities/fsl_str.c ****                     vlen = ConvertFloatRadixNumToString(vstr, &fval, 10, precision_width);
 630:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 631:../utilities/fsl_str.c **** 
 632:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 633:../utilities/fsl_str.c ****                     if (fval < 0)
 634:../utilities/fsl_str.c ****                     {
 635:../utilities/fsl_str.c ****                         schar = '-';
 636:../utilities/fsl_str.c ****                         ++vlen;
 637:../utilities/fsl_str.c ****                     }
 638:../utilities/fsl_str.c ****                     else
 639:../utilities/fsl_str.c ****                     {
 640:../utilities/fsl_str.c ****                         if (flags_used & kPRINTF_Plus)
 641:../utilities/fsl_str.c ****                         {
 642:../utilities/fsl_str.c ****                             schar = '+';
 643:../utilities/fsl_str.c ****                             ++vlen;
 644:../utilities/fsl_str.c ****                         }
 645:../utilities/fsl_str.c ****                         else
 646:../utilities/fsl_str.c ****                         {
 647:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Space)
 648:../utilities/fsl_str.c ****                             {
 649:../utilities/fsl_str.c ****                                 schar = ' ';
 650:../utilities/fsl_str.c ****                                 ++vlen;
 651:../utilities/fsl_str.c ****                             }
 652:../utilities/fsl_str.c ****                             else
 653:../utilities/fsl_str.c ****                             {
 654:../utilities/fsl_str.c ****                                 schar = 0;
 655:../utilities/fsl_str.c ****                             }
 656:../utilities/fsl_str.c ****                         }
 657:../utilities/fsl_str.c ****                     }
 658:../utilities/fsl_str.c ****                     dschar = false;
 659:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 660:../utilities/fsl_str.c ****                     {
 661:../utilities/fsl_str.c ****                         if (schar)
 662:../utilities/fsl_str.c ****                         {
 663:../utilities/fsl_str.c ****                             cb(buf, &count, schar, 1);
 664:../utilities/fsl_str.c ****                         }
 665:../utilities/fsl_str.c ****                         dschar = true;
 666:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 667:../utilities/fsl_str.c ****                         vlen = field_width;
 668:../utilities/fsl_str.c ****                     }
 669:../utilities/fsl_str.c ****                     else
 670:../utilities/fsl_str.c ****                     {
 671:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 672:../utilities/fsl_str.c ****                         {
 673:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 674:../utilities/fsl_str.c ****                             if (schar)
 675:../utilities/fsl_str.c ****                             {
 676:../utilities/fsl_str.c ****                                 cb(buf, &count, schar, 1);
 677:../utilities/fsl_str.c ****                             }
 678:../utilities/fsl_str.c ****                             dschar = true;
 679:../utilities/fsl_str.c ****                         }
 680:../utilities/fsl_str.c ****                     }
 681:../utilities/fsl_str.c ****                     if ((!dschar) && schar)
 682:../utilities/fsl_str.c ****                     {
 683:../utilities/fsl_str.c ****                         cb(buf, &count, schar, 1);
 684:../utilities/fsl_str.c ****                     }
 685:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 686:../utilities/fsl_str.c ****                 }
 687:../utilities/fsl_str.c **** #endif /* PRINTF_FLOAT_ENABLE */
 688:../utilities/fsl_str.c ****                 if ((c == 'X') || (c == 'x'))
 689:../utilities/fsl_str.c ****                 {
 690:../utilities/fsl_str.c ****                     if (c == 'x')
 691:../utilities/fsl_str.c ****                     {
 692:../utilities/fsl_str.c ****                         use_caps = false;
 693:../utilities/fsl_str.c ****                     }
 694:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 695:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_LengthLongLongInt)
 696:../utilities/fsl_str.c ****                     {
 697:../utilities/fsl_str.c ****                         uval = (uint64_t)va_arg(ap, uint64_t);
 698:../utilities/fsl_str.c ****                     }
 699:../utilities/fsl_str.c ****                     else
 700:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 701:../utilities/fsl_str.c ****                     {
 702:../utilities/fsl_str.c ****                         uval = (uint32_t)va_arg(ap, uint32_t);
 703:../utilities/fsl_str.c ****                     }
 704:../utilities/fsl_str.c ****                     vlen = ConvertRadixNumToString(vstr, &uval, false, 16, use_caps);
 705:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 706:../utilities/fsl_str.c **** 
 707:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 708:../utilities/fsl_str.c ****                     dschar = false;
 709:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 710:../utilities/fsl_str.c ****                     {
 711:../utilities/fsl_str.c ****                         if (flags_used & kPRINTF_Pound)
 712:../utilities/fsl_str.c ****                         {
 713:../utilities/fsl_str.c ****                             cb(buf, &count, '0', 1);
 714:../utilities/fsl_str.c ****                             cb(buf, &count, (use_caps ? 'X' : 'x'), 1);
 715:../utilities/fsl_str.c ****                             dschar = true;
 716:../utilities/fsl_str.c ****                         }
 717:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 718:../utilities/fsl_str.c ****                         vlen = field_width;
 719:../utilities/fsl_str.c ****                     }
 720:../utilities/fsl_str.c ****                     else
 721:../utilities/fsl_str.c ****                     {
 722:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 723:../utilities/fsl_str.c ****                         {
 724:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Pound)
 725:../utilities/fsl_str.c ****                             {
 726:../utilities/fsl_str.c ****                                 vlen += 2;
 727:../utilities/fsl_str.c ****                             }
 728:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 729:../utilities/fsl_str.c ****                             if (flags_used & kPRINTF_Pound)
 730:../utilities/fsl_str.c ****                             {
 731:../utilities/fsl_str.c ****                                 cb(buf, &count, '0', 1);
 732:../utilities/fsl_str.c ****                                 cb(buf, &count, (use_caps ? 'X' : 'x'), 1);
 733:../utilities/fsl_str.c ****                                 dschar = true;
 734:../utilities/fsl_str.c ****                             }
 735:../utilities/fsl_str.c ****                         }
 736:../utilities/fsl_str.c ****                     }
 737:../utilities/fsl_str.c **** 
 738:../utilities/fsl_str.c ****                     if ((flags_used & kPRINTF_Pound) && (!dschar))
 739:../utilities/fsl_str.c ****                     {
 740:../utilities/fsl_str.c ****                         cb(buf, &count, '0', 1);
 741:../utilities/fsl_str.c ****                         cb(buf, &count, (use_caps ? 'X' : 'x'), 1);
 742:../utilities/fsl_str.c ****                         vlen += 2;
 743:../utilities/fsl_str.c ****                     }
 744:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 745:../utilities/fsl_str.c ****                 }
 746:../utilities/fsl_str.c ****                 if ((c == 'o') || (c == 'b') || (c == 'p') || (c == 'u'))
 747:../utilities/fsl_str.c ****                 {
 748:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 749:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_LengthLongLongInt)
 750:../utilities/fsl_str.c ****                     {
 751:../utilities/fsl_str.c ****                         uval = (uint64_t)va_arg(ap, uint64_t);
 752:../utilities/fsl_str.c ****                     }
 753:../utilities/fsl_str.c ****                     else
 754:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 755:../utilities/fsl_str.c ****                     {
 756:../utilities/fsl_str.c ****                         uval = (uint32_t)va_arg(ap, uint32_t);
 757:../utilities/fsl_str.c ****                     }
 758:../utilities/fsl_str.c ****                     switch (c)
 759:../utilities/fsl_str.c ****                     {
 760:../utilities/fsl_str.c ****                         case 'o':
 761:../utilities/fsl_str.c ****                             radix = 8;
 762:../utilities/fsl_str.c ****                             break;
 763:../utilities/fsl_str.c ****                         case 'b':
 764:../utilities/fsl_str.c ****                             radix = 2;
 765:../utilities/fsl_str.c ****                             break;
 766:../utilities/fsl_str.c ****                         case 'p':
 767:../utilities/fsl_str.c ****                             radix = 16;
 768:../utilities/fsl_str.c ****                             break;
 769:../utilities/fsl_str.c ****                         case 'u':
 770:../utilities/fsl_str.c ****                             radix = 10;
 771:../utilities/fsl_str.c ****                             break;
 772:../utilities/fsl_str.c ****                     }
 773:../utilities/fsl_str.c ****                     vlen = ConvertRadixNumToString(vstr, &uval, false, radix, use_caps);
 774:../utilities/fsl_str.c ****                     vstrp = &vstr[vlen];
 775:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 776:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Zero)
 777:../utilities/fsl_str.c ****                     {
 778:../utilities/fsl_str.c ****                         cb(buf, &count, '0', field_width - vlen);
 779:../utilities/fsl_str.c ****                         vlen = field_width;
 780:../utilities/fsl_str.c ****                     }
 781:../utilities/fsl_str.c ****                     else
 782:../utilities/fsl_str.c ****                     {
 783:../utilities/fsl_str.c ****                         if (!(flags_used & kPRINTF_Minus))
 784:../utilities/fsl_str.c ****                         {
 785:../utilities/fsl_str.c ****                             cb(buf, &count, ' ', field_width - vlen);
 786:../utilities/fsl_str.c ****                         }
 787:../utilities/fsl_str.c ****                     }
 788:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 789:../utilities/fsl_str.c ****                 }
 790:../utilities/fsl_str.c **** #if !PRINTF_ADVANCED_ENABLE
 791:../utilities/fsl_str.c ****                 cb(buf, &count, ' ', field_width - vlen);
 792:../utilities/fsl_str.c **** #endif /* !PRINTF_ADVANCED_ENABLE */
 793:../utilities/fsl_str.c ****                 if (vstrp != NULL)
 794:../utilities/fsl_str.c ****                 {
 795:../utilities/fsl_str.c ****                     while (*vstrp)
 796:../utilities/fsl_str.c ****                     {
 797:../utilities/fsl_str.c ****                         cb(buf, &count, *vstrp--, 1);
 798:../utilities/fsl_str.c ****                     }
 799:../utilities/fsl_str.c ****                 }
 800:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 801:../utilities/fsl_str.c ****                 if (flags_used & kPRINTF_Minus)
 802:../utilities/fsl_str.c ****                 {
 803:../utilities/fsl_str.c ****                     cb(buf, &count, ' ', field_width - vlen);
 804:../utilities/fsl_str.c ****                 }
 805:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 806:../utilities/fsl_str.c ****             }
 807:../utilities/fsl_str.c ****             else if (c == 'c')
 808:../utilities/fsl_str.c ****             {
 809:../utilities/fsl_str.c ****                 cval = (char)va_arg(ap, uint32_t);
 810:../utilities/fsl_str.c ****                 cb(buf, &count, cval, 1);
 811:../utilities/fsl_str.c ****             }
 812:../utilities/fsl_str.c ****             else if (c == 's')
 813:../utilities/fsl_str.c ****             {
 814:../utilities/fsl_str.c ****                 sval = (char *)va_arg(ap, char *);
 815:../utilities/fsl_str.c ****                 if (sval)
 816:../utilities/fsl_str.c ****                 {
 817:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 818:../utilities/fsl_str.c ****                     if (valid_precision_width)
 819:../utilities/fsl_str.c ****                     {
 820:../utilities/fsl_str.c ****                         vlen = precision_width;
 821:../utilities/fsl_str.c ****                     }
 822:../utilities/fsl_str.c ****                     else
 823:../utilities/fsl_str.c ****                     {
 824:../utilities/fsl_str.c ****                         vlen = strlen(sval);
 825:../utilities/fsl_str.c ****                     }
 826:../utilities/fsl_str.c **** #else
 827:../utilities/fsl_str.c ****                     vlen = strlen(sval);
 828:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 829:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 830:../utilities/fsl_str.c ****                     if (!(flags_used & kPRINTF_Minus))
 831:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 832:../utilities/fsl_str.c ****                     {
 833:../utilities/fsl_str.c ****                         cb(buf, &count, ' ', field_width - vlen);
 834:../utilities/fsl_str.c ****                     }
 835:../utilities/fsl_str.c **** 
 836:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 837:../utilities/fsl_str.c ****                     if (valid_precision_width)
 838:../utilities/fsl_str.c ****                     {
 839:../utilities/fsl_str.c ****                         while ((*sval) && (vlen > 0))
 840:../utilities/fsl_str.c ****                         {
 841:../utilities/fsl_str.c ****                             cb(buf, &count, *sval++, 1);
 842:../utilities/fsl_str.c ****                             vlen--;
 843:../utilities/fsl_str.c ****                         }
 844:../utilities/fsl_str.c ****                         /* In case that vlen sval is shorter than vlen */
 845:../utilities/fsl_str.c ****                         vlen = precision_width - vlen;
 846:../utilities/fsl_str.c ****                     }
 847:../utilities/fsl_str.c ****                     else
 848:../utilities/fsl_str.c ****                     {
 849:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 850:../utilities/fsl_str.c ****                         while (*sval)
 851:../utilities/fsl_str.c ****                         {
 852:../utilities/fsl_str.c ****                             cb(buf, &count, *sval++, 1);
 853:../utilities/fsl_str.c ****                         }
 854:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 855:../utilities/fsl_str.c ****                     }
 856:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 857:../utilities/fsl_str.c **** 
 858:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 859:../utilities/fsl_str.c ****                     if (flags_used & kPRINTF_Minus)
 860:../utilities/fsl_str.c ****                     {
 861:../utilities/fsl_str.c ****                         cb(buf, &count, ' ', field_width - vlen);
 862:../utilities/fsl_str.c ****                     }
 863:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 864:../utilities/fsl_str.c ****                 }
 865:../utilities/fsl_str.c ****             }
 866:../utilities/fsl_str.c ****             else
 867:../utilities/fsl_str.c ****             {
 868:../utilities/fsl_str.c ****                 cb(buf, &count, c, 1);
 869:../utilities/fsl_str.c ****             }
 870:../utilities/fsl_str.c ****         }
 871:../utilities/fsl_str.c ****     }
 872:../utilities/fsl_str.c **** 
 873:../utilities/fsl_str.c ****     return count;
 874:../utilities/fsl_str.c **** }
 118              		.loc 1 874 0
 119 0024 0298     		ldr	r0, [sp, #8]
 120 0026 0DB0     		add	sp, sp, #52
 121              		.cfi_remember_state
 122              		.cfi_def_cfa_offset 36
 123              	.LVL13:
 124              		@ sp needed
 125 0028 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 126              	.LVL14:
 127              	.L49:
 128              		.cfi_restore_state
 408:../utilities/fsl_str.c ****         {
 129              		.loc 1 408 0
 130 002c 252A     		cmp	r2, #37
 131 002e 40F00B81 		bne	.L46
 132 0032 009A     		ldr	r2, [sp]
 133              	.LVL15:
 134 0034 0023     		movs	r3, #0
 135              	.LVL16:
 457:../utilities/fsl_str.c ****             }
 136              		.loc 1 457 0
 137 0036 0A27     		movs	r7, #10
 138              	.LVL17:
 139              	.L10:
 454:../utilities/fsl_str.c ****             if ((c >= '0') && (c <= '9'))
 140              		.loc 1 454 0
 141 0038 92F90110 		ldrsb	r1, [r2, #1]
 142              	.LVL18:
 455:../utilities/fsl_str.c ****             {
 143              		.loc 1 455 0
 144 003c A1F1300E 		sub	lr, r1, #48
 145 0040 BEF1090F 		cmp	lr, #9
 454:../utilities/fsl_str.c ****             if ((c >= '0') && (c <= '9'))
 146              		.loc 1 454 0
 147 0044 02F10100 		add	r0, r2, #1
 148              	.LVL19:
 455:../utilities/fsl_str.c ****             {
 149              		.loc 1 455 0
 150 0048 76D9     		bls	.L12
 151              	.LVL20:
 477:../utilities/fsl_str.c ****         {
 152              		.loc 1 477 0
 153 004a 2E29     		cmp	r1, #46
 154 004c 06D1     		bne	.L13
 155              	.LVL21:
 156              	.L50:
 157 004e 0246     		mov	r2, r0
 158              	.LVL22:
 484:../utilities/fsl_str.c ****                 if ((c >= '0') && (c <= '9'))
 159              		.loc 1 484 0
 160 0050 0130     		adds	r0, r0, #1
 161              	.LVL23:
 485:../utilities/fsl_str.c ****                 {
 162              		.loc 1 485 0
 163 0052 92F90110 		ldrsb	r1, [r2, #1]
 164              	.LVL24:
 165 0056 3039     		subs	r1, r1, #48
 166              	.LVL25:
 167 0058 0929     		cmp	r1, #9
 168 005a F8D9     		bls	.L50
 169              	.LVL26:
 170              	.L13:
 547:../utilities/fsl_str.c ****         {
 171              		.loc 1 547 0
 172 005c 511C     		adds	r1, r2, #1
 173 005e 92F90120 		ldrsb	r2, [r2, #1]
 174              	.LVL27:
 175 0062 0091     		str	r1, [sp]
 176              	.LVL28:
 549:../utilities/fsl_str.c ****                 (c == 'b') || (c == 'p') || (c == 'u'))
 177              		.loc 1 549 0
 178 0064 642A     		cmp	r2, #100
 179 0066 13D0     		beq	.L15
 549:../utilities/fsl_str.c ****                 (c == 'b') || (c == 'p') || (c == 'u'))
 180              		.loc 1 549 0 is_stmt 0 discriminator 3
 181 0068 22F02001 		bic	r1, r2, #32
 182              	.LVL29:
 183 006c 4629     		cmp	r1, #70
 184 006e 0DD0     		beq	.L16
 549:../utilities/fsl_str.c ****                 (c == 'b') || (c == 'p') || (c == 'u'))
 185              		.loc 1 549 0 discriminator 5
 186 0070 5829     		cmp	r1, #88
 187 0072 0BD0     		beq	.L16
 549:../utilities/fsl_str.c ****                 (c == 'b') || (c == 'p') || (c == 'u'))
 188              		.loc 1 549 0 discriminator 6
 189 0074 A2F16201 		sub	r1, r2, #98
 190 0078 C9B2     		uxtb	r1, r1
 191 007a 1329     		cmp	r1, #19
 192 007c 00F2B980 		bhi	.L17
 549:../utilities/fsl_str.c ****                 (c == 'b') || (c == 'p') || (c == 'u'))
 193              		.loc 1 549 0 discriminator 7
 194 0080 7448     		ldr	r0, .L74
 195 0082 20FA01F1 		lsr	r1, r0, r1
 196 0086 C807     		lsls	r0, r1, #31
 197 0088 40F1B380 		bpl	.L17
 198              	.L16:
 552:../utilities/fsl_str.c ****                 {
 199              		.loc 1 552 0 is_stmt 1 discriminator 1
 200 008c 692A     		cmp	r2, #105
 201 008e 6BD1     		bne	.L51
 202              	.L15:
 203              	.LBB8:
 204              	.LBB9:
 183:../utilities/fsl_str.c **** 
 205              		.loc 1 183 0
 206 0090 0CAC     		add	r4, sp, #48
 207              	.LVL30:
 208              	.LBE9:
 209              	.LBE8:
 562:../utilities/fsl_str.c ****                     }
 210              		.loc 1 562 0
 211 0092 D8F80010 		ldr	r1, [r8]
 212              	.LBB13:
 213              	.LBB10:
 183:../utilities/fsl_str.c **** 
 214              		.loc 1 183 0
 215 0096 0020     		movs	r0, #0
 216              	.LBE10:
 217              	.LBE13:
 562:../utilities/fsl_str.c ****                     }
 218              		.loc 1 562 0
 219 0098 08F10407 		add	r7, r8, #4
 220              	.LVL31:
 221              	.LBB14:
 222              	.LBB11:
 183:../utilities/fsl_str.c **** 
 223              		.loc 1 183 0
 224 009c 04F8240D 		strb	r0, [r4, #-36]!
 192:../utilities/fsl_str.c ****         {
 225              		.loc 1 192 0
 226 00a0 0029     		cmp	r1, #0
 227 00a2 4ED1     		bne	.L19
 194:../utilities/fsl_str.c ****             ++nlen;
 228              		.loc 1 194 0
 229 00a4 3021     		movs	r1, #48
 230 00a6 8DF80D10 		strb	r1, [sp, #13]
 231              	.LVL32:
 196:../utilities/fsl_str.c ****         }
 232              		.loc 1 196 0
 233 00aa 0126     		movs	r6, #1
 234              	.LVL33:
 235              	.L20:
 236              	.LBE11:
 237              	.LBE14:
 565:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 238              		.loc 1 565 0
 239 00ac 3444     		add	r4, r4, r6
 240              	.LVL34:
 241              	.L18:
 688:../utilities/fsl_str.c ****                 {
 242              		.loc 1 688 0
 243 00ae 582A     		cmp	r2, #88
 244 00b0 5CD0     		beq	.L52
 688:../utilities/fsl_str.c ****                 {
 245              		.loc 1 688 0 is_stmt 0 discriminator 1
 246 00b2 782A     		cmp	r2, #120
 247 00b4 74D1     		bne	.L53
 692:../utilities/fsl_str.c ****                     }
 248              		.loc 1 692 0 is_stmt 1
 249 00b6 0021     		movs	r1, #0
 250              	.L73:
 415:../utilities/fsl_str.c **** 
 251              		.loc 1 415 0
 252 00b8 0191     		str	r1, [sp, #4]
 253              	.LVL35:
 254              	.LBB15:
 255              	.LBB16:
 183:../utilities/fsl_str.c **** 
 256              		.loc 1 183 0
 257 00ba 0CAC     		add	r4, sp, #48
 258              	.LVL36:
 259              	.LBE16:
 260              	.LBE15:
 702:../utilities/fsl_str.c ****                     }
 261              		.loc 1 702 0
 262 00bc 3968     		ldr	r1, [r7]
 263              	.LBB20:
 264              	.LBB17:
 183:../utilities/fsl_str.c **** 
 265              		.loc 1 183 0
 266 00be 0026     		movs	r6, #0
 267              	.LVL37:
 268              	.LBE17:
 269              	.LBE20:
 702:../utilities/fsl_str.c ****                     }
 270              		.loc 1 702 0
 271 00c0 07F10408 		add	r8, r7, #4
 272              	.LVL38:
 273              	.LBB21:
 274              	.LBB18:
 183:../utilities/fsl_str.c **** 
 275              		.loc 1 183 0
 276 00c4 04F8246D 		strb	r6, [r4, #-36]!
 233:../utilities/fsl_str.c ****         {
 277              		.loc 1 233 0
 278 00c8 0029     		cmp	r1, #0
 279 00ca 51D1     		bne	.L26
 235:../utilities/fsl_str.c ****             ++nlen;
 280              		.loc 1 235 0
 281 00cc 3021     		movs	r1, #48
 282 00ce 8DF80D10 		strb	r1, [sp, #13]
 283              	.LVL39:
 237:../utilities/fsl_str.c ****         }
 284              		.loc 1 237 0
 285 00d2 0126     		movs	r6, #1
 286              	.LVL40:
 287              	.L27:
 288              	.LBE18:
 289              	.LBE21:
 705:../utilities/fsl_str.c **** 
 290              		.loc 1 705 0
 291 00d4 3444     		add	r4, r4, r6
 292              	.LVL41:
 702:../utilities/fsl_str.c ****                     }
 293              		.loc 1 702 0
 294 00d6 4746     		mov	r7, r8
 295              	.LVL42:
 296              	.L25:
 746:../utilities/fsl_str.c ****                 {
 297              		.loc 1 746 0
 298 00d8 A2F16201 		sub	r1, r2, #98
 299 00dc C9B2     		uxtb	r1, r1
 300 00de 1329     		cmp	r1, #19
 301 00e0 19D8     		bhi	.L31
 746:../utilities/fsl_str.c ****                 {
 302              		.loc 1 746 0 is_stmt 0 discriminator 1
 303 00e2 5D48     		ldr	r0, .L74+4
 304 00e4 20FA01F1 		lsr	r1, r0, r1
 305 00e8 C907     		lsls	r1, r1, #31
 306 00ea 14D5     		bpl	.L31
 758:../utilities/fsl_str.c ****                     {
 307              		.loc 1 758 0 is_stmt 1
 308 00ec 6F2A     		cmp	r2, #111
 756:../utilities/fsl_str.c ****                     }
 309              		.loc 1 756 0
 310 00ee 07F1040E 		add	lr, r7, #4
 311              	.LVL43:
 312 00f2 3968     		ldr	r1, [r7]
 758:../utilities/fsl_str.c ****                     {
 313              		.loc 1 758 0
 314 00f4 5FD0     		beq	.L54
 315 00f6 56DC     		bgt	.L34
 764:../utilities/fsl_str.c ****                             break;
 316              		.loc 1 764 0
 317 00f8 622A     		cmp	r2, #98
 318 00fa 08BF     		it	eq
 319 00fc 0225     		moveq	r5, #2
 320              	.LVL44:
 321              	.L33:
 322              	.LBB22:
 323              	.LBB23:
 183:../utilities/fsl_str.c **** 
 324              		.loc 1 183 0
 325 00fe 0CAC     		add	r4, sp, #48
 326              	.LVL45:
 327 0100 0022     		movs	r2, #0
 328              	.LVL46:
 329 0102 04F8242D 		strb	r2, [r4, #-36]!
 233:../utilities/fsl_str.c ****         {
 330              		.loc 1 233 0
 331 0106 0029     		cmp	r1, #0
 332 0108 57D1     		bne	.L38
 235:../utilities/fsl_str.c ****             ++nlen;
 333              		.loc 1 235 0
 334 010a 3022     		movs	r2, #48
 335 010c 8DF80D20 		strb	r2, [sp, #13]
 336              	.LVL47:
 237:../utilities/fsl_str.c ****         }
 337              		.loc 1 237 0
 338 0110 0126     		movs	r6, #1
 339              	.LVL48:
 340              	.L39:
 341              	.LBE23:
 342              	.LBE22:
 774:../utilities/fsl_str.c **** #if PRINTF_ADVANCED_ENABLE
 343              		.loc 1 774 0
 344 0112 3444     		add	r4, r4, r6
 345              	.LVL49:
 756:../utilities/fsl_str.c ****                     }
 346              		.loc 1 756 0
 347 0114 7746     		mov	r7, lr
 348              	.LVL50:
 349              	.L31:
 791:../utilities/fsl_str.c **** #endif /* !PRINTF_ADVANCED_ENABLE */
 350              		.loc 1 791 0
 351 0116 9B1B     		subs	r3, r3, r6
 352              	.LVL51:
 353 0118 2022     		movs	r2, #32
 354 011a 4946     		mov	r1, r9
 355 011c 5046     		mov	r0, r10
 356 011e D847     		blx	fp
 357              	.LVL52:
 793:../utilities/fsl_str.c ****                 {
 358              		.loc 1 793 0
 359 0120 2CB1     		cbz	r4, .L11
 360 0122 A046     		mov	r8, r4
 361              	.LVL53:
 362              	.L43:
 363 0124 4446     		mov	r4, r8
 364              	.LVL54:
 795:../utilities/fsl_str.c ****                     {
 365              		.loc 1 795 0
 366 0126 18F90129 		ldrsb	r2, [r8], #-1
 367 012a 002A     		cmp	r2, #0
 368 012c 5CD1     		bne	.L44
 369              	.LVL55:
 370              	.L11:
 400:../utilities/fsl_str.c ****     {
 371              		.loc 1 400 0 discriminator 2
 372 012e 009B     		ldr	r3, [sp]
 373 0130 0133     		adds	r3, r3, #1
 374 0132 0093     		str	r3, [sp]
 375              	.LVL56:
 376 0134 B846     		mov	r8, r7
 377 0136 71E7     		b	.L8
 378              	.LVL57:
 379              	.L12:
 380 0138 07FB0313 		mla	r3, r7, r3, r1
 381              	.LVL58:
 457:../utilities/fsl_str.c ****             }
 382              		.loc 1 457 0
 383 013c 303B     		subs	r3, r3, #48
 384              	.LVL59:
 385 013e 0246     		mov	r2, r0
 386 0140 7AE7     		b	.L10
 387              	.LVL60:
 388              	.L19:
 389              	.LBB25:
 390              	.LBB12:
 192:../utilities/fsl_str.c ****         {
 391              		.loc 1 192 0
 392 0142 0120     		movs	r0, #1
 209:../utilities/fsl_str.c ****             c = a - (b * radix);
 393              		.loc 1 209 0
 394 0144 4FF00A0C 		mov	ip, #10
 395              	.LVL61:
 396              	.L23:
 397 0148 91FBFCFE 		sdiv	lr, r1, ip
 398              	.LVL62:
 399 014c 0CFB1E11 		mls	r1, ip, lr, r1
 400              	.LVL63:
 211:../utilities/fsl_str.c ****             {
 401              		.loc 1 211 0
 402 0150 0029     		cmp	r1, #0
 403              	.LVL64:
 214:../utilities/fsl_str.c ****             }
 404              		.loc 1 214 0
 405 0152 B4BF     		ite	lt
 406 0154 C1F13001 		rsblt	r1, r1, #48
 407              	.LVL65:
 219:../utilities/fsl_str.c ****             }
 408              		.loc 1 219 0
 409 0158 3031     		addge	r1, r1, #48
 410              	.LVL66:
 222:../utilities/fsl_str.c ****             ++nlen;
 411              		.loc 1 222 0
 412 015a 2154     		strb	r1, [r4, r0]
 198:../utilities/fsl_str.c ****         {
 413              		.loc 1 198 0
 414 015c 7146     		mov	r1, lr
 415              	.LVL67:
 223:../utilities/fsl_str.c ****         }
 416              		.loc 1 223 0
 417 015e 0646     		mov	r6, r0
 418              	.LVL68:
 419 0160 0130     		adds	r0, r0, #1
 420              	.LVL69:
 198:../utilities/fsl_str.c ****         {
 421              		.loc 1 198 0
 422 0162 0029     		cmp	r1, #0
 423 0164 F0D1     		bne	.L23
 424 0166 A1E7     		b	.L20
 425              	.LVL70:
 426              	.L51:
 427              	.LBE12:
 428              	.LBE25:
 429 0168 4746     		mov	r7, r8
 430 016a A0E7     		b	.L18
 431              	.LVL71:
 432              	.L52:
 415:../utilities/fsl_str.c **** 
 433              		.loc 1 415 0
 434 016c 0121     		movs	r1, #1
 435 016e A3E7     		b	.L73
 436              	.LVL72:
 437              	.L26:
 438 0170 0198     		ldr	r0, [sp, #4]
 439 0172 0028     		cmp	r0, #0
 440              	.LBB26:
 441              	.LBB19:
 233:../utilities/fsl_str.c ****         {
 442              		.loc 1 233 0
 443 0174 4FF00107 		mov	r7, #1
 255:../utilities/fsl_str.c ****             }
 444              		.loc 1 255 0
 445 0178 14BF     		ite	ne
 446 017a 4FF0370C 		movne	ip, #55
 447 017e 4FF0570C 		moveq	ip, #87
 448              	.LVL73:
 449              	.L30:
 245:../utilities/fsl_str.c ****             uc = ua - (ub * (uint32_t)radix);
 450              		.loc 1 245 0
 451 0182 4FEA111E 		lsr	lr, r1, #4
 452              	.LVL74:
 453 0186 01F00F01 		and	r1, r1, #15
 454              	.LVL75:
 249:../utilities/fsl_str.c ****             {
 455              		.loc 1 249 0
 456 018a 0929     		cmp	r1, #9
 251:../utilities/fsl_str.c ****             }
 457              		.loc 1 251 0
 458 018c 94BF     		ite	ls
 459 018e 3031     		addls	r1, r1, #48
 460              	.LVL76:
 255:../utilities/fsl_str.c ****             }
 461              		.loc 1 255 0
 462 0190 6144     		addhi	r1, r1, ip
 463              	.LVL77:
 258:../utilities/fsl_str.c ****             ++nlen;
 464              		.loc 1 258 0
 465 0192 E155     		strb	r1, [r4, r7]
 239:../utilities/fsl_str.c ****         {
 466              		.loc 1 239 0
 467 0194 7146     		mov	r1, lr
 468              	.LVL78:
 259:../utilities/fsl_str.c ****         }
 469              		.loc 1 259 0
 470 0196 3E46     		mov	r6, r7
 471              	.LVL79:
 472 0198 0137     		adds	r7, r7, #1
 473              	.LVL80:
 239:../utilities/fsl_str.c ****         {
 474              		.loc 1 239 0
 475 019a 0029     		cmp	r1, #0
 476 019c F1D1     		bne	.L30
 477 019e 99E7     		b	.L27
 478              	.LVL81:
 479              	.L53:
 480              	.LBE19:
 481              	.LBE26:
 415:../utilities/fsl_str.c **** 
 482              		.loc 1 415 0
 483 01a0 0121     		movs	r1, #1
 484 01a2 0191     		str	r1, [sp, #4]
 485 01a4 98E7     		b	.L25
 486              	.LVL82:
 487              	.L34:
 758:../utilities/fsl_str.c ****                     {
 488              		.loc 1 758 0
 489 01a6 702A     		cmp	r2, #112
 490 01a8 03D0     		beq	.L36
 770:../utilities/fsl_str.c ****                             break;
 491              		.loc 1 770 0
 492 01aa 752A     		cmp	r2, #117
 493 01ac 08BF     		it	eq
 494 01ae 0A25     		moveq	r5, #10
 495              	.LVL83:
 496 01b0 A5E7     		b	.L33
 497              	.LVL84:
 498              	.L36:
 767:../utilities/fsl_str.c ****                             break;
 499              		.loc 1 767 0
 500 01b2 1025     		movs	r5, #16
 768:../utilities/fsl_str.c ****                         case 'u':
 501              		.loc 1 768 0
 502 01b4 A3E7     		b	.L33
 503              	.LVL85:
 504              	.L54:
 761:../utilities/fsl_str.c ****                             break;
 505              		.loc 1 761 0
 506 01b6 0825     		movs	r5, #8
 507              	.LVL86:
 508 01b8 A1E7     		b	.L33
 509              	.LVL87:
 510              	.L38:
 511 01ba 019A     		ldr	r2, [sp, #4]
 512 01bc 002A     		cmp	r2, #0
 513              	.LBB27:
 514              	.LBB24:
 255:../utilities/fsl_str.c ****             }
 515              		.loc 1 255 0
 516 01be 18BF     		it	ne
 517 01c0 3727     		movne	r7, #55
 233:../utilities/fsl_str.c ****         {
 518              		.loc 1 233 0
 519 01c2 4FF00102 		mov	r2, #1
 255:../utilities/fsl_str.c ****             }
 520              		.loc 1 255 0
 521 01c6 08BF     		it	eq
 522 01c8 5727     		moveq	r7, #87
 523              	.LVL88:
 524              	.L42:
 245:../utilities/fsl_str.c ****             uc = ua - (ub * (uint32_t)radix);
 525              		.loc 1 245 0
 526 01ca B1FBF5F0 		udiv	r0, r1, r5
 527              	.LVL89:
 528 01ce 05FB1011 		mls	r1, r5, r0, r1
 529              	.LVL90:
 249:../utilities/fsl_str.c ****             {
 530              		.loc 1 249 0
 531 01d2 0929     		cmp	r1, #9
 251:../utilities/fsl_str.c ****             }
 532              		.loc 1 251 0
 533 01d4 94BF     		ite	ls
 534 01d6 3031     		addls	r1, r1, #48
 535              	.LVL91:
 255:../utilities/fsl_str.c ****             }
 536              		.loc 1 255 0
 537 01d8 C919     		addhi	r1, r1, r7
 538              	.LVL92:
 258:../utilities/fsl_str.c ****             ++nlen;
 539              		.loc 1 258 0
 540 01da A154     		strb	r1, [r4, r2]
 259:../utilities/fsl_str.c ****         }
 541              		.loc 1 259 0
 542 01dc 1646     		mov	r6, r2
 543              	.LVL93:
 239:../utilities/fsl_str.c ****         {
 544              		.loc 1 239 0
 545 01de 0146     		mov	r1, r0
 546              	.LVL94:
 547 01e0 0132     		adds	r2, r2, #1
 548              	.LVL95:
 549 01e2 0028     		cmp	r0, #0
 550 01e4 F1D1     		bne	.L42
 551 01e6 94E7     		b	.L39
 552              	.LVL96:
 553              	.L44:
 554              	.LBE24:
 555              	.LBE27:
 797:../utilities/fsl_str.c ****                     }
 556              		.loc 1 797 0
 557 01e8 0123     		movs	r3, #1
 558 01ea 4946     		mov	r1, r9
 559 01ec 5046     		mov	r0, r10
 560 01ee D847     		blx	fp
 561              	.LVL97:
 562 01f0 98E7     		b	.L43
 563              	.LVL98:
 564              	.L17:
 807:../utilities/fsl_str.c ****             {
 565              		.loc 1 807 0
 566 01f2 632A     		cmp	r2, #99
 567 01f4 08D1     		bne	.L45
 810:../utilities/fsl_str.c ****             }
 568              		.loc 1 810 0
 569 01f6 0123     		movs	r3, #1
 570              	.LVL99:
 571 01f8 98F90020 		ldrsb	r2, [r8]
 572              	.LVL100:
 573 01fc 4946     		mov	r1, r9
 574 01fe 5046     		mov	r0, r10
 809:../utilities/fsl_str.c ****                 cb(buf, &count, cval, 1);
 575              		.loc 1 809 0
 576 0200 08F10407 		add	r7, r8, #4
 577              	.LVL101:
 810:../utilities/fsl_str.c ****             }
 578              		.loc 1 810 0
 579 0204 D847     		blx	fp
 580              	.LVL102:
 581 0206 92E7     		b	.L11
 582              	.LVL103:
 583              	.L45:
 812:../utilities/fsl_str.c ****             {
 584              		.loc 1 812 0
 585 0208 732A     		cmp	r2, #115
 586 020a 1DD1     		bne	.L46
 814:../utilities/fsl_str.c ****                 if (sval)
 587              		.loc 1 814 0
 588 020c 08F10407 		add	r7, r8, #4
 589              	.LVL104:
 590 0210 D8F80080 		ldr	r8, [r8]
 591 0214 0193     		str	r3, [sp, #4]
 815:../utilities/fsl_str.c ****                 {
 592              		.loc 1 815 0
 593 0216 B8F1000F 		cmp	r8, #0
 594 021a 88D0     		beq	.L11
 827:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 595              		.loc 1 827 0
 596 021c 4046     		mov	r0, r8
 597 021e FFF7FEFF 		bl	strlen
 598              	.LVL105:
 833:../utilities/fsl_str.c ****                     }
 599              		.loc 1 833 0
 600 0222 019B     		ldr	r3, [sp, #4]
 827:../utilities/fsl_str.c **** #endif /* PRINTF_ADVANCED_ENABLE */
 601              		.loc 1 827 0
 602 0224 0646     		mov	r6, r0
 603              	.LVL106:
 833:../utilities/fsl_str.c ****                     }
 604              		.loc 1 833 0
 605 0226 1B1A     		subs	r3, r3, r0
 606 0228 2022     		movs	r2, #32
 607 022a 4946     		mov	r1, r9
 608 022c 5046     		mov	r0, r10
 609              	.LVL107:
 610 022e D847     		blx	fp
 611              	.LVL108:
 612 0230 08F1FF38 		add	r8, r8, #-1
 613              	.L47:
 614              	.LVL109:
 850:../utilities/fsl_str.c ****                         {
 615              		.loc 1 850 0
 616 0234 18F9012F 		ldrsb	r2, [r8, #1]!
 617              	.LVL110:
 618 0238 002A     		cmp	r2, #0
 619 023a 3FF478AF 		beq	.L11
 620              	.LVL111:
 852:../utilities/fsl_str.c ****                         }
 621              		.loc 1 852 0
 622 023e 0123     		movs	r3, #1
 623 0240 4946     		mov	r1, r9
 624 0242 5046     		mov	r0, r10
 625 0244 D847     		blx	fp
 626              	.LVL112:
 627 0246 F5E7     		b	.L47
 628              	.LVL113:
 629              	.L46:
 868:../utilities/fsl_str.c ****             }
 630              		.loc 1 868 0
 631 0248 0123     		movs	r3, #1
 632 024a 4946     		mov	r1, r9
 633              	.LVL114:
 634 024c 5046     		mov	r0, r10
 635 024e D847     		blx	fp
 636              	.LVL115:
 637 0250 4746     		mov	r7, r8
 638 0252 6CE7     		b	.L11
 639              	.L75:
 640              		.align	2
 641              	.L74:
 642 0254 81600800 		.word	548993
 643 0258 01600800 		.word	548865
 644              		.cfi_endproc
 645              	.LFE149:
 647              		.section	.text.StrFormatScanf,"ax",%progbits
 648              		.align	1
 649              		.global	StrFormatScanf
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	StrFormatScanf:
 656              	.LFB150:
 875:../utilities/fsl_str.c **** 
 876:../utilities/fsl_str.c **** int StrFormatScanf(const char *line_ptr, char *format, va_list args_ptr)
 877:../utilities/fsl_str.c **** {
 657              		.loc 1 877 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 8
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              	.LVL116:
 662 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 663              		.cfi_def_cfa_offset 40
 664              		.cfi_offset 4, -28
 665              		.cfi_offset 5, -24
 666              		.cfi_offset 6, -20
 667              		.cfi_offset 7, -16
 668              		.cfi_offset 8, -12
 669              		.cfi_offset 9, -8
 670              		.cfi_offset 14, -4
 671              	.LVL117:
 878:../utilities/fsl_str.c ****     uint8_t base;
 879:../utilities/fsl_str.c ****     int8_t neg;
 880:../utilities/fsl_str.c ****     /* Identifier for the format string. */
 881:../utilities/fsl_str.c ****     char *c = format;
 882:../utilities/fsl_str.c ****     char temp;
 883:../utilities/fsl_str.c ****     char *buf;
 884:../utilities/fsl_str.c ****     /* Flag telling the conversion specification. */
 885:../utilities/fsl_str.c ****     uint32_t flag = 0;
 886:../utilities/fsl_str.c ****     /* Filed width for the matching input streams. */
 887:../utilities/fsl_str.c ****     uint32_t field_width;
 888:../utilities/fsl_str.c ****     /* How many arguments are assigned except the suppress. */
 889:../utilities/fsl_str.c ****     uint32_t nassigned = 0;
 890:../utilities/fsl_str.c ****     /* How many characters are read from the input streams. */
 891:../utilities/fsl_str.c ****     uint32_t n_decode = 0;
 892:../utilities/fsl_str.c **** 
 893:../utilities/fsl_str.c ****     int32_t val;
 894:../utilities/fsl_str.c **** 
 895:../utilities/fsl_str.c ****     const char *s;
 896:../utilities/fsl_str.c ****     /* Identifier for the input string. */
 897:../utilities/fsl_str.c ****     const char *p = line_ptr;
 898:../utilities/fsl_str.c **** 
 899:../utilities/fsl_str.c ****     /* Return EOF error before any conversion. */
 900:../utilities/fsl_str.c ****     if (*p == '\0')
 672              		.loc 1 900 0
 673 0004 90F90030 		ldrsb	r3, [r0]
 881:../utilities/fsl_str.c ****     char temp;
 674              		.loc 1 881 0
 675 0008 0091     		str	r1, [sp]
 676              	.LVL118:
 877:../utilities/fsl_str.c ****     uint8_t base;
 677              		.loc 1 877 0
 678 000a 1746     		mov	r7, r2
 679              	.LVL119:
 897:../utilities/fsl_str.c **** 
 680              		.loc 1 897 0
 681 000c 0190     		str	r0, [sp, #4]
 682              		.loc 1 900 0
 683 000e 002B     		cmp	r3, #0
 684 0010 00F03481 		beq	.L137
 685 0014 0026     		movs	r6, #0
 901:../utilities/fsl_str.c ****     {
 902:../utilities/fsl_str.c ****         return -1;
 903:../utilities/fsl_str.c ****     }
 904:../utilities/fsl_str.c **** 
 905:../utilities/fsl_str.c ****     /* Decode directives. */
 906:../utilities/fsl_str.c ****     while ((*c) && (*p))
 907:../utilities/fsl_str.c ****     {
 908:../utilities/fsl_str.c ****         /* Ignore all white-spaces in the format strings. */
 909:../utilities/fsl_str.c ****         if (ScanIgnoreWhiteSpace((const char **)&c))
 910:../utilities/fsl_str.c ****         {
 911:../utilities/fsl_str.c ****             n_decode += ScanIgnoreWhiteSpace(&p);
 912:../utilities/fsl_str.c ****         }
 913:../utilities/fsl_str.c ****         else if ((*c != '%') || ((*c == '%') && (*(c + 1) == '%')))
 914:../utilities/fsl_str.c ****         {
 915:../utilities/fsl_str.c ****             /* Ordinary characters. */
 916:../utilities/fsl_str.c ****             c++;
 917:../utilities/fsl_str.c ****             if (*p == *c)
 918:../utilities/fsl_str.c ****             {
 919:../utilities/fsl_str.c ****                 n_decode++;
 920:../utilities/fsl_str.c ****                 p++;
 921:../utilities/fsl_str.c ****                 c++;
 922:../utilities/fsl_str.c ****             }
 923:../utilities/fsl_str.c ****             else
 924:../utilities/fsl_str.c ****             {
 925:../utilities/fsl_str.c ****                 /* Match failure. Misalignment with C99, the unmatched characters need to be pushed
 926:../utilities/fsl_str.c ****                  * However, it is deserted now. */
 927:../utilities/fsl_str.c ****                 break;
 928:../utilities/fsl_str.c ****             }
 929:../utilities/fsl_str.c ****         }
 930:../utilities/fsl_str.c ****         else
 931:../utilities/fsl_str.c ****         {
 932:../utilities/fsl_str.c ****             /* convernsion specification */
 933:../utilities/fsl_str.c ****             c++;
 934:../utilities/fsl_str.c ****             /* Reset. */
 935:../utilities/fsl_str.c ****             flag = 0;
 936:../utilities/fsl_str.c ****             field_width = 0;
 937:../utilities/fsl_str.c ****             base = 0;
 938:../utilities/fsl_str.c **** 
 939:../utilities/fsl_str.c ****             /* Loop to get full conversion specification. */
 940:../utilities/fsl_str.c ****             while ((*c) && (!(flag & kSCANF_DestMask)))
 941:../utilities/fsl_str.c ****             {
 942:../utilities/fsl_str.c ****                 switch (*c)
 943:../utilities/fsl_str.c ****                 {
 944:../utilities/fsl_str.c **** #if SCANF_ADVANCED_ENABLE
 945:../utilities/fsl_str.c ****                     case '*':
 946:../utilities/fsl_str.c ****                         if (flag & kSCANF_Suppress)
 947:../utilities/fsl_str.c ****                         {
 948:../utilities/fsl_str.c ****                             /* Match failure. */
 949:../utilities/fsl_str.c ****                             return nassigned;
 950:../utilities/fsl_str.c ****                         }
 951:../utilities/fsl_str.c ****                         flag |= kSCANF_Suppress;
 952:../utilities/fsl_str.c ****                         c++;
 953:../utilities/fsl_str.c ****                         break;
 954:../utilities/fsl_str.c ****                     case 'h':
 955:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthMask)
 956:../utilities/fsl_str.c ****                         {
 957:../utilities/fsl_str.c ****                             /* Match failure. */
 958:../utilities/fsl_str.c ****                             return nassigned;
 959:../utilities/fsl_str.c ****                         }
 960:../utilities/fsl_str.c **** 
 961:../utilities/fsl_str.c ****                         if (c[1] == 'h')
 962:../utilities/fsl_str.c ****                         {
 963:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthChar;
 964:../utilities/fsl_str.c ****                             c++;
 965:../utilities/fsl_str.c ****                         }
 966:../utilities/fsl_str.c ****                         else
 967:../utilities/fsl_str.c ****                         {
 968:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthShortInt;
 969:../utilities/fsl_str.c ****                         }
 970:../utilities/fsl_str.c ****                         c++;
 971:../utilities/fsl_str.c ****                         break;
 972:../utilities/fsl_str.c ****                     case 'l':
 973:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthMask)
 974:../utilities/fsl_str.c ****                         {
 975:../utilities/fsl_str.c ****                             /* Match failure. */
 976:../utilities/fsl_str.c ****                             return nassigned;
 977:../utilities/fsl_str.c ****                         }
 978:../utilities/fsl_str.c **** 
 979:../utilities/fsl_str.c ****                         if (c[1] == 'l')
 980:../utilities/fsl_str.c ****                         {
 981:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthLongLongInt;
 982:../utilities/fsl_str.c ****                             c++;
 983:../utilities/fsl_str.c ****                         }
 984:../utilities/fsl_str.c ****                         else
 985:../utilities/fsl_str.c ****                         {
 986:../utilities/fsl_str.c ****                             flag |= kSCANF_LengthLongInt;
 987:../utilities/fsl_str.c ****                         }
 988:../utilities/fsl_str.c ****                         c++;
 989:../utilities/fsl_str.c ****                         break;
 990:../utilities/fsl_str.c **** #endif /* SCANF_ADVANCED_ENABLE */
 991:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
 992:../utilities/fsl_str.c ****                     case 'L':
 993:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthMask)
 994:../utilities/fsl_str.c ****                         {
 995:../utilities/fsl_str.c ****                             /* Match failure. */
 996:../utilities/fsl_str.c ****                             return nassigned;
 997:../utilities/fsl_str.c ****                         }
 998:../utilities/fsl_str.c ****                         flag |= kSCANF_LengthLongLongDouble;
 999:../utilities/fsl_str.c ****                         c++;
1000:../utilities/fsl_str.c ****                         break;
1001:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
1002:../utilities/fsl_str.c ****                     case '0':
1003:../utilities/fsl_str.c ****                     case '1':
1004:../utilities/fsl_str.c ****                     case '2':
1005:../utilities/fsl_str.c ****                     case '3':
1006:../utilities/fsl_str.c ****                     case '4':
1007:../utilities/fsl_str.c ****                     case '5':
1008:../utilities/fsl_str.c ****                     case '6':
1009:../utilities/fsl_str.c ****                     case '7':
1010:../utilities/fsl_str.c ****                     case '8':
1011:../utilities/fsl_str.c ****                     case '9':
1012:../utilities/fsl_str.c ****                         if (field_width)
1013:../utilities/fsl_str.c ****                         {
1014:../utilities/fsl_str.c ****                             /* Match failure. */
1015:../utilities/fsl_str.c ****                             return nassigned;
1016:../utilities/fsl_str.c ****                         }
1017:../utilities/fsl_str.c ****                         do
1018:../utilities/fsl_str.c ****                         {
1019:../utilities/fsl_str.c ****                             field_width = field_width * 10 + *c - '0';
1020:../utilities/fsl_str.c ****                             c++;
1021:../utilities/fsl_str.c ****                         } while ((*c >= '0') && (*c <= '9'));
1022:../utilities/fsl_str.c ****                         break;
1023:../utilities/fsl_str.c ****                     case 'd':
1024:../utilities/fsl_str.c ****                         base = 10;
1025:../utilities/fsl_str.c ****                         flag |= kSCANF_TypeSinged;
1026:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 686              		.loc 1 1026 0
 687 0016 42F22005 		movw	r5, #8224
 688              	.LVL120:
 689              	.L78:
 906:../utilities/fsl_str.c ****     {
 690              		.loc 1 906 0
 691 001a 009B     		ldr	r3, [sp]
 692 001c 93F90030 		ldrsb	r3, [r3]
 693 0020 002B     		cmp	r3, #0
 694 0022 00F09D80 		beq	.L76
 906:../utilities/fsl_str.c ****     {
 695              		.loc 1 906 0 is_stmt 0 discriminator 1
 696 0026 019B     		ldr	r3, [sp, #4]
 697 0028 93F90030 		ldrsb	r3, [r3]
 698 002c 002B     		cmp	r3, #0
 699 002e 00F09780 		beq	.L76
 909:../utilities/fsl_str.c ****         {
 700              		.loc 1 909 0 is_stmt 1
 701 0032 6846     		mov	r0, sp
 702 0034 FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 703              	.LVL121:
 704 0038 0446     		mov	r4, r0
 705 003a 28B1     		cbz	r0, .L79
 911:../utilities/fsl_str.c ****         }
 706              		.loc 1 911 0
 707 003c 01A8     		add	r0, sp, #4
 708 003e FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 709              	.LVL122:
 710              	.L166:
 917:../utilities/fsl_str.c ****             {
 711              		.loc 1 917 0
 712 0042 3B46     		mov	r3, r7
 713              	.LVL123:
 714              	.L80:
 715 0044 1F46     		mov	r7, r3
 716 0046 E8E7     		b	.L78
 717              	.LVL124:
 718              	.L79:
 913:../utilities/fsl_str.c ****         {
 719              		.loc 1 913 0
 720 0048 009B     		ldr	r3, [sp]
 721 004a 1A46     		mov	r2, r3
 722 004c 12F9011B 		ldrsb	r1, [r2], #1
 723 0050 2529     		cmp	r1, #37
 724 0052 03D1     		bne	.L81
 913:../utilities/fsl_str.c ****         {
 725              		.loc 1 913 0 is_stmt 0 discriminator 1
 726 0054 93F90110 		ldrsb	r1, [r3, #1]
 727 0058 2529     		cmp	r1, #37
 728 005a 0CD1     		bne	.L82
 729              	.L81:
 916:../utilities/fsl_str.c ****             if (*p == *c)
 730              		.loc 1 916 0 is_stmt 1
 731 005c 0092     		str	r2, [sp]
 917:../utilities/fsl_str.c ****             {
 732              		.loc 1 917 0
 733 005e 019A     		ldr	r2, [sp, #4]
 734 0060 93F90110 		ldrsb	r1, [r3, #1]
 735 0064 92F90000 		ldrsb	r0, [r2]
 736 0068 8842     		cmp	r0, r1
 737 006a 79D1     		bne	.L76
 920:../utilities/fsl_str.c ****                 c++;
 738              		.loc 1 920 0
 739 006c 0132     		adds	r2, r2, #1
 921:../utilities/fsl_str.c ****             }
 740              		.loc 1 921 0
 741 006e 0233     		adds	r3, r3, #2
 920:../utilities/fsl_str.c ****                 c++;
 742              		.loc 1 920 0
 743 0070 0192     		str	r2, [sp, #4]
 921:../utilities/fsl_str.c ****             }
 744              		.loc 1 921 0
 745 0072 0093     		str	r3, [sp]
 746 0074 E5E7     		b	.L166
 747              	.L82:
 933:../utilities/fsl_str.c ****             /* Reset. */
 748              		.loc 1 933 0
 749 0076 0092     		str	r2, [sp]
 750              	.LVL125:
 935:../utilities/fsl_str.c ****             field_width = 0;
 751              		.loc 1 935 0
 752 0078 8046     		mov	r8, r0
 937:../utilities/fsl_str.c **** 
 753              		.loc 1 937 0
 754 007a 8146     		mov	r9, r0
1024:../utilities/fsl_str.c ****                         flag |= kSCANF_TypeSinged;
 755              		.loc 1 1024 0
 756 007c 0A22     		movs	r2, #10
 757              	.LVL126:
 758              	.L84:
 940:../utilities/fsl_str.c ****             {
 759              		.loc 1 940 0
 760 007e 009B     		ldr	r3, [sp]
 761 0080 93F90010 		ldrsb	r1, [r3]
 762 0084 08F07C00 		and	r0, r8, #124
 763 0088 0029     		cmp	r1, #0
 764 008a 5ED1     		bne	.L101
 765              	.L105:
1027:../utilities/fsl_str.c ****                         c++;
1028:../utilities/fsl_str.c ****                         break;
1029:../utilities/fsl_str.c ****                     case 'u':
1030:../utilities/fsl_str.c ****                         base = 10;
1031:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
1032:../utilities/fsl_str.c ****                         c++;
1033:../utilities/fsl_str.c ****                         break;
1034:../utilities/fsl_str.c ****                     case 'o':
1035:../utilities/fsl_str.c ****                         base = 8;
1036:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
1037:../utilities/fsl_str.c ****                         c++;
1038:../utilities/fsl_str.c ****                         break;
1039:../utilities/fsl_str.c ****                     case 'x':
1040:../utilities/fsl_str.c ****                     case 'X':
1041:../utilities/fsl_str.c ****                         base = 16;
1042:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
1043:../utilities/fsl_str.c ****                         c++;
1044:../utilities/fsl_str.c ****                         break;
1045:../utilities/fsl_str.c ****                     case 'i':
1046:../utilities/fsl_str.c ****                         base = 0;
1047:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
1048:../utilities/fsl_str.c ****                         c++;
1049:../utilities/fsl_str.c ****                         break;
1050:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
1051:../utilities/fsl_str.c ****                     case 'a':
1052:../utilities/fsl_str.c ****                     case 'A':
1053:../utilities/fsl_str.c ****                     case 'e':
1054:../utilities/fsl_str.c ****                     case 'E':
1055:../utilities/fsl_str.c ****                     case 'f':
1056:../utilities/fsl_str.c ****                     case 'F':
1057:../utilities/fsl_str.c ****                     case 'g':
1058:../utilities/fsl_str.c ****                     case 'G':
1059:../utilities/fsl_str.c ****                         flag |= kSCANF_DestFloat;
1060:../utilities/fsl_str.c ****                         c++;
1061:../utilities/fsl_str.c ****                         break;
1062:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
1063:../utilities/fsl_str.c ****                     case 'c':
1064:../utilities/fsl_str.c ****                         flag |= kSCANF_DestChar;
1065:../utilities/fsl_str.c ****                         if (!field_width)
1066:../utilities/fsl_str.c ****                         {
1067:../utilities/fsl_str.c ****                             field_width = 1;
1068:../utilities/fsl_str.c ****                         }
1069:../utilities/fsl_str.c ****                         c++;
1070:../utilities/fsl_str.c ****                         break;
1071:../utilities/fsl_str.c ****                     case 's':
1072:../utilities/fsl_str.c ****                         flag |= kSCANF_DestString;
1073:../utilities/fsl_str.c ****                         c++;
1074:../utilities/fsl_str.c ****                         break;
1075:../utilities/fsl_str.c ****                     default:
1076:../utilities/fsl_str.c ****                         return nassigned;
1077:../utilities/fsl_str.c ****                 }
1078:../utilities/fsl_str.c ****             }
1079:../utilities/fsl_str.c **** 
1080:../utilities/fsl_str.c ****             if (!(flag & kSCANF_DestMask))
 766              		.loc 1 1080 0
 767 008c 0028     		cmp	r0, #0
 768 008e 67D0     		beq	.L76
1081:../utilities/fsl_str.c ****             {
1082:../utilities/fsl_str.c ****                 /* Format strings are exhausted. */
1083:../utilities/fsl_str.c ****                 return nassigned;
1084:../utilities/fsl_str.c ****             }
1085:../utilities/fsl_str.c **** 
1086:../utilities/fsl_str.c ****             if (!field_width)
1087:../utilities/fsl_str.c ****             {
1088:../utilities/fsl_str.c ****                 /* Large than length of a line. */
1089:../utilities/fsl_str.c ****                 field_width = 99;
 769              		.loc 1 1089 0
 770 0090 002C     		cmp	r4, #0
 771 0092 08BF     		it	eq
 772 0094 6324     		moveq	r4, #99
1090:../utilities/fsl_str.c ****             }
1091:../utilities/fsl_str.c **** 
1092:../utilities/fsl_str.c ****             /* Matching strings in input streams and assign to argument. */
1093:../utilities/fsl_str.c ****             switch (flag & kSCANF_DestMask)
 773              		.loc 1 1093 0
 774 0096 0828     		cmp	r0, #8
 775 0098 6DD0     		beq	.L108
 776 009a 2028     		cmp	r0, #32
 777 009c 00F08C80 		beq	.L109
 778 00a0 0428     		cmp	r0, #4
 779 00a2 5DD1     		bne	.L76
1094:../utilities/fsl_str.c ****             {
1095:../utilities/fsl_str.c ****                 case kSCANF_DestChar:
1096:../utilities/fsl_str.c ****                     s = (const char *)p;
1097:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
 780              		.loc 1 1097 0
 781 00a4 3968     		ldr	r1, [r7]
1096:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
 782              		.loc 1 1096 0
 783 00a6 0198     		ldr	r0, [sp, #4]
 784              	.LVL127:
 785              		.loc 1 1097 0
 786 00a8 3B1D     		adds	r3, r7, #4
 787              	.LVL128:
 788 00aa 0C44     		add	r4, r4, r1
 789              	.L111:
 790              	.LVL129:
1098:../utilities/fsl_str.c ****                     while ((field_width--) && (*p))
 791              		.loc 1 1098 0
 792 00ac A142     		cmp	r1, r4
 793 00ae 019A     		ldr	r2, [sp, #4]
 794 00b0 03D0     		beq	.L112
 795              		.loc 1 1098 0 is_stmt 0 discriminator 1
 796 00b2 92F90070 		ldrsb	r7, [r2]
 797 00b6 002F     		cmp	r7, #0
 798 00b8 56D1     		bne	.L113
 799              	.L112:
1099:../utilities/fsl_str.c ****                     {
1100:../utilities/fsl_str.c ****                         if (!(flag & kSCANF_Suppress))
1101:../utilities/fsl_str.c ****                         {
1102:../utilities/fsl_str.c ****                             *buf++ = *p++;
1103:../utilities/fsl_str.c ****                         }
1104:../utilities/fsl_str.c ****                         else
1105:../utilities/fsl_str.c ****                         {
1106:../utilities/fsl_str.c ****                             p++;
1107:../utilities/fsl_str.c ****                         }
1108:../utilities/fsl_str.c ****                         n_decode++;
1109:../utilities/fsl_str.c ****                     }
1110:../utilities/fsl_str.c **** 
1111:../utilities/fsl_str.c ****                     if ((!(flag & kSCANF_Suppress)) && (s != p))
 800              		.loc 1 1111 0 is_stmt 1 discriminator 1
 801 00ba 9042     		cmp	r0, r2
 802 00bc C2D0     		beq	.L80
 803              	.LVL130:
 804              	.L165:
1112:../utilities/fsl_str.c ****                     {
1113:../utilities/fsl_str.c ****                         nassigned++;
1114:../utilities/fsl_str.c ****                     }
1115:../utilities/fsl_str.c ****                     break;
1116:../utilities/fsl_str.c ****                 case kSCANF_DestString:
1117:../utilities/fsl_str.c ****                     n_decode += ScanIgnoreWhiteSpace(&p);
1118:../utilities/fsl_str.c ****                     s = p;
1119:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
1120:../utilities/fsl_str.c ****                     while ((field_width--) && (*p != '\0') && (*p != ' ') && (*p != '\t') && (*p !=
1121:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
1122:../utilities/fsl_str.c ****                     {
1123:../utilities/fsl_str.c ****                         if (flag & kSCANF_Suppress)
1124:../utilities/fsl_str.c ****                         {
1125:../utilities/fsl_str.c ****                             p++;
1126:../utilities/fsl_str.c ****                         }
1127:../utilities/fsl_str.c ****                         else
1128:../utilities/fsl_str.c ****                         {
1129:../utilities/fsl_str.c ****                             *buf++ = *p++;
1130:../utilities/fsl_str.c ****                         }
1131:../utilities/fsl_str.c ****                         n_decode++;
1132:../utilities/fsl_str.c ****                     }
1133:../utilities/fsl_str.c **** 
1134:../utilities/fsl_str.c ****                     if ((!(flag & kSCANF_Suppress)) && (s != p))
1135:../utilities/fsl_str.c ****                     {
1136:../utilities/fsl_str.c ****                         /* Add NULL to end of string. */
1137:../utilities/fsl_str.c ****                         *buf = '\0';
1138:../utilities/fsl_str.c ****                         nassigned++;
1139:../utilities/fsl_str.c ****                     }
1140:../utilities/fsl_str.c ****                     break;
1141:../utilities/fsl_str.c ****                 case kSCANF_DestInt:
1142:../utilities/fsl_str.c ****                     n_decode += ScanIgnoreWhiteSpace(&p);
1143:../utilities/fsl_str.c ****                     s = p;
1144:../utilities/fsl_str.c ****                     val = 0;
1145:../utilities/fsl_str.c ****                     if ((base == 0) || (base == 16))
1146:../utilities/fsl_str.c ****                     {
1147:../utilities/fsl_str.c ****                         if ((s[0] == '0') && ((s[1] == 'x') || (s[1] == 'X')))
1148:../utilities/fsl_str.c ****                         {
1149:../utilities/fsl_str.c ****                             base = 16;
1150:../utilities/fsl_str.c ****                             if (field_width >= 1)
1151:../utilities/fsl_str.c ****                             {
1152:../utilities/fsl_str.c ****                                 p += 2;
1153:../utilities/fsl_str.c ****                                 n_decode += 2;
1154:../utilities/fsl_str.c ****                                 field_width -= 2;
1155:../utilities/fsl_str.c ****                             }
1156:../utilities/fsl_str.c ****                         }
1157:../utilities/fsl_str.c ****                     }
1158:../utilities/fsl_str.c **** 
1159:../utilities/fsl_str.c ****                     if (base == 0)
1160:../utilities/fsl_str.c ****                     {
1161:../utilities/fsl_str.c ****                         if (s[0] == '0')
1162:../utilities/fsl_str.c ****                         {
1163:../utilities/fsl_str.c ****                             base = 8;
1164:../utilities/fsl_str.c ****                         }
1165:../utilities/fsl_str.c ****                         else
1166:../utilities/fsl_str.c ****                         {
1167:../utilities/fsl_str.c ****                             base = 10;
1168:../utilities/fsl_str.c ****                         }
1169:../utilities/fsl_str.c ****                     }
1170:../utilities/fsl_str.c **** 
1171:../utilities/fsl_str.c ****                     neg = 1;
1172:../utilities/fsl_str.c ****                     switch (*p)
1173:../utilities/fsl_str.c ****                     {
1174:../utilities/fsl_str.c ****                         case '-':
1175:../utilities/fsl_str.c ****                             neg = -1;
1176:../utilities/fsl_str.c ****                             n_decode++;
1177:../utilities/fsl_str.c ****                             p++;
1178:../utilities/fsl_str.c ****                             field_width--;
1179:../utilities/fsl_str.c ****                             break;
1180:../utilities/fsl_str.c ****                         case '+':
1181:../utilities/fsl_str.c ****                             neg = 1;
1182:../utilities/fsl_str.c ****                             n_decode++;
1183:../utilities/fsl_str.c ****                             p++;
1184:../utilities/fsl_str.c ****                             field_width--;
1185:../utilities/fsl_str.c ****                             break;
1186:../utilities/fsl_str.c ****                         default:
1187:../utilities/fsl_str.c ****                             break;
1188:../utilities/fsl_str.c ****                     }
1189:../utilities/fsl_str.c **** 
1190:../utilities/fsl_str.c ****                     while ((*p) && (field_width--))
1191:../utilities/fsl_str.c ****                     {
1192:../utilities/fsl_str.c ****                         if ((*p <= '9') && (*p >= '0'))
1193:../utilities/fsl_str.c ****                         {
1194:../utilities/fsl_str.c ****                             temp = *p - '0';
1195:../utilities/fsl_str.c ****                         }
1196:../utilities/fsl_str.c ****                         else if ((*p <= 'f') && (*p >= 'a'))
1197:../utilities/fsl_str.c ****                         {
1198:../utilities/fsl_str.c ****                             temp = *p - 'a' + 10;
1199:../utilities/fsl_str.c ****                         }
1200:../utilities/fsl_str.c ****                         else if ((*p <= 'F') && (*p >= 'A'))
1201:../utilities/fsl_str.c ****                         {
1202:../utilities/fsl_str.c ****                             temp = *p - 'A' + 10;
1203:../utilities/fsl_str.c ****                         }
1204:../utilities/fsl_str.c ****                         else
1205:../utilities/fsl_str.c ****                         {
1206:../utilities/fsl_str.c ****                             temp = base;
1207:../utilities/fsl_str.c ****                         }
1208:../utilities/fsl_str.c **** 
1209:../utilities/fsl_str.c ****                         if (temp >= base)
1210:../utilities/fsl_str.c ****                         {
1211:../utilities/fsl_str.c ****                             break;
1212:../utilities/fsl_str.c ****                         }
1213:../utilities/fsl_str.c ****                         else
1214:../utilities/fsl_str.c ****                         {
1215:../utilities/fsl_str.c ****                             val = base * val + temp;
1216:../utilities/fsl_str.c ****                         }
1217:../utilities/fsl_str.c ****                         p++;
1218:../utilities/fsl_str.c ****                         n_decode++;
1219:../utilities/fsl_str.c ****                     }
1220:../utilities/fsl_str.c ****                     val *= neg;
1221:../utilities/fsl_str.c ****                     if (!(flag & kSCANF_Suppress))
1222:../utilities/fsl_str.c ****                     {
1223:../utilities/fsl_str.c **** #if SCANF_ADVANCED_ENABLE
1224:../utilities/fsl_str.c ****                         switch (flag & kSCANF_LengthMask)
1225:../utilities/fsl_str.c ****                         {
1226:../utilities/fsl_str.c ****                             case kSCANF_LengthChar:
1227:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1228:../utilities/fsl_str.c ****                                 {
1229:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed char *) = (signed char)val;
1230:../utilities/fsl_str.c ****                                 }
1231:../utilities/fsl_str.c ****                                 else
1232:../utilities/fsl_str.c ****                                 {
1233:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned char *) = (unsigned char)val;
1234:../utilities/fsl_str.c ****                                 }
1235:../utilities/fsl_str.c ****                                 break;
1236:../utilities/fsl_str.c ****                             case kSCANF_LengthShortInt:
1237:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1238:../utilities/fsl_str.c ****                                 {
1239:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed short *) = (signed short)val;
1240:../utilities/fsl_str.c ****                                 }
1241:../utilities/fsl_str.c ****                                 else
1242:../utilities/fsl_str.c ****                                 {
1243:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned short *) = (unsigned short)val;
1244:../utilities/fsl_str.c ****                                 }
1245:../utilities/fsl_str.c ****                                 break;
1246:../utilities/fsl_str.c ****                             case kSCANF_LengthLongInt:
1247:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1248:../utilities/fsl_str.c ****                                 {
1249:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed long int *) = (signed long int)val;
1250:../utilities/fsl_str.c ****                                 }
1251:../utilities/fsl_str.c ****                                 else
1252:../utilities/fsl_str.c ****                                 {
1253:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned long int *) = (unsigned long int)val
1254:../utilities/fsl_str.c ****                                 }
1255:../utilities/fsl_str.c ****                                 break;
1256:../utilities/fsl_str.c ****                             case kSCANF_LengthLongLongInt:
1257:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1258:../utilities/fsl_str.c ****                                 {
1259:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed long long int *) = (signed long long i
1260:../utilities/fsl_str.c ****                                 }
1261:../utilities/fsl_str.c ****                                 else
1262:../utilities/fsl_str.c ****                                 {
1263:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned long long int *) = (unsigned long lo
1264:../utilities/fsl_str.c ****                                 }
1265:../utilities/fsl_str.c ****                                 break;
1266:../utilities/fsl_str.c ****                             default:
1267:../utilities/fsl_str.c ****                                 /* The default type is the type int. */
1268:../utilities/fsl_str.c ****                                 if (flag & kSCANF_TypeSinged)
1269:../utilities/fsl_str.c ****                                 {
1270:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, signed int *) = (signed int)val;
1271:../utilities/fsl_str.c ****                                 }
1272:../utilities/fsl_str.c ****                                 else
1273:../utilities/fsl_str.c ****                                 {
1274:../utilities/fsl_str.c ****                                     *va_arg(args_ptr, unsigned int *) = (unsigned int)val;
1275:../utilities/fsl_str.c ****                                 }
1276:../utilities/fsl_str.c ****                                 break;
1277:../utilities/fsl_str.c ****                         }
1278:../utilities/fsl_str.c **** #else
1279:../utilities/fsl_str.c ****                         /* The default type is the type int. */
1280:../utilities/fsl_str.c ****                         if (flag & kSCANF_TypeSinged)
1281:../utilities/fsl_str.c ****                         {
1282:../utilities/fsl_str.c ****                             *va_arg(args_ptr, signed int *) = (signed int)val;
1283:../utilities/fsl_str.c ****                         }
1284:../utilities/fsl_str.c ****                         else
1285:../utilities/fsl_str.c ****                         {
1286:../utilities/fsl_str.c ****                             *va_arg(args_ptr, unsigned int *) = (unsigned int)val;
1287:../utilities/fsl_str.c ****                         }
1288:../utilities/fsl_str.c **** #endif /* SCANF_ADVANCED_ENABLE */
1289:../utilities/fsl_str.c ****                         nassigned++;
 805              		.loc 1 1289 0
 806 00be 0136     		adds	r6, r6, #1
 807              	.LVL131:
 808 00c0 C0E7     		b	.L80
 809              	.LVL132:
 810              	.L89:
 942:../utilities/fsl_str.c ****                 {
 811              		.loc 1 942 0
 812 00c2 6329     		cmp	r1, #99
 813 00c4 4CD1     		bne	.L76
1067:../utilities/fsl_str.c ****                         }
 814              		.loc 1 1067 0
 815 00c6 002C     		cmp	r4, #0
1064:../utilities/fsl_str.c ****                         if (!field_width)
 816              		.loc 1 1064 0
 817 00c8 48F00408 		orr	r8, r8, #4
 818              	.LVL133:
1067:../utilities/fsl_str.c ****                         }
 819              		.loc 1 1067 0
 820 00cc 08BF     		it	eq
 821 00ce 0124     		moveq	r4, #1
 822              	.LVL134:
 823              	.L162:
1073:../utilities/fsl_str.c ****                         break;
 824              		.loc 1 1073 0
 825 00d0 0133     		adds	r3, r3, #1
 826 00d2 0093     		str	r3, [sp]
1074:../utilities/fsl_str.c ****                     default:
 827              		.loc 1 1074 0
 828 00d4 D3E7     		b	.L84
 829              	.L87:
 942:../utilities/fsl_str.c ****                 {
 830              		.loc 1 942 0
 831 00d6 7329     		cmp	r1, #115
 832 00d8 34D0     		beq	.L92
 833 00da 0ADC     		bgt	.L93
 834 00dc 6929     		cmp	r1, #105
 835 00de 2BD0     		beq	.L94
 836 00e0 6F29     		cmp	r1, #111
 837 00e2 3DD1     		bne	.L76
 838              	.LVL135:
1037:../utilities/fsl_str.c ****                         break;
 839              		.loc 1 1037 0
 840 00e4 0133     		adds	r3, r3, #1
1036:../utilities/fsl_str.c ****                         c++;
 841              		.loc 1 1036 0
 842 00e6 48F02008 		orr	r8, r8, #32
 843              	.LVL136:
1037:../utilities/fsl_str.c ****                         break;
 844              		.loc 1 1037 0
 845 00ea 0093     		str	r3, [sp]
1035:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 846              		.loc 1 1035 0
 847 00ec 4FF00809 		mov	r9, #8
1038:../utilities/fsl_str.c ****                     case 'x':
 848              		.loc 1 1038 0
 849 00f0 C5E7     		b	.L84
 850              	.LVL137:
 851              	.L93:
 942:../utilities/fsl_str.c ****                 {
 852              		.loc 1 942 0
 853 00f2 7529     		cmp	r1, #117
 854 00f4 1DD0     		beq	.L96
 855 00f6 7829     		cmp	r1, #120
 856 00f8 32D1     		bne	.L76
 857              	.L88:
 858              	.LVL138:
1043:../utilities/fsl_str.c ****                         break;
 859              		.loc 1 1043 0
 860 00fa 0133     		adds	r3, r3, #1
1042:../utilities/fsl_str.c ****                         c++;
 861              		.loc 1 1042 0
 862 00fc 48F02008 		orr	r8, r8, #32
 863              	.LVL139:
1043:../utilities/fsl_str.c ****                         break;
 864              		.loc 1 1043 0
 865 0100 0093     		str	r3, [sp]
1041:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 866              		.loc 1 1041 0
 867 0102 4FF01009 		mov	r9, #16
1044:../utilities/fsl_str.c ****                     case 'i':
 868              		.loc 1 1044 0
 869 0106 BAE7     		b	.L84
 870              	.LVL140:
 871              	.L157:
1012:../utilities/fsl_str.c ****                         {
 872              		.loc 1 1012 0
 873 0108 54BB     		cbnz	r4, .L76
 874              	.L98:
1019:../utilities/fsl_str.c ****                             c++;
 875              		.loc 1 1019 0 discriminator 1
 876 010a 0099     		ldr	r1, [sp]
 877 010c 0B46     		mov	r3, r1
 878 010e 5443     		muls	r4, r2, r4
 879 0110 13F9010B 		ldrsb	r0, [r3], #1
1020:../utilities/fsl_str.c ****                         } while ((*c >= '0') && (*c <= '9'));
 880              		.loc 1 1020 0 discriminator 1
 881 0114 0093     		str	r3, [sp]
1021:../utilities/fsl_str.c ****                         break;
 882              		.loc 1 1021 0 discriminator 1
 883 0116 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 884 0118 303B     		subs	r3, r3, #48
 885 011a 303C     		subs	r4, r4, #48
 886              	.LVL141:
 887 011c 092B     		cmp	r3, #9
1019:../utilities/fsl_str.c ****                             c++;
 888              		.loc 1 1019 0 discriminator 1
 889 011e 0444     		add	r4, r4, r0
 890              	.LVL142:
1021:../utilities/fsl_str.c ****                         break;
 891              		.loc 1 1021 0 discriminator 1
 892 0120 F3D9     		bls	.L98
 893 0122 ACE7     		b	.L84
 894              	.LVL143:
 895              	.L86:
1026:../utilities/fsl_str.c ****                         c++;
 896              		.loc 1 1026 0
 897 0124 48EA0508 		orr	r8, r8, r5
 898              	.LVL144:
 899              	.L163:
1032:../utilities/fsl_str.c ****                         break;
 900              		.loc 1 1032 0
 901 0128 0133     		adds	r3, r3, #1
 902 012a 0093     		str	r3, [sp]
1030:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 903              		.loc 1 1030 0
 904 012c 4FF00A09 		mov	r9, #10
1033:../utilities/fsl_str.c ****                     case 'o':
 905              		.loc 1 1033 0
 906 0130 A5E7     		b	.L84
 907              	.LVL145:
 908              	.L96:
1031:../utilities/fsl_str.c ****                         c++;
 909              		.loc 1 1031 0
 910 0132 48F02008 		orr	r8, r8, #32
 911              	.LVL146:
 912 0136 F7E7     		b	.L163
 913              	.LVL147:
 914              	.L94:
1048:../utilities/fsl_str.c ****                         break;
 915              		.loc 1 1048 0
 916 0138 0133     		adds	r3, r3, #1
1047:../utilities/fsl_str.c ****                         c++;
 917              		.loc 1 1047 0
 918 013a 48F02008 		orr	r8, r8, #32
 919              	.LVL148:
1048:../utilities/fsl_str.c ****                         break;
 920              		.loc 1 1048 0
 921 013e 0093     		str	r3, [sp]
1046:../utilities/fsl_str.c ****                         flag |= kSCANF_DestInt;
 922              		.loc 1 1046 0
 923 0140 8146     		mov	r9, r0
1049:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
 924              		.loc 1 1049 0
 925 0142 9CE7     		b	.L84
 926              	.LVL149:
 927              	.L92:
1072:../utilities/fsl_str.c ****                         c++;
 928              		.loc 1 1072 0
 929 0144 48F00808 		orr	r8, r8, #8
 930              	.LVL150:
 931 0148 C2E7     		b	.L162
 932              	.LVL151:
 933              	.L101:
 940:../utilities/fsl_str.c ****             {
 934              		.loc 1 940 0 discriminator 1
 935 014a 0028     		cmp	r0, #0
 936 014c 9ED1     		bne	.L105
 942:../utilities/fsl_str.c ****                 {
 937              		.loc 1 942 0
 938 014e 6429     		cmp	r1, #100
 939 0150 E8D0     		beq	.L86
 940 0152 C0DC     		bgt	.L87
 941 0154 5829     		cmp	r1, #88
 942 0156 D0D0     		beq	.L88
 943 0158 B3DC     		bgt	.L89
 944 015a 3039     		subs	r1, r1, #48
 945 015c 0929     		cmp	r1, #9
 946 015e D3D9     		bls	.L157
 947              	.LVL152:
 948              	.L76:
1290:../utilities/fsl_str.c ****                     }
1291:../utilities/fsl_str.c ****                     break;
1292:../utilities/fsl_str.c **** #if SCANF_FLOAT_ENABLE
1293:../utilities/fsl_str.c ****                 case kSCANF_DestFloat:
1294:../utilities/fsl_str.c ****                     n_decode += ScanIgnoreWhiteSpace(&p);
1295:../utilities/fsl_str.c ****                     fnum = strtod(p, (char **)&s);
1296:../utilities/fsl_str.c **** 
1297:../utilities/fsl_str.c ****                     if ((fnum >= HUGE_VAL) || (fnum <= -HUGE_VAL))
1298:../utilities/fsl_str.c ****                     {
1299:../utilities/fsl_str.c ****                         break;
1300:../utilities/fsl_str.c ****                     }
1301:../utilities/fsl_str.c **** 
1302:../utilities/fsl_str.c ****                     n_decode += (int)(s) - (int)(p);
1303:../utilities/fsl_str.c ****                     p = s;
1304:../utilities/fsl_str.c ****                     if (!(flag & kSCANF_Suppress))
1305:../utilities/fsl_str.c ****                     {
1306:../utilities/fsl_str.c ****                         if (flag & kSCANF_LengthLongLongDouble)
1307:../utilities/fsl_str.c ****                         {
1308:../utilities/fsl_str.c ****                             *va_arg(args_ptr, double *) = fnum;
1309:../utilities/fsl_str.c ****                         }
1310:../utilities/fsl_str.c ****                         else
1311:../utilities/fsl_str.c ****                         {
1312:../utilities/fsl_str.c ****                             *va_arg(args_ptr, float *) = (float)fnum;
1313:../utilities/fsl_str.c ****                         }
1314:../utilities/fsl_str.c ****                         nassigned++;
1315:../utilities/fsl_str.c ****                     }
1316:../utilities/fsl_str.c ****                     break;
1317:../utilities/fsl_str.c **** #endif /* SCANF_FLOAT_ENABLE */
1318:../utilities/fsl_str.c ****                 default:
1319:../utilities/fsl_str.c ****                     return nassigned;
1320:../utilities/fsl_str.c ****             }
1321:../utilities/fsl_str.c ****         }
1322:../utilities/fsl_str.c ****     }
1323:../utilities/fsl_str.c ****     return nassigned;
1324:../utilities/fsl_str.c **** }
 949              		.loc 1 1324 0
 950 0160 3046     		mov	r0, r6
 951 0162 03B0     		add	sp, sp, #12
 952              		.cfi_remember_state
 953              		.cfi_def_cfa_offset 28
 954              		@ sp needed
 955 0164 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 956              	.LVL153:
 957              	.L113:
 958              		.cfi_restore_state
1102:../utilities/fsl_str.c ****                         }
 959              		.loc 1 1102 0
 960 0168 571C     		adds	r7, r2, #1
 961 016a 0197     		str	r7, [sp, #4]
 962 016c 92F90020 		ldrsb	r2, [r2]
 963 0170 01F8012B 		strb	r2, [r1], #1
 964              	.LVL154:
 965 0174 9AE7     		b	.L111
 966              	.LVL155:
 967              	.L108:
1117:../utilities/fsl_str.c ****                     s = p;
 968              		.loc 1 1117 0
 969 0176 01A8     		add	r0, sp, #4
 970 0178 FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 971              	.LVL156:
1119:../utilities/fsl_str.c ****                     while ((field_width--) && (*p != '\0') && (*p != ' ') && (*p != '\t') && (*p !=
 972              		.loc 1 1119 0
 973 017c 3968     		ldr	r1, [r7]
1118:../utilities/fsl_str.c ****                     buf = va_arg(args_ptr, char *);
 974              		.loc 1 1118 0
 975 017e DDF804E0 		ldr	lr, [sp, #4]
 976              	.LVL157:
1119:../utilities/fsl_str.c ****                     while ((field_width--) && (*p != '\0') && (*p != ' ') && (*p != '\t') && (*p !=
 977              		.loc 1 1119 0
 978 0182 3B1D     		adds	r3, r7, #4
 979              	.LVL158:
 980 0184 0C44     		add	r4, r4, r1
 981              	.L114:
 982              	.LVL159:
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 983              		.loc 1 1120 0
 984 0186 A142     		cmp	r1, r4
 985 0188 0198     		ldr	r0, [sp, #4]
 986 018a 05D1     		bne	.L115
 987              	.L117:
1134:../utilities/fsl_str.c ****                     {
 988              		.loc 1 1134 0
 989 018c 8645     		cmp	lr, r0
 990 018e 3FF459AF 		beq	.L80
1137:../utilities/fsl_str.c ****                         nassigned++;
 991              		.loc 1 1137 0
 992 0192 0022     		movs	r2, #0
 993 0194 0A70     		strb	r2, [r1]
 994 0196 92E7     		b	.L165
 995              	.L115:
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 996              		.loc 1 1120 0 discriminator 1
 997 0198 90F90020 		ldrsb	r2, [r0]
 998 019c 32F02007 		bics	r7, r2, #32
 999 01a0 F4D0     		beq	.L117
1120:../utilities/fsl_str.c ****                            (*p != '\r') && (*p != '\v') && (*p != '\f'))
 1000              		.loc 1 1120 0 is_stmt 0 discriminator 3
 1001 01a2 093A     		subs	r2, r2, #9
 1002 01a4 D2B2     		uxtb	r2, r2
 1003 01a6 042A     		cmp	r2, #4
 1004 01a8 F0D9     		bls	.L117
1129:../utilities/fsl_str.c ****                         }
 1005              		.loc 1 1129 0 is_stmt 1
 1006 01aa 421C     		adds	r2, r0, #1
 1007 01ac 0192     		str	r2, [sp, #4]
 1008 01ae 90F90020 		ldrsb	r2, [r0]
 1009 01b2 01F8012B 		strb	r2, [r1], #1
 1010              	.LVL160:
 1011 01b6 E6E7     		b	.L114
 1012              	.LVL161:
 1013              	.L109:
1142:../utilities/fsl_str.c ****                     s = p;
 1014              		.loc 1 1142 0
 1015 01b8 01A8     		add	r0, sp, #4
 1016 01ba FFF7FEFF 		bl	ScanIgnoreWhiteSpace
 1017              	.LVL162:
1145:../utilities/fsl_str.c ****                     {
 1018              		.loc 1 1145 0
 1019 01be 19F00A0F 		tst	r9, #10
 1020 01c2 0FD1     		bne	.L119
1143:../utilities/fsl_str.c ****                     val = 0;
 1021              		.loc 1 1143 0
 1022 01c4 019B     		ldr	r3, [sp, #4]
1147:../utilities/fsl_str.c ****                         {
 1023              		.loc 1 1147 0
 1024 01c6 93F90010 		ldrsb	r1, [r3]
 1025 01ca 3029     		cmp	r1, #48
 1026 01cc 31D1     		bne	.L120
1147:../utilities/fsl_str.c ****                         {
 1027              		.loc 1 1147 0 is_stmt 0 discriminator 1
 1028 01ce 93F90120 		ldrsb	r2, [r3, #1]
 1029 01d2 22F02002 		bic	r2, r2, #32
 1030 01d6 582A     		cmp	r2, #88
 1031 01d8 2BD1     		bne	.L120
 1032              	.LVL163:
1152:../utilities/fsl_str.c ****                                 n_decode += 2;
 1033              		.loc 1 1152 0 is_stmt 1
 1034 01da 0233     		adds	r3, r3, #2
 1035 01dc 0193     		str	r3, [sp, #4]
 1036              	.LVL164:
1154:../utilities/fsl_str.c ****                             }
 1037              		.loc 1 1154 0
 1038 01de 023C     		subs	r4, r4, #2
 1039              	.LVL165:
1149:../utilities/fsl_str.c ****                             if (field_width >= 1)
 1040              		.loc 1 1149 0
 1041 01e0 4FF01009 		mov	r9, #16
 1042              	.LVL166:
 1043              	.L119:
1172:../utilities/fsl_str.c ****                     {
 1044              		.loc 1 1172 0
 1045 01e4 019B     		ldr	r3, [sp, #4]
 1046 01e6 93F90020 		ldrsb	r2, [r3]
 1047 01ea 2B2A     		cmp	r2, #43
 1048 01ec 2BD0     		beq	.L122
 1049 01ee 2D2A     		cmp	r2, #45
 1050 01f0 2CD1     		bne	.L160
 1051              	.LVL167:
1177:../utilities/fsl_str.c ****                             field_width--;
 1052              		.loc 1 1177 0
 1053 01f2 0133     		adds	r3, r3, #1
 1054 01f4 0193     		str	r3, [sp, #4]
 1055              	.LVL168:
1178:../utilities/fsl_str.c ****                             break;
 1056              		.loc 1 1178 0
 1057 01f6 013C     		subs	r4, r4, #1
 1058              	.LVL169:
1175:../utilities/fsl_str.c ****                             n_decode++;
 1059              		.loc 1 1175 0
 1060 01f8 4FF0FF30 		mov	r0, #-1
 1061              	.LVL170:
 1062              	.L121:
 1063 01fc 0022     		movs	r2, #0
1206:../utilities/fsl_str.c ****                         }
 1064              		.loc 1 1206 0
 1065 01fe 4FFA89FE 		sxtb	lr, r9
 1066              	.LVL171:
 1067              	.L124:
1190:../utilities/fsl_str.c ****                     {
 1068              		.loc 1 1190 0
 1069 0202 0199     		ldr	r1, [sp, #4]
 1070 0204 91F90030 		ldrsb	r3, [r1]
 1071 0208 73B1     		cbz	r3, .L132
1190:../utilities/fsl_str.c ****                     {
 1072              		.loc 1 1190 0 is_stmt 0 discriminator 1
 1073 020a 6CB1     		cbz	r4, .L132
1192:../utilities/fsl_str.c ****                         {
 1074              		.loc 1 1192 0 is_stmt 1
 1075 020c DBB2     		uxtb	r3, r3
 1076 020e A3F1300C 		sub	ip, r3, #48
 1077 0212 5FFA8CFC 		uxtb	ip, ip
 1078 0216 BCF1090F 		cmp	ip, #9
 1079 021a 19D8     		bhi	.L125
1194:../utilities/fsl_str.c ****                         }
 1080              		.loc 1 1194 0
 1081 021c 4FFA8CF3 		sxtb	r3, ip
 1082              	.LVL172:
 1083              	.L126:
1209:../utilities/fsl_str.c ****                         {
 1084              		.loc 1 1209 0
 1085 0220 4B45     		cmp	r3, r9
 1086 0222 04F1FF34 		add	r4, r4, #-1
 1087              	.LVL173:
 1088 0226 24DB     		blt	.L129
 1089              	.LVL174:
 1090              	.L132:
1286:../utilities/fsl_str.c ****                         }
 1091              		.loc 1 1286 0
 1092 0228 3968     		ldr	r1, [r7]
1220:../utilities/fsl_str.c ****                     if (!(flag & kSCANF_Suppress))
 1093              		.loc 1 1220 0
 1094 022a 4243     		muls	r2, r0, r2
 1095              	.LVL175:
 1096 022c 3B1D     		adds	r3, r7, #4
 1097              	.LVL176:
1286:../utilities/fsl_str.c ****                         }
 1098              		.loc 1 1286 0
 1099 022e 0A60     		str	r2, [r1]
 1100 0230 45E7     		b	.L165
 1101              	.LVL177:
 1102              	.L120:
1159:../utilities/fsl_str.c ****                     {
 1103              		.loc 1 1159 0
 1104 0232 B9F1000F 		cmp	r9, #0
 1105 0236 D5D1     		bne	.L119
 1106              	.LVL178:
1167:../utilities/fsl_str.c ****                         }
 1107              		.loc 1 1167 0
 1108 0238 3029     		cmp	r1, #48
 1109 023a 0CBF     		ite	eq
 1110 023c 4FF00809 		moveq	r9, #8
 1111 0240 4FF00A09 		movne	r9, #10
 1112 0244 CEE7     		b	.L119
 1113              	.LVL179:
 1114              	.L122:
1183:../utilities/fsl_str.c ****                             field_width--;
 1115              		.loc 1 1183 0
 1116 0246 0133     		adds	r3, r3, #1
 1117 0248 0193     		str	r3, [sp, #4]
 1118              	.LVL180:
1184:../utilities/fsl_str.c ****                             break;
 1119              		.loc 1 1184 0
 1120 024a 013C     		subs	r4, r4, #1
 1121              	.LVL181:
 1122              	.L160:
1171:../utilities/fsl_str.c ****                     switch (*p)
 1123              		.loc 1 1171 0
 1124 024c 0120     		movs	r0, #1
 1125 024e D5E7     		b	.L121
 1126              	.LVL182:
 1127              	.L125:
1196:../utilities/fsl_str.c ****                         {
 1128              		.loc 1 1196 0
 1129 0250 A3F1610C 		sub	ip, r3, #97
 1130 0254 BCF1050F 		cmp	ip, #5
 1131 0258 02D8     		bhi	.L127
1198:../utilities/fsl_str.c ****                         }
 1132              		.loc 1 1198 0
 1133 025a 573B     		subs	r3, r3, #87
 1134              	.L164:
1202:../utilities/fsl_str.c ****                         }
 1135              		.loc 1 1202 0
 1136 025c 5BB2     		sxtb	r3, r3
 1137              	.LVL183:
 1138 025e DFE7     		b	.L126
 1139              	.LVL184:
 1140              	.L127:
1200:../utilities/fsl_str.c ****                         {
 1141              		.loc 1 1200 0
 1142 0260 A3F1410C 		sub	ip, r3, #65
 1143 0264 BCF1050F 		cmp	ip, #5
 1144 0268 01D8     		bhi	.L128
1202:../utilities/fsl_str.c ****                         }
 1145              		.loc 1 1202 0
 1146 026a 373B     		subs	r3, r3, #55
 1147 026c F6E7     		b	.L164
 1148              	.L128:
1206:../utilities/fsl_str.c ****                         }
 1149              		.loc 1 1206 0
 1150 026e 7346     		mov	r3, lr
 1151              	.LVL185:
 1152 0270 D6E7     		b	.L126
 1153              	.LVL186:
 1154              	.L129:
1217:../utilities/fsl_str.c ****                         n_decode++;
 1155              		.loc 1 1217 0
 1156 0272 0131     		adds	r1, r1, #1
1215:../utilities/fsl_str.c ****                         }
 1157              		.loc 1 1215 0
 1158 0274 09FB0232 		mla	r2, r9, r2, r3
 1159              	.LVL187:
1217:../utilities/fsl_str.c ****                         n_decode++;
 1160              		.loc 1 1217 0
 1161 0278 0191     		str	r1, [sp, #4]
 1162 027a C2E7     		b	.L124
 1163              	.LVL188:
 1164              	.L137:
 902:../utilities/fsl_str.c ****     }
 1165              		.loc 1 902 0
 1166 027c 4FF0FF36 		mov	r6, #-1
 1167 0280 6EE7     		b	.L76
 1168              		.cfi_endproc
 1169              	.LFE150:
 1171              		.text
 1172              	.Letext0:
 1173              		.file 2 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 1174              		.file 3 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 1175              		.file 4 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 1176              		.file 5 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 1177              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 1178              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h"
 1179              		.file 8 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.
 1180              		.file 9 "<built-in>"
 1181              		.file 10 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h"
 1182              		.file 11 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 1183              		.file 12 "../CMSIS/core_cm4.h"
 1184              		.file 13 "../CMSIS/system_MK64F12.h"
 1185              		.file 14 "../drivers/fsl_clock.h"
 1186              		.file 15 "../utilities/fsl_str.h"
 1187              		.file 16 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h"
