   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_crc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRC_Init,"ax",%progbits
  18              		.align	1
  19              		.global	CRC_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	CRC_Init:
  26              	.LFB153:
  27              		.file 1 "../drivers/fsl_crc.c"
   1:../drivers/fsl_crc.c **** /*
   2:../drivers/fsl_crc.c ****  * The Clear BSD License
   3:../drivers/fsl_crc.c ****  * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_crc.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_crc.c ****  * All rights reserved.
   6:../drivers/fsl_crc.c ****  *
   7:../drivers/fsl_crc.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_crc.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_crc.c ****  * that the following conditions are met:
  10:../drivers/fsl_crc.c ****  *
  11:../drivers/fsl_crc.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_crc.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_crc.c ****  *
  14:../drivers/fsl_crc.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_crc.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_crc.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_crc.c ****  *
  18:../drivers/fsl_crc.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_crc.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_crc.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_crc.c ****  *
  22:../drivers/fsl_crc.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_crc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_crc.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_crc.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_crc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_crc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_crc.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_crc.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_crc.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_crc.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_crc.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_crc.c ****  */
  34:../drivers/fsl_crc.c **** #include "fsl_crc.h"
  35:../drivers/fsl_crc.c **** 
  36:../drivers/fsl_crc.c **** /*******************************************************************************
  37:../drivers/fsl_crc.c ****  * Definitions
  38:../drivers/fsl_crc.c ****  ******************************************************************************/
  39:../drivers/fsl_crc.c **** /*! @internal @brief Has data register with name CRC. */
  40:../drivers/fsl_crc.c **** #if defined(FSL_FEATURE_CRC_HAS_CRC_REG) && FSL_FEATURE_CRC_HAS_CRC_REG
  41:../drivers/fsl_crc.c **** #define DATA CRC
  42:../drivers/fsl_crc.c **** #define DATALL CRCLL
  43:../drivers/fsl_crc.c **** #endif
  44:../drivers/fsl_crc.c **** 
  45:../drivers/fsl_crc.c **** #if defined(CRC_DRIVER_USE_CRC16_CCIT_FALSE_AS_DEFAULT) && CRC_DRIVER_USE_CRC16_CCIT_FALSE_AS_DEFAU
  46:../drivers/fsl_crc.c **** /* @brief Default user configuration structure for CRC-16-CCITT */
  47:../drivers/fsl_crc.c **** #define CRC_DRIVER_DEFAULT_POLYNOMIAL 0x1021U
  48:../drivers/fsl_crc.c **** /*< CRC-16-CCIT polynomial x**16 + x**12 + x**5 + x**0 */
  49:../drivers/fsl_crc.c **** #define CRC_DRIVER_DEFAULT_SEED 0xFFFFU
  50:../drivers/fsl_crc.c **** /*< Default initial checksum */
  51:../drivers/fsl_crc.c **** #define CRC_DRIVER_DEFAULT_REFLECT_IN false
  52:../drivers/fsl_crc.c **** /*< Default is no transpose */
  53:../drivers/fsl_crc.c **** #define CRC_DRIVER_DEFAULT_REFLECT_OUT false
  54:../drivers/fsl_crc.c **** /*< Default is transpose bytes */
  55:../drivers/fsl_crc.c **** #define CRC_DRIVER_DEFAULT_COMPLEMENT_CHECKSUM false
  56:../drivers/fsl_crc.c **** /*< Default is without complement of CRC data register read data */
  57:../drivers/fsl_crc.c **** #define CRC_DRIVER_DEFAULT_CRC_BITS kCrcBits16
  58:../drivers/fsl_crc.c **** /*< Default is 16-bit CRC protocol */
  59:../drivers/fsl_crc.c **** #define CRC_DRIVER_DEFAULT_CRC_RESULT kCrcFinalChecksum
  60:../drivers/fsl_crc.c **** /*< Default is resutl type is final checksum */
  61:../drivers/fsl_crc.c **** #endif /* CRC_DRIVER_USE_CRC16_CCIT_FALSE_AS_DEFAULT */
  62:../drivers/fsl_crc.c **** 
  63:../drivers/fsl_crc.c **** /*! @brief CRC type of transpose of read write data */
  64:../drivers/fsl_crc.c **** typedef enum _crc_transpose_type
  65:../drivers/fsl_crc.c **** {
  66:../drivers/fsl_crc.c ****     kCrcTransposeNone = 0U,         /*! No transpose  */
  67:../drivers/fsl_crc.c ****     kCrcTransposeBits = 1U,         /*! Tranpose bits in bytes  */
  68:../drivers/fsl_crc.c ****     kCrcTransposeBitsAndBytes = 2U, /*! Transpose bytes and bits in bytes */
  69:../drivers/fsl_crc.c ****     kCrcTransposeBytes = 3U,        /*! Transpose bytes */
  70:../drivers/fsl_crc.c **** } crc_transpose_type_t;
  71:../drivers/fsl_crc.c **** 
  72:../drivers/fsl_crc.c **** /*!
  73:../drivers/fsl_crc.c **** * @brief CRC module configuration.
  74:../drivers/fsl_crc.c **** *
  75:../drivers/fsl_crc.c **** * This structure holds the configuration for the CRC module.
  76:../drivers/fsl_crc.c **** */
  77:../drivers/fsl_crc.c **** typedef struct _crc_module_config
  78:../drivers/fsl_crc.c **** {
  79:../drivers/fsl_crc.c ****     uint32_t polynomial;                 /*!< CRC Polynomial, MSBit first.@n
  80:../drivers/fsl_crc.c ****                                               Example polynomial: 0x1021 = 1_0000_0010_0001 = x^12+
  81:../drivers/fsl_crc.c ****     uint32_t seed;                       /*!< Starting checksum value */
  82:../drivers/fsl_crc.c ****     crc_transpose_type_t readTranspose;  /*!< Type of transpose when reading CRC result. */
  83:../drivers/fsl_crc.c ****     crc_transpose_type_t writeTranspose; /*!< Type of transpose when writing CRC input data. */
  84:../drivers/fsl_crc.c ****     bool complementChecksum;             /*!< True if the result shall be complement of the actual 
  85:../drivers/fsl_crc.c ****     crc_bits_t crcBits;                  /*!< Selects 16- or 32- bit CRC protocol. */
  86:../drivers/fsl_crc.c **** } crc_module_config_t;
  87:../drivers/fsl_crc.c **** 
  88:../drivers/fsl_crc.c **** /*******************************************************************************
  89:../drivers/fsl_crc.c ****  * Code
  90:../drivers/fsl_crc.c ****  ******************************************************************************/
  91:../drivers/fsl_crc.c **** 
  92:../drivers/fsl_crc.c **** /*!
  93:../drivers/fsl_crc.c ****  * @brief Returns transpose type for CRC protocol reflect in parameter.
  94:../drivers/fsl_crc.c ****  *
  95:../drivers/fsl_crc.c ****  * This functions helps to set writeTranspose member of crc_config_t structure. Reflect in is CRC p
  96:../drivers/fsl_crc.c ****  *
  97:../drivers/fsl_crc.c ****  * @param enable True or false for the selected CRC protocol Reflect In (refin) parameter.
  98:../drivers/fsl_crc.c ****  */
  99:../drivers/fsl_crc.c **** static inline crc_transpose_type_t CRC_GetTransposeTypeFromReflectIn(bool enable)
 100:../drivers/fsl_crc.c **** {
 101:../drivers/fsl_crc.c ****     return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeBytes);
 102:../drivers/fsl_crc.c **** }
 103:../drivers/fsl_crc.c **** 
 104:../drivers/fsl_crc.c **** /*!
 105:../drivers/fsl_crc.c ****  * @brief Returns transpose type for CRC protocol reflect out parameter.
 106:../drivers/fsl_crc.c ****  *
 107:../drivers/fsl_crc.c ****  * This functions helps to set readTranspose member of crc_config_t structure. Reflect out is CRC p
 108:../drivers/fsl_crc.c ****  *
 109:../drivers/fsl_crc.c ****  * @param enable True or false for the selected CRC protocol Reflect Out (refout) parameter.
 110:../drivers/fsl_crc.c ****  */
 111:../drivers/fsl_crc.c **** static inline crc_transpose_type_t CRC_GetTransposeTypeFromReflectOut(bool enable)
 112:../drivers/fsl_crc.c **** {
 113:../drivers/fsl_crc.c ****     return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeNone);
 114:../drivers/fsl_crc.c **** }
 115:../drivers/fsl_crc.c **** 
 116:../drivers/fsl_crc.c **** /*!
 117:../drivers/fsl_crc.c ****  * @brief Starts checksum computation.
 118:../drivers/fsl_crc.c ****  *
 119:../drivers/fsl_crc.c ****  * Configures the CRC module for the specified CRC protocol. @n
 120:../drivers/fsl_crc.c ****  * Starts the checksum computation by writing the seed value
 121:../drivers/fsl_crc.c ****  *
 122:../drivers/fsl_crc.c ****  * @param base CRC peripheral address.
 123:../drivers/fsl_crc.c ****  * @param config Pointer to protocol configuration structure.
 124:../drivers/fsl_crc.c ****  */
 125:../drivers/fsl_crc.c **** static void CRC_ConfigureAndStart(CRC_Type *base, const crc_module_config_t *config)
 126:../drivers/fsl_crc.c **** {
 127:../drivers/fsl_crc.c ****     uint32_t crcControl;
 128:../drivers/fsl_crc.c **** 
 129:../drivers/fsl_crc.c ****     /* pre-compute value for CRC control registger based on user configuraton without WAS field */
 130:../drivers/fsl_crc.c ****     crcControl = 0 | CRC_CTRL_TOT(config->writeTranspose) | CRC_CTRL_TOTR(config->readTranspose) |
 131:../drivers/fsl_crc.c ****                  CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
 132:../drivers/fsl_crc.c **** 
 133:../drivers/fsl_crc.c ****     /* make sure the control register is clear - WAS is deasserted, and protocol is set */
 134:../drivers/fsl_crc.c ****     base->CTRL = crcControl;
 135:../drivers/fsl_crc.c **** 
 136:../drivers/fsl_crc.c ****     /* write polynomial register */
 137:../drivers/fsl_crc.c ****     base->GPOLY = config->polynomial;
 138:../drivers/fsl_crc.c **** 
 139:../drivers/fsl_crc.c ****     /* write pre-computed control register value along with WAS to start checksum computation */
 140:../drivers/fsl_crc.c ****     base->CTRL = crcControl | CRC_CTRL_WAS(true);
 141:../drivers/fsl_crc.c **** 
 142:../drivers/fsl_crc.c ****     /* write seed (initial checksum) */
 143:../drivers/fsl_crc.c ****     base->DATA = config->seed;
 144:../drivers/fsl_crc.c **** 
 145:../drivers/fsl_crc.c ****     /* deassert WAS by writing pre-computed CRC control register value */
 146:../drivers/fsl_crc.c ****     base->CTRL = crcControl;
 147:../drivers/fsl_crc.c **** }
 148:../drivers/fsl_crc.c **** 
 149:../drivers/fsl_crc.c **** /*!
 150:../drivers/fsl_crc.c ****  * @brief Starts final checksum computation.
 151:../drivers/fsl_crc.c ****  *
 152:../drivers/fsl_crc.c ****  * Configures the CRC module for the specified CRC protocol. @n
 153:../drivers/fsl_crc.c ****  * Starts final checksum computation by writing the seed value.
 154:../drivers/fsl_crc.c ****  * @note CRC_Get16bitResult() or CRC_Get32bitResult() return final checksum
 155:../drivers/fsl_crc.c ****  *       (output reflection and xor functions are applied).
 156:../drivers/fsl_crc.c ****  *
 157:../drivers/fsl_crc.c ****  * @param base CRC peripheral address.
 158:../drivers/fsl_crc.c ****  * @param protocolConfig Pointer to protocol configuration structure.
 159:../drivers/fsl_crc.c ****  */
 160:../drivers/fsl_crc.c **** static void CRC_SetProtocolConfig(CRC_Type *base, const crc_config_t *protocolConfig)
 161:../drivers/fsl_crc.c **** {
 162:../drivers/fsl_crc.c ****     crc_module_config_t moduleConfig;
 163:../drivers/fsl_crc.c ****     /* convert protocol to CRC peripheral module configuration, prepare for final checksum */
 164:../drivers/fsl_crc.c ****     moduleConfig.polynomial = protocolConfig->polynomial;
 165:../drivers/fsl_crc.c ****     moduleConfig.seed = protocolConfig->seed;
 166:../drivers/fsl_crc.c ****     moduleConfig.readTranspose = CRC_GetTransposeTypeFromReflectOut(protocolConfig->reflectOut);
 167:../drivers/fsl_crc.c ****     moduleConfig.writeTranspose = CRC_GetTransposeTypeFromReflectIn(protocolConfig->reflectIn);
 168:../drivers/fsl_crc.c ****     moduleConfig.complementChecksum = protocolConfig->complementChecksum;
 169:../drivers/fsl_crc.c ****     moduleConfig.crcBits = protocolConfig->crcBits;
 170:../drivers/fsl_crc.c **** 
 171:../drivers/fsl_crc.c ****     CRC_ConfigureAndStart(base, &moduleConfig);
 172:../drivers/fsl_crc.c **** }
 173:../drivers/fsl_crc.c **** 
 174:../drivers/fsl_crc.c **** /*!
 175:../drivers/fsl_crc.c ****  * @brief Starts intermediate checksum computation.
 176:../drivers/fsl_crc.c ****  *
 177:../drivers/fsl_crc.c ****  * Configures the CRC module for the specified CRC protocol. @n
 178:../drivers/fsl_crc.c ****  * Starts intermediate checksum computation by writing the seed value.
 179:../drivers/fsl_crc.c ****  * @note CRC_Get16bitResult() or CRC_Get32bitResult() return intermediate checksum (raw data regist
 180:../drivers/fsl_crc.c ****  *
 181:../drivers/fsl_crc.c ****  * @param base CRC peripheral address.
 182:../drivers/fsl_crc.c ****  * @param protocolConfig Pointer to protocol configuration structure.
 183:../drivers/fsl_crc.c ****  */
 184:../drivers/fsl_crc.c **** static void CRC_SetRawProtocolConfig(CRC_Type *base, const crc_config_t *protocolConfig)
 185:../drivers/fsl_crc.c **** {
 186:../drivers/fsl_crc.c ****     crc_module_config_t moduleConfig;
 187:../drivers/fsl_crc.c ****     /* convert protocol to CRC peripheral module configuration, prepare for intermediate checksum *
 188:../drivers/fsl_crc.c ****     moduleConfig.polynomial = protocolConfig->polynomial;
 189:../drivers/fsl_crc.c ****     moduleConfig.seed = protocolConfig->seed;
 190:../drivers/fsl_crc.c ****     moduleConfig.readTranspose =
 191:../drivers/fsl_crc.c ****         kCrcTransposeNone; /* intermediate checksum does no transpose of data register read value *
 192:../drivers/fsl_crc.c ****     moduleConfig.writeTranspose = CRC_GetTransposeTypeFromReflectIn(protocolConfig->reflectIn);
 193:../drivers/fsl_crc.c ****     moduleConfig.complementChecksum = false; /* intermediate checksum does no xor of data register 
 194:../drivers/fsl_crc.c ****     moduleConfig.crcBits = protocolConfig->crcBits;
 195:../drivers/fsl_crc.c **** 
 196:../drivers/fsl_crc.c ****     CRC_ConfigureAndStart(base, &moduleConfig);
 197:../drivers/fsl_crc.c **** }
 198:../drivers/fsl_crc.c **** 
 199:../drivers/fsl_crc.c **** void CRC_Init(CRC_Type *base, const crc_config_t *config)
 200:../drivers/fsl_crc.c **** {
  28              		.loc 1 200 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33              	.LBB24:
  34              	.LBB25:
  35              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
  36              		.loc 2 695 0
  37 0000 164A     		ldr	r2, .L11
  38 0002 1368     		ldr	r3, [r2]
  39 0004 43F48023 		orr	r3, r3, #262144
  40              	.LBE25:
  41              	.LBE24:
  42              		.loc 1 200 0
  43 0008 F0B5     		push	{r4, r5, r6, r7, lr}
  44              		.cfi_def_cfa_offset 20
  45              		.cfi_offset 4, -20
  46              		.cfi_offset 5, -16
  47              		.cfi_offset 6, -12
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50              	.LBB27:
  51              	.LBB26:
  52              		.loc 2 695 0
  53 000a 1360     		str	r3, [r2]
  54              	.LVL1:
  55              	.LBE26:
  56              	.LBE27:
 201:../drivers/fsl_crc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 202:../drivers/fsl_crc.c ****     /* ungate clock */
 203:../drivers/fsl_crc.c ****     CLOCK_EnableClock(kCLOCK_Crc0);
 204:../drivers/fsl_crc.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 205:../drivers/fsl_crc.c ****     /* configure CRC module and write the seed */
 206:../drivers/fsl_crc.c ****     if (config->crcResult == kCrcFinalChecksum)
  57              		.loc 1 206 0
  58 000c 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
  59 000e 0E7A     		ldrb	r6, [r1, #8]	@ zero_extendqisi2
  60 0010 CA7A     		ldrb	r2, [r1, #11]	@ zero_extendqisi2
  61 0012 D1E90054 		ldrd	r5, r4, [r1]
  62 0016 E3B9     		cbnz	r3, .L2
  63              	.LVL2:
  64              	.LBB28:
  65              	.LBB29:
  66              	.LBB30:
  67              	.LBB31:
 113:../drivers/fsl_crc.c **** }
  68              		.loc 1 113 0
  69 0018 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
  70 001a 002B     		cmp	r3, #0
  71              	.LBE31:
  72              	.LBE30:
  73              	.LBB33:
  74              	.LBB34:
 131:../drivers/fsl_crc.c **** 
  75              		.loc 1 131 0
  76 001c 4FEA0263 		lsl	r3, r2, #24
  77 0020 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
  78 0022 03F08073 		and	r3, r3, #16777216
  79              	.LBE34:
  80              	.LBE33:
  81              	.LBB37:
  82              	.LBB32:
 113:../drivers/fsl_crc.c **** }
  83              		.loc 1 113 0
  84 0026 0CBF     		ite	eq
  85 0028 0027     		moveq	r7, #0
  86 002a 0227     		movne	r7, #2
  87              	.LVL3:
  88              	.LBE32:
  89              	.LBE37:
  90              	.LBB38:
  91              	.LBB35:
 130:../drivers/fsl_crc.c ****                  CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
  92              		.loc 1 130 0
  93 002c 43EA8263 		orr	r3, r3, r2, lsl #26
  94              	.LBE35:
  95              	.LBE38:
  96              	.LBB39:
  97              	.LBB40:
 101:../drivers/fsl_crc.c **** }
  98              		.loc 1 101 0
  99 0030 002E     		cmp	r6, #0
 100              	.LBE40:
 101              	.LBE39:
 102              	.LBB41:
 103              	.LBB36:
 130:../drivers/fsl_crc.c ****                  CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
 104              		.loc 1 130 0
 105 0032 43EA0773 		orr	r3, r3, r7, lsl #28
 106              	.LVL4:
 107              	.L10:
 108              	.LBE36:
 109              	.LBE41:
 110              	.LBE29:
 111              	.LBE28:
 112              	.LBB42:
 113              	.LBB43:
 114              	.LBB44:
 115              	.LBB45:
 116 0036 14BF     		ite	ne
 117 0038 4FF00042 		movne	r2, #-2147483648
 118 003c 4FF04042 		moveq	r2, #-1073741824
 119 0040 1343     		orrs	r3, r3, r2
 120              	.LVL5:
 140:../drivers/fsl_crc.c **** 
 121              		.loc 1 140 0
 122 0042 43F00072 		orr	r2, r3, #33554432
 134:../drivers/fsl_crc.c **** 
 123              		.loc 1 134 0
 124 0046 8360     		str	r3, [r0, #8]
 137:../drivers/fsl_crc.c **** 
 125              		.loc 1 137 0
 126 0048 4560     		str	r5, [r0, #4]
 140:../drivers/fsl_crc.c **** 
 127              		.loc 1 140 0
 128 004a 8260     		str	r2, [r0, #8]
 143:../drivers/fsl_crc.c **** 
 129              		.loc 1 143 0
 130 004c 0460     		str	r4, [r0]
 146:../drivers/fsl_crc.c **** }
 131              		.loc 1 146 0
 132 004e 8360     		str	r3, [r0, #8]
 133              	.LVL6:
 134              	.LBE45:
 135              	.LBE44:
 136              	.LBE43:
 137              	.LBE42:
 207:../drivers/fsl_crc.c ****     {
 208:../drivers/fsl_crc.c ****         CRC_SetProtocolConfig(base, config);
 209:../drivers/fsl_crc.c ****     }
 210:../drivers/fsl_crc.c ****     else
 211:../drivers/fsl_crc.c ****     {
 212:../drivers/fsl_crc.c ****         CRC_SetRawProtocolConfig(base, config);
 213:../drivers/fsl_crc.c ****     }
 214:../drivers/fsl_crc.c **** }
 138              		.loc 1 214 0
 139 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 140              	.L2:
 141              	.LVL7:
 142              	.LBB53:
 143              	.LBB52:
 144              	.LBB48:
 145              	.LBB46:
 131:../drivers/fsl_crc.c **** 
 146              		.loc 1 131 0
 147 0052 1306     		lsls	r3, r2, #24
 148              	.LBE46:
 149              	.LBE48:
 150              	.LBB49:
 151              	.LBB50:
 101:../drivers/fsl_crc.c **** }
 152              		.loc 1 101 0
 153 0054 002E     		cmp	r6, #0
 154              	.LBE50:
 155              	.LBE49:
 156              	.LBB51:
 157              	.LBB47:
 131:../drivers/fsl_crc.c **** 
 158              		.loc 1 131 0
 159 0056 03F08073 		and	r3, r3, #16777216
 160 005a ECE7     		b	.L10
 161              	.L12:
 162              		.align	2
 163              	.L11:
 164 005c 3C800440 		.word	1074036796
 165              	.LBE47:
 166              	.LBE51:
 167              	.LBE52:
 168              	.LBE53:
 169              		.cfi_endproc
 170              	.LFE153:
 172              		.section	.text.CRC_GetDefaultConfig,"ax",%progbits
 173              		.align	1
 174              		.global	CRC_GetDefaultConfig
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu fpv4-sp-d16
 180              	CRC_GetDefaultConfig:
 181              	.LFB154:
 215:../drivers/fsl_crc.c **** 
 216:../drivers/fsl_crc.c **** void CRC_GetDefaultConfig(crc_config_t *config)
 217:../drivers/fsl_crc.c **** {
 182              		.loc 1 217 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              	.LVL8:
 218:../drivers/fsl_crc.c ****     static const crc_config_t crc16ccit = {
 219:../drivers/fsl_crc.c ****         CRC_DRIVER_DEFAULT_POLYNOMIAL,          CRC_DRIVER_DEFAULT_SEED,
 220:../drivers/fsl_crc.c ****         CRC_DRIVER_DEFAULT_REFLECT_IN,          CRC_DRIVER_DEFAULT_REFLECT_OUT,
 221:../drivers/fsl_crc.c ****         CRC_DRIVER_DEFAULT_COMPLEMENT_CHECKSUM, CRC_DRIVER_DEFAULT_CRC_BITS,
 222:../drivers/fsl_crc.c ****         CRC_DRIVER_DEFAULT_CRC_RESULT,
 223:../drivers/fsl_crc.c ****     };
 224:../drivers/fsl_crc.c **** 
 225:../drivers/fsl_crc.c ****     *config = crc16ccit;
 187              		.loc 1 225 0
 188 0000 034B     		ldr	r3, .L14
 217:../drivers/fsl_crc.c ****     static const crc_config_t crc16ccit = {
 189              		.loc 1 217 0
 190 0002 10B5     		push	{r4, lr}
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 4, -8
 193              		.cfi_offset 14, -4
 217:../drivers/fsl_crc.c ****     static const crc_config_t crc16ccit = {
 194              		.loc 1 217 0
 195 0004 0446     		mov	r4, r0
 196              		.loc 1 225 0
 197 0006 0FCB     		ldm	r3, {r0, r1, r2, r3}
 198              	.LVL9:
 199 0008 84E80F00 		stm	r4, {r0, r1, r2, r3}
 226:../drivers/fsl_crc.c **** }
 200              		.loc 1 226 0
 201 000c 10BD     		pop	{r4, pc}
 202              	.LVL10:
 203              	.L15:
 204 000e 00BF     		.align	2
 205              	.L14:
 206 0010 00000000 		.word	.LANCHOR0
 207              		.cfi_endproc
 208              	.LFE154:
 210              		.section	.text.CRC_WriteData,"ax",%progbits
 211              		.align	1
 212              		.global	CRC_WriteData
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu fpv4-sp-d16
 218              	CRC_WriteData:
 219              	.LFB155:
 227:../drivers/fsl_crc.c **** 
 228:../drivers/fsl_crc.c **** void CRC_WriteData(CRC_Type *base, const uint8_t *data, size_t dataSize)
 229:../drivers/fsl_crc.c **** {
 220              		.loc 1 229 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              	.LVL11:
 225 0000 30B5     		push	{r4, r5, lr}
 226              		.cfi_def_cfa_offset 12
 227              		.cfi_offset 4, -12
 228              		.cfi_offset 5, -8
 229              		.cfi_offset 14, -4
 230              	.L17:
 230:../drivers/fsl_crc.c ****     const uint32_t *data32;
 231:../drivers/fsl_crc.c **** 
 232:../drivers/fsl_crc.c ****     /* 8-bit reads and writes till source address is aligned 4 bytes */
 233:../drivers/fsl_crc.c ****     while ((dataSize) && ((uint32_t)data & 3U))
 231              		.loc 1 233 0
 232 0002 62B1     		cbz	r2, .L16
 233              		.loc 1 233 0 is_stmt 0 discriminator 1
 234 0004 8B07     		lsls	r3, r1, #30
 235 0006 0BD1     		bne	.L19
 236 0008 0B46     		mov	r3, r1
 237 000a 8D18     		adds	r5, r1, r2
 238              	.LVL12:
 239              	.L20:
 234:../drivers/fsl_crc.c ****     {
 235:../drivers/fsl_crc.c ****         base->ACCESS8BIT.DATALL = *data;
 236:../drivers/fsl_crc.c ****         data++;
 237:../drivers/fsl_crc.c ****         dataSize--;
 238:../drivers/fsl_crc.c ****     }
 239:../drivers/fsl_crc.c **** 
 240:../drivers/fsl_crc.c ****     /* use 32-bit reads and writes as long as possible */
 241:../drivers/fsl_crc.c ****     data32 = (const uint32_t *)data;
 242:../drivers/fsl_crc.c ****     while (dataSize >= sizeof(uint32_t))
 240              		.loc 1 242 0 is_stmt 1
 241 000c EC1A     		subs	r4, r5, r3
 242 000e 032C     		cmp	r4, #3
 243 0010 0BD8     		bhi	.L21
 244 0012 9308     		lsrs	r3, r2, #2
 245              	.LVL13:
 246 0014 01EB8303 		add	r3, r1, r3, lsl #2
 247 0018 1144     		add	r1, r1, r2
 248              	.LVL14:
 249              	.L22:
 243:../drivers/fsl_crc.c ****     {
 244:../drivers/fsl_crc.c ****         base->DATA = *data32;
 245:../drivers/fsl_crc.c ****         data32++;
 246:../drivers/fsl_crc.c ****         dataSize -= sizeof(uint32_t);
 247:../drivers/fsl_crc.c ****     }
 248:../drivers/fsl_crc.c **** 
 249:../drivers/fsl_crc.c ****     data = (const uint8_t *)data32;
 250:../drivers/fsl_crc.c **** 
 251:../drivers/fsl_crc.c ****     /* 8-bit reads and writes till end of data buffer */
 252:../drivers/fsl_crc.c ****     while (dataSize)
 250              		.loc 1 252 0
 251 001a 8B42     		cmp	r3, r1
 252 001c 09D1     		bne	.L23
 253              	.LVL15:
 254              	.L16:
 253:../drivers/fsl_crc.c ****     {
 254:../drivers/fsl_crc.c ****         base->ACCESS8BIT.DATALL = *data;
 255:../drivers/fsl_crc.c ****         data++;
 256:../drivers/fsl_crc.c ****         dataSize--;
 257:../drivers/fsl_crc.c ****     }
 258:../drivers/fsl_crc.c **** }
 255              		.loc 1 258 0
 256 001e 30BD     		pop	{r4, r5, pc}
 257              	.LVL16:
 258              	.L19:
 235:../drivers/fsl_crc.c ****         data++;
 259              		.loc 1 235 0
 260 0020 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 261              	.LVL17:
 262 0024 0370     		strb	r3, [r0]
 263              	.LVL18:
 237:../drivers/fsl_crc.c ****     }
 264              		.loc 1 237 0
 265 0026 013A     		subs	r2, r2, #1
 266              	.LVL19:
 267 0028 EBE7     		b	.L17
 268              	.LVL20:
 269              	.L21:
 244:../drivers/fsl_crc.c ****         data32++;
 270              		.loc 1 244 0
 271 002a 53F8044B 		ldr	r4, [r3], #4
 272              	.LVL21:
 273 002e 0460     		str	r4, [r0]
 274              	.LVL22:
 275 0030 ECE7     		b	.L20
 276              	.LVL23:
 277              	.L23:
 254:../drivers/fsl_crc.c ****         data++;
 278              		.loc 1 254 0
 279 0032 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 280              	.LVL24:
 281 0036 0270     		strb	r2, [r0]
 282              	.LVL25:
 283 0038 EFE7     		b	.L22
 284              		.cfi_endproc
 285              	.LFE155:
 287              		.section	.text.CRC_Get32bitResult,"ax",%progbits
 288              		.align	1
 289              		.global	CRC_Get32bitResult
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	CRC_Get32bitResult:
 296              	.LFB156:
 259:../drivers/fsl_crc.c **** 
 260:../drivers/fsl_crc.c **** uint32_t CRC_Get32bitResult(CRC_Type *base)
 261:../drivers/fsl_crc.c **** {
 297              		.loc 1 261 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302              	.LVL26:
 262:../drivers/fsl_crc.c ****     return base->DATA;
 303              		.loc 1 262 0
 304 0000 0068     		ldr	r0, [r0]
 305              	.LVL27:
 263:../drivers/fsl_crc.c **** }
 306              		.loc 1 263 0
 307 0002 7047     		bx	lr
 308              		.cfi_endproc
 309              	.LFE156:
 311              		.section	.text.CRC_Get16bitResult,"ax",%progbits
 312              		.align	1
 313              		.global	CRC_Get16bitResult
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	CRC_Get16bitResult:
 320              	.LFB157:
 264:../drivers/fsl_crc.c **** 
 265:../drivers/fsl_crc.c **** uint16_t CRC_Get16bitResult(CRC_Type *base)
 266:../drivers/fsl_crc.c **** {
 321              		.loc 1 266 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326              	.LVL28:
 267:../drivers/fsl_crc.c ****     uint32_t retval;
 268:../drivers/fsl_crc.c ****     uint32_t totr; /* type of transpose read bitfield */
 269:../drivers/fsl_crc.c **** 
 270:../drivers/fsl_crc.c ****     retval = base->DATA;
 327              		.loc 1 270 0
 328 0000 0368     		ldr	r3, [r0]
 329              	.LVL29:
 271:../drivers/fsl_crc.c ****     totr = (base->CTRL & CRC_CTRL_TOTR_MASK) >> CRC_CTRL_TOTR_SHIFT;
 330              		.loc 1 271 0
 331 0002 8268     		ldr	r2, [r0, #8]
 332              	.LVL30:
 333 0004 C2F30172 		ubfx	r2, r2, #28, #2
 334              	.LVL31:
 272:../drivers/fsl_crc.c **** 
 273:../drivers/fsl_crc.c ****     /* check transpose type to get 16-bit out of 32-bit register */
 274:../drivers/fsl_crc.c ****     if (totr >= 2U)
 335              		.loc 1 274 0
 336 0008 012A     		cmp	r2, #1
 337              	.LVL32:
 338 000a 8CBF     		ite	hi
 339 000c 180C     		lsrhi	r0, r3, #16
 340              	.LVL33:
 275:../drivers/fsl_crc.c ****     {
 276:../drivers/fsl_crc.c ****         /* transpose of bytes for read is set, the result CRC is in CRC_DATA[HU:HL] */
 277:../drivers/fsl_crc.c ****         retval &= 0xFFFF0000U;
 278:../drivers/fsl_crc.c ****         retval = retval >> 16U;
 279:../drivers/fsl_crc.c ****     }
 280:../drivers/fsl_crc.c ****     else
 281:../drivers/fsl_crc.c ****     {
 282:../drivers/fsl_crc.c ****         /* no transpose of bytes for read, the result CRC is in CRC_DATA[LU:LL] */
 283:../drivers/fsl_crc.c ****         retval &= 0x0000FFFFU;
 341              		.loc 1 283 0
 342 000e 98B2     		uxthls	r0, r3
 343              	.LVL34:
 284:../drivers/fsl_crc.c ****     }
 285:../drivers/fsl_crc.c ****     return (uint16_t)retval;
 286:../drivers/fsl_crc.c **** }
 344              		.loc 1 286 0
 345 0010 7047     		bx	lr
 346              		.cfi_endproc
 347              	.LFE157:
 349              		.section	.rodata.crc16ccit.8227,"a",%progbits
 350              		.align	2
 351              		.set	.LANCHOR0,. + 0
 354              	crc16ccit.8227:
 355 0000 21100000 		.word	4129
 356 0004 FFFF0000 		.word	65535
 357 0008 00       		.byte	0
 358 0009 00       		.byte	0
 359 000a 00       		.byte	0
 360 000b 00       		.byte	0
 361 000c 00       		.byte	0
 362 000d 000000   		.space	3
 363              		.text
 364              	.Letext0:
 365              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 366              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 367              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 368              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 369              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 370              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 371              		.file 9 "../CMSIS/core_cm4.h"
 372              		.file 10 "../CMSIS/system_MK64F12.h"
 373              		.file 11 "../CMSIS/MK64F12.h"
 374              		.file 12 "../drivers/fsl_crc.h"
