   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_sdhc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SDHC_GetInstance,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	SDHC_GetInstance:
  25              	.LFB167:
  26              		.file 1 "../drivers/fsl_sdhc.c"
   1:../drivers/fsl_sdhc.c **** /*
   2:../drivers/fsl_sdhc.c ****  * The Clear BSD License
   3:../drivers/fsl_sdhc.c ****  * Copyright (c) 2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_sdhc.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_sdhc.c ****  * All rights reserved.
   6:../drivers/fsl_sdhc.c ****  *
   7:../drivers/fsl_sdhc.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_sdhc.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_sdhc.c ****  * that the following conditions are met:
  10:../drivers/fsl_sdhc.c ****  *
  11:../drivers/fsl_sdhc.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_sdhc.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_sdhc.c ****  *
  14:../drivers/fsl_sdhc.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_sdhc.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_sdhc.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_sdhc.c ****  *
  18:../drivers/fsl_sdhc.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_sdhc.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_sdhc.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_sdhc.c ****  *
  22:../drivers/fsl_sdhc.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_sdhc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_sdhc.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_sdhc.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_sdhc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_sdhc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_sdhc.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_sdhc.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_sdhc.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_sdhc.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_sdhc.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_sdhc.c ****  */
  34:../drivers/fsl_sdhc.c **** 
  35:../drivers/fsl_sdhc.c **** #include "fsl_sdhc.h"
  36:../drivers/fsl_sdhc.c **** 
  37:../drivers/fsl_sdhc.c **** /*******************************************************************************
  38:../drivers/fsl_sdhc.c ****  * Definitions
  39:../drivers/fsl_sdhc.c ****  ******************************************************************************/
  40:../drivers/fsl_sdhc.c **** /*! @brief Clock setting */
  41:../drivers/fsl_sdhc.c **** /* Max SD clock divisor from base clock */
  42:../drivers/fsl_sdhc.c **** #define SDHC_MAX_DVS ((SDHC_SYSCTL_DVS_MASK >> SDHC_SYSCTL_DVS_SHIFT) + 1U)
  43:../drivers/fsl_sdhc.c **** #define SDHC_PREV_DVS(x) ((x) -= 1U)
  44:../drivers/fsl_sdhc.c **** #define SDHC_MAX_CLKFS ((SDHC_SYSCTL_SDCLKFS_MASK >> SDHC_SYSCTL_SDCLKFS_SHIFT) + 1U)
  45:../drivers/fsl_sdhc.c **** #define SDHC_PREV_CLKFS(x) ((x) >>= 1U)
  46:../drivers/fsl_sdhc.c **** 
  47:../drivers/fsl_sdhc.c **** /* Typedef for interrupt handler. */
  48:../drivers/fsl_sdhc.c **** typedef void (*sdhc_isr_t)(SDHC_Type *base, sdhc_handle_t *handle);
  49:../drivers/fsl_sdhc.c **** 
  50:../drivers/fsl_sdhc.c **** /*! @brief ADMA table configuration */
  51:../drivers/fsl_sdhc.c **** typedef struct _sdhc_adma_table_config
  52:../drivers/fsl_sdhc.c **** {
  53:../drivers/fsl_sdhc.c ****     uint32_t *admaTable;     /*!< ADMA table address, can't be null if transfer way is ADMA1/ADMA2 
  54:../drivers/fsl_sdhc.c ****     uint32_t admaTableWords; /*!< ADMA table length united as words, can't be 0 if transfer way is 
  55:../drivers/fsl_sdhc.c **** } sdhc_adma_table_config_t;
  56:../drivers/fsl_sdhc.c **** 
  57:../drivers/fsl_sdhc.c **** /*******************************************************************************
  58:../drivers/fsl_sdhc.c ****  * Prototypes
  59:../drivers/fsl_sdhc.c ****  ******************************************************************************/
  60:../drivers/fsl_sdhc.c **** /*!
  61:../drivers/fsl_sdhc.c ****  * @brief Get the instance.
  62:../drivers/fsl_sdhc.c ****  *
  63:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  64:../drivers/fsl_sdhc.c ****  * @return Instance number.
  65:../drivers/fsl_sdhc.c ****  */
  66:../drivers/fsl_sdhc.c **** static uint32_t SDHC_GetInstance(SDHC_Type *base);
  67:../drivers/fsl_sdhc.c **** 
  68:../drivers/fsl_sdhc.c **** /*!
  69:../drivers/fsl_sdhc.c ****  * @brief Set transfer interrupt.
  70:../drivers/fsl_sdhc.c ****  *
  71:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  72:../drivers/fsl_sdhc.c ****  * @param usingInterruptSignal True to use IRQ signal.
  73:../drivers/fsl_sdhc.c ****  */
  74:../drivers/fsl_sdhc.c **** static void SDHC_SetTransferInterrupt(SDHC_Type *base, bool usingInterruptSignal);
  75:../drivers/fsl_sdhc.c **** 
  76:../drivers/fsl_sdhc.c **** /*!
  77:../drivers/fsl_sdhc.c ****  * @brief Start transfer according to current transfer state
  78:../drivers/fsl_sdhc.c ****  *
  79:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  80:../drivers/fsl_sdhc.c ****  * @param command Command to be sent.
  81:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
  82:../drivers/fsl_sdhc.c ****  * @param DMA mode selection
  83:../drivers/fsl_sdhc.c ****  */
  84:../drivers/fsl_sdhc.c **** static void SDHC_StartTransfer(SDHC_Type *base, sdhc_command_t *command, sdhc_data_t *data, sdhc_dm
  85:../drivers/fsl_sdhc.c **** 
  86:../drivers/fsl_sdhc.c **** /*!
  87:../drivers/fsl_sdhc.c ****  * @brief Receive command response
  88:../drivers/fsl_sdhc.c ****  *
  89:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  90:../drivers/fsl_sdhc.c ****  * @param command Command to be sent.
  91:../drivers/fsl_sdhc.c ****  */
  92:../drivers/fsl_sdhc.c **** static status_t SDHC_ReceiveCommandResponse(SDHC_Type *base, sdhc_command_t *command);
  93:../drivers/fsl_sdhc.c **** 
  94:../drivers/fsl_sdhc.c **** /*!
  95:../drivers/fsl_sdhc.c ****  * @brief Read DATAPORT when buffer enable bit is set.
  96:../drivers/fsl_sdhc.c ****  *
  97:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  98:../drivers/fsl_sdhc.c ****  * @param data Data to be read.
  99:../drivers/fsl_sdhc.c ****  * @param transferredWords The number of data words have been transferred last time transaction.
 100:../drivers/fsl_sdhc.c ****  * @return The number of total data words have been transferred after this time transaction.
 101:../drivers/fsl_sdhc.c ****  */
 102:../drivers/fsl_sdhc.c **** static uint32_t SDHC_ReadDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords);
 103:../drivers/fsl_sdhc.c **** 
 104:../drivers/fsl_sdhc.c **** /*!
 105:../drivers/fsl_sdhc.c ****  * @brief Read data by using DATAPORT polling way.
 106:../drivers/fsl_sdhc.c ****  *
 107:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 108:../drivers/fsl_sdhc.c ****  * @param data Data to be read.
 109:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Read DATAPORT failed.
 110:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 111:../drivers/fsl_sdhc.c ****  */
 112:../drivers/fsl_sdhc.c **** static status_t SDHC_ReadByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data);
 113:../drivers/fsl_sdhc.c **** 
 114:../drivers/fsl_sdhc.c **** /*!
 115:../drivers/fsl_sdhc.c ****  * @brief Write DATAPORT when buffer enable bit is set.
 116:../drivers/fsl_sdhc.c ****  *
 117:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 118:../drivers/fsl_sdhc.c ****  * @param data Data to be read.
 119:../drivers/fsl_sdhc.c ****  * @param transferredWords The number of data words have been transferred last time.
 120:../drivers/fsl_sdhc.c ****  * @return The number of total data words have been transferred after this time transaction.
 121:../drivers/fsl_sdhc.c ****  */
 122:../drivers/fsl_sdhc.c **** static uint32_t SDHC_WriteDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords);
 123:../drivers/fsl_sdhc.c **** 
 124:../drivers/fsl_sdhc.c **** /*!
 125:../drivers/fsl_sdhc.c ****  * @brief Write data by using DATAPORT polling way.
 126:../drivers/fsl_sdhc.c ****  *
 127:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 128:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 129:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Write DATAPORT failed.
 130:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 131:../drivers/fsl_sdhc.c ****  */
 132:../drivers/fsl_sdhc.c **** static status_t SDHC_WriteByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data);
 133:../drivers/fsl_sdhc.c **** 
 134:../drivers/fsl_sdhc.c **** /*!
 135:../drivers/fsl_sdhc.c ****  * @brief Send command by using polling way.
 136:../drivers/fsl_sdhc.c ****  *
 137:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 138:../drivers/fsl_sdhc.c ****  * @param command Command to be sent.
 139:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Send command failed.
 140:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 141:../drivers/fsl_sdhc.c ****  */
 142:../drivers/fsl_sdhc.c **** static status_t SDHC_SendCommandBlocking(SDHC_Type *base, sdhc_command_t *command);
 143:../drivers/fsl_sdhc.c **** 
 144:../drivers/fsl_sdhc.c **** /*!
 145:../drivers/fsl_sdhc.c ****  * @brief Transfer data by DATAPORT and polling way.
 146:../drivers/fsl_sdhc.c ****  *
 147:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 148:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 149:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Transfer data failed.
 150:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 151:../drivers/fsl_sdhc.c ****  */
 152:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data);
 153:../drivers/fsl_sdhc.c **** 
 154:../drivers/fsl_sdhc.c **** /*!
 155:../drivers/fsl_sdhc.c ****  * @brief Transfer data by ADMA2 and polling way.
 156:../drivers/fsl_sdhc.c ****  *
 157:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 158:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 159:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Transfer data failed.
 160:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 161:../drivers/fsl_sdhc.c ****  */
 162:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByAdma2Blocking(SDHC_Type *base, sdhc_data_t *data);
 163:../drivers/fsl_sdhc.c **** 
 164:../drivers/fsl_sdhc.c **** /*!
 165:../drivers/fsl_sdhc.c ****  * @brief Transfer data by polling way.
 166:../drivers/fsl_sdhc.c ****  *
 167:../drivers/fsl_sdhc.c ****  * @param dmaMode DMA mode.
 168:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 169:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 170:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Transfer data failed.
 171:../drivers/fsl_sdhc.c ****  * @retval kStatus_InvalidArgument Argument is invalid.
 172:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 173:../drivers/fsl_sdhc.c ****  */
 174:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferDataBlocking(sdhc_dma_mode_t dmaMode, SDHC_Type *base, sdhc_data_t *da
 175:../drivers/fsl_sdhc.c **** 
 176:../drivers/fsl_sdhc.c **** /*!
 177:../drivers/fsl_sdhc.c ****  * @brief Handle card detect interrupt.
 178:../drivers/fsl_sdhc.c ****  *
 179:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 180:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 181:../drivers/fsl_sdhc.c ****  * @param interruptFlags Card detect related interrupt flags.
 182:../drivers/fsl_sdhc.c ****  */
 183:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCardDetect(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interrup
 184:../drivers/fsl_sdhc.c **** 
 185:../drivers/fsl_sdhc.c **** /*!
 186:../drivers/fsl_sdhc.c ****  * @brief Handle command interrupt.
 187:../drivers/fsl_sdhc.c ****  *
 188:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 189:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 190:../drivers/fsl_sdhc.c ****  * @param interruptFlags Command related interrupt flags.
 191:../drivers/fsl_sdhc.c ****  */
 192:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCommand(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFl
 193:../drivers/fsl_sdhc.c **** 
 194:../drivers/fsl_sdhc.c **** /*!
 195:../drivers/fsl_sdhc.c ****  * @brief Handle data interrupt.
 196:../drivers/fsl_sdhc.c ****  *
 197:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 198:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 199:../drivers/fsl_sdhc.c ****  * @param interruptFlags Data related interrupt flags.
 200:../drivers/fsl_sdhc.c ****  */
 201:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleData(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFlags
 202:../drivers/fsl_sdhc.c **** 
 203:../drivers/fsl_sdhc.c **** /*!
 204:../drivers/fsl_sdhc.c ****  * @brief Handle SDIO card interrupt signal.
 205:../drivers/fsl_sdhc.c ****  *
 206:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 207:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 208:../drivers/fsl_sdhc.c ****  */
 209:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioInterrupt(SDHC_Type *base, sdhc_handle_t *handle);
 210:../drivers/fsl_sdhc.c **** 
 211:../drivers/fsl_sdhc.c **** /*!
 212:../drivers/fsl_sdhc.c ****  * @brief Handle SDIO block gap event.
 213:../drivers/fsl_sdhc.c ****  *
 214:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 215:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 216:../drivers/fsl_sdhc.c ****  */
 217:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioBlockGap(SDHC_Type *base, sdhc_handle_t *handle);
 218:../drivers/fsl_sdhc.c **** 
 219:../drivers/fsl_sdhc.c **** /*******************************************************************************
 220:../drivers/fsl_sdhc.c ****  * Variables
 221:../drivers/fsl_sdhc.c ****  ******************************************************************************/
 222:../drivers/fsl_sdhc.c **** /*! @brief SDHC internal handle pointer array */
 223:../drivers/fsl_sdhc.c **** static sdhc_handle_t *s_sdhcHandle[FSL_FEATURE_SOC_SDHC_COUNT];
 224:../drivers/fsl_sdhc.c **** 
 225:../drivers/fsl_sdhc.c **** /*! @brief SDHC base pointer array */
 226:../drivers/fsl_sdhc.c **** static SDHC_Type *const s_sdhcBase[] = SDHC_BASE_PTRS;
 227:../drivers/fsl_sdhc.c **** 
 228:../drivers/fsl_sdhc.c **** /*! @brief SDHC IRQ name array */
 229:../drivers/fsl_sdhc.c **** static const IRQn_Type s_sdhcIRQ[] = SDHC_IRQS;
 230:../drivers/fsl_sdhc.c **** 
 231:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 232:../drivers/fsl_sdhc.c **** /*! @brief SDHC clock array name */
 233:../drivers/fsl_sdhc.c **** static const clock_ip_name_t s_sdhcClock[] = SDHC_CLOCKS;
 234:../drivers/fsl_sdhc.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 235:../drivers/fsl_sdhc.c **** 
 236:../drivers/fsl_sdhc.c **** /* SDHC ISR for transactional APIs. */
 237:../drivers/fsl_sdhc.c **** static sdhc_isr_t s_sdhcIsr;
 238:../drivers/fsl_sdhc.c **** 
 239:../drivers/fsl_sdhc.c **** /*******************************************************************************
 240:../drivers/fsl_sdhc.c ****  * Code
 241:../drivers/fsl_sdhc.c ****  ******************************************************************************/
 242:../drivers/fsl_sdhc.c **** static uint32_t SDHC_GetInstance(SDHC_Type *base)
 243:../drivers/fsl_sdhc.c **** {
  27              		.loc 1 243 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 244:../drivers/fsl_sdhc.c ****     uint8_t instance = 0;
 245:../drivers/fsl_sdhc.c **** 
 246:../drivers/fsl_sdhc.c ****     while ((instance < ARRAY_SIZE(s_sdhcBase)) && (s_sdhcBase[instance] != base))
 247:../drivers/fsl_sdhc.c ****     {
 248:../drivers/fsl_sdhc.c ****         instance++;
 249:../drivers/fsl_sdhc.c ****     }
 250:../drivers/fsl_sdhc.c **** 
 251:../drivers/fsl_sdhc.c ****     assert(instance < ARRAY_SIZE(s_sdhcBase));
 252:../drivers/fsl_sdhc.c **** 
 253:../drivers/fsl_sdhc.c ****     return instance;
 254:../drivers/fsl_sdhc.c **** }
  33              		.loc 1 254 0
  34 0000 024B     		ldr	r3, .L2
  35 0002 C01A     		subs	r0, r0, r3
  36              	.LVL1:
  37 0004 18BF     		it	ne
  38 0006 0120     		movne	r0, #1
  39              	.LVL2:
  40 0008 7047     		bx	lr
  41              	.L3:
  42 000a 00BF     		.align	2
  43              	.L2:
  44 000c 00100B40 		.word	1074466816
  45              		.cfi_endproc
  46              	.LFE167:
  48              		.section	.text.SDHC_ReceiveCommandResponse,"ax",%progbits
  49              		.align	1
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu fpv4-sp-d16
  55              	SDHC_ReceiveCommandResponse:
  56              	.LFB170:
 255:../drivers/fsl_sdhc.c **** 
 256:../drivers/fsl_sdhc.c **** static void SDHC_SetTransferInterrupt(SDHC_Type *base, bool usingInterruptSignal)
 257:../drivers/fsl_sdhc.c **** {
 258:../drivers/fsl_sdhc.c ****     uint32_t interruptEnabled; /* The Interrupt status flags to be enabled */
 259:../drivers/fsl_sdhc.c ****     bool cardDetectDat3 = (bool)(base->PROCTL & SDHC_PROCTL_D3CD_MASK);
 260:../drivers/fsl_sdhc.c **** 
 261:../drivers/fsl_sdhc.c ****     /* Disable all interrupts */
 262:../drivers/fsl_sdhc.c ****     SDHC_DisableInterruptStatus(base, (uint32_t)kSDHC_AllInterruptFlags);
 263:../drivers/fsl_sdhc.c ****     SDHC_DisableInterruptSignal(base, (uint32_t)kSDHC_AllInterruptFlags);
 264:../drivers/fsl_sdhc.c ****     DisableIRQ(s_sdhcIRQ[SDHC_GetInstance(base)]);
 265:../drivers/fsl_sdhc.c **** 
 266:../drivers/fsl_sdhc.c ****     interruptEnabled =
 267:../drivers/fsl_sdhc.c ****         (kSDHC_CommandIndexErrorFlag | kSDHC_CommandCrcErrorFlag | kSDHC_CommandEndBitErrorFlag |
 268:../drivers/fsl_sdhc.c ****          kSDHC_CommandTimeoutFlag | kSDHC_CommandCompleteFlag | kSDHC_DataTimeoutFlag | kSDHC_DataC
 269:../drivers/fsl_sdhc.c ****          kSDHC_DataEndBitErrorFlag | kSDHC_DataCompleteFlag | kSDHC_AutoCommand12ErrorFlag | kSDHC_
 270:../drivers/fsl_sdhc.c ****          kSDHC_BufferWriteReadyFlag | kSDHC_DmaErrorFlag | kSDHC_DmaCompleteFlag);
 271:../drivers/fsl_sdhc.c ****     if (cardDetectDat3)
 272:../drivers/fsl_sdhc.c ****     {
 273:../drivers/fsl_sdhc.c ****         interruptEnabled |= (kSDHC_CardInsertionFlag | kSDHC_CardRemovalFlag);
 274:../drivers/fsl_sdhc.c ****     }
 275:../drivers/fsl_sdhc.c **** 
 276:../drivers/fsl_sdhc.c ****     SDHC_EnableInterruptStatus(base, interruptEnabled);
 277:../drivers/fsl_sdhc.c ****     if (usingInterruptSignal)
 278:../drivers/fsl_sdhc.c ****     {
 279:../drivers/fsl_sdhc.c ****         SDHC_EnableInterruptSignal(base, interruptEnabled);
 280:../drivers/fsl_sdhc.c ****     }
 281:../drivers/fsl_sdhc.c **** }
 282:../drivers/fsl_sdhc.c **** 
 283:../drivers/fsl_sdhc.c **** static void SDHC_StartTransfer(SDHC_Type *base, sdhc_command_t *command, sdhc_data_t *data, sdhc_dm
 284:../drivers/fsl_sdhc.c **** {
 285:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 286:../drivers/fsl_sdhc.c ****     sdhc_transfer_config_t sdhcTransferConfig = {0};
 287:../drivers/fsl_sdhc.c **** 
 288:../drivers/fsl_sdhc.c ****     /* Define the flag corresponding to each response type. */
 289:../drivers/fsl_sdhc.c ****     switch (command->responseType)
 290:../drivers/fsl_sdhc.c ****     {
 291:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeNone:
 292:../drivers/fsl_sdhc.c ****             break;
 293:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR1: /* Response 1 */
 294:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 295:../drivers/fsl_sdhc.c ****             break;
 296:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR1b: /* Response 1 with busy */
 297:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48BusyFlag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndex
 298:../drivers/fsl_sdhc.c ****             break;
 299:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR2: /* Response 2 */
 300:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength136Flag | kSDHC_EnableCrcCheckFlag);
 301:../drivers/fsl_sdhc.c ****             break;
 302:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR3: /* Response 3 */
 303:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag);
 304:../drivers/fsl_sdhc.c ****             break;
 305:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR4: /* Response 4 */
 306:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag);
 307:../drivers/fsl_sdhc.c ****             break;
 308:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR5: /* Response 5 */
 309:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 310:../drivers/fsl_sdhc.c ****             break;
 311:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR5b: /* Response 5 with busy */
 312:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48BusyFlag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndex
 313:../drivers/fsl_sdhc.c ****             break;
 314:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR6: /* Response 6 */
 315:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 316:../drivers/fsl_sdhc.c ****             break;
 317:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR7: /* Response 7 */
 318:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 319:../drivers/fsl_sdhc.c ****             break;
 320:../drivers/fsl_sdhc.c ****         default:
 321:../drivers/fsl_sdhc.c ****             break;
 322:../drivers/fsl_sdhc.c ****     }
 323:../drivers/fsl_sdhc.c ****     if (command->type == kCARD_CommandTypeAbort)
 324:../drivers/fsl_sdhc.c ****     {
 325:../drivers/fsl_sdhc.c ****         flags |= kSDHC_CommandTypeAbortFlag;
 326:../drivers/fsl_sdhc.c ****     }
 327:../drivers/fsl_sdhc.c **** 
 328:../drivers/fsl_sdhc.c ****     if (data)
 329:../drivers/fsl_sdhc.c ****     {
 330:../drivers/fsl_sdhc.c ****         flags |= kSDHC_DataPresentFlag;
 331:../drivers/fsl_sdhc.c **** 
 332:../drivers/fsl_sdhc.c ****         if (dmaMode != kSDHC_DmaModeNo)
 333:../drivers/fsl_sdhc.c ****         {
 334:../drivers/fsl_sdhc.c ****             flags |= kSDHC_EnableDmaFlag;
 335:../drivers/fsl_sdhc.c ****         }
 336:../drivers/fsl_sdhc.c ****         if (data->rxData)
 337:../drivers/fsl_sdhc.c ****         {
 338:../drivers/fsl_sdhc.c ****             flags |= kSDHC_DataReadFlag;
 339:../drivers/fsl_sdhc.c ****         }
 340:../drivers/fsl_sdhc.c ****         if (data->blockCount > 1U)
 341:../drivers/fsl_sdhc.c ****         {
 342:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_MultipleBlockFlag | kSDHC_EnableBlockCountFlag);
 343:../drivers/fsl_sdhc.c ****             if (data->enableAutoCommand12)
 344:../drivers/fsl_sdhc.c ****             {
 345:../drivers/fsl_sdhc.c ****                 /* Enable Auto command 12. */
 346:../drivers/fsl_sdhc.c ****                 flags |= kSDHC_EnableAutoCommand12Flag;
 347:../drivers/fsl_sdhc.c ****             }
 348:../drivers/fsl_sdhc.c ****         }
 349:../drivers/fsl_sdhc.c **** 
 350:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockSize = data->blockSize;
 351:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockCount = data->blockCount;
 352:../drivers/fsl_sdhc.c ****     }
 353:../drivers/fsl_sdhc.c ****     else
 354:../drivers/fsl_sdhc.c ****     {
 355:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockSize = 0U;
 356:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockCount = 0U;
 357:../drivers/fsl_sdhc.c ****     }
 358:../drivers/fsl_sdhc.c **** 
 359:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.commandArgument = command->argument;
 360:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.commandIndex = command->index;
 361:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.flags = flags;
 362:../drivers/fsl_sdhc.c ****     SDHC_SetTransferConfig(base, &sdhcTransferConfig);
 363:../drivers/fsl_sdhc.c **** }
 364:../drivers/fsl_sdhc.c **** 
 365:../drivers/fsl_sdhc.c **** static status_t SDHC_ReceiveCommandResponse(SDHC_Type *base, sdhc_command_t *command)
 366:../drivers/fsl_sdhc.c **** {
  57              		.loc 1 366 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              	.LVL3:
 367:../drivers/fsl_sdhc.c ****     uint32_t i;
 368:../drivers/fsl_sdhc.c **** 
 369:../drivers/fsl_sdhc.c ****     if (command->responseType != kCARD_ResponseTypeNone)
  62              		.loc 1 369 0
  63 0000 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
 366:../drivers/fsl_sdhc.c ****     uint32_t i;
  64              		.loc 1 366 0
  65 0002 30B5     		push	{r4, r5, lr}
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70              		.loc 1 369 0
  71 0004 12B9     		cbnz	r2, .L5
  72              	.LVL4:
  73              	.L8:
 370:../drivers/fsl_sdhc.c ****     {
 371:../drivers/fsl_sdhc.c ****         command->response[0U] = SDHC_GetCommandResponse(base, 0U);
 372:../drivers/fsl_sdhc.c ****         if (command->responseType == kCARD_ResponseTypeR2)
 373:../drivers/fsl_sdhc.c ****         {
 374:../drivers/fsl_sdhc.c ****             command->response[1U] = SDHC_GetCommandResponse(base, 1U);
 375:../drivers/fsl_sdhc.c ****             command->response[2U] = SDHC_GetCommandResponse(base, 2U);
 376:../drivers/fsl_sdhc.c ****             command->response[3U] = SDHC_GetCommandResponse(base, 3U);
 377:../drivers/fsl_sdhc.c **** 
 378:../drivers/fsl_sdhc.c ****             i = 4U;
 379:../drivers/fsl_sdhc.c ****             /* R3-R2-R1-R0(lowest 8 bit is invalid bit) has the same format as R2 format in SD spec
 380:../drivers/fsl_sdhc.c ****             after removed internal CRC7 and end bit. */
 381:../drivers/fsl_sdhc.c ****             do
 382:../drivers/fsl_sdhc.c ****             {
 383:../drivers/fsl_sdhc.c ****                 command->response[i - 1U] <<= 8U;
 384:../drivers/fsl_sdhc.c ****                 if (i > 1U)
 385:../drivers/fsl_sdhc.c ****                 {
 386:../drivers/fsl_sdhc.c ****                     command->response[i - 1U] |= ((command->response[i - 2U] & 0xFF000000U) >> 24U)
 387:../drivers/fsl_sdhc.c ****                 }
 388:../drivers/fsl_sdhc.c ****             } while (i--);
 389:../drivers/fsl_sdhc.c ****         }
 390:../drivers/fsl_sdhc.c ****     }
 391:../drivers/fsl_sdhc.c ****     /* check response error flag */
 392:../drivers/fsl_sdhc.c ****     if ((command->responseErrorFlags != 0U) &&
  74              		.loc 1 392 0
  75 0006 C869     		ldr	r0, [r1, #28]
  76 0008 E8B9     		cbnz	r0, .L6
  77 000a 30BD     		pop	{r4, r5, pc}
  78              	.LVL5:
  79              	.L5:
  80              	.LBB96:
  81              	.LBB97:
  82              		.file 2 "../drivers/fsl_sdhc.h"
   1:../drivers/fsl_sdhc.h **** /*
   2:../drivers/fsl_sdhc.h ****  * The Clear BSD License
   3:../drivers/fsl_sdhc.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_sdhc.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_sdhc.h ****  * All rights reserved.
   6:../drivers/fsl_sdhc.h ****  *
   7:../drivers/fsl_sdhc.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_sdhc.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_sdhc.h ****  * that the following conditions are met:
  10:../drivers/fsl_sdhc.h ****  *
  11:../drivers/fsl_sdhc.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_sdhc.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_sdhc.h ****  *
  14:../drivers/fsl_sdhc.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_sdhc.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_sdhc.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_sdhc.h ****  *
  18:../drivers/fsl_sdhc.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_sdhc.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_sdhc.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_sdhc.h ****  *
  22:../drivers/fsl_sdhc.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_sdhc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_sdhc.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_sdhc.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_sdhc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_sdhc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_sdhc.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_sdhc.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_sdhc.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_sdhc.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_sdhc.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_sdhc.h ****  */
  34:../drivers/fsl_sdhc.h **** #ifndef _FSL_SDHC_H_
  35:../drivers/fsl_sdhc.h **** #define _FSL_SDHC_H_
  36:../drivers/fsl_sdhc.h **** 
  37:../drivers/fsl_sdhc.h **** #include "fsl_common.h"
  38:../drivers/fsl_sdhc.h **** 
  39:../drivers/fsl_sdhc.h **** /*!
  40:../drivers/fsl_sdhc.h ****  * @addtogroup sdhc
  41:../drivers/fsl_sdhc.h ****  * @{
  42:../drivers/fsl_sdhc.h ****  */
  43:../drivers/fsl_sdhc.h **** 
  44:../drivers/fsl_sdhc.h **** /******************************************************************************
  45:../drivers/fsl_sdhc.h ****  * Definitions.
  46:../drivers/fsl_sdhc.h ****  *****************************************************************************/
  47:../drivers/fsl_sdhc.h **** 
  48:../drivers/fsl_sdhc.h **** /*! @name Driver version */
  49:../drivers/fsl_sdhc.h **** /*@{*/
  50:../drivers/fsl_sdhc.h **** /*! @brief Driver version 2.1.6. */
  51:../drivers/fsl_sdhc.h **** #define FSL_SDHC_DRIVER_VERSION (MAKE_VERSION(2U, 1U, 6U))
  52:../drivers/fsl_sdhc.h **** /*@}*/
  53:../drivers/fsl_sdhc.h **** 
  54:../drivers/fsl_sdhc.h **** /*! @brief Maximum block count can be set one time */
  55:../drivers/fsl_sdhc.h **** #define SDHC_MAX_BLOCK_COUNT (SDHC_BLKATTR_BLKCNT_MASK >> SDHC_BLKATTR_BLKCNT_SHIFT)
  56:../drivers/fsl_sdhc.h **** 
  57:../drivers/fsl_sdhc.h **** /*! @brief SDHC status */
  58:../drivers/fsl_sdhc.h **** enum _sdhc_status
  59:../drivers/fsl_sdhc.h **** {
  60:../drivers/fsl_sdhc.h ****     kStatus_SDHC_BusyTransferring = MAKE_STATUS(kStatusGroup_SDHC, 0U),            /*!< Transfer is
  61:../drivers/fsl_sdhc.h ****     kStatus_SDHC_PrepareAdmaDescriptorFailed = MAKE_STATUS(kStatusGroup_SDHC, 1U), /*!< Set DMA des
  62:../drivers/fsl_sdhc.h ****     kStatus_SDHC_SendCommandFailed = MAKE_STATUS(kStatusGroup_SDHC, 2U),           /*!< Send comman
  63:../drivers/fsl_sdhc.h ****     kStatus_SDHC_TransferDataFailed = MAKE_STATUS(kStatusGroup_SDHC, 3U),          /*!< Transfer da
  64:../drivers/fsl_sdhc.h ****     kStatus_SDHC_DMADataBufferAddrNotAlign =
  65:../drivers/fsl_sdhc.h ****         MAKE_STATUS(kStatusGroup_SDHC, 4U), /*!< data buffer addr not align in DMA mode */
  66:../drivers/fsl_sdhc.h **** };
  67:../drivers/fsl_sdhc.h **** 
  68:../drivers/fsl_sdhc.h **** /*! @brief Host controller capabilities flag mask */
  69:../drivers/fsl_sdhc.h **** enum _sdhc_capability_flag
  70:../drivers/fsl_sdhc.h **** {
  71:../drivers/fsl_sdhc.h ****     kSDHC_SupportAdmaFlag = SDHC_HTCAPBLT_ADMAS_MASK,        /*!< Support ADMA */
  72:../drivers/fsl_sdhc.h ****     kSDHC_SupportHighSpeedFlag = SDHC_HTCAPBLT_HSS_MASK,     /*!< Support high-speed */
  73:../drivers/fsl_sdhc.h ****     kSDHC_SupportDmaFlag = SDHC_HTCAPBLT_DMAS_MASK,          /*!< Support DMA */
  74:../drivers/fsl_sdhc.h ****     kSDHC_SupportSuspendResumeFlag = SDHC_HTCAPBLT_SRS_MASK, /*!< Support suspend/resume */
  75:../drivers/fsl_sdhc.h ****     kSDHC_SupportV330Flag = SDHC_HTCAPBLT_VS33_MASK,         /*!< Support voltage 3.3V */
  76:../drivers/fsl_sdhc.h **** #if defined FSL_FEATURE_SDHC_HAS_V300_SUPPORT && FSL_FEATURE_SDHC_HAS_V300_SUPPORT
  77:../drivers/fsl_sdhc.h ****     kSDHC_SupportV300Flag = SDHC_HTCAPBLT_VS30_MASK, /*!< Support voltage 3.0V */
  78:../drivers/fsl_sdhc.h **** #endif
  79:../drivers/fsl_sdhc.h **** #if defined FSL_FEATURE_SDHC_HAS_V180_SUPPORT && FSL_FEATURE_SDHC_HAS_V180_SUPPORT
  80:../drivers/fsl_sdhc.h ****     kSDHC_SupportV180Flag = SDHC_HTCAPBLT_VS18_MASK, /*!< Support voltage 1.8V */
  81:../drivers/fsl_sdhc.h **** #endif
  82:../drivers/fsl_sdhc.h ****     /* Put additional two flags in HTCAPBLT_MBL's position. */
  83:../drivers/fsl_sdhc.h ****     kSDHC_Support4BitFlag = (SDHC_HTCAPBLT_MBL_SHIFT << 0U), /*!< Support 4 bit mode */
  84:../drivers/fsl_sdhc.h ****     kSDHC_Support8BitFlag = (SDHC_HTCAPBLT_MBL_SHIFT << 1U), /*!< Support 8 bit mode */
  85:../drivers/fsl_sdhc.h **** };
  86:../drivers/fsl_sdhc.h **** 
  87:../drivers/fsl_sdhc.h **** /*! @brief Wakeup event mask */
  88:../drivers/fsl_sdhc.h **** enum _sdhc_wakeup_event
  89:../drivers/fsl_sdhc.h **** {
  90:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventOnCardInt = SDHC_PROCTL_WECINT_MASK,    /*!< Wakeup on card interrupt */
  91:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventOnCardInsert = SDHC_PROCTL_WECINS_MASK, /*!< Wakeup on card insertion */
  92:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventOnCardRemove = SDHC_PROCTL_WECRM_MASK,  /*!< Wakeup on card removal */
  93:../drivers/fsl_sdhc.h **** 
  94:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventsAll = (kSDHC_WakeupEventOnCardInt | kSDHC_WakeupEventOnCardInsert |
  95:../drivers/fsl_sdhc.h ****                              kSDHC_WakeupEventOnCardRemove), /*!< All wakeup events */
  96:../drivers/fsl_sdhc.h **** };
  97:../drivers/fsl_sdhc.h **** 
  98:../drivers/fsl_sdhc.h **** /*! @brief Reset type mask */
  99:../drivers/fsl_sdhc.h **** enum _sdhc_reset
 100:../drivers/fsl_sdhc.h **** {
 101:../drivers/fsl_sdhc.h ****     kSDHC_ResetAll = SDHC_SYSCTL_RSTA_MASK,     /*!< Reset all except card detection */
 102:../drivers/fsl_sdhc.h ****     kSDHC_ResetCommand = SDHC_SYSCTL_RSTC_MASK, /*!< Reset command line */
 103:../drivers/fsl_sdhc.h ****     kSDHC_ResetData = SDHC_SYSCTL_RSTD_MASK,    /*!< Reset data line */
 104:../drivers/fsl_sdhc.h **** 
 105:../drivers/fsl_sdhc.h ****     kSDHC_ResetsAll = (kSDHC_ResetAll | kSDHC_ResetCommand | kSDHC_ResetData), /*!< All reset types
 106:../drivers/fsl_sdhc.h **** };
 107:../drivers/fsl_sdhc.h **** 
 108:../drivers/fsl_sdhc.h **** /*! @brief Transfer flag mask */
 109:../drivers/fsl_sdhc.h **** enum _sdhc_transfer_flag
 110:../drivers/fsl_sdhc.h **** {
 111:../drivers/fsl_sdhc.h ****     kSDHC_EnableDmaFlag = SDHC_XFERTYP_DMAEN_MASK, /*!< Enable DMA */
 112:../drivers/fsl_sdhc.h **** 
 113:../drivers/fsl_sdhc.h ****     kSDHC_CommandTypeSuspendFlag = (SDHC_XFERTYP_CMDTYP(1U)), /*!< Suspend command */
 114:../drivers/fsl_sdhc.h ****     kSDHC_CommandTypeResumeFlag = (SDHC_XFERTYP_CMDTYP(2U)),  /*!< Resume command */
 115:../drivers/fsl_sdhc.h ****     kSDHC_CommandTypeAbortFlag = (SDHC_XFERTYP_CMDTYP(3U)),   /*!< Abort command */
 116:../drivers/fsl_sdhc.h **** 
 117:../drivers/fsl_sdhc.h ****     kSDHC_EnableBlockCountFlag = SDHC_XFERTYP_BCEN_MASK,      /*!< Enable block count */
 118:../drivers/fsl_sdhc.h ****     kSDHC_EnableAutoCommand12Flag = SDHC_XFERTYP_AC12EN_MASK, /*!< Enable auto CMD12 */
 119:../drivers/fsl_sdhc.h ****     kSDHC_DataReadFlag = SDHC_XFERTYP_DTDSEL_MASK,            /*!< Enable data read */
 120:../drivers/fsl_sdhc.h ****     kSDHC_MultipleBlockFlag = SDHC_XFERTYP_MSBSEL_MASK,       /*!< Multiple block data read/write *
 121:../drivers/fsl_sdhc.h **** 
 122:../drivers/fsl_sdhc.h ****     kSDHC_ResponseLength136Flag = SDHC_XFERTYP_RSPTYP(1U),    /*!< 136 bit response length */
 123:../drivers/fsl_sdhc.h ****     kSDHC_ResponseLength48Flag = SDHC_XFERTYP_RSPTYP(2U),     /*!< 48 bit response length */
 124:../drivers/fsl_sdhc.h ****     kSDHC_ResponseLength48BusyFlag = SDHC_XFERTYP_RSPTYP(3U), /*!< 48 bit response length with busy
 125:../drivers/fsl_sdhc.h **** 
 126:../drivers/fsl_sdhc.h ****     kSDHC_EnableCrcCheckFlag = SDHC_XFERTYP_CCCEN_MASK,   /*!< Enable CRC check */
 127:../drivers/fsl_sdhc.h ****     kSDHC_EnableIndexCheckFlag = SDHC_XFERTYP_CICEN_MASK, /*!< Enable index check */
 128:../drivers/fsl_sdhc.h ****     kSDHC_DataPresentFlag = SDHC_XFERTYP_DPSEL_MASK,      /*!< Data present flag */
 129:../drivers/fsl_sdhc.h **** };
 130:../drivers/fsl_sdhc.h **** 
 131:../drivers/fsl_sdhc.h **** /*! @brief Present status flag mask */
 132:../drivers/fsl_sdhc.h **** enum _sdhc_present_status_flag
 133:../drivers/fsl_sdhc.h **** {
 134:../drivers/fsl_sdhc.h ****     kSDHC_CommandInhibitFlag = SDHC_PRSSTAT_CIHB_MASK,     /*!< Command inhibit */
 135:../drivers/fsl_sdhc.h ****     kSDHC_DataInhibitFlag = SDHC_PRSSTAT_CDIHB_MASK,       /*!< Data inhibit */
 136:../drivers/fsl_sdhc.h ****     kSDHC_DataLineActiveFlag = SDHC_PRSSTAT_DLA_MASK,      /*!< Data line active */
 137:../drivers/fsl_sdhc.h ****     kSDHC_SdClockStableFlag = SDHC_PRSSTAT_SDSTB_MASK,     /*!< SD bus clock stable */
 138:../drivers/fsl_sdhc.h ****     kSDHC_WriteTransferActiveFlag = SDHC_PRSSTAT_WTA_MASK, /*!< Write transfer active */
 139:../drivers/fsl_sdhc.h ****     kSDHC_ReadTransferActiveFlag = SDHC_PRSSTAT_RTA_MASK,  /*!< Read transfer active */
 140:../drivers/fsl_sdhc.h ****     kSDHC_BufferWriteEnableFlag = SDHC_PRSSTAT_BWEN_MASK,  /*!< Buffer write enable */
 141:../drivers/fsl_sdhc.h ****     kSDHC_BufferReadEnableFlag = SDHC_PRSSTAT_BREN_MASK,   /*!< Buffer read enable */
 142:../drivers/fsl_sdhc.h ****     kSDHC_CardInsertedFlag = SDHC_PRSSTAT_CINS_MASK,       /*!< Card inserted */
 143:../drivers/fsl_sdhc.h ****     kSDHC_CommandLineLevelFlag = SDHC_PRSSTAT_CLSL_MASK,   /*!< Command line signal level */
 144:../drivers/fsl_sdhc.h ****     kSDHC_Data0LineLevelFlag = (1U << 24U),                /*!< Data0 line signal level */
 145:../drivers/fsl_sdhc.h ****     kSDHC_Data1LineLevelFlag = (1U << 25U),                /*!< Data1 line signal level */
 146:../drivers/fsl_sdhc.h ****     kSDHC_Data2LineLevelFlag = (1U << 26U),                /*!< Data2 line signal level */
 147:../drivers/fsl_sdhc.h ****     kSDHC_Data3LineLevelFlag = (1U << 27U),                /*!< Data3 line signal level */
 148:../drivers/fsl_sdhc.h ****     kSDHC_Data4LineLevelFlag = (1U << 28U),                /*!< Data4 line signal level */
 149:../drivers/fsl_sdhc.h ****     kSDHC_Data5LineLevelFlag = (1U << 29U),                /*!< Data5 line signal level */
 150:../drivers/fsl_sdhc.h ****     kSDHC_Data6LineLevelFlag = (1U << 30U),                /*!< Data6 line signal level */
 151:../drivers/fsl_sdhc.h ****     kSDHC_Data7LineLevelFlag = (1U << 31U),                /*!< Data7 line signal level */
 152:../drivers/fsl_sdhc.h **** };
 153:../drivers/fsl_sdhc.h **** 
 154:../drivers/fsl_sdhc.h **** /*! @brief Interrupt status flag mask */
 155:../drivers/fsl_sdhc.h **** enum _sdhc_interrupt_status_flag
 156:../drivers/fsl_sdhc.h **** {
 157:../drivers/fsl_sdhc.h ****     kSDHC_CommandCompleteFlag = SDHC_IRQSTAT_CC_MASK,       /*!< Command complete */
 158:../drivers/fsl_sdhc.h ****     kSDHC_DataCompleteFlag = SDHC_IRQSTAT_TC_MASK,          /*!< Data complete */
 159:../drivers/fsl_sdhc.h ****     kSDHC_BlockGapEventFlag = SDHC_IRQSTAT_BGE_MASK,        /*!< Block gap event */
 160:../drivers/fsl_sdhc.h ****     kSDHC_DmaCompleteFlag = SDHC_IRQSTAT_DINT_MASK,         /*!< DMA interrupt */
 161:../drivers/fsl_sdhc.h ****     kSDHC_BufferWriteReadyFlag = SDHC_IRQSTAT_BWR_MASK,     /*!< Buffer write ready */
 162:../drivers/fsl_sdhc.h ****     kSDHC_BufferReadReadyFlag = SDHC_IRQSTAT_BRR_MASK,      /*!< Buffer read ready */
 163:../drivers/fsl_sdhc.h ****     kSDHC_CardInsertionFlag = SDHC_IRQSTAT_CINS_MASK,       /*!< Card inserted */
 164:../drivers/fsl_sdhc.h ****     kSDHC_CardRemovalFlag = SDHC_IRQSTAT_CRM_MASK,          /*!< Card removed */
 165:../drivers/fsl_sdhc.h ****     kSDHC_CardInterruptFlag = SDHC_IRQSTAT_CINT_MASK,       /*!< Card interrupt */
 166:../drivers/fsl_sdhc.h ****     kSDHC_CommandTimeoutFlag = SDHC_IRQSTAT_CTOE_MASK,      /*!< Command timeout error */
 167:../drivers/fsl_sdhc.h ****     kSDHC_CommandCrcErrorFlag = SDHC_IRQSTAT_CCE_MASK,      /*!< Command CRC error */
 168:../drivers/fsl_sdhc.h ****     kSDHC_CommandEndBitErrorFlag = SDHC_IRQSTAT_CEBE_MASK,  /*!< Command end bit error */
 169:../drivers/fsl_sdhc.h ****     kSDHC_CommandIndexErrorFlag = SDHC_IRQSTAT_CIE_MASK,    /*!< Command index error */
 170:../drivers/fsl_sdhc.h ****     kSDHC_DataTimeoutFlag = SDHC_IRQSTAT_DTOE_MASK,         /*!< Data timeout error */
 171:../drivers/fsl_sdhc.h ****     kSDHC_DataCrcErrorFlag = SDHC_IRQSTAT_DCE_MASK,         /*!< Data CRC error */
 172:../drivers/fsl_sdhc.h ****     kSDHC_DataEndBitErrorFlag = SDHC_IRQSTAT_DEBE_MASK,     /*!< Data end bit error */
 173:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12ErrorFlag = SDHC_IRQSTAT_AC12E_MASK, /*!< Auto CMD12 error */
 174:../drivers/fsl_sdhc.h ****     kSDHC_DmaErrorFlag = SDHC_IRQSTAT_DMAE_MASK,            /*!< DMA error */
 175:../drivers/fsl_sdhc.h **** 
 176:../drivers/fsl_sdhc.h ****     kSDHC_CommandErrorFlag = (kSDHC_CommandTimeoutFlag | kSDHC_CommandCrcErrorFlag | kSDHC_CommandE
 177:../drivers/fsl_sdhc.h ****                               kSDHC_CommandIndexErrorFlag), /*!< Command error */
 178:../drivers/fsl_sdhc.h ****     kSDHC_DataErrorFlag = (kSDHC_DataTimeoutFlag | kSDHC_DataCrcErrorFlag | kSDHC_DataEndBitErrorFl
 179:../drivers/fsl_sdhc.h ****                            kSDHC_AutoCommand12ErrorFlag),                                  /*!< Dat
 180:../drivers/fsl_sdhc.h ****     kSDHC_ErrorFlag = (kSDHC_CommandErrorFlag | kSDHC_DataErrorFlag | kSDHC_DmaErrorFlag), /*!< All
 181:../drivers/fsl_sdhc.h ****     kSDHC_DataFlag = (kSDHC_DataCompleteFlag | kSDHC_DmaCompleteFlag | kSDHC_BufferWriteReadyFlag |
 182:../drivers/fsl_sdhc.h ****                       kSDHC_BufferReadReadyFlag | kSDHC_DataErrorFlag | kSDHC_DmaErrorFlag), /*!< D
 183:../drivers/fsl_sdhc.h ****     kSDHC_CommandFlag = (kSDHC_CommandErrorFlag | kSDHC_CommandCompleteFlag),                /*!< C
 184:../drivers/fsl_sdhc.h ****     kSDHC_CardDetectFlag = (kSDHC_CardInsertionFlag | kSDHC_CardRemovalFlag), /*!< Card detection i
 185:../drivers/fsl_sdhc.h **** 
 186:../drivers/fsl_sdhc.h ****     kSDHC_AllInterruptFlags = (kSDHC_BlockGapEventFlag | kSDHC_CardInterruptFlag | kSDHC_CommandFla
 187:../drivers/fsl_sdhc.h ****                                kSDHC_ErrorFlag), /*!< All flags mask */
 188:../drivers/fsl_sdhc.h **** };
 189:../drivers/fsl_sdhc.h **** 
 190:../drivers/fsl_sdhc.h **** /*! @brief Auto CMD12 error status flag mask */
 191:../drivers/fsl_sdhc.h **** enum _sdhc_auto_command12_error_status_flag
 192:../drivers/fsl_sdhc.h **** {
 193:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12NotExecutedFlag = SDHC_AC12ERR_AC12NE_MASK,  /*!< Not executed error */
 194:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12TimeoutFlag = SDHC_AC12ERR_AC12TOE_MASK,     /*!< Timeout error */
 195:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12EndBitErrorFlag = SDHC_AC12ERR_AC12EBE_MASK, /*!< End bit error */
 196:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12CrcErrorFlag = SDHC_AC12ERR_AC12CE_MASK,     /*!< CRC error */
 197:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12IndexErrorFlag = SDHC_AC12ERR_AC12IE_MASK,   /*!< Index error */
 198:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12NotIssuedFlag = SDHC_AC12ERR_CNIBAC12E_MASK, /*!< Not issued error */
 199:../drivers/fsl_sdhc.h **** };
 200:../drivers/fsl_sdhc.h **** 
 201:../drivers/fsl_sdhc.h **** /*! @brief ADMA error status flag mask */
 202:../drivers/fsl_sdhc.h **** enum _sdhc_adma_error_status_flag
 203:../drivers/fsl_sdhc.h **** {
 204:../drivers/fsl_sdhc.h ****     kSDHC_AdmaLenghMismatchFlag = SDHC_ADMAES_ADMALME_MASK,   /*!< Length mismatch error */
 205:../drivers/fsl_sdhc.h ****     kSDHC_AdmaDescriptorErrorFlag = SDHC_ADMAES_ADMADCE_MASK, /*!< Descriptor error */
 206:../drivers/fsl_sdhc.h **** };
 207:../drivers/fsl_sdhc.h **** 
 208:../drivers/fsl_sdhc.h **** /*!
 209:../drivers/fsl_sdhc.h ****  * @brief ADMA error state
 210:../drivers/fsl_sdhc.h ****  *
 211:../drivers/fsl_sdhc.h ****  * This state is the detail state when ADMA error has occurred.
 212:../drivers/fsl_sdhc.h ****  */
 213:../drivers/fsl_sdhc.h **** typedef enum _sdhc_adma_error_state
 214:../drivers/fsl_sdhc.h **** {
 215:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateStopDma = 0x00U,         /*!< Stop DMA */
 216:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateFetchDescriptor = 0x01U, /*!< Fetch descriptor */
 217:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateChangeAddress = 0x02U,   /*!< Change address */
 218:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateTransferData = 0x03U,    /*!< Transfer data */
 219:../drivers/fsl_sdhc.h **** } sdhc_adma_error_state_t;
 220:../drivers/fsl_sdhc.h **** 
 221:../drivers/fsl_sdhc.h **** /*! @brief Force event mask */
 222:../drivers/fsl_sdhc.h **** enum _sdhc_force_event
 223:../drivers/fsl_sdhc.h **** {
 224:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12NotExecuted = SDHC_FEVT_AC12NE_MASK,  /*!< Auto CMD12 not executed
 225:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12Timeout = SDHC_FEVT_AC12TOE_MASK,     /*!< Auto CMD12 timeout erro
 226:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12CrcError = SDHC_FEVT_AC12CE_MASK,     /*!< Auto CMD12 CRC error */
 227:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventEndBitError = SDHC_FEVT_AC12EBE_MASK,              /*!< Auto CMD12 end bit erro
 228:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12IndexError = SDHC_FEVT_AC12IE_MASK,   /*!< Auto CMD12 index error 
 229:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12NotIssued = SDHC_FEVT_CNIBAC12E_MASK, /*!< Auto CMD12 not issued e
 230:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandTimeout = SDHC_FEVT_CTOE_MASK,              /*!< Command timeout error *
 231:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandCrcError = SDHC_FEVT_CCE_MASK,              /*!< Command CRC error */
 232:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandEndBitError = SDHC_FEVT_CEBE_MASK,          /*!< Command end bit error *
 233:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandIndexError = SDHC_FEVT_CIE_MASK,            /*!< Command index error */
 234:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDataTimeout = SDHC_FEVT_DTOE_MASK,                 /*!< Data timeout error */
 235:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDataCrcError = SDHC_FEVT_DCE_MASK,                 /*!< Data CRC error */
 236:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDataEndBitError = SDHC_FEVT_DEBE_MASK,             /*!< Data end bit error */
 237:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12Error = SDHC_FEVT_AC12E_MASK,         /*!< Auto CMD12 error */
 238:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCardInt = SDHC_FEVT_CINT_MASK,                     /*!< Card interrupt */
 239:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDmaError = SDHC_FEVT_DMAE_MASK,                    /*!< Dma error */
 240:../drivers/fsl_sdhc.h **** 
 241:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventsAll =
 242:../drivers/fsl_sdhc.h ****         (kSDHC_ForceEventAutoCommand12NotExecuted | kSDHC_ForceEventAutoCommand12Timeout |
 243:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventAutoCommand12CrcError | kSDHC_ForceEventEndBitError | kSDHC_ForceEventAuto
 244:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventAutoCommand12NotIssued | kSDHC_ForceEventCommandTimeout | kSDHC_ForceEvent
 245:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventCommandEndBitError | kSDHC_ForceEventCommandIndexError | kSDHC_ForceEventD
 246:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventDataCrcError | kSDHC_ForceEventDataEndBitError | kSDHC_ForceEventAutoComma
 247:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventCardInt | kSDHC_ForceEventDmaError), /*!< All force event flags mask */
 248:../drivers/fsl_sdhc.h **** };
 249:../drivers/fsl_sdhc.h **** 
 250:../drivers/fsl_sdhc.h **** /*! @brief Data transfer width */
 251:../drivers/fsl_sdhc.h **** typedef enum _sdhc_data_bus_width
 252:../drivers/fsl_sdhc.h **** {
 253:../drivers/fsl_sdhc.h ****     kSDHC_DataBusWidth1Bit = 0U, /*!< 1-bit mode */
 254:../drivers/fsl_sdhc.h ****     kSDHC_DataBusWidth4Bit = 1U, /*!< 4-bit mode */
 255:../drivers/fsl_sdhc.h ****     kSDHC_DataBusWidth8Bit = 2U, /*!< 8-bit mode */
 256:../drivers/fsl_sdhc.h **** } sdhc_data_bus_width_t;
 257:../drivers/fsl_sdhc.h **** 
 258:../drivers/fsl_sdhc.h **** /*! @brief Endian mode */
 259:../drivers/fsl_sdhc.h **** typedef enum _sdhc_endian_mode
 260:../drivers/fsl_sdhc.h **** {
 261:../drivers/fsl_sdhc.h ****     kSDHC_EndianModeBig = 0U,         /*!< Big endian mode */
 262:../drivers/fsl_sdhc.h ****     kSDHC_EndianModeHalfWordBig = 1U, /*!< Half word big endian mode */
 263:../drivers/fsl_sdhc.h ****     kSDHC_EndianModeLittle = 2U,      /*!< Little endian mode */
 264:../drivers/fsl_sdhc.h **** } sdhc_endian_mode_t;
 265:../drivers/fsl_sdhc.h **** 
 266:../drivers/fsl_sdhc.h **** /*! @brief DMA mode */
 267:../drivers/fsl_sdhc.h **** typedef enum _sdhc_dma_mode
 268:../drivers/fsl_sdhc.h **** {
 269:../drivers/fsl_sdhc.h ****     kSDHC_DmaModeNo = 0U,    /*!< No DMA */
 270:../drivers/fsl_sdhc.h ****     kSDHC_DmaModeAdma1 = 1U, /*!< ADMA1 is selected */
 271:../drivers/fsl_sdhc.h ****     kSDHC_DmaModeAdma2 = 2U, /*!< ADMA2 is selected */
 272:../drivers/fsl_sdhc.h **** } sdhc_dma_mode_t;
 273:../drivers/fsl_sdhc.h **** 
 274:../drivers/fsl_sdhc.h **** /*! @brief SDIO control flag mask */
 275:../drivers/fsl_sdhc.h **** enum _sdhc_sdio_control_flag
 276:../drivers/fsl_sdhc.h **** {
 277:../drivers/fsl_sdhc.h ****     kSDHC_StopAtBlockGapFlag = 0x01,       /*!< Stop at block gap */
 278:../drivers/fsl_sdhc.h ****     kSDHC_ReadWaitControlFlag = 0x02,      /*!< Read wait control */
 279:../drivers/fsl_sdhc.h ****     kSDHC_InterruptAtBlockGapFlag = 0x04,  /*!< Interrupt at block gap */
 280:../drivers/fsl_sdhc.h ****     kSDHC_ExactBlockNumberReadFlag = 0x08, /*!< Exact block number read */
 281:../drivers/fsl_sdhc.h **** };
 282:../drivers/fsl_sdhc.h **** 
 283:../drivers/fsl_sdhc.h **** /*! @brief MMC card boot mode */
 284:../drivers/fsl_sdhc.h **** typedef enum _sdhc_boot_mode
 285:../drivers/fsl_sdhc.h **** {
 286:../drivers/fsl_sdhc.h ****     kSDHC_BootModeNormal = 0U,      /*!< Normal boot */
 287:../drivers/fsl_sdhc.h ****     kSDHC_BootModeAlternative = 1U, /*!< Alternative boot */
 288:../drivers/fsl_sdhc.h **** } sdhc_boot_mode_t;
 289:../drivers/fsl_sdhc.h **** 
 290:../drivers/fsl_sdhc.h **** /*! @brief The command type */
 291:../drivers/fsl_sdhc.h **** typedef enum _sdhc_card_command_type
 292:../drivers/fsl_sdhc.h **** {
 293:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeNormal = 0U,  /*!< Normal command */
 294:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeSuspend = 1U, /*!< Suspend command */
 295:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeResume = 2U,  /*!< Resume command */
 296:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeAbort = 3U,   /*!< Abort command */
 297:../drivers/fsl_sdhc.h **** } sdhc_card_command_type_t;
 298:../drivers/fsl_sdhc.h **** 
 299:../drivers/fsl_sdhc.h **** /*!
 300:../drivers/fsl_sdhc.h ****  * @brief The command response type.
 301:../drivers/fsl_sdhc.h ****  *
 302:../drivers/fsl_sdhc.h ****  * Define the command response type from card to host controller.
 303:../drivers/fsl_sdhc.h ****  */
 304:../drivers/fsl_sdhc.h **** typedef enum _sdhc_card_response_type
 305:../drivers/fsl_sdhc.h **** {
 306:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeNone = 0U, /*!< Response type: none */
 307:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR1 = 1U,   /*!< Response type: R1 */
 308:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR1b = 2U,  /*!< Response type: R1b */
 309:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR2 = 3U,   /*!< Response type: R2 */
 310:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR3 = 4U,   /*!< Response type: R3 */
 311:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR4 = 5U,   /*!< Response type: R4 */
 312:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR5 = 6U,   /*!< Response type: R5 */
 313:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR5b = 7U,  /*!< Response type: R5b */
 314:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR6 = 8U,   /*!< Response type: R6 */
 315:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR7 = 9U,   /*!< Response type: R7 */
 316:../drivers/fsl_sdhc.h **** } sdhc_card_response_type_t;
 317:../drivers/fsl_sdhc.h **** 
 318:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for ADDRESS filed in ADMA1's descriptor */
 319:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_ADDRESS_ALIGN (4096U)
 320:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for LENGTH field in ADMA1's descriptor */
 321:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_LENGTH_ALIGN (4096U)
 322:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for ADDRESS field in ADMA2's descriptor */
 323:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_ADDRESS_ALIGN (4U)
 324:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for LENGTH filed in ADMA2's descriptor */
 325:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_LENGTH_ALIGN (4U)
 326:../drivers/fsl_sdhc.h **** 
 327:../drivers/fsl_sdhc.h **** /* ADMA1 descriptor table
 328:../drivers/fsl_sdhc.h ****  * |------------------------|---------|--------------------------|
 329:../drivers/fsl_sdhc.h ****  * | Address/page field     |Reserved |         Attribute        |
 330:../drivers/fsl_sdhc.h ****  * |------------------------|---------|--------------------------|
 331:../drivers/fsl_sdhc.h ****  * |31                    12|11      6|05  |04  |03|02 |01 |00   |
 332:../drivers/fsl_sdhc.h ****  * |------------------------|---------|----|----|--|---|---|-----|
 333:../drivers/fsl_sdhc.h ****  * | address or data length | 000000  |Act2|Act1| 0|Int|End|Valid|
 334:../drivers/fsl_sdhc.h ****  * |------------------------|---------|----|----|--|---|---|-----|
 335:../drivers/fsl_sdhc.h ****  *
 336:../drivers/fsl_sdhc.h ****  *
 337:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|-------|-------------|
 338:../drivers/fsl_sdhc.h ****  * | Act2 | Act1 |     Comment     | 31-28 | 27 - 12     |
 339:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------|
 340:../drivers/fsl_sdhc.h ****  * |   0  |   0  | No op           | Don't care          |
 341:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|-------|-------------|
 342:../drivers/fsl_sdhc.h ****  * |   0  |   1  | Set data length |  0000 | Data Length |
 343:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|-------|-------------|
 344:../drivers/fsl_sdhc.h ****  * |   1  |   0  | Transfer data   | Data address        |
 345:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------|
 346:../drivers/fsl_sdhc.h ****  * |   1  |   1  | Link descriptor | Descriptor address  |
 347:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------|
 348:../drivers/fsl_sdhc.h ****  */
 349:../drivers/fsl_sdhc.h **** /*! @brief The bit shift for ADDRESS filed in ADMA1's descriptor */
 350:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_ADDRESS_SHIFT (12U)
 351:../drivers/fsl_sdhc.h **** /*! @brief The bit mask for ADDRESS field in ADMA1's descriptor */
 352:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_ADDRESS_MASK (0xFFFFFU)
 353:../drivers/fsl_sdhc.h **** /*! @brief The bit shift for LENGTH filed in ADMA1's descriptor */
 354:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_LENGTH_SHIFT (12U)
 355:../drivers/fsl_sdhc.h **** /*! @brief The mask for LENGTH field in ADMA1's descriptor */
 356:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_LENGTH_MASK (0xFFFFU)
 357:../drivers/fsl_sdhc.h **** /*! @brief The maximum value of LENGTH filed in ADMA1's descriptor */
 358:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY (SDHC_ADMA1_DESCRIPTOR_LENGTH_MASK + 1U)
 359:../drivers/fsl_sdhc.h **** 
 360:../drivers/fsl_sdhc.h **** /*! @brief The mask for the control/status field in ADMA1 descriptor */
 361:../drivers/fsl_sdhc.h **** enum _sdhc_adma1_descriptor_flag
 362:../drivers/fsl_sdhc.h **** {
 363:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorValidFlag = (1U << 0U),                     /*!< Valid flag */
 364:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorEndFlag = (1U << 1U),                       /*!< End flag */
 365:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorInterrupFlag = (1U << 2U),                  /*!< Interrupt flag */
 366:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorActivity1Flag = (1U << 4U),                 /*!< Activity 1 flag */
 367:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorActivity2Flag = (1U << 5U),                 /*!< Activity 2 flag */
 368:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeNop = (kSDHC_Adma1DescriptorValidFlag), /*!< No operation */
 369:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeTransfer =
 370:../drivers/fsl_sdhc.h ****         (kSDHC_Adma1DescriptorActivity2Flag | kSDHC_Adma1DescriptorValidFlag), /*!< Transfer data *
 371:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeLink = (kSDHC_Adma1DescriptorActivity1Flag | kSDHC_Adma1DescriptorActi
 372:../drivers/fsl_sdhc.h ****                                      kSDHC_Adma1DescriptorValidFlag), /*!< Link descriptor */
 373:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeSetLength =
 374:../drivers/fsl_sdhc.h ****         (kSDHC_Adma1DescriptorActivity1Flag | kSDHC_Adma1DescriptorValidFlag), /*!< Set data length
 375:../drivers/fsl_sdhc.h **** };
 376:../drivers/fsl_sdhc.h **** 
 377:../drivers/fsl_sdhc.h **** /* ADMA2 descriptor table
 378:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|--------------------------|
 379:../drivers/fsl_sdhc.h ****  * | Address field  |     Length    | Reserved    |         Attribute        |
 380:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|--------------------------|
 381:../drivers/fsl_sdhc.h ****  * |63            32|31           16|15         06|05  |04  |03|02 |01 |00   |
 382:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|----|----|--|---|---|-----|
 383:../drivers/fsl_sdhc.h ****  * | 32-bit address | 16-bit length | 0000000000  |Act2|Act1| 0|Int|End|Valid|
 384:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|----|----|--|---|---|-----|
 385:../drivers/fsl_sdhc.h ****  *
 386:../drivers/fsl_sdhc.h ****  *
 387:../drivers/fsl_sdhc.h ****  * | Act2 | Act1 |     Comment     | Operation                                                     
 388:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 389:../drivers/fsl_sdhc.h ****  * |   0  |   0  | No op           | Don't care                                                    
 390:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 391:../drivers/fsl_sdhc.h ****  * |   0  |   1  | Reserved        | Read this line and go to next one                             
 392:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 393:../drivers/fsl_sdhc.h ****  * |   1  |   0  | Transfer data   | Transfer data with address and length set in this descriptor l
 394:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 395:../drivers/fsl_sdhc.h ****  * |   1  |   1  | Link descriptor | Link to another descriptor                                    
 396:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 397:../drivers/fsl_sdhc.h ****  */
 398:../drivers/fsl_sdhc.h **** /*! @brief The bit shift for LENGTH field in ADMA2's descriptor */
 399:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_DESCRIPTOR_LENGTH_SHIFT (16U)
 400:../drivers/fsl_sdhc.h **** /*! @brief The bit mask for LENGTH field in ADMA2's descriptor */
 401:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_DESCRIPTOR_LENGTH_MASK (0xFFFFU)
 402:../drivers/fsl_sdhc.h **** /*! @brief The maximum value of LENGTH field in ADMA2's descriptor */
 403:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY (SDHC_ADMA2_DESCRIPTOR_LENGTH_MASK)
 404:../drivers/fsl_sdhc.h **** 
 405:../drivers/fsl_sdhc.h **** /*! @brief ADMA1 descriptor control and status mask */
 406:../drivers/fsl_sdhc.h **** enum _sdhc_adma2_descriptor_flag
 407:../drivers/fsl_sdhc.h **** {
 408:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorValidFlag = (1U << 0U),     /*!< Valid flag */
 409:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorEndFlag = (1U << 1U),       /*!< End flag */
 410:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorInterruptFlag = (1U << 2U), /*!< Interrupt flag */
 411:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorActivity1Flag = (1U << 4U), /*!< Activity 1 mask */
 412:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorActivity2Flag = (1U << 5U), /*!< Activity 2 mask */
 413:../drivers/fsl_sdhc.h **** 
 414:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeNop = (kSDHC_Adma2DescriptorValidFlag), /*!< No operation */
 415:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeReserved =
 416:../drivers/fsl_sdhc.h ****         (kSDHC_Adma2DescriptorActivity1Flag | kSDHC_Adma2DescriptorValidFlag), /*!< Reserved */
 417:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeTransfer =
 418:../drivers/fsl_sdhc.h ****         (kSDHC_Adma2DescriptorActivity2Flag | kSDHC_Adma2DescriptorValidFlag), /*!< Transfer type *
 419:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeLink = (kSDHC_Adma2DescriptorActivity1Flag | kSDHC_Adma2DescriptorActi
 420:../drivers/fsl_sdhc.h ****                                      kSDHC_Adma2DescriptorValidFlag), /*!< Link type */
 421:../drivers/fsl_sdhc.h **** };
 422:../drivers/fsl_sdhc.h **** 
 423:../drivers/fsl_sdhc.h **** /*! @brief Defines the adma1 descriptor structure. */
 424:../drivers/fsl_sdhc.h **** typedef uint32_t sdhc_adma1_descriptor_t;
 425:../drivers/fsl_sdhc.h **** 
 426:../drivers/fsl_sdhc.h **** /*! @brief Defines the ADMA2 descriptor structure. */
 427:../drivers/fsl_sdhc.h **** typedef struct _sdhc_adma2_descriptor
 428:../drivers/fsl_sdhc.h **** {
 429:../drivers/fsl_sdhc.h ****     uint32_t attribute;      /*!< The control and status field */
 430:../drivers/fsl_sdhc.h ****     const uint32_t *address; /*!< The address field */
 431:../drivers/fsl_sdhc.h **** } sdhc_adma2_descriptor_t;
 432:../drivers/fsl_sdhc.h **** 
 433:../drivers/fsl_sdhc.h **** /*!
 434:../drivers/fsl_sdhc.h ****  * @brief SDHC capability information.
 435:../drivers/fsl_sdhc.h ****  *
 436:../drivers/fsl_sdhc.h ****  * Defines a structure to save the capability information of SDHC.
 437:../drivers/fsl_sdhc.h ****  */
 438:../drivers/fsl_sdhc.h **** typedef struct _sdhc_capability
 439:../drivers/fsl_sdhc.h **** {
 440:../drivers/fsl_sdhc.h ****     uint32_t specVersion;    /*!< Specification version */
 441:../drivers/fsl_sdhc.h ****     uint32_t vendorVersion;  /*!< Vendor version */
 442:../drivers/fsl_sdhc.h ****     uint32_t maxBlockLength; /*!< Maximum block length united as byte */
 443:../drivers/fsl_sdhc.h ****     uint32_t maxBlockCount;  /*!< Maximum block count can be set one time */
 444:../drivers/fsl_sdhc.h ****     uint32_t flags;          /*!< Capability flags to indicate the support information(_sdhc_capabi
 445:../drivers/fsl_sdhc.h **** } sdhc_capability_t;
 446:../drivers/fsl_sdhc.h **** 
 447:../drivers/fsl_sdhc.h **** /*! @brief Card transfer configuration.
 448:../drivers/fsl_sdhc.h ****  *
 449:../drivers/fsl_sdhc.h ****  * Define structure to configure the transfer-related command index/argument/flags and data block
 450:../drivers/fsl_sdhc.h ****  * size/data block numbers. This structure needs to be filled each time a command is sent to the ca
 451:../drivers/fsl_sdhc.h ****  */
 452:../drivers/fsl_sdhc.h **** typedef struct _sdhc_transfer_config
 453:../drivers/fsl_sdhc.h **** {
 454:../drivers/fsl_sdhc.h ****     size_t dataBlockSize;     /*!< Data block size */
 455:../drivers/fsl_sdhc.h ****     uint32_t dataBlockCount;  /*!< Data block count */
 456:../drivers/fsl_sdhc.h ****     uint32_t commandArgument; /*!< Command argument */
 457:../drivers/fsl_sdhc.h ****     uint32_t commandIndex;    /*!< Command index */
 458:../drivers/fsl_sdhc.h ****     uint32_t flags;           /*!< Transfer flags(_sdhc_transfer_flag) */
 459:../drivers/fsl_sdhc.h **** } sdhc_transfer_config_t;
 460:../drivers/fsl_sdhc.h **** 
 461:../drivers/fsl_sdhc.h **** /*! @brief Data structure to configure the MMC boot feature */
 462:../drivers/fsl_sdhc.h **** typedef struct _sdhc_boot_config
 463:../drivers/fsl_sdhc.h **** {
 464:../drivers/fsl_sdhc.h ****     uint32_t ackTimeoutCount;      /*!< Timeout value for the boot ACK. The available range is 0 ~ 
 465:../drivers/fsl_sdhc.h ****     sdhc_boot_mode_t bootMode;     /*!< Boot mode selection. */
 466:../drivers/fsl_sdhc.h ****     uint32_t blockCount;           /*!< Stop at block gap value of automatic mode. Available range 
 467:../drivers/fsl_sdhc.h ****     bool enableBootAck;            /*!< Enable or disable boot ACK */
 468:../drivers/fsl_sdhc.h ****     bool enableBoot;               /*!< Enable or disable fast boot */
 469:../drivers/fsl_sdhc.h ****     bool enableAutoStopAtBlockGap; /*!< Enable or disable auto stop at block gap function in boot p
 470:../drivers/fsl_sdhc.h **** } sdhc_boot_config_t;
 471:../drivers/fsl_sdhc.h **** 
 472:../drivers/fsl_sdhc.h **** /*! @brief Data structure to initialize the SDHC */
 473:../drivers/fsl_sdhc.h **** typedef struct _sdhc_config
 474:../drivers/fsl_sdhc.h **** {
 475:../drivers/fsl_sdhc.h ****     bool cardDetectDat3;           /*!< Enable DAT3 as card detection pin */
 476:../drivers/fsl_sdhc.h ****     sdhc_endian_mode_t endianMode; /*!< Endian mode */
 477:../drivers/fsl_sdhc.h ****     sdhc_dma_mode_t dmaMode;       /*!< DMA mode */
 478:../drivers/fsl_sdhc.h ****     uint32_t readWatermarkLevel;   /*!< Watermark level for DMA read operation. Available range is 
 479:../drivers/fsl_sdhc.h ****     uint32_t writeWatermarkLevel;  /*!< Watermark level for DMA write operation. Available range is
 480:../drivers/fsl_sdhc.h **** } sdhc_config_t;
 481:../drivers/fsl_sdhc.h **** 
 482:../drivers/fsl_sdhc.h **** /*!
 483:../drivers/fsl_sdhc.h ****  * @brief Card data descriptor
 484:../drivers/fsl_sdhc.h ****  *
 485:../drivers/fsl_sdhc.h ****  * Defines a structure to contain data-related attribute. 'enableIgnoreError' is used for the case 
 486:../drivers/fsl_sdhc.h ****  * driver
 487:../drivers/fsl_sdhc.h ****  * want to ignore the error event to read/write all the data not to stop read/write immediately whe
 488:../drivers/fsl_sdhc.h ****  * happen for example bus testing procedure for MMC card.
 489:../drivers/fsl_sdhc.h ****  */
 490:../drivers/fsl_sdhc.h **** typedef struct _sdhc_data
 491:../drivers/fsl_sdhc.h **** {
 492:../drivers/fsl_sdhc.h ****     bool enableAutoCommand12; /*!< Enable auto CMD12 */
 493:../drivers/fsl_sdhc.h ****     bool enableIgnoreError;   /*!< Enable to ignore error event to read/write all the data */
 494:../drivers/fsl_sdhc.h ****     size_t blockSize;         /*!< Block size */
 495:../drivers/fsl_sdhc.h ****     uint32_t blockCount;      /*!< Block count */
 496:../drivers/fsl_sdhc.h ****     uint32_t *rxData;         /*!< Buffer to save data read */
 497:../drivers/fsl_sdhc.h ****     const uint32_t *txData;   /*!< Data buffer to write */
 498:../drivers/fsl_sdhc.h **** } sdhc_data_t;
 499:../drivers/fsl_sdhc.h **** 
 500:../drivers/fsl_sdhc.h **** /*!
 501:../drivers/fsl_sdhc.h ****  * @brief Card command descriptor
 502:../drivers/fsl_sdhc.h ****  *
 503:../drivers/fsl_sdhc.h ****  * Define card command-related attribute.
 504:../drivers/fsl_sdhc.h ****  */
 505:../drivers/fsl_sdhc.h **** typedef struct _sdhc_command
 506:../drivers/fsl_sdhc.h **** {
 507:../drivers/fsl_sdhc.h ****     uint32_t index;                         /*!< Command index */
 508:../drivers/fsl_sdhc.h ****     uint32_t argument;                      /*!< Command argument */
 509:../drivers/fsl_sdhc.h ****     sdhc_card_command_type_t type;          /*!< Command type */
 510:../drivers/fsl_sdhc.h ****     sdhc_card_response_type_t responseType; /*!< Command response type */
 511:../drivers/fsl_sdhc.h ****     uint32_t response[4U];                  /*!< Response for this command */
 512:../drivers/fsl_sdhc.h ****     uint32_t responseErrorFlags;            /*!< response error flag, the flag which need to check
 513:../drivers/fsl_sdhc.h ****                                                 the command reponse*/
 514:../drivers/fsl_sdhc.h **** } sdhc_command_t;
 515:../drivers/fsl_sdhc.h **** 
 516:../drivers/fsl_sdhc.h **** /*! @brief Transfer state */
 517:../drivers/fsl_sdhc.h **** typedef struct _sdhc_transfer
 518:../drivers/fsl_sdhc.h **** {
 519:../drivers/fsl_sdhc.h ****     sdhc_data_t *data;       /*!< Data to transfer */
 520:../drivers/fsl_sdhc.h ****     sdhc_command_t *command; /*!< Command to send */
 521:../drivers/fsl_sdhc.h **** } sdhc_transfer_t;
 522:../drivers/fsl_sdhc.h **** 
 523:../drivers/fsl_sdhc.h **** /*! @brief SDHC handle typedef */
 524:../drivers/fsl_sdhc.h **** typedef struct _sdhc_handle sdhc_handle_t;
 525:../drivers/fsl_sdhc.h **** 
 526:../drivers/fsl_sdhc.h **** /*! @brief SDHC callback functions. */
 527:../drivers/fsl_sdhc.h **** typedef struct _sdhc_transfer_callback
 528:../drivers/fsl_sdhc.h **** {
 529:../drivers/fsl_sdhc.h ****     void (*CardInserted)(SDHC_Type *base,
 530:../drivers/fsl_sdhc.h ****                          void *userData); /*!< Card inserted occurs when DAT3/CD pin is for card de
 531:../drivers/fsl_sdhc.h ****     void (*CardRemoved)(SDHC_Type *base, void *userData);   /*!< Card removed occurs */
 532:../drivers/fsl_sdhc.h ****     void (*SdioInterrupt)(SDHC_Type *base, void *userData); /*!< SDIO card interrupt occurs */
 533:../drivers/fsl_sdhc.h ****     void (*SdioBlockGap)(SDHC_Type *base, void *userData);  /*!< SDIO card stopped at block gap occ
 534:../drivers/fsl_sdhc.h ****     void (*TransferComplete)(SDHC_Type *base,
 535:../drivers/fsl_sdhc.h ****                              sdhc_handle_t *handle,
 536:../drivers/fsl_sdhc.h ****                              status_t status,
 537:../drivers/fsl_sdhc.h ****                              void *userData); /*!< Transfer complete callback */
 538:../drivers/fsl_sdhc.h **** } sdhc_transfer_callback_t;
 539:../drivers/fsl_sdhc.h **** 
 540:../drivers/fsl_sdhc.h **** /*!
 541:../drivers/fsl_sdhc.h ****  * @brief SDHC handle
 542:../drivers/fsl_sdhc.h ****  *
 543:../drivers/fsl_sdhc.h ****  * Defines the structure to save the SDHC state information and callback function. The detailed int
 544:../drivers/fsl_sdhc.h ****  * sending a command or transfering data can be obtained from the interruptFlags field by using the
 545:../drivers/fsl_sdhc.h ****  * sdhc_interrupt_flag_t.
 546:../drivers/fsl_sdhc.h ****  *
 547:../drivers/fsl_sdhc.h ****  * @note All the fields except interruptFlags and transferredWords must be allocated by the user.
 548:../drivers/fsl_sdhc.h ****  */
 549:../drivers/fsl_sdhc.h **** struct _sdhc_handle
 550:../drivers/fsl_sdhc.h **** {
 551:../drivers/fsl_sdhc.h ****     /* Transfer parameter */
 552:../drivers/fsl_sdhc.h ****     sdhc_data_t *volatile data;       /*!< Data to transfer */
 553:../drivers/fsl_sdhc.h ****     sdhc_command_t *volatile command; /*!< Command to send */
 554:../drivers/fsl_sdhc.h **** 
 555:../drivers/fsl_sdhc.h ****     /* Transfer status */
 556:../drivers/fsl_sdhc.h ****     volatile uint32_t interruptFlags;   /*!< Interrupt flags of last transaction */
 557:../drivers/fsl_sdhc.h ****     volatile uint32_t transferredWords; /*!< Words transferred by DATAPORT way */
 558:../drivers/fsl_sdhc.h **** 
 559:../drivers/fsl_sdhc.h ****     /* Callback functions */
 560:../drivers/fsl_sdhc.h ****     sdhc_transfer_callback_t callback; /*!< Callback function */
 561:../drivers/fsl_sdhc.h ****     void *userData;                    /*!< Parameter for transfer complete callback */
 562:../drivers/fsl_sdhc.h **** };
 563:../drivers/fsl_sdhc.h **** 
 564:../drivers/fsl_sdhc.h **** /*! @brief SDHC transfer function. */
 565:../drivers/fsl_sdhc.h **** typedef status_t (*sdhc_transfer_function_t)(SDHC_Type *base, sdhc_transfer_t *content);
 566:../drivers/fsl_sdhc.h **** 
 567:../drivers/fsl_sdhc.h **** /*! @brief SDHC host descriptor */
 568:../drivers/fsl_sdhc.h **** typedef struct _sdhc_host
 569:../drivers/fsl_sdhc.h **** {
 570:../drivers/fsl_sdhc.h ****     SDHC_Type *base;                   /*!< SDHC peripheral base address */
 571:../drivers/fsl_sdhc.h ****     uint32_t sourceClock_Hz;           /*!< SDHC source clock frequency united in Hz */
 572:../drivers/fsl_sdhc.h ****     sdhc_config_t config;              /*!< SDHC configuration */
 573:../drivers/fsl_sdhc.h ****     sdhc_capability_t capability;      /*!< SDHC capability information */
 574:../drivers/fsl_sdhc.h ****     sdhc_transfer_function_t transfer; /*!< SDHC transfer function */
 575:../drivers/fsl_sdhc.h **** } sdhc_host_t;
 576:../drivers/fsl_sdhc.h **** 
 577:../drivers/fsl_sdhc.h **** /*************************************************************************************************
 578:../drivers/fsl_sdhc.h ****  * API
 579:../drivers/fsl_sdhc.h ****  ************************************************************************************************/
 580:../drivers/fsl_sdhc.h **** #if defined(__cplusplus)
 581:../drivers/fsl_sdhc.h **** extern "C" {
 582:../drivers/fsl_sdhc.h **** #endif
 583:../drivers/fsl_sdhc.h **** 
 584:../drivers/fsl_sdhc.h **** /*!
 585:../drivers/fsl_sdhc.h ****  * @name Initialization and deinitialization
 586:../drivers/fsl_sdhc.h ****  * @{
 587:../drivers/fsl_sdhc.h ****  */
 588:../drivers/fsl_sdhc.h **** 
 589:../drivers/fsl_sdhc.h **** /*!
 590:../drivers/fsl_sdhc.h ****  * @brief SDHC module initialization function.
 591:../drivers/fsl_sdhc.h ****  *
 592:../drivers/fsl_sdhc.h ****  * Configures the SDHC according to the user configuration.
 593:../drivers/fsl_sdhc.h ****  *
 594:../drivers/fsl_sdhc.h ****  * Example:
 595:../drivers/fsl_sdhc.h ****    @code
 596:../drivers/fsl_sdhc.h ****    sdhc_config_t config;
 597:../drivers/fsl_sdhc.h ****    config.cardDetectDat3 = false;
 598:../drivers/fsl_sdhc.h ****    config.endianMode = kSDHC_EndianModeLittle;
 599:../drivers/fsl_sdhc.h ****    config.dmaMode = kSDHC_DmaModeAdma2;
 600:../drivers/fsl_sdhc.h ****    config.readWatermarkLevel = 128U;
 601:../drivers/fsl_sdhc.h ****    config.writeWatermarkLevel = 128U;
 602:../drivers/fsl_sdhc.h ****    SDHC_Init(SDHC, &config);
 603:../drivers/fsl_sdhc.h ****    @endcode
 604:../drivers/fsl_sdhc.h ****  *
 605:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 606:../drivers/fsl_sdhc.h ****  * @param config SDHC configuration information.
 607:../drivers/fsl_sdhc.h ****  * @retval kStatus_Success Operate successfully.
 608:../drivers/fsl_sdhc.h ****  */
 609:../drivers/fsl_sdhc.h **** void SDHC_Init(SDHC_Type *base, const sdhc_config_t *config);
 610:../drivers/fsl_sdhc.h **** 
 611:../drivers/fsl_sdhc.h **** /*!
 612:../drivers/fsl_sdhc.h ****  * @brief Deinitializes the SDHC.
 613:../drivers/fsl_sdhc.h ****  *
 614:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 615:../drivers/fsl_sdhc.h ****  */
 616:../drivers/fsl_sdhc.h **** void SDHC_Deinit(SDHC_Type *base);
 617:../drivers/fsl_sdhc.h **** 
 618:../drivers/fsl_sdhc.h **** /*!
 619:../drivers/fsl_sdhc.h ****  * @brief Resets the SDHC.
 620:../drivers/fsl_sdhc.h ****  *
 621:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 622:../drivers/fsl_sdhc.h ****  * @param mask The reset type mask(_sdhc_reset).
 623:../drivers/fsl_sdhc.h ****  * @param timeout Timeout for reset.
 624:../drivers/fsl_sdhc.h ****  * @retval true Reset successfully.
 625:../drivers/fsl_sdhc.h ****  * @retval false Reset failed.
 626:../drivers/fsl_sdhc.h ****  */
 627:../drivers/fsl_sdhc.h **** bool SDHC_Reset(SDHC_Type *base, uint32_t mask, uint32_t timeout);
 628:../drivers/fsl_sdhc.h **** 
 629:../drivers/fsl_sdhc.h **** /* @} */
 630:../drivers/fsl_sdhc.h **** 
 631:../drivers/fsl_sdhc.h **** /*!
 632:../drivers/fsl_sdhc.h ****  * @name DMA Control
 633:../drivers/fsl_sdhc.h ****  * @{
 634:../drivers/fsl_sdhc.h ****  */
 635:../drivers/fsl_sdhc.h **** 
 636:../drivers/fsl_sdhc.h **** /*!
 637:../drivers/fsl_sdhc.h ****  * @brief Sets the ADMA descriptor table configuration.
 638:../drivers/fsl_sdhc.h ****  *
 639:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 640:../drivers/fsl_sdhc.h ****  * @param dmaMode DMA mode.
 641:../drivers/fsl_sdhc.h ****  * @param table ADMA table address.
 642:../drivers/fsl_sdhc.h ****  * @param tableWords ADMA table buffer length united as Words.
 643:../drivers/fsl_sdhc.h ****  * @param data Data buffer address.
 644:../drivers/fsl_sdhc.h ****  * @param dataBytes Data length united as bytes.
 645:../drivers/fsl_sdhc.h ****  * @retval kStatus_OutOfRange ADMA descriptor table length isn't enough to describe data.
 646:../drivers/fsl_sdhc.h ****  * @retval kStatus_Success Operate successfully.
 647:../drivers/fsl_sdhc.h ****  */
 648:../drivers/fsl_sdhc.h **** status_t SDHC_SetAdmaTableConfig(SDHC_Type *base,
 649:../drivers/fsl_sdhc.h ****                                  sdhc_dma_mode_t dmaMode,
 650:../drivers/fsl_sdhc.h ****                                  uint32_t *table,
 651:../drivers/fsl_sdhc.h ****                                  uint32_t tableWords,
 652:../drivers/fsl_sdhc.h ****                                  const uint32_t *data,
 653:../drivers/fsl_sdhc.h ****                                  uint32_t dataBytes);
 654:../drivers/fsl_sdhc.h **** 
 655:../drivers/fsl_sdhc.h **** /* @} */
 656:../drivers/fsl_sdhc.h **** 
 657:../drivers/fsl_sdhc.h **** /*!
 658:../drivers/fsl_sdhc.h ****  * @name Interrupts
 659:../drivers/fsl_sdhc.h ****  * @{
 660:../drivers/fsl_sdhc.h ****  */
 661:../drivers/fsl_sdhc.h **** 
 662:../drivers/fsl_sdhc.h **** /*!
 663:../drivers/fsl_sdhc.h ****  * @brief Enables the interrupt status.
 664:../drivers/fsl_sdhc.h ****  *
 665:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 666:../drivers/fsl_sdhc.h ****  * @param mask Interrupt status flags mask(_sdhc_interrupt_status_flag).
 667:../drivers/fsl_sdhc.h ****  */
 668:../drivers/fsl_sdhc.h **** static inline void SDHC_EnableInterruptStatus(SDHC_Type *base, uint32_t mask)
 669:../drivers/fsl_sdhc.h **** {
 670:../drivers/fsl_sdhc.h ****     base->IRQSTATEN |= mask;
 671:../drivers/fsl_sdhc.h **** }
 672:../drivers/fsl_sdhc.h **** 
 673:../drivers/fsl_sdhc.h **** /*!
 674:../drivers/fsl_sdhc.h ****  * @brief Disables the interrupt status.
 675:../drivers/fsl_sdhc.h ****  *
 676:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 677:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 678:../drivers/fsl_sdhc.h ****  */
 679:../drivers/fsl_sdhc.h **** static inline void SDHC_DisableInterruptStatus(SDHC_Type *base, uint32_t mask)
 680:../drivers/fsl_sdhc.h **** {
 681:../drivers/fsl_sdhc.h ****     base->IRQSTATEN &= ~mask;
 682:../drivers/fsl_sdhc.h **** }
 683:../drivers/fsl_sdhc.h **** 
 684:../drivers/fsl_sdhc.h **** /*!
 685:../drivers/fsl_sdhc.h ****  * @brief Enables the interrupt signal corresponding to the interrupt status flag.
 686:../drivers/fsl_sdhc.h ****  *
 687:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 688:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 689:../drivers/fsl_sdhc.h ****  */
 690:../drivers/fsl_sdhc.h **** static inline void SDHC_EnableInterruptSignal(SDHC_Type *base, uint32_t mask)
 691:../drivers/fsl_sdhc.h **** {
 692:../drivers/fsl_sdhc.h ****     base->IRQSIGEN |= mask;
 693:../drivers/fsl_sdhc.h **** }
 694:../drivers/fsl_sdhc.h **** 
 695:../drivers/fsl_sdhc.h **** /*!
 696:../drivers/fsl_sdhc.h ****  * @brief Disables the interrupt signal corresponding to the interrupt status flag.
 697:../drivers/fsl_sdhc.h ****  *
 698:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 699:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 700:../drivers/fsl_sdhc.h ****  */
 701:../drivers/fsl_sdhc.h **** static inline void SDHC_DisableInterruptSignal(SDHC_Type *base, uint32_t mask)
 702:../drivers/fsl_sdhc.h **** {
 703:../drivers/fsl_sdhc.h ****     base->IRQSIGEN &= ~mask;
 704:../drivers/fsl_sdhc.h **** }
 705:../drivers/fsl_sdhc.h **** 
 706:../drivers/fsl_sdhc.h **** /* @} */
 707:../drivers/fsl_sdhc.h **** 
 708:../drivers/fsl_sdhc.h **** /*!
 709:../drivers/fsl_sdhc.h ****  * @name Status
 710:../drivers/fsl_sdhc.h ****  * @{
 711:../drivers/fsl_sdhc.h ****  */
 712:../drivers/fsl_sdhc.h **** 
 713:../drivers/fsl_sdhc.h **** /*!
 714:../drivers/fsl_sdhc.h ****  * @brief Gets the current interrupt status.
 715:../drivers/fsl_sdhc.h ****  *
 716:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 717:../drivers/fsl_sdhc.h ****  * @return Current interrupt status flags mask(_sdhc_interrupt_status_flag).
 718:../drivers/fsl_sdhc.h ****  */
 719:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetInterruptStatusFlags(SDHC_Type *base)
 720:../drivers/fsl_sdhc.h **** {
 721:../drivers/fsl_sdhc.h ****     return base->IRQSTAT;
 722:../drivers/fsl_sdhc.h **** }
 723:../drivers/fsl_sdhc.h **** 
 724:../drivers/fsl_sdhc.h **** /*!
 725:../drivers/fsl_sdhc.h ****  * @brief Clears a specified interrupt status.
 726:../drivers/fsl_sdhc.h ****  *
 727:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 728:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 729:../drivers/fsl_sdhc.h ****  */
 730:../drivers/fsl_sdhc.h **** static inline void SDHC_ClearInterruptStatusFlags(SDHC_Type *base, uint32_t mask)
 731:../drivers/fsl_sdhc.h **** {
 732:../drivers/fsl_sdhc.h ****     base->IRQSTAT = mask;
 733:../drivers/fsl_sdhc.h **** }
 734:../drivers/fsl_sdhc.h **** 
 735:../drivers/fsl_sdhc.h **** /*!
 736:../drivers/fsl_sdhc.h ****  * @brief Gets the status of auto command 12 error.
 737:../drivers/fsl_sdhc.h ****  *
 738:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 739:../drivers/fsl_sdhc.h ****  * @return Auto command 12 error status flags mask(_sdhc_auto_command12_error_status_flag).
 740:../drivers/fsl_sdhc.h ****  */
 741:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetAutoCommand12ErrorStatusFlags(SDHC_Type *base)
 742:../drivers/fsl_sdhc.h **** {
 743:../drivers/fsl_sdhc.h ****     return base->AC12ERR;
 744:../drivers/fsl_sdhc.h **** }
 745:../drivers/fsl_sdhc.h **** 
 746:../drivers/fsl_sdhc.h **** /*!
 747:../drivers/fsl_sdhc.h ****  * @brief Gets the status of the ADMA error.
 748:../drivers/fsl_sdhc.h ****  *
 749:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 750:../drivers/fsl_sdhc.h ****  * @return ADMA error status flags mask(_sdhc_adma_error_status_flag).
 751:../drivers/fsl_sdhc.h ****  */
 752:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetAdmaErrorStatusFlags(SDHC_Type *base)
 753:../drivers/fsl_sdhc.h **** {
 754:../drivers/fsl_sdhc.h ****     return base->ADMAES;
 755:../drivers/fsl_sdhc.h **** }
 756:../drivers/fsl_sdhc.h **** 
 757:../drivers/fsl_sdhc.h **** /*!
 758:../drivers/fsl_sdhc.h ****  * @brief Gets a present status.
 759:../drivers/fsl_sdhc.h ****  *
 760:../drivers/fsl_sdhc.h ****  * This function gets the present SDHC's status except for an interrupt status and an error status.
 761:../drivers/fsl_sdhc.h ****  *
 762:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 763:../drivers/fsl_sdhc.h ****  * @return Present SDHC's status flags mask(_sdhc_present_status_flag).
 764:../drivers/fsl_sdhc.h ****  */
 765:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetPresentStatusFlags(SDHC_Type *base)
 766:../drivers/fsl_sdhc.h **** {
 767:../drivers/fsl_sdhc.h ****     return base->PRSSTAT;
 768:../drivers/fsl_sdhc.h **** }
 769:../drivers/fsl_sdhc.h **** 
 770:../drivers/fsl_sdhc.h **** /* @} */
 771:../drivers/fsl_sdhc.h **** 
 772:../drivers/fsl_sdhc.h **** /*!
 773:../drivers/fsl_sdhc.h ****  * @name Bus Operations
 774:../drivers/fsl_sdhc.h ****  * @{
 775:../drivers/fsl_sdhc.h ****  */
 776:../drivers/fsl_sdhc.h **** 
 777:../drivers/fsl_sdhc.h **** /*!
 778:../drivers/fsl_sdhc.h ****  * @brief Gets the capability information.
 779:../drivers/fsl_sdhc.h ****  *
 780:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 781:../drivers/fsl_sdhc.h ****  * @param capability Structure to save capability information.
 782:../drivers/fsl_sdhc.h ****  */
 783:../drivers/fsl_sdhc.h **** void SDHC_GetCapability(SDHC_Type *base, sdhc_capability_t *capability);
 784:../drivers/fsl_sdhc.h **** 
 785:../drivers/fsl_sdhc.h **** /*!
 786:../drivers/fsl_sdhc.h ****  * @brief Enables or disables the SD bus clock.
 787:../drivers/fsl_sdhc.h ****  *
 788:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 789:../drivers/fsl_sdhc.h ****  * @param enable True to enable, false to disable.
 790:../drivers/fsl_sdhc.h ****  */
 791:../drivers/fsl_sdhc.h **** static inline void SDHC_EnableSdClock(SDHC_Type *base, bool enable)
 792:../drivers/fsl_sdhc.h **** {
 793:../drivers/fsl_sdhc.h ****     if (enable)
 794:../drivers/fsl_sdhc.h ****     {
 795:../drivers/fsl_sdhc.h ****         base->SYSCTL |= SDHC_SYSCTL_SDCLKEN_MASK;
 796:../drivers/fsl_sdhc.h ****     }
 797:../drivers/fsl_sdhc.h ****     else
 798:../drivers/fsl_sdhc.h ****     {
 799:../drivers/fsl_sdhc.h ****         base->SYSCTL &= ~SDHC_SYSCTL_SDCLKEN_MASK;
 800:../drivers/fsl_sdhc.h ****     }
 801:../drivers/fsl_sdhc.h **** }
 802:../drivers/fsl_sdhc.h **** 
 803:../drivers/fsl_sdhc.h **** /*!
 804:../drivers/fsl_sdhc.h ****  * @brief Sets the SD bus clock frequency.
 805:../drivers/fsl_sdhc.h ****  *
 806:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 807:../drivers/fsl_sdhc.h ****  * @param srcClock_Hz SDHC source clock frequency united in Hz.
 808:../drivers/fsl_sdhc.h ****  * @param busClock_Hz SD bus clock frequency united in Hz.
 809:../drivers/fsl_sdhc.h ****  *
 810:../drivers/fsl_sdhc.h ****  * @return The nearest frequency of busClock_Hz configured to SD bus.
 811:../drivers/fsl_sdhc.h ****  */
 812:../drivers/fsl_sdhc.h **** uint32_t SDHC_SetSdClock(SDHC_Type *base, uint32_t srcClock_Hz, uint32_t busClock_Hz);
 813:../drivers/fsl_sdhc.h **** 
 814:../drivers/fsl_sdhc.h **** /*!
 815:../drivers/fsl_sdhc.h ****  * @brief Sends 80 clocks to the card to set it to the active state.
 816:../drivers/fsl_sdhc.h ****  *
 817:../drivers/fsl_sdhc.h ****  * This function must be called each time the card is inserted to ensure that the card can receive 
 818:../drivers/fsl_sdhc.h ****  * correctly.
 819:../drivers/fsl_sdhc.h ****  *
 820:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 821:../drivers/fsl_sdhc.h ****  * @param timeout Timeout to initialize card.
 822:../drivers/fsl_sdhc.h ****  * @retval true Set card active successfully.
 823:../drivers/fsl_sdhc.h ****  * @retval false Set card active failed.
 824:../drivers/fsl_sdhc.h ****  */
 825:../drivers/fsl_sdhc.h **** bool SDHC_SetCardActive(SDHC_Type *base, uint32_t timeout);
 826:../drivers/fsl_sdhc.h **** 
 827:../drivers/fsl_sdhc.h **** /*!
 828:../drivers/fsl_sdhc.h ****  * @brief Sets the data transfer width.
 829:../drivers/fsl_sdhc.h ****  *
 830:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 831:../drivers/fsl_sdhc.h ****  * @param width Data transfer width.
 832:../drivers/fsl_sdhc.h ****  */
 833:../drivers/fsl_sdhc.h **** static inline void SDHC_SetDataBusWidth(SDHC_Type *base, sdhc_data_bus_width_t width)
 834:../drivers/fsl_sdhc.h **** {
 835:../drivers/fsl_sdhc.h ****     base->PROCTL = ((base->PROCTL & ~SDHC_PROCTL_DTW_MASK) | SDHC_PROCTL_DTW(width));
 836:../drivers/fsl_sdhc.h **** }
 837:../drivers/fsl_sdhc.h **** 
 838:../drivers/fsl_sdhc.h **** /*!
 839:../drivers/fsl_sdhc.h ****  * @brief detect card insert status.
 840:../drivers/fsl_sdhc.h ****  *
 841:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 842:../drivers/fsl_sdhc.h ****  * @param enable/disable flag
 843:../drivers/fsl_sdhc.h ****  */
 844:../drivers/fsl_sdhc.h **** static inline void SDHC_CardDetectByData3(SDHC_Type *base, bool enable)
 845:../drivers/fsl_sdhc.h **** {
 846:../drivers/fsl_sdhc.h ****     if (enable)
 847:../drivers/fsl_sdhc.h ****     {
 848:../drivers/fsl_sdhc.h ****         base->PROCTL |= SDHC_PROCTL_D3CD_MASK;
 849:../drivers/fsl_sdhc.h ****     }
 850:../drivers/fsl_sdhc.h ****     else
 851:../drivers/fsl_sdhc.h ****     {
 852:../drivers/fsl_sdhc.h ****         base->PROCTL &= ~SDHC_PROCTL_D3CD_MASK;
 853:../drivers/fsl_sdhc.h ****     }
 854:../drivers/fsl_sdhc.h **** }
 855:../drivers/fsl_sdhc.h **** 
 856:../drivers/fsl_sdhc.h **** /*!
 857:../drivers/fsl_sdhc.h ****  * @brief Sets the card transfer-related configuration.
 858:../drivers/fsl_sdhc.h ****  *
 859:../drivers/fsl_sdhc.h ****  * This function fills the card transfer-related command argument/transfer flag/data size. The comm
 860:../drivers/fsl_sdhc.h ****  by
 861:../drivers/fsl_sdhc.h ****  * SDHC after calling this function.
 862:../drivers/fsl_sdhc.h ****  *
 863:../drivers/fsl_sdhc.h ****  * Example:
 864:../drivers/fsl_sdhc.h ****    @code
 865:../drivers/fsl_sdhc.h ****    sdhc_transfer_config_t transferConfig;
 866:../drivers/fsl_sdhc.h ****    transferConfig.dataBlockSize = 512U;
 867:../drivers/fsl_sdhc.h ****    transferConfig.dataBlockCount = 2U;
 868:../drivers/fsl_sdhc.h ****    transferConfig.commandArgument = 0x01AAU;
 869:../drivers/fsl_sdhc.h ****    transferConfig.commandIndex = 8U;
 870:../drivers/fsl_sdhc.h ****    transferConfig.flags |= (kSDHC_EnableDmaFlag | kSDHC_EnableAutoCommand12Flag | kSDHC_MultipleBlo
 871:../drivers/fsl_sdhc.h ****    SDHC_SetTransferConfig(SDHC, &transferConfig);
 872:../drivers/fsl_sdhc.h ****    @endcode
 873:../drivers/fsl_sdhc.h ****  *
 874:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 875:../drivers/fsl_sdhc.h ****  * @param config Command configuration structure.
 876:../drivers/fsl_sdhc.h ****  */
 877:../drivers/fsl_sdhc.h **** void SDHC_SetTransferConfig(SDHC_Type *base, const sdhc_transfer_config_t *config);
 878:../drivers/fsl_sdhc.h **** 
 879:../drivers/fsl_sdhc.h **** /*!
 880:../drivers/fsl_sdhc.h ****  * @brief Gets the command response.
 881:../drivers/fsl_sdhc.h ****  *
 882:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 883:../drivers/fsl_sdhc.h ****  * @param index The index of response register, range from 0 to 3.
 884:../drivers/fsl_sdhc.h ****  * @return Response register transfer.
 885:../drivers/fsl_sdhc.h ****  */
 886:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetCommandResponse(SDHC_Type *base, uint32_t index)
 887:../drivers/fsl_sdhc.h **** {
 888:../drivers/fsl_sdhc.h ****     assert(index < 4U);
 889:../drivers/fsl_sdhc.h **** 
 890:../drivers/fsl_sdhc.h ****     return base->CMDRSP[index];
  83              		.loc 2 890 0
  84 000c 0369     		ldr	r3, [r0, #16]
  85              	.LVL6:
  86              	.LBE97:
  87              	.LBE96:
 371:../drivers/fsl_sdhc.c ****         if (command->responseType == kCARD_ResponseTypeR2)
  88              		.loc 1 371 0
  89 000e CB60     		str	r3, [r1, #12]
 372:../drivers/fsl_sdhc.c ****         {
  90              		.loc 1 372 0
  91 0010 032A     		cmp	r2, #3
  92 0012 F8D1     		bne	.L8
  93              	.LVL7:
  94              	.LBB98:
  95              	.LBB99:
  96              		.loc 2 890 0
  97 0014 4369     		ldr	r3, [r0, #20]
  98              	.LVL8:
  99              	.LBE99:
 100              	.LBE98:
 374:../drivers/fsl_sdhc.c ****             command->response[2U] = SDHC_GetCommandResponse(base, 2U);
 101              		.loc 1 374 0
 102 0016 0B61     		str	r3, [r1, #16]
 103              	.LVL9:
 104              	.LBB100:
 105              	.LBB101:
 106              		.loc 2 890 0
 107 0018 8369     		ldr	r3, [r0, #24]
 108              	.LVL10:
 109              	.LBE101:
 110              	.LBE100:
 375:../drivers/fsl_sdhc.c ****             command->response[3U] = SDHC_GetCommandResponse(base, 3U);
 111              		.loc 1 375 0
 112 001a 4B61     		str	r3, [r1, #20]
 113              	.LVL11:
 376:../drivers/fsl_sdhc.c **** 
 114              		.loc 1 376 0
 115 001c 0B46     		mov	r3, r1
 116              	.LBB102:
 117              	.LBB103:
 118              		.loc 2 890 0
 119 001e C069     		ldr	r0, [r0, #28]
 120              	.LVL12:
 121              	.LBE103:
 122              	.LBE102:
 376:../drivers/fsl_sdhc.c **** 
 123              		.loc 1 376 0
 124 0020 43F8180F 		str	r0, [r3, #24]!
 125              	.LVL13:
 126 0024 0420     		movs	r0, #4
 127              	.LVL14:
 128              	.L9:
 383:../drivers/fsl_sdhc.c ****                 if (i > 1U)
 129              		.loc 1 383 0
 130 0026 1C68     		ldr	r4, [r3]
 384:../drivers/fsl_sdhc.c ****                 {
 131              		.loc 1 384 0
 132 0028 0128     		cmp	r0, #1
 383:../drivers/fsl_sdhc.c ****                 if (i > 1U)
 133              		.loc 1 383 0
 134 002a 4FEA0424 		lsl	r4, r4, #8
 135 002e 1C60     		str	r4, [r3]
 384:../drivers/fsl_sdhc.c ****                 {
 136              		.loc 1 384 0
 137 0030 06D9     		bls	.L10
 386:../drivers/fsl_sdhc.c ****                 }
 138              		.loc 1 386 0
 139 0032 13F8015C 		ldrb	r5, [r3, #-1]	@ zero_extendqisi2
 140 0036 2C43     		orrs	r4, r4, r5
 141 0038 1C60     		str	r4, [r3]
 142              	.LVL15:
 143              	.L11:
 144 003a 0138     		subs	r0, r0, #1
 145              	.LVL16:
 146 003c 043B     		subs	r3, r3, #4
 147 003e F2E7     		b	.L9
 148              	.L10:
 149              	.LVL17:
 388:../drivers/fsl_sdhc.c ****         }
 150              		.loc 1 388 0
 151 0040 0028     		cmp	r0, #0
 152 0042 FAD1     		bne	.L11
 153 0044 DFE7     		b	.L8
 154              	.LVL18:
 155              	.L6:
 156              		.loc 1 392 0 discriminator 1
 157 0046 082A     		cmp	r2, #8
 158 0048 0CD8     		bhi	.L13
 159 004a 4FF4A373 		mov	r3, #326
 160 004e 23FA02F2 		lsr	r2, r3, r2
 161 0052 D307     		lsls	r3, r2, #31
 162 0054 06D5     		bpl	.L13
 393:../drivers/fsl_sdhc.c ****         ((command->responseType == kCARD_ResponseTypeR1) || (command->responseType == kCARD_Respons
 394:../drivers/fsl_sdhc.c ****          (command->responseType == kCARD_ResponseTypeR6) || (command->responseType == kCARD_Respons
 395:../drivers/fsl_sdhc.c ****     {
 396:../drivers/fsl_sdhc.c ****         if (((command->responseErrorFlags) & (command->response[0U])) != 0U)
 163              		.loc 1 396 0
 164 0056 CB68     		ldr	r3, [r1, #12]
 397:../drivers/fsl_sdhc.c ****         {
 398:../drivers/fsl_sdhc.c ****             return kStatus_SDHC_SendCommandFailed;
 165              		.loc 1 398 0
 166 0058 1842     		tst	r0, r3
 167 005a 40F2A660 		movw	r0, #1702
 168 005e 08BF     		it	eq
 169 0060 0020     		moveq	r0, #0
 170 0062 30BD     		pop	{r4, r5, pc}
 171              	.L13:
 399:../drivers/fsl_sdhc.c ****         }
 400:../drivers/fsl_sdhc.c ****     }
 401:../drivers/fsl_sdhc.c **** 
 402:../drivers/fsl_sdhc.c ****     return kStatus_Success;
 172              		.loc 1 402 0
 173 0064 0020     		movs	r0, #0
 403:../drivers/fsl_sdhc.c **** }
 174              		.loc 1 403 0
 175 0066 30BD     		pop	{r4, r5, pc}
 176              		.cfi_endproc
 177              	.LFE170:
 179              		.section	.text.SDHC_ReadDataPort,"ax",%progbits
 180              		.align	1
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv4-sp-d16
 186              	SDHC_ReadDataPort:
 187              	.LFB171:
 404:../drivers/fsl_sdhc.c **** 
 405:../drivers/fsl_sdhc.c **** static uint32_t SDHC_ReadDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords)
 406:../drivers/fsl_sdhc.c **** {
 188              		.loc 1 406 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              	.LVL19:
 407:../drivers/fsl_sdhc.c ****     uint32_t i;
 408:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 409:../drivers/fsl_sdhc.c ****     uint32_t wordsCanBeRead; /* The words can be read at this time. */
 410:../drivers/fsl_sdhc.c ****     uint32_t readWatermark = ((base->WML & SDHC_WML_RDWML_MASK) >> SDHC_WML_RDWML_SHIFT);
 411:../drivers/fsl_sdhc.c **** 
 412:../drivers/fsl_sdhc.c ****     /*
 413:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 414:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 415:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 416:../drivers/fsl_sdhc.c ****        */
 417:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 193              		.loc 1 417 0
 194 0000 4B68     		ldr	r3, [r1, #4]
 406:../drivers/fsl_sdhc.c ****     uint32_t i;
 195              		.loc 1 406 0
 196 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 197              		.cfi_def_cfa_offset 20
 198              		.cfi_offset 4, -20
 199              		.cfi_offset 5, -16
 200              		.cfi_offset 6, -12
 201              		.cfi_offset 7, -8
 202              		.cfi_offset 14, -4
 203              		.loc 1 417 0
 204 0004 9D07     		lsls	r5, r3, #30
 418:../drivers/fsl_sdhc.c ****     {
 419:../drivers/fsl_sdhc.c ****         data->blockSize +=
 205              		.loc 1 419 0
 206 0006 1CBF     		itt	ne
 207 0008 23F00303 		bicne	r3, r3, #3
 208 000c 0433     		addne	r3, r3, #4
 410:../drivers/fsl_sdhc.c **** 
 209              		.loc 1 410 0
 210 000e 446C     		ldr	r4, [r0, #68]
 211              		.loc 1 419 0
 212 0010 18BF     		it	ne
 213 0012 4B60     		strne	r3, [r1, #4]
 420:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 421:../drivers/fsl_sdhc.c ****     }
 422:../drivers/fsl_sdhc.c **** 
 423:../drivers/fsl_sdhc.c ****     totalWords = ((data->blockCount * data->blockSize) / sizeof(uint32_t));
 214              		.loc 1 423 0
 215 0014 8D68     		ldr	r5, [r1, #8]
 216 0016 4B68     		ldr	r3, [r1, #4]
 217 0018 6B43     		muls	r3, r5, r3
 410:../drivers/fsl_sdhc.c **** 
 218              		.loc 1 410 0
 219 001a E4B2     		uxtb	r4, r4
 220              	.LVL20:
 221              		.loc 1 423 0
 222 001c 9B08     		lsrs	r3, r3, #2
 223              	.LVL21:
 424:../drivers/fsl_sdhc.c **** 
 425:../drivers/fsl_sdhc.c ****     /* If watermark level is equal or bigger than totalWords, transfers totalWords data. */
 426:../drivers/fsl_sdhc.c ****     if (readWatermark >= totalWords)
 224              		.loc 1 426 0
 225 001e 9C42     		cmp	r4, r3
 226 0020 03D2     		bcs	.L17
 427:../drivers/fsl_sdhc.c ****     {
 428:../drivers/fsl_sdhc.c ****         wordsCanBeRead = totalWords;
 429:../drivers/fsl_sdhc.c ****     }
 430:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is equal or bigger than
 431:../drivers/fsl_sdhc.c ****     transfers watermark level words. */
 432:../drivers/fsl_sdhc.c ****     else if ((readWatermark < totalWords) && ((totalWords - transferredWords) >= readWatermark))
 227              		.loc 1 432 0 discriminator 1
 228 0022 9B1A     		subs	r3, r3, r2
 229              	.LVL22:
 230 0024 A342     		cmp	r3, r4
 231 0026 28BF     		it	cs
 232 0028 2346     		movcs	r3, r4
 233              	.L17:
 234              	.LVL23:
 433:../drivers/fsl_sdhc.c ****     {
 434:../drivers/fsl_sdhc.c ****         wordsCanBeRead = readWatermark;
 435:../drivers/fsl_sdhc.c ****     }
 436:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is less than readWaterm
 437:../drivers/fsl_sdhc.c ****     words. */
 438:../drivers/fsl_sdhc.c ****     else
 439:../drivers/fsl_sdhc.c ****     {
 440:../drivers/fsl_sdhc.c ****         wordsCanBeRead = (totalWords - transferredWords);
 441:../drivers/fsl_sdhc.c ****     }
 442:../drivers/fsl_sdhc.c **** 
 443:../drivers/fsl_sdhc.c ****     i = 0U;
 235              		.loc 1 443 0
 236 002a 0024     		movs	r4, #0
 237              	.LVL24:
 238              	.L18:
 444:../drivers/fsl_sdhc.c ****     while (i < wordsCanBeRead)
 239              		.loc 1 444 0
 240 002c 9C42     		cmp	r4, r3
 241 002e 04EB0205 		add	r5, r4, r2
 242              	.LVL25:
 243 0032 01D1     		bne	.L19
 445:../drivers/fsl_sdhc.c ****     {
 446:../drivers/fsl_sdhc.c ****         data->rxData[transferredWords++] = SDHC_ReadData(base);
 447:../drivers/fsl_sdhc.c ****         i++;
 448:../drivers/fsl_sdhc.c ****     }
 449:../drivers/fsl_sdhc.c **** 
 450:../drivers/fsl_sdhc.c ****     return transferredWords;
 451:../drivers/fsl_sdhc.c **** }
 244              		.loc 1 451 0
 245 0034 2846     		mov	r0, r5
 246              	.LVL26:
 247 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 248              	.LVL27:
 249              	.L19:
 446:../drivers/fsl_sdhc.c ****         i++;
 250              		.loc 1 446 0
 251 0038 CE68     		ldr	r6, [r1, #12]
 252              	.LBB104:
 253              	.LBB105:
 891:../drivers/fsl_sdhc.h **** }
 892:../drivers/fsl_sdhc.h **** 
 893:../drivers/fsl_sdhc.h **** /*!
 894:../drivers/fsl_sdhc.h ****  * @brief Fills the the data port.
 895:../drivers/fsl_sdhc.h ****  *
 896:../drivers/fsl_sdhc.h ****  * This function is used to implement the data transfer by Data Port instead of DMA.
 897:../drivers/fsl_sdhc.h ****  *
 898:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 899:../drivers/fsl_sdhc.h ****  * @param data The data about to be sent.
 900:../drivers/fsl_sdhc.h ****  */
 901:../drivers/fsl_sdhc.h **** static inline void SDHC_WriteData(SDHC_Type *base, uint32_t data)
 902:../drivers/fsl_sdhc.h **** {
 903:../drivers/fsl_sdhc.h ****     base->DATPORT = data;
 904:../drivers/fsl_sdhc.h **** }
 905:../drivers/fsl_sdhc.h **** 
 906:../drivers/fsl_sdhc.h **** /*!
 907:../drivers/fsl_sdhc.h ****  * @brief Retrieves the data from the data port.
 908:../drivers/fsl_sdhc.h ****  *
 909:../drivers/fsl_sdhc.h ****  * This function is used to implement the data transfer by Data Port instead of DMA.
 910:../drivers/fsl_sdhc.h ****  *
 911:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 912:../drivers/fsl_sdhc.h ****  * @return The data has been read.
 913:../drivers/fsl_sdhc.h ****  */
 914:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_ReadData(SDHC_Type *base)
 915:../drivers/fsl_sdhc.h **** {
 916:../drivers/fsl_sdhc.h ****     return base->DATPORT;
 254              		.loc 2 916 0
 255 003a 076A     		ldr	r7, [r0, #32]
 256              	.LVL28:
 257              	.LBE105:
 258              	.LBE104:
 446:../drivers/fsl_sdhc.c ****         i++;
 259              		.loc 1 446 0
 260 003c 46F82570 		str	r7, [r6, r5, lsl #2]
 447:../drivers/fsl_sdhc.c ****     }
 261              		.loc 1 447 0
 262 0040 0134     		adds	r4, r4, #1
 263              	.LVL29:
 264 0042 F3E7     		b	.L18
 265              		.cfi_endproc
 266              	.LFE171:
 268              		.section	.text.SDHC_WriteDataPort,"ax",%progbits
 269              		.align	1
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu fpv4-sp-d16
 275              	SDHC_WriteDataPort:
 276              	.LFB173:
 452:../drivers/fsl_sdhc.c **** 
 453:../drivers/fsl_sdhc.c **** static status_t SDHC_ReadByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data)
 454:../drivers/fsl_sdhc.c **** {
 455:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 456:../drivers/fsl_sdhc.c ****     uint32_t transferredWords = 0U;
 457:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 458:../drivers/fsl_sdhc.c **** 
 459:../drivers/fsl_sdhc.c ****     /*
 460:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 461:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 462:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 463:../drivers/fsl_sdhc.c ****        */
 464:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 465:../drivers/fsl_sdhc.c ****     {
 466:../drivers/fsl_sdhc.c ****         data->blockSize +=
 467:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 468:../drivers/fsl_sdhc.c ****     }
 469:../drivers/fsl_sdhc.c **** 
 470:../drivers/fsl_sdhc.c ****     totalWords = ((data->blockCount * data->blockSize) / sizeof(uint32_t));
 471:../drivers/fsl_sdhc.c **** 
 472:../drivers/fsl_sdhc.c ****     while ((error == kStatus_Success) && (transferredWords < totalWords))
 473:../drivers/fsl_sdhc.c ****     {
 474:../drivers/fsl_sdhc.c ****         while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_BufferReadReadyFlag | kSDHC_DataErrorF
 475:../drivers/fsl_sdhc.c ****         {
 476:../drivers/fsl_sdhc.c ****         }
 477:../drivers/fsl_sdhc.c **** 
 478:../drivers/fsl_sdhc.c ****         if (SDHC_GetInterruptStatusFlags(base) & kSDHC_DataErrorFlag)
 479:../drivers/fsl_sdhc.c ****         {
 480:../drivers/fsl_sdhc.c ****             if (!(data->enableIgnoreError))
 481:../drivers/fsl_sdhc.c ****             {
 482:../drivers/fsl_sdhc.c ****                 error = kStatus_Fail;
 483:../drivers/fsl_sdhc.c ****             }
 484:../drivers/fsl_sdhc.c ****         }
 485:../drivers/fsl_sdhc.c ****         if (error == kStatus_Success)
 486:../drivers/fsl_sdhc.c ****         {
 487:../drivers/fsl_sdhc.c ****             transferredWords = SDHC_ReadDataPort(base, data, transferredWords);
 488:../drivers/fsl_sdhc.c ****         }
 489:../drivers/fsl_sdhc.c ****         /* clear buffer ready and error */
 490:../drivers/fsl_sdhc.c ****         SDHC_ClearInterruptStatusFlags(base, kSDHC_BufferReadReadyFlag | kSDHC_DataErrorFlag);
 491:../drivers/fsl_sdhc.c ****     }
 492:../drivers/fsl_sdhc.c **** 
 493:../drivers/fsl_sdhc.c ****     /* Clear data complete flag after the last read operation. */
 494:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag);
 495:../drivers/fsl_sdhc.c **** 
 496:../drivers/fsl_sdhc.c ****     return error;
 497:../drivers/fsl_sdhc.c **** }
 498:../drivers/fsl_sdhc.c **** 
 499:../drivers/fsl_sdhc.c **** static uint32_t SDHC_WriteDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords)
 500:../drivers/fsl_sdhc.c **** {
 277              		.loc 1 500 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              	.LVL30:
 501:../drivers/fsl_sdhc.c ****     uint32_t i;
 502:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 503:../drivers/fsl_sdhc.c ****     uint32_t wordsCanBeWrote; /* Words can be wrote at this time. */
 504:../drivers/fsl_sdhc.c ****     uint32_t writeWatermark = ((base->WML & SDHC_WML_WRWML_MASK) >> SDHC_WML_WRWML_SHIFT);
 505:../drivers/fsl_sdhc.c **** 
 506:../drivers/fsl_sdhc.c ****     /*
 507:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 508:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 509:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 510:../drivers/fsl_sdhc.c ****        */
 511:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 282              		.loc 1 511 0
 283 0000 4B68     		ldr	r3, [r1, #4]
 500:../drivers/fsl_sdhc.c ****     uint32_t i;
 284              		.loc 1 500 0
 285 0002 70B5     		push	{r4, r5, r6, lr}
 286              		.cfi_def_cfa_offset 16
 287              		.cfi_offset 4, -16
 288              		.cfi_offset 5, -12
 289              		.cfi_offset 6, -8
 290              		.cfi_offset 14, -4
 291              		.loc 1 511 0
 292 0004 9D07     		lsls	r5, r3, #30
 512:../drivers/fsl_sdhc.c ****     {
 513:../drivers/fsl_sdhc.c ****         data->blockSize +=
 293              		.loc 1 513 0
 294 0006 1CBF     		itt	ne
 295 0008 23F00303 		bicne	r3, r3, #3
 296 000c 0433     		addne	r3, r3, #4
 504:../drivers/fsl_sdhc.c **** 
 297              		.loc 1 504 0
 298 000e 446C     		ldr	r4, [r0, #68]
 299              		.loc 1 513 0
 300 0010 18BF     		it	ne
 301 0012 4B60     		strne	r3, [r1, #4]
 514:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 515:../drivers/fsl_sdhc.c ****     }
 516:../drivers/fsl_sdhc.c **** 
 517:../drivers/fsl_sdhc.c ****     totalWords = ((data->blockCount * data->blockSize) / sizeof(uint32_t));
 302              		.loc 1 517 0
 303 0014 8D68     		ldr	r5, [r1, #8]
 304 0016 4B68     		ldr	r3, [r1, #4]
 305 0018 6B43     		muls	r3, r5, r3
 504:../drivers/fsl_sdhc.c **** 
 306              		.loc 1 504 0
 307 001a C4F30744 		ubfx	r4, r4, #16, #8
 308              	.LVL31:
 309              		.loc 1 517 0
 310 001e 9B08     		lsrs	r3, r3, #2
 311              	.LVL32:
 518:../drivers/fsl_sdhc.c **** 
 519:../drivers/fsl_sdhc.c ****     /* If watermark level is equal or bigger than totalWords, transfers totalWords data.*/
 520:../drivers/fsl_sdhc.c ****     if (writeWatermark >= totalWords)
 312              		.loc 1 520 0
 313 0020 9C42     		cmp	r4, r3
 314 0022 03D2     		bcs	.L25
 521:../drivers/fsl_sdhc.c ****     {
 522:../drivers/fsl_sdhc.c ****         wordsCanBeWrote = totalWords;
 523:../drivers/fsl_sdhc.c ****     }
 524:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is equal or bigger than
 525:../drivers/fsl_sdhc.c ****     transfers watermark level words. */
 526:../drivers/fsl_sdhc.c ****     else if ((writeWatermark < totalWords) && ((totalWords - transferredWords) >= writeWatermark))
 315              		.loc 1 526 0 discriminator 1
 316 0024 9B1A     		subs	r3, r3, r2
 317              	.LVL33:
 318 0026 A342     		cmp	r3, r4
 319 0028 28BF     		it	cs
 320 002a 2346     		movcs	r3, r4
 321              	.L25:
 322              	.LVL34:
 527:../drivers/fsl_sdhc.c ****     {
 528:../drivers/fsl_sdhc.c ****         wordsCanBeWrote = writeWatermark;
 529:../drivers/fsl_sdhc.c ****     }
 530:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is less than watermark,
 531:../drivers/fsl_sdhc.c ****     words. */
 532:../drivers/fsl_sdhc.c ****     else
 533:../drivers/fsl_sdhc.c ****     {
 534:../drivers/fsl_sdhc.c ****         wordsCanBeWrote = (totalWords - transferredWords);
 535:../drivers/fsl_sdhc.c ****     }
 536:../drivers/fsl_sdhc.c **** 
 537:../drivers/fsl_sdhc.c ****     i = 0U;
 323              		.loc 1 537 0
 324 002c 0024     		movs	r4, #0
 325              	.LVL35:
 326              	.L26:
 538:../drivers/fsl_sdhc.c ****     while (i < wordsCanBeWrote)
 327              		.loc 1 538 0
 328 002e 9C42     		cmp	r4, r3
 329 0030 04EB0205 		add	r5, r4, r2
 330              	.LVL36:
 331 0034 01D1     		bne	.L27
 539:../drivers/fsl_sdhc.c ****     {
 540:../drivers/fsl_sdhc.c ****         SDHC_WriteData(base, data->txData[transferredWords++]);
 541:../drivers/fsl_sdhc.c ****         i++;
 542:../drivers/fsl_sdhc.c ****     }
 543:../drivers/fsl_sdhc.c **** 
 544:../drivers/fsl_sdhc.c ****     return transferredWords;
 545:../drivers/fsl_sdhc.c **** }
 332              		.loc 1 545 0
 333 0036 2846     		mov	r0, r5
 334              	.LVL37:
 335 0038 70BD     		pop	{r4, r5, r6, pc}
 336              	.LVL38:
 337              	.L27:
 540:../drivers/fsl_sdhc.c ****         i++;
 338              		.loc 1 540 0
 339 003a 0E69     		ldr	r6, [r1, #16]
 340 003c 56F82550 		ldr	r5, [r6, r5, lsl #2]
 341              	.LVL39:
 342              	.LBB106:
 343              	.LBB107:
 903:../drivers/fsl_sdhc.h **** }
 344              		.loc 2 903 0
 345 0040 0562     		str	r5, [r0, #32]
 346              	.LVL40:
 347              	.LBE107:
 348              	.LBE106:
 541:../drivers/fsl_sdhc.c ****     }
 349              		.loc 1 541 0
 350 0042 0134     		adds	r4, r4, #1
 351              	.LVL41:
 352 0044 F3E7     		b	.L26
 353              		.cfi_endproc
 354              	.LFE173:
 356              		.section	.text.SDHC_TransferHandleIRQ,"ax",%progbits
 357              		.align	1
 358              		.global	SDHC_TransferHandleIRQ
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu fpv4-sp-d16
 364              	SDHC_TransferHandleIRQ:
 365              	.LFB197:
 546:../drivers/fsl_sdhc.c **** 
 547:../drivers/fsl_sdhc.c **** static status_t SDHC_WriteByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data)
 548:../drivers/fsl_sdhc.c **** {
 549:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 550:../drivers/fsl_sdhc.c ****     uint32_t transferredWords = 0U;
 551:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 552:../drivers/fsl_sdhc.c **** 
 553:../drivers/fsl_sdhc.c ****     /*
 554:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 555:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 556:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 557:../drivers/fsl_sdhc.c ****        */
 558:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 559:../drivers/fsl_sdhc.c ****     {
 560:../drivers/fsl_sdhc.c ****         data->blockSize +=
 561:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 562:../drivers/fsl_sdhc.c ****     }
 563:../drivers/fsl_sdhc.c **** 
 564:../drivers/fsl_sdhc.c ****     totalWords = (data->blockCount * data->blockSize) / sizeof(uint32_t);
 565:../drivers/fsl_sdhc.c **** 
 566:../drivers/fsl_sdhc.c ****     while ((error == kStatus_Success) && (transferredWords < totalWords))
 567:../drivers/fsl_sdhc.c ****     {
 568:../drivers/fsl_sdhc.c ****         while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_BufferWriteReadyFlag | kSDHC_DataError
 569:../drivers/fsl_sdhc.c ****         {
 570:../drivers/fsl_sdhc.c ****         }
 571:../drivers/fsl_sdhc.c **** 
 572:../drivers/fsl_sdhc.c ****         if (SDHC_GetInterruptStatusFlags(base) & kSDHC_DataErrorFlag)
 573:../drivers/fsl_sdhc.c ****         {
 574:../drivers/fsl_sdhc.c ****             if (!(data->enableIgnoreError))
 575:../drivers/fsl_sdhc.c ****             {
 576:../drivers/fsl_sdhc.c ****                 error = kStatus_Fail;
 577:../drivers/fsl_sdhc.c ****             }
 578:../drivers/fsl_sdhc.c ****         }
 579:../drivers/fsl_sdhc.c ****         if (error == kStatus_Success)
 580:../drivers/fsl_sdhc.c ****         {
 581:../drivers/fsl_sdhc.c ****             transferredWords = SDHC_WriteDataPort(base, data, transferredWords);
 582:../drivers/fsl_sdhc.c ****         }
 583:../drivers/fsl_sdhc.c **** 
 584:../drivers/fsl_sdhc.c ****         /* Clear buffer enable flag to trigger transfer. Clear error flag when SDHC encounter error
 585:../drivers/fsl_sdhc.c ****         SDHC_ClearInterruptStatusFlags(base, (kSDHC_BufferWriteReadyFlag | kSDHC_DataErrorFlag));
 586:../drivers/fsl_sdhc.c ****     }
 587:../drivers/fsl_sdhc.c **** 
 588:../drivers/fsl_sdhc.c ****     /* Wait write data complete or data transfer error after the last writing operation. */
 589:../drivers/fsl_sdhc.c ****     while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag)))
 590:../drivers/fsl_sdhc.c ****     {
 591:../drivers/fsl_sdhc.c ****     }
 592:../drivers/fsl_sdhc.c ****     if (SDHC_GetInterruptStatusFlags(base) & kSDHC_DataErrorFlag)
 593:../drivers/fsl_sdhc.c ****     {
 594:../drivers/fsl_sdhc.c ****         if (!(data->enableIgnoreError))
 595:../drivers/fsl_sdhc.c ****         {
 596:../drivers/fsl_sdhc.c ****             error = kStatus_Fail;
 597:../drivers/fsl_sdhc.c ****         }
 598:../drivers/fsl_sdhc.c ****     }
 599:../drivers/fsl_sdhc.c **** 
 600:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, (kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag));
 601:../drivers/fsl_sdhc.c **** 
 602:../drivers/fsl_sdhc.c ****     return error;
 603:../drivers/fsl_sdhc.c **** }
 604:../drivers/fsl_sdhc.c **** 
 605:../drivers/fsl_sdhc.c **** static status_t SDHC_SendCommandBlocking(SDHC_Type *base, sdhc_command_t *command)
 606:../drivers/fsl_sdhc.c **** {
 607:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 608:../drivers/fsl_sdhc.c **** 
 609:../drivers/fsl_sdhc.c ****     /* Wait command complete or SDHC encounters error. */
 610:../drivers/fsl_sdhc.c ****     while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_CommandCompleteFlag | kSDHC_CommandErrorFl
 611:../drivers/fsl_sdhc.c ****     {
 612:../drivers/fsl_sdhc.c ****     }
 613:../drivers/fsl_sdhc.c **** 
 614:../drivers/fsl_sdhc.c ****     if (SDHC_GetInterruptStatusFlags(base) & kSDHC_CommandErrorFlag)
 615:../drivers/fsl_sdhc.c ****     {
 616:../drivers/fsl_sdhc.c ****         error = kStatus_Fail;
 617:../drivers/fsl_sdhc.c ****     }
 618:../drivers/fsl_sdhc.c ****     /* Receive response when command completes successfully. */
 619:../drivers/fsl_sdhc.c ****     if (error == kStatus_Success)
 620:../drivers/fsl_sdhc.c ****     {
 621:../drivers/fsl_sdhc.c ****         error = SDHC_ReceiveCommandResponse(base, command);
 622:../drivers/fsl_sdhc.c ****     }
 623:../drivers/fsl_sdhc.c **** 
 624:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, (kSDHC_CommandCompleteFlag | kSDHC_CommandErrorFlag));
 625:../drivers/fsl_sdhc.c **** 
 626:../drivers/fsl_sdhc.c ****     return error;
 627:../drivers/fsl_sdhc.c **** }
 628:../drivers/fsl_sdhc.c **** 
 629:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data)
 630:../drivers/fsl_sdhc.c **** {
 631:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 632:../drivers/fsl_sdhc.c **** 
 633:../drivers/fsl_sdhc.c ****     if (data->rxData)
 634:../drivers/fsl_sdhc.c ****     {
 635:../drivers/fsl_sdhc.c ****         error = SDHC_ReadByDataPortBlocking(base, data);
 636:../drivers/fsl_sdhc.c ****     }
 637:../drivers/fsl_sdhc.c ****     else
 638:../drivers/fsl_sdhc.c ****     {
 639:../drivers/fsl_sdhc.c ****         error = SDHC_WriteByDataPortBlocking(base, data);
 640:../drivers/fsl_sdhc.c ****     }
 641:../drivers/fsl_sdhc.c **** 
 642:../drivers/fsl_sdhc.c ****     return error;
 643:../drivers/fsl_sdhc.c **** }
 644:../drivers/fsl_sdhc.c **** 
 645:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByAdma2Blocking(SDHC_Type *base, sdhc_data_t *data)
 646:../drivers/fsl_sdhc.c **** {
 647:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 648:../drivers/fsl_sdhc.c **** 
 649:../drivers/fsl_sdhc.c ****     /* Wait data complete or SDHC encounters error. */
 650:../drivers/fsl_sdhc.c ****     while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag | k
 651:../drivers/fsl_sdhc.c ****     {
 652:../drivers/fsl_sdhc.c ****     }
 653:../drivers/fsl_sdhc.c ****     if (SDHC_GetInterruptStatusFlags(base) & (kSDHC_DataErrorFlag | kSDHC_DmaErrorFlag))
 654:../drivers/fsl_sdhc.c ****     {
 655:../drivers/fsl_sdhc.c ****         if (!(data->enableIgnoreError))
 656:../drivers/fsl_sdhc.c ****         {
 657:../drivers/fsl_sdhc.c ****             error = kStatus_Fail;
 658:../drivers/fsl_sdhc.c ****         }
 659:../drivers/fsl_sdhc.c ****     }
 660:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(
 661:../drivers/fsl_sdhc.c ****         base, (kSDHC_DataCompleteFlag | kSDHC_DmaCompleteFlag | kSDHC_DataErrorFlag | kSDHC_DmaErro
 662:../drivers/fsl_sdhc.c ****     return error;
 663:../drivers/fsl_sdhc.c **** }
 664:../drivers/fsl_sdhc.c **** 
 665:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 666:../drivers/fsl_sdhc.c **** #define SDHC_TransferByAdma1Blocking(base, data) SDHC_TransferByAdma2Blocking(base, data)
 667:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
 668:../drivers/fsl_sdhc.c **** 
 669:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferDataBlocking(sdhc_dma_mode_t dmaMode, SDHC_Type *base, sdhc_data_t *da
 670:../drivers/fsl_sdhc.c **** {
 671:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 672:../drivers/fsl_sdhc.c **** 
 673:../drivers/fsl_sdhc.c ****     switch (dmaMode)
 674:../drivers/fsl_sdhc.c ****     {
 675:../drivers/fsl_sdhc.c ****         case kSDHC_DmaModeNo:
 676:../drivers/fsl_sdhc.c ****             error = SDHC_TransferByDataPortBlocking(base, data);
 677:../drivers/fsl_sdhc.c ****             break;
 678:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 679:../drivers/fsl_sdhc.c ****         case kSDHC_DmaModeAdma1:
 680:../drivers/fsl_sdhc.c ****             error = SDHC_TransferByAdma1Blocking(base, data);
 681:../drivers/fsl_sdhc.c ****             break;
 682:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
 683:../drivers/fsl_sdhc.c ****         case kSDHC_DmaModeAdma2:
 684:../drivers/fsl_sdhc.c ****             error = SDHC_TransferByAdma2Blocking(base, data);
 685:../drivers/fsl_sdhc.c ****             break;
 686:../drivers/fsl_sdhc.c ****         default:
 687:../drivers/fsl_sdhc.c ****             error = kStatus_InvalidArgument;
 688:../drivers/fsl_sdhc.c ****             break;
 689:../drivers/fsl_sdhc.c ****     }
 690:../drivers/fsl_sdhc.c **** 
 691:../drivers/fsl_sdhc.c ****     return error;
 692:../drivers/fsl_sdhc.c **** }
 693:../drivers/fsl_sdhc.c **** 
 694:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCardDetect(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interrup
 695:../drivers/fsl_sdhc.c **** {
 696:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CardInsertionFlag)
 697:../drivers/fsl_sdhc.c ****     {
 698:../drivers/fsl_sdhc.c ****         if (handle->callback.CardInserted)
 699:../drivers/fsl_sdhc.c ****         {
 700:../drivers/fsl_sdhc.c ****             handle->callback.CardInserted(base, handle->userData);
 701:../drivers/fsl_sdhc.c ****         }
 702:../drivers/fsl_sdhc.c ****     }
 703:../drivers/fsl_sdhc.c ****     else
 704:../drivers/fsl_sdhc.c ****     {
 705:../drivers/fsl_sdhc.c ****         if (handle->callback.CardRemoved)
 706:../drivers/fsl_sdhc.c ****         {
 707:../drivers/fsl_sdhc.c ****             handle->callback.CardRemoved(base, handle->userData);
 708:../drivers/fsl_sdhc.c ****         }
 709:../drivers/fsl_sdhc.c ****     }
 710:../drivers/fsl_sdhc.c **** }
 711:../drivers/fsl_sdhc.c **** 
 712:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCommand(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFl
 713:../drivers/fsl_sdhc.c **** {
 714:../drivers/fsl_sdhc.c ****     assert(handle->command);
 715:../drivers/fsl_sdhc.c **** 
 716:../drivers/fsl_sdhc.c ****     if ((interruptFlags & kSDHC_CommandErrorFlag) && (!(handle->data)) && (handle->callback.Transfe
 717:../drivers/fsl_sdhc.c ****     {
 718:../drivers/fsl_sdhc.c ****         handle->callback.TransferComplete(base, handle, kStatus_SDHC_SendCommandFailed, handle->use
 719:../drivers/fsl_sdhc.c ****     }
 720:../drivers/fsl_sdhc.c ****     else
 721:../drivers/fsl_sdhc.c ****     {
 722:../drivers/fsl_sdhc.c ****         /* Receive response */
 723:../drivers/fsl_sdhc.c ****         SDHC_ReceiveCommandResponse(base, handle->command);
 724:../drivers/fsl_sdhc.c ****         if ((!(handle->data)) && (handle->callback.TransferComplete))
 725:../drivers/fsl_sdhc.c ****         {
 726:../drivers/fsl_sdhc.c ****             handle->callback.TransferComplete(base, handle, kStatus_Success, handle->userData);
 727:../drivers/fsl_sdhc.c ****         }
 728:../drivers/fsl_sdhc.c ****     }
 729:../drivers/fsl_sdhc.c **** }
 730:../drivers/fsl_sdhc.c **** 
 731:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleData(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFlags
 732:../drivers/fsl_sdhc.c **** {
 733:../drivers/fsl_sdhc.c ****     assert(handle->data);
 734:../drivers/fsl_sdhc.c **** 
 735:../drivers/fsl_sdhc.c ****     if ((!(handle->data->enableIgnoreError)) && (interruptFlags & (kSDHC_DataErrorFlag | kSDHC_DmaE
 736:../drivers/fsl_sdhc.c ****         (handle->callback.TransferComplete))
 737:../drivers/fsl_sdhc.c ****     {
 738:../drivers/fsl_sdhc.c ****         handle->callback.TransferComplete(base, handle, kStatus_SDHC_TransferDataFailed, handle->us
 739:../drivers/fsl_sdhc.c ****     }
 740:../drivers/fsl_sdhc.c ****     else
 741:../drivers/fsl_sdhc.c ****     {
 742:../drivers/fsl_sdhc.c ****         if (interruptFlags & kSDHC_BufferReadReadyFlag)
 743:../drivers/fsl_sdhc.c ****         {
 744:../drivers/fsl_sdhc.c ****             handle->transferredWords = SDHC_ReadDataPort(base, handle->data, handle->transferredWor
 745:../drivers/fsl_sdhc.c ****         }
 746:../drivers/fsl_sdhc.c ****         else if (interruptFlags & kSDHC_BufferWriteReadyFlag)
 747:../drivers/fsl_sdhc.c ****         {
 748:../drivers/fsl_sdhc.c ****             handle->transferredWords = SDHC_WriteDataPort(base, handle->data, handle->transferredWo
 749:../drivers/fsl_sdhc.c ****         }
 750:../drivers/fsl_sdhc.c ****         else
 751:../drivers/fsl_sdhc.c ****         {
 752:../drivers/fsl_sdhc.c ****         }
 753:../drivers/fsl_sdhc.c **** 
 754:../drivers/fsl_sdhc.c ****         if ((interruptFlags & kSDHC_DataCompleteFlag) && (handle->callback.TransferComplete))
 755:../drivers/fsl_sdhc.c ****         {
 756:../drivers/fsl_sdhc.c ****             handle->callback.TransferComplete(base, handle, kStatus_Success, handle->userData);
 757:../drivers/fsl_sdhc.c ****         }
 758:../drivers/fsl_sdhc.c ****         else
 759:../drivers/fsl_sdhc.c ****         {
 760:../drivers/fsl_sdhc.c ****             /* Do nothing when DMA complete flag is set. Wait until data complete flag is set. */
 761:../drivers/fsl_sdhc.c ****         }
 762:../drivers/fsl_sdhc.c ****     }
 763:../drivers/fsl_sdhc.c **** }
 764:../drivers/fsl_sdhc.c **** 
 765:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioInterrupt(SDHC_Type *base, sdhc_handle_t *handle)
 766:../drivers/fsl_sdhc.c **** {
 767:../drivers/fsl_sdhc.c ****     if (handle->callback.SdioInterrupt)
 768:../drivers/fsl_sdhc.c ****     {
 769:../drivers/fsl_sdhc.c ****         handle->callback.SdioInterrupt(base, handle->userData);
 770:../drivers/fsl_sdhc.c ****     }
 771:../drivers/fsl_sdhc.c **** }
 772:../drivers/fsl_sdhc.c **** 
 773:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioBlockGap(SDHC_Type *base, sdhc_handle_t *handle)
 774:../drivers/fsl_sdhc.c **** {
 775:../drivers/fsl_sdhc.c ****     if (handle->callback.SdioBlockGap)
 776:../drivers/fsl_sdhc.c ****     {
 777:../drivers/fsl_sdhc.c ****         handle->callback.SdioBlockGap(base, handle->userData);
 778:../drivers/fsl_sdhc.c ****     }
 779:../drivers/fsl_sdhc.c **** }
 780:../drivers/fsl_sdhc.c **** 
 781:../drivers/fsl_sdhc.c **** void SDHC_Init(SDHC_Type *base, const sdhc_config_t *config)
 782:../drivers/fsl_sdhc.c **** {
 783:../drivers/fsl_sdhc.c ****     assert(config);
 784:../drivers/fsl_sdhc.c **** #if !defined FSL_SDHC_ENABLE_ADMA1
 785:../drivers/fsl_sdhc.c ****     assert(config->dmaMode != kSDHC_DmaModeAdma1);
 786:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
 787:../drivers/fsl_sdhc.c ****     assert((config->writeWatermarkLevel >= 1U) && (config->writeWatermarkLevel <= 128U));
 788:../drivers/fsl_sdhc.c ****     assert((config->readWatermarkLevel >= 1U) && (config->readWatermarkLevel <= 128U));
 789:../drivers/fsl_sdhc.c **** 
 790:../drivers/fsl_sdhc.c ****     uint32_t proctl;
 791:../drivers/fsl_sdhc.c ****     uint32_t wml;
 792:../drivers/fsl_sdhc.c **** 
 793:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 794:../drivers/fsl_sdhc.c ****     /* Enable SDHC clock. */
 795:../drivers/fsl_sdhc.c ****     CLOCK_EnableClock(s_sdhcClock[SDHC_GetInstance(base)]);
 796:../drivers/fsl_sdhc.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 797:../drivers/fsl_sdhc.c **** 
 798:../drivers/fsl_sdhc.c ****     /* Reset SDHC. */
 799:../drivers/fsl_sdhc.c ****     SDHC_Reset(base, kSDHC_ResetAll, 100);
 800:../drivers/fsl_sdhc.c **** 
 801:../drivers/fsl_sdhc.c ****     proctl = base->PROCTL;
 802:../drivers/fsl_sdhc.c ****     wml = base->WML;
 803:../drivers/fsl_sdhc.c **** 
 804:../drivers/fsl_sdhc.c ****     proctl &= ~(SDHC_PROCTL_D3CD_MASK | SDHC_PROCTL_EMODE_MASK | SDHC_PROCTL_DMAS_MASK);
 805:../drivers/fsl_sdhc.c ****     /* Set DAT3 as card detection pin */
 806:../drivers/fsl_sdhc.c ****     if (config->cardDetectDat3)
 807:../drivers/fsl_sdhc.c ****     {
 808:../drivers/fsl_sdhc.c ****         proctl |= SDHC_PROCTL_D3CD_MASK;
 809:../drivers/fsl_sdhc.c ****     }
 810:../drivers/fsl_sdhc.c ****     /* Endian mode and DMA mode */
 811:../drivers/fsl_sdhc.c ****     proctl |= (SDHC_PROCTL_EMODE(config->endianMode) | SDHC_PROCTL_DMAS(config->dmaMode));
 812:../drivers/fsl_sdhc.c **** 
 813:../drivers/fsl_sdhc.c ****     /* Watermark level */
 814:../drivers/fsl_sdhc.c ****     wml &= ~(SDHC_WML_RDWML_MASK | SDHC_WML_WRWML_MASK);
 815:../drivers/fsl_sdhc.c ****     wml |= (SDHC_WML_RDWML(config->readWatermarkLevel) | SDHC_WML_WRWML(config->writeWatermarkLevel
 816:../drivers/fsl_sdhc.c **** 
 817:../drivers/fsl_sdhc.c ****     base->WML = wml;
 818:../drivers/fsl_sdhc.c ****     base->PROCTL = proctl;
 819:../drivers/fsl_sdhc.c **** 
 820:../drivers/fsl_sdhc.c ****     /* Disable all clock auto gated off feature because of DAT0 line logic(card buffer full status)
 821:../drivers/fsl_sdhc.c ****     correctly when clock auto gated off is enabled. */
 822:../drivers/fsl_sdhc.c ****     base->SYSCTL |= (SDHC_SYSCTL_PEREN_MASK | SDHC_SYSCTL_HCKEN_MASK | SDHC_SYSCTL_IPGEN_MASK);
 823:../drivers/fsl_sdhc.c **** 
 824:../drivers/fsl_sdhc.c ****     /* Enable interrupt status but doesn't enable interrupt signal. */
 825:../drivers/fsl_sdhc.c ****     SDHC_SetTransferInterrupt(base, false);
 826:../drivers/fsl_sdhc.c **** }
 827:../drivers/fsl_sdhc.c **** 
 828:../drivers/fsl_sdhc.c **** void SDHC_Deinit(SDHC_Type *base)
 829:../drivers/fsl_sdhc.c **** {
 830:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 831:../drivers/fsl_sdhc.c ****     /* Disable clock. */
 832:../drivers/fsl_sdhc.c ****     CLOCK_DisableClock(s_sdhcClock[SDHC_GetInstance(base)]);
 833:../drivers/fsl_sdhc.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 834:../drivers/fsl_sdhc.c **** }
 835:../drivers/fsl_sdhc.c **** 
 836:../drivers/fsl_sdhc.c **** bool SDHC_Reset(SDHC_Type *base, uint32_t mask, uint32_t timeout)
 837:../drivers/fsl_sdhc.c **** {
 838:../drivers/fsl_sdhc.c ****     base->SYSCTL |= (mask & (SDHC_SYSCTL_RSTA_MASK | SDHC_SYSCTL_RSTC_MASK | SDHC_SYSCTL_RSTD_MASK)
 839:../drivers/fsl_sdhc.c ****     /* Delay some time to wait reset success. */
 840:../drivers/fsl_sdhc.c ****     while ((base->SYSCTL & mask))
 841:../drivers/fsl_sdhc.c ****     {
 842:../drivers/fsl_sdhc.c ****         if (!timeout)
 843:../drivers/fsl_sdhc.c ****         {
 844:../drivers/fsl_sdhc.c ****             break;
 845:../drivers/fsl_sdhc.c ****         }
 846:../drivers/fsl_sdhc.c ****         timeout--;
 847:../drivers/fsl_sdhc.c ****     }
 848:../drivers/fsl_sdhc.c **** 
 849:../drivers/fsl_sdhc.c ****     return ((!timeout) ? false : true);
 850:../drivers/fsl_sdhc.c **** }
 851:../drivers/fsl_sdhc.c **** 
 852:../drivers/fsl_sdhc.c **** void SDHC_GetCapability(SDHC_Type *base, sdhc_capability_t *capability)
 853:../drivers/fsl_sdhc.c **** {
 854:../drivers/fsl_sdhc.c ****     assert(capability);
 855:../drivers/fsl_sdhc.c **** 
 856:../drivers/fsl_sdhc.c ****     uint32_t htCapability;
 857:../drivers/fsl_sdhc.c ****     uint32_t hostVer;
 858:../drivers/fsl_sdhc.c ****     uint32_t maxBlockLength;
 859:../drivers/fsl_sdhc.c **** 
 860:../drivers/fsl_sdhc.c ****     hostVer = base->HOSTVER;
 861:../drivers/fsl_sdhc.c ****     htCapability = base->HTCAPBLT;
 862:../drivers/fsl_sdhc.c **** 
 863:../drivers/fsl_sdhc.c ****     /* Get the capability of SDHC. */
 864:../drivers/fsl_sdhc.c ****     capability->specVersion = ((hostVer & SDHC_HOSTVER_SVN_MASK) >> SDHC_HOSTVER_SVN_SHIFT);
 865:../drivers/fsl_sdhc.c ****     capability->vendorVersion = ((hostVer & SDHC_HOSTVER_VVN_MASK) >> SDHC_HOSTVER_VVN_SHIFT);
 866:../drivers/fsl_sdhc.c ****     maxBlockLength = ((htCapability & SDHC_HTCAPBLT_MBL_MASK) >> SDHC_HTCAPBLT_MBL_SHIFT);
 867:../drivers/fsl_sdhc.c ****     capability->maxBlockLength = (512U << maxBlockLength);
 868:../drivers/fsl_sdhc.c ****     /* Other attributes not in HTCAPBLT register. */
 869:../drivers/fsl_sdhc.c ****     capability->maxBlockCount = SDHC_MAX_BLOCK_COUNT;
 870:../drivers/fsl_sdhc.c ****     capability->flags = (htCapability & (kSDHC_SupportAdmaFlag | kSDHC_SupportHighSpeedFlag | kSDHC
 871:../drivers/fsl_sdhc.c ****                                          kSDHC_SupportSuspendResumeFlag | kSDHC_SupportV330Flag));
 872:../drivers/fsl_sdhc.c **** #if defined FSL_FEATURE_SDHC_HAS_V300_SUPPORT && FSL_FEATURE_SDHC_HAS_V300_SUPPORT
 873:../drivers/fsl_sdhc.c ****     capability->flags |= (htCapability & kSDHC_SupportV300Flag);
 874:../drivers/fsl_sdhc.c **** #endif
 875:../drivers/fsl_sdhc.c **** #if defined FSL_FEATURE_SDHC_HAS_V180_SUPPORT && FSL_FEATURE_SDHC_HAS_V180_SUPPORT
 876:../drivers/fsl_sdhc.c ****     capability->flags |= (htCapability & kSDHC_SupportV180Flag);
 877:../drivers/fsl_sdhc.c **** #endif
 878:../drivers/fsl_sdhc.c ****     /* eSDHC on all kinetis boards will support 4/8 bit data bus width. */
 879:../drivers/fsl_sdhc.c ****     capability->flags |= (kSDHC_Support4BitFlag | kSDHC_Support8BitFlag);
 880:../drivers/fsl_sdhc.c **** }
 881:../drivers/fsl_sdhc.c **** 
 882:../drivers/fsl_sdhc.c **** uint32_t SDHC_SetSdClock(SDHC_Type *base, uint32_t srcClock_Hz, uint32_t busClock_Hz)
 883:../drivers/fsl_sdhc.c **** {
 884:../drivers/fsl_sdhc.c ****     assert(srcClock_Hz != 0U);
 885:../drivers/fsl_sdhc.c ****     assert((busClock_Hz != 0U) && (busClock_Hz <= srcClock_Hz));
 886:../drivers/fsl_sdhc.c **** 
 887:../drivers/fsl_sdhc.c ****     uint32_t totalDiv = 0U;
 888:../drivers/fsl_sdhc.c ****     uint32_t divisor = 0U;
 889:../drivers/fsl_sdhc.c ****     uint32_t prescaler = 0U;
 890:../drivers/fsl_sdhc.c ****     uint32_t sysctl = 0U;
 891:../drivers/fsl_sdhc.c ****     uint32_t nearestFrequency = 0U;
 892:../drivers/fsl_sdhc.c **** 
 893:../drivers/fsl_sdhc.c ****     /* calucate total divisor first */
 894:../drivers/fsl_sdhc.c ****     totalDiv = srcClock_Hz / busClock_Hz;
 895:../drivers/fsl_sdhc.c **** 
 896:../drivers/fsl_sdhc.c ****     if (totalDiv != 0U)
 897:../drivers/fsl_sdhc.c ****     {
 898:../drivers/fsl_sdhc.c ****         /* calucate the divisor (srcClock_Hz / divisor) <= busClock_Hz */
 899:../drivers/fsl_sdhc.c ****         if ((srcClock_Hz / totalDiv) > busClock_Hz)
 900:../drivers/fsl_sdhc.c ****         {
 901:../drivers/fsl_sdhc.c ****             totalDiv++;
 902:../drivers/fsl_sdhc.c ****         }
 903:../drivers/fsl_sdhc.c **** 
 904:../drivers/fsl_sdhc.c ****         /* divide the total divisor to div and prescaler */
 905:../drivers/fsl_sdhc.c ****         if (totalDiv > SDHC_MAX_DVS)
 906:../drivers/fsl_sdhc.c ****         {
 907:../drivers/fsl_sdhc.c ****             prescaler = totalDiv / SDHC_MAX_DVS;
 908:../drivers/fsl_sdhc.c ****             /* prescaler must be a value which equal 2^n and smaller than SDHC_MAX_CLKFS */
 909:../drivers/fsl_sdhc.c ****             while (((SDHC_MAX_CLKFS % prescaler) != 0U) || (prescaler == 1U))
 910:../drivers/fsl_sdhc.c ****             {
 911:../drivers/fsl_sdhc.c ****                 prescaler++;
 912:../drivers/fsl_sdhc.c ****             }
 913:../drivers/fsl_sdhc.c ****             /* calucate the divisor */
 914:../drivers/fsl_sdhc.c ****             divisor = totalDiv / prescaler;
 915:../drivers/fsl_sdhc.c ****             /* fine tuning the divisor until divisor * prescaler >= totalDiv */
 916:../drivers/fsl_sdhc.c ****             while ((divisor * prescaler) < totalDiv)
 917:../drivers/fsl_sdhc.c ****             {
 918:../drivers/fsl_sdhc.c ****                 divisor++;
 919:../drivers/fsl_sdhc.c ****             }
 920:../drivers/fsl_sdhc.c ****             nearestFrequency = srcClock_Hz / divisor / prescaler;
 921:../drivers/fsl_sdhc.c ****         }
 922:../drivers/fsl_sdhc.c ****         else
 923:../drivers/fsl_sdhc.c ****         {
 924:../drivers/fsl_sdhc.c ****             divisor = totalDiv;
 925:../drivers/fsl_sdhc.c ****             prescaler = 0U;
 926:../drivers/fsl_sdhc.c ****             nearestFrequency = srcClock_Hz / divisor;
 927:../drivers/fsl_sdhc.c ****         }
 928:../drivers/fsl_sdhc.c ****     }
 929:../drivers/fsl_sdhc.c ****     /* in this condition , srcClock_Hz = busClock_Hz, */
 930:../drivers/fsl_sdhc.c ****     else
 931:../drivers/fsl_sdhc.c ****     {
 932:../drivers/fsl_sdhc.c ****         /* total divider = 1U */
 933:../drivers/fsl_sdhc.c ****         divisor = 0U;
 934:../drivers/fsl_sdhc.c ****         prescaler = 0U;
 935:../drivers/fsl_sdhc.c ****         nearestFrequency = srcClock_Hz;
 936:../drivers/fsl_sdhc.c ****     }
 937:../drivers/fsl_sdhc.c **** 
 938:../drivers/fsl_sdhc.c ****     /* calucate the value write to register */
 939:../drivers/fsl_sdhc.c ****     if (divisor != 0U)
 940:../drivers/fsl_sdhc.c ****     {
 941:../drivers/fsl_sdhc.c ****         SDHC_PREV_DVS(divisor);
 942:../drivers/fsl_sdhc.c ****     }
 943:../drivers/fsl_sdhc.c ****     /* calucate the value write to register */
 944:../drivers/fsl_sdhc.c ****     if (prescaler != 0U)
 945:../drivers/fsl_sdhc.c ****     {
 946:../drivers/fsl_sdhc.c ****         SDHC_PREV_CLKFS(prescaler);
 947:../drivers/fsl_sdhc.c ****     }
 948:../drivers/fsl_sdhc.c **** 
 949:../drivers/fsl_sdhc.c ****     /* Disable SD clock. It should be disabled before changing the SD clock frequency.*/
 950:../drivers/fsl_sdhc.c ****     base->SYSCTL &= ~SDHC_SYSCTL_SDCLKEN_MASK;
 951:../drivers/fsl_sdhc.c **** 
 952:../drivers/fsl_sdhc.c ****     /* Set the SD clock frequency divisor, SD clock frequency select, data timeout counter value. *
 953:../drivers/fsl_sdhc.c ****     sysctl = base->SYSCTL;
 954:../drivers/fsl_sdhc.c ****     sysctl &= ~(SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK | SDHC_SYSCTL_DTOCV_MASK);
 955:../drivers/fsl_sdhc.c ****     sysctl |= (SDHC_SYSCTL_DVS(divisor) | SDHC_SYSCTL_SDCLKFS(prescaler) | SDHC_SYSCTL_DTOCV(0xEU))
 956:../drivers/fsl_sdhc.c ****     base->SYSCTL = sysctl;
 957:../drivers/fsl_sdhc.c **** 
 958:../drivers/fsl_sdhc.c ****     /* Wait until the SD clock is stable. */
 959:../drivers/fsl_sdhc.c ****     while (!(base->PRSSTAT & SDHC_PRSSTAT_SDSTB_MASK))
 960:../drivers/fsl_sdhc.c ****     {
 961:../drivers/fsl_sdhc.c ****     }
 962:../drivers/fsl_sdhc.c ****     /* Enable the SD clock. */
 963:../drivers/fsl_sdhc.c ****     base->SYSCTL |= SDHC_SYSCTL_SDCLKEN_MASK;
 964:../drivers/fsl_sdhc.c **** 
 965:../drivers/fsl_sdhc.c ****     return nearestFrequency;
 966:../drivers/fsl_sdhc.c **** }
 967:../drivers/fsl_sdhc.c **** 
 968:../drivers/fsl_sdhc.c **** bool SDHC_SetCardActive(SDHC_Type *base, uint32_t timeout)
 969:../drivers/fsl_sdhc.c **** {
 970:../drivers/fsl_sdhc.c ****     base->SYSCTL |= SDHC_SYSCTL_INITA_MASK;
 971:../drivers/fsl_sdhc.c ****     /* Delay some time to wait card become active state. */
 972:../drivers/fsl_sdhc.c ****     while (base->SYSCTL & SDHC_SYSCTL_INITA_MASK)
 973:../drivers/fsl_sdhc.c ****     {
 974:../drivers/fsl_sdhc.c ****         if (!timeout)
 975:../drivers/fsl_sdhc.c ****         {
 976:../drivers/fsl_sdhc.c ****             break;
 977:../drivers/fsl_sdhc.c ****         }
 978:../drivers/fsl_sdhc.c ****         timeout--;
 979:../drivers/fsl_sdhc.c ****     }
 980:../drivers/fsl_sdhc.c **** 
 981:../drivers/fsl_sdhc.c ****     return ((!timeout) ? false : true);
 982:../drivers/fsl_sdhc.c **** }
 983:../drivers/fsl_sdhc.c **** 
 984:../drivers/fsl_sdhc.c **** void SDHC_SetTransferConfig(SDHC_Type *base, const sdhc_transfer_config_t *config)
 985:../drivers/fsl_sdhc.c **** {
 986:../drivers/fsl_sdhc.c ****     assert(config);
 987:../drivers/fsl_sdhc.c ****     assert(config->dataBlockSize <= (SDHC_BLKATTR_BLKSIZE_MASK >> SDHC_BLKATTR_BLKSIZE_SHIFT));
 988:../drivers/fsl_sdhc.c ****     assert(config->dataBlockCount <= (SDHC_BLKATTR_BLKCNT_MASK >> SDHC_BLKATTR_BLKCNT_SHIFT));
 989:../drivers/fsl_sdhc.c **** 
 990:../drivers/fsl_sdhc.c ****     base->BLKATTR = ((base->BLKATTR & ~(SDHC_BLKATTR_BLKSIZE_MASK | SDHC_BLKATTR_BLKCNT_MASK)) |
 991:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 992:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 993:../drivers/fsl_sdhc.c ****     base->XFERTYP = (((config->commandIndex << SDHC_XFERTYP_CMDINX_SHIFT) & SDHC_XFERTYP_CMDINX_MAS
 994:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 995:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CMDTYP_MASK | SDHC_XFERTYP_BCEN_MASK | SDHC_XFE
 996:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP_MASK | SDHC_XF
 997:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_AC12EN_MASK)));
 998:../drivers/fsl_sdhc.c **** }
 999:../drivers/fsl_sdhc.c **** 
1000:../drivers/fsl_sdhc.c **** void SDHC_EnableSdioControl(SDHC_Type *base, uint32_t mask, bool enable)
1001:../drivers/fsl_sdhc.c **** {
1002:../drivers/fsl_sdhc.c ****     uint32_t proctl = base->PROCTL;
1003:../drivers/fsl_sdhc.c ****     uint32_t vendor = base->VENDOR;
1004:../drivers/fsl_sdhc.c **** 
1005:../drivers/fsl_sdhc.c ****     if (enable)
1006:../drivers/fsl_sdhc.c ****     {
1007:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_StopAtBlockGapFlag)
1008:../drivers/fsl_sdhc.c ****         {
1009:../drivers/fsl_sdhc.c ****             proctl |= SDHC_PROCTL_SABGREQ_MASK;
1010:../drivers/fsl_sdhc.c ****         }
1011:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ReadWaitControlFlag)
1012:../drivers/fsl_sdhc.c ****         {
1013:../drivers/fsl_sdhc.c ****             proctl |= SDHC_PROCTL_RWCTL_MASK;
1014:../drivers/fsl_sdhc.c ****         }
1015:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_InterruptAtBlockGapFlag)
1016:../drivers/fsl_sdhc.c ****         {
1017:../drivers/fsl_sdhc.c ****             proctl |= SDHC_PROCTL_IABG_MASK;
1018:../drivers/fsl_sdhc.c ****         }
1019:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ExactBlockNumberReadFlag)
1020:../drivers/fsl_sdhc.c ****         {
1021:../drivers/fsl_sdhc.c ****             vendor |= SDHC_VENDOR_EXBLKNU_MASK;
1022:../drivers/fsl_sdhc.c ****         }
1023:../drivers/fsl_sdhc.c ****     }
1024:../drivers/fsl_sdhc.c ****     else
1025:../drivers/fsl_sdhc.c ****     {
1026:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_StopAtBlockGapFlag)
1027:../drivers/fsl_sdhc.c ****         {
1028:../drivers/fsl_sdhc.c ****             proctl &= ~SDHC_PROCTL_SABGREQ_MASK;
1029:../drivers/fsl_sdhc.c ****         }
1030:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ReadWaitControlFlag)
1031:../drivers/fsl_sdhc.c ****         {
1032:../drivers/fsl_sdhc.c ****             proctl &= ~SDHC_PROCTL_RWCTL_MASK;
1033:../drivers/fsl_sdhc.c ****         }
1034:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_InterruptAtBlockGapFlag)
1035:../drivers/fsl_sdhc.c ****         {
1036:../drivers/fsl_sdhc.c ****             proctl &= ~SDHC_PROCTL_IABG_MASK;
1037:../drivers/fsl_sdhc.c ****         }
1038:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ExactBlockNumberReadFlag)
1039:../drivers/fsl_sdhc.c ****         {
1040:../drivers/fsl_sdhc.c ****             vendor &= ~SDHC_VENDOR_EXBLKNU_MASK;
1041:../drivers/fsl_sdhc.c ****         }
1042:../drivers/fsl_sdhc.c ****     }
1043:../drivers/fsl_sdhc.c **** 
1044:../drivers/fsl_sdhc.c ****     base->PROCTL = proctl;
1045:../drivers/fsl_sdhc.c ****     base->VENDOR = vendor;
1046:../drivers/fsl_sdhc.c **** }
1047:../drivers/fsl_sdhc.c **** 
1048:../drivers/fsl_sdhc.c **** void SDHC_SetMmcBootConfig(SDHC_Type *base, const sdhc_boot_config_t *config)
1049:../drivers/fsl_sdhc.c **** {
1050:../drivers/fsl_sdhc.c ****     assert(config);
1051:../drivers/fsl_sdhc.c ****     assert(config->ackTimeoutCount <= (SDHC_MMCBOOT_DTOCVACK_MASK >> SDHC_MMCBOOT_DTOCVACK_SHIFT));
1052:../drivers/fsl_sdhc.c ****     assert(config->blockCount <= (SDHC_MMCBOOT_BOOTBLKCNT_MASK >> SDHC_MMCBOOT_BOOTBLKCNT_SHIFT));
1053:../drivers/fsl_sdhc.c **** 
1054:../drivers/fsl_sdhc.c ****     uint32_t mmcboot = 0U;
1055:../drivers/fsl_sdhc.c **** 
1056:../drivers/fsl_sdhc.c ****     mmcboot = (SDHC_MMCBOOT_DTOCVACK(config->ackTimeoutCount) | SDHC_MMCBOOT_BOOTMODE(config->bootM
1057:../drivers/fsl_sdhc.c ****                SDHC_MMCBOOT_BOOTBLKCNT(config->blockCount));
1058:../drivers/fsl_sdhc.c ****     if (config->enableBootAck)
1059:../drivers/fsl_sdhc.c ****     {
1060:../drivers/fsl_sdhc.c ****         mmcboot |= SDHC_MMCBOOT_BOOTACK_MASK;
1061:../drivers/fsl_sdhc.c ****     }
1062:../drivers/fsl_sdhc.c ****     if (config->enableBoot)
1063:../drivers/fsl_sdhc.c ****     {
1064:../drivers/fsl_sdhc.c ****         mmcboot |= SDHC_MMCBOOT_BOOTEN_MASK;
1065:../drivers/fsl_sdhc.c ****     }
1066:../drivers/fsl_sdhc.c ****     if (config->enableAutoStopAtBlockGap)
1067:../drivers/fsl_sdhc.c ****     {
1068:../drivers/fsl_sdhc.c ****         mmcboot |= SDHC_MMCBOOT_AUTOSABGEN_MASK;
1069:../drivers/fsl_sdhc.c ****     }
1070:../drivers/fsl_sdhc.c ****     base->MMCBOOT = mmcboot;
1071:../drivers/fsl_sdhc.c **** }
1072:../drivers/fsl_sdhc.c **** 
1073:../drivers/fsl_sdhc.c **** status_t SDHC_SetAdmaTableConfig(SDHC_Type *base,
1074:../drivers/fsl_sdhc.c ****                                  sdhc_dma_mode_t dmaMode,
1075:../drivers/fsl_sdhc.c ****                                  uint32_t *table,
1076:../drivers/fsl_sdhc.c ****                                  uint32_t tableWords,
1077:../drivers/fsl_sdhc.c ****                                  const uint32_t *data,
1078:../drivers/fsl_sdhc.c ****                                  uint32_t dataBytes)
1079:../drivers/fsl_sdhc.c **** {
1080:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
1081:../drivers/fsl_sdhc.c ****     const uint32_t *startAddress = data;
1082:../drivers/fsl_sdhc.c ****     uint32_t entries;
1083:../drivers/fsl_sdhc.c ****     uint32_t i;
1084:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
1085:../drivers/fsl_sdhc.c ****     sdhc_adma1_descriptor_t *adma1EntryAddress;
1086:../drivers/fsl_sdhc.c **** #endif
1087:../drivers/fsl_sdhc.c ****     sdhc_adma2_descriptor_t *adma2EntryAddress;
1088:../drivers/fsl_sdhc.c **** 
1089:../drivers/fsl_sdhc.c ****     if ((((!table) || (!tableWords)) && ((dmaMode == kSDHC_DmaModeAdma1) || (dmaMode == kSDHC_DmaMo
1090:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
1091:../drivers/fsl_sdhc.c **** #if !defined FSL_SDHC_ENABLE_ADMA1
1092:../drivers/fsl_sdhc.c ****         || (dmaMode == kSDHC_DmaModeAdma1)
1093:../drivers/fsl_sdhc.c **** #endif
1094:../drivers/fsl_sdhc.c ****             )
1095:../drivers/fsl_sdhc.c ****     {
1096:../drivers/fsl_sdhc.c ****         error = kStatus_InvalidArgument;
1097:../drivers/fsl_sdhc.c ****     }
1098:../drivers/fsl_sdhc.c ****     else if (((dmaMode == kSDHC_DmaModeAdma2) && (((uint32_t)startAddress % SDHC_ADMA2_LENGTH_ALIGN
1099:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
1100:../drivers/fsl_sdhc.c ****              || ((dmaMode == kSDHC_DmaModeAdma1) && (((uint32_t)startAddress % SDHC_ADMA1_LENGTH_AL
1101:../drivers/fsl_sdhc.c **** #endif
1102:../drivers/fsl_sdhc.c ****                  )
1103:../drivers/fsl_sdhc.c ****     {
1104:../drivers/fsl_sdhc.c ****         error = kStatus_SDHC_DMADataBufferAddrNotAlign;
1105:../drivers/fsl_sdhc.c ****     }
1106:../drivers/fsl_sdhc.c ****     else
1107:../drivers/fsl_sdhc.c ****     {
1108:../drivers/fsl_sdhc.c ****         switch (dmaMode)
1109:../drivers/fsl_sdhc.c ****         {
1110:../drivers/fsl_sdhc.c ****             case kSDHC_DmaModeNo:
1111:../drivers/fsl_sdhc.c ****                 break;
1112:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
1113:../drivers/fsl_sdhc.c ****             case kSDHC_DmaModeAdma1:
1114:../drivers/fsl_sdhc.c ****                 /*
1115:../drivers/fsl_sdhc.c ****                 * Add non aligned access support ,user need make sure your buffer size is big
1116:../drivers/fsl_sdhc.c ****                 * enough to hold the data,in other words,user need make sure the buffer size
1117:../drivers/fsl_sdhc.c ****                 * is 4 byte aligned
1118:../drivers/fsl_sdhc.c ****                 */
1119:../drivers/fsl_sdhc.c ****                 if (dataBytes % sizeof(uint32_t) != 0U)
1120:../drivers/fsl_sdhc.c ****                 {
1121:../drivers/fsl_sdhc.c ****                     dataBytes +=
1122:../drivers/fsl_sdhc.c ****                         sizeof(uint32_t) - (dataBytes % sizeof(uint32_t)); /* make the data length 
1123:../drivers/fsl_sdhc.c ****                 }
1124:../drivers/fsl_sdhc.c **** 
1125:../drivers/fsl_sdhc.c ****                 /* Check if ADMA descriptor's number is enough. */
1126:../drivers/fsl_sdhc.c ****                 entries = ((dataBytes / SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY) + 1U);
1127:../drivers/fsl_sdhc.c ****                 /* ADMA1 needs two descriptors to finish a transfer */
1128:../drivers/fsl_sdhc.c ****                 entries <<= 1U;
1129:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma1_descriptor_t)))
1130:../drivers/fsl_sdhc.c ****                 {
1131:../drivers/fsl_sdhc.c ****                     error = kStatus_OutOfRange;
1132:../drivers/fsl_sdhc.c ****                 }
1133:../drivers/fsl_sdhc.c ****                 else
1134:../drivers/fsl_sdhc.c ****                 {
1135:../drivers/fsl_sdhc.c ****                     adma1EntryAddress = (sdhc_adma1_descriptor_t *)(table);
1136:../drivers/fsl_sdhc.c ****                     for (i = 0U; i < entries; i += 2U)
1137:../drivers/fsl_sdhc.c ****                     {
1138:../drivers/fsl_sdhc.c ****                         /* Each descriptor for ADMA1 is 32-bit in length */
1139:../drivers/fsl_sdhc.c ****                         if ((dataBytes - sizeof(uint32_t) * (startAddress - data)) <=
1140:../drivers/fsl_sdhc.c ****                             SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY)
1141:../drivers/fsl_sdhc.c ****                         {
1142:../drivers/fsl_sdhc.c ****                             /* The last piece of data, setting end flag in descriptor */
1143:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] = ((uint32_t)(dataBytes - sizeof(uint32_t) * (star
1144:../drivers/fsl_sdhc.c ****                                                     << SDHC_ADMA1_DESCRIPTOR_LENGTH_SHIFT);
1145:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] |= kSDHC_Adma1DescriptorTypeSetLength;
1146:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] =
1147:../drivers/fsl_sdhc.c ****                                 ((uint32_t)(startAddress) << SDHC_ADMA1_DESCRIPTOR_ADDRESS_SHIFT);
1148:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] |=
1149:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma1DescriptorTypeTransfer | kSDHC_Adma1DescriptorEndFlag);
1150:../drivers/fsl_sdhc.c ****                         }
1151:../drivers/fsl_sdhc.c ****                         else
1152:../drivers/fsl_sdhc.c ****                         {
1153:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] = ((uint32_t)SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_
1154:../drivers/fsl_sdhc.c ****                                                     << SDHC_ADMA1_DESCRIPTOR_LENGTH_SHIFT);
1155:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] |= kSDHC_Adma1DescriptorTypeSetLength;
1156:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] =
1157:../drivers/fsl_sdhc.c ****                                 ((uint32_t)(startAddress) << SDHC_ADMA1_DESCRIPTOR_ADDRESS_SHIFT);
1158:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] |= kSDHC_Adma1DescriptorTypeTransfer;
1159:../drivers/fsl_sdhc.c ****                             startAddress += SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(uin
1160:../drivers/fsl_sdhc.c ****                         }
1161:../drivers/fsl_sdhc.c ****                     }
1162:../drivers/fsl_sdhc.c **** 
1163:../drivers/fsl_sdhc.c ****                     /* When use ADMA, disable simple DMA */
1164:../drivers/fsl_sdhc.c ****                     base->DSADDR = 0U;
1165:../drivers/fsl_sdhc.c ****                     base->ADSADDR = (uint32_t)table;
1166:../drivers/fsl_sdhc.c ****                     /* disable the buffer ready flag in DMA mode */
1167:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1168:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1169:../drivers/fsl_sdhc.c ****                 }
1170:../drivers/fsl_sdhc.c ****                 break;
1171:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
1172:../drivers/fsl_sdhc.c ****             case kSDHC_DmaModeAdma2:
1173:../drivers/fsl_sdhc.c ****                 /*
1174:../drivers/fsl_sdhc.c ****                 * Add non aligned access support ,user need make sure your buffer size is big
1175:../drivers/fsl_sdhc.c ****                 * enough to hold the data,in other words,user need make sure the buffer size
1176:../drivers/fsl_sdhc.c ****                 * is 4 byte aligned
1177:../drivers/fsl_sdhc.c ****                 */
1178:../drivers/fsl_sdhc.c ****                 if (dataBytes % sizeof(uint32_t) != 0U)
1179:../drivers/fsl_sdhc.c ****                 {
1180:../drivers/fsl_sdhc.c ****                     dataBytes +=
1181:../drivers/fsl_sdhc.c ****                         sizeof(uint32_t) - (dataBytes % sizeof(uint32_t)); /* make the data length 
1182:../drivers/fsl_sdhc.c ****                 }
1183:../drivers/fsl_sdhc.c **** 
1184:../drivers/fsl_sdhc.c ****                 /* Check if ADMA descriptor's number is enough. */
1185:../drivers/fsl_sdhc.c ****                 entries = ((dataBytes / SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY) + 1U);
1186:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma2_descriptor_t)))
1187:../drivers/fsl_sdhc.c ****                 {
1188:../drivers/fsl_sdhc.c ****                     error = kStatus_OutOfRange;
1189:../drivers/fsl_sdhc.c ****                 }
1190:../drivers/fsl_sdhc.c ****                 else
1191:../drivers/fsl_sdhc.c ****                 {
1192:../drivers/fsl_sdhc.c ****                     adma2EntryAddress = (sdhc_adma2_descriptor_t *)(table);
1193:../drivers/fsl_sdhc.c ****                     for (i = 0U; i < entries; i++)
1194:../drivers/fsl_sdhc.c ****                     {
1195:../drivers/fsl_sdhc.c ****                         /* Each descriptor for ADMA2 is 64-bit in length */
1196:../drivers/fsl_sdhc.c ****                         if ((dataBytes - sizeof(uint32_t) * (startAddress - data)) <=
1197:../drivers/fsl_sdhc.c ****                             SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY)
1198:../drivers/fsl_sdhc.c ****                         {
1199:../drivers/fsl_sdhc.c ****                             /* The last piece of data, setting end flag in descriptor */
1200:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].address = startAddress;
1201:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute = ((dataBytes - sizeof(uint32_t) * (star
1202:../drivers/fsl_sdhc.c ****                                                               << SDHC_ADMA2_DESCRIPTOR_LENGTH_SHIFT
1203:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute |=
1204:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma2DescriptorTypeTransfer | kSDHC_Adma2DescriptorEndFlag);
1205:../drivers/fsl_sdhc.c ****                         }
1206:../drivers/fsl_sdhc.c ****                         else
1207:../drivers/fsl_sdhc.c ****                         {
1208:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].address = startAddress;
1209:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute =
1210:../drivers/fsl_sdhc.c ****                                 (((SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(uint32_t)) *
1211:../drivers/fsl_sdhc.c ****                                  << SDHC_ADMA2_DESCRIPTOR_LENGTH_SHIFT);
1212:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute |= kSDHC_Adma2DescriptorTypeTransfer;
1213:../drivers/fsl_sdhc.c ****                             startAddress += (SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(ui
1214:../drivers/fsl_sdhc.c ****                         }
1215:../drivers/fsl_sdhc.c ****                     }
1216:../drivers/fsl_sdhc.c **** 
1217:../drivers/fsl_sdhc.c ****                     /* When use ADMA, disable simple DMA */
1218:../drivers/fsl_sdhc.c ****                     base->DSADDR = 0U;
1219:../drivers/fsl_sdhc.c ****                     base->ADSADDR = (uint32_t)table;
1220:../drivers/fsl_sdhc.c ****                     /* disable the buffer read flag in DMA mode */
1221:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1222:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1223:../drivers/fsl_sdhc.c ****                 }
1224:../drivers/fsl_sdhc.c ****                 break;
1225:../drivers/fsl_sdhc.c ****             default:
1226:../drivers/fsl_sdhc.c ****                 break;
1227:../drivers/fsl_sdhc.c ****         }
1228:../drivers/fsl_sdhc.c ****     }
1229:../drivers/fsl_sdhc.c **** 
1230:../drivers/fsl_sdhc.c ****     return error;
1231:../drivers/fsl_sdhc.c **** }
1232:../drivers/fsl_sdhc.c **** 
1233:../drivers/fsl_sdhc.c **** status_t SDHC_TransferBlocking(SDHC_Type *base, uint32_t *admaTable, uint32_t admaTableWords, sdhc_
1234:../drivers/fsl_sdhc.c **** {
1235:../drivers/fsl_sdhc.c ****     assert(transfer);
1236:../drivers/fsl_sdhc.c **** 
1237:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
1238:../drivers/fsl_sdhc.c ****     sdhc_dma_mode_t dmaMode = (sdhc_dma_mode_t)((base->PROCTL & SDHC_PROCTL_DMAS_MASK) >> SDHC_PROC
1239:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
1240:../drivers/fsl_sdhc.c ****     sdhc_data_t *data = transfer->data;
1241:../drivers/fsl_sdhc.c **** 
1242:../drivers/fsl_sdhc.c ****     /* make sure the cmd/block count is valid */
1243:../drivers/fsl_sdhc.c ****     if ((!command) || (data && (data->blockCount > SDHC_MAX_BLOCK_COUNT)))
1244:../drivers/fsl_sdhc.c ****     {
1245:../drivers/fsl_sdhc.c ****         return kStatus_InvalidArgument;
1246:../drivers/fsl_sdhc.c ****     }
1247:../drivers/fsl_sdhc.c **** 
1248:../drivers/fsl_sdhc.c ****     /* Wait until command/data bus out of busy status. */
1249:../drivers/fsl_sdhc.c ****     while (SDHC_GetPresentStatusFlags(base) & kSDHC_CommandInhibitFlag)
1250:../drivers/fsl_sdhc.c ****     {
1251:../drivers/fsl_sdhc.c ****     }
1252:../drivers/fsl_sdhc.c ****     while (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag))
1253:../drivers/fsl_sdhc.c ****     {
1254:../drivers/fsl_sdhc.c ****     }
1255:../drivers/fsl_sdhc.c **** 
1256:../drivers/fsl_sdhc.c ****     /* Update ADMA descriptor table according to different DMA mode(no DMA, ADMA1, ADMA2).*/
1257:../drivers/fsl_sdhc.c ****     if (data && (NULL != admaTable))
1258:../drivers/fsl_sdhc.c ****     {
1259:../drivers/fsl_sdhc.c ****         error =
1260:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
1261:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
1262:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
1263:../drivers/fsl_sdhc.c ****         if (error == kStatus_SDHC_DMADataBufferAddrNotAlign)
1264:../drivers/fsl_sdhc.c ****         {
1265:../drivers/fsl_sdhc.c ****             dmaMode = kSDHC_DmaModeNo;
1266:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
1267:../drivers/fsl_sdhc.c ****         }
1268:../drivers/fsl_sdhc.c ****         else if (error != kStatus_Success)
1269:../drivers/fsl_sdhc.c ****         {
1270:../drivers/fsl_sdhc.c ****             return error;
1271:../drivers/fsl_sdhc.c ****         }
1272:../drivers/fsl_sdhc.c ****         else
1273:../drivers/fsl_sdhc.c ****         {
1274:../drivers/fsl_sdhc.c ****         }
1275:../drivers/fsl_sdhc.c ****     }
1276:../drivers/fsl_sdhc.c **** 
1277:../drivers/fsl_sdhc.c ****     /* Send command and receive data. */
1278:../drivers/fsl_sdhc.c ****     SDHC_StartTransfer(base, command, data, dmaMode);
1279:../drivers/fsl_sdhc.c ****     if (kStatus_Success != SDHC_SendCommandBlocking(base, command))
1280:../drivers/fsl_sdhc.c ****     {
1281:../drivers/fsl_sdhc.c ****         return kStatus_SDHC_SendCommandFailed;
1282:../drivers/fsl_sdhc.c ****     }
1283:../drivers/fsl_sdhc.c ****     else if (data && (kStatus_Success != SDHC_TransferDataBlocking(dmaMode, base, data)))
1284:../drivers/fsl_sdhc.c ****     {
1285:../drivers/fsl_sdhc.c ****         return kStatus_SDHC_TransferDataFailed;
1286:../drivers/fsl_sdhc.c ****     }
1287:../drivers/fsl_sdhc.c ****     else
1288:../drivers/fsl_sdhc.c ****     {
1289:../drivers/fsl_sdhc.c ****     }
1290:../drivers/fsl_sdhc.c **** 
1291:../drivers/fsl_sdhc.c ****     return kStatus_Success;
1292:../drivers/fsl_sdhc.c **** }
1293:../drivers/fsl_sdhc.c **** 
1294:../drivers/fsl_sdhc.c **** void SDHC_TransferCreateHandle(SDHC_Type *base,
1295:../drivers/fsl_sdhc.c ****                                sdhc_handle_t *handle,
1296:../drivers/fsl_sdhc.c ****                                const sdhc_transfer_callback_t *callback,
1297:../drivers/fsl_sdhc.c ****                                void *userData)
1298:../drivers/fsl_sdhc.c **** {
1299:../drivers/fsl_sdhc.c ****     assert(handle);
1300:../drivers/fsl_sdhc.c ****     assert(callback);
1301:../drivers/fsl_sdhc.c **** 
1302:../drivers/fsl_sdhc.c ****     /* Zero the handle. */
1303:../drivers/fsl_sdhc.c ****     memset(handle, 0, sizeof(*handle));
1304:../drivers/fsl_sdhc.c **** 
1305:../drivers/fsl_sdhc.c ****     /* Set the callback. */
1306:../drivers/fsl_sdhc.c ****     handle->callback.CardInserted = callback->CardInserted;
1307:../drivers/fsl_sdhc.c ****     handle->callback.CardRemoved = callback->CardRemoved;
1308:../drivers/fsl_sdhc.c ****     handle->callback.SdioInterrupt = callback->SdioInterrupt;
1309:../drivers/fsl_sdhc.c ****     handle->callback.SdioBlockGap = callback->SdioBlockGap;
1310:../drivers/fsl_sdhc.c ****     handle->callback.TransferComplete = callback->TransferComplete;
1311:../drivers/fsl_sdhc.c ****     handle->userData = userData;
1312:../drivers/fsl_sdhc.c **** 
1313:../drivers/fsl_sdhc.c ****     /* Save the handle in global variables to support the double weak mechanism. */
1314:../drivers/fsl_sdhc.c ****     s_sdhcHandle[SDHC_GetInstance(base)] = handle;
1315:../drivers/fsl_sdhc.c **** 
1316:../drivers/fsl_sdhc.c ****     /* Enable interrupt in NVIC. */
1317:../drivers/fsl_sdhc.c ****     SDHC_SetTransferInterrupt(base, true);
1318:../drivers/fsl_sdhc.c **** 
1319:../drivers/fsl_sdhc.c ****     /* save IRQ handler */
1320:../drivers/fsl_sdhc.c ****     s_sdhcIsr = SDHC_TransferHandleIRQ;
1321:../drivers/fsl_sdhc.c **** 
1322:../drivers/fsl_sdhc.c ****     EnableIRQ(s_sdhcIRQ[SDHC_GetInstance(base)]);
1323:../drivers/fsl_sdhc.c **** }
1324:../drivers/fsl_sdhc.c **** 
1325:../drivers/fsl_sdhc.c **** status_t SDHC_TransferNonBlocking(
1326:../drivers/fsl_sdhc.c ****     SDHC_Type *base, sdhc_handle_t *handle, uint32_t *admaTable, uint32_t admaTableWords, sdhc_tran
1327:../drivers/fsl_sdhc.c **** {
1328:../drivers/fsl_sdhc.c ****     assert(transfer);
1329:../drivers/fsl_sdhc.c **** 
1330:../drivers/fsl_sdhc.c ****     sdhc_dma_mode_t dmaMode = (sdhc_dma_mode_t)((base->PROCTL & SDHC_PROCTL_DMAS_MASK) >> SDHC_PROC
1331:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
1332:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
1333:../drivers/fsl_sdhc.c ****     sdhc_data_t *data = transfer->data;
1334:../drivers/fsl_sdhc.c **** 
1335:../drivers/fsl_sdhc.c ****     /* make sure cmd/block count is valid */
1336:../drivers/fsl_sdhc.c ****     if ((!command) || (data && (data->blockCount > SDHC_MAX_BLOCK_COUNT)))
1337:../drivers/fsl_sdhc.c ****     {
1338:../drivers/fsl_sdhc.c ****         return kStatus_InvalidArgument;
1339:../drivers/fsl_sdhc.c ****     }
1340:../drivers/fsl_sdhc.c **** 
1341:../drivers/fsl_sdhc.c ****     /* Wait until command/data bus out of busy status. */
1342:../drivers/fsl_sdhc.c ****     if ((SDHC_GetPresentStatusFlags(base) & kSDHC_CommandInhibitFlag) ||
1343:../drivers/fsl_sdhc.c ****         (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag)))
1344:../drivers/fsl_sdhc.c ****     {
1345:../drivers/fsl_sdhc.c ****         return kStatus_SDHC_BusyTransferring;
1346:../drivers/fsl_sdhc.c ****     }
1347:../drivers/fsl_sdhc.c **** 
1348:../drivers/fsl_sdhc.c ****     /* Update ADMA descriptor table according to different DMA mode(no DMA, ADMA1, ADMA2).*/
1349:../drivers/fsl_sdhc.c ****     if (data && (NULL != admaTable))
1350:../drivers/fsl_sdhc.c ****     {
1351:../drivers/fsl_sdhc.c ****         error =
1352:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
1353:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
1354:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
1355:../drivers/fsl_sdhc.c ****         if (error == kStatus_SDHC_DMADataBufferAddrNotAlign)
1356:../drivers/fsl_sdhc.c ****         {
1357:../drivers/fsl_sdhc.c ****             /* change to polling mode */
1358:../drivers/fsl_sdhc.c ****             dmaMode = kSDHC_DmaModeNo;
1359:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
1360:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
1361:../drivers/fsl_sdhc.c ****         }
1362:../drivers/fsl_sdhc.c ****         else if (error != kStatus_Success)
1363:../drivers/fsl_sdhc.c ****         {
1364:../drivers/fsl_sdhc.c ****             return error;
1365:../drivers/fsl_sdhc.c ****         }
1366:../drivers/fsl_sdhc.c ****         else
1367:../drivers/fsl_sdhc.c ****         {
1368:../drivers/fsl_sdhc.c ****         }
1369:../drivers/fsl_sdhc.c ****     }
1370:../drivers/fsl_sdhc.c **** 
1371:../drivers/fsl_sdhc.c ****     /* Save command and data into handle before transferring. */
1372:../drivers/fsl_sdhc.c ****     handle->command = command;
1373:../drivers/fsl_sdhc.c ****     handle->data = data;
1374:../drivers/fsl_sdhc.c ****     handle->interruptFlags = 0U;
1375:../drivers/fsl_sdhc.c ****     /* transferredWords will only be updated in ISR when transfer way is DATAPORT. */
1376:../drivers/fsl_sdhc.c ****     handle->transferredWords = 0U;
1377:../drivers/fsl_sdhc.c **** 
1378:../drivers/fsl_sdhc.c ****     SDHC_StartTransfer(base, command, data, dmaMode);
1379:../drivers/fsl_sdhc.c **** 
1380:../drivers/fsl_sdhc.c ****     return kStatus_Success;
1381:../drivers/fsl_sdhc.c **** }
1382:../drivers/fsl_sdhc.c **** 
1383:../drivers/fsl_sdhc.c **** void SDHC_TransferHandleIRQ(SDHC_Type *base, sdhc_handle_t *handle)
1384:../drivers/fsl_sdhc.c **** {
 366              		.loc 1 1384 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL42:
 371 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 372              		.cfi_def_cfa_offset 24
 373              		.cfi_offset 3, -24
 374              		.cfi_offset 4, -20
 375              		.cfi_offset 5, -16
 376              		.cfi_offset 6, -12
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 379              	.LBB122:
 380              	.LBB123:
 721:../drivers/fsl_sdhc.h **** }
 381              		.loc 2 721 0
 382 0002 056B     		ldr	r5, [r0, #48]
 383              	.LVL43:
 384              	.LBE123:
 385              	.LBE122:
1385:../drivers/fsl_sdhc.c ****     assert(handle);
1386:../drivers/fsl_sdhc.c **** 
1387:../drivers/fsl_sdhc.c ****     uint32_t interruptFlags;
1388:../drivers/fsl_sdhc.c **** 
1389:../drivers/fsl_sdhc.c ****     interruptFlags = SDHC_GetInterruptStatusFlags(base);
1390:../drivers/fsl_sdhc.c ****     handle->interruptFlags = interruptFlags;
 386              		.loc 1 1390 0
 387 0004 8D60     		str	r5, [r1, #8]
1391:../drivers/fsl_sdhc.c **** 
1392:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CardDetectFlag)
 388              		.loc 1 1392 0
 389 0006 15F0C00F 		tst	r5, #192
1384:../drivers/fsl_sdhc.c ****     assert(handle);
 390              		.loc 1 1384 0
 391 000a 0646     		mov	r6, r0
 392 000c 0C46     		mov	r4, r1
 393              		.loc 1 1392 0
 394 000e 06D0     		beq	.L32
 395              	.LVL44:
 396              	.LBB124:
 397              	.LBB125:
 696:../drivers/fsl_sdhc.c ****     {
 398              		.loc 1 696 0
 399 0010 6B06     		lsls	r3, r5, #25
 698:../drivers/fsl_sdhc.c ****         {
 400              		.loc 1 698 0
 401 0012 4CBF     		ite	mi
 402 0014 0B69     		ldrmi	r3, [r1, #16]
 705:../drivers/fsl_sdhc.c ****         {
 403              		.loc 1 705 0
 404 0016 4B69     		ldrpl	r3, [r1, #20]
 405 0018 0BB1     		cbz	r3, .L32
 707:../drivers/fsl_sdhc.c ****         }
 406              		.loc 1 707 0
 407 001a 496A     		ldr	r1, [r1, #36]
 408              	.LVL45:
 409 001c 9847     		blx	r3
 410              	.LVL46:
 411              	.L32:
 412              	.LBE125:
 413              	.LBE124:
1393:../drivers/fsl_sdhc.c ****     {
1394:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleCardDetect(base, handle, (interruptFlags & kSDHC_CardDetectFlag));
1395:../drivers/fsl_sdhc.c ****     }
1396:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CommandFlag)
 414              		.loc 1 1396 0
 415 001e 2A4B     		ldr	r3, .L97
 416 0020 2B40     		ands	r3, r3, r5
 417 0022 63B1     		cbz	r3, .L35
 418              	.LVL47:
 419              	.LBB126:
 420              	.LBB127:
 716:../drivers/fsl_sdhc.c ****     {
 421              		.loc 1 716 0
 422 0024 15F4702F 		tst	r5, #983040
 423 0028 2AD0     		beq	.L36
 424 002a 2368     		ldr	r3, [r4]
 425              	.LVL48:
 426 002c 43BB     		cbnz	r3, .L36
 427 002e 276A     		ldr	r7, [r4, #32]
 428 0030 37B3     		cbz	r7, .L36
 718:../drivers/fsl_sdhc.c ****     }
 429              		.loc 1 718 0
 430 0032 636A     		ldr	r3, [r4, #36]
 431 0034 40F2A662 		movw	r2, #1702
 432              	.L92:
 726:../drivers/fsl_sdhc.c ****         }
 433              		.loc 1 726 0
 434 0038 2146     		mov	r1, r4
 435 003a 3046     		mov	r0, r6
 436 003c B847     		blx	r7
 437              	.LVL49:
 438              	.L35:
 439              	.LBE127:
 440              	.LBE126:
1397:../drivers/fsl_sdhc.c ****     {
1398:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleCommand(base, handle, (interruptFlags & kSDHC_CommandFlag));
1399:../drivers/fsl_sdhc.c ****     }
1400:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_DataFlag)
 441              		.loc 1 1400 0
 442 003e 234B     		ldr	r3, .L97+4
 443 0040 2B40     		ands	r3, r3, r5
 444 0042 6BB1     		cbz	r3, .L39
 445              	.LVL50:
 446              	.LBB129:
 447              	.LBB130:
 735:../drivers/fsl_sdhc.c ****         (handle->callback.TransferComplete))
 448              		.loc 1 735 0
 449 0044 2368     		ldr	r3, [r4]
 450              	.LVL51:
 451 0046 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 452 0048 33BB     		cbnz	r3, .L40
 453 004a 214B     		ldr	r3, .L97+8
 454 004c 1D42     		tst	r5, r3
 455 004e 23D0     		beq	.L40
 736:../drivers/fsl_sdhc.c ****     {
 456              		.loc 1 736 0
 457 0050 276A     		ldr	r7, [r4, #32]
 735:../drivers/fsl_sdhc.c ****         (handle->callback.TransferComplete))
 458              		.loc 1 735 0
 459 0052 0FB3     		cbz	r7, .L40
 738:../drivers/fsl_sdhc.c ****     }
 460              		.loc 1 738 0
 461 0054 636A     		ldr	r3, [r4, #36]
 462 0056 40F2A762 		movw	r2, #1703
 463              	.L94:
 756:../drivers/fsl_sdhc.c ****         }
 464              		.loc 1 756 0
 465 005a 2146     		mov	r1, r4
 466 005c 3046     		mov	r0, r6
 467 005e B847     		blx	r7
 468              	.LVL52:
 469              	.L39:
 470              	.LBE130:
 471              	.LBE129:
1401:../drivers/fsl_sdhc.c ****     {
1402:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleData(base, handle, (interruptFlags & kSDHC_DataFlag));
1403:../drivers/fsl_sdhc.c ****     }
1404:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CardInterruptFlag)
 472              		.loc 1 1404 0
 473 0060 EA05     		lsls	r2, r5, #23
 474 0062 04D5     		bpl	.L44
 475              	.LVL53:
 476              	.LBB132:
 477              	.LBB133:
 767:../drivers/fsl_sdhc.c ****     {
 478              		.loc 1 767 0
 479 0064 A369     		ldr	r3, [r4, #24]
 480 0066 13B1     		cbz	r3, .L44
 769:../drivers/fsl_sdhc.c ****     }
 481              		.loc 1 769 0
 482 0068 616A     		ldr	r1, [r4, #36]
 483 006a 3046     		mov	r0, r6
 484 006c 9847     		blx	r3
 485              	.LVL54:
 486              	.L44:
 487              	.LBE133:
 488              	.LBE132:
1405:../drivers/fsl_sdhc.c ****     {
1406:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleSdioInterrupt(base, handle);
1407:../drivers/fsl_sdhc.c ****     }
1408:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_BlockGapEventFlag)
 489              		.loc 1 1408 0
 490 006e 6B07     		lsls	r3, r5, #29
 491 0070 04D5     		bpl	.L45
 492              	.LVL55:
 493              	.LBB134:
 494              	.LBB135:
 775:../drivers/fsl_sdhc.c ****     {
 495              		.loc 1 775 0
 496 0072 E369     		ldr	r3, [r4, #28]
 497 0074 13B1     		cbz	r3, .L45
 777:../drivers/fsl_sdhc.c ****     }
 498              		.loc 1 777 0
 499 0076 616A     		ldr	r1, [r4, #36]
 500 0078 3046     		mov	r0, r6
 501 007a 9847     		blx	r3
 502              	.LVL56:
 503              	.L45:
 504              	.LBE135:
 505              	.LBE134:
 506              	.LBB136:
 507              	.LBB137:
 732:../drivers/fsl_sdhc.h **** }
 508              		.loc 2 732 0
 509 007c 3563     		str	r5, [r6, #48]
 510              	.LVL57:
 511 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 512              	.LVL58:
 513              	.L36:
 514              	.LBE137:
 515              	.LBE136:
 516              	.LBB138:
 517              	.LBB128:
 723:../drivers/fsl_sdhc.c ****         if ((!(handle->data)) && (handle->callback.TransferComplete))
 518              		.loc 1 723 0
 519 0080 6168     		ldr	r1, [r4, #4]
 520 0082 3046     		mov	r0, r6
 521 0084 FFF7FEFF 		bl	SDHC_ReceiveCommandResponse
 522              	.LVL59:
 724:../drivers/fsl_sdhc.c ****         {
 523              		.loc 1 724 0
 524 0088 2268     		ldr	r2, [r4]
 525 008a 002A     		cmp	r2, #0
 526 008c D7D1     		bne	.L35
 527 008e 276A     		ldr	r7, [r4, #32]
 528 0090 002F     		cmp	r7, #0
 529 0092 D4D0     		beq	.L35
 726:../drivers/fsl_sdhc.c ****         }
 530              		.loc 1 726 0
 531 0094 636A     		ldr	r3, [r4, #36]
 532 0096 CFE7     		b	.L92
 533              	.LVL60:
 534              	.L40:
 535              	.LBE128:
 536              	.LBE138:
 537              	.LBB139:
 538              	.LBB131:
 742:../drivers/fsl_sdhc.c ****         {
 539              		.loc 1 742 0
 540 0098 AF06     		lsls	r7, r5, #26
 541 009a 0DD5     		bpl	.L41
 744:../drivers/fsl_sdhc.c ****         }
 542              		.loc 1 744 0
 543 009c 2168     		ldr	r1, [r4]
 544 009e E268     		ldr	r2, [r4, #12]
 545 00a0 3046     		mov	r0, r6
 546 00a2 FFF7FEFF 		bl	SDHC_ReadDataPort
 547              	.LVL61:
 548              	.L93:
 748:../drivers/fsl_sdhc.c ****         }
 549              		.loc 1 748 0
 550 00a6 E060     		str	r0, [r4, #12]
 551              	.L42:
 754:../drivers/fsl_sdhc.c ****         {
 552              		.loc 1 754 0
 553 00a8 A907     		lsls	r1, r5, #30
 554 00aa D9D5     		bpl	.L39
 555 00ac 276A     		ldr	r7, [r4, #32]
 556 00ae 002F     		cmp	r7, #0
 557 00b0 D6D0     		beq	.L39
 756:../drivers/fsl_sdhc.c ****         }
 558              		.loc 1 756 0
 559 00b2 636A     		ldr	r3, [r4, #36]
 560 00b4 0022     		movs	r2, #0
 561 00b6 D0E7     		b	.L94
 562              	.L41:
 746:../drivers/fsl_sdhc.c ****         {
 563              		.loc 1 746 0
 564 00b8 E806     		lsls	r0, r5, #27
 565 00ba F5D5     		bpl	.L42
 748:../drivers/fsl_sdhc.c ****         }
 566              		.loc 1 748 0
 567 00bc 2168     		ldr	r1, [r4]
 568 00be E268     		ldr	r2, [r4, #12]
 569 00c0 3046     		mov	r0, r6
 570 00c2 FFF7FEFF 		bl	SDHC_WriteDataPort
 571              	.LVL62:
 572 00c6 EEE7     		b	.L93
 573              	.L98:
 574              		.align	2
 575              	.L97:
 576 00c8 01000F00 		.word	983041
 577 00cc 3A007011 		.word	292552762
 578 00d0 00007011 		.word	292552704
 579              	.LBE131:
 580              	.LBE139:
 581              		.cfi_endproc
 582              	.LFE197:
 584              		.section	.text.SDHC_Deinit,"ax",%progbits
 585              		.align	1
 586              		.global	SDHC_Deinit
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu fpv4-sp-d16
 592              	SDHC_Deinit:
 593              	.LFB185:
 829:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 594              		.loc 1 829 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 599              	.LVL63:
 600              	.LBB142:
 601              	.LBB143:
 602              		.file 3 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 603              		.loc 3 706 0
 604 0000 024A     		ldr	r2, .L100
 605 0002 1368     		ldr	r3, [r2]
 606 0004 23F40033 		bic	r3, r3, #131072
 607 0008 1360     		str	r3, [r2]
 608              	.LVL64:
 609 000a 7047     		bx	lr
 610              	.L101:
 611              		.align	2
 612              	.L100:
 613 000c 30800440 		.word	1074036784
 614              	.LBE143:
 615              	.LBE142:
 616              		.cfi_endproc
 617              	.LFE185:
 619              		.section	.text.SDHC_Reset,"ax",%progbits
 620              		.align	1
 621              		.global	SDHC_Reset
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu fpv4-sp-d16
 627              	SDHC_Reset:
 628              	.LFB186:
 837:../drivers/fsl_sdhc.c ****     base->SYSCTL |= (mask & (SDHC_SYSCTL_RSTA_MASK | SDHC_SYSCTL_RSTC_MASK | SDHC_SYSCTL_RSTD_MASK)
 629              		.loc 1 837 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL65:
 634 0000 10B5     		push	{r4, lr}
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 4, -8
 637              		.cfi_offset 14, -4
 838:../drivers/fsl_sdhc.c ****     /* Delay some time to wait reset success. */
 638              		.loc 1 838 0
 639 0002 C46A     		ldr	r4, [r0, #44]
 640 0004 01F0E063 		and	r3, r1, #117440512
 641 0008 2343     		orrs	r3, r3, r4
 642 000a C362     		str	r3, [r0, #44]
 643              	.L103:
 840:../drivers/fsl_sdhc.c ****     {
 644              		.loc 1 840 0
 645 000c C36A     		ldr	r3, [r0, #44]
 646 000e 1942     		tst	r1, r3
 647 0010 03D1     		bne	.L105
 648              	.L104:
 850:../drivers/fsl_sdhc.c **** 
 649              		.loc 1 850 0
 650 0012 101C     		adds	r0, r2, #0
 651              	.LVL66:
 652 0014 18BF     		it	ne
 653 0016 0120     		movne	r0, #1
 654 0018 10BD     		pop	{r4, pc}
 655              	.LVL67:
 656              	.L105:
 842:../drivers/fsl_sdhc.c ****         {
 657              		.loc 1 842 0
 658 001a 002A     		cmp	r2, #0
 659 001c F9D0     		beq	.L104
 846:../drivers/fsl_sdhc.c ****     }
 660              		.loc 1 846 0
 661 001e 013A     		subs	r2, r2, #1
 662              	.LVL68:
 663 0020 F4E7     		b	.L103
 664              		.cfi_endproc
 665              	.LFE186:
 667              		.section	.text.SDHC_Init,"ax",%progbits
 668              		.align	1
 669              		.global	SDHC_Init
 670              		.syntax unified
 671              		.thumb
 672              		.thumb_func
 673              		.fpu fpv4-sp-d16
 675              	SDHC_Init:
 676              	.LFB184:
 782:../drivers/fsl_sdhc.c ****     assert(config);
 677              		.loc 1 782 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681              	.LVL69:
 682              	.LBB164:
 683              	.LBB165:
 695:../drivers/fsl_clock.h **** }
 684              		.loc 3 695 0
 685 0000 244A     		ldr	r2, .L117
 686 0002 1368     		ldr	r3, [r2]
 687              	.LBE165:
 688              	.LBE164:
 782:../drivers/fsl_sdhc.c ****     assert(config);
 689              		.loc 1 782 0
 690 0004 70B5     		push	{r4, r5, r6, lr}
 691              		.cfi_def_cfa_offset 16
 692              		.cfi_offset 4, -16
 693              		.cfi_offset 5, -12
 694              		.cfi_offset 6, -8
 695              		.cfi_offset 14, -4
 696              	.LBB168:
 697              	.LBB166:
 695:../drivers/fsl_clock.h **** }
 698              		.loc 3 695 0
 699 0006 43F40033 		orr	r3, r3, #131072
 700              	.LBE166:
 701              	.LBE168:
 782:../drivers/fsl_sdhc.c ****     assert(config);
 702              		.loc 1 782 0
 703 000a 0446     		mov	r4, r0
 704 000c 0D46     		mov	r5, r1
 705              	.LBB169:
 706              	.LBB167:
 695:../drivers/fsl_clock.h **** }
 707              		.loc 3 695 0
 708 000e 1360     		str	r3, [r2]
 709              	.LVL70:
 710              	.LBE167:
 711              	.LBE169:
 799:../drivers/fsl_sdhc.c **** 
 712              		.loc 1 799 0
 713 0010 4FF08071 		mov	r1, #16777216
 714              	.LVL71:
 715 0014 6422     		movs	r2, #100
 716 0016 FFF7FEFF 		bl	SDHC_Reset
 717              	.LVL72:
 801:../drivers/fsl_sdhc.c ****     wml = base->WML;
 718              		.loc 1 801 0
 719 001a A16A     		ldr	r1, [r4, #40]
 720              	.LVL73:
 806:../drivers/fsl_sdhc.c ****     {
 721              		.loc 1 806 0
 722 001c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 802:../drivers/fsl_sdhc.c **** 
 723              		.loc 1 802 0
 724 001e 666C     		ldr	r6, [r4, #68]
 725              	.LVL74:
 804:../drivers/fsl_sdhc.c ****     /* Set DAT3 as card detection pin */
 726              		.loc 1 804 0
 727 0020 21F44E71 		bic	r1, r1, #824
 728              	.LVL75:
 806:../drivers/fsl_sdhc.c ****     {
 729              		.loc 1 806 0
 730 0024 0BB1     		cbz	r3, .L111
 808:../drivers/fsl_sdhc.c ****     }
 731              		.loc 1 808 0
 732 0026 41F00801 		orr	r1, r1, #8
 733              	.LVL76:
 734              	.L111:
 811:../drivers/fsl_sdhc.c **** 
 735              		.loc 1 811 0
 736 002a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 737 002c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 815:../drivers/fsl_sdhc.c **** 
 738              		.loc 1 815 0
 739 002e AA68     		ldr	r2, [r5, #8]
 811:../drivers/fsl_sdhc.c **** 
 740              		.loc 1 811 0
 741 0030 1B01     		lsls	r3, r3, #4
 742 0032 0002     		lsls	r0, r0, #8
 743 0034 00F44070 		and	r0, r0, #768
 744 0038 03F03003 		and	r3, r3, #48
 745 003c 0343     		orrs	r3, r3, r0
 815:../drivers/fsl_sdhc.c **** 
 746              		.loc 1 815 0
 747 003e 1204     		lsls	r2, r2, #16
 811:../drivers/fsl_sdhc.c **** 
 748              		.loc 1 811 0
 749 0040 0B43     		orrs	r3, r3, r1
 750              	.LVL77:
 814:../drivers/fsl_sdhc.c ****     wml |= (SDHC_WML_RDWML(config->readWatermarkLevel) | SDHC_WML_WRWML(config->writeWatermarkLevel
 751              		.loc 1 814 0
 752 0042 06F0FF26 		and	r6, r6, #-16711936
 753              	.LVL78:
 815:../drivers/fsl_sdhc.c **** 
 754              		.loc 1 815 0
 755 0046 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 756 0048 02F47F02 		and	r2, r2, #16711680
 757 004c 3243     		orrs	r2, r2, r6
 758 004e 0A43     		orrs	r2, r2, r1
 759              	.LVL79:
 817:../drivers/fsl_sdhc.c ****     base->PROCTL = proctl;
 760              		.loc 1 817 0
 761 0050 6264     		str	r2, [r4, #68]
 818:../drivers/fsl_sdhc.c **** 
 762              		.loc 1 818 0
 763 0052 A362     		str	r3, [r4, #40]
 822:../drivers/fsl_sdhc.c **** 
 764              		.loc 1 822 0
 765 0054 E36A     		ldr	r3, [r4, #44]
 766              	.LVL80:
 767              	.LBB170:
 768              	.LBB171:
 769              	.LBB172:
 770              	.LBB173:
 681:../drivers/fsl_sdhc.h **** }
 771              		.loc 2 681 0
 772 0056 1049     		ldr	r1, .L117+4
 773              	.LBE173:
 774              	.LBE172:
 775              	.LBE171:
 776              	.LBE170:
 822:../drivers/fsl_sdhc.c **** 
 777              		.loc 1 822 0
 778 0058 43F00703 		orr	r3, r3, #7
 779 005c E362     		str	r3, [r4, #44]
 780              	.LVL81:
 781              	.LBB188:
 782              	.LBB187:
 259:../drivers/fsl_sdhc.c **** 
 783              		.loc 1 259 0
 784 005e A06A     		ldr	r0, [r4, #40]
 785              	.LVL82:
 786              	.LBB175:
 787              	.LBB174:
 681:../drivers/fsl_sdhc.h **** }
 788              		.loc 2 681 0
 789 0060 626B     		ldr	r2, [r4, #52]
 790              	.LVL83:
 791 0062 0A40     		ands	r2, r2, r1
 792 0064 6263     		str	r2, [r4, #52]
 793              	.LVL84:
 794              	.LBE174:
 795              	.LBE175:
 796              	.LBB176:
 797              	.LBB177:
 703:../drivers/fsl_sdhc.h **** }
 798              		.loc 2 703 0
 799 0066 A36B     		ldr	r3, [r4, #56]
 800 0068 0B40     		ands	r3, r3, r1
 801 006a A363     		str	r3, [r4, #56]
 802              	.LVL85:
 803              	.LBE177:
 804              	.LBE176:
 805              	.LBB178:
 806              	.LBB179:
 807              	.LBB180:
 808              		.file 4 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1677:../CMSIS/core_cm4.h ****   }
1678:../CMSIS/core_cm4.h **** }
1679:../CMSIS/core_cm4.h **** 
1680:../CMSIS/core_cm4.h **** 
1681:../CMSIS/core_cm4.h **** /**
1682:../CMSIS/core_cm4.h ****   \brief   Get Interrupt Enable status
1683:../CMSIS/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1684:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1685:../CMSIS/core_cm4.h ****   \return             0  Interrupt is not enabled.
1686:../CMSIS/core_cm4.h ****   \return             1  Interrupt is enabled.
1687:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1688:../CMSIS/core_cm4.h ****  */
1689:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1690:../CMSIS/core_cm4.h **** {
1691:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1692:../CMSIS/core_cm4.h ****   {
1693:../CMSIS/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1694:../CMSIS/core_cm4.h ****   }
1695:../CMSIS/core_cm4.h ****   else
1696:../CMSIS/core_cm4.h ****   {
1697:../CMSIS/core_cm4.h ****     return(0U);
1698:../CMSIS/core_cm4.h ****   }
1699:../CMSIS/core_cm4.h **** }
1700:../CMSIS/core_cm4.h **** 
1701:../CMSIS/core_cm4.h **** 
1702:../CMSIS/core_cm4.h **** /**
1703:../CMSIS/core_cm4.h ****   \brief   Disable Interrupt
1704:../CMSIS/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1705:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1706:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1707:../CMSIS/core_cm4.h ****  */
1708:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1709:../CMSIS/core_cm4.h **** {
1710:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1711:../CMSIS/core_cm4.h ****   {
1712:../CMSIS/core_cm4.h ****     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 809              		.loc 4 1712 0
 810 006c 0B4B     		ldr	r3, .L117+8
 811 006e 4FF40032 		mov	r2, #131072
 812 0072 C3F88820 		str	r2, [r3, #136]
 813              	.LVL86:
 814              	.LBB181:
 815              	.LBB182:
 816              		.file 5 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 817              		.loc 5 833 0
 818              		.syntax unified
 819              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 820 0076 BFF34F8F 		dsb 0xF
 821              	@ 0 "" 2
 822              		.thumb
 823              		.syntax unified
 824              	.LBE182:
 825              	.LBE181:
 826              	.LBB183:
 827              	.LBB184:
 822:../CMSIS/cmsis_gcc.h **** }
 828              		.loc 5 822 0
 829              		.syntax unified
 830              	@ 822 "../CMSIS/cmsis_gcc.h" 1
 831 007a BFF36F8F 		isb 0xF
 832              	@ 0 "" 2
 833              	.LVL87:
 834              		.thumb
 835              		.syntax unified
 836              	.LBE184:
 837              	.LBE183:
 838              	.LBE180:
 839              	.LBE179:
 840              	.LBE178:
 273:../drivers/fsl_sdhc.c ****     }
 841              		.loc 1 273 0
 842 007e 084B     		ldr	r3, .L117+12
 843 0080 084A     		ldr	r2, .L117+16
 844 0082 10F0080F 		tst	r0, #8
 845 0086 08BF     		it	eq
 846 0088 1A46     		moveq	r2, r3
 847              	.LVL88:
 848              	.LBB185:
 849              	.LBB186:
 670:../drivers/fsl_sdhc.h **** }
 850              		.loc 2 670 0
 851 008a 636B     		ldr	r3, [r4, #52]
 852 008c 1343     		orrs	r3, r3, r2
 853 008e 6363     		str	r3, [r4, #52]
 854              	.LVL89:
 855 0090 70BD     		pop	{r4, r5, r6, pc}
 856              	.LVL90:
 857              	.L118:
 858 0092 00BF     		.align	2
 859              	.L117:
 860 0094 30800440 		.word	1074036784
 861 0098 C0FE80EE 		.word	-293536064
 862 009c 00E100E0 		.word	-536813312
 863 00a0 3B007F11 		.word	293535803
 864 00a4 FB007F11 		.word	293535995
 865              	.LBE186:
 866              	.LBE185:
 867              	.LBE187:
 868              	.LBE188:
 869              		.cfi_endproc
 870              	.LFE184:
 872              		.section	.text.SDHC_GetCapability,"ax",%progbits
 873              		.align	1
 874              		.global	SDHC_GetCapability
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 878              		.fpu fpv4-sp-d16
 880              	SDHC_GetCapability:
 881              	.LFB187:
 853:../drivers/fsl_sdhc.c ****     assert(capability);
 882              		.loc 1 853 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 886              		@ link register save eliminated.
 887              	.LVL91:
 860:../drivers/fsl_sdhc.c ****     htCapability = base->HTCAPBLT;
 888              		.loc 1 860 0
 889 0000 D0F8FC20 		ldr	r2, [r0, #252]
 890              	.LVL92:
 861:../drivers/fsl_sdhc.c **** 
 891              		.loc 1 861 0
 892 0004 036C     		ldr	r3, [r0, #64]
 893              	.LVL93:
 864:../drivers/fsl_sdhc.c ****     capability->vendorVersion = ((hostVer & SDHC_HOSTVER_VVN_MASK) >> SDHC_HOSTVER_VVN_SHIFT);
 894              		.loc 1 864 0
 895 0006 D0B2     		uxtb	r0, r2
 896              	.LVL94:
 865:../drivers/fsl_sdhc.c ****     maxBlockLength = ((htCapability & SDHC_HTCAPBLT_MBL_MASK) >> SDHC_HTCAPBLT_MBL_SHIFT);
 897              		.loc 1 865 0
 898 0008 C2F30722 		ubfx	r2, r2, #8, #8
 899              	.LVL95:
 864:../drivers/fsl_sdhc.c ****     capability->vendorVersion = ((hostVer & SDHC_HOSTVER_VVN_MASK) >> SDHC_HOSTVER_VVN_SHIFT);
 900              		.loc 1 864 0
 901 000c 0860     		str	r0, [r1]
 865:../drivers/fsl_sdhc.c ****     maxBlockLength = ((htCapability & SDHC_HTCAPBLT_MBL_MASK) >> SDHC_HTCAPBLT_MBL_SHIFT);
 902              		.loc 1 865 0
 903 000e 4A60     		str	r2, [r1, #4]
 904              	.LVL96:
 866:../drivers/fsl_sdhc.c ****     capability->maxBlockLength = (512U << maxBlockLength);
 905              		.loc 1 866 0
 906 0010 C3F30240 		ubfx	r0, r3, #16, #3
 867:../drivers/fsl_sdhc.c ****     /* Other attributes not in HTCAPBLT register. */
 907              		.loc 1 867 0
 908 0014 4FF40072 		mov	r2, #512
 909 0018 8240     		lsls	r2, r2, r0
 870:../drivers/fsl_sdhc.c ****                                          kSDHC_SupportSuspendResumeFlag | kSDHC_SupportV330Flag));
 910              		.loc 1 870 0
 911 001a 03F0F873 		and	r3, r3, #32505856
 912              	.LVL97:
 867:../drivers/fsl_sdhc.c ****     /* Other attributes not in HTCAPBLT register. */
 913              		.loc 1 867 0
 914 001e 8A60     		str	r2, [r1, #8]
 879:../drivers/fsl_sdhc.c **** }
 915              		.loc 1 879 0
 916 0020 43F03003 		orr	r3, r3, #48
 869:../drivers/fsl_sdhc.c ****     capability->flags = (htCapability & (kSDHC_SupportAdmaFlag | kSDHC_SupportHighSpeedFlag | kSDHC
 917              		.loc 1 869 0
 918 0024 4FF6FF72 		movw	r2, #65535
 919 0028 CA60     		str	r2, [r1, #12]
 879:../drivers/fsl_sdhc.c **** }
 920              		.loc 1 879 0
 921 002a 0B61     		str	r3, [r1, #16]
 922 002c 7047     		bx	lr
 923              		.cfi_endproc
 924              	.LFE187:
 926              		.section	.text.SDHC_SetSdClock,"ax",%progbits
 927              		.align	1
 928              		.global	SDHC_SetSdClock
 929              		.syntax unified
 930              		.thumb
 931              		.thumb_func
 932              		.fpu fpv4-sp-d16
 934              	SDHC_SetSdClock:
 935              	.LFB188:
 883:../drivers/fsl_sdhc.c ****     assert(srcClock_Hz != 0U);
 936              		.loc 1 883 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              	.LVL98:
 941 0000 70B5     		push	{r4, r5, r6, lr}
 942              		.cfi_def_cfa_offset 16
 943              		.cfi_offset 4, -16
 944              		.cfi_offset 5, -12
 945              		.cfi_offset 6, -8
 946              		.cfi_offset 14, -4
 894:../drivers/fsl_sdhc.c **** 
 947              		.loc 1 894 0
 948 0002 B1FBF2F3 		udiv	r3, r1, r2
 949              	.LVL99:
 883:../drivers/fsl_sdhc.c ****     assert(srcClock_Hz != 0U);
 950              		.loc 1 883 0
 951 0006 0546     		mov	r5, r0
 896:../drivers/fsl_sdhc.c ****     {
 952              		.loc 1 896 0
 953 0008 002B     		cmp	r3, #0
 954 000a 47D0     		beq	.L134
 899:../drivers/fsl_sdhc.c ****         {
 955              		.loc 1 899 0
 956 000c B1FBF3F0 		udiv	r0, r1, r3
 957              	.LVL100:
 958 0010 8242     		cmp	r2, r0
 959 0012 45D2     		bcs	.L122
 901:../drivers/fsl_sdhc.c ****         }
 960              		.loc 1 901 0
 961 0014 0133     		adds	r3, r3, #1
 962              	.LVL101:
 905:../drivers/fsl_sdhc.c ****         {
 963              		.loc 1 905 0
 964 0016 102B     		cmp	r3, #16
 965 0018 3AD9     		bls	.L123
 966              	.L135:
 967 001a 1C46     		mov	r4, r3
 907:../drivers/fsl_sdhc.c ****             /* prescaler must be a value which equal 2^n and smaller than SDHC_MAX_CLKFS */
 968              		.loc 1 907 0
 969 001c 1A09     		lsrs	r2, r3, #4
 970              	.LVL102:
 909:../drivers/fsl_sdhc.c ****             {
 971              		.loc 1 909 0
 972 001e 4FF48076 		mov	r6, #256
 973              	.L124:
 974 0022 B6FBF2F0 		udiv	r0, r6, r2
 975 0026 5043     		muls	r0, r2, r0
 976 0028 B0F5807F 		cmp	r0, #256
 977 002c 2BD1     		bne	.L125
 909:../drivers/fsl_sdhc.c ****             {
 978              		.loc 1 909 0 is_stmt 0 discriminator 1
 979 002e 012A     		cmp	r2, #1
 980 0030 29D0     		beq	.L125
 914:../drivers/fsl_sdhc.c ****             /* fine tuning the divisor until divisor * prescaler >= totalDiv */
 981              		.loc 1 914 0 is_stmt 1
 982 0032 B3FBF2F3 		udiv	r3, r3, r2
 983              	.LVL103:
 984 0036 03FB02F0 		mul	r0, r3, r2
 985              	.L126:
 916:../drivers/fsl_sdhc.c ****             {
 986              		.loc 1 916 0
 987 003a 8442     		cmp	r4, r0
 988 003c 25D8     		bhi	.L127
 920:../drivers/fsl_sdhc.c ****         }
 989              		.loc 1 920 0
 990 003e B1FBF3F1 		udiv	r1, r1, r3
 991              	.LVL104:
 992 0042 B1FBF2F1 		udiv	r1, r1, r2
 993              	.LVL105:
 939:../drivers/fsl_sdhc.c ****     {
 994              		.loc 1 939 0
 995 0046 3BBB     		cbnz	r3, .L128
 996 0048 1C46     		mov	r4, r3
 997              	.LVL106:
 998              	.L148:
 941:../drivers/fsl_sdhc.c ****     }
 999              		.loc 1 941 0
 1000 004a 1346     		mov	r3, r2
 944:../drivers/fsl_sdhc.c ****     {
 1001              		.loc 1 944 0
 1002 004c 02B1     		cbz	r2, .L121
 946:../drivers/fsl_sdhc.c ****     }
 1003              		.loc 1 946 0
 1004 004e 5308     		lsrs	r3, r2, #1
 1005              	.LVL107:
 1006              	.L121:
 950:../drivers/fsl_sdhc.c **** 
 1007              		.loc 1 950 0
 1008 0050 EA6A     		ldr	r2, [r5, #44]
 1009 0052 22F00802 		bic	r2, r2, #8
 1010 0056 EA62     		str	r2, [r5, #44]
 953:../drivers/fsl_sdhc.c ****     sysctl &= ~(SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK | SDHC_SYSCTL_DTOCV_MASK);
 1011              		.loc 1 953 0
 1012 0058 EA6A     		ldr	r2, [r5, #44]
 1013              	.LVL108:
 954:../drivers/fsl_sdhc.c ****     sysctl |= (SDHC_SYSCTL_DVS(divisor) | SDHC_SYSCTL_SDCLKFS(prescaler) | SDHC_SYSCTL_DTOCV(0xEU))
 1014              		.loc 1 954 0
 1015 005a 22F47F22 		bic	r2, r2, #1044480
 1016              	.LVL109:
 1017 005e 22F47F62 		bic	r2, r2, #4080
 955:../drivers/fsl_sdhc.c ****     base->SYSCTL = sysctl;
 1018              		.loc 1 955 0
 1019 0062 2401     		lsls	r4, r4, #4
 1020 0064 42F46022 		orr	r2, r2, #917504
 1021 0068 E4B2     		uxtb	r4, r4
 1022 006a 1B02     		lsls	r3, r3, #8
 1023              	.LVL110:
 1024 006c 2243     		orrs	r2, r2, r4
 1025 006e 9BB2     		uxth	r3, r3
 1026 0070 1A43     		orrs	r2, r2, r3
 1027              	.LVL111:
 956:../drivers/fsl_sdhc.c **** 
 1028              		.loc 1 956 0
 1029 0072 EA62     		str	r2, [r5, #44]
 1030              	.L130:
 959:../drivers/fsl_sdhc.c ****     {
 1031              		.loc 1 959 0 discriminator 1
 1032 0074 6B6A     		ldr	r3, [r5, #36]
 1033 0076 1B07     		lsls	r3, r3, #28
 1034 0078 FCD5     		bpl	.L130
 963:../drivers/fsl_sdhc.c **** 
 1035              		.loc 1 963 0
 1036 007a EB6A     		ldr	r3, [r5, #44]
 1037 007c 43F00803 		orr	r3, r3, #8
 1038 0080 EB62     		str	r3, [r5, #44]
 966:../drivers/fsl_sdhc.c **** 
 1039              		.loc 1 966 0
 1040 0082 0846     		mov	r0, r1
 1041 0084 70BD     		pop	{r4, r5, r6, pc}
 1042              	.LVL112:
 1043              	.L125:
 911:../drivers/fsl_sdhc.c ****             }
 1044              		.loc 1 911 0
 1045 0086 0132     		adds	r2, r2, #1
 1046              	.LVL113:
 1047 0088 CBE7     		b	.L124
 1048              	.LVL114:
 1049              	.L127:
 918:../drivers/fsl_sdhc.c ****             }
 1050              		.loc 1 918 0
 1051 008a 0133     		adds	r3, r3, #1
 1052              	.LVL115:
 1053 008c 1044     		add	r0, r0, r2
 1054 008e D4E7     		b	.L126
 1055              	.LVL116:
 1056              	.L123:
 926:../drivers/fsl_sdhc.c ****         }
 1057              		.loc 1 926 0
 1058 0090 B1FBF3F1 		udiv	r1, r1, r3
 1059              	.LVL117:
 939:../drivers/fsl_sdhc.c ****     {
 1060              		.loc 1 939 0
 1061 0094 13B1     		cbz	r3, .L134
 1062              	.LVL118:
 1063              	.L147:
 925:../drivers/fsl_sdhc.c ****             nearestFrequency = srcClock_Hz / divisor;
 1064              		.loc 1 925 0
 1065 0096 0022     		movs	r2, #0
 1066              	.LVL119:
 1067              	.L128:
 941:../drivers/fsl_sdhc.c ****     }
 1068              		.loc 1 941 0
 1069 0098 5C1E     		subs	r4, r3, #1
 1070 009a D6E7     		b	.L148
 1071              	.LVL120:
 1072              	.L134:
 939:../drivers/fsl_sdhc.c ****     {
 1073              		.loc 1 939 0
 1074 009c 1C46     		mov	r4, r3
 1075 009e D7E7     		b	.L121
 1076              	.LVL121:
 1077              	.L122:
 905:../drivers/fsl_sdhc.c ****         {
 1078              		.loc 1 905 0
 1079 00a0 102B     		cmp	r3, #16
 1080 00a2 BAD8     		bhi	.L135
 1081              	.LVL122:
 926:../drivers/fsl_sdhc.c ****         }
 1082              		.loc 1 926 0
 1083 00a4 0146     		mov	r1, r0
 1084              	.LVL123:
 1085 00a6 F6E7     		b	.L147
 1086              		.cfi_endproc
 1087              	.LFE188:
 1089              		.section	.text.SDHC_SetCardActive,"ax",%progbits
 1090              		.align	1
 1091              		.global	SDHC_SetCardActive
 1092              		.syntax unified
 1093              		.thumb
 1094              		.thumb_func
 1095              		.fpu fpv4-sp-d16
 1097              	SDHC_SetCardActive:
 1098              	.LFB189:
 969:../drivers/fsl_sdhc.c ****     base->SYSCTL |= SDHC_SYSCTL_INITA_MASK;
 1099              		.loc 1 969 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
 1104              	.LVL124:
 970:../drivers/fsl_sdhc.c ****     /* Delay some time to wait card become active state. */
 1105              		.loc 1 970 0
 1106 0000 C36A     		ldr	r3, [r0, #44]
 1107 0002 43F00063 		orr	r3, r3, #134217728
 1108 0006 C362     		str	r3, [r0, #44]
 1109              	.L150:
 972:../drivers/fsl_sdhc.c ****     {
 1110              		.loc 1 972 0
 1111 0008 C36A     		ldr	r3, [r0, #44]
 1112 000a 1B01     		lsls	r3, r3, #4
 1113 000c 03D4     		bmi	.L152
 1114              	.L151:
 982:../drivers/fsl_sdhc.c **** 
 1115              		.loc 1 982 0
 1116 000e 081C     		adds	r0, r1, #0
 1117              	.LVL125:
 1118 0010 18BF     		it	ne
 1119 0012 0120     		movne	r0, #1
 1120 0014 7047     		bx	lr
 1121              	.LVL126:
 1122              	.L152:
 974:../drivers/fsl_sdhc.c ****         {
 1123              		.loc 1 974 0
 1124 0016 0029     		cmp	r1, #0
 1125 0018 F9D0     		beq	.L151
 978:../drivers/fsl_sdhc.c ****     }
 1126              		.loc 1 978 0
 1127 001a 0139     		subs	r1, r1, #1
 1128              	.LVL127:
 1129 001c F4E7     		b	.L150
 1130              		.cfi_endproc
 1131              	.LFE189:
 1133              		.section	.text.SDHC_SetTransferConfig,"ax",%progbits
 1134              		.align	1
 1135              		.global	SDHC_SetTransferConfig
 1136              		.syntax unified
 1137              		.thumb
 1138              		.thumb_func
 1139              		.fpu fpv4-sp-d16
 1141              	SDHC_SetTransferConfig:
 1142              	.LFB190:
 985:../drivers/fsl_sdhc.c ****     assert(config);
 1143              		.loc 1 985 0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 0
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 1147              	.LVL128:
 991:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 1148              		.loc 1 991 0
 1149 0000 0B68     		ldr	r3, [r1]
 990:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 1150              		.loc 1 990 0
 1151 0002 4268     		ldr	r2, [r0, #4]
 985:../drivers/fsl_sdhc.c ****     assert(config);
 1152              		.loc 1 985 0
 1153 0004 10B5     		push	{r4, lr}
 1154              		.cfi_def_cfa_offset 8
 1155              		.cfi_offset 4, -8
 1156              		.cfi_offset 14, -4
 991:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 1157              		.loc 1 991 0
 1158 0006 4C68     		ldr	r4, [r1, #4]
 1159 0008 C3F30C03 		ubfx	r3, r3, #0, #13
 990:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 1160              		.loc 1 990 0
 1161 000c 02F46042 		and	r2, r2, #57344
 991:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 1162              		.loc 1 991 0
 1163 0010 43EA0443 		orr	r3, r3, r4, lsl #16
 990:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 1164              		.loc 1 990 0
 1165 0014 1343     		orrs	r3, r3, r2
 1166 0016 4360     		str	r3, [r0, #4]
 992:../drivers/fsl_sdhc.c ****     base->XFERTYP = (((config->commandIndex << SDHC_XFERTYP_CMDINX_SHIFT) & SDHC_XFERTYP_CMDINX_MAS
 1167              		.loc 1 992 0
 1168 0018 8B68     		ldr	r3, [r1, #8]
 1169 001a 8360     		str	r3, [r0, #8]
 993:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 1170              		.loc 1 993 0
 1171 001c CB68     		ldr	r3, [r1, #12]
 994:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CMDTYP_MASK | SDHC_XFERTYP_BCEN_MASK | SDHC_XFE
 1172              		.loc 1 994 0
 1173 001e 044A     		ldr	r2, .L158
 1174 0020 0969     		ldr	r1, [r1, #16]
 1175              	.LVL129:
 993:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 1176              		.loc 1 993 0
 1177 0022 1B06     		lsls	r3, r3, #24
 1178 0024 03F07C53 		and	r3, r3, #1056964608
 994:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CMDTYP_MASK | SDHC_XFERTYP_BCEN_MASK | SDHC_XFE
 1179              		.loc 1 994 0
 1180 0028 0A40     		ands	r2, r2, r1
 993:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 1181              		.loc 1 993 0
 1182 002a 1343     		orrs	r3, r3, r2
 1183 002c C360     		str	r3, [r0, #12]
 1184 002e 10BD     		pop	{r4, pc}
 1185              	.L159:
 1186              		.align	2
 1187              	.L158:
 1188 0030 3700FB00 		.word	16449591
 1189              		.cfi_endproc
 1190              	.LFE190:
 1192              		.section	.text.SDHC_StartTransfer,"ax",%progbits
 1193              		.align	1
 1194              		.syntax unified
 1195              		.thumb
 1196              		.thumb_func
 1197              		.fpu fpv4-sp-d16
 1199              	SDHC_StartTransfer:
 1200              	.LFB169:
 284:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 1201              		.loc 1 284 0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 24
 1204              		@ frame_needed = 0, uses_anonymous_args = 0
 1205              	.LVL130:
 1206 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1207              		.cfi_def_cfa_offset 20
 1208              		.cfi_offset 4, -20
 1209              		.cfi_offset 5, -16
 1210              		.cfi_offset 6, -12
 1211              		.cfi_offset 7, -8
 1212              		.cfi_offset 14, -4
 1213 0002 0D46     		mov	r5, r1
 1214 0004 87B0     		sub	sp, sp, #28
 1215              		.cfi_def_cfa_offset 48
 284:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 1216              		.loc 1 284 0
 1217 0006 0646     		mov	r6, r0
 1218 0008 1446     		mov	r4, r2
 286:../drivers/fsl_sdhc.c **** 
 1219              		.loc 1 286 0
 1220 000a 0021     		movs	r1, #0
 1221              	.LVL131:
 1222 000c 1422     		movs	r2, #20
 1223              	.LVL132:
 1224 000e 01A8     		add	r0, sp, #4
 1225              	.LVL133:
 284:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 1226              		.loc 1 284 0
 1227 0010 1F46     		mov	r7, r3
 286:../drivers/fsl_sdhc.c **** 
 1228              		.loc 1 286 0
 1229 0012 FFF7FEFF 		bl	memset
 1230              	.LVL134:
 1231 0016 6A7A     		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 1232 0018 013A     		subs	r2, r2, #1
 1233 001a D2B2     		uxtb	r2, r2
 1234 001c 082A     		cmp	r2, #8
 1235 001e 9CBF     		itt	ls
 1236 0020 164B     		ldrls	r3, .L176
 1237 0022 53F82220 		ldrls	r2, [r3, r2, lsl #2]
 323:../drivers/fsl_sdhc.c ****     {
 1238              		.loc 1 323 0
 1239 0026 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 289:../drivers/fsl_sdhc.c ****     {
 1240              		.loc 1 289 0
 1241 0028 88BF     		it	hi
 1242 002a 0022     		movhi	r2, #0
 1243              	.LVL135:
 323:../drivers/fsl_sdhc.c ****     {
 1244              		.loc 1 323 0
 1245 002c 032B     		cmp	r3, #3
 325:../drivers/fsl_sdhc.c ****     }
 1246              		.loc 1 325 0
 1247 002e 08BF     		it	eq
 1248 0030 42F44002 		orreq	r2, r2, #12582912
 1249              	.LVL136:
 328:../drivers/fsl_sdhc.c ****     {
 1250              		.loc 1 328 0
 1251 0034 84B1     		cbz	r4, .L163
 1252              	.LVL137:
 334:../drivers/fsl_sdhc.c ****         }
 1253              		.loc 1 334 0
 1254 0036 42F40012 		orr	r2, r2, #2097152
 1255              	.LVL138:
 332:../drivers/fsl_sdhc.c ****         {
 1256              		.loc 1 332 0
 1257 003a C7B9     		cbnz	r7, .L164
 1258              	.L165:
 336:../drivers/fsl_sdhc.c ****         {
 1259              		.loc 1 336 0
 1260 003c E368     		ldr	r3, [r4, #12]
 1261 003e 0BB1     		cbz	r3, .L166
 338:../drivers/fsl_sdhc.c ****         }
 1262              		.loc 1 338 0
 1263 0040 42F01002 		orr	r2, r2, #16
 1264              	.LVL139:
 1265              	.L166:
 340:../drivers/fsl_sdhc.c ****         {
 1266              		.loc 1 340 0
 1267 0044 A368     		ldr	r3, [r4, #8]
 1268 0046 012B     		cmp	r3, #1
 1269 0048 03D9     		bls	.L167
 1270              	.LVL140:
 343:../drivers/fsl_sdhc.c ****             {
 1271              		.loc 1 343 0
 1272 004a 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 1273 004c 91B9     		cbnz	r1, .L168
 342:../drivers/fsl_sdhc.c ****             if (data->enableAutoCommand12)
 1274              		.loc 1 342 0
 1275 004e 42F02202 		orr	r2, r2, #34
 1276              	.LVL141:
 1277              	.L167:
 350:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockCount = data->blockCount;
 1278              		.loc 1 350 0
 1279 0052 6168     		ldr	r1, [r4, #4]
 1280 0054 0191     		str	r1, [sp, #4]
 351:../drivers/fsl_sdhc.c ****     }
 1281              		.loc 1 351 0
 1282 0056 0293     		str	r3, [sp, #8]
 1283              	.L163:
 359:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.commandIndex = command->index;
 1284              		.loc 1 359 0
 1285 0058 6B68     		ldr	r3, [r5, #4]
 1286 005a 0393     		str	r3, [sp, #12]
 362:../drivers/fsl_sdhc.c **** }
 1287              		.loc 1 362 0
 1288 005c 01A9     		add	r1, sp, #4
 360:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.flags = flags;
 1289              		.loc 1 360 0
 1290 005e 2B68     		ldr	r3, [r5]
 1291 0060 0493     		str	r3, [sp, #16]
 362:../drivers/fsl_sdhc.c **** }
 1292              		.loc 1 362 0
 1293 0062 3046     		mov	r0, r6
 361:../drivers/fsl_sdhc.c ****     SDHC_SetTransferConfig(base, &sdhcTransferConfig);
 1294              		.loc 1 361 0
 1295 0064 0592     		str	r2, [sp, #20]
 362:../drivers/fsl_sdhc.c **** }
 1296              		.loc 1 362 0
 1297 0066 FFF7FEFF 		bl	SDHC_SetTransferConfig
 1298              	.LVL142:
 363:../drivers/fsl_sdhc.c **** 
 1299              		.loc 1 363 0
 1300 006a 07B0     		add	sp, sp, #28
 1301              		.cfi_remember_state
 1302              		.cfi_def_cfa_offset 20
 1303              		@ sp needed
 1304 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1305              	.LVL143:
 1306              	.L164:
 1307              		.cfi_restore_state
 334:../drivers/fsl_sdhc.c ****         }
 1308              		.loc 1 334 0
 1309 006e 42F00102 		orr	r2, r2, #1
 1310              	.LVL144:
 1311 0072 E3E7     		b	.L165
 1312              	.LVL145:
 1313              	.L168:
 346:../drivers/fsl_sdhc.c ****             }
 1314              		.loc 1 346 0
 1315 0074 42F02602 		orr	r2, r2, #38
 1316              	.LVL146:
 1317 0078 EBE7     		b	.L167
 1318              	.L177:
 1319 007a 00BF     		.align	2
 1320              	.L176:
 1321 007c 00000000 		.word	.LANCHOR0
 1322              		.cfi_endproc
 1323              	.LFE169:
 1325              		.section	.text.SDHC_EnableSdioControl,"ax",%progbits
 1326              		.align	1
 1327              		.global	SDHC_EnableSdioControl
 1328              		.syntax unified
 1329              		.thumb
 1330              		.thumb_func
 1331              		.fpu fpv4-sp-d16
 1333              	SDHC_EnableSdioControl:
 1334              	.LFB191:
1001:../drivers/fsl_sdhc.c ****     uint32_t proctl = base->PROCTL;
 1335              		.loc 1 1001 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              	.LVL147:
 1340 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1341              		.cfi_def_cfa_offset 20
 1342              		.cfi_offset 4, -20
 1343              		.cfi_offset 5, -16
 1344              		.cfi_offset 6, -12
 1345              		.cfi_offset 7, -8
 1346              		.cfi_offset 14, -4
1002:../drivers/fsl_sdhc.c ****     uint32_t vendor = base->VENDOR;
 1347              		.loc 1 1002 0
 1348 0002 836A     		ldr	r3, [r0, #40]
 1349              	.LVL148:
1003:../drivers/fsl_sdhc.c **** 
 1350              		.loc 1 1003 0
 1351 0004 D0F8C040 		ldr	r4, [r0, #192]
 1352              	.LVL149:
 1353 0008 01F00107 		and	r7, r1, #1
 1354 000c 01F00206 		and	r6, r1, #2
 1355 0010 01F00405 		and	r5, r1, #4
 1356 0014 01F00801 		and	r1, r1, #8
 1357              	.LVL150:
1005:../drivers/fsl_sdhc.c ****     {
 1358              		.loc 1 1005 0
 1359 0018 7AB1     		cbz	r2, .L179
1007:../drivers/fsl_sdhc.c ****         {
 1360              		.loc 1 1007 0
 1361 001a 0FB1     		cbz	r7, .L180
1009:../drivers/fsl_sdhc.c ****         }
 1362              		.loc 1 1009 0
 1363 001c 43F48033 		orr	r3, r3, #65536
 1364              	.LVL151:
 1365              	.L180:
1011:../drivers/fsl_sdhc.c ****         {
 1366              		.loc 1 1011 0
 1367 0020 0EB1     		cbz	r6, .L181
1013:../drivers/fsl_sdhc.c ****         }
 1368              		.loc 1 1013 0
 1369 0022 43F48023 		orr	r3, r3, #262144
 1370              	.LVL152:
 1371              	.L181:
1015:../drivers/fsl_sdhc.c ****         {
 1372              		.loc 1 1015 0
 1373 0026 0DB1     		cbz	r5, .L182
1017:../drivers/fsl_sdhc.c ****         }
 1374              		.loc 1 1017 0
 1375 0028 43F40023 		orr	r3, r3, #524288
 1376              	.LVL153:
 1377              	.L182:
1019:../drivers/fsl_sdhc.c ****         {
 1378              		.loc 1 1019 0
 1379 002c 09B1     		cbz	r1, .L183
1021:../drivers/fsl_sdhc.c ****         }
 1380              		.loc 1 1021 0
 1381 002e 44F00204 		orr	r4, r4, #2
 1382              	.LVL154:
 1383              	.L183:
1044:../drivers/fsl_sdhc.c ****     base->VENDOR = vendor;
 1384              		.loc 1 1044 0
 1385 0032 8362     		str	r3, [r0, #40]
1045:../drivers/fsl_sdhc.c **** }
 1386              		.loc 1 1045 0
 1387 0034 C0F8C040 		str	r4, [r0, #192]
 1388 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 1389              	.LVL155:
 1390              	.L179:
1026:../drivers/fsl_sdhc.c ****         {
 1391              		.loc 1 1026 0
 1392 003a 0FB1     		cbz	r7, .L184
1028:../drivers/fsl_sdhc.c ****         }
 1393              		.loc 1 1028 0
 1394 003c 23F48033 		bic	r3, r3, #65536
 1395              	.LVL156:
 1396              	.L184:
1030:../drivers/fsl_sdhc.c ****         {
 1397              		.loc 1 1030 0
 1398 0040 0EB1     		cbz	r6, .L185
1032:../drivers/fsl_sdhc.c ****         }
 1399              		.loc 1 1032 0
 1400 0042 23F48023 		bic	r3, r3, #262144
 1401              	.LVL157:
 1402              	.L185:
1034:../drivers/fsl_sdhc.c ****         {
 1403              		.loc 1 1034 0
 1404 0046 0DB1     		cbz	r5, .L186
1036:../drivers/fsl_sdhc.c ****         }
 1405              		.loc 1 1036 0
 1406 0048 23F40023 		bic	r3, r3, #524288
 1407              	.LVL158:
 1408              	.L186:
1038:../drivers/fsl_sdhc.c ****         {
 1409              		.loc 1 1038 0
 1410 004c 0029     		cmp	r1, #0
 1411 004e F0D0     		beq	.L183
1040:../drivers/fsl_sdhc.c ****         }
 1412              		.loc 1 1040 0
 1413 0050 24F00204 		bic	r4, r4, #2
 1414              	.LVL159:
 1415 0054 EDE7     		b	.L183
 1416              		.cfi_endproc
 1417              	.LFE191:
 1419              		.section	.text.SDHC_SetMmcBootConfig,"ax",%progbits
 1420              		.align	1
 1421              		.global	SDHC_SetMmcBootConfig
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1425              		.fpu fpv4-sp-d16
 1427              	SDHC_SetMmcBootConfig:
 1428              	.LFB192:
1049:../drivers/fsl_sdhc.c ****     assert(config);
 1429              		.loc 1 1049 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 0, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 1434              	.LVL160:
1056:../drivers/fsl_sdhc.c ****                SDHC_MMCBOOT_BOOTBLKCNT(config->blockCount));
 1435              		.loc 1 1056 0
 1436 0000 0B68     		ldr	r3, [r1]
1057:../drivers/fsl_sdhc.c ****     if (config->enableBootAck)
 1437              		.loc 1 1057 0
 1438 0002 8A68     		ldr	r2, [r1, #8]
1056:../drivers/fsl_sdhc.c ****                SDHC_MMCBOOT_BOOTBLKCNT(config->blockCount));
 1439              		.loc 1 1056 0
 1440 0004 03F00F03 		and	r3, r3, #15
 1441 0008 43EA0243 		orr	r3, r3, r2, lsl #16
 1442 000c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1443 000e 5201     		lsls	r2, r2, #5
 1444 0010 02F02002 		and	r2, r2, #32
 1445 0014 1343     		orrs	r3, r3, r2
 1446              	.LVL161:
1058:../drivers/fsl_sdhc.c ****     {
 1447              		.loc 1 1058 0
 1448 0016 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 1449 0018 0AB1     		cbz	r2, .L212
1060:../drivers/fsl_sdhc.c ****     }
 1450              		.loc 1 1060 0
 1451 001a 43F01003 		orr	r3, r3, #16
 1452              	.LVL162:
 1453              	.L212:
1062:../drivers/fsl_sdhc.c ****     {
 1454              		.loc 1 1062 0
 1455 001e 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 1456 0020 0AB1     		cbz	r2, .L213
1064:../drivers/fsl_sdhc.c ****     }
 1457              		.loc 1 1064 0
 1458 0022 43F04003 		orr	r3, r3, #64
 1459              	.LVL163:
 1460              	.L213:
1066:../drivers/fsl_sdhc.c ****     {
 1461              		.loc 1 1066 0
 1462 0026 8A7B     		ldrb	r2, [r1, #14]	@ zero_extendqisi2
 1463 0028 0AB1     		cbz	r2, .L214
1068:../drivers/fsl_sdhc.c ****     }
 1464              		.loc 1 1068 0
 1465 002a 43F08003 		orr	r3, r3, #128
 1466              	.LVL164:
 1467              	.L214:
1070:../drivers/fsl_sdhc.c **** }
 1468              		.loc 1 1070 0
 1469 002e C0F8C430 		str	r3, [r0, #196]
 1470 0032 7047     		bx	lr
 1471              		.cfi_endproc
 1472              	.LFE192:
 1474              		.section	.text.SDHC_SetAdmaTableConfig,"ax",%progbits
 1475              		.align	1
 1476              		.global	SDHC_SetAdmaTableConfig
 1477              		.syntax unified
 1478              		.thumb
 1479              		.thumb_func
 1480              		.fpu fpv4-sp-d16
 1482              	SDHC_SetAdmaTableConfig:
 1483              	.LFB193:
1079:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 1484              		.loc 1 1079 0
 1485              		.cfi_startproc
 1486              		@ args = 8, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 1488              	.LVL165:
 1489 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1490              		.cfi_def_cfa_offset 24
 1491              		.cfi_offset 4, -24
 1492              		.cfi_offset 5, -20
 1493              		.cfi_offset 6, -16
 1494              		.cfi_offset 7, -12
 1495              		.cfi_offset 8, -8
 1496              		.cfi_offset 14, -4
1079:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 1497              		.loc 1 1079 0
 1498 0004 DDF818E0 		ldr	lr, [sp, #24]
 1499              	.LVL166:
 1500 0008 079C     		ldr	r4, [sp, #28]
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1501              		.loc 1 1089 0
 1502 000a 02B1     		cbz	r2, .L225
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1503              		.loc 1 1089 0 is_stmt 0 discriminator 2
 1504 000c 13B9     		cbnz	r3, .L226
 1505              	.L225:
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1506              		.loc 1 1089 0 discriminator 3
 1507 000e 4D1E     		subs	r5, r1, #1
 1508 0010 012D     		cmp	r5, #1
 1509 0012 45D9     		bls	.L235
 1510              	.L226:
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1511              		.loc 1 1089 0 discriminator 5
 1512 0014 BEF1000F 		cmp	lr, #0
 1513 0018 42D0     		beq	.L235
1090:../drivers/fsl_sdhc.c **** #if !defined FSL_SDHC_ENABLE_ADMA1
 1514              		.loc 1 1090 0 is_stmt 1
 1515 001a 002C     		cmp	r4, #0
 1516 001c 40D0     		beq	.L235
1092:../drivers/fsl_sdhc.c **** #endif
 1517              		.loc 1 1092 0
 1518 001e 0129     		cmp	r1, #1
 1519 0020 3ED0     		beq	.L235
1098:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 1520              		.loc 1 1098 0
 1521 0022 0229     		cmp	r1, #2
 1522 0024 39D1     		bne	.L236
1098:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 1523              		.loc 1 1098 0 is_stmt 0 discriminator 1
 1524 0026 1EF0030F 		tst	lr, #3
 1525 002a 3CD1     		bne	.L237
 1526              	.LVL167:
 1527              	.LBB195:
 1528              	.LBB196:
1178:../drivers/fsl_sdhc.c ****                 {
 1529              		.loc 1 1178 0 is_stmt 1
 1530 002c A107     		lsls	r1, r4, #30
 1531              	.LVL168:
1180:../drivers/fsl_sdhc.c ****                         sizeof(uint32_t) - (dataBytes % sizeof(uint32_t)); /* make the data length 
 1532              		.loc 1 1180 0
 1533 002e 1CBF     		itt	ne
 1534 0030 24F00304 		bicne	r4, r4, #3
 1535              	.LVL169:
 1536 0034 0434     		addne	r4, r4, #4
 1537              	.LVL170:
1185:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma2_descriptor_t)))
 1538              		.loc 1 1185 0
 1539 0036 4FF6FF71 		movw	r1, #65535
1186:../drivers/fsl_sdhc.c ****                 {
 1540              		.loc 1 1186 0
 1541 003a C3F35C03 		ubfx	r3, r3, #1, #29
 1542              	.LVL171:
1185:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma2_descriptor_t)))
 1543              		.loc 1 1185 0
 1544 003e B4FBF1F1 		udiv	r1, r4, r1
 1545 0042 0131     		adds	r1, r1, #1
 1546              	.LVL172:
1186:../drivers/fsl_sdhc.c ****                 {
 1547              		.loc 1 1186 0
 1548 0044 9942     		cmp	r1, r3
 1549 0046 32D8     		bhi	.L238
1212:../drivers/fsl_sdhc.c ****                             startAddress += (SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(ui
 1550              		.loc 1 1212 0
 1551 0048 DFF868C0 		ldr	ip, .L246
1186:../drivers/fsl_sdhc.c ****                 {
 1552              		.loc 1 1186 0
 1553 004c 1746     		mov	r7, r2
 1554 004e 7646     		mov	r6, lr
 1555 0050 0025     		movs	r5, #0
1213:../drivers/fsl_sdhc.c ****                         }
 1556              		.loc 1 1213 0
 1557 0052 4FF6FC78 		movw	r8, #65532
 1558              	.LVL173:
 1559              	.L231:
1196:../drivers/fsl_sdhc.c ****                             SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY)
 1560              		.loc 1 1196 0
 1561 0056 A6EB0E03 		sub	r3, r6, lr
 1562 005a E31A     		subs	r3, r4, r3
 1563 005c B3F5803F 		cmp	r3, #65536
1202:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute |=
 1564              		.loc 1 1202 0
 1565 0060 3CBF     		itt	cc
 1566 0062 1B04     		lslcc	r3, r3, #16
1203:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma2DescriptorTypeTransfer | kSDHC_Adma2DescriptorEndFlag);
 1567              		.loc 1 1203 0
 1568 0064 43F02303 		orrcc	r3, r3, #35
1200:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute = ((dataBytes - sizeof(uint32_t) * (star
 1569              		.loc 1 1200 0
 1570 0068 7E60     		str	r6, [r7, #4]
1203:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma2DescriptorTypeTransfer | kSDHC_Adma2DescriptorEndFlag);
 1571              		.loc 1 1203 0
 1572 006a 34BF     		ite	cc
 1573 006c 42F83530 		strcc	r3, [r2, r5, lsl #3]
1212:../drivers/fsl_sdhc.c ****                             startAddress += (SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(ui
 1574              		.loc 1 1212 0
 1575 0070 42F835C0 		strcs	ip, [r2, r5, lsl #3]
1193:../drivers/fsl_sdhc.c ****                     {
 1576              		.loc 1 1193 0
 1577 0074 05F10105 		add	r5, r5, #1
 1578              	.LVL174:
1213:../drivers/fsl_sdhc.c ****                         }
 1579              		.loc 1 1213 0
 1580 0078 28BF     		it	cs
 1581 007a 4644     		addcs	r6, r6, r8
 1582              	.LVL175:
1193:../drivers/fsl_sdhc.c ****                     {
 1583              		.loc 1 1193 0
 1584 007c A942     		cmp	r1, r5
 1585 007e 07F10807 		add	r7, r7, #8
 1586 0082 E8D8     		bhi	.L231
1218:../drivers/fsl_sdhc.c ****                     base->ADSADDR = (uint32_t)table;
 1587              		.loc 1 1218 0
 1588 0084 0023     		movs	r3, #0
 1589 0086 0360     		str	r3, [r0]
1219:../drivers/fsl_sdhc.c ****                     /* disable the buffer read flag in DMA mode */
 1590              		.loc 1 1219 0
 1591 0088 8265     		str	r2, [r0, #88]
 1592              	.LVL176:
 1593              	.LBB197:
 1594              	.LBB198:
 703:../drivers/fsl_sdhc.h **** }
 1595              		.loc 2 703 0
 1596 008a 826B     		ldr	r2, [r0, #56]
 1597              	.LVL177:
 1598 008c 22F03002 		bic	r2, r2, #48
 1599 0090 8263     		str	r2, [r0, #56]
 1600              	.LVL178:
 1601              	.LBE198:
 1602              	.LBE197:
 1603              	.LBB199:
 1604              	.LBB200:
 681:../drivers/fsl_sdhc.h **** }
 1605              		.loc 2 681 0
 1606 0092 426B     		ldr	r2, [r0, #52]
 1607 0094 22F03002 		bic	r2, r2, #48
 1608 0098 4263     		str	r2, [r0, #52]
 1609              	.LVL179:
 1610              	.L236:
 1611              	.LBE200:
 1612              	.LBE199:
 1613              	.LBE196:
 1614              	.LBE195:
1080:../drivers/fsl_sdhc.c ****     const uint32_t *startAddress = data;
 1615              		.loc 1 1080 0
 1616 009a 0020     		movs	r0, #0
 1617              	.LVL180:
 1618 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1619              	.LVL181:
 1620              	.L235:
1096:../drivers/fsl_sdhc.c ****     }
 1621              		.loc 1 1096 0
 1622 00a0 0420     		movs	r0, #4
 1623              	.LVL182:
 1624 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1625              	.LVL183:
 1626              	.L237:
1104:../drivers/fsl_sdhc.c ****     }
 1627              		.loc 1 1104 0
 1628 00a6 4FF4D560 		mov	r0, #1704
 1629              	.LVL184:
 1630 00aa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1631              	.LVL185:
 1632              	.L238:
 1633              	.LBB202:
 1634              	.LBB201:
1188:../drivers/fsl_sdhc.c ****                 }
 1635              		.loc 1 1188 0
 1636 00ae 0320     		movs	r0, #3
 1637              	.LVL186:
 1638              	.LBE201:
 1639              	.LBE202:
1231:../drivers/fsl_sdhc.c **** 
 1640              		.loc 1 1231 0
 1641 00b0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1642              	.LVL187:
 1643              	.L247:
 1644              		.align	2
 1645              	.L246:
 1646 00b4 2100FCFF 		.word	-262111
 1647              		.cfi_endproc
 1648              	.LFE193:
 1650              		.section	.text.SDHC_TransferBlocking,"ax",%progbits
 1651              		.align	1
 1652              		.global	SDHC_TransferBlocking
 1653              		.syntax unified
 1654              		.thumb
 1655              		.thumb_func
 1656              		.fpu fpv4-sp-d16
 1658              	SDHC_TransferBlocking:
 1659              	.LFB194:
1234:../drivers/fsl_sdhc.c ****     assert(transfer);
 1660              		.loc 1 1234 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 0
 1663              		@ frame_needed = 0, uses_anonymous_args = 0
 1664              	.LVL188:
 1665 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 1666              		.cfi_def_cfa_offset 40
 1667              		.cfi_offset 4, -28
 1668              		.cfi_offset 5, -24
 1669              		.cfi_offset 6, -20
 1670              		.cfi_offset 7, -16
 1671              		.cfi_offset 8, -12
 1672              		.cfi_offset 9, -8
 1673              		.cfi_offset 14, -4
1239:../drivers/fsl_sdhc.c ****     sdhc_data_t *data = transfer->data;
 1674              		.loc 1 1239 0
 1675 0004 D3F80480 		ldr	r8, [r3, #4]
1238:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
 1676              		.loc 1 1238 0
 1677 0008 876A     		ldr	r7, [r0, #40]
 1678              	.LVL189:
1234:../drivers/fsl_sdhc.c ****     assert(transfer);
 1679              		.loc 1 1234 0
 1680 000a 0446     		mov	r4, r0
1243:../drivers/fsl_sdhc.c ****     {
 1681              		.loc 1 1243 0
 1682 000c B8F1000F 		cmp	r8, #0
 1683 0010 00F0AE80 		beq	.L279
1240:../drivers/fsl_sdhc.c **** 
 1684              		.loc 1 1240 0 discriminator 1
 1685 0014 1D68     		ldr	r5, [r3]
1243:../drivers/fsl_sdhc.c ****     {
 1686              		.loc 1 1243 0 discriminator 1
 1687 0016 25B1     		cbz	r5, .L308
1243:../drivers/fsl_sdhc.c ****     {
 1688              		.loc 1 1243 0 is_stmt 0 discriminator 2
 1689 0018 AB68     		ldr	r3, [r5, #8]
 1690              	.LVL190:
 1691 001a B3F5803F 		cmp	r3, #65536
 1692 001e 80F0A780 		bcs	.L279
 1693              	.L308:
 1694              	.LVL191:
 1695              	.LBB253:
 1696              	.LBB254:
 767:../drivers/fsl_sdhc.h **** }
 1697              		.loc 2 767 0 is_stmt 1 discriminator 1
 1698 0022 636A     		ldr	r3, [r4, #36]
 1699              	.LVL192:
 1700              	.LBE254:
 1701              	.LBE253:
1249:../drivers/fsl_sdhc.c ****     {
 1702              		.loc 1 1249 0 discriminator 1
 1703 0024 DE07     		lsls	r6, r3, #31
 1704 0026 FCD4     		bmi	.L308
1238:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
 1705              		.loc 1 1238 0
 1706 0028 C7F30127 		ubfx	r7, r7, #8, #2
 1707              	.LVL193:
 1708              	.L252:
1252:../drivers/fsl_sdhc.c ****     {
 1709              		.loc 1 1252 0 discriminator 2
 1710 002c D5B1     		cbz	r5, .L251
 1711              	.LVL194:
 1712              	.LBB255:
 1713              	.LBB256:
 767:../drivers/fsl_sdhc.h **** }
 1714              		.loc 2 767 0
 1715 002e 636A     		ldr	r3, [r4, #36]
 1716              	.LVL195:
 1717              	.LBE256:
 1718              	.LBE255:
1252:../drivers/fsl_sdhc.c ****     {
 1719              		.loc 1 1252 0
 1720 0030 9807     		lsls	r0, r3, #30
 1721 0032 FBD4     		bmi	.L252
1257:../drivers/fsl_sdhc.c ****     {
 1722              		.loc 1 1257 0 discriminator 1
 1723 0034 B1B1     		cbz	r1, .L251
1261:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
 1724              		.loc 1 1261 0
 1725 0036 EB68     		ldr	r3, [r5, #12]
1260:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 1726              		.loc 1 1260 0
 1727 0038 03B9     		cbnz	r3, .L253
1260:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 1728              		.loc 1 1260 0 is_stmt 0 discriminator 2
 1729 003a 2B69     		ldr	r3, [r5, #16]
 1730              	.L253:
1260:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 1731              		.loc 1 1260 0
 1732 003c AE68     		ldr	r6, [r5, #8]
 1733 003e 6868     		ldr	r0, [r5, #4]
1259:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 1734              		.loc 1 1259 0 is_stmt 1
 1735 0040 0093     		str	r3, [sp]
1260:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 1736              		.loc 1 1260 0
 1737 0042 7043     		muls	r0, r6, r0
1259:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 1738              		.loc 1 1259 0
 1739 0044 0190     		str	r0, [sp, #4]
 1740 0046 1346     		mov	r3, r2
 1741 0048 2046     		mov	r0, r4
 1742 004a 0A46     		mov	r2, r1
 1743              	.LVL196:
 1744 004c 3946     		mov	r1, r7
 1745              	.LVL197:
 1746 004e FFF7FEFF 		bl	SDHC_SetAdmaTableConfig
 1747              	.LVL198:
1263:../drivers/fsl_sdhc.c ****         {
 1748              		.loc 1 1263 0
 1749 0052 B0F5D56F 		cmp	r0, #1704
1259:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 1750              		.loc 1 1259 0
 1751 0056 0646     		mov	r6, r0
 1752              	.LVL199:
1263:../drivers/fsl_sdhc.c ****         {
 1753              		.loc 1 1263 0
 1754 0058 2AD1     		bne	.L254
 1755              	.LVL200:
 1756              	.LBB257:
 1757              	.LBB258:
 670:../drivers/fsl_sdhc.h **** }
 1758              		.loc 2 670 0
 1759 005a 636B     		ldr	r3, [r4, #52]
 1760 005c 43F03003 		orr	r3, r3, #48
 1761 0060 6363     		str	r3, [r4, #52]
 1762              	.LBE258:
 1763              	.LBE257:
1265:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
 1764              		.loc 1 1265 0
 1765 0062 0027     		movs	r7, #0
 1766              	.LVL201:
 1767              	.L251:
1278:../drivers/fsl_sdhc.c ****     if (kStatus_Success != SDHC_SendCommandBlocking(base, command))
 1768              		.loc 1 1278 0
 1769 0064 3B46     		mov	r3, r7
 1770 0066 2A46     		mov	r2, r5
 1771 0068 4146     		mov	r1, r8
 1772 006a 2046     		mov	r0, r4
 1773 006c FFF7FEFF 		bl	SDHC_StartTransfer
 1774              	.LVL202:
 1775              	.LBB259:
 1776              	.LBB260:
 610:../drivers/fsl_sdhc.c ****     {
 1777              		.loc 1 610 0
 1778 0070 4D4B     		ldr	r3, .L329
 1779 0072 9946     		mov	r9, r3
 1780              	.L255:
 1781              	.LVL203:
 1782              	.LBB261:
 1783              	.LBB262:
 721:../drivers/fsl_sdhc.h **** }
 1784              		.loc 2 721 0
 1785 0074 226B     		ldr	r2, [r4, #48]
 1786              	.LVL204:
 1787              	.LBE262:
 1788              	.LBE261:
 610:../drivers/fsl_sdhc.c ****     {
 1789              		.loc 1 610 0
 1790 0076 1A42     		tst	r2, r3
 1791 0078 FCD0     		beq	.L255
 1792              	.LVL205:
 1793              	.LBB263:
 1794              	.LBB264:
 721:../drivers/fsl_sdhc.h **** }
 1795              		.loc 2 721 0
 1796 007a 236B     		ldr	r3, [r4, #48]
 1797              	.LVL206:
 1798              	.LBE264:
 1799              	.LBE263:
 614:../drivers/fsl_sdhc.c ****     {
 1800              		.loc 1 614 0
 1801 007c 13F4702F 		tst	r3, #983040
 1802 0080 7ED0     		beq	.L256
 1803 0082 0126     		movs	r6, #1
 1804              	.LVL207:
 1805              	.L275:
 1806              	.LBB265:
 1807              	.LBB266:
 732:../drivers/fsl_sdhc.h **** }
 1808              		.loc 2 732 0
 1809 0084 C4F83090 		str	r9, [r4, #48]
 1810              	.LVL208:
 1811              	.LBE266:
 1812              	.LBE265:
 1813              	.LBE260:
 1814              	.LBE259:
1279:../drivers/fsl_sdhc.c ****     {
 1815              		.loc 1 1279 0
 1816 0088 002E     		cmp	r6, #0
 1817 008a 73D1     		bne	.L281
1283:../drivers/fsl_sdhc.c ****     {
 1818              		.loc 1 1283 0
 1819 008c 95B1     		cbz	r5, .L248
 1820              	.LVL209:
 1821              	.LBB268:
 1822              	.LBB269:
 673:../drivers/fsl_sdhc.c ****     {
 1823              		.loc 1 673 0
 1824 008e AFB1     		cbz	r7, .L258
 1825 0090 022F     		cmp	r7, #2
 1826 0092 72D1     		bne	.L327
 1827              	.LBB270:
 1828              	.LBB271:
 650:../drivers/fsl_sdhc.c ****     {
 1829              		.loc 1 650 0
 1830 0094 454B     		ldr	r3, .L329+4
 1831              	.L259:
 1832              	.LVL210:
 1833              	.LBB272:
 1834              	.LBB273:
 721:../drivers/fsl_sdhc.h **** }
 1835              		.loc 2 721 0
 1836 0096 226B     		ldr	r2, [r4, #48]
 1837              	.LVL211:
 1838              	.LBE273:
 1839              	.LBE272:
 650:../drivers/fsl_sdhc.c ****     {
 1840              		.loc 1 650 0
 1841 0098 1A42     		tst	r2, r3
 1842 009a FCD0     		beq	.L259
 1843              	.LVL212:
 653:../drivers/fsl_sdhc.c ****     {
 1844              		.loc 1 653 0
 1845 009c 444A     		ldr	r2, .L329+8
 1846              	.LBB274:
 1847              	.LBB275:
 721:../drivers/fsl_sdhc.h **** }
 1848              		.loc 2 721 0
 1849 009e 236B     		ldr	r3, [r4, #48]
 1850              	.LVL213:
 1851              	.LBE275:
 1852              	.LBE274:
 653:../drivers/fsl_sdhc.c ****     {
 1853              		.loc 1 653 0
 1854 00a0 1340     		ands	r3, r3, r2
 655:../drivers/fsl_sdhc.c ****         {
 1855              		.loc 1 655 0
 1856 00a2 18BF     		it	ne
 1857 00a4 6B78     		ldrbne	r3, [r5, #1]	@ zero_extendqisi2
 1858              	.LBB276:
 1859              	.LBB277:
 732:../drivers/fsl_sdhc.h **** }
 1860              		.loc 2 732 0
 1861 00a6 434A     		ldr	r2, .L329+12
 1862              	.LBE277:
 1863              	.LBE276:
 655:../drivers/fsl_sdhc.c ****         {
 1864              		.loc 1 655 0
 1865 00a8 18BF     		it	ne
 1866 00aa 83F00103 		eorne	r3, r3, #1
 1867              	.LVL214:
 1868 00ae 2AE0     		b	.L328
 1869              	.LVL215:
 1870              	.L254:
 1871              	.LBE271:
 1872              	.LBE270:
 1873              	.LBE269:
 1874              	.LBE268:
1268:../drivers/fsl_sdhc.c ****         {
 1875              		.loc 1 1268 0
 1876 00b0 0028     		cmp	r0, #0
 1877 00b2 D7D0     		beq	.L251
 1878              	.LVL216:
 1879              	.L248:
1292:../drivers/fsl_sdhc.c **** 
 1880              		.loc 1 1292 0
 1881 00b4 3046     		mov	r0, r6
 1882 00b6 03B0     		add	sp, sp, #12
 1883              		.cfi_remember_state
 1884              		.cfi_def_cfa_offset 28
 1885              		@ sp needed
 1886 00b8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1887              	.LVL217:
 1888              	.L258:
 1889              		.cfi_restore_state
 1890              	.LBB318:
 1891              	.LBB316:
 1892              	.LBB281:
 1893              	.LBB282:
 633:../drivers/fsl_sdhc.c ****     {
 1894              		.loc 1 633 0
 1895 00bc EA68     		ldr	r2, [r5, #12]
 1896 00be AF68     		ldr	r7, [r5, #8]
 1897              	.LVL218:
 1898 00c0 6B68     		ldr	r3, [r5, #4]
 1899 00c2 12B3     		cbz	r2, .L260
 1900              	.LVL219:
 1901              	.LBB283:
 1902              	.LBB284:
 464:../drivers/fsl_sdhc.c ****     {
 1903              		.loc 1 464 0
 1904 00c4 9907     		lsls	r1, r3, #30
 466:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 1905              		.loc 1 466 0
 1906 00c6 1EBF     		ittt	ne
 1907 00c8 23F00303 		bicne	r3, r3, #3
 1908 00cc 0433     		addne	r3, r3, #4
 1909 00ce 6B60     		strne	r3, [r5, #4]
 470:../drivers/fsl_sdhc.c **** 
 1910              		.loc 1 470 0
 1911 00d0 6A68     		ldr	r2, [r5, #4]
 474:../drivers/fsl_sdhc.c ****         {
 1912              		.loc 1 474 0
 1913 00d2 DFF8E880 		ldr	r8, .L329+20
 1914              	.LVL220:
 470:../drivers/fsl_sdhc.c **** 
 1915              		.loc 1 470 0
 1916 00d6 5743     		muls	r7, r2, r7
 1917 00d8 BF08     		lsrs	r7, r7, #2
 1918              	.LVL221:
 456:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 1919              		.loc 1 456 0
 1920 00da 0022     		movs	r2, #0
 1921              	.LVL222:
 1922              	.L262:
 472:../drivers/fsl_sdhc.c ****     {
 1923              		.loc 1 472 0
 1924 00dc 9742     		cmp	r7, r2
 1925 00de 01D8     		bhi	.L311
 1926 00e0 0023     		movs	r3, #0
 1927 00e2 0FE0     		b	.L265
 1928              	.L311:
 1929              	.LVL223:
 1930              	.LBB285:
 1931              	.LBB286:
 721:../drivers/fsl_sdhc.h **** }
 1932              		.loc 2 721 0
 1933 00e4 236B     		ldr	r3, [r4, #48]
 1934              	.LVL224:
 1935              	.LBE286:
 1936              	.LBE285:
 474:../drivers/fsl_sdhc.c ****         {
 1937              		.loc 1 474 0
 1938 00e6 13EA080F 		tst	r3, r8
 1939 00ea FBD0     		beq	.L311
 1940              	.LVL225:
 1941              	.LBB287:
 1942              	.LBB288:
 721:../drivers/fsl_sdhc.h **** }
 1943              		.loc 2 721 0
 1944 00ec 236B     		ldr	r3, [r4, #48]
 1945              	.LVL226:
 1946              	.LBE288:
 1947              	.LBE287:
 478:../drivers/fsl_sdhc.c ****         {
 1948              		.loc 1 478 0
 1949 00ee 13F0B87F 		tst	r3, #24117248
 1950 00f2 4BD0     		beq	.L264
 480:../drivers/fsl_sdhc.c ****             {
 1951              		.loc 1 480 0
 1952 00f4 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1953 00f6 002B     		cmp	r3, #0
 1954 00f8 48D1     		bne	.L264
 482:../drivers/fsl_sdhc.c ****             }
 1955              		.loc 1 482 0
 1956 00fa 0123     		movs	r3, #1
 1957              	.L276:
 1958              	.LVL227:
 1959              	.LBB289:
 1960              	.LBB290:
 732:../drivers/fsl_sdhc.h **** }
 1961              		.loc 2 732 0
 1962 00fc C4F83080 		str	r8, [r4, #48]
 1963              	.LVL228:
 1964              	.LBE290:
 1965              	.LBE289:
 472:../drivers/fsl_sdhc.c ****     {
 1966              		.loc 1 472 0
 1967 0100 002B     		cmp	r3, #0
 1968 0102 EBD0     		beq	.L262
 1969              	.LVL229:
 1970              	.L265:
 1971              	.LBB291:
 1972              	.LBB292:
 732:../drivers/fsl_sdhc.h **** }
 1973              		.loc 2 732 0
 1974 0104 2C4A     		ldr	r2, .L329+16
 1975              	.LVL230:
 1976              	.L328:
 1977              	.LBE292:
 1978              	.LBE291:
 1979              	.LBE284:
 1980              	.LBE283:
 1981              	.LBE282:
 1982              	.LBE281:
 1983              	.LBB313:
 1984              	.LBB280:
 1985              	.LBB279:
 1986              	.LBB278:
 1987 0106 2263     		str	r2, [r4, #48]
 1988              	.LVL231:
 1989 0108 2CE0     		b	.L266
 1990              	.LVL232:
 1991              	.L260:
 1992              	.LBE278:
 1993              	.LBE279:
 1994              	.LBE280:
 1995              	.LBE313:
 1996              	.LBB314:
 1997              	.LBB311:
 1998              	.LBB294:
 1999              	.LBB295:
 558:../drivers/fsl_sdhc.c ****     {
 2000              		.loc 1 558 0
 2001 010a 9A07     		lsls	r2, r3, #30
 560:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 2002              		.loc 1 560 0
 2003 010c 1EBF     		ittt	ne
 2004 010e 23F00303 		bicne	r3, r3, #3
 2005 0112 0433     		addne	r3, r3, #4
 2006 0114 6B60     		strne	r3, [r5, #4]
 564:../drivers/fsl_sdhc.c **** 
 2007              		.loc 1 564 0
 2008 0116 6B68     		ldr	r3, [r5, #4]
 568:../drivers/fsl_sdhc.c ****         {
 2009              		.loc 1 568 0
 2010 0118 DFF8A480 		ldr	r8, .L329+24
 2011              	.LVL233:
 564:../drivers/fsl_sdhc.c **** 
 2012              		.loc 1 564 0
 2013 011c 7B43     		muls	r3, r7, r3
 2014 011e 9F08     		lsrs	r7, r3, #2
 2015              	.LVL234:
 550:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 2016              		.loc 1 550 0
 2017 0120 0022     		movs	r2, #0
 2018              	.LVL235:
 2019              	.L268:
 566:../drivers/fsl_sdhc.c ****     {
 2020              		.loc 1 566 0
 2021 0122 9742     		cmp	r7, r2
 2022 0124 01D8     		bhi	.L312
 2023 0126 0023     		movs	r3, #0
 2024 0128 0EE0     		b	.L271
 2025              	.L312:
 2026              	.LVL236:
 2027              	.LBB296:
 2028              	.LBB297:
 721:../drivers/fsl_sdhc.h **** }
 2029              		.loc 2 721 0
 2030 012a 236B     		ldr	r3, [r4, #48]
 2031              	.LVL237:
 2032              	.LBE297:
 2033              	.LBE296:
 568:../drivers/fsl_sdhc.c ****         {
 2034              		.loc 1 568 0
 2035 012c 13EA080F 		tst	r3, r8
 2036 0130 FBD0     		beq	.L312
 2037              	.LVL238:
 2038              	.LBB298:
 2039              	.LBB299:
 721:../drivers/fsl_sdhc.h **** }
 2040              		.loc 2 721 0
 2041 0132 236B     		ldr	r3, [r4, #48]
 2042              	.LVL239:
 2043              	.LBE299:
 2044              	.LBE298:
 572:../drivers/fsl_sdhc.c ****         {
 2045              		.loc 1 572 0
 2046 0134 13F0B87F 		tst	r3, #24117248
 2047 0138 2FD0     		beq	.L270
 574:../drivers/fsl_sdhc.c ****             {
 2048              		.loc 1 574 0
 2049 013a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 2050 013c 6BBB     		cbnz	r3, .L270
 576:../drivers/fsl_sdhc.c ****             }
 2051              		.loc 1 576 0
 2052 013e 0123     		movs	r3, #1
 2053              	.L277:
 2054              	.LVL240:
 2055              	.LBB300:
 2056              	.LBB301:
 732:../drivers/fsl_sdhc.h **** }
 2057              		.loc 2 732 0
 2058 0140 C4F83080 		str	r8, [r4, #48]
 2059              	.LVL241:
 2060              	.LBE301:
 2061              	.LBE300:
 566:../drivers/fsl_sdhc.c ****     {
 2062              		.loc 1 566 0
 2063 0144 002B     		cmp	r3, #0
 2064 0146 ECD0     		beq	.L268
 2065              	.LVL242:
 2066              	.L271:
 589:../drivers/fsl_sdhc.c ****     {
 2067              		.loc 1 589 0
 2068 0148 1B4A     		ldr	r2, .L329+16
 2069              	.LVL243:
 2070 014a 1146     		mov	r1, r2
 2071              	.L272:
 2072              	.LVL244:
 2073              	.LBB302:
 2074              	.LBB303:
 721:../drivers/fsl_sdhc.h **** }
 2075              		.loc 2 721 0
 2076 014c 206B     		ldr	r0, [r4, #48]
 2077              	.LVL245:
 2078              	.LBE303:
 2079              	.LBE302:
 589:../drivers/fsl_sdhc.c ****     {
 2080              		.loc 1 589 0
 2081 014e 1042     		tst	r0, r2
 2082 0150 FCD0     		beq	.L272
 2083              	.LVL246:
 2084              	.LBB304:
 2085              	.LBB305:
 721:../drivers/fsl_sdhc.h **** }
 2086              		.loc 2 721 0
 2087 0152 226B     		ldr	r2, [r4, #48]
 2088              	.LVL247:
 2089              	.LBE305:
 2090              	.LBE304:
 592:../drivers/fsl_sdhc.c ****     {
 2091              		.loc 1 592 0
 2092 0154 12F0B87F 		tst	r2, #24117248
 2093 0158 03D0     		beq	.L273
 594:../drivers/fsl_sdhc.c ****         {
 2094              		.loc 1 594 0
 2095 015a 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 596:../drivers/fsl_sdhc.c ****         }
 2096              		.loc 1 596 0
 2097 015c 002A     		cmp	r2, #0
 2098 015e 08BF     		it	eq
 2099 0160 0123     		moveq	r3, #1
 2100              	.L273:
 2101              	.LVL248:
 2102              	.LBB306:
 2103              	.LBB307:
 732:../drivers/fsl_sdhc.h **** }
 2104              		.loc 2 732 0
 2105 0162 2163     		str	r1, [r4, #48]
 2106              	.LVL249:
 2107              	.L266:
 2108              	.LBE307:
 2109              	.LBE306:
 2110              	.LBE295:
 2111              	.LBE294:
 2112              	.LBE311:
 2113              	.LBE314:
 2114              	.LBE316:
 2115              	.LBE318:
1285:../drivers/fsl_sdhc.c ****     }
 2116              		.loc 1 1285 0
 2117 0164 40F2A762 		movw	r2, #1703
 2118 0168 002B     		cmp	r3, #0
 2119 016a 18BF     		it	ne
 2120 016c 1646     		movne	r6, r2
 2121 016e A1E7     		b	.L248
 2122              	.LVL250:
 2123              	.L279:
1245:../drivers/fsl_sdhc.c ****     }
 2124              		.loc 1 1245 0
 2125 0170 0426     		movs	r6, #4
 2126 0172 9FE7     		b	.L248
 2127              	.LVL251:
 2128              	.L281:
1281:../drivers/fsl_sdhc.c ****     }
 2129              		.loc 1 1281 0
 2130 0174 40F2A666 		movw	r6, #1702
 2131 0178 9CE7     		b	.L248
 2132              	.LVL252:
 2133              	.L327:
1285:../drivers/fsl_sdhc.c ****     }
 2134              		.loc 1 1285 0
 2135 017a 40F2A766 		movw	r6, #1703
 2136 017e 99E7     		b	.L248
 2137              	.LVL253:
 2138              	.L256:
 2139              	.LBB319:
 2140              	.LBB267:
 621:../drivers/fsl_sdhc.c ****     }
 2141              		.loc 1 621 0
 2142 0180 4146     		mov	r1, r8
 2143 0182 2046     		mov	r0, r4
 2144 0184 FFF7FEFF 		bl	SDHC_ReceiveCommandResponse
 2145              	.LVL254:
 2146 0188 0646     		mov	r6, r0
 2147              	.LVL255:
 2148 018a 7BE7     		b	.L275
 2149              	.LVL256:
 2150              	.L264:
 2151              	.LBE267:
 2152              	.LBE319:
 2153              	.LBB320:
 2154              	.LBB317:
 2155              	.LBB315:
 2156              	.LBB312:
 2157              	.LBB309:
 2158              	.LBB293:
 487:../drivers/fsl_sdhc.c ****         }
 2159              		.loc 1 487 0
 2160 018c 2946     		mov	r1, r5
 2161 018e 2046     		mov	r0, r4
 2162 0190 FFF7FEFF 		bl	SDHC_ReadDataPort
 2163              	.LVL257:
 2164 0194 0023     		movs	r3, #0
 2165 0196 0246     		mov	r2, r0
 2166              	.LVL258:
 2167 0198 B0E7     		b	.L276
 2168              	.LVL259:
 2169              	.L270:
 2170              	.LBE293:
 2171              	.LBE309:
 2172              	.LBB310:
 2173              	.LBB308:
 581:../drivers/fsl_sdhc.c ****         }
 2174              		.loc 1 581 0
 2175 019a 2946     		mov	r1, r5
 2176 019c 2046     		mov	r0, r4
 2177 019e FFF7FEFF 		bl	SDHC_WriteDataPort
 2178              	.LVL260:
 2179 01a2 0023     		movs	r3, #0
 2180 01a4 0246     		mov	r2, r0
 2181              	.LVL261:
 2182 01a6 CBE7     		b	.L277
 2183              	.L330:
 2184              		.align	2
 2185              	.L329:
 2186 01a8 01000F00 		.word	983041
 2187 01ac 02007011 		.word	292552706
 2188 01b0 00007011 		.word	292552704
 2189 01b4 0A007011 		.word	292552714
 2190 01b8 02007001 		.word	24117250
 2191 01bc 20007001 		.word	24117280
 2192 01c0 10007001 		.word	24117264
 2193              	.LBE308:
 2194              	.LBE310:
 2195              	.LBE312:
 2196              	.LBE315:
 2197              	.LBE317:
 2198              	.LBE320:
 2199              		.cfi_endproc
 2200              	.LFE194:
 2202              		.section	.text.SDHC_TransferCreateHandle,"ax",%progbits
 2203              		.align	1
 2204              		.global	SDHC_TransferCreateHandle
 2205              		.syntax unified
 2206              		.thumb
 2207              		.thumb_func
 2208              		.fpu fpv4-sp-d16
 2210              	SDHC_TransferCreateHandle:
 2211              	.LFB195:
1298:../drivers/fsl_sdhc.c ****     assert(handle);
 2212              		.loc 1 1298 0
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 0
 2215              		@ frame_needed = 0, uses_anonymous_args = 0
 2216              	.LVL262:
 2217 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2218              		.cfi_def_cfa_offset 24
 2219              		.cfi_offset 3, -24
 2220              		.cfi_offset 4, -20
 2221              		.cfi_offset 5, -16
 2222              		.cfi_offset 6, -12
 2223              		.cfi_offset 7, -8
 2224              		.cfi_offset 14, -4
1298:../drivers/fsl_sdhc.c ****     assert(handle);
 2225              		.loc 1 1298 0
 2226 0002 0D46     		mov	r5, r1
 2227 0004 1646     		mov	r6, r2
 2228 0006 0446     		mov	r4, r0
1303:../drivers/fsl_sdhc.c **** 
 2229              		.loc 1 1303 0
 2230 0008 2822     		movs	r2, #40
 2231              	.LVL263:
 2232 000a 0021     		movs	r1, #0
 2233              	.LVL264:
 2234 000c 2846     		mov	r0, r5
 2235              	.LVL265:
1298:../drivers/fsl_sdhc.c ****     assert(handle);
 2236              		.loc 1 1298 0
 2237 000e 1F46     		mov	r7, r3
1303:../drivers/fsl_sdhc.c **** 
 2238              		.loc 1 1303 0
 2239 0010 FFF7FEFF 		bl	memset
 2240              	.LVL266:
1306:../drivers/fsl_sdhc.c ****     handle->callback.CardRemoved = callback->CardRemoved;
 2241              		.loc 1 1306 0
 2242 0014 3368     		ldr	r3, [r6]
 2243 0016 2B61     		str	r3, [r5, #16]
1307:../drivers/fsl_sdhc.c ****     handle->callback.SdioInterrupt = callback->SdioInterrupt;
 2244              		.loc 1 1307 0
 2245 0018 7368     		ldr	r3, [r6, #4]
 2246 001a 6B61     		str	r3, [r5, #20]
1308:../drivers/fsl_sdhc.c ****     handle->callback.SdioBlockGap = callback->SdioBlockGap;
 2247              		.loc 1 1308 0
 2248 001c B368     		ldr	r3, [r6, #8]
 2249 001e AB61     		str	r3, [r5, #24]
1309:../drivers/fsl_sdhc.c ****     handle->callback.TransferComplete = callback->TransferComplete;
 2250              		.loc 1 1309 0
 2251 0020 F368     		ldr	r3, [r6, #12]
 2252 0022 EB61     		str	r3, [r5, #28]
1310:../drivers/fsl_sdhc.c ****     handle->userData = userData;
 2253              		.loc 1 1310 0
 2254 0024 3369     		ldr	r3, [r6, #16]
 2255 0026 2B62     		str	r3, [r5, #32]
1311:../drivers/fsl_sdhc.c **** 
 2256              		.loc 1 1311 0
 2257 0028 6F62     		str	r7, [r5, #36]
1314:../drivers/fsl_sdhc.c **** 
 2258              		.loc 1 1314 0
 2259 002a 2046     		mov	r0, r4
 2260 002c FFF7FEFF 		bl	SDHC_GetInstance
 2261              	.LVL267:
 2262 0030 124B     		ldr	r3, .L334
 2263              	.LBB343:
 2264              	.LBB344:
 2265              	.LBB345:
 2266              	.LBB346:
 681:../drivers/fsl_sdhc.h **** }
 2267              		.loc 2 681 0
 2268 0032 1349     		ldr	r1, .L334+4
 2269              	.LBE346:
 2270              	.LBE345:
 2271              	.LBE344:
 2272              	.LBE343:
1314:../drivers/fsl_sdhc.c **** 
 2273              		.loc 1 1314 0
 2274 0034 43F82050 		str	r5, [r3, r0, lsl #2]
 2275              	.LVL268:
 2276              	.LBB368:
 2277              	.LBB367:
 259:../drivers/fsl_sdhc.c **** 
 2278              		.loc 1 259 0
 2279 0038 A56A     		ldr	r5, [r4, #40]
 2280              	.LVL269:
 2281              	.LBB348:
 2282              	.LBB347:
 681:../drivers/fsl_sdhc.h **** }
 2283              		.loc 2 681 0
 2284 003a 626B     		ldr	r2, [r4, #52]
 2285 003c 0A40     		ands	r2, r2, r1
 2286 003e 6263     		str	r2, [r4, #52]
 2287              	.LVL270:
 2288              	.LBE347:
 2289              	.LBE348:
 2290              	.LBB349:
 2291              	.LBB350:
 703:../drivers/fsl_sdhc.h **** }
 2292              		.loc 2 703 0
 2293 0040 A36B     		ldr	r3, [r4, #56]
 2294              	.LVL271:
 2295 0042 0B40     		ands	r3, r3, r1
 2296              	.LBE350:
 2297              	.LBE349:
 2298              	.LBB352:
 2299              	.LBB353:
 2300              	.LBB354:
 2301              		.loc 4 1712 0
 2302 0044 0F49     		ldr	r1, .L334+8
 2303              	.LBE354:
 2304              	.LBE353:
 2305              	.LBE352:
 2306              	.LBB361:
 2307              	.LBB351:
 703:../drivers/fsl_sdhc.h **** }
 2308              		.loc 2 703 0
 2309 0046 A363     		str	r3, [r4, #56]
 2310              	.LVL272:
 2311              	.LBE351:
 2312              	.LBE361:
 2313              	.LBB362:
 2314              	.LBB360:
 2315              	.LBB359:
 2316              		.loc 4 1712 0
 2317 0048 4FF40030 		mov	r0, #131072
 2318              	.LVL273:
 2319 004c C1F88800 		str	r0, [r1, #136]
 2320              	.LBB355:
 2321              	.LBB356:
 2322              		.loc 5 833 0
 2323              		.syntax unified
 2324              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2325 0050 BFF34F8F 		dsb 0xF
 2326              	@ 0 "" 2
 2327              		.thumb
 2328              		.syntax unified
 2329              	.LBE356:
 2330              	.LBE355:
 2331              	.LBB357:
 2332              	.LBB358:
 822:../CMSIS/cmsis_gcc.h **** }
 2333              		.loc 5 822 0
 2334              		.syntax unified
 2335              	@ 822 "../CMSIS/cmsis_gcc.h" 1
 2336 0054 BFF36F8F 		isb 0xF
 2337              	@ 0 "" 2
 2338              	.LVL274:
 2339              		.thumb
 2340              		.syntax unified
 2341              	.LBE358:
 2342              	.LBE357:
 2343              	.LBE359:
 2344              	.LBE360:
 2345              	.LBE362:
 273:../drivers/fsl_sdhc.c ****     }
 2346              		.loc 1 273 0
 2347 0058 0B4A     		ldr	r2, .L334+12
 2348 005a 0C4B     		ldr	r3, .L334+16
 271:../drivers/fsl_sdhc.c ****     {
 2349              		.loc 1 271 0
 2350 005c 15F0080F 		tst	r5, #8
 273:../drivers/fsl_sdhc.c ****     }
 2351              		.loc 1 273 0
 2352 0060 18BF     		it	ne
 2353 0062 1346     		movne	r3, r2
 2354              	.LVL275:
 2355              	.LBB363:
 2356              	.LBB364:
 670:../drivers/fsl_sdhc.h **** }
 2357              		.loc 2 670 0
 2358 0064 626B     		ldr	r2, [r4, #52]
 2359 0066 1A43     		orrs	r2, r2, r3
 2360 0068 6263     		str	r2, [r4, #52]
 2361              	.LVL276:
 2362              	.LBE364:
 2363              	.LBE363:
 2364              	.LBB365:
 2365              	.LBB366:
 692:../drivers/fsl_sdhc.h **** }
 2366              		.loc 2 692 0
 2367 006a A26B     		ldr	r2, [r4, #56]
 2368 006c 1343     		orrs	r3, r3, r2
 2369              	.LVL277:
 2370 006e A363     		str	r3, [r4, #56]
 2371              	.LVL278:
 2372              	.LBE366:
 2373              	.LBE365:
 2374              	.LBE367:
 2375              	.LBE368:
1320:../drivers/fsl_sdhc.c **** 
 2376              		.loc 1 1320 0
 2377 0070 074B     		ldr	r3, .L334+20
 2378 0072 084A     		ldr	r2, .L334+24
 2379 0074 1A60     		str	r2, [r3]
 2380              	.LVL279:
 2381              	.LBB369:
 2382              	.LBB370:
 2383              	.LBB371:
1676:../CMSIS/core_cm4.h ****   }
 2384              		.loc 4 1676 0
 2385 0076 8860     		str	r0, [r1, #8]
 2386              	.LVL280:
 2387 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2388              	.LVL281:
 2389              	.L335:
 2390 007a 00BF     		.align	2
 2391              	.L334:
 2392 007c 00000000 		.word	.LANCHOR1
 2393 0080 C0FE80EE 		.word	-293536064
 2394 0084 00E100E0 		.word	-536813312
 2395 0088 FB007F11 		.word	293535995
 2396 008c 3B007F11 		.word	293535803
 2397 0090 00000000 		.word	.LANCHOR2
 2398 0094 00000000 		.word	SDHC_TransferHandleIRQ
 2399              	.LBE371:
 2400              	.LBE370:
 2401              	.LBE369:
 2402              		.cfi_endproc
 2403              	.LFE195:
 2405              		.section	.text.SDHC_TransferNonBlocking,"ax",%progbits
 2406              		.align	1
 2407              		.global	SDHC_TransferNonBlocking
 2408              		.syntax unified
 2409              		.thumb
 2410              		.thumb_func
 2411              		.fpu fpv4-sp-d16
 2413              	SDHC_TransferNonBlocking:
 2414              	.LFB196:
1327:../drivers/fsl_sdhc.c ****     assert(transfer);
 2415              		.loc 1 1327 0
 2416              		.cfi_startproc
 2417              		@ args = 4, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419              	.LVL282:
 2420 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 2421              		.cfi_def_cfa_offset 40
 2422              		.cfi_offset 4, -28
 2423              		.cfi_offset 5, -24
 2424              		.cfi_offset 6, -20
 2425              		.cfi_offset 7, -16
 2426              		.cfi_offset 8, -12
 2427              		.cfi_offset 9, -8
 2428              		.cfi_offset 14, -4
1327:../drivers/fsl_sdhc.c ****     assert(transfer);
 2429              		.loc 1 1327 0
 2430 0004 8846     		mov	r8, r1
 2431 0006 0A99     		ldr	r1, [sp, #40]
 2432              	.LVL283:
1330:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 2433              		.loc 1 1330 0
 2434 0008 876A     		ldr	r7, [r0, #40]
 2435              	.LVL284:
1332:../drivers/fsl_sdhc.c ****     sdhc_data_t *data = transfer->data;
 2436              		.loc 1 1332 0
 2437 000a D1F80490 		ldr	r9, [r1, #4]
 2438              	.LVL285:
1327:../drivers/fsl_sdhc.c ****     assert(transfer);
 2439              		.loc 1 1327 0
 2440 000e 0546     		mov	r5, r0
1336:../drivers/fsl_sdhc.c ****     {
 2441              		.loc 1 1336 0
 2442 0010 B9F1000F 		cmp	r9, #0
 2443 0014 3DD0     		beq	.L343
1333:../drivers/fsl_sdhc.c **** 
 2444              		.loc 1 1333 0 discriminator 1
 2445 0016 0E68     		ldr	r6, [r1]
1336:../drivers/fsl_sdhc.c ****     {
 2446              		.loc 1 1336 0 discriminator 1
 2447 0018 1EB1     		cbz	r6, .L338
1336:../drivers/fsl_sdhc.c ****     {
 2448              		.loc 1 1336 0 is_stmt 0 discriminator 2
 2449 001a B168     		ldr	r1, [r6, #8]
 2450              	.LVL286:
 2451 001c B1F5803F 		cmp	r1, #65536
 2452 0020 37D2     		bcs	.L343
 2453              	.L338:
 2454              	.LVL287:
 2455              	.LBB372:
 2456              	.LBB373:
 767:../drivers/fsl_sdhc.h **** }
 2457              		.loc 2 767 0 is_stmt 1
 2458 0022 696A     		ldr	r1, [r5, #36]
 2459              	.LVL288:
 2460              	.LBE373:
 2461              	.LBE372:
1342:../drivers/fsl_sdhc.c ****         (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag)))
 2462              		.loc 1 1342 0
 2463 0024 C807     		lsls	r0, r1, #31
 2464              	.LVL289:
 2465 0026 36D4     		bmi	.L345
1330:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 2466              		.loc 1 1330 0 discriminator 1
 2467 0028 C7F30127 		ubfx	r7, r7, #8, #2
 2468              	.LVL290:
1342:../drivers/fsl_sdhc.c ****         (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag)))
 2469              		.loc 1 1342 0 discriminator 1
 2470 002c DEB1     		cbz	r6, .L339
 2471              	.LVL291:
 2472              	.LBB374:
 2473              	.LBB375:
 767:../drivers/fsl_sdhc.h **** }
 2474              		.loc 2 767 0
 2475 002e 696A     		ldr	r1, [r5, #36]
 2476              	.LVL292:
 2477              	.LBE375:
 2478              	.LBE374:
1343:../drivers/fsl_sdhc.c ****     {
 2479              		.loc 1 1343 0
 2480 0030 8907     		lsls	r1, r1, #30
 2481 0032 30D4     		bmi	.L345
1349:../drivers/fsl_sdhc.c ****     {
 2482              		.loc 1 1349 0 discriminator 1
 2483 0034 BAB1     		cbz	r2, .L339
1353:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
 2484              		.loc 1 1353 0
 2485 0036 F168     		ldr	r1, [r6, #12]
1352:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 2486              		.loc 1 1352 0
 2487 0038 01B9     		cbnz	r1, .L340
1352:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 2488              		.loc 1 1352 0 is_stmt 0 discriminator 2
 2489 003a 3169     		ldr	r1, [r6, #16]
 2490              	.L340:
1352:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 2491              		.loc 1 1352 0
 2492 003c B468     		ldr	r4, [r6, #8]
 2493 003e 7068     		ldr	r0, [r6, #4]
1351:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 2494              		.loc 1 1351 0 is_stmt 1
 2495 0040 0091     		str	r1, [sp]
1352:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 2496              		.loc 1 1352 0
 2497 0042 6043     		muls	r0, r4, r0
1351:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 2498              		.loc 1 1351 0
 2499 0044 0190     		str	r0, [sp, #4]
 2500 0046 3946     		mov	r1, r7
 2501 0048 2846     		mov	r0, r5
 2502 004a FFF7FEFF 		bl	SDHC_SetAdmaTableConfig
 2503              	.LVL293:
1355:../drivers/fsl_sdhc.c ****         {
 2504              		.loc 1 1355 0
 2505 004e B0F5D56F 		cmp	r0, #1704
 2506 0052 19D1     		bne	.L341
 2507              	.LVL294:
 2508              	.LBB376:
 2509              	.LBB377:
 692:../drivers/fsl_sdhc.h **** }
 2510              		.loc 2 692 0
 2511 0054 AB6B     		ldr	r3, [r5, #56]
 2512 0056 43F03003 		orr	r3, r3, #48
 2513 005a AB63     		str	r3, [r5, #56]
 2514              	.LVL295:
 2515              	.LBE377:
 2516              	.LBE376:
 2517              	.LBB378:
 2518              	.LBB379:
 670:../drivers/fsl_sdhc.h **** }
 2519              		.loc 2 670 0
 2520 005c 6B6B     		ldr	r3, [r5, #52]
 2521 005e 43F03003 		orr	r3, r3, #48
 2522 0062 6B63     		str	r3, [r5, #52]
 2523              	.LBE379:
 2524              	.LBE378:
1358:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
 2525              		.loc 1 1358 0
 2526 0064 0027     		movs	r7, #0
 2527              	.LVL296:
 2528              	.L339:
1374:../drivers/fsl_sdhc.c ****     /* transferredWords will only be updated in ISR when transfer way is DATAPORT. */
 2529              		.loc 1 1374 0
 2530 0066 0024     		movs	r4, #0
1372:../drivers/fsl_sdhc.c ****     handle->data = data;
 2531              		.loc 1 1372 0
 2532 0068 C8F80490 		str	r9, [r8, #4]
1378:../drivers/fsl_sdhc.c **** 
 2533              		.loc 1 1378 0
 2534 006c 2846     		mov	r0, r5
1373:../drivers/fsl_sdhc.c ****     handle->interruptFlags = 0U;
 2535              		.loc 1 1373 0
 2536 006e C8F80060 		str	r6, [r8]
1378:../drivers/fsl_sdhc.c **** 
 2537              		.loc 1 1378 0
 2538 0072 3B46     		mov	r3, r7
1374:../drivers/fsl_sdhc.c ****     /* transferredWords will only be updated in ISR when transfer way is DATAPORT. */
 2539              		.loc 1 1374 0
 2540 0074 C8F80840 		str	r4, [r8, #8]
1378:../drivers/fsl_sdhc.c **** 
 2541              		.loc 1 1378 0
 2542 0078 3246     		mov	r2, r6
1376:../drivers/fsl_sdhc.c **** 
 2543              		.loc 1 1376 0
 2544 007a C8F80C40 		str	r4, [r8, #12]
1378:../drivers/fsl_sdhc.c **** 
 2545              		.loc 1 1378 0
 2546 007e 4946     		mov	r1, r9
 2547 0080 FFF7FEFF 		bl	SDHC_StartTransfer
 2548              	.LVL297:
1380:../drivers/fsl_sdhc.c **** }
 2549              		.loc 1 1380 0
 2550 0084 2046     		mov	r0, r4
 2551 0086 01E0     		b	.L336
 2552              	.LVL298:
 2553              	.L341:
1362:../drivers/fsl_sdhc.c ****         {
 2554              		.loc 1 1362 0
 2555 0088 0028     		cmp	r0, #0
 2556 008a ECD0     		beq	.L339
 2557              	.LVL299:
 2558              	.L336:
1381:../drivers/fsl_sdhc.c **** 
 2559              		.loc 1 1381 0
 2560 008c 03B0     		add	sp, sp, #12
 2561              		.cfi_remember_state
 2562              		.cfi_def_cfa_offset 28
 2563              		@ sp needed
 2564 008e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2565              	.LVL300:
 2566              	.L343:
 2567              		.cfi_restore_state
1338:../drivers/fsl_sdhc.c ****     }
 2568              		.loc 1 1338 0
 2569 0092 0420     		movs	r0, #4
 2570              	.LVL301:
 2571 0094 FAE7     		b	.L336
 2572              	.LVL302:
 2573              	.L345:
1345:../drivers/fsl_sdhc.c ****     }
 2574              		.loc 1 1345 0
 2575 0096 40F2A460 		movw	r0, #1700
 2576 009a F7E7     		b	.L336
 2577              		.cfi_endproc
 2578              	.LFE196:
 2580              		.section	.text.SDHC_DriverIRQHandler,"ax",%progbits
 2581              		.align	1
 2582              		.global	SDHC_DriverIRQHandler
 2583              		.syntax unified
 2584              		.thumb
 2585              		.thumb_func
 2586              		.fpu fpv4-sp-d16
 2588              	SDHC_DriverIRQHandler:
 2589              	.LFB198:
1409:../drivers/fsl_sdhc.c ****     {
1410:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleSdioBlockGap(base, handle);
1411:../drivers/fsl_sdhc.c ****     }
1412:../drivers/fsl_sdhc.c **** 
1413:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, interruptFlags);
1414:../drivers/fsl_sdhc.c **** }
1415:../drivers/fsl_sdhc.c **** 
1416:../drivers/fsl_sdhc.c **** #if defined(SDHC)
1417:../drivers/fsl_sdhc.c **** void SDHC_DriverIRQHandler(void)
1418:../drivers/fsl_sdhc.c **** {
 2590              		.loc 1 1418 0
 2591              		.cfi_startproc
 2592              		@ args = 0, pretend = 0, frame = 0
 2593              		@ frame_needed = 0, uses_anonymous_args = 0
 2594 0000 08B5     		push	{r3, lr}
 2595              		.cfi_def_cfa_offset 8
 2596              		.cfi_offset 3, -8
 2597              		.cfi_offset 14, -4
1419:../drivers/fsl_sdhc.c ****     assert(s_sdhcHandle[0]);
1420:../drivers/fsl_sdhc.c **** 
1421:../drivers/fsl_sdhc.c ****     s_sdhcIsr(SDHC, s_sdhcHandle[0]);
 2598              		.loc 1 1421 0
 2599 0002 044A     		ldr	r2, .L357
 2600 0004 044B     		ldr	r3, .L357+4
 2601 0006 1168     		ldr	r1, [r2]
 2602 0008 1B68     		ldr	r3, [r3]
 2603 000a 0448     		ldr	r0, .L357+8
 2604 000c 9847     		blx	r3
 2605              	.LVL303:
 2606              	.LBB380:
 2607              	.LBB381:
 2608              		.loc 5 833 0
 2609              		.syntax unified
 2610              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2611 000e BFF34F8F 		dsb 0xF
 2612              	@ 0 "" 2
 2613              		.thumb
 2614              		.syntax unified
 2615 0012 08BD     		pop	{r3, pc}
 2616              	.L358:
 2617              		.align	2
 2618              	.L357:
 2619 0014 00000000 		.word	.LANCHOR1
 2620 0018 00000000 		.word	.LANCHOR2
 2621 001c 00100B40 		.word	1074466816
 2622              	.LBE381:
 2623              	.LBE380:
 2624              		.cfi_endproc
 2625              	.LFE198:
 2627              		.section	.bss.s_sdhcHandle,"aw",%nobits
 2628              		.align	2
 2629              		.set	.LANCHOR1,. + 0
 2632              	s_sdhcHandle:
 2633 0000 00000000 		.space	4
 2634              		.section	.bss.s_sdhcIsr,"aw",%nobits
 2635              		.align	2
 2636              		.set	.LANCHOR2,. + 0
 2639              	s_sdhcIsr:
 2640 0000 00000000 		.space	4
 2641              		.section	.rodata.CSWTCH.59,"a",%progbits
 2642              		.align	2
 2643              		.set	.LANCHOR0,. + 0
 2646              	CSWTCH.59:
 2647 0000 00001A00 		.word	1703936
 2648 0004 00001B00 		.word	1769472
 2649 0008 00000900 		.word	589824
 2650 000c 00000200 		.word	131072
 2651 0010 00000200 		.word	131072
 2652 0014 00001A00 		.word	1703936
 2653 0018 00001B00 		.word	1769472
 2654 001c 00001A00 		.word	1703936
 2655 0020 00001A00 		.word	1703936
 2656              		.text
 2657              	.Letext0:
 2658              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 2659              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 2660              		.file 8 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 2661              		.file 9 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 2662              		.file 10 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 2663              		.file 11 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 2664              		.file 12 "../CMSIS/MK64F12.h"
 2665              		.file 13 "../CMSIS/system_MK64F12.h"
 2666              		.file 14 "../drivers/fsl_common.h"
