   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_sdhc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SDHC_ReceiveCommandResponse,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	SDHC_ReceiveCommandResponse:
  25              	.LFB170:
  26              		.file 1 "../drivers/fsl_sdhc.c"
   1:../drivers/fsl_sdhc.c **** /*
   2:../drivers/fsl_sdhc.c ****  * The Clear BSD License
   3:../drivers/fsl_sdhc.c ****  * Copyright (c) 2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_sdhc.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_sdhc.c ****  * All rights reserved.
   6:../drivers/fsl_sdhc.c ****  *
   7:../drivers/fsl_sdhc.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_sdhc.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_sdhc.c ****  * that the following conditions are met:
  10:../drivers/fsl_sdhc.c ****  *
  11:../drivers/fsl_sdhc.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_sdhc.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_sdhc.c ****  *
  14:../drivers/fsl_sdhc.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_sdhc.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_sdhc.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_sdhc.c ****  *
  18:../drivers/fsl_sdhc.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_sdhc.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_sdhc.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_sdhc.c ****  *
  22:../drivers/fsl_sdhc.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_sdhc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_sdhc.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_sdhc.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_sdhc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_sdhc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_sdhc.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_sdhc.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_sdhc.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_sdhc.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_sdhc.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_sdhc.c ****  */
  34:../drivers/fsl_sdhc.c **** 
  35:../drivers/fsl_sdhc.c **** #include "fsl_sdhc.h"
  36:../drivers/fsl_sdhc.c **** 
  37:../drivers/fsl_sdhc.c **** /*******************************************************************************
  38:../drivers/fsl_sdhc.c ****  * Definitions
  39:../drivers/fsl_sdhc.c ****  ******************************************************************************/
  40:../drivers/fsl_sdhc.c **** /*! @brief Clock setting */
  41:../drivers/fsl_sdhc.c **** /* Max SD clock divisor from base clock */
  42:../drivers/fsl_sdhc.c **** #define SDHC_MAX_DVS ((SDHC_SYSCTL_DVS_MASK >> SDHC_SYSCTL_DVS_SHIFT) + 1U)
  43:../drivers/fsl_sdhc.c **** #define SDHC_PREV_DVS(x) ((x) -= 1U)
  44:../drivers/fsl_sdhc.c **** #define SDHC_MAX_CLKFS ((SDHC_SYSCTL_SDCLKFS_MASK >> SDHC_SYSCTL_SDCLKFS_SHIFT) + 1U)
  45:../drivers/fsl_sdhc.c **** #define SDHC_PREV_CLKFS(x) ((x) >>= 1U)
  46:../drivers/fsl_sdhc.c **** 
  47:../drivers/fsl_sdhc.c **** /* Typedef for interrupt handler. */
  48:../drivers/fsl_sdhc.c **** typedef void (*sdhc_isr_t)(SDHC_Type *base, sdhc_handle_t *handle);
  49:../drivers/fsl_sdhc.c **** 
  50:../drivers/fsl_sdhc.c **** /*! @brief ADMA table configuration */
  51:../drivers/fsl_sdhc.c **** typedef struct _sdhc_adma_table_config
  52:../drivers/fsl_sdhc.c **** {
  53:../drivers/fsl_sdhc.c ****     uint32_t *admaTable;     /*!< ADMA table address, can't be null if transfer way is ADMA1/ADMA2 
  54:../drivers/fsl_sdhc.c ****     uint32_t admaTableWords; /*!< ADMA table length united as words, can't be 0 if transfer way is 
  55:../drivers/fsl_sdhc.c **** } sdhc_adma_table_config_t;
  56:../drivers/fsl_sdhc.c **** 
  57:../drivers/fsl_sdhc.c **** /*******************************************************************************
  58:../drivers/fsl_sdhc.c ****  * Prototypes
  59:../drivers/fsl_sdhc.c ****  ******************************************************************************/
  60:../drivers/fsl_sdhc.c **** /*!
  61:../drivers/fsl_sdhc.c ****  * @brief Get the instance.
  62:../drivers/fsl_sdhc.c ****  *
  63:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  64:../drivers/fsl_sdhc.c ****  * @return Instance number.
  65:../drivers/fsl_sdhc.c ****  */
  66:../drivers/fsl_sdhc.c **** static uint32_t SDHC_GetInstance(SDHC_Type *base);
  67:../drivers/fsl_sdhc.c **** 
  68:../drivers/fsl_sdhc.c **** /*!
  69:../drivers/fsl_sdhc.c ****  * @brief Set transfer interrupt.
  70:../drivers/fsl_sdhc.c ****  *
  71:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  72:../drivers/fsl_sdhc.c ****  * @param usingInterruptSignal True to use IRQ signal.
  73:../drivers/fsl_sdhc.c ****  */
  74:../drivers/fsl_sdhc.c **** static void SDHC_SetTransferInterrupt(SDHC_Type *base, bool usingInterruptSignal);
  75:../drivers/fsl_sdhc.c **** 
  76:../drivers/fsl_sdhc.c **** /*!
  77:../drivers/fsl_sdhc.c ****  * @brief Start transfer according to current transfer state
  78:../drivers/fsl_sdhc.c ****  *
  79:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  80:../drivers/fsl_sdhc.c ****  * @param command Command to be sent.
  81:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
  82:../drivers/fsl_sdhc.c ****  * @param DMA mode selection
  83:../drivers/fsl_sdhc.c ****  */
  84:../drivers/fsl_sdhc.c **** static void SDHC_StartTransfer(SDHC_Type *base, sdhc_command_t *command, sdhc_data_t *data, sdhc_dm
  85:../drivers/fsl_sdhc.c **** 
  86:../drivers/fsl_sdhc.c **** /*!
  87:../drivers/fsl_sdhc.c ****  * @brief Receive command response
  88:../drivers/fsl_sdhc.c ****  *
  89:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  90:../drivers/fsl_sdhc.c ****  * @param command Command to be sent.
  91:../drivers/fsl_sdhc.c ****  */
  92:../drivers/fsl_sdhc.c **** static status_t SDHC_ReceiveCommandResponse(SDHC_Type *base, sdhc_command_t *command);
  93:../drivers/fsl_sdhc.c **** 
  94:../drivers/fsl_sdhc.c **** /*!
  95:../drivers/fsl_sdhc.c ****  * @brief Read DATAPORT when buffer enable bit is set.
  96:../drivers/fsl_sdhc.c ****  *
  97:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
  98:../drivers/fsl_sdhc.c ****  * @param data Data to be read.
  99:../drivers/fsl_sdhc.c ****  * @param transferredWords The number of data words have been transferred last time transaction.
 100:../drivers/fsl_sdhc.c ****  * @return The number of total data words have been transferred after this time transaction.
 101:../drivers/fsl_sdhc.c ****  */
 102:../drivers/fsl_sdhc.c **** static uint32_t SDHC_ReadDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords);
 103:../drivers/fsl_sdhc.c **** 
 104:../drivers/fsl_sdhc.c **** /*!
 105:../drivers/fsl_sdhc.c ****  * @brief Read data by using DATAPORT polling way.
 106:../drivers/fsl_sdhc.c ****  *
 107:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 108:../drivers/fsl_sdhc.c ****  * @param data Data to be read.
 109:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Read DATAPORT failed.
 110:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 111:../drivers/fsl_sdhc.c ****  */
 112:../drivers/fsl_sdhc.c **** static status_t SDHC_ReadByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data);
 113:../drivers/fsl_sdhc.c **** 
 114:../drivers/fsl_sdhc.c **** /*!
 115:../drivers/fsl_sdhc.c ****  * @brief Write DATAPORT when buffer enable bit is set.
 116:../drivers/fsl_sdhc.c ****  *
 117:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 118:../drivers/fsl_sdhc.c ****  * @param data Data to be read.
 119:../drivers/fsl_sdhc.c ****  * @param transferredWords The number of data words have been transferred last time.
 120:../drivers/fsl_sdhc.c ****  * @return The number of total data words have been transferred after this time transaction.
 121:../drivers/fsl_sdhc.c ****  */
 122:../drivers/fsl_sdhc.c **** static uint32_t SDHC_WriteDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords);
 123:../drivers/fsl_sdhc.c **** 
 124:../drivers/fsl_sdhc.c **** /*!
 125:../drivers/fsl_sdhc.c ****  * @brief Write data by using DATAPORT polling way.
 126:../drivers/fsl_sdhc.c ****  *
 127:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 128:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 129:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Write DATAPORT failed.
 130:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 131:../drivers/fsl_sdhc.c ****  */
 132:../drivers/fsl_sdhc.c **** static status_t SDHC_WriteByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data);
 133:../drivers/fsl_sdhc.c **** 
 134:../drivers/fsl_sdhc.c **** /*!
 135:../drivers/fsl_sdhc.c ****  * @brief Send command by using polling way.
 136:../drivers/fsl_sdhc.c ****  *
 137:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 138:../drivers/fsl_sdhc.c ****  * @param command Command to be sent.
 139:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Send command failed.
 140:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 141:../drivers/fsl_sdhc.c ****  */
 142:../drivers/fsl_sdhc.c **** static status_t SDHC_SendCommandBlocking(SDHC_Type *base, sdhc_command_t *command);
 143:../drivers/fsl_sdhc.c **** 
 144:../drivers/fsl_sdhc.c **** /*!
 145:../drivers/fsl_sdhc.c ****  * @brief Transfer data by DATAPORT and polling way.
 146:../drivers/fsl_sdhc.c ****  *
 147:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 148:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 149:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Transfer data failed.
 150:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 151:../drivers/fsl_sdhc.c ****  */
 152:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data);
 153:../drivers/fsl_sdhc.c **** 
 154:../drivers/fsl_sdhc.c **** /*!
 155:../drivers/fsl_sdhc.c ****  * @brief Transfer data by ADMA2 and polling way.
 156:../drivers/fsl_sdhc.c ****  *
 157:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 158:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 159:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Transfer data failed.
 160:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 161:../drivers/fsl_sdhc.c ****  */
 162:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByAdma2Blocking(SDHC_Type *base, sdhc_data_t *data);
 163:../drivers/fsl_sdhc.c **** 
 164:../drivers/fsl_sdhc.c **** /*!
 165:../drivers/fsl_sdhc.c ****  * @brief Transfer data by polling way.
 166:../drivers/fsl_sdhc.c ****  *
 167:../drivers/fsl_sdhc.c ****  * @param dmaMode DMA mode.
 168:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 169:../drivers/fsl_sdhc.c ****  * @param data Data to be transferred.
 170:../drivers/fsl_sdhc.c ****  * @retval kStatus_Fail Transfer data failed.
 171:../drivers/fsl_sdhc.c ****  * @retval kStatus_InvalidArgument Argument is invalid.
 172:../drivers/fsl_sdhc.c ****  * @retval kStatus_Success Operate successfully.
 173:../drivers/fsl_sdhc.c ****  */
 174:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferDataBlocking(sdhc_dma_mode_t dmaMode, SDHC_Type *base, sdhc_data_t *da
 175:../drivers/fsl_sdhc.c **** 
 176:../drivers/fsl_sdhc.c **** /*!
 177:../drivers/fsl_sdhc.c ****  * @brief Handle card detect interrupt.
 178:../drivers/fsl_sdhc.c ****  *
 179:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 180:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 181:../drivers/fsl_sdhc.c ****  * @param interruptFlags Card detect related interrupt flags.
 182:../drivers/fsl_sdhc.c ****  */
 183:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCardDetect(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interrup
 184:../drivers/fsl_sdhc.c **** 
 185:../drivers/fsl_sdhc.c **** /*!
 186:../drivers/fsl_sdhc.c ****  * @brief Handle command interrupt.
 187:../drivers/fsl_sdhc.c ****  *
 188:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 189:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 190:../drivers/fsl_sdhc.c ****  * @param interruptFlags Command related interrupt flags.
 191:../drivers/fsl_sdhc.c ****  */
 192:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCommand(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFl
 193:../drivers/fsl_sdhc.c **** 
 194:../drivers/fsl_sdhc.c **** /*!
 195:../drivers/fsl_sdhc.c ****  * @brief Handle data interrupt.
 196:../drivers/fsl_sdhc.c ****  *
 197:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 198:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 199:../drivers/fsl_sdhc.c ****  * @param interruptFlags Data related interrupt flags.
 200:../drivers/fsl_sdhc.c ****  */
 201:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleData(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFlags
 202:../drivers/fsl_sdhc.c **** 
 203:../drivers/fsl_sdhc.c **** /*!
 204:../drivers/fsl_sdhc.c ****  * @brief Handle SDIO card interrupt signal.
 205:../drivers/fsl_sdhc.c ****  *
 206:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 207:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 208:../drivers/fsl_sdhc.c ****  */
 209:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioInterrupt(SDHC_Type *base, sdhc_handle_t *handle);
 210:../drivers/fsl_sdhc.c **** 
 211:../drivers/fsl_sdhc.c **** /*!
 212:../drivers/fsl_sdhc.c ****  * @brief Handle SDIO block gap event.
 213:../drivers/fsl_sdhc.c ****  *
 214:../drivers/fsl_sdhc.c ****  * @param base SDHC peripheral base address.
 215:../drivers/fsl_sdhc.c ****  * @param handle SDHC handle.
 216:../drivers/fsl_sdhc.c ****  */
 217:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioBlockGap(SDHC_Type *base, sdhc_handle_t *handle);
 218:../drivers/fsl_sdhc.c **** 
 219:../drivers/fsl_sdhc.c **** /*******************************************************************************
 220:../drivers/fsl_sdhc.c ****  * Variables
 221:../drivers/fsl_sdhc.c ****  ******************************************************************************/
 222:../drivers/fsl_sdhc.c **** /*! @brief SDHC internal handle pointer array */
 223:../drivers/fsl_sdhc.c **** static sdhc_handle_t *s_sdhcHandle[FSL_FEATURE_SOC_SDHC_COUNT];
 224:../drivers/fsl_sdhc.c **** 
 225:../drivers/fsl_sdhc.c **** /*! @brief SDHC base pointer array */
 226:../drivers/fsl_sdhc.c **** static SDHC_Type *const s_sdhcBase[] = SDHC_BASE_PTRS;
 227:../drivers/fsl_sdhc.c **** 
 228:../drivers/fsl_sdhc.c **** /*! @brief SDHC IRQ name array */
 229:../drivers/fsl_sdhc.c **** static const IRQn_Type s_sdhcIRQ[] = SDHC_IRQS;
 230:../drivers/fsl_sdhc.c **** 
 231:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 232:../drivers/fsl_sdhc.c **** /*! @brief SDHC clock array name */
 233:../drivers/fsl_sdhc.c **** static const clock_ip_name_t s_sdhcClock[] = SDHC_CLOCKS;
 234:../drivers/fsl_sdhc.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 235:../drivers/fsl_sdhc.c **** 
 236:../drivers/fsl_sdhc.c **** /* SDHC ISR for transactional APIs. */
 237:../drivers/fsl_sdhc.c **** static sdhc_isr_t s_sdhcIsr;
 238:../drivers/fsl_sdhc.c **** 
 239:../drivers/fsl_sdhc.c **** /*******************************************************************************
 240:../drivers/fsl_sdhc.c ****  * Code
 241:../drivers/fsl_sdhc.c ****  ******************************************************************************/
 242:../drivers/fsl_sdhc.c **** static uint32_t SDHC_GetInstance(SDHC_Type *base)
 243:../drivers/fsl_sdhc.c **** {
 244:../drivers/fsl_sdhc.c ****     uint8_t instance = 0;
 245:../drivers/fsl_sdhc.c **** 
 246:../drivers/fsl_sdhc.c ****     while ((instance < ARRAY_SIZE(s_sdhcBase)) && (s_sdhcBase[instance] != base))
 247:../drivers/fsl_sdhc.c ****     {
 248:../drivers/fsl_sdhc.c ****         instance++;
 249:../drivers/fsl_sdhc.c ****     }
 250:../drivers/fsl_sdhc.c **** 
 251:../drivers/fsl_sdhc.c ****     assert(instance < ARRAY_SIZE(s_sdhcBase));
 252:../drivers/fsl_sdhc.c **** 
 253:../drivers/fsl_sdhc.c ****     return instance;
 254:../drivers/fsl_sdhc.c **** }
 255:../drivers/fsl_sdhc.c **** 
 256:../drivers/fsl_sdhc.c **** static void SDHC_SetTransferInterrupt(SDHC_Type *base, bool usingInterruptSignal)
 257:../drivers/fsl_sdhc.c **** {
 258:../drivers/fsl_sdhc.c ****     uint32_t interruptEnabled; /* The Interrupt status flags to be enabled */
 259:../drivers/fsl_sdhc.c ****     bool cardDetectDat3 = (bool)(base->PROCTL & SDHC_PROCTL_D3CD_MASK);
 260:../drivers/fsl_sdhc.c **** 
 261:../drivers/fsl_sdhc.c ****     /* Disable all interrupts */
 262:../drivers/fsl_sdhc.c ****     SDHC_DisableInterruptStatus(base, (uint32_t)kSDHC_AllInterruptFlags);
 263:../drivers/fsl_sdhc.c ****     SDHC_DisableInterruptSignal(base, (uint32_t)kSDHC_AllInterruptFlags);
 264:../drivers/fsl_sdhc.c ****     DisableIRQ(s_sdhcIRQ[SDHC_GetInstance(base)]);
 265:../drivers/fsl_sdhc.c **** 
 266:../drivers/fsl_sdhc.c ****     interruptEnabled =
 267:../drivers/fsl_sdhc.c ****         (kSDHC_CommandIndexErrorFlag | kSDHC_CommandCrcErrorFlag | kSDHC_CommandEndBitErrorFlag |
 268:../drivers/fsl_sdhc.c ****          kSDHC_CommandTimeoutFlag | kSDHC_CommandCompleteFlag | kSDHC_DataTimeoutFlag | kSDHC_DataC
 269:../drivers/fsl_sdhc.c ****          kSDHC_DataEndBitErrorFlag | kSDHC_DataCompleteFlag | kSDHC_AutoCommand12ErrorFlag | kSDHC_
 270:../drivers/fsl_sdhc.c ****          kSDHC_BufferWriteReadyFlag | kSDHC_DmaErrorFlag | kSDHC_DmaCompleteFlag);
 271:../drivers/fsl_sdhc.c ****     if (cardDetectDat3)
 272:../drivers/fsl_sdhc.c ****     {
 273:../drivers/fsl_sdhc.c ****         interruptEnabled |= (kSDHC_CardInsertionFlag | kSDHC_CardRemovalFlag);
 274:../drivers/fsl_sdhc.c ****     }
 275:../drivers/fsl_sdhc.c **** 
 276:../drivers/fsl_sdhc.c ****     SDHC_EnableInterruptStatus(base, interruptEnabled);
 277:../drivers/fsl_sdhc.c ****     if (usingInterruptSignal)
 278:../drivers/fsl_sdhc.c ****     {
 279:../drivers/fsl_sdhc.c ****         SDHC_EnableInterruptSignal(base, interruptEnabled);
 280:../drivers/fsl_sdhc.c ****     }
 281:../drivers/fsl_sdhc.c **** }
 282:../drivers/fsl_sdhc.c **** 
 283:../drivers/fsl_sdhc.c **** static void SDHC_StartTransfer(SDHC_Type *base, sdhc_command_t *command, sdhc_data_t *data, sdhc_dm
 284:../drivers/fsl_sdhc.c **** {
 285:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 286:../drivers/fsl_sdhc.c ****     sdhc_transfer_config_t sdhcTransferConfig = {0};
 287:../drivers/fsl_sdhc.c **** 
 288:../drivers/fsl_sdhc.c ****     /* Define the flag corresponding to each response type. */
 289:../drivers/fsl_sdhc.c ****     switch (command->responseType)
 290:../drivers/fsl_sdhc.c ****     {
 291:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeNone:
 292:../drivers/fsl_sdhc.c ****             break;
 293:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR1: /* Response 1 */
 294:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 295:../drivers/fsl_sdhc.c ****             break;
 296:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR1b: /* Response 1 with busy */
 297:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48BusyFlag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndex
 298:../drivers/fsl_sdhc.c ****             break;
 299:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR2: /* Response 2 */
 300:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength136Flag | kSDHC_EnableCrcCheckFlag);
 301:../drivers/fsl_sdhc.c ****             break;
 302:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR3: /* Response 3 */
 303:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag);
 304:../drivers/fsl_sdhc.c ****             break;
 305:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR4: /* Response 4 */
 306:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag);
 307:../drivers/fsl_sdhc.c ****             break;
 308:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR5: /* Response 5 */
 309:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 310:../drivers/fsl_sdhc.c ****             break;
 311:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR5b: /* Response 5 with busy */
 312:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48BusyFlag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndex
 313:../drivers/fsl_sdhc.c ****             break;
 314:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR6: /* Response 6 */
 315:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 316:../drivers/fsl_sdhc.c ****             break;
 317:../drivers/fsl_sdhc.c ****         case kCARD_ResponseTypeR7: /* Response 7 */
 318:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_ResponseLength48Flag | kSDHC_EnableCrcCheckFlag | kSDHC_EnableIndexChec
 319:../drivers/fsl_sdhc.c ****             break;
 320:../drivers/fsl_sdhc.c ****         default:
 321:../drivers/fsl_sdhc.c ****             break;
 322:../drivers/fsl_sdhc.c ****     }
 323:../drivers/fsl_sdhc.c ****     if (command->type == kCARD_CommandTypeAbort)
 324:../drivers/fsl_sdhc.c ****     {
 325:../drivers/fsl_sdhc.c ****         flags |= kSDHC_CommandTypeAbortFlag;
 326:../drivers/fsl_sdhc.c ****     }
 327:../drivers/fsl_sdhc.c **** 
 328:../drivers/fsl_sdhc.c ****     if (data)
 329:../drivers/fsl_sdhc.c ****     {
 330:../drivers/fsl_sdhc.c ****         flags |= kSDHC_DataPresentFlag;
 331:../drivers/fsl_sdhc.c **** 
 332:../drivers/fsl_sdhc.c ****         if (dmaMode != kSDHC_DmaModeNo)
 333:../drivers/fsl_sdhc.c ****         {
 334:../drivers/fsl_sdhc.c ****             flags |= kSDHC_EnableDmaFlag;
 335:../drivers/fsl_sdhc.c ****         }
 336:../drivers/fsl_sdhc.c ****         if (data->rxData)
 337:../drivers/fsl_sdhc.c ****         {
 338:../drivers/fsl_sdhc.c ****             flags |= kSDHC_DataReadFlag;
 339:../drivers/fsl_sdhc.c ****         }
 340:../drivers/fsl_sdhc.c ****         if (data->blockCount > 1U)
 341:../drivers/fsl_sdhc.c ****         {
 342:../drivers/fsl_sdhc.c ****             flags |= (kSDHC_MultipleBlockFlag | kSDHC_EnableBlockCountFlag);
 343:../drivers/fsl_sdhc.c ****             if (data->enableAutoCommand12)
 344:../drivers/fsl_sdhc.c ****             {
 345:../drivers/fsl_sdhc.c ****                 /* Enable Auto command 12. */
 346:../drivers/fsl_sdhc.c ****                 flags |= kSDHC_EnableAutoCommand12Flag;
 347:../drivers/fsl_sdhc.c ****             }
 348:../drivers/fsl_sdhc.c ****         }
 349:../drivers/fsl_sdhc.c **** 
 350:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockSize = data->blockSize;
 351:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockCount = data->blockCount;
 352:../drivers/fsl_sdhc.c ****     }
 353:../drivers/fsl_sdhc.c ****     else
 354:../drivers/fsl_sdhc.c ****     {
 355:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockSize = 0U;
 356:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockCount = 0U;
 357:../drivers/fsl_sdhc.c ****     }
 358:../drivers/fsl_sdhc.c **** 
 359:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.commandArgument = command->argument;
 360:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.commandIndex = command->index;
 361:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.flags = flags;
 362:../drivers/fsl_sdhc.c ****     SDHC_SetTransferConfig(base, &sdhcTransferConfig);
 363:../drivers/fsl_sdhc.c **** }
 364:../drivers/fsl_sdhc.c **** 
 365:../drivers/fsl_sdhc.c **** static status_t SDHC_ReceiveCommandResponse(SDHC_Type *base, sdhc_command_t *command)
 366:../drivers/fsl_sdhc.c **** {
  27              		.loc 1 366 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
 367:../drivers/fsl_sdhc.c ****     uint32_t i;
 368:../drivers/fsl_sdhc.c **** 
 369:../drivers/fsl_sdhc.c ****     if (command->responseType != kCARD_ResponseTypeNone)
  32              		.loc 1 369 0
  33 0000 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
 366:../drivers/fsl_sdhc.c ****     uint32_t i;
  34              		.loc 1 366 0
  35 0002 30B5     		push	{r4, r5, lr}
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 369 0
  41 0004 12B9     		cbnz	r2, .L2
  42              	.LVL1:
  43              	.L5:
 370:../drivers/fsl_sdhc.c ****     {
 371:../drivers/fsl_sdhc.c ****         command->response[0U] = SDHC_GetCommandResponse(base, 0U);
 372:../drivers/fsl_sdhc.c ****         if (command->responseType == kCARD_ResponseTypeR2)
 373:../drivers/fsl_sdhc.c ****         {
 374:../drivers/fsl_sdhc.c ****             command->response[1U] = SDHC_GetCommandResponse(base, 1U);
 375:../drivers/fsl_sdhc.c ****             command->response[2U] = SDHC_GetCommandResponse(base, 2U);
 376:../drivers/fsl_sdhc.c ****             command->response[3U] = SDHC_GetCommandResponse(base, 3U);
 377:../drivers/fsl_sdhc.c **** 
 378:../drivers/fsl_sdhc.c ****             i = 4U;
 379:../drivers/fsl_sdhc.c ****             /* R3-R2-R1-R0(lowest 8 bit is invalid bit) has the same format as R2 format in SD spec
 380:../drivers/fsl_sdhc.c ****             after removed internal CRC7 and end bit. */
 381:../drivers/fsl_sdhc.c ****             do
 382:../drivers/fsl_sdhc.c ****             {
 383:../drivers/fsl_sdhc.c ****                 command->response[i - 1U] <<= 8U;
 384:../drivers/fsl_sdhc.c ****                 if (i > 1U)
 385:../drivers/fsl_sdhc.c ****                 {
 386:../drivers/fsl_sdhc.c ****                     command->response[i - 1U] |= ((command->response[i - 2U] & 0xFF000000U) >> 24U)
 387:../drivers/fsl_sdhc.c ****                 }
 388:../drivers/fsl_sdhc.c ****             } while (i--);
 389:../drivers/fsl_sdhc.c ****         }
 390:../drivers/fsl_sdhc.c ****     }
 391:../drivers/fsl_sdhc.c ****     /* check response error flag */
 392:../drivers/fsl_sdhc.c ****     if ((command->responseErrorFlags != 0U) &&
  44              		.loc 1 392 0
  45 0006 C869     		ldr	r0, [r1, #28]
  46 0008 E0B9     		cbnz	r0, .L3
  47              	.L1:
 393:../drivers/fsl_sdhc.c ****         ((command->responseType == kCARD_ResponseTypeR1) || (command->responseType == kCARD_Respons
 394:../drivers/fsl_sdhc.c ****          (command->responseType == kCARD_ResponseTypeR6) || (command->responseType == kCARD_Respons
 395:../drivers/fsl_sdhc.c ****     {
 396:../drivers/fsl_sdhc.c ****         if (((command->responseErrorFlags) & (command->response[0U])) != 0U)
 397:../drivers/fsl_sdhc.c ****         {
 398:../drivers/fsl_sdhc.c ****             return kStatus_SDHC_SendCommandFailed;
 399:../drivers/fsl_sdhc.c ****         }
 400:../drivers/fsl_sdhc.c ****     }
 401:../drivers/fsl_sdhc.c **** 
 402:../drivers/fsl_sdhc.c ****     return kStatus_Success;
 403:../drivers/fsl_sdhc.c **** }
  48              		.loc 1 403 0
  49 000a 30BD     		pop	{r4, r5, pc}
  50              	.LVL2:
  51              	.L2:
  52              	.LBB96:
  53              	.LBB97:
  54              		.file 2 "../drivers/fsl_sdhc.h"
   1:../drivers/fsl_sdhc.h **** /*
   2:../drivers/fsl_sdhc.h ****  * The Clear BSD License
   3:../drivers/fsl_sdhc.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_sdhc.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_sdhc.h ****  * All rights reserved.
   6:../drivers/fsl_sdhc.h ****  *
   7:../drivers/fsl_sdhc.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_sdhc.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_sdhc.h ****  * that the following conditions are met:
  10:../drivers/fsl_sdhc.h ****  *
  11:../drivers/fsl_sdhc.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_sdhc.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_sdhc.h ****  *
  14:../drivers/fsl_sdhc.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_sdhc.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_sdhc.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_sdhc.h ****  *
  18:../drivers/fsl_sdhc.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_sdhc.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_sdhc.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_sdhc.h ****  *
  22:../drivers/fsl_sdhc.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_sdhc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_sdhc.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_sdhc.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_sdhc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_sdhc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_sdhc.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_sdhc.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_sdhc.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_sdhc.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_sdhc.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_sdhc.h ****  */
  34:../drivers/fsl_sdhc.h **** #ifndef _FSL_SDHC_H_
  35:../drivers/fsl_sdhc.h **** #define _FSL_SDHC_H_
  36:../drivers/fsl_sdhc.h **** 
  37:../drivers/fsl_sdhc.h **** #include "fsl_common.h"
  38:../drivers/fsl_sdhc.h **** 
  39:../drivers/fsl_sdhc.h **** /*!
  40:../drivers/fsl_sdhc.h ****  * @addtogroup sdhc
  41:../drivers/fsl_sdhc.h ****  * @{
  42:../drivers/fsl_sdhc.h ****  */
  43:../drivers/fsl_sdhc.h **** 
  44:../drivers/fsl_sdhc.h **** /******************************************************************************
  45:../drivers/fsl_sdhc.h ****  * Definitions.
  46:../drivers/fsl_sdhc.h ****  *****************************************************************************/
  47:../drivers/fsl_sdhc.h **** 
  48:../drivers/fsl_sdhc.h **** /*! @name Driver version */
  49:../drivers/fsl_sdhc.h **** /*@{*/
  50:../drivers/fsl_sdhc.h **** /*! @brief Driver version 2.1.6. */
  51:../drivers/fsl_sdhc.h **** #define FSL_SDHC_DRIVER_VERSION (MAKE_VERSION(2U, 1U, 6U))
  52:../drivers/fsl_sdhc.h **** /*@}*/
  53:../drivers/fsl_sdhc.h **** 
  54:../drivers/fsl_sdhc.h **** /*! @brief Maximum block count can be set one time */
  55:../drivers/fsl_sdhc.h **** #define SDHC_MAX_BLOCK_COUNT (SDHC_BLKATTR_BLKCNT_MASK >> SDHC_BLKATTR_BLKCNT_SHIFT)
  56:../drivers/fsl_sdhc.h **** 
  57:../drivers/fsl_sdhc.h **** /*! @brief SDHC status */
  58:../drivers/fsl_sdhc.h **** enum _sdhc_status
  59:../drivers/fsl_sdhc.h **** {
  60:../drivers/fsl_sdhc.h ****     kStatus_SDHC_BusyTransferring = MAKE_STATUS(kStatusGroup_SDHC, 0U),            /*!< Transfer is
  61:../drivers/fsl_sdhc.h ****     kStatus_SDHC_PrepareAdmaDescriptorFailed = MAKE_STATUS(kStatusGroup_SDHC, 1U), /*!< Set DMA des
  62:../drivers/fsl_sdhc.h ****     kStatus_SDHC_SendCommandFailed = MAKE_STATUS(kStatusGroup_SDHC, 2U),           /*!< Send comman
  63:../drivers/fsl_sdhc.h ****     kStatus_SDHC_TransferDataFailed = MAKE_STATUS(kStatusGroup_SDHC, 3U),          /*!< Transfer da
  64:../drivers/fsl_sdhc.h ****     kStatus_SDHC_DMADataBufferAddrNotAlign =
  65:../drivers/fsl_sdhc.h ****         MAKE_STATUS(kStatusGroup_SDHC, 4U), /*!< data buffer addr not align in DMA mode */
  66:../drivers/fsl_sdhc.h **** };
  67:../drivers/fsl_sdhc.h **** 
  68:../drivers/fsl_sdhc.h **** /*! @brief Host controller capabilities flag mask */
  69:../drivers/fsl_sdhc.h **** enum _sdhc_capability_flag
  70:../drivers/fsl_sdhc.h **** {
  71:../drivers/fsl_sdhc.h ****     kSDHC_SupportAdmaFlag = SDHC_HTCAPBLT_ADMAS_MASK,        /*!< Support ADMA */
  72:../drivers/fsl_sdhc.h ****     kSDHC_SupportHighSpeedFlag = SDHC_HTCAPBLT_HSS_MASK,     /*!< Support high-speed */
  73:../drivers/fsl_sdhc.h ****     kSDHC_SupportDmaFlag = SDHC_HTCAPBLT_DMAS_MASK,          /*!< Support DMA */
  74:../drivers/fsl_sdhc.h ****     kSDHC_SupportSuspendResumeFlag = SDHC_HTCAPBLT_SRS_MASK, /*!< Support suspend/resume */
  75:../drivers/fsl_sdhc.h ****     kSDHC_SupportV330Flag = SDHC_HTCAPBLT_VS33_MASK,         /*!< Support voltage 3.3V */
  76:../drivers/fsl_sdhc.h **** #if defined FSL_FEATURE_SDHC_HAS_V300_SUPPORT && FSL_FEATURE_SDHC_HAS_V300_SUPPORT
  77:../drivers/fsl_sdhc.h ****     kSDHC_SupportV300Flag = SDHC_HTCAPBLT_VS30_MASK, /*!< Support voltage 3.0V */
  78:../drivers/fsl_sdhc.h **** #endif
  79:../drivers/fsl_sdhc.h **** #if defined FSL_FEATURE_SDHC_HAS_V180_SUPPORT && FSL_FEATURE_SDHC_HAS_V180_SUPPORT
  80:../drivers/fsl_sdhc.h ****     kSDHC_SupportV180Flag = SDHC_HTCAPBLT_VS18_MASK, /*!< Support voltage 1.8V */
  81:../drivers/fsl_sdhc.h **** #endif
  82:../drivers/fsl_sdhc.h ****     /* Put additional two flags in HTCAPBLT_MBL's position. */
  83:../drivers/fsl_sdhc.h ****     kSDHC_Support4BitFlag = (SDHC_HTCAPBLT_MBL_SHIFT << 0U), /*!< Support 4 bit mode */
  84:../drivers/fsl_sdhc.h ****     kSDHC_Support8BitFlag = (SDHC_HTCAPBLT_MBL_SHIFT << 1U), /*!< Support 8 bit mode */
  85:../drivers/fsl_sdhc.h **** };
  86:../drivers/fsl_sdhc.h **** 
  87:../drivers/fsl_sdhc.h **** /*! @brief Wakeup event mask */
  88:../drivers/fsl_sdhc.h **** enum _sdhc_wakeup_event
  89:../drivers/fsl_sdhc.h **** {
  90:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventOnCardInt = SDHC_PROCTL_WECINT_MASK,    /*!< Wakeup on card interrupt */
  91:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventOnCardInsert = SDHC_PROCTL_WECINS_MASK, /*!< Wakeup on card insertion */
  92:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventOnCardRemove = SDHC_PROCTL_WECRM_MASK,  /*!< Wakeup on card removal */
  93:../drivers/fsl_sdhc.h **** 
  94:../drivers/fsl_sdhc.h ****     kSDHC_WakeupEventsAll = (kSDHC_WakeupEventOnCardInt | kSDHC_WakeupEventOnCardInsert |
  95:../drivers/fsl_sdhc.h ****                              kSDHC_WakeupEventOnCardRemove), /*!< All wakeup events */
  96:../drivers/fsl_sdhc.h **** };
  97:../drivers/fsl_sdhc.h **** 
  98:../drivers/fsl_sdhc.h **** /*! @brief Reset type mask */
  99:../drivers/fsl_sdhc.h **** enum _sdhc_reset
 100:../drivers/fsl_sdhc.h **** {
 101:../drivers/fsl_sdhc.h ****     kSDHC_ResetAll = SDHC_SYSCTL_RSTA_MASK,     /*!< Reset all except card detection */
 102:../drivers/fsl_sdhc.h ****     kSDHC_ResetCommand = SDHC_SYSCTL_RSTC_MASK, /*!< Reset command line */
 103:../drivers/fsl_sdhc.h ****     kSDHC_ResetData = SDHC_SYSCTL_RSTD_MASK,    /*!< Reset data line */
 104:../drivers/fsl_sdhc.h **** 
 105:../drivers/fsl_sdhc.h ****     kSDHC_ResetsAll = (kSDHC_ResetAll | kSDHC_ResetCommand | kSDHC_ResetData), /*!< All reset types
 106:../drivers/fsl_sdhc.h **** };
 107:../drivers/fsl_sdhc.h **** 
 108:../drivers/fsl_sdhc.h **** /*! @brief Transfer flag mask */
 109:../drivers/fsl_sdhc.h **** enum _sdhc_transfer_flag
 110:../drivers/fsl_sdhc.h **** {
 111:../drivers/fsl_sdhc.h ****     kSDHC_EnableDmaFlag = SDHC_XFERTYP_DMAEN_MASK, /*!< Enable DMA */
 112:../drivers/fsl_sdhc.h **** 
 113:../drivers/fsl_sdhc.h ****     kSDHC_CommandTypeSuspendFlag = (SDHC_XFERTYP_CMDTYP(1U)), /*!< Suspend command */
 114:../drivers/fsl_sdhc.h ****     kSDHC_CommandTypeResumeFlag = (SDHC_XFERTYP_CMDTYP(2U)),  /*!< Resume command */
 115:../drivers/fsl_sdhc.h ****     kSDHC_CommandTypeAbortFlag = (SDHC_XFERTYP_CMDTYP(3U)),   /*!< Abort command */
 116:../drivers/fsl_sdhc.h **** 
 117:../drivers/fsl_sdhc.h ****     kSDHC_EnableBlockCountFlag = SDHC_XFERTYP_BCEN_MASK,      /*!< Enable block count */
 118:../drivers/fsl_sdhc.h ****     kSDHC_EnableAutoCommand12Flag = SDHC_XFERTYP_AC12EN_MASK, /*!< Enable auto CMD12 */
 119:../drivers/fsl_sdhc.h ****     kSDHC_DataReadFlag = SDHC_XFERTYP_DTDSEL_MASK,            /*!< Enable data read */
 120:../drivers/fsl_sdhc.h ****     kSDHC_MultipleBlockFlag = SDHC_XFERTYP_MSBSEL_MASK,       /*!< Multiple block data read/write *
 121:../drivers/fsl_sdhc.h **** 
 122:../drivers/fsl_sdhc.h ****     kSDHC_ResponseLength136Flag = SDHC_XFERTYP_RSPTYP(1U),    /*!< 136 bit response length */
 123:../drivers/fsl_sdhc.h ****     kSDHC_ResponseLength48Flag = SDHC_XFERTYP_RSPTYP(2U),     /*!< 48 bit response length */
 124:../drivers/fsl_sdhc.h ****     kSDHC_ResponseLength48BusyFlag = SDHC_XFERTYP_RSPTYP(3U), /*!< 48 bit response length with busy
 125:../drivers/fsl_sdhc.h **** 
 126:../drivers/fsl_sdhc.h ****     kSDHC_EnableCrcCheckFlag = SDHC_XFERTYP_CCCEN_MASK,   /*!< Enable CRC check */
 127:../drivers/fsl_sdhc.h ****     kSDHC_EnableIndexCheckFlag = SDHC_XFERTYP_CICEN_MASK, /*!< Enable index check */
 128:../drivers/fsl_sdhc.h ****     kSDHC_DataPresentFlag = SDHC_XFERTYP_DPSEL_MASK,      /*!< Data present flag */
 129:../drivers/fsl_sdhc.h **** };
 130:../drivers/fsl_sdhc.h **** 
 131:../drivers/fsl_sdhc.h **** /*! @brief Present status flag mask */
 132:../drivers/fsl_sdhc.h **** enum _sdhc_present_status_flag
 133:../drivers/fsl_sdhc.h **** {
 134:../drivers/fsl_sdhc.h ****     kSDHC_CommandInhibitFlag = SDHC_PRSSTAT_CIHB_MASK,     /*!< Command inhibit */
 135:../drivers/fsl_sdhc.h ****     kSDHC_DataInhibitFlag = SDHC_PRSSTAT_CDIHB_MASK,       /*!< Data inhibit */
 136:../drivers/fsl_sdhc.h ****     kSDHC_DataLineActiveFlag = SDHC_PRSSTAT_DLA_MASK,      /*!< Data line active */
 137:../drivers/fsl_sdhc.h ****     kSDHC_SdClockStableFlag = SDHC_PRSSTAT_SDSTB_MASK,     /*!< SD bus clock stable */
 138:../drivers/fsl_sdhc.h ****     kSDHC_WriteTransferActiveFlag = SDHC_PRSSTAT_WTA_MASK, /*!< Write transfer active */
 139:../drivers/fsl_sdhc.h ****     kSDHC_ReadTransferActiveFlag = SDHC_PRSSTAT_RTA_MASK,  /*!< Read transfer active */
 140:../drivers/fsl_sdhc.h ****     kSDHC_BufferWriteEnableFlag = SDHC_PRSSTAT_BWEN_MASK,  /*!< Buffer write enable */
 141:../drivers/fsl_sdhc.h ****     kSDHC_BufferReadEnableFlag = SDHC_PRSSTAT_BREN_MASK,   /*!< Buffer read enable */
 142:../drivers/fsl_sdhc.h ****     kSDHC_CardInsertedFlag = SDHC_PRSSTAT_CINS_MASK,       /*!< Card inserted */
 143:../drivers/fsl_sdhc.h ****     kSDHC_CommandLineLevelFlag = SDHC_PRSSTAT_CLSL_MASK,   /*!< Command line signal level */
 144:../drivers/fsl_sdhc.h ****     kSDHC_Data0LineLevelFlag = (1U << 24U),                /*!< Data0 line signal level */
 145:../drivers/fsl_sdhc.h ****     kSDHC_Data1LineLevelFlag = (1U << 25U),                /*!< Data1 line signal level */
 146:../drivers/fsl_sdhc.h ****     kSDHC_Data2LineLevelFlag = (1U << 26U),                /*!< Data2 line signal level */
 147:../drivers/fsl_sdhc.h ****     kSDHC_Data3LineLevelFlag = (1U << 27U),                /*!< Data3 line signal level */
 148:../drivers/fsl_sdhc.h ****     kSDHC_Data4LineLevelFlag = (1U << 28U),                /*!< Data4 line signal level */
 149:../drivers/fsl_sdhc.h ****     kSDHC_Data5LineLevelFlag = (1U << 29U),                /*!< Data5 line signal level */
 150:../drivers/fsl_sdhc.h ****     kSDHC_Data6LineLevelFlag = (1U << 30U),                /*!< Data6 line signal level */
 151:../drivers/fsl_sdhc.h ****     kSDHC_Data7LineLevelFlag = (1U << 31U),                /*!< Data7 line signal level */
 152:../drivers/fsl_sdhc.h **** };
 153:../drivers/fsl_sdhc.h **** 
 154:../drivers/fsl_sdhc.h **** /*! @brief Interrupt status flag mask */
 155:../drivers/fsl_sdhc.h **** enum _sdhc_interrupt_status_flag
 156:../drivers/fsl_sdhc.h **** {
 157:../drivers/fsl_sdhc.h ****     kSDHC_CommandCompleteFlag = SDHC_IRQSTAT_CC_MASK,       /*!< Command complete */
 158:../drivers/fsl_sdhc.h ****     kSDHC_DataCompleteFlag = SDHC_IRQSTAT_TC_MASK,          /*!< Data complete */
 159:../drivers/fsl_sdhc.h ****     kSDHC_BlockGapEventFlag = SDHC_IRQSTAT_BGE_MASK,        /*!< Block gap event */
 160:../drivers/fsl_sdhc.h ****     kSDHC_DmaCompleteFlag = SDHC_IRQSTAT_DINT_MASK,         /*!< DMA interrupt */
 161:../drivers/fsl_sdhc.h ****     kSDHC_BufferWriteReadyFlag = SDHC_IRQSTAT_BWR_MASK,     /*!< Buffer write ready */
 162:../drivers/fsl_sdhc.h ****     kSDHC_BufferReadReadyFlag = SDHC_IRQSTAT_BRR_MASK,      /*!< Buffer read ready */
 163:../drivers/fsl_sdhc.h ****     kSDHC_CardInsertionFlag = SDHC_IRQSTAT_CINS_MASK,       /*!< Card inserted */
 164:../drivers/fsl_sdhc.h ****     kSDHC_CardRemovalFlag = SDHC_IRQSTAT_CRM_MASK,          /*!< Card removed */
 165:../drivers/fsl_sdhc.h ****     kSDHC_CardInterruptFlag = SDHC_IRQSTAT_CINT_MASK,       /*!< Card interrupt */
 166:../drivers/fsl_sdhc.h ****     kSDHC_CommandTimeoutFlag = SDHC_IRQSTAT_CTOE_MASK,      /*!< Command timeout error */
 167:../drivers/fsl_sdhc.h ****     kSDHC_CommandCrcErrorFlag = SDHC_IRQSTAT_CCE_MASK,      /*!< Command CRC error */
 168:../drivers/fsl_sdhc.h ****     kSDHC_CommandEndBitErrorFlag = SDHC_IRQSTAT_CEBE_MASK,  /*!< Command end bit error */
 169:../drivers/fsl_sdhc.h ****     kSDHC_CommandIndexErrorFlag = SDHC_IRQSTAT_CIE_MASK,    /*!< Command index error */
 170:../drivers/fsl_sdhc.h ****     kSDHC_DataTimeoutFlag = SDHC_IRQSTAT_DTOE_MASK,         /*!< Data timeout error */
 171:../drivers/fsl_sdhc.h ****     kSDHC_DataCrcErrorFlag = SDHC_IRQSTAT_DCE_MASK,         /*!< Data CRC error */
 172:../drivers/fsl_sdhc.h ****     kSDHC_DataEndBitErrorFlag = SDHC_IRQSTAT_DEBE_MASK,     /*!< Data end bit error */
 173:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12ErrorFlag = SDHC_IRQSTAT_AC12E_MASK, /*!< Auto CMD12 error */
 174:../drivers/fsl_sdhc.h ****     kSDHC_DmaErrorFlag = SDHC_IRQSTAT_DMAE_MASK,            /*!< DMA error */
 175:../drivers/fsl_sdhc.h **** 
 176:../drivers/fsl_sdhc.h ****     kSDHC_CommandErrorFlag = (kSDHC_CommandTimeoutFlag | kSDHC_CommandCrcErrorFlag | kSDHC_CommandE
 177:../drivers/fsl_sdhc.h ****                               kSDHC_CommandIndexErrorFlag), /*!< Command error */
 178:../drivers/fsl_sdhc.h ****     kSDHC_DataErrorFlag = (kSDHC_DataTimeoutFlag | kSDHC_DataCrcErrorFlag | kSDHC_DataEndBitErrorFl
 179:../drivers/fsl_sdhc.h ****                            kSDHC_AutoCommand12ErrorFlag),                                  /*!< Dat
 180:../drivers/fsl_sdhc.h ****     kSDHC_ErrorFlag = (kSDHC_CommandErrorFlag | kSDHC_DataErrorFlag | kSDHC_DmaErrorFlag), /*!< All
 181:../drivers/fsl_sdhc.h ****     kSDHC_DataFlag = (kSDHC_DataCompleteFlag | kSDHC_DmaCompleteFlag | kSDHC_BufferWriteReadyFlag |
 182:../drivers/fsl_sdhc.h ****                       kSDHC_BufferReadReadyFlag | kSDHC_DataErrorFlag | kSDHC_DmaErrorFlag), /*!< D
 183:../drivers/fsl_sdhc.h ****     kSDHC_CommandFlag = (kSDHC_CommandErrorFlag | kSDHC_CommandCompleteFlag),                /*!< C
 184:../drivers/fsl_sdhc.h ****     kSDHC_CardDetectFlag = (kSDHC_CardInsertionFlag | kSDHC_CardRemovalFlag), /*!< Card detection i
 185:../drivers/fsl_sdhc.h **** 
 186:../drivers/fsl_sdhc.h ****     kSDHC_AllInterruptFlags = (kSDHC_BlockGapEventFlag | kSDHC_CardInterruptFlag | kSDHC_CommandFla
 187:../drivers/fsl_sdhc.h ****                                kSDHC_ErrorFlag), /*!< All flags mask */
 188:../drivers/fsl_sdhc.h **** };
 189:../drivers/fsl_sdhc.h **** 
 190:../drivers/fsl_sdhc.h **** /*! @brief Auto CMD12 error status flag mask */
 191:../drivers/fsl_sdhc.h **** enum _sdhc_auto_command12_error_status_flag
 192:../drivers/fsl_sdhc.h **** {
 193:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12NotExecutedFlag = SDHC_AC12ERR_AC12NE_MASK,  /*!< Not executed error */
 194:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12TimeoutFlag = SDHC_AC12ERR_AC12TOE_MASK,     /*!< Timeout error */
 195:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12EndBitErrorFlag = SDHC_AC12ERR_AC12EBE_MASK, /*!< End bit error */
 196:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12CrcErrorFlag = SDHC_AC12ERR_AC12CE_MASK,     /*!< CRC error */
 197:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12IndexErrorFlag = SDHC_AC12ERR_AC12IE_MASK,   /*!< Index error */
 198:../drivers/fsl_sdhc.h ****     kSDHC_AutoCommand12NotIssuedFlag = SDHC_AC12ERR_CNIBAC12E_MASK, /*!< Not issued error */
 199:../drivers/fsl_sdhc.h **** };
 200:../drivers/fsl_sdhc.h **** 
 201:../drivers/fsl_sdhc.h **** /*! @brief ADMA error status flag mask */
 202:../drivers/fsl_sdhc.h **** enum _sdhc_adma_error_status_flag
 203:../drivers/fsl_sdhc.h **** {
 204:../drivers/fsl_sdhc.h ****     kSDHC_AdmaLenghMismatchFlag = SDHC_ADMAES_ADMALME_MASK,   /*!< Length mismatch error */
 205:../drivers/fsl_sdhc.h ****     kSDHC_AdmaDescriptorErrorFlag = SDHC_ADMAES_ADMADCE_MASK, /*!< Descriptor error */
 206:../drivers/fsl_sdhc.h **** };
 207:../drivers/fsl_sdhc.h **** 
 208:../drivers/fsl_sdhc.h **** /*!
 209:../drivers/fsl_sdhc.h ****  * @brief ADMA error state
 210:../drivers/fsl_sdhc.h ****  *
 211:../drivers/fsl_sdhc.h ****  * This state is the detail state when ADMA error has occurred.
 212:../drivers/fsl_sdhc.h ****  */
 213:../drivers/fsl_sdhc.h **** typedef enum _sdhc_adma_error_state
 214:../drivers/fsl_sdhc.h **** {
 215:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateStopDma = 0x00U,         /*!< Stop DMA */
 216:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateFetchDescriptor = 0x01U, /*!< Fetch descriptor */
 217:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateChangeAddress = 0x02U,   /*!< Change address */
 218:../drivers/fsl_sdhc.h ****     kSDHC_AdmaErrorStateTransferData = 0x03U,    /*!< Transfer data */
 219:../drivers/fsl_sdhc.h **** } sdhc_adma_error_state_t;
 220:../drivers/fsl_sdhc.h **** 
 221:../drivers/fsl_sdhc.h **** /*! @brief Force event mask */
 222:../drivers/fsl_sdhc.h **** enum _sdhc_force_event
 223:../drivers/fsl_sdhc.h **** {
 224:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12NotExecuted = SDHC_FEVT_AC12NE_MASK,  /*!< Auto CMD12 not executed
 225:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12Timeout = SDHC_FEVT_AC12TOE_MASK,     /*!< Auto CMD12 timeout erro
 226:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12CrcError = SDHC_FEVT_AC12CE_MASK,     /*!< Auto CMD12 CRC error */
 227:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventEndBitError = SDHC_FEVT_AC12EBE_MASK,              /*!< Auto CMD12 end bit erro
 228:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12IndexError = SDHC_FEVT_AC12IE_MASK,   /*!< Auto CMD12 index error 
 229:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12NotIssued = SDHC_FEVT_CNIBAC12E_MASK, /*!< Auto CMD12 not issued e
 230:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandTimeout = SDHC_FEVT_CTOE_MASK,              /*!< Command timeout error *
 231:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandCrcError = SDHC_FEVT_CCE_MASK,              /*!< Command CRC error */
 232:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandEndBitError = SDHC_FEVT_CEBE_MASK,          /*!< Command end bit error *
 233:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCommandIndexError = SDHC_FEVT_CIE_MASK,            /*!< Command index error */
 234:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDataTimeout = SDHC_FEVT_DTOE_MASK,                 /*!< Data timeout error */
 235:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDataCrcError = SDHC_FEVT_DCE_MASK,                 /*!< Data CRC error */
 236:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDataEndBitError = SDHC_FEVT_DEBE_MASK,             /*!< Data end bit error */
 237:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventAutoCommand12Error = SDHC_FEVT_AC12E_MASK,         /*!< Auto CMD12 error */
 238:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventCardInt = SDHC_FEVT_CINT_MASK,                     /*!< Card interrupt */
 239:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventDmaError = SDHC_FEVT_DMAE_MASK,                    /*!< Dma error */
 240:../drivers/fsl_sdhc.h **** 
 241:../drivers/fsl_sdhc.h ****     kSDHC_ForceEventsAll =
 242:../drivers/fsl_sdhc.h ****         (kSDHC_ForceEventAutoCommand12NotExecuted | kSDHC_ForceEventAutoCommand12Timeout |
 243:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventAutoCommand12CrcError | kSDHC_ForceEventEndBitError | kSDHC_ForceEventAuto
 244:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventAutoCommand12NotIssued | kSDHC_ForceEventCommandTimeout | kSDHC_ForceEvent
 245:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventCommandEndBitError | kSDHC_ForceEventCommandIndexError | kSDHC_ForceEventD
 246:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventDataCrcError | kSDHC_ForceEventDataEndBitError | kSDHC_ForceEventAutoComma
 247:../drivers/fsl_sdhc.h ****          kSDHC_ForceEventCardInt | kSDHC_ForceEventDmaError), /*!< All force event flags mask */
 248:../drivers/fsl_sdhc.h **** };
 249:../drivers/fsl_sdhc.h **** 
 250:../drivers/fsl_sdhc.h **** /*! @brief Data transfer width */
 251:../drivers/fsl_sdhc.h **** typedef enum _sdhc_data_bus_width
 252:../drivers/fsl_sdhc.h **** {
 253:../drivers/fsl_sdhc.h ****     kSDHC_DataBusWidth1Bit = 0U, /*!< 1-bit mode */
 254:../drivers/fsl_sdhc.h ****     kSDHC_DataBusWidth4Bit = 1U, /*!< 4-bit mode */
 255:../drivers/fsl_sdhc.h ****     kSDHC_DataBusWidth8Bit = 2U, /*!< 8-bit mode */
 256:../drivers/fsl_sdhc.h **** } sdhc_data_bus_width_t;
 257:../drivers/fsl_sdhc.h **** 
 258:../drivers/fsl_sdhc.h **** /*! @brief Endian mode */
 259:../drivers/fsl_sdhc.h **** typedef enum _sdhc_endian_mode
 260:../drivers/fsl_sdhc.h **** {
 261:../drivers/fsl_sdhc.h ****     kSDHC_EndianModeBig = 0U,         /*!< Big endian mode */
 262:../drivers/fsl_sdhc.h ****     kSDHC_EndianModeHalfWordBig = 1U, /*!< Half word big endian mode */
 263:../drivers/fsl_sdhc.h ****     kSDHC_EndianModeLittle = 2U,      /*!< Little endian mode */
 264:../drivers/fsl_sdhc.h **** } sdhc_endian_mode_t;
 265:../drivers/fsl_sdhc.h **** 
 266:../drivers/fsl_sdhc.h **** /*! @brief DMA mode */
 267:../drivers/fsl_sdhc.h **** typedef enum _sdhc_dma_mode
 268:../drivers/fsl_sdhc.h **** {
 269:../drivers/fsl_sdhc.h ****     kSDHC_DmaModeNo = 0U,    /*!< No DMA */
 270:../drivers/fsl_sdhc.h ****     kSDHC_DmaModeAdma1 = 1U, /*!< ADMA1 is selected */
 271:../drivers/fsl_sdhc.h ****     kSDHC_DmaModeAdma2 = 2U, /*!< ADMA2 is selected */
 272:../drivers/fsl_sdhc.h **** } sdhc_dma_mode_t;
 273:../drivers/fsl_sdhc.h **** 
 274:../drivers/fsl_sdhc.h **** /*! @brief SDIO control flag mask */
 275:../drivers/fsl_sdhc.h **** enum _sdhc_sdio_control_flag
 276:../drivers/fsl_sdhc.h **** {
 277:../drivers/fsl_sdhc.h ****     kSDHC_StopAtBlockGapFlag = 0x01,       /*!< Stop at block gap */
 278:../drivers/fsl_sdhc.h ****     kSDHC_ReadWaitControlFlag = 0x02,      /*!< Read wait control */
 279:../drivers/fsl_sdhc.h ****     kSDHC_InterruptAtBlockGapFlag = 0x04,  /*!< Interrupt at block gap */
 280:../drivers/fsl_sdhc.h ****     kSDHC_ExactBlockNumberReadFlag = 0x08, /*!< Exact block number read */
 281:../drivers/fsl_sdhc.h **** };
 282:../drivers/fsl_sdhc.h **** 
 283:../drivers/fsl_sdhc.h **** /*! @brief MMC card boot mode */
 284:../drivers/fsl_sdhc.h **** typedef enum _sdhc_boot_mode
 285:../drivers/fsl_sdhc.h **** {
 286:../drivers/fsl_sdhc.h ****     kSDHC_BootModeNormal = 0U,      /*!< Normal boot */
 287:../drivers/fsl_sdhc.h ****     kSDHC_BootModeAlternative = 1U, /*!< Alternative boot */
 288:../drivers/fsl_sdhc.h **** } sdhc_boot_mode_t;
 289:../drivers/fsl_sdhc.h **** 
 290:../drivers/fsl_sdhc.h **** /*! @brief The command type */
 291:../drivers/fsl_sdhc.h **** typedef enum _sdhc_card_command_type
 292:../drivers/fsl_sdhc.h **** {
 293:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeNormal = 0U,  /*!< Normal command */
 294:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeSuspend = 1U, /*!< Suspend command */
 295:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeResume = 2U,  /*!< Resume command */
 296:../drivers/fsl_sdhc.h ****     kCARD_CommandTypeAbort = 3U,   /*!< Abort command */
 297:../drivers/fsl_sdhc.h **** } sdhc_card_command_type_t;
 298:../drivers/fsl_sdhc.h **** 
 299:../drivers/fsl_sdhc.h **** /*!
 300:../drivers/fsl_sdhc.h ****  * @brief The command response type.
 301:../drivers/fsl_sdhc.h ****  *
 302:../drivers/fsl_sdhc.h ****  * Define the command response type from card to host controller.
 303:../drivers/fsl_sdhc.h ****  */
 304:../drivers/fsl_sdhc.h **** typedef enum _sdhc_card_response_type
 305:../drivers/fsl_sdhc.h **** {
 306:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeNone = 0U, /*!< Response type: none */
 307:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR1 = 1U,   /*!< Response type: R1 */
 308:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR1b = 2U,  /*!< Response type: R1b */
 309:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR2 = 3U,   /*!< Response type: R2 */
 310:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR3 = 4U,   /*!< Response type: R3 */
 311:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR4 = 5U,   /*!< Response type: R4 */
 312:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR5 = 6U,   /*!< Response type: R5 */
 313:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR5b = 7U,  /*!< Response type: R5b */
 314:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR6 = 8U,   /*!< Response type: R6 */
 315:../drivers/fsl_sdhc.h ****     kCARD_ResponseTypeR7 = 9U,   /*!< Response type: R7 */
 316:../drivers/fsl_sdhc.h **** } sdhc_card_response_type_t;
 317:../drivers/fsl_sdhc.h **** 
 318:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for ADDRESS filed in ADMA1's descriptor */
 319:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_ADDRESS_ALIGN (4096U)
 320:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for LENGTH field in ADMA1's descriptor */
 321:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_LENGTH_ALIGN (4096U)
 322:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for ADDRESS field in ADMA2's descriptor */
 323:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_ADDRESS_ALIGN (4U)
 324:../drivers/fsl_sdhc.h **** /*! @brief The alignment size for LENGTH filed in ADMA2's descriptor */
 325:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_LENGTH_ALIGN (4U)
 326:../drivers/fsl_sdhc.h **** 
 327:../drivers/fsl_sdhc.h **** /* ADMA1 descriptor table
 328:../drivers/fsl_sdhc.h ****  * |------------------------|---------|--------------------------|
 329:../drivers/fsl_sdhc.h ****  * | Address/page field     |Reserved |         Attribute        |
 330:../drivers/fsl_sdhc.h ****  * |------------------------|---------|--------------------------|
 331:../drivers/fsl_sdhc.h ****  * |31                    12|11      6|05  |04  |03|02 |01 |00   |
 332:../drivers/fsl_sdhc.h ****  * |------------------------|---------|----|----|--|---|---|-----|
 333:../drivers/fsl_sdhc.h ****  * | address or data length | 000000  |Act2|Act1| 0|Int|End|Valid|
 334:../drivers/fsl_sdhc.h ****  * |------------------------|---------|----|----|--|---|---|-----|
 335:../drivers/fsl_sdhc.h ****  *
 336:../drivers/fsl_sdhc.h ****  *
 337:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|-------|-------------|
 338:../drivers/fsl_sdhc.h ****  * | Act2 | Act1 |     Comment     | 31-28 | 27 - 12     |
 339:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------|
 340:../drivers/fsl_sdhc.h ****  * |   0  |   0  | No op           | Don't care          |
 341:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|-------|-------------|
 342:../drivers/fsl_sdhc.h ****  * |   0  |   1  | Set data length |  0000 | Data Length |
 343:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|-------|-------------|
 344:../drivers/fsl_sdhc.h ****  * |   1  |   0  | Transfer data   | Data address        |
 345:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------|
 346:../drivers/fsl_sdhc.h ****  * |   1  |   1  | Link descriptor | Descriptor address  |
 347:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------|
 348:../drivers/fsl_sdhc.h ****  */
 349:../drivers/fsl_sdhc.h **** /*! @brief The bit shift for ADDRESS filed in ADMA1's descriptor */
 350:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_ADDRESS_SHIFT (12U)
 351:../drivers/fsl_sdhc.h **** /*! @brief The bit mask for ADDRESS field in ADMA1's descriptor */
 352:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_ADDRESS_MASK (0xFFFFFU)
 353:../drivers/fsl_sdhc.h **** /*! @brief The bit shift for LENGTH filed in ADMA1's descriptor */
 354:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_LENGTH_SHIFT (12U)
 355:../drivers/fsl_sdhc.h **** /*! @brief The mask for LENGTH field in ADMA1's descriptor */
 356:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_LENGTH_MASK (0xFFFFU)
 357:../drivers/fsl_sdhc.h **** /*! @brief The maximum value of LENGTH filed in ADMA1's descriptor */
 358:../drivers/fsl_sdhc.h **** #define SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY (SDHC_ADMA1_DESCRIPTOR_LENGTH_MASK + 1U)
 359:../drivers/fsl_sdhc.h **** 
 360:../drivers/fsl_sdhc.h **** /*! @brief The mask for the control/status field in ADMA1 descriptor */
 361:../drivers/fsl_sdhc.h **** enum _sdhc_adma1_descriptor_flag
 362:../drivers/fsl_sdhc.h **** {
 363:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorValidFlag = (1U << 0U),                     /*!< Valid flag */
 364:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorEndFlag = (1U << 1U),                       /*!< End flag */
 365:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorInterrupFlag = (1U << 2U),                  /*!< Interrupt flag */
 366:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorActivity1Flag = (1U << 4U),                 /*!< Activity 1 flag */
 367:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorActivity2Flag = (1U << 5U),                 /*!< Activity 2 flag */
 368:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeNop = (kSDHC_Adma1DescriptorValidFlag), /*!< No operation */
 369:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeTransfer =
 370:../drivers/fsl_sdhc.h ****         (kSDHC_Adma1DescriptorActivity2Flag | kSDHC_Adma1DescriptorValidFlag), /*!< Transfer data *
 371:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeLink = (kSDHC_Adma1DescriptorActivity1Flag | kSDHC_Adma1DescriptorActi
 372:../drivers/fsl_sdhc.h ****                                      kSDHC_Adma1DescriptorValidFlag), /*!< Link descriptor */
 373:../drivers/fsl_sdhc.h ****     kSDHC_Adma1DescriptorTypeSetLength =
 374:../drivers/fsl_sdhc.h ****         (kSDHC_Adma1DescriptorActivity1Flag | kSDHC_Adma1DescriptorValidFlag), /*!< Set data length
 375:../drivers/fsl_sdhc.h **** };
 376:../drivers/fsl_sdhc.h **** 
 377:../drivers/fsl_sdhc.h **** /* ADMA2 descriptor table
 378:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|--------------------------|
 379:../drivers/fsl_sdhc.h ****  * | Address field  |     Length    | Reserved    |         Attribute        |
 380:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|--------------------------|
 381:../drivers/fsl_sdhc.h ****  * |63            32|31           16|15         06|05  |04  |03|02 |01 |00   |
 382:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|----|----|--|---|---|-----|
 383:../drivers/fsl_sdhc.h ****  * | 32-bit address | 16-bit length | 0000000000  |Act2|Act1| 0|Int|End|Valid|
 384:../drivers/fsl_sdhc.h ****  * |----------------|---------------|-------------|----|----|--|---|---|-----|
 385:../drivers/fsl_sdhc.h ****  *
 386:../drivers/fsl_sdhc.h ****  *
 387:../drivers/fsl_sdhc.h ****  * | Act2 | Act1 |     Comment     | Operation                                                     
 388:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 389:../drivers/fsl_sdhc.h ****  * |   0  |   0  | No op           | Don't care                                                    
 390:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 391:../drivers/fsl_sdhc.h ****  * |   0  |   1  | Reserved        | Read this line and go to next one                             
 392:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 393:../drivers/fsl_sdhc.h ****  * |   1  |   0  | Transfer data   | Transfer data with address and length set in this descriptor l
 394:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 395:../drivers/fsl_sdhc.h ****  * |   1  |   1  | Link descriptor | Link to another descriptor                                    
 396:../drivers/fsl_sdhc.h ****  * |------|------|-----------------|---------------------------------------------------------------
 397:../drivers/fsl_sdhc.h ****  */
 398:../drivers/fsl_sdhc.h **** /*! @brief The bit shift for LENGTH field in ADMA2's descriptor */
 399:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_DESCRIPTOR_LENGTH_SHIFT (16U)
 400:../drivers/fsl_sdhc.h **** /*! @brief The bit mask for LENGTH field in ADMA2's descriptor */
 401:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_DESCRIPTOR_LENGTH_MASK (0xFFFFU)
 402:../drivers/fsl_sdhc.h **** /*! @brief The maximum value of LENGTH field in ADMA2's descriptor */
 403:../drivers/fsl_sdhc.h **** #define SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY (SDHC_ADMA2_DESCRIPTOR_LENGTH_MASK)
 404:../drivers/fsl_sdhc.h **** 
 405:../drivers/fsl_sdhc.h **** /*! @brief ADMA1 descriptor control and status mask */
 406:../drivers/fsl_sdhc.h **** enum _sdhc_adma2_descriptor_flag
 407:../drivers/fsl_sdhc.h **** {
 408:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorValidFlag = (1U << 0U),     /*!< Valid flag */
 409:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorEndFlag = (1U << 1U),       /*!< End flag */
 410:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorInterruptFlag = (1U << 2U), /*!< Interrupt flag */
 411:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorActivity1Flag = (1U << 4U), /*!< Activity 1 mask */
 412:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorActivity2Flag = (1U << 5U), /*!< Activity 2 mask */
 413:../drivers/fsl_sdhc.h **** 
 414:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeNop = (kSDHC_Adma2DescriptorValidFlag), /*!< No operation */
 415:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeReserved =
 416:../drivers/fsl_sdhc.h ****         (kSDHC_Adma2DescriptorActivity1Flag | kSDHC_Adma2DescriptorValidFlag), /*!< Reserved */
 417:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeTransfer =
 418:../drivers/fsl_sdhc.h ****         (kSDHC_Adma2DescriptorActivity2Flag | kSDHC_Adma2DescriptorValidFlag), /*!< Transfer type *
 419:../drivers/fsl_sdhc.h ****     kSDHC_Adma2DescriptorTypeLink = (kSDHC_Adma2DescriptorActivity1Flag | kSDHC_Adma2DescriptorActi
 420:../drivers/fsl_sdhc.h ****                                      kSDHC_Adma2DescriptorValidFlag), /*!< Link type */
 421:../drivers/fsl_sdhc.h **** };
 422:../drivers/fsl_sdhc.h **** 
 423:../drivers/fsl_sdhc.h **** /*! @brief Defines the adma1 descriptor structure. */
 424:../drivers/fsl_sdhc.h **** typedef uint32_t sdhc_adma1_descriptor_t;
 425:../drivers/fsl_sdhc.h **** 
 426:../drivers/fsl_sdhc.h **** /*! @brief Defines the ADMA2 descriptor structure. */
 427:../drivers/fsl_sdhc.h **** typedef struct _sdhc_adma2_descriptor
 428:../drivers/fsl_sdhc.h **** {
 429:../drivers/fsl_sdhc.h ****     uint32_t attribute;      /*!< The control and status field */
 430:../drivers/fsl_sdhc.h ****     const uint32_t *address; /*!< The address field */
 431:../drivers/fsl_sdhc.h **** } sdhc_adma2_descriptor_t;
 432:../drivers/fsl_sdhc.h **** 
 433:../drivers/fsl_sdhc.h **** /*!
 434:../drivers/fsl_sdhc.h ****  * @brief SDHC capability information.
 435:../drivers/fsl_sdhc.h ****  *
 436:../drivers/fsl_sdhc.h ****  * Defines a structure to save the capability information of SDHC.
 437:../drivers/fsl_sdhc.h ****  */
 438:../drivers/fsl_sdhc.h **** typedef struct _sdhc_capability
 439:../drivers/fsl_sdhc.h **** {
 440:../drivers/fsl_sdhc.h ****     uint32_t specVersion;    /*!< Specification version */
 441:../drivers/fsl_sdhc.h ****     uint32_t vendorVersion;  /*!< Vendor version */
 442:../drivers/fsl_sdhc.h ****     uint32_t maxBlockLength; /*!< Maximum block length united as byte */
 443:../drivers/fsl_sdhc.h ****     uint32_t maxBlockCount;  /*!< Maximum block count can be set one time */
 444:../drivers/fsl_sdhc.h ****     uint32_t flags;          /*!< Capability flags to indicate the support information(_sdhc_capabi
 445:../drivers/fsl_sdhc.h **** } sdhc_capability_t;
 446:../drivers/fsl_sdhc.h **** 
 447:../drivers/fsl_sdhc.h **** /*! @brief Card transfer configuration.
 448:../drivers/fsl_sdhc.h ****  *
 449:../drivers/fsl_sdhc.h ****  * Define structure to configure the transfer-related command index/argument/flags and data block
 450:../drivers/fsl_sdhc.h ****  * size/data block numbers. This structure needs to be filled each time a command is sent to the ca
 451:../drivers/fsl_sdhc.h ****  */
 452:../drivers/fsl_sdhc.h **** typedef struct _sdhc_transfer_config
 453:../drivers/fsl_sdhc.h **** {
 454:../drivers/fsl_sdhc.h ****     size_t dataBlockSize;     /*!< Data block size */
 455:../drivers/fsl_sdhc.h ****     uint32_t dataBlockCount;  /*!< Data block count */
 456:../drivers/fsl_sdhc.h ****     uint32_t commandArgument; /*!< Command argument */
 457:../drivers/fsl_sdhc.h ****     uint32_t commandIndex;    /*!< Command index */
 458:../drivers/fsl_sdhc.h ****     uint32_t flags;           /*!< Transfer flags(_sdhc_transfer_flag) */
 459:../drivers/fsl_sdhc.h **** } sdhc_transfer_config_t;
 460:../drivers/fsl_sdhc.h **** 
 461:../drivers/fsl_sdhc.h **** /*! @brief Data structure to configure the MMC boot feature */
 462:../drivers/fsl_sdhc.h **** typedef struct _sdhc_boot_config
 463:../drivers/fsl_sdhc.h **** {
 464:../drivers/fsl_sdhc.h ****     uint32_t ackTimeoutCount;      /*!< Timeout value for the boot ACK. The available range is 0 ~ 
 465:../drivers/fsl_sdhc.h ****     sdhc_boot_mode_t bootMode;     /*!< Boot mode selection. */
 466:../drivers/fsl_sdhc.h ****     uint32_t blockCount;           /*!< Stop at block gap value of automatic mode. Available range 
 467:../drivers/fsl_sdhc.h ****     bool enableBootAck;            /*!< Enable or disable boot ACK */
 468:../drivers/fsl_sdhc.h ****     bool enableBoot;               /*!< Enable or disable fast boot */
 469:../drivers/fsl_sdhc.h ****     bool enableAutoStopAtBlockGap; /*!< Enable or disable auto stop at block gap function in boot p
 470:../drivers/fsl_sdhc.h **** } sdhc_boot_config_t;
 471:../drivers/fsl_sdhc.h **** 
 472:../drivers/fsl_sdhc.h **** /*! @brief Data structure to initialize the SDHC */
 473:../drivers/fsl_sdhc.h **** typedef struct _sdhc_config
 474:../drivers/fsl_sdhc.h **** {
 475:../drivers/fsl_sdhc.h ****     bool cardDetectDat3;           /*!< Enable DAT3 as card detection pin */
 476:../drivers/fsl_sdhc.h ****     sdhc_endian_mode_t endianMode; /*!< Endian mode */
 477:../drivers/fsl_sdhc.h ****     sdhc_dma_mode_t dmaMode;       /*!< DMA mode */
 478:../drivers/fsl_sdhc.h ****     uint32_t readWatermarkLevel;   /*!< Watermark level for DMA read operation. Available range is 
 479:../drivers/fsl_sdhc.h ****     uint32_t writeWatermarkLevel;  /*!< Watermark level for DMA write operation. Available range is
 480:../drivers/fsl_sdhc.h **** } sdhc_config_t;
 481:../drivers/fsl_sdhc.h **** 
 482:../drivers/fsl_sdhc.h **** /*!
 483:../drivers/fsl_sdhc.h ****  * @brief Card data descriptor
 484:../drivers/fsl_sdhc.h ****  *
 485:../drivers/fsl_sdhc.h ****  * Defines a structure to contain data-related attribute. 'enableIgnoreError' is used for the case 
 486:../drivers/fsl_sdhc.h ****  * driver
 487:../drivers/fsl_sdhc.h ****  * want to ignore the error event to read/write all the data not to stop read/write immediately whe
 488:../drivers/fsl_sdhc.h ****  * happen for example bus testing procedure for MMC card.
 489:../drivers/fsl_sdhc.h ****  */
 490:../drivers/fsl_sdhc.h **** typedef struct _sdhc_data
 491:../drivers/fsl_sdhc.h **** {
 492:../drivers/fsl_sdhc.h ****     bool enableAutoCommand12; /*!< Enable auto CMD12 */
 493:../drivers/fsl_sdhc.h ****     bool enableIgnoreError;   /*!< Enable to ignore error event to read/write all the data */
 494:../drivers/fsl_sdhc.h ****     size_t blockSize;         /*!< Block size */
 495:../drivers/fsl_sdhc.h ****     uint32_t blockCount;      /*!< Block count */
 496:../drivers/fsl_sdhc.h ****     uint32_t *rxData;         /*!< Buffer to save data read */
 497:../drivers/fsl_sdhc.h ****     const uint32_t *txData;   /*!< Data buffer to write */
 498:../drivers/fsl_sdhc.h **** } sdhc_data_t;
 499:../drivers/fsl_sdhc.h **** 
 500:../drivers/fsl_sdhc.h **** /*!
 501:../drivers/fsl_sdhc.h ****  * @brief Card command descriptor
 502:../drivers/fsl_sdhc.h ****  *
 503:../drivers/fsl_sdhc.h ****  * Define card command-related attribute.
 504:../drivers/fsl_sdhc.h ****  */
 505:../drivers/fsl_sdhc.h **** typedef struct _sdhc_command
 506:../drivers/fsl_sdhc.h **** {
 507:../drivers/fsl_sdhc.h ****     uint32_t index;                         /*!< Command index */
 508:../drivers/fsl_sdhc.h ****     uint32_t argument;                      /*!< Command argument */
 509:../drivers/fsl_sdhc.h ****     sdhc_card_command_type_t type;          /*!< Command type */
 510:../drivers/fsl_sdhc.h ****     sdhc_card_response_type_t responseType; /*!< Command response type */
 511:../drivers/fsl_sdhc.h ****     uint32_t response[4U];                  /*!< Response for this command */
 512:../drivers/fsl_sdhc.h ****     uint32_t responseErrorFlags;            /*!< response error flag, the flag which need to check
 513:../drivers/fsl_sdhc.h ****                                                 the command reponse*/
 514:../drivers/fsl_sdhc.h **** } sdhc_command_t;
 515:../drivers/fsl_sdhc.h **** 
 516:../drivers/fsl_sdhc.h **** /*! @brief Transfer state */
 517:../drivers/fsl_sdhc.h **** typedef struct _sdhc_transfer
 518:../drivers/fsl_sdhc.h **** {
 519:../drivers/fsl_sdhc.h ****     sdhc_data_t *data;       /*!< Data to transfer */
 520:../drivers/fsl_sdhc.h ****     sdhc_command_t *command; /*!< Command to send */
 521:../drivers/fsl_sdhc.h **** } sdhc_transfer_t;
 522:../drivers/fsl_sdhc.h **** 
 523:../drivers/fsl_sdhc.h **** /*! @brief SDHC handle typedef */
 524:../drivers/fsl_sdhc.h **** typedef struct _sdhc_handle sdhc_handle_t;
 525:../drivers/fsl_sdhc.h **** 
 526:../drivers/fsl_sdhc.h **** /*! @brief SDHC callback functions. */
 527:../drivers/fsl_sdhc.h **** typedef struct _sdhc_transfer_callback
 528:../drivers/fsl_sdhc.h **** {
 529:../drivers/fsl_sdhc.h ****     void (*CardInserted)(SDHC_Type *base,
 530:../drivers/fsl_sdhc.h ****                          void *userData); /*!< Card inserted occurs when DAT3/CD pin is for card de
 531:../drivers/fsl_sdhc.h ****     void (*CardRemoved)(SDHC_Type *base, void *userData);   /*!< Card removed occurs */
 532:../drivers/fsl_sdhc.h ****     void (*SdioInterrupt)(SDHC_Type *base, void *userData); /*!< SDIO card interrupt occurs */
 533:../drivers/fsl_sdhc.h ****     void (*SdioBlockGap)(SDHC_Type *base, void *userData);  /*!< SDIO card stopped at block gap occ
 534:../drivers/fsl_sdhc.h ****     void (*TransferComplete)(SDHC_Type *base,
 535:../drivers/fsl_sdhc.h ****                              sdhc_handle_t *handle,
 536:../drivers/fsl_sdhc.h ****                              status_t status,
 537:../drivers/fsl_sdhc.h ****                              void *userData); /*!< Transfer complete callback */
 538:../drivers/fsl_sdhc.h **** } sdhc_transfer_callback_t;
 539:../drivers/fsl_sdhc.h **** 
 540:../drivers/fsl_sdhc.h **** /*!
 541:../drivers/fsl_sdhc.h ****  * @brief SDHC handle
 542:../drivers/fsl_sdhc.h ****  *
 543:../drivers/fsl_sdhc.h ****  * Defines the structure to save the SDHC state information and callback function. The detailed int
 544:../drivers/fsl_sdhc.h ****  * sending a command or transfering data can be obtained from the interruptFlags field by using the
 545:../drivers/fsl_sdhc.h ****  * sdhc_interrupt_flag_t.
 546:../drivers/fsl_sdhc.h ****  *
 547:../drivers/fsl_sdhc.h ****  * @note All the fields except interruptFlags and transferredWords must be allocated by the user.
 548:../drivers/fsl_sdhc.h ****  */
 549:../drivers/fsl_sdhc.h **** struct _sdhc_handle
 550:../drivers/fsl_sdhc.h **** {
 551:../drivers/fsl_sdhc.h ****     /* Transfer parameter */
 552:../drivers/fsl_sdhc.h ****     sdhc_data_t *volatile data;       /*!< Data to transfer */
 553:../drivers/fsl_sdhc.h ****     sdhc_command_t *volatile command; /*!< Command to send */
 554:../drivers/fsl_sdhc.h **** 
 555:../drivers/fsl_sdhc.h ****     /* Transfer status */
 556:../drivers/fsl_sdhc.h ****     volatile uint32_t interruptFlags;   /*!< Interrupt flags of last transaction */
 557:../drivers/fsl_sdhc.h ****     volatile uint32_t transferredWords; /*!< Words transferred by DATAPORT way */
 558:../drivers/fsl_sdhc.h **** 
 559:../drivers/fsl_sdhc.h ****     /* Callback functions */
 560:../drivers/fsl_sdhc.h ****     sdhc_transfer_callback_t callback; /*!< Callback function */
 561:../drivers/fsl_sdhc.h ****     void *userData;                    /*!< Parameter for transfer complete callback */
 562:../drivers/fsl_sdhc.h **** };
 563:../drivers/fsl_sdhc.h **** 
 564:../drivers/fsl_sdhc.h **** /*! @brief SDHC transfer function. */
 565:../drivers/fsl_sdhc.h **** typedef status_t (*sdhc_transfer_function_t)(SDHC_Type *base, sdhc_transfer_t *content);
 566:../drivers/fsl_sdhc.h **** 
 567:../drivers/fsl_sdhc.h **** /*! @brief SDHC host descriptor */
 568:../drivers/fsl_sdhc.h **** typedef struct _sdhc_host
 569:../drivers/fsl_sdhc.h **** {
 570:../drivers/fsl_sdhc.h ****     SDHC_Type *base;                   /*!< SDHC peripheral base address */
 571:../drivers/fsl_sdhc.h ****     uint32_t sourceClock_Hz;           /*!< SDHC source clock frequency united in Hz */
 572:../drivers/fsl_sdhc.h ****     sdhc_config_t config;              /*!< SDHC configuration */
 573:../drivers/fsl_sdhc.h ****     sdhc_capability_t capability;      /*!< SDHC capability information */
 574:../drivers/fsl_sdhc.h ****     sdhc_transfer_function_t transfer; /*!< SDHC transfer function */
 575:../drivers/fsl_sdhc.h **** } sdhc_host_t;
 576:../drivers/fsl_sdhc.h **** 
 577:../drivers/fsl_sdhc.h **** /*************************************************************************************************
 578:../drivers/fsl_sdhc.h ****  * API
 579:../drivers/fsl_sdhc.h ****  ************************************************************************************************/
 580:../drivers/fsl_sdhc.h **** #if defined(__cplusplus)
 581:../drivers/fsl_sdhc.h **** extern "C" {
 582:../drivers/fsl_sdhc.h **** #endif
 583:../drivers/fsl_sdhc.h **** 
 584:../drivers/fsl_sdhc.h **** /*!
 585:../drivers/fsl_sdhc.h ****  * @name Initialization and deinitialization
 586:../drivers/fsl_sdhc.h ****  * @{
 587:../drivers/fsl_sdhc.h ****  */
 588:../drivers/fsl_sdhc.h **** 
 589:../drivers/fsl_sdhc.h **** /*!
 590:../drivers/fsl_sdhc.h ****  * @brief SDHC module initialization function.
 591:../drivers/fsl_sdhc.h ****  *
 592:../drivers/fsl_sdhc.h ****  * Configures the SDHC according to the user configuration.
 593:../drivers/fsl_sdhc.h ****  *
 594:../drivers/fsl_sdhc.h ****  * Example:
 595:../drivers/fsl_sdhc.h ****    @code
 596:../drivers/fsl_sdhc.h ****    sdhc_config_t config;
 597:../drivers/fsl_sdhc.h ****    config.cardDetectDat3 = false;
 598:../drivers/fsl_sdhc.h ****    config.endianMode = kSDHC_EndianModeLittle;
 599:../drivers/fsl_sdhc.h ****    config.dmaMode = kSDHC_DmaModeAdma2;
 600:../drivers/fsl_sdhc.h ****    config.readWatermarkLevel = 128U;
 601:../drivers/fsl_sdhc.h ****    config.writeWatermarkLevel = 128U;
 602:../drivers/fsl_sdhc.h ****    SDHC_Init(SDHC, &config);
 603:../drivers/fsl_sdhc.h ****    @endcode
 604:../drivers/fsl_sdhc.h ****  *
 605:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 606:../drivers/fsl_sdhc.h ****  * @param config SDHC configuration information.
 607:../drivers/fsl_sdhc.h ****  * @retval kStatus_Success Operate successfully.
 608:../drivers/fsl_sdhc.h ****  */
 609:../drivers/fsl_sdhc.h **** void SDHC_Init(SDHC_Type *base, const sdhc_config_t *config);
 610:../drivers/fsl_sdhc.h **** 
 611:../drivers/fsl_sdhc.h **** /*!
 612:../drivers/fsl_sdhc.h ****  * @brief Deinitializes the SDHC.
 613:../drivers/fsl_sdhc.h ****  *
 614:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 615:../drivers/fsl_sdhc.h ****  */
 616:../drivers/fsl_sdhc.h **** void SDHC_Deinit(SDHC_Type *base);
 617:../drivers/fsl_sdhc.h **** 
 618:../drivers/fsl_sdhc.h **** /*!
 619:../drivers/fsl_sdhc.h ****  * @brief Resets the SDHC.
 620:../drivers/fsl_sdhc.h ****  *
 621:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 622:../drivers/fsl_sdhc.h ****  * @param mask The reset type mask(_sdhc_reset).
 623:../drivers/fsl_sdhc.h ****  * @param timeout Timeout for reset.
 624:../drivers/fsl_sdhc.h ****  * @retval true Reset successfully.
 625:../drivers/fsl_sdhc.h ****  * @retval false Reset failed.
 626:../drivers/fsl_sdhc.h ****  */
 627:../drivers/fsl_sdhc.h **** bool SDHC_Reset(SDHC_Type *base, uint32_t mask, uint32_t timeout);
 628:../drivers/fsl_sdhc.h **** 
 629:../drivers/fsl_sdhc.h **** /* @} */
 630:../drivers/fsl_sdhc.h **** 
 631:../drivers/fsl_sdhc.h **** /*!
 632:../drivers/fsl_sdhc.h ****  * @name DMA Control
 633:../drivers/fsl_sdhc.h ****  * @{
 634:../drivers/fsl_sdhc.h ****  */
 635:../drivers/fsl_sdhc.h **** 
 636:../drivers/fsl_sdhc.h **** /*!
 637:../drivers/fsl_sdhc.h ****  * @brief Sets the ADMA descriptor table configuration.
 638:../drivers/fsl_sdhc.h ****  *
 639:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 640:../drivers/fsl_sdhc.h ****  * @param dmaMode DMA mode.
 641:../drivers/fsl_sdhc.h ****  * @param table ADMA table address.
 642:../drivers/fsl_sdhc.h ****  * @param tableWords ADMA table buffer length united as Words.
 643:../drivers/fsl_sdhc.h ****  * @param data Data buffer address.
 644:../drivers/fsl_sdhc.h ****  * @param dataBytes Data length united as bytes.
 645:../drivers/fsl_sdhc.h ****  * @retval kStatus_OutOfRange ADMA descriptor table length isn't enough to describe data.
 646:../drivers/fsl_sdhc.h ****  * @retval kStatus_Success Operate successfully.
 647:../drivers/fsl_sdhc.h ****  */
 648:../drivers/fsl_sdhc.h **** status_t SDHC_SetAdmaTableConfig(SDHC_Type *base,
 649:../drivers/fsl_sdhc.h ****                                  sdhc_dma_mode_t dmaMode,
 650:../drivers/fsl_sdhc.h ****                                  uint32_t *table,
 651:../drivers/fsl_sdhc.h ****                                  uint32_t tableWords,
 652:../drivers/fsl_sdhc.h ****                                  const uint32_t *data,
 653:../drivers/fsl_sdhc.h ****                                  uint32_t dataBytes);
 654:../drivers/fsl_sdhc.h **** 
 655:../drivers/fsl_sdhc.h **** /* @} */
 656:../drivers/fsl_sdhc.h **** 
 657:../drivers/fsl_sdhc.h **** /*!
 658:../drivers/fsl_sdhc.h ****  * @name Interrupts
 659:../drivers/fsl_sdhc.h ****  * @{
 660:../drivers/fsl_sdhc.h ****  */
 661:../drivers/fsl_sdhc.h **** 
 662:../drivers/fsl_sdhc.h **** /*!
 663:../drivers/fsl_sdhc.h ****  * @brief Enables the interrupt status.
 664:../drivers/fsl_sdhc.h ****  *
 665:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 666:../drivers/fsl_sdhc.h ****  * @param mask Interrupt status flags mask(_sdhc_interrupt_status_flag).
 667:../drivers/fsl_sdhc.h ****  */
 668:../drivers/fsl_sdhc.h **** static inline void SDHC_EnableInterruptStatus(SDHC_Type *base, uint32_t mask)
 669:../drivers/fsl_sdhc.h **** {
 670:../drivers/fsl_sdhc.h ****     base->IRQSTATEN |= mask;
 671:../drivers/fsl_sdhc.h **** }
 672:../drivers/fsl_sdhc.h **** 
 673:../drivers/fsl_sdhc.h **** /*!
 674:../drivers/fsl_sdhc.h ****  * @brief Disables the interrupt status.
 675:../drivers/fsl_sdhc.h ****  *
 676:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 677:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 678:../drivers/fsl_sdhc.h ****  */
 679:../drivers/fsl_sdhc.h **** static inline void SDHC_DisableInterruptStatus(SDHC_Type *base, uint32_t mask)
 680:../drivers/fsl_sdhc.h **** {
 681:../drivers/fsl_sdhc.h ****     base->IRQSTATEN &= ~mask;
 682:../drivers/fsl_sdhc.h **** }
 683:../drivers/fsl_sdhc.h **** 
 684:../drivers/fsl_sdhc.h **** /*!
 685:../drivers/fsl_sdhc.h ****  * @brief Enables the interrupt signal corresponding to the interrupt status flag.
 686:../drivers/fsl_sdhc.h ****  *
 687:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 688:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 689:../drivers/fsl_sdhc.h ****  */
 690:../drivers/fsl_sdhc.h **** static inline void SDHC_EnableInterruptSignal(SDHC_Type *base, uint32_t mask)
 691:../drivers/fsl_sdhc.h **** {
 692:../drivers/fsl_sdhc.h ****     base->IRQSIGEN |= mask;
 693:../drivers/fsl_sdhc.h **** }
 694:../drivers/fsl_sdhc.h **** 
 695:../drivers/fsl_sdhc.h **** /*!
 696:../drivers/fsl_sdhc.h ****  * @brief Disables the interrupt signal corresponding to the interrupt status flag.
 697:../drivers/fsl_sdhc.h ****  *
 698:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 699:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 700:../drivers/fsl_sdhc.h ****  */
 701:../drivers/fsl_sdhc.h **** static inline void SDHC_DisableInterruptSignal(SDHC_Type *base, uint32_t mask)
 702:../drivers/fsl_sdhc.h **** {
 703:../drivers/fsl_sdhc.h ****     base->IRQSIGEN &= ~mask;
 704:../drivers/fsl_sdhc.h **** }
 705:../drivers/fsl_sdhc.h **** 
 706:../drivers/fsl_sdhc.h **** /* @} */
 707:../drivers/fsl_sdhc.h **** 
 708:../drivers/fsl_sdhc.h **** /*!
 709:../drivers/fsl_sdhc.h ****  * @name Status
 710:../drivers/fsl_sdhc.h ****  * @{
 711:../drivers/fsl_sdhc.h ****  */
 712:../drivers/fsl_sdhc.h **** 
 713:../drivers/fsl_sdhc.h **** /*!
 714:../drivers/fsl_sdhc.h ****  * @brief Gets the current interrupt status.
 715:../drivers/fsl_sdhc.h ****  *
 716:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 717:../drivers/fsl_sdhc.h ****  * @return Current interrupt status flags mask(_sdhc_interrupt_status_flag).
 718:../drivers/fsl_sdhc.h ****  */
 719:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetInterruptStatusFlags(SDHC_Type *base)
 720:../drivers/fsl_sdhc.h **** {
 721:../drivers/fsl_sdhc.h ****     return base->IRQSTAT;
 722:../drivers/fsl_sdhc.h **** }
 723:../drivers/fsl_sdhc.h **** 
 724:../drivers/fsl_sdhc.h **** /*!
 725:../drivers/fsl_sdhc.h ****  * @brief Clears a specified interrupt status.
 726:../drivers/fsl_sdhc.h ****  *
 727:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 728:../drivers/fsl_sdhc.h ****  * @param mask The interrupt status flags mask(_sdhc_interrupt_status_flag).
 729:../drivers/fsl_sdhc.h ****  */
 730:../drivers/fsl_sdhc.h **** static inline void SDHC_ClearInterruptStatusFlags(SDHC_Type *base, uint32_t mask)
 731:../drivers/fsl_sdhc.h **** {
 732:../drivers/fsl_sdhc.h ****     base->IRQSTAT = mask;
 733:../drivers/fsl_sdhc.h **** }
 734:../drivers/fsl_sdhc.h **** 
 735:../drivers/fsl_sdhc.h **** /*!
 736:../drivers/fsl_sdhc.h ****  * @brief Gets the status of auto command 12 error.
 737:../drivers/fsl_sdhc.h ****  *
 738:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 739:../drivers/fsl_sdhc.h ****  * @return Auto command 12 error status flags mask(_sdhc_auto_command12_error_status_flag).
 740:../drivers/fsl_sdhc.h ****  */
 741:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetAutoCommand12ErrorStatusFlags(SDHC_Type *base)
 742:../drivers/fsl_sdhc.h **** {
 743:../drivers/fsl_sdhc.h ****     return base->AC12ERR;
 744:../drivers/fsl_sdhc.h **** }
 745:../drivers/fsl_sdhc.h **** 
 746:../drivers/fsl_sdhc.h **** /*!
 747:../drivers/fsl_sdhc.h ****  * @brief Gets the status of the ADMA error.
 748:../drivers/fsl_sdhc.h ****  *
 749:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 750:../drivers/fsl_sdhc.h ****  * @return ADMA error status flags mask(_sdhc_adma_error_status_flag).
 751:../drivers/fsl_sdhc.h ****  */
 752:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetAdmaErrorStatusFlags(SDHC_Type *base)
 753:../drivers/fsl_sdhc.h **** {
 754:../drivers/fsl_sdhc.h ****     return base->ADMAES;
 755:../drivers/fsl_sdhc.h **** }
 756:../drivers/fsl_sdhc.h **** 
 757:../drivers/fsl_sdhc.h **** /*!
 758:../drivers/fsl_sdhc.h ****  * @brief Gets a present status.
 759:../drivers/fsl_sdhc.h ****  *
 760:../drivers/fsl_sdhc.h ****  * This function gets the present SDHC's status except for an interrupt status and an error status.
 761:../drivers/fsl_sdhc.h ****  *
 762:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 763:../drivers/fsl_sdhc.h ****  * @return Present SDHC's status flags mask(_sdhc_present_status_flag).
 764:../drivers/fsl_sdhc.h ****  */
 765:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetPresentStatusFlags(SDHC_Type *base)
 766:../drivers/fsl_sdhc.h **** {
 767:../drivers/fsl_sdhc.h ****     return base->PRSSTAT;
 768:../drivers/fsl_sdhc.h **** }
 769:../drivers/fsl_sdhc.h **** 
 770:../drivers/fsl_sdhc.h **** /* @} */
 771:../drivers/fsl_sdhc.h **** 
 772:../drivers/fsl_sdhc.h **** /*!
 773:../drivers/fsl_sdhc.h ****  * @name Bus Operations
 774:../drivers/fsl_sdhc.h ****  * @{
 775:../drivers/fsl_sdhc.h ****  */
 776:../drivers/fsl_sdhc.h **** 
 777:../drivers/fsl_sdhc.h **** /*!
 778:../drivers/fsl_sdhc.h ****  * @brief Gets the capability information.
 779:../drivers/fsl_sdhc.h ****  *
 780:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 781:../drivers/fsl_sdhc.h ****  * @param capability Structure to save capability information.
 782:../drivers/fsl_sdhc.h ****  */
 783:../drivers/fsl_sdhc.h **** void SDHC_GetCapability(SDHC_Type *base, sdhc_capability_t *capability);
 784:../drivers/fsl_sdhc.h **** 
 785:../drivers/fsl_sdhc.h **** /*!
 786:../drivers/fsl_sdhc.h ****  * @brief Enables or disables the SD bus clock.
 787:../drivers/fsl_sdhc.h ****  *
 788:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 789:../drivers/fsl_sdhc.h ****  * @param enable True to enable, false to disable.
 790:../drivers/fsl_sdhc.h ****  */
 791:../drivers/fsl_sdhc.h **** static inline void SDHC_EnableSdClock(SDHC_Type *base, bool enable)
 792:../drivers/fsl_sdhc.h **** {
 793:../drivers/fsl_sdhc.h ****     if (enable)
 794:../drivers/fsl_sdhc.h ****     {
 795:../drivers/fsl_sdhc.h ****         base->SYSCTL |= SDHC_SYSCTL_SDCLKEN_MASK;
 796:../drivers/fsl_sdhc.h ****     }
 797:../drivers/fsl_sdhc.h ****     else
 798:../drivers/fsl_sdhc.h ****     {
 799:../drivers/fsl_sdhc.h ****         base->SYSCTL &= ~SDHC_SYSCTL_SDCLKEN_MASK;
 800:../drivers/fsl_sdhc.h ****     }
 801:../drivers/fsl_sdhc.h **** }
 802:../drivers/fsl_sdhc.h **** 
 803:../drivers/fsl_sdhc.h **** /*!
 804:../drivers/fsl_sdhc.h ****  * @brief Sets the SD bus clock frequency.
 805:../drivers/fsl_sdhc.h ****  *
 806:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 807:../drivers/fsl_sdhc.h ****  * @param srcClock_Hz SDHC source clock frequency united in Hz.
 808:../drivers/fsl_sdhc.h ****  * @param busClock_Hz SD bus clock frequency united in Hz.
 809:../drivers/fsl_sdhc.h ****  *
 810:../drivers/fsl_sdhc.h ****  * @return The nearest frequency of busClock_Hz configured to SD bus.
 811:../drivers/fsl_sdhc.h ****  */
 812:../drivers/fsl_sdhc.h **** uint32_t SDHC_SetSdClock(SDHC_Type *base, uint32_t srcClock_Hz, uint32_t busClock_Hz);
 813:../drivers/fsl_sdhc.h **** 
 814:../drivers/fsl_sdhc.h **** /*!
 815:../drivers/fsl_sdhc.h ****  * @brief Sends 80 clocks to the card to set it to the active state.
 816:../drivers/fsl_sdhc.h ****  *
 817:../drivers/fsl_sdhc.h ****  * This function must be called each time the card is inserted to ensure that the card can receive 
 818:../drivers/fsl_sdhc.h ****  * correctly.
 819:../drivers/fsl_sdhc.h ****  *
 820:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 821:../drivers/fsl_sdhc.h ****  * @param timeout Timeout to initialize card.
 822:../drivers/fsl_sdhc.h ****  * @retval true Set card active successfully.
 823:../drivers/fsl_sdhc.h ****  * @retval false Set card active failed.
 824:../drivers/fsl_sdhc.h ****  */
 825:../drivers/fsl_sdhc.h **** bool SDHC_SetCardActive(SDHC_Type *base, uint32_t timeout);
 826:../drivers/fsl_sdhc.h **** 
 827:../drivers/fsl_sdhc.h **** /*!
 828:../drivers/fsl_sdhc.h ****  * @brief Sets the data transfer width.
 829:../drivers/fsl_sdhc.h ****  *
 830:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 831:../drivers/fsl_sdhc.h ****  * @param width Data transfer width.
 832:../drivers/fsl_sdhc.h ****  */
 833:../drivers/fsl_sdhc.h **** static inline void SDHC_SetDataBusWidth(SDHC_Type *base, sdhc_data_bus_width_t width)
 834:../drivers/fsl_sdhc.h **** {
 835:../drivers/fsl_sdhc.h ****     base->PROCTL = ((base->PROCTL & ~SDHC_PROCTL_DTW_MASK) | SDHC_PROCTL_DTW(width));
 836:../drivers/fsl_sdhc.h **** }
 837:../drivers/fsl_sdhc.h **** 
 838:../drivers/fsl_sdhc.h **** /*!
 839:../drivers/fsl_sdhc.h ****  * @brief detect card insert status.
 840:../drivers/fsl_sdhc.h ****  *
 841:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 842:../drivers/fsl_sdhc.h ****  * @param enable/disable flag
 843:../drivers/fsl_sdhc.h ****  */
 844:../drivers/fsl_sdhc.h **** static inline void SDHC_CardDetectByData3(SDHC_Type *base, bool enable)
 845:../drivers/fsl_sdhc.h **** {
 846:../drivers/fsl_sdhc.h ****     if (enable)
 847:../drivers/fsl_sdhc.h ****     {
 848:../drivers/fsl_sdhc.h ****         base->PROCTL |= SDHC_PROCTL_D3CD_MASK;
 849:../drivers/fsl_sdhc.h ****     }
 850:../drivers/fsl_sdhc.h ****     else
 851:../drivers/fsl_sdhc.h ****     {
 852:../drivers/fsl_sdhc.h ****         base->PROCTL &= ~SDHC_PROCTL_D3CD_MASK;
 853:../drivers/fsl_sdhc.h ****     }
 854:../drivers/fsl_sdhc.h **** }
 855:../drivers/fsl_sdhc.h **** 
 856:../drivers/fsl_sdhc.h **** /*!
 857:../drivers/fsl_sdhc.h ****  * @brief Sets the card transfer-related configuration.
 858:../drivers/fsl_sdhc.h ****  *
 859:../drivers/fsl_sdhc.h ****  * This function fills the card transfer-related command argument/transfer flag/data size. The comm
 860:../drivers/fsl_sdhc.h ****  by
 861:../drivers/fsl_sdhc.h ****  * SDHC after calling this function.
 862:../drivers/fsl_sdhc.h ****  *
 863:../drivers/fsl_sdhc.h ****  * Example:
 864:../drivers/fsl_sdhc.h ****    @code
 865:../drivers/fsl_sdhc.h ****    sdhc_transfer_config_t transferConfig;
 866:../drivers/fsl_sdhc.h ****    transferConfig.dataBlockSize = 512U;
 867:../drivers/fsl_sdhc.h ****    transferConfig.dataBlockCount = 2U;
 868:../drivers/fsl_sdhc.h ****    transferConfig.commandArgument = 0x01AAU;
 869:../drivers/fsl_sdhc.h ****    transferConfig.commandIndex = 8U;
 870:../drivers/fsl_sdhc.h ****    transferConfig.flags |= (kSDHC_EnableDmaFlag | kSDHC_EnableAutoCommand12Flag | kSDHC_MultipleBlo
 871:../drivers/fsl_sdhc.h ****    SDHC_SetTransferConfig(SDHC, &transferConfig);
 872:../drivers/fsl_sdhc.h ****    @endcode
 873:../drivers/fsl_sdhc.h ****  *
 874:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 875:../drivers/fsl_sdhc.h ****  * @param config Command configuration structure.
 876:../drivers/fsl_sdhc.h ****  */
 877:../drivers/fsl_sdhc.h **** void SDHC_SetTransferConfig(SDHC_Type *base, const sdhc_transfer_config_t *config);
 878:../drivers/fsl_sdhc.h **** 
 879:../drivers/fsl_sdhc.h **** /*!
 880:../drivers/fsl_sdhc.h ****  * @brief Gets the command response.
 881:../drivers/fsl_sdhc.h ****  *
 882:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 883:../drivers/fsl_sdhc.h ****  * @param index The index of response register, range from 0 to 3.
 884:../drivers/fsl_sdhc.h ****  * @return Response register transfer.
 885:../drivers/fsl_sdhc.h ****  */
 886:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_GetCommandResponse(SDHC_Type *base, uint32_t index)
 887:../drivers/fsl_sdhc.h **** {
 888:../drivers/fsl_sdhc.h ****     assert(index < 4U);
 889:../drivers/fsl_sdhc.h **** 
 890:../drivers/fsl_sdhc.h ****     return base->CMDRSP[index];
  55              		.loc 2 890 0
  56 000c 0369     		ldr	r3, [r0, #16]
  57              	.LVL3:
  58              	.LBE97:
  59              	.LBE96:
 371:../drivers/fsl_sdhc.c ****         if (command->responseType == kCARD_ResponseTypeR2)
  60              		.loc 1 371 0
  61 000e CB60     		str	r3, [r1, #12]
 372:../drivers/fsl_sdhc.c ****         {
  62              		.loc 1 372 0
  63 0010 032A     		cmp	r2, #3
  64 0012 F8D1     		bne	.L5
  65              	.LVL4:
  66              	.LBB98:
  67              	.LBB99:
  68              		.loc 2 890 0
  69 0014 4369     		ldr	r3, [r0, #20]
  70              	.LVL5:
  71              	.LBE99:
  72              	.LBE98:
 374:../drivers/fsl_sdhc.c ****             command->response[2U] = SDHC_GetCommandResponse(base, 2U);
  73              		.loc 1 374 0
  74 0016 0B61     		str	r3, [r1, #16]
  75              	.LVL6:
  76              	.LBB100:
  77              	.LBB101:
  78              		.loc 2 890 0
  79 0018 8369     		ldr	r3, [r0, #24]
  80              	.LVL7:
  81              	.LBE101:
  82              	.LBE100:
 375:../drivers/fsl_sdhc.c ****             command->response[3U] = SDHC_GetCommandResponse(base, 3U);
  83              		.loc 1 375 0
  84 001a 4B61     		str	r3, [r1, #20]
  85              	.LVL8:
 376:../drivers/fsl_sdhc.c **** 
  86              		.loc 1 376 0
  87 001c 0B46     		mov	r3, r1
  88              	.LBB102:
  89              	.LBB103:
  90              		.loc 2 890 0
  91 001e C069     		ldr	r0, [r0, #28]
  92              	.LVL9:
  93              	.LBE103:
  94              	.LBE102:
 376:../drivers/fsl_sdhc.c **** 
  95              		.loc 1 376 0
  96 0020 43F8180F 		str	r0, [r3, #24]!
  97              	.LVL10:
  98 0024 0420     		movs	r0, #4
  99              	.LVL11:
 100              	.L6:
 383:../drivers/fsl_sdhc.c ****                 if (i > 1U)
 101              		.loc 1 383 0
 102 0026 1C68     		ldr	r4, [r3]
 384:../drivers/fsl_sdhc.c ****                 {
 103              		.loc 1 384 0
 104 0028 0128     		cmp	r0, #1
 383:../drivers/fsl_sdhc.c ****                 if (i > 1U)
 105              		.loc 1 383 0
 106 002a 4FEA0424 		lsl	r4, r4, #8
 107 002e 43F80449 		str	r4, [r3], #-4
 384:../drivers/fsl_sdhc.c ****                 {
 108              		.loc 1 384 0
 109 0032 04D9     		bls	.L7
 386:../drivers/fsl_sdhc.c ****                 }
 110              		.loc 1 386 0
 111 0034 DD78     		ldrb	r5, [r3, #3]	@ zero_extendqisi2
 112 0036 2C43     		orrs	r4, r4, r5
 113 0038 5C60     		str	r4, [r3, #4]
 114              	.LVL12:
 115              	.L8:
 116 003a 0138     		subs	r0, r0, #1
 117              	.LVL13:
 118 003c F3E7     		b	.L6
 119              	.L7:
 120              	.LVL14:
 388:../drivers/fsl_sdhc.c ****         }
 121              		.loc 1 388 0
 122 003e 0028     		cmp	r0, #0
 123 0040 FBD1     		bne	.L8
 124 0042 E0E7     		b	.L5
 125              	.LVL15:
 126              	.L3:
 392:../drivers/fsl_sdhc.c ****         ((command->responseType == kCARD_ResponseTypeR1) || (command->responseType == kCARD_Respons
 127              		.loc 1 392 0 discriminator 1
 128 0044 082A     		cmp	r2, #8
 129 0046 0CD8     		bhi	.L10
 130 0048 4FF4A373 		mov	r3, #326
 131 004c 23FA02F2 		lsr	r2, r3, r2
 132 0050 D307     		lsls	r3, r2, #31
 133 0052 06D5     		bpl	.L10
 396:../drivers/fsl_sdhc.c ****         {
 134              		.loc 1 396 0
 135 0054 CB68     		ldr	r3, [r1, #12]
 398:../drivers/fsl_sdhc.c ****         }
 136              		.loc 1 398 0
 137 0056 1842     		tst	r0, r3
 138 0058 40F2A660 		movw	r0, #1702
 139 005c 08BF     		it	eq
 140 005e 0020     		moveq	r0, #0
 141 0060 D3E7     		b	.L1
 142              	.L10:
 402:../drivers/fsl_sdhc.c **** }
 143              		.loc 1 402 0
 144 0062 0020     		movs	r0, #0
 145 0064 D1E7     		b	.L1
 146              		.cfi_endproc
 147              	.LFE170:
 149              		.section	.text.SDHC_ReadDataPort,"ax",%progbits
 150              		.align	1
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu fpv4-sp-d16
 156              	SDHC_ReadDataPort:
 157              	.LFB171:
 404:../drivers/fsl_sdhc.c **** 
 405:../drivers/fsl_sdhc.c **** static uint32_t SDHC_ReadDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords)
 406:../drivers/fsl_sdhc.c **** {
 158              		.loc 1 406 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              	.LVL16:
 407:../drivers/fsl_sdhc.c ****     uint32_t i;
 408:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 409:../drivers/fsl_sdhc.c ****     uint32_t wordsCanBeRead; /* The words can be read at this time. */
 410:../drivers/fsl_sdhc.c ****     uint32_t readWatermark = ((base->WML & SDHC_WML_RDWML_MASK) >> SDHC_WML_RDWML_SHIFT);
 411:../drivers/fsl_sdhc.c **** 
 412:../drivers/fsl_sdhc.c ****     /*
 413:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 414:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 415:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 416:../drivers/fsl_sdhc.c ****        */
 417:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 163              		.loc 1 417 0
 164 0000 4B68     		ldr	r3, [r1, #4]
 406:../drivers/fsl_sdhc.c ****     uint32_t i;
 165              		.loc 1 406 0
 166 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 167              		.cfi_def_cfa_offset 20
 168              		.cfi_offset 4, -20
 169              		.cfi_offset 5, -16
 170              		.cfi_offset 6, -12
 171              		.cfi_offset 7, -8
 172              		.cfi_offset 14, -4
 173              		.loc 1 417 0
 174 0004 9D07     		lsls	r5, r3, #30
 418:../drivers/fsl_sdhc.c ****     {
 419:../drivers/fsl_sdhc.c ****         data->blockSize +=
 175              		.loc 1 419 0
 176 0006 1CBF     		itt	ne
 177 0008 23F00303 		bicne	r3, r3, #3
 178 000c 0433     		addne	r3, r3, #4
 410:../drivers/fsl_sdhc.c **** 
 179              		.loc 1 410 0
 180 000e 446C     		ldr	r4, [r0, #68]
 181              		.loc 1 419 0
 182 0010 18BF     		it	ne
 183 0012 4B60     		strne	r3, [r1, #4]
 420:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 421:../drivers/fsl_sdhc.c ****     }
 422:../drivers/fsl_sdhc.c **** 
 423:../drivers/fsl_sdhc.c ****     totalWords = ((data->blockCount * data->blockSize) / sizeof(uint32_t));
 184              		.loc 1 423 0
 185 0014 D1E90135 		ldrd	r3, r5, [r1, #4]
 186 0018 6B43     		muls	r3, r5, r3
 410:../drivers/fsl_sdhc.c **** 
 187              		.loc 1 410 0
 188 001a E4B2     		uxtb	r4, r4
 189              	.LVL17:
 190              		.loc 1 423 0
 191 001c 9B08     		lsrs	r3, r3, #2
 192              	.LVL18:
 424:../drivers/fsl_sdhc.c **** 
 425:../drivers/fsl_sdhc.c ****     /* If watermark level is equal or bigger than totalWords, transfers totalWords data. */
 426:../drivers/fsl_sdhc.c ****     if (readWatermark >= totalWords)
 193              		.loc 1 426 0
 194 001e 9C42     		cmp	r4, r3
 195 0020 03D2     		bcs	.L14
 427:../drivers/fsl_sdhc.c ****     {
 428:../drivers/fsl_sdhc.c ****         wordsCanBeRead = totalWords;
 429:../drivers/fsl_sdhc.c ****     }
 430:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is equal or bigger than
 431:../drivers/fsl_sdhc.c ****     transfers watermark level words. */
 432:../drivers/fsl_sdhc.c ****     else if ((readWatermark < totalWords) && ((totalWords - transferredWords) >= readWatermark))
 196              		.loc 1 432 0 discriminator 1
 197 0022 9B1A     		subs	r3, r3, r2
 198              	.LVL19:
 199 0024 A342     		cmp	r3, r4
 200 0026 28BF     		it	cs
 201 0028 2346     		movcs	r3, r4
 202              	.L14:
 203              	.LVL20:
 433:../drivers/fsl_sdhc.c ****     {
 434:../drivers/fsl_sdhc.c ****         wordsCanBeRead = readWatermark;
 435:../drivers/fsl_sdhc.c ****     }
 436:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is less than readWaterm
 437:../drivers/fsl_sdhc.c ****     words. */
 438:../drivers/fsl_sdhc.c ****     else
 439:../drivers/fsl_sdhc.c ****     {
 440:../drivers/fsl_sdhc.c ****         wordsCanBeRead = (totalWords - transferredWords);
 441:../drivers/fsl_sdhc.c ****     }
 442:../drivers/fsl_sdhc.c **** 
 443:../drivers/fsl_sdhc.c ****     i = 0U;
 204              		.loc 1 443 0
 205 002a 0024     		movs	r4, #0
 206              	.LVL21:
 207              	.L15:
 444:../drivers/fsl_sdhc.c ****     while (i < wordsCanBeRead)
 208              		.loc 1 444 0
 209 002c 9C42     		cmp	r4, r3
 210 002e 04EB0205 		add	r5, r4, r2
 211              	.LVL22:
 212 0032 01D1     		bne	.L16
 445:../drivers/fsl_sdhc.c ****     {
 446:../drivers/fsl_sdhc.c ****         data->rxData[transferredWords++] = SDHC_ReadData(base);
 447:../drivers/fsl_sdhc.c ****         i++;
 448:../drivers/fsl_sdhc.c ****     }
 449:../drivers/fsl_sdhc.c **** 
 450:../drivers/fsl_sdhc.c ****     return transferredWords;
 451:../drivers/fsl_sdhc.c **** }
 213              		.loc 1 451 0
 214 0034 2846     		mov	r0, r5
 215              	.LVL23:
 216 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 217              	.LVL24:
 218              	.L16:
 446:../drivers/fsl_sdhc.c ****         i++;
 219              		.loc 1 446 0
 220 0038 CE68     		ldr	r6, [r1, #12]
 221              	.LBB104:
 222              	.LBB105:
 891:../drivers/fsl_sdhc.h **** }
 892:../drivers/fsl_sdhc.h **** 
 893:../drivers/fsl_sdhc.h **** /*!
 894:../drivers/fsl_sdhc.h ****  * @brief Fills the the data port.
 895:../drivers/fsl_sdhc.h ****  *
 896:../drivers/fsl_sdhc.h ****  * This function is used to implement the data transfer by Data Port instead of DMA.
 897:../drivers/fsl_sdhc.h ****  *
 898:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 899:../drivers/fsl_sdhc.h ****  * @param data The data about to be sent.
 900:../drivers/fsl_sdhc.h ****  */
 901:../drivers/fsl_sdhc.h **** static inline void SDHC_WriteData(SDHC_Type *base, uint32_t data)
 902:../drivers/fsl_sdhc.h **** {
 903:../drivers/fsl_sdhc.h ****     base->DATPORT = data;
 904:../drivers/fsl_sdhc.h **** }
 905:../drivers/fsl_sdhc.h **** 
 906:../drivers/fsl_sdhc.h **** /*!
 907:../drivers/fsl_sdhc.h ****  * @brief Retrieves the data from the data port.
 908:../drivers/fsl_sdhc.h ****  *
 909:../drivers/fsl_sdhc.h ****  * This function is used to implement the data transfer by Data Port instead of DMA.
 910:../drivers/fsl_sdhc.h ****  *
 911:../drivers/fsl_sdhc.h ****  * @param base SDHC peripheral base address.
 912:../drivers/fsl_sdhc.h ****  * @return The data has been read.
 913:../drivers/fsl_sdhc.h ****  */
 914:../drivers/fsl_sdhc.h **** static inline uint32_t SDHC_ReadData(SDHC_Type *base)
 915:../drivers/fsl_sdhc.h **** {
 916:../drivers/fsl_sdhc.h ****     return base->DATPORT;
 223              		.loc 2 916 0
 224 003a 076A     		ldr	r7, [r0, #32]
 225              	.LVL25:
 226              	.LBE105:
 227              	.LBE104:
 446:../drivers/fsl_sdhc.c ****         i++;
 228              		.loc 1 446 0
 229 003c 46F82570 		str	r7, [r6, r5, lsl #2]
 447:../drivers/fsl_sdhc.c ****     }
 230              		.loc 1 447 0
 231 0040 0134     		adds	r4, r4, #1
 232              	.LVL26:
 233 0042 F3E7     		b	.L15
 234              		.cfi_endproc
 235              	.LFE171:
 237              		.section	.text.SDHC_WriteDataPort,"ax",%progbits
 238              		.align	1
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu fpv4-sp-d16
 244              	SDHC_WriteDataPort:
 245              	.LFB173:
 452:../drivers/fsl_sdhc.c **** 
 453:../drivers/fsl_sdhc.c **** static status_t SDHC_ReadByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data)
 454:../drivers/fsl_sdhc.c **** {
 455:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 456:../drivers/fsl_sdhc.c ****     uint32_t transferredWords = 0U;
 457:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 458:../drivers/fsl_sdhc.c **** 
 459:../drivers/fsl_sdhc.c ****     /*
 460:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 461:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 462:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 463:../drivers/fsl_sdhc.c ****        */
 464:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 465:../drivers/fsl_sdhc.c ****     {
 466:../drivers/fsl_sdhc.c ****         data->blockSize +=
 467:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 468:../drivers/fsl_sdhc.c ****     }
 469:../drivers/fsl_sdhc.c **** 
 470:../drivers/fsl_sdhc.c ****     totalWords = ((data->blockCount * data->blockSize) / sizeof(uint32_t));
 471:../drivers/fsl_sdhc.c **** 
 472:../drivers/fsl_sdhc.c ****     while ((error == kStatus_Success) && (transferredWords < totalWords))
 473:../drivers/fsl_sdhc.c ****     {
 474:../drivers/fsl_sdhc.c ****         while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_BufferReadReadyFlag | kSDHC_DataErrorF
 475:../drivers/fsl_sdhc.c ****         {
 476:../drivers/fsl_sdhc.c ****         }
 477:../drivers/fsl_sdhc.c **** 
 478:../drivers/fsl_sdhc.c ****         if (SDHC_GetInterruptStatusFlags(base) & kSDHC_DataErrorFlag)
 479:../drivers/fsl_sdhc.c ****         {
 480:../drivers/fsl_sdhc.c ****             if (!(data->enableIgnoreError))
 481:../drivers/fsl_sdhc.c ****             {
 482:../drivers/fsl_sdhc.c ****                 error = kStatus_Fail;
 483:../drivers/fsl_sdhc.c ****             }
 484:../drivers/fsl_sdhc.c ****         }
 485:../drivers/fsl_sdhc.c ****         if (error == kStatus_Success)
 486:../drivers/fsl_sdhc.c ****         {
 487:../drivers/fsl_sdhc.c ****             transferredWords = SDHC_ReadDataPort(base, data, transferredWords);
 488:../drivers/fsl_sdhc.c ****         }
 489:../drivers/fsl_sdhc.c ****         /* clear buffer ready and error */
 490:../drivers/fsl_sdhc.c ****         SDHC_ClearInterruptStatusFlags(base, kSDHC_BufferReadReadyFlag | kSDHC_DataErrorFlag);
 491:../drivers/fsl_sdhc.c ****     }
 492:../drivers/fsl_sdhc.c **** 
 493:../drivers/fsl_sdhc.c ****     /* Clear data complete flag after the last read operation. */
 494:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag);
 495:../drivers/fsl_sdhc.c **** 
 496:../drivers/fsl_sdhc.c ****     return error;
 497:../drivers/fsl_sdhc.c **** }
 498:../drivers/fsl_sdhc.c **** 
 499:../drivers/fsl_sdhc.c **** static uint32_t SDHC_WriteDataPort(SDHC_Type *base, sdhc_data_t *data, uint32_t transferredWords)
 500:../drivers/fsl_sdhc.c **** {
 246              		.loc 1 500 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              	.LVL27:
 501:../drivers/fsl_sdhc.c ****     uint32_t i;
 502:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 503:../drivers/fsl_sdhc.c ****     uint32_t wordsCanBeWrote; /* Words can be wrote at this time. */
 504:../drivers/fsl_sdhc.c ****     uint32_t writeWatermark = ((base->WML & SDHC_WML_WRWML_MASK) >> SDHC_WML_WRWML_SHIFT);
 505:../drivers/fsl_sdhc.c **** 
 506:../drivers/fsl_sdhc.c ****     /*
 507:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 508:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 509:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 510:../drivers/fsl_sdhc.c ****        */
 511:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 251              		.loc 1 511 0
 252 0000 4B68     		ldr	r3, [r1, #4]
 500:../drivers/fsl_sdhc.c ****     uint32_t i;
 253              		.loc 1 500 0
 254 0002 70B5     		push	{r4, r5, r6, lr}
 255              		.cfi_def_cfa_offset 16
 256              		.cfi_offset 4, -16
 257              		.cfi_offset 5, -12
 258              		.cfi_offset 6, -8
 259              		.cfi_offset 14, -4
 260              		.loc 1 511 0
 261 0004 9D07     		lsls	r5, r3, #30
 512:../drivers/fsl_sdhc.c ****     {
 513:../drivers/fsl_sdhc.c ****         data->blockSize +=
 262              		.loc 1 513 0
 263 0006 1CBF     		itt	ne
 264 0008 23F00303 		bicne	r3, r3, #3
 265 000c 0433     		addne	r3, r3, #4
 504:../drivers/fsl_sdhc.c **** 
 266              		.loc 1 504 0
 267 000e 446C     		ldr	r4, [r0, #68]
 268              		.loc 1 513 0
 269 0010 18BF     		it	ne
 270 0012 4B60     		strne	r3, [r1, #4]
 514:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 515:../drivers/fsl_sdhc.c ****     }
 516:../drivers/fsl_sdhc.c **** 
 517:../drivers/fsl_sdhc.c ****     totalWords = ((data->blockCount * data->blockSize) / sizeof(uint32_t));
 271              		.loc 1 517 0
 272 0014 D1E90135 		ldrd	r3, r5, [r1, #4]
 273 0018 6B43     		muls	r3, r5, r3
 504:../drivers/fsl_sdhc.c **** 
 274              		.loc 1 504 0
 275 001a C4F30744 		ubfx	r4, r4, #16, #8
 276              	.LVL28:
 277              		.loc 1 517 0
 278 001e 9B08     		lsrs	r3, r3, #2
 279              	.LVL29:
 518:../drivers/fsl_sdhc.c **** 
 519:../drivers/fsl_sdhc.c ****     /* If watermark level is equal or bigger than totalWords, transfers totalWords data.*/
 520:../drivers/fsl_sdhc.c ****     if (writeWatermark >= totalWords)
 280              		.loc 1 520 0
 281 0020 9C42     		cmp	r4, r3
 282 0022 03D2     		bcs	.L22
 521:../drivers/fsl_sdhc.c ****     {
 522:../drivers/fsl_sdhc.c ****         wordsCanBeWrote = totalWords;
 523:../drivers/fsl_sdhc.c ****     }
 524:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is equal or bigger than
 525:../drivers/fsl_sdhc.c ****     transfers watermark level words. */
 526:../drivers/fsl_sdhc.c ****     else if ((writeWatermark < totalWords) && ((totalWords - transferredWords) >= writeWatermark))
 283              		.loc 1 526 0 discriminator 1
 284 0024 9B1A     		subs	r3, r3, r2
 285              	.LVL30:
 286 0026 A342     		cmp	r3, r4
 287 0028 28BF     		it	cs
 288 002a 2346     		movcs	r3, r4
 289              	.L22:
 290              	.LVL31:
 527:../drivers/fsl_sdhc.c ****     {
 528:../drivers/fsl_sdhc.c ****         wordsCanBeWrote = writeWatermark;
 529:../drivers/fsl_sdhc.c ****     }
 530:../drivers/fsl_sdhc.c ****     /* If watermark level is less than totalWords and left words to be sent is less than watermark,
 531:../drivers/fsl_sdhc.c ****     words. */
 532:../drivers/fsl_sdhc.c ****     else
 533:../drivers/fsl_sdhc.c ****     {
 534:../drivers/fsl_sdhc.c ****         wordsCanBeWrote = (totalWords - transferredWords);
 535:../drivers/fsl_sdhc.c ****     }
 536:../drivers/fsl_sdhc.c **** 
 537:../drivers/fsl_sdhc.c ****     i = 0U;
 291              		.loc 1 537 0
 292 002c 0024     		movs	r4, #0
 293              	.LVL32:
 294              	.L23:
 538:../drivers/fsl_sdhc.c ****     while (i < wordsCanBeWrote)
 295              		.loc 1 538 0
 296 002e 9C42     		cmp	r4, r3
 297 0030 04EB0205 		add	r5, r4, r2
 298              	.LVL33:
 299 0034 01D1     		bne	.L24
 539:../drivers/fsl_sdhc.c ****     {
 540:../drivers/fsl_sdhc.c ****         SDHC_WriteData(base, data->txData[transferredWords++]);
 541:../drivers/fsl_sdhc.c ****         i++;
 542:../drivers/fsl_sdhc.c ****     }
 543:../drivers/fsl_sdhc.c **** 
 544:../drivers/fsl_sdhc.c ****     return transferredWords;
 545:../drivers/fsl_sdhc.c **** }
 300              		.loc 1 545 0
 301 0036 2846     		mov	r0, r5
 302              	.LVL34:
 303 0038 70BD     		pop	{r4, r5, r6, pc}
 304              	.LVL35:
 305              	.L24:
 540:../drivers/fsl_sdhc.c ****         i++;
 306              		.loc 1 540 0
 307 003a 0E69     		ldr	r6, [r1, #16]
 308 003c 56F82550 		ldr	r5, [r6, r5, lsl #2]
 309              	.LVL36:
 310              	.LBB106:
 311              	.LBB107:
 903:../drivers/fsl_sdhc.h **** }
 312              		.loc 2 903 0
 313 0040 0562     		str	r5, [r0, #32]
 314              	.LVL37:
 315              	.LBE107:
 316              	.LBE106:
 541:../drivers/fsl_sdhc.c ****     }
 317              		.loc 1 541 0
 318 0042 0134     		adds	r4, r4, #1
 319              	.LVL38:
 320 0044 F3E7     		b	.L23
 321              		.cfi_endproc
 322              	.LFE173:
 324              		.section	.text.SDHC_TransferHandleIRQ,"ax",%progbits
 325              		.align	1
 326              		.global	SDHC_TransferHandleIRQ
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv4-sp-d16
 332              	SDHC_TransferHandleIRQ:
 333              	.LFB197:
 546:../drivers/fsl_sdhc.c **** 
 547:../drivers/fsl_sdhc.c **** static status_t SDHC_WriteByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data)
 548:../drivers/fsl_sdhc.c **** {
 549:../drivers/fsl_sdhc.c ****     uint32_t totalWords;
 550:../drivers/fsl_sdhc.c ****     uint32_t transferredWords = 0U;
 551:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 552:../drivers/fsl_sdhc.c **** 
 553:../drivers/fsl_sdhc.c ****     /*
 554:../drivers/fsl_sdhc.c ****        * Add non aligned access support ,user need make sure your buffer size is big
 555:../drivers/fsl_sdhc.c ****        * enough to hold the data,in other words,user need make sure the buffer size
 556:../drivers/fsl_sdhc.c ****        * is 4 byte aligned
 557:../drivers/fsl_sdhc.c ****        */
 558:../drivers/fsl_sdhc.c ****     if (data->blockSize % sizeof(uint32_t) != 0U)
 559:../drivers/fsl_sdhc.c ****     {
 560:../drivers/fsl_sdhc.c ****         data->blockSize +=
 561:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 562:../drivers/fsl_sdhc.c ****     }
 563:../drivers/fsl_sdhc.c **** 
 564:../drivers/fsl_sdhc.c ****     totalWords = (data->blockCount * data->blockSize) / sizeof(uint32_t);
 565:../drivers/fsl_sdhc.c **** 
 566:../drivers/fsl_sdhc.c ****     while ((error == kStatus_Success) && (transferredWords < totalWords))
 567:../drivers/fsl_sdhc.c ****     {
 568:../drivers/fsl_sdhc.c ****         while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_BufferWriteReadyFlag | kSDHC_DataError
 569:../drivers/fsl_sdhc.c ****         {
 570:../drivers/fsl_sdhc.c ****         }
 571:../drivers/fsl_sdhc.c **** 
 572:../drivers/fsl_sdhc.c ****         if (SDHC_GetInterruptStatusFlags(base) & kSDHC_DataErrorFlag)
 573:../drivers/fsl_sdhc.c ****         {
 574:../drivers/fsl_sdhc.c ****             if (!(data->enableIgnoreError))
 575:../drivers/fsl_sdhc.c ****             {
 576:../drivers/fsl_sdhc.c ****                 error = kStatus_Fail;
 577:../drivers/fsl_sdhc.c ****             }
 578:../drivers/fsl_sdhc.c ****         }
 579:../drivers/fsl_sdhc.c ****         if (error == kStatus_Success)
 580:../drivers/fsl_sdhc.c ****         {
 581:../drivers/fsl_sdhc.c ****             transferredWords = SDHC_WriteDataPort(base, data, transferredWords);
 582:../drivers/fsl_sdhc.c ****         }
 583:../drivers/fsl_sdhc.c **** 
 584:../drivers/fsl_sdhc.c ****         /* Clear buffer enable flag to trigger transfer. Clear error flag when SDHC encounter error
 585:../drivers/fsl_sdhc.c ****         SDHC_ClearInterruptStatusFlags(base, (kSDHC_BufferWriteReadyFlag | kSDHC_DataErrorFlag));
 586:../drivers/fsl_sdhc.c ****     }
 587:../drivers/fsl_sdhc.c **** 
 588:../drivers/fsl_sdhc.c ****     /* Wait write data complete or data transfer error after the last writing operation. */
 589:../drivers/fsl_sdhc.c ****     while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag)))
 590:../drivers/fsl_sdhc.c ****     {
 591:../drivers/fsl_sdhc.c ****     }
 592:../drivers/fsl_sdhc.c ****     if (SDHC_GetInterruptStatusFlags(base) & kSDHC_DataErrorFlag)
 593:../drivers/fsl_sdhc.c ****     {
 594:../drivers/fsl_sdhc.c ****         if (!(data->enableIgnoreError))
 595:../drivers/fsl_sdhc.c ****         {
 596:../drivers/fsl_sdhc.c ****             error = kStatus_Fail;
 597:../drivers/fsl_sdhc.c ****         }
 598:../drivers/fsl_sdhc.c ****     }
 599:../drivers/fsl_sdhc.c **** 
 600:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, (kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag));
 601:../drivers/fsl_sdhc.c **** 
 602:../drivers/fsl_sdhc.c ****     return error;
 603:../drivers/fsl_sdhc.c **** }
 604:../drivers/fsl_sdhc.c **** 
 605:../drivers/fsl_sdhc.c **** static status_t SDHC_SendCommandBlocking(SDHC_Type *base, sdhc_command_t *command)
 606:../drivers/fsl_sdhc.c **** {
 607:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 608:../drivers/fsl_sdhc.c **** 
 609:../drivers/fsl_sdhc.c ****     /* Wait command complete or SDHC encounters error. */
 610:../drivers/fsl_sdhc.c ****     while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_CommandCompleteFlag | kSDHC_CommandErrorFl
 611:../drivers/fsl_sdhc.c ****     {
 612:../drivers/fsl_sdhc.c ****     }
 613:../drivers/fsl_sdhc.c **** 
 614:../drivers/fsl_sdhc.c ****     if (SDHC_GetInterruptStatusFlags(base) & kSDHC_CommandErrorFlag)
 615:../drivers/fsl_sdhc.c ****     {
 616:../drivers/fsl_sdhc.c ****         error = kStatus_Fail;
 617:../drivers/fsl_sdhc.c ****     }
 618:../drivers/fsl_sdhc.c ****     /* Receive response when command completes successfully. */
 619:../drivers/fsl_sdhc.c ****     if (error == kStatus_Success)
 620:../drivers/fsl_sdhc.c ****     {
 621:../drivers/fsl_sdhc.c ****         error = SDHC_ReceiveCommandResponse(base, command);
 622:../drivers/fsl_sdhc.c ****     }
 623:../drivers/fsl_sdhc.c **** 
 624:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, (kSDHC_CommandCompleteFlag | kSDHC_CommandErrorFlag));
 625:../drivers/fsl_sdhc.c **** 
 626:../drivers/fsl_sdhc.c ****     return error;
 627:../drivers/fsl_sdhc.c **** }
 628:../drivers/fsl_sdhc.c **** 
 629:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByDataPortBlocking(SDHC_Type *base, sdhc_data_t *data)
 630:../drivers/fsl_sdhc.c **** {
 631:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 632:../drivers/fsl_sdhc.c **** 
 633:../drivers/fsl_sdhc.c ****     if (data->rxData)
 634:../drivers/fsl_sdhc.c ****     {
 635:../drivers/fsl_sdhc.c ****         error = SDHC_ReadByDataPortBlocking(base, data);
 636:../drivers/fsl_sdhc.c ****     }
 637:../drivers/fsl_sdhc.c ****     else
 638:../drivers/fsl_sdhc.c ****     {
 639:../drivers/fsl_sdhc.c ****         error = SDHC_WriteByDataPortBlocking(base, data);
 640:../drivers/fsl_sdhc.c ****     }
 641:../drivers/fsl_sdhc.c **** 
 642:../drivers/fsl_sdhc.c ****     return error;
 643:../drivers/fsl_sdhc.c **** }
 644:../drivers/fsl_sdhc.c **** 
 645:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferByAdma2Blocking(SDHC_Type *base, sdhc_data_t *data)
 646:../drivers/fsl_sdhc.c **** {
 647:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 648:../drivers/fsl_sdhc.c **** 
 649:../drivers/fsl_sdhc.c ****     /* Wait data complete or SDHC encounters error. */
 650:../drivers/fsl_sdhc.c ****     while (!(SDHC_GetInterruptStatusFlags(base) & (kSDHC_DataCompleteFlag | kSDHC_DataErrorFlag | k
 651:../drivers/fsl_sdhc.c ****     {
 652:../drivers/fsl_sdhc.c ****     }
 653:../drivers/fsl_sdhc.c ****     if (SDHC_GetInterruptStatusFlags(base) & (kSDHC_DataErrorFlag | kSDHC_DmaErrorFlag))
 654:../drivers/fsl_sdhc.c ****     {
 655:../drivers/fsl_sdhc.c ****         if (!(data->enableIgnoreError))
 656:../drivers/fsl_sdhc.c ****         {
 657:../drivers/fsl_sdhc.c ****             error = kStatus_Fail;
 658:../drivers/fsl_sdhc.c ****         }
 659:../drivers/fsl_sdhc.c ****     }
 660:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(
 661:../drivers/fsl_sdhc.c ****         base, (kSDHC_DataCompleteFlag | kSDHC_DmaCompleteFlag | kSDHC_DataErrorFlag | kSDHC_DmaErro
 662:../drivers/fsl_sdhc.c ****     return error;
 663:../drivers/fsl_sdhc.c **** }
 664:../drivers/fsl_sdhc.c **** 
 665:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 666:../drivers/fsl_sdhc.c **** #define SDHC_TransferByAdma1Blocking(base, data) SDHC_TransferByAdma2Blocking(base, data)
 667:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
 668:../drivers/fsl_sdhc.c **** 
 669:../drivers/fsl_sdhc.c **** static status_t SDHC_TransferDataBlocking(sdhc_dma_mode_t dmaMode, SDHC_Type *base, sdhc_data_t *da
 670:../drivers/fsl_sdhc.c **** {
 671:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 672:../drivers/fsl_sdhc.c **** 
 673:../drivers/fsl_sdhc.c ****     switch (dmaMode)
 674:../drivers/fsl_sdhc.c ****     {
 675:../drivers/fsl_sdhc.c ****         case kSDHC_DmaModeNo:
 676:../drivers/fsl_sdhc.c ****             error = SDHC_TransferByDataPortBlocking(base, data);
 677:../drivers/fsl_sdhc.c ****             break;
 678:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 679:../drivers/fsl_sdhc.c ****         case kSDHC_DmaModeAdma1:
 680:../drivers/fsl_sdhc.c ****             error = SDHC_TransferByAdma1Blocking(base, data);
 681:../drivers/fsl_sdhc.c ****             break;
 682:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
 683:../drivers/fsl_sdhc.c ****         case kSDHC_DmaModeAdma2:
 684:../drivers/fsl_sdhc.c ****             error = SDHC_TransferByAdma2Blocking(base, data);
 685:../drivers/fsl_sdhc.c ****             break;
 686:../drivers/fsl_sdhc.c ****         default:
 687:../drivers/fsl_sdhc.c ****             error = kStatus_InvalidArgument;
 688:../drivers/fsl_sdhc.c ****             break;
 689:../drivers/fsl_sdhc.c ****     }
 690:../drivers/fsl_sdhc.c **** 
 691:../drivers/fsl_sdhc.c ****     return error;
 692:../drivers/fsl_sdhc.c **** }
 693:../drivers/fsl_sdhc.c **** 
 694:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCardDetect(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interrup
 695:../drivers/fsl_sdhc.c **** {
 696:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CardInsertionFlag)
 697:../drivers/fsl_sdhc.c ****     {
 698:../drivers/fsl_sdhc.c ****         if (handle->callback.CardInserted)
 699:../drivers/fsl_sdhc.c ****         {
 700:../drivers/fsl_sdhc.c ****             handle->callback.CardInserted(base, handle->userData);
 701:../drivers/fsl_sdhc.c ****         }
 702:../drivers/fsl_sdhc.c ****     }
 703:../drivers/fsl_sdhc.c ****     else
 704:../drivers/fsl_sdhc.c ****     {
 705:../drivers/fsl_sdhc.c ****         if (handle->callback.CardRemoved)
 706:../drivers/fsl_sdhc.c ****         {
 707:../drivers/fsl_sdhc.c ****             handle->callback.CardRemoved(base, handle->userData);
 708:../drivers/fsl_sdhc.c ****         }
 709:../drivers/fsl_sdhc.c ****     }
 710:../drivers/fsl_sdhc.c **** }
 711:../drivers/fsl_sdhc.c **** 
 712:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleCommand(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFl
 713:../drivers/fsl_sdhc.c **** {
 714:../drivers/fsl_sdhc.c ****     assert(handle->command);
 715:../drivers/fsl_sdhc.c **** 
 716:../drivers/fsl_sdhc.c ****     if ((interruptFlags & kSDHC_CommandErrorFlag) && (!(handle->data)) && (handle->callback.Transfe
 717:../drivers/fsl_sdhc.c ****     {
 718:../drivers/fsl_sdhc.c ****         handle->callback.TransferComplete(base, handle, kStatus_SDHC_SendCommandFailed, handle->use
 719:../drivers/fsl_sdhc.c ****     }
 720:../drivers/fsl_sdhc.c ****     else
 721:../drivers/fsl_sdhc.c ****     {
 722:../drivers/fsl_sdhc.c ****         /* Receive response */
 723:../drivers/fsl_sdhc.c ****         SDHC_ReceiveCommandResponse(base, handle->command);
 724:../drivers/fsl_sdhc.c ****         if ((!(handle->data)) && (handle->callback.TransferComplete))
 725:../drivers/fsl_sdhc.c ****         {
 726:../drivers/fsl_sdhc.c ****             handle->callback.TransferComplete(base, handle, kStatus_Success, handle->userData);
 727:../drivers/fsl_sdhc.c ****         }
 728:../drivers/fsl_sdhc.c ****     }
 729:../drivers/fsl_sdhc.c **** }
 730:../drivers/fsl_sdhc.c **** 
 731:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleData(SDHC_Type *base, sdhc_handle_t *handle, uint32_t interruptFlags
 732:../drivers/fsl_sdhc.c **** {
 733:../drivers/fsl_sdhc.c ****     assert(handle->data);
 734:../drivers/fsl_sdhc.c **** 
 735:../drivers/fsl_sdhc.c ****     if ((!(handle->data->enableIgnoreError)) && (interruptFlags & (kSDHC_DataErrorFlag | kSDHC_DmaE
 736:../drivers/fsl_sdhc.c ****         (handle->callback.TransferComplete))
 737:../drivers/fsl_sdhc.c ****     {
 738:../drivers/fsl_sdhc.c ****         handle->callback.TransferComplete(base, handle, kStatus_SDHC_TransferDataFailed, handle->us
 739:../drivers/fsl_sdhc.c ****     }
 740:../drivers/fsl_sdhc.c ****     else
 741:../drivers/fsl_sdhc.c ****     {
 742:../drivers/fsl_sdhc.c ****         if (interruptFlags & kSDHC_BufferReadReadyFlag)
 743:../drivers/fsl_sdhc.c ****         {
 744:../drivers/fsl_sdhc.c ****             handle->transferredWords = SDHC_ReadDataPort(base, handle->data, handle->transferredWor
 745:../drivers/fsl_sdhc.c ****         }
 746:../drivers/fsl_sdhc.c ****         else if (interruptFlags & kSDHC_BufferWriteReadyFlag)
 747:../drivers/fsl_sdhc.c ****         {
 748:../drivers/fsl_sdhc.c ****             handle->transferredWords = SDHC_WriteDataPort(base, handle->data, handle->transferredWo
 749:../drivers/fsl_sdhc.c ****         }
 750:../drivers/fsl_sdhc.c ****         else
 751:../drivers/fsl_sdhc.c ****         {
 752:../drivers/fsl_sdhc.c ****         }
 753:../drivers/fsl_sdhc.c **** 
 754:../drivers/fsl_sdhc.c ****         if ((interruptFlags & kSDHC_DataCompleteFlag) && (handle->callback.TransferComplete))
 755:../drivers/fsl_sdhc.c ****         {
 756:../drivers/fsl_sdhc.c ****             handle->callback.TransferComplete(base, handle, kStatus_Success, handle->userData);
 757:../drivers/fsl_sdhc.c ****         }
 758:../drivers/fsl_sdhc.c ****         else
 759:../drivers/fsl_sdhc.c ****         {
 760:../drivers/fsl_sdhc.c ****             /* Do nothing when DMA complete flag is set. Wait until data complete flag is set. */
 761:../drivers/fsl_sdhc.c ****         }
 762:../drivers/fsl_sdhc.c ****     }
 763:../drivers/fsl_sdhc.c **** }
 764:../drivers/fsl_sdhc.c **** 
 765:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioInterrupt(SDHC_Type *base, sdhc_handle_t *handle)
 766:../drivers/fsl_sdhc.c **** {
 767:../drivers/fsl_sdhc.c ****     if (handle->callback.SdioInterrupt)
 768:../drivers/fsl_sdhc.c ****     {
 769:../drivers/fsl_sdhc.c ****         handle->callback.SdioInterrupt(base, handle->userData);
 770:../drivers/fsl_sdhc.c ****     }
 771:../drivers/fsl_sdhc.c **** }
 772:../drivers/fsl_sdhc.c **** 
 773:../drivers/fsl_sdhc.c **** static void SDHC_TransferHandleSdioBlockGap(SDHC_Type *base, sdhc_handle_t *handle)
 774:../drivers/fsl_sdhc.c **** {
 775:../drivers/fsl_sdhc.c ****     if (handle->callback.SdioBlockGap)
 776:../drivers/fsl_sdhc.c ****     {
 777:../drivers/fsl_sdhc.c ****         handle->callback.SdioBlockGap(base, handle->userData);
 778:../drivers/fsl_sdhc.c ****     }
 779:../drivers/fsl_sdhc.c **** }
 780:../drivers/fsl_sdhc.c **** 
 781:../drivers/fsl_sdhc.c **** void SDHC_Init(SDHC_Type *base, const sdhc_config_t *config)
 782:../drivers/fsl_sdhc.c **** {
 783:../drivers/fsl_sdhc.c ****     assert(config);
 784:../drivers/fsl_sdhc.c **** #if !defined FSL_SDHC_ENABLE_ADMA1
 785:../drivers/fsl_sdhc.c ****     assert(config->dmaMode != kSDHC_DmaModeAdma1);
 786:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
 787:../drivers/fsl_sdhc.c ****     assert((config->writeWatermarkLevel >= 1U) && (config->writeWatermarkLevel <= 128U));
 788:../drivers/fsl_sdhc.c ****     assert((config->readWatermarkLevel >= 1U) && (config->readWatermarkLevel <= 128U));
 789:../drivers/fsl_sdhc.c **** 
 790:../drivers/fsl_sdhc.c ****     uint32_t proctl;
 791:../drivers/fsl_sdhc.c ****     uint32_t wml;
 792:../drivers/fsl_sdhc.c **** 
 793:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 794:../drivers/fsl_sdhc.c ****     /* Enable SDHC clock. */
 795:../drivers/fsl_sdhc.c ****     CLOCK_EnableClock(s_sdhcClock[SDHC_GetInstance(base)]);
 796:../drivers/fsl_sdhc.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 797:../drivers/fsl_sdhc.c **** 
 798:../drivers/fsl_sdhc.c ****     /* Reset SDHC. */
 799:../drivers/fsl_sdhc.c ****     SDHC_Reset(base, kSDHC_ResetAll, 100);
 800:../drivers/fsl_sdhc.c **** 
 801:../drivers/fsl_sdhc.c ****     proctl = base->PROCTL;
 802:../drivers/fsl_sdhc.c ****     wml = base->WML;
 803:../drivers/fsl_sdhc.c **** 
 804:../drivers/fsl_sdhc.c ****     proctl &= ~(SDHC_PROCTL_D3CD_MASK | SDHC_PROCTL_EMODE_MASK | SDHC_PROCTL_DMAS_MASK);
 805:../drivers/fsl_sdhc.c ****     /* Set DAT3 as card detection pin */
 806:../drivers/fsl_sdhc.c ****     if (config->cardDetectDat3)
 807:../drivers/fsl_sdhc.c ****     {
 808:../drivers/fsl_sdhc.c ****         proctl |= SDHC_PROCTL_D3CD_MASK;
 809:../drivers/fsl_sdhc.c ****     }
 810:../drivers/fsl_sdhc.c ****     /* Endian mode and DMA mode */
 811:../drivers/fsl_sdhc.c ****     proctl |= (SDHC_PROCTL_EMODE(config->endianMode) | SDHC_PROCTL_DMAS(config->dmaMode));
 812:../drivers/fsl_sdhc.c **** 
 813:../drivers/fsl_sdhc.c ****     /* Watermark level */
 814:../drivers/fsl_sdhc.c ****     wml &= ~(SDHC_WML_RDWML_MASK | SDHC_WML_WRWML_MASK);
 815:../drivers/fsl_sdhc.c ****     wml |= (SDHC_WML_RDWML(config->readWatermarkLevel) | SDHC_WML_WRWML(config->writeWatermarkLevel
 816:../drivers/fsl_sdhc.c **** 
 817:../drivers/fsl_sdhc.c ****     base->WML = wml;
 818:../drivers/fsl_sdhc.c ****     base->PROCTL = proctl;
 819:../drivers/fsl_sdhc.c **** 
 820:../drivers/fsl_sdhc.c ****     /* Disable all clock auto gated off feature because of DAT0 line logic(card buffer full status)
 821:../drivers/fsl_sdhc.c ****     correctly when clock auto gated off is enabled. */
 822:../drivers/fsl_sdhc.c ****     base->SYSCTL |= (SDHC_SYSCTL_PEREN_MASK | SDHC_SYSCTL_HCKEN_MASK | SDHC_SYSCTL_IPGEN_MASK);
 823:../drivers/fsl_sdhc.c **** 
 824:../drivers/fsl_sdhc.c ****     /* Enable interrupt status but doesn't enable interrupt signal. */
 825:../drivers/fsl_sdhc.c ****     SDHC_SetTransferInterrupt(base, false);
 826:../drivers/fsl_sdhc.c **** }
 827:../drivers/fsl_sdhc.c **** 
 828:../drivers/fsl_sdhc.c **** void SDHC_Deinit(SDHC_Type *base)
 829:../drivers/fsl_sdhc.c **** {
 830:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 831:../drivers/fsl_sdhc.c ****     /* Disable clock. */
 832:../drivers/fsl_sdhc.c ****     CLOCK_DisableClock(s_sdhcClock[SDHC_GetInstance(base)]);
 833:../drivers/fsl_sdhc.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 834:../drivers/fsl_sdhc.c **** }
 835:../drivers/fsl_sdhc.c **** 
 836:../drivers/fsl_sdhc.c **** bool SDHC_Reset(SDHC_Type *base, uint32_t mask, uint32_t timeout)
 837:../drivers/fsl_sdhc.c **** {
 838:../drivers/fsl_sdhc.c ****     base->SYSCTL |= (mask & (SDHC_SYSCTL_RSTA_MASK | SDHC_SYSCTL_RSTC_MASK | SDHC_SYSCTL_RSTD_MASK)
 839:../drivers/fsl_sdhc.c ****     /* Delay some time to wait reset success. */
 840:../drivers/fsl_sdhc.c ****     while ((base->SYSCTL & mask))
 841:../drivers/fsl_sdhc.c ****     {
 842:../drivers/fsl_sdhc.c ****         if (!timeout)
 843:../drivers/fsl_sdhc.c ****         {
 844:../drivers/fsl_sdhc.c ****             break;
 845:../drivers/fsl_sdhc.c ****         }
 846:../drivers/fsl_sdhc.c ****         timeout--;
 847:../drivers/fsl_sdhc.c ****     }
 848:../drivers/fsl_sdhc.c **** 
 849:../drivers/fsl_sdhc.c ****     return ((!timeout) ? false : true);
 850:../drivers/fsl_sdhc.c **** }
 851:../drivers/fsl_sdhc.c **** 
 852:../drivers/fsl_sdhc.c **** void SDHC_GetCapability(SDHC_Type *base, sdhc_capability_t *capability)
 853:../drivers/fsl_sdhc.c **** {
 854:../drivers/fsl_sdhc.c ****     assert(capability);
 855:../drivers/fsl_sdhc.c **** 
 856:../drivers/fsl_sdhc.c ****     uint32_t htCapability;
 857:../drivers/fsl_sdhc.c ****     uint32_t hostVer;
 858:../drivers/fsl_sdhc.c ****     uint32_t maxBlockLength;
 859:../drivers/fsl_sdhc.c **** 
 860:../drivers/fsl_sdhc.c ****     hostVer = base->HOSTVER;
 861:../drivers/fsl_sdhc.c ****     htCapability = base->HTCAPBLT;
 862:../drivers/fsl_sdhc.c **** 
 863:../drivers/fsl_sdhc.c ****     /* Get the capability of SDHC. */
 864:../drivers/fsl_sdhc.c ****     capability->specVersion = ((hostVer & SDHC_HOSTVER_SVN_MASK) >> SDHC_HOSTVER_SVN_SHIFT);
 865:../drivers/fsl_sdhc.c ****     capability->vendorVersion = ((hostVer & SDHC_HOSTVER_VVN_MASK) >> SDHC_HOSTVER_VVN_SHIFT);
 866:../drivers/fsl_sdhc.c ****     maxBlockLength = ((htCapability & SDHC_HTCAPBLT_MBL_MASK) >> SDHC_HTCAPBLT_MBL_SHIFT);
 867:../drivers/fsl_sdhc.c ****     capability->maxBlockLength = (512U << maxBlockLength);
 868:../drivers/fsl_sdhc.c ****     /* Other attributes not in HTCAPBLT register. */
 869:../drivers/fsl_sdhc.c ****     capability->maxBlockCount = SDHC_MAX_BLOCK_COUNT;
 870:../drivers/fsl_sdhc.c ****     capability->flags = (htCapability & (kSDHC_SupportAdmaFlag | kSDHC_SupportHighSpeedFlag | kSDHC
 871:../drivers/fsl_sdhc.c ****                                          kSDHC_SupportSuspendResumeFlag | kSDHC_SupportV330Flag));
 872:../drivers/fsl_sdhc.c **** #if defined FSL_FEATURE_SDHC_HAS_V300_SUPPORT && FSL_FEATURE_SDHC_HAS_V300_SUPPORT
 873:../drivers/fsl_sdhc.c ****     capability->flags |= (htCapability & kSDHC_SupportV300Flag);
 874:../drivers/fsl_sdhc.c **** #endif
 875:../drivers/fsl_sdhc.c **** #if defined FSL_FEATURE_SDHC_HAS_V180_SUPPORT && FSL_FEATURE_SDHC_HAS_V180_SUPPORT
 876:../drivers/fsl_sdhc.c ****     capability->flags |= (htCapability & kSDHC_SupportV180Flag);
 877:../drivers/fsl_sdhc.c **** #endif
 878:../drivers/fsl_sdhc.c ****     /* eSDHC on all kinetis boards will support 4/8 bit data bus width. */
 879:../drivers/fsl_sdhc.c ****     capability->flags |= (kSDHC_Support4BitFlag | kSDHC_Support8BitFlag);
 880:../drivers/fsl_sdhc.c **** }
 881:../drivers/fsl_sdhc.c **** 
 882:../drivers/fsl_sdhc.c **** uint32_t SDHC_SetSdClock(SDHC_Type *base, uint32_t srcClock_Hz, uint32_t busClock_Hz)
 883:../drivers/fsl_sdhc.c **** {
 884:../drivers/fsl_sdhc.c ****     assert(srcClock_Hz != 0U);
 885:../drivers/fsl_sdhc.c ****     assert((busClock_Hz != 0U) && (busClock_Hz <= srcClock_Hz));
 886:../drivers/fsl_sdhc.c **** 
 887:../drivers/fsl_sdhc.c ****     uint32_t totalDiv = 0U;
 888:../drivers/fsl_sdhc.c ****     uint32_t divisor = 0U;
 889:../drivers/fsl_sdhc.c ****     uint32_t prescaler = 0U;
 890:../drivers/fsl_sdhc.c ****     uint32_t sysctl = 0U;
 891:../drivers/fsl_sdhc.c ****     uint32_t nearestFrequency = 0U;
 892:../drivers/fsl_sdhc.c **** 
 893:../drivers/fsl_sdhc.c ****     /* calucate total divisor first */
 894:../drivers/fsl_sdhc.c ****     totalDiv = srcClock_Hz / busClock_Hz;
 895:../drivers/fsl_sdhc.c **** 
 896:../drivers/fsl_sdhc.c ****     if (totalDiv != 0U)
 897:../drivers/fsl_sdhc.c ****     {
 898:../drivers/fsl_sdhc.c ****         /* calucate the divisor (srcClock_Hz / divisor) <= busClock_Hz */
 899:../drivers/fsl_sdhc.c ****         if ((srcClock_Hz / totalDiv) > busClock_Hz)
 900:../drivers/fsl_sdhc.c ****         {
 901:../drivers/fsl_sdhc.c ****             totalDiv++;
 902:../drivers/fsl_sdhc.c ****         }
 903:../drivers/fsl_sdhc.c **** 
 904:../drivers/fsl_sdhc.c ****         /* divide the total divisor to div and prescaler */
 905:../drivers/fsl_sdhc.c ****         if (totalDiv > SDHC_MAX_DVS)
 906:../drivers/fsl_sdhc.c ****         {
 907:../drivers/fsl_sdhc.c ****             prescaler = totalDiv / SDHC_MAX_DVS;
 908:../drivers/fsl_sdhc.c ****             /* prescaler must be a value which equal 2^n and smaller than SDHC_MAX_CLKFS */
 909:../drivers/fsl_sdhc.c ****             while (((SDHC_MAX_CLKFS % prescaler) != 0U) || (prescaler == 1U))
 910:../drivers/fsl_sdhc.c ****             {
 911:../drivers/fsl_sdhc.c ****                 prescaler++;
 912:../drivers/fsl_sdhc.c ****             }
 913:../drivers/fsl_sdhc.c ****             /* calucate the divisor */
 914:../drivers/fsl_sdhc.c ****             divisor = totalDiv / prescaler;
 915:../drivers/fsl_sdhc.c ****             /* fine tuning the divisor until divisor * prescaler >= totalDiv */
 916:../drivers/fsl_sdhc.c ****             while ((divisor * prescaler) < totalDiv)
 917:../drivers/fsl_sdhc.c ****             {
 918:../drivers/fsl_sdhc.c ****                 divisor++;
 919:../drivers/fsl_sdhc.c ****             }
 920:../drivers/fsl_sdhc.c ****             nearestFrequency = srcClock_Hz / divisor / prescaler;
 921:../drivers/fsl_sdhc.c ****         }
 922:../drivers/fsl_sdhc.c ****         else
 923:../drivers/fsl_sdhc.c ****         {
 924:../drivers/fsl_sdhc.c ****             divisor = totalDiv;
 925:../drivers/fsl_sdhc.c ****             prescaler = 0U;
 926:../drivers/fsl_sdhc.c ****             nearestFrequency = srcClock_Hz / divisor;
 927:../drivers/fsl_sdhc.c ****         }
 928:../drivers/fsl_sdhc.c ****     }
 929:../drivers/fsl_sdhc.c ****     /* in this condition , srcClock_Hz = busClock_Hz, */
 930:../drivers/fsl_sdhc.c ****     else
 931:../drivers/fsl_sdhc.c ****     {
 932:../drivers/fsl_sdhc.c ****         /* total divider = 1U */
 933:../drivers/fsl_sdhc.c ****         divisor = 0U;
 934:../drivers/fsl_sdhc.c ****         prescaler = 0U;
 935:../drivers/fsl_sdhc.c ****         nearestFrequency = srcClock_Hz;
 936:../drivers/fsl_sdhc.c ****     }
 937:../drivers/fsl_sdhc.c **** 
 938:../drivers/fsl_sdhc.c ****     /* calucate the value write to register */
 939:../drivers/fsl_sdhc.c ****     if (divisor != 0U)
 940:../drivers/fsl_sdhc.c ****     {
 941:../drivers/fsl_sdhc.c ****         SDHC_PREV_DVS(divisor);
 942:../drivers/fsl_sdhc.c ****     }
 943:../drivers/fsl_sdhc.c ****     /* calucate the value write to register */
 944:../drivers/fsl_sdhc.c ****     if (prescaler != 0U)
 945:../drivers/fsl_sdhc.c ****     {
 946:../drivers/fsl_sdhc.c ****         SDHC_PREV_CLKFS(prescaler);
 947:../drivers/fsl_sdhc.c ****     }
 948:../drivers/fsl_sdhc.c **** 
 949:../drivers/fsl_sdhc.c ****     /* Disable SD clock. It should be disabled before changing the SD clock frequency.*/
 950:../drivers/fsl_sdhc.c ****     base->SYSCTL &= ~SDHC_SYSCTL_SDCLKEN_MASK;
 951:../drivers/fsl_sdhc.c **** 
 952:../drivers/fsl_sdhc.c ****     /* Set the SD clock frequency divisor, SD clock frequency select, data timeout counter value. *
 953:../drivers/fsl_sdhc.c ****     sysctl = base->SYSCTL;
 954:../drivers/fsl_sdhc.c ****     sysctl &= ~(SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK | SDHC_SYSCTL_DTOCV_MASK);
 955:../drivers/fsl_sdhc.c ****     sysctl |= (SDHC_SYSCTL_DVS(divisor) | SDHC_SYSCTL_SDCLKFS(prescaler) | SDHC_SYSCTL_DTOCV(0xEU))
 956:../drivers/fsl_sdhc.c ****     base->SYSCTL = sysctl;
 957:../drivers/fsl_sdhc.c **** 
 958:../drivers/fsl_sdhc.c ****     /* Wait until the SD clock is stable. */
 959:../drivers/fsl_sdhc.c ****     while (!(base->PRSSTAT & SDHC_PRSSTAT_SDSTB_MASK))
 960:../drivers/fsl_sdhc.c ****     {
 961:../drivers/fsl_sdhc.c ****     }
 962:../drivers/fsl_sdhc.c ****     /* Enable the SD clock. */
 963:../drivers/fsl_sdhc.c ****     base->SYSCTL |= SDHC_SYSCTL_SDCLKEN_MASK;
 964:../drivers/fsl_sdhc.c **** 
 965:../drivers/fsl_sdhc.c ****     return nearestFrequency;
 966:../drivers/fsl_sdhc.c **** }
 967:../drivers/fsl_sdhc.c **** 
 968:../drivers/fsl_sdhc.c **** bool SDHC_SetCardActive(SDHC_Type *base, uint32_t timeout)
 969:../drivers/fsl_sdhc.c **** {
 970:../drivers/fsl_sdhc.c ****     base->SYSCTL |= SDHC_SYSCTL_INITA_MASK;
 971:../drivers/fsl_sdhc.c ****     /* Delay some time to wait card become active state. */
 972:../drivers/fsl_sdhc.c ****     while (base->SYSCTL & SDHC_SYSCTL_INITA_MASK)
 973:../drivers/fsl_sdhc.c ****     {
 974:../drivers/fsl_sdhc.c ****         if (!timeout)
 975:../drivers/fsl_sdhc.c ****         {
 976:../drivers/fsl_sdhc.c ****             break;
 977:../drivers/fsl_sdhc.c ****         }
 978:../drivers/fsl_sdhc.c ****         timeout--;
 979:../drivers/fsl_sdhc.c ****     }
 980:../drivers/fsl_sdhc.c **** 
 981:../drivers/fsl_sdhc.c ****     return ((!timeout) ? false : true);
 982:../drivers/fsl_sdhc.c **** }
 983:../drivers/fsl_sdhc.c **** 
 984:../drivers/fsl_sdhc.c **** void SDHC_SetTransferConfig(SDHC_Type *base, const sdhc_transfer_config_t *config)
 985:../drivers/fsl_sdhc.c **** {
 986:../drivers/fsl_sdhc.c ****     assert(config);
 987:../drivers/fsl_sdhc.c ****     assert(config->dataBlockSize <= (SDHC_BLKATTR_BLKSIZE_MASK >> SDHC_BLKATTR_BLKSIZE_SHIFT));
 988:../drivers/fsl_sdhc.c ****     assert(config->dataBlockCount <= (SDHC_BLKATTR_BLKCNT_MASK >> SDHC_BLKATTR_BLKCNT_SHIFT));
 989:../drivers/fsl_sdhc.c **** 
 990:../drivers/fsl_sdhc.c ****     base->BLKATTR = ((base->BLKATTR & ~(SDHC_BLKATTR_BLKSIZE_MASK | SDHC_BLKATTR_BLKCNT_MASK)) |
 991:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 992:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 993:../drivers/fsl_sdhc.c ****     base->XFERTYP = (((config->commandIndex << SDHC_XFERTYP_CMDINX_SHIFT) & SDHC_XFERTYP_CMDINX_MAS
 994:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 995:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CMDTYP_MASK | SDHC_XFERTYP_BCEN_MASK | SDHC_XFE
 996:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP_MASK | SDHC_XF
 997:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_AC12EN_MASK)));
 998:../drivers/fsl_sdhc.c **** }
 999:../drivers/fsl_sdhc.c **** 
1000:../drivers/fsl_sdhc.c **** void SDHC_EnableSdioControl(SDHC_Type *base, uint32_t mask, bool enable)
1001:../drivers/fsl_sdhc.c **** {
1002:../drivers/fsl_sdhc.c ****     uint32_t proctl = base->PROCTL;
1003:../drivers/fsl_sdhc.c ****     uint32_t vendor = base->VENDOR;
1004:../drivers/fsl_sdhc.c **** 
1005:../drivers/fsl_sdhc.c ****     if (enable)
1006:../drivers/fsl_sdhc.c ****     {
1007:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_StopAtBlockGapFlag)
1008:../drivers/fsl_sdhc.c ****         {
1009:../drivers/fsl_sdhc.c ****             proctl |= SDHC_PROCTL_SABGREQ_MASK;
1010:../drivers/fsl_sdhc.c ****         }
1011:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ReadWaitControlFlag)
1012:../drivers/fsl_sdhc.c ****         {
1013:../drivers/fsl_sdhc.c ****             proctl |= SDHC_PROCTL_RWCTL_MASK;
1014:../drivers/fsl_sdhc.c ****         }
1015:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_InterruptAtBlockGapFlag)
1016:../drivers/fsl_sdhc.c ****         {
1017:../drivers/fsl_sdhc.c ****             proctl |= SDHC_PROCTL_IABG_MASK;
1018:../drivers/fsl_sdhc.c ****         }
1019:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ExactBlockNumberReadFlag)
1020:../drivers/fsl_sdhc.c ****         {
1021:../drivers/fsl_sdhc.c ****             vendor |= SDHC_VENDOR_EXBLKNU_MASK;
1022:../drivers/fsl_sdhc.c ****         }
1023:../drivers/fsl_sdhc.c ****     }
1024:../drivers/fsl_sdhc.c ****     else
1025:../drivers/fsl_sdhc.c ****     {
1026:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_StopAtBlockGapFlag)
1027:../drivers/fsl_sdhc.c ****         {
1028:../drivers/fsl_sdhc.c ****             proctl &= ~SDHC_PROCTL_SABGREQ_MASK;
1029:../drivers/fsl_sdhc.c ****         }
1030:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ReadWaitControlFlag)
1031:../drivers/fsl_sdhc.c ****         {
1032:../drivers/fsl_sdhc.c ****             proctl &= ~SDHC_PROCTL_RWCTL_MASK;
1033:../drivers/fsl_sdhc.c ****         }
1034:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_InterruptAtBlockGapFlag)
1035:../drivers/fsl_sdhc.c ****         {
1036:../drivers/fsl_sdhc.c ****             proctl &= ~SDHC_PROCTL_IABG_MASK;
1037:../drivers/fsl_sdhc.c ****         }
1038:../drivers/fsl_sdhc.c ****         if (mask & kSDHC_ExactBlockNumberReadFlag)
1039:../drivers/fsl_sdhc.c ****         {
1040:../drivers/fsl_sdhc.c ****             vendor &= ~SDHC_VENDOR_EXBLKNU_MASK;
1041:../drivers/fsl_sdhc.c ****         }
1042:../drivers/fsl_sdhc.c ****     }
1043:../drivers/fsl_sdhc.c **** 
1044:../drivers/fsl_sdhc.c ****     base->PROCTL = proctl;
1045:../drivers/fsl_sdhc.c ****     base->VENDOR = vendor;
1046:../drivers/fsl_sdhc.c **** }
1047:../drivers/fsl_sdhc.c **** 
1048:../drivers/fsl_sdhc.c **** void SDHC_SetMmcBootConfig(SDHC_Type *base, const sdhc_boot_config_t *config)
1049:../drivers/fsl_sdhc.c **** {
1050:../drivers/fsl_sdhc.c ****     assert(config);
1051:../drivers/fsl_sdhc.c ****     assert(config->ackTimeoutCount <= (SDHC_MMCBOOT_DTOCVACK_MASK >> SDHC_MMCBOOT_DTOCVACK_SHIFT));
1052:../drivers/fsl_sdhc.c ****     assert(config->blockCount <= (SDHC_MMCBOOT_BOOTBLKCNT_MASK >> SDHC_MMCBOOT_BOOTBLKCNT_SHIFT));
1053:../drivers/fsl_sdhc.c **** 
1054:../drivers/fsl_sdhc.c ****     uint32_t mmcboot = 0U;
1055:../drivers/fsl_sdhc.c **** 
1056:../drivers/fsl_sdhc.c ****     mmcboot = (SDHC_MMCBOOT_DTOCVACK(config->ackTimeoutCount) | SDHC_MMCBOOT_BOOTMODE(config->bootM
1057:../drivers/fsl_sdhc.c ****                SDHC_MMCBOOT_BOOTBLKCNT(config->blockCount));
1058:../drivers/fsl_sdhc.c ****     if (config->enableBootAck)
1059:../drivers/fsl_sdhc.c ****     {
1060:../drivers/fsl_sdhc.c ****         mmcboot |= SDHC_MMCBOOT_BOOTACK_MASK;
1061:../drivers/fsl_sdhc.c ****     }
1062:../drivers/fsl_sdhc.c ****     if (config->enableBoot)
1063:../drivers/fsl_sdhc.c ****     {
1064:../drivers/fsl_sdhc.c ****         mmcboot |= SDHC_MMCBOOT_BOOTEN_MASK;
1065:../drivers/fsl_sdhc.c ****     }
1066:../drivers/fsl_sdhc.c ****     if (config->enableAutoStopAtBlockGap)
1067:../drivers/fsl_sdhc.c ****     {
1068:../drivers/fsl_sdhc.c ****         mmcboot |= SDHC_MMCBOOT_AUTOSABGEN_MASK;
1069:../drivers/fsl_sdhc.c ****     }
1070:../drivers/fsl_sdhc.c ****     base->MMCBOOT = mmcboot;
1071:../drivers/fsl_sdhc.c **** }
1072:../drivers/fsl_sdhc.c **** 
1073:../drivers/fsl_sdhc.c **** status_t SDHC_SetAdmaTableConfig(SDHC_Type *base,
1074:../drivers/fsl_sdhc.c ****                                  sdhc_dma_mode_t dmaMode,
1075:../drivers/fsl_sdhc.c ****                                  uint32_t *table,
1076:../drivers/fsl_sdhc.c ****                                  uint32_t tableWords,
1077:../drivers/fsl_sdhc.c ****                                  const uint32_t *data,
1078:../drivers/fsl_sdhc.c ****                                  uint32_t dataBytes)
1079:../drivers/fsl_sdhc.c **** {
1080:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
1081:../drivers/fsl_sdhc.c ****     const uint32_t *startAddress = data;
1082:../drivers/fsl_sdhc.c ****     uint32_t entries;
1083:../drivers/fsl_sdhc.c ****     uint32_t i;
1084:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
1085:../drivers/fsl_sdhc.c ****     sdhc_adma1_descriptor_t *adma1EntryAddress;
1086:../drivers/fsl_sdhc.c **** #endif
1087:../drivers/fsl_sdhc.c ****     sdhc_adma2_descriptor_t *adma2EntryAddress;
1088:../drivers/fsl_sdhc.c **** 
1089:../drivers/fsl_sdhc.c ****     if ((((!table) || (!tableWords)) && ((dmaMode == kSDHC_DmaModeAdma1) || (dmaMode == kSDHC_DmaMo
1090:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
1091:../drivers/fsl_sdhc.c **** #if !defined FSL_SDHC_ENABLE_ADMA1
1092:../drivers/fsl_sdhc.c ****         || (dmaMode == kSDHC_DmaModeAdma1)
1093:../drivers/fsl_sdhc.c **** #endif
1094:../drivers/fsl_sdhc.c ****             )
1095:../drivers/fsl_sdhc.c ****     {
1096:../drivers/fsl_sdhc.c ****         error = kStatus_InvalidArgument;
1097:../drivers/fsl_sdhc.c ****     }
1098:../drivers/fsl_sdhc.c ****     else if (((dmaMode == kSDHC_DmaModeAdma2) && (((uint32_t)startAddress % SDHC_ADMA2_LENGTH_ALIGN
1099:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
1100:../drivers/fsl_sdhc.c ****              || ((dmaMode == kSDHC_DmaModeAdma1) && (((uint32_t)startAddress % SDHC_ADMA1_LENGTH_AL
1101:../drivers/fsl_sdhc.c **** #endif
1102:../drivers/fsl_sdhc.c ****                  )
1103:../drivers/fsl_sdhc.c ****     {
1104:../drivers/fsl_sdhc.c ****         error = kStatus_SDHC_DMADataBufferAddrNotAlign;
1105:../drivers/fsl_sdhc.c ****     }
1106:../drivers/fsl_sdhc.c ****     else
1107:../drivers/fsl_sdhc.c ****     {
1108:../drivers/fsl_sdhc.c ****         switch (dmaMode)
1109:../drivers/fsl_sdhc.c ****         {
1110:../drivers/fsl_sdhc.c ****             case kSDHC_DmaModeNo:
1111:../drivers/fsl_sdhc.c ****                 break;
1112:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
1113:../drivers/fsl_sdhc.c ****             case kSDHC_DmaModeAdma1:
1114:../drivers/fsl_sdhc.c ****                 /*
1115:../drivers/fsl_sdhc.c ****                 * Add non aligned access support ,user need make sure your buffer size is big
1116:../drivers/fsl_sdhc.c ****                 * enough to hold the data,in other words,user need make sure the buffer size
1117:../drivers/fsl_sdhc.c ****                 * is 4 byte aligned
1118:../drivers/fsl_sdhc.c ****                 */
1119:../drivers/fsl_sdhc.c ****                 if (dataBytes % sizeof(uint32_t) != 0U)
1120:../drivers/fsl_sdhc.c ****                 {
1121:../drivers/fsl_sdhc.c ****                     dataBytes +=
1122:../drivers/fsl_sdhc.c ****                         sizeof(uint32_t) - (dataBytes % sizeof(uint32_t)); /* make the data length 
1123:../drivers/fsl_sdhc.c ****                 }
1124:../drivers/fsl_sdhc.c **** 
1125:../drivers/fsl_sdhc.c ****                 /* Check if ADMA descriptor's number is enough. */
1126:../drivers/fsl_sdhc.c ****                 entries = ((dataBytes / SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY) + 1U);
1127:../drivers/fsl_sdhc.c ****                 /* ADMA1 needs two descriptors to finish a transfer */
1128:../drivers/fsl_sdhc.c ****                 entries <<= 1U;
1129:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma1_descriptor_t)))
1130:../drivers/fsl_sdhc.c ****                 {
1131:../drivers/fsl_sdhc.c ****                     error = kStatus_OutOfRange;
1132:../drivers/fsl_sdhc.c ****                 }
1133:../drivers/fsl_sdhc.c ****                 else
1134:../drivers/fsl_sdhc.c ****                 {
1135:../drivers/fsl_sdhc.c ****                     adma1EntryAddress = (sdhc_adma1_descriptor_t *)(table);
1136:../drivers/fsl_sdhc.c ****                     for (i = 0U; i < entries; i += 2U)
1137:../drivers/fsl_sdhc.c ****                     {
1138:../drivers/fsl_sdhc.c ****                         /* Each descriptor for ADMA1 is 32-bit in length */
1139:../drivers/fsl_sdhc.c ****                         if ((dataBytes - sizeof(uint32_t) * (startAddress - data)) <=
1140:../drivers/fsl_sdhc.c ****                             SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY)
1141:../drivers/fsl_sdhc.c ****                         {
1142:../drivers/fsl_sdhc.c ****                             /* The last piece of data, setting end flag in descriptor */
1143:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] = ((uint32_t)(dataBytes - sizeof(uint32_t) * (star
1144:../drivers/fsl_sdhc.c ****                                                     << SDHC_ADMA1_DESCRIPTOR_LENGTH_SHIFT);
1145:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] |= kSDHC_Adma1DescriptorTypeSetLength;
1146:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] =
1147:../drivers/fsl_sdhc.c ****                                 ((uint32_t)(startAddress) << SDHC_ADMA1_DESCRIPTOR_ADDRESS_SHIFT);
1148:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] |=
1149:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma1DescriptorTypeTransfer | kSDHC_Adma1DescriptorEndFlag);
1150:../drivers/fsl_sdhc.c ****                         }
1151:../drivers/fsl_sdhc.c ****                         else
1152:../drivers/fsl_sdhc.c ****                         {
1153:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] = ((uint32_t)SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_
1154:../drivers/fsl_sdhc.c ****                                                     << SDHC_ADMA1_DESCRIPTOR_LENGTH_SHIFT);
1155:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i] |= kSDHC_Adma1DescriptorTypeSetLength;
1156:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] =
1157:../drivers/fsl_sdhc.c ****                                 ((uint32_t)(startAddress) << SDHC_ADMA1_DESCRIPTOR_ADDRESS_SHIFT);
1158:../drivers/fsl_sdhc.c ****                             adma1EntryAddress[i + 1U] |= kSDHC_Adma1DescriptorTypeTransfer;
1159:../drivers/fsl_sdhc.c ****                             startAddress += SDHC_ADMA1_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(uin
1160:../drivers/fsl_sdhc.c ****                         }
1161:../drivers/fsl_sdhc.c ****                     }
1162:../drivers/fsl_sdhc.c **** 
1163:../drivers/fsl_sdhc.c ****                     /* When use ADMA, disable simple DMA */
1164:../drivers/fsl_sdhc.c ****                     base->DSADDR = 0U;
1165:../drivers/fsl_sdhc.c ****                     base->ADSADDR = (uint32_t)table;
1166:../drivers/fsl_sdhc.c ****                     /* disable the buffer ready flag in DMA mode */
1167:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1168:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1169:../drivers/fsl_sdhc.c ****                 }
1170:../drivers/fsl_sdhc.c ****                 break;
1171:../drivers/fsl_sdhc.c **** #endif /* FSL_SDHC_ENABLE_ADMA1 */
1172:../drivers/fsl_sdhc.c ****             case kSDHC_DmaModeAdma2:
1173:../drivers/fsl_sdhc.c ****                 /*
1174:../drivers/fsl_sdhc.c ****                 * Add non aligned access support ,user need make sure your buffer size is big
1175:../drivers/fsl_sdhc.c ****                 * enough to hold the data,in other words,user need make sure the buffer size
1176:../drivers/fsl_sdhc.c ****                 * is 4 byte aligned
1177:../drivers/fsl_sdhc.c ****                 */
1178:../drivers/fsl_sdhc.c ****                 if (dataBytes % sizeof(uint32_t) != 0U)
1179:../drivers/fsl_sdhc.c ****                 {
1180:../drivers/fsl_sdhc.c ****                     dataBytes +=
1181:../drivers/fsl_sdhc.c ****                         sizeof(uint32_t) - (dataBytes % sizeof(uint32_t)); /* make the data length 
1182:../drivers/fsl_sdhc.c ****                 }
1183:../drivers/fsl_sdhc.c **** 
1184:../drivers/fsl_sdhc.c ****                 /* Check if ADMA descriptor's number is enough. */
1185:../drivers/fsl_sdhc.c ****                 entries = ((dataBytes / SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY) + 1U);
1186:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma2_descriptor_t)))
1187:../drivers/fsl_sdhc.c ****                 {
1188:../drivers/fsl_sdhc.c ****                     error = kStatus_OutOfRange;
1189:../drivers/fsl_sdhc.c ****                 }
1190:../drivers/fsl_sdhc.c ****                 else
1191:../drivers/fsl_sdhc.c ****                 {
1192:../drivers/fsl_sdhc.c ****                     adma2EntryAddress = (sdhc_adma2_descriptor_t *)(table);
1193:../drivers/fsl_sdhc.c ****                     for (i = 0U; i < entries; i++)
1194:../drivers/fsl_sdhc.c ****                     {
1195:../drivers/fsl_sdhc.c ****                         /* Each descriptor for ADMA2 is 64-bit in length */
1196:../drivers/fsl_sdhc.c ****                         if ((dataBytes - sizeof(uint32_t) * (startAddress - data)) <=
1197:../drivers/fsl_sdhc.c ****                             SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY)
1198:../drivers/fsl_sdhc.c ****                         {
1199:../drivers/fsl_sdhc.c ****                             /* The last piece of data, setting end flag in descriptor */
1200:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].address = startAddress;
1201:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute = ((dataBytes - sizeof(uint32_t) * (star
1202:../drivers/fsl_sdhc.c ****                                                               << SDHC_ADMA2_DESCRIPTOR_LENGTH_SHIFT
1203:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute |=
1204:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma2DescriptorTypeTransfer | kSDHC_Adma2DescriptorEndFlag);
1205:../drivers/fsl_sdhc.c ****                         }
1206:../drivers/fsl_sdhc.c ****                         else
1207:../drivers/fsl_sdhc.c ****                         {
1208:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].address = startAddress;
1209:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute =
1210:../drivers/fsl_sdhc.c ****                                 (((SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(uint32_t)) *
1211:../drivers/fsl_sdhc.c ****                                  << SDHC_ADMA2_DESCRIPTOR_LENGTH_SHIFT);
1212:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute |= kSDHC_Adma2DescriptorTypeTransfer;
1213:../drivers/fsl_sdhc.c ****                             startAddress += (SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(ui
1214:../drivers/fsl_sdhc.c ****                         }
1215:../drivers/fsl_sdhc.c ****                     }
1216:../drivers/fsl_sdhc.c **** 
1217:../drivers/fsl_sdhc.c ****                     /* When use ADMA, disable simple DMA */
1218:../drivers/fsl_sdhc.c ****                     base->DSADDR = 0U;
1219:../drivers/fsl_sdhc.c ****                     base->ADSADDR = (uint32_t)table;
1220:../drivers/fsl_sdhc.c ****                     /* disable the buffer read flag in DMA mode */
1221:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1222:../drivers/fsl_sdhc.c ****                     SDHC_DisableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWrite
1223:../drivers/fsl_sdhc.c ****                 }
1224:../drivers/fsl_sdhc.c ****                 break;
1225:../drivers/fsl_sdhc.c ****             default:
1226:../drivers/fsl_sdhc.c ****                 break;
1227:../drivers/fsl_sdhc.c ****         }
1228:../drivers/fsl_sdhc.c ****     }
1229:../drivers/fsl_sdhc.c **** 
1230:../drivers/fsl_sdhc.c ****     return error;
1231:../drivers/fsl_sdhc.c **** }
1232:../drivers/fsl_sdhc.c **** 
1233:../drivers/fsl_sdhc.c **** status_t SDHC_TransferBlocking(SDHC_Type *base, uint32_t *admaTable, uint32_t admaTableWords, sdhc_
1234:../drivers/fsl_sdhc.c **** {
1235:../drivers/fsl_sdhc.c ****     assert(transfer);
1236:../drivers/fsl_sdhc.c **** 
1237:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
1238:../drivers/fsl_sdhc.c ****     sdhc_dma_mode_t dmaMode = (sdhc_dma_mode_t)((base->PROCTL & SDHC_PROCTL_DMAS_MASK) >> SDHC_PROC
1239:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
1240:../drivers/fsl_sdhc.c ****     sdhc_data_t *data = transfer->data;
1241:../drivers/fsl_sdhc.c **** 
1242:../drivers/fsl_sdhc.c ****     /* make sure the cmd/block count is valid */
1243:../drivers/fsl_sdhc.c ****     if ((!command) || (data && (data->blockCount > SDHC_MAX_BLOCK_COUNT)))
1244:../drivers/fsl_sdhc.c ****     {
1245:../drivers/fsl_sdhc.c ****         return kStatus_InvalidArgument;
1246:../drivers/fsl_sdhc.c ****     }
1247:../drivers/fsl_sdhc.c **** 
1248:../drivers/fsl_sdhc.c ****     /* Wait until command/data bus out of busy status. */
1249:../drivers/fsl_sdhc.c ****     while (SDHC_GetPresentStatusFlags(base) & kSDHC_CommandInhibitFlag)
1250:../drivers/fsl_sdhc.c ****     {
1251:../drivers/fsl_sdhc.c ****     }
1252:../drivers/fsl_sdhc.c ****     while (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag))
1253:../drivers/fsl_sdhc.c ****     {
1254:../drivers/fsl_sdhc.c ****     }
1255:../drivers/fsl_sdhc.c **** 
1256:../drivers/fsl_sdhc.c ****     /* Update ADMA descriptor table according to different DMA mode(no DMA, ADMA1, ADMA2).*/
1257:../drivers/fsl_sdhc.c ****     if (data && (NULL != admaTable))
1258:../drivers/fsl_sdhc.c ****     {
1259:../drivers/fsl_sdhc.c ****         error =
1260:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
1261:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
1262:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
1263:../drivers/fsl_sdhc.c ****         if (error == kStatus_SDHC_DMADataBufferAddrNotAlign)
1264:../drivers/fsl_sdhc.c ****         {
1265:../drivers/fsl_sdhc.c ****             dmaMode = kSDHC_DmaModeNo;
1266:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
1267:../drivers/fsl_sdhc.c ****         }
1268:../drivers/fsl_sdhc.c ****         else if (error != kStatus_Success)
1269:../drivers/fsl_sdhc.c ****         {
1270:../drivers/fsl_sdhc.c ****             return error;
1271:../drivers/fsl_sdhc.c ****         }
1272:../drivers/fsl_sdhc.c ****         else
1273:../drivers/fsl_sdhc.c ****         {
1274:../drivers/fsl_sdhc.c ****         }
1275:../drivers/fsl_sdhc.c ****     }
1276:../drivers/fsl_sdhc.c **** 
1277:../drivers/fsl_sdhc.c ****     /* Send command and receive data. */
1278:../drivers/fsl_sdhc.c ****     SDHC_StartTransfer(base, command, data, dmaMode);
1279:../drivers/fsl_sdhc.c ****     if (kStatus_Success != SDHC_SendCommandBlocking(base, command))
1280:../drivers/fsl_sdhc.c ****     {
1281:../drivers/fsl_sdhc.c ****         return kStatus_SDHC_SendCommandFailed;
1282:../drivers/fsl_sdhc.c ****     }
1283:../drivers/fsl_sdhc.c ****     else if (data && (kStatus_Success != SDHC_TransferDataBlocking(dmaMode, base, data)))
1284:../drivers/fsl_sdhc.c ****     {
1285:../drivers/fsl_sdhc.c ****         return kStatus_SDHC_TransferDataFailed;
1286:../drivers/fsl_sdhc.c ****     }
1287:../drivers/fsl_sdhc.c ****     else
1288:../drivers/fsl_sdhc.c ****     {
1289:../drivers/fsl_sdhc.c ****     }
1290:../drivers/fsl_sdhc.c **** 
1291:../drivers/fsl_sdhc.c ****     return kStatus_Success;
1292:../drivers/fsl_sdhc.c **** }
1293:../drivers/fsl_sdhc.c **** 
1294:../drivers/fsl_sdhc.c **** void SDHC_TransferCreateHandle(SDHC_Type *base,
1295:../drivers/fsl_sdhc.c ****                                sdhc_handle_t *handle,
1296:../drivers/fsl_sdhc.c ****                                const sdhc_transfer_callback_t *callback,
1297:../drivers/fsl_sdhc.c ****                                void *userData)
1298:../drivers/fsl_sdhc.c **** {
1299:../drivers/fsl_sdhc.c ****     assert(handle);
1300:../drivers/fsl_sdhc.c ****     assert(callback);
1301:../drivers/fsl_sdhc.c **** 
1302:../drivers/fsl_sdhc.c ****     /* Zero the handle. */
1303:../drivers/fsl_sdhc.c ****     memset(handle, 0, sizeof(*handle));
1304:../drivers/fsl_sdhc.c **** 
1305:../drivers/fsl_sdhc.c ****     /* Set the callback. */
1306:../drivers/fsl_sdhc.c ****     handle->callback.CardInserted = callback->CardInserted;
1307:../drivers/fsl_sdhc.c ****     handle->callback.CardRemoved = callback->CardRemoved;
1308:../drivers/fsl_sdhc.c ****     handle->callback.SdioInterrupt = callback->SdioInterrupt;
1309:../drivers/fsl_sdhc.c ****     handle->callback.SdioBlockGap = callback->SdioBlockGap;
1310:../drivers/fsl_sdhc.c ****     handle->callback.TransferComplete = callback->TransferComplete;
1311:../drivers/fsl_sdhc.c ****     handle->userData = userData;
1312:../drivers/fsl_sdhc.c **** 
1313:../drivers/fsl_sdhc.c ****     /* Save the handle in global variables to support the double weak mechanism. */
1314:../drivers/fsl_sdhc.c ****     s_sdhcHandle[SDHC_GetInstance(base)] = handle;
1315:../drivers/fsl_sdhc.c **** 
1316:../drivers/fsl_sdhc.c ****     /* Enable interrupt in NVIC. */
1317:../drivers/fsl_sdhc.c ****     SDHC_SetTransferInterrupt(base, true);
1318:../drivers/fsl_sdhc.c **** 
1319:../drivers/fsl_sdhc.c ****     /* save IRQ handler */
1320:../drivers/fsl_sdhc.c ****     s_sdhcIsr = SDHC_TransferHandleIRQ;
1321:../drivers/fsl_sdhc.c **** 
1322:../drivers/fsl_sdhc.c ****     EnableIRQ(s_sdhcIRQ[SDHC_GetInstance(base)]);
1323:../drivers/fsl_sdhc.c **** }
1324:../drivers/fsl_sdhc.c **** 
1325:../drivers/fsl_sdhc.c **** status_t SDHC_TransferNonBlocking(
1326:../drivers/fsl_sdhc.c ****     SDHC_Type *base, sdhc_handle_t *handle, uint32_t *admaTable, uint32_t admaTableWords, sdhc_tran
1327:../drivers/fsl_sdhc.c **** {
1328:../drivers/fsl_sdhc.c ****     assert(transfer);
1329:../drivers/fsl_sdhc.c **** 
1330:../drivers/fsl_sdhc.c ****     sdhc_dma_mode_t dmaMode = (sdhc_dma_mode_t)((base->PROCTL & SDHC_PROCTL_DMAS_MASK) >> SDHC_PROC
1331:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
1332:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
1333:../drivers/fsl_sdhc.c ****     sdhc_data_t *data = transfer->data;
1334:../drivers/fsl_sdhc.c **** 
1335:../drivers/fsl_sdhc.c ****     /* make sure cmd/block count is valid */
1336:../drivers/fsl_sdhc.c ****     if ((!command) || (data && (data->blockCount > SDHC_MAX_BLOCK_COUNT)))
1337:../drivers/fsl_sdhc.c ****     {
1338:../drivers/fsl_sdhc.c ****         return kStatus_InvalidArgument;
1339:../drivers/fsl_sdhc.c ****     }
1340:../drivers/fsl_sdhc.c **** 
1341:../drivers/fsl_sdhc.c ****     /* Wait until command/data bus out of busy status. */
1342:../drivers/fsl_sdhc.c ****     if ((SDHC_GetPresentStatusFlags(base) & kSDHC_CommandInhibitFlag) ||
1343:../drivers/fsl_sdhc.c ****         (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag)))
1344:../drivers/fsl_sdhc.c ****     {
1345:../drivers/fsl_sdhc.c ****         return kStatus_SDHC_BusyTransferring;
1346:../drivers/fsl_sdhc.c ****     }
1347:../drivers/fsl_sdhc.c **** 
1348:../drivers/fsl_sdhc.c ****     /* Update ADMA descriptor table according to different DMA mode(no DMA, ADMA1, ADMA2).*/
1349:../drivers/fsl_sdhc.c ****     if (data && (NULL != admaTable))
1350:../drivers/fsl_sdhc.c ****     {
1351:../drivers/fsl_sdhc.c ****         error =
1352:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
1353:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
1354:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
1355:../drivers/fsl_sdhc.c ****         if (error == kStatus_SDHC_DMADataBufferAddrNotAlign)
1356:../drivers/fsl_sdhc.c ****         {
1357:../drivers/fsl_sdhc.c ****             /* change to polling mode */
1358:../drivers/fsl_sdhc.c ****             dmaMode = kSDHC_DmaModeNo;
1359:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
1360:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
1361:../drivers/fsl_sdhc.c ****         }
1362:../drivers/fsl_sdhc.c ****         else if (error != kStatus_Success)
1363:../drivers/fsl_sdhc.c ****         {
1364:../drivers/fsl_sdhc.c ****             return error;
1365:../drivers/fsl_sdhc.c ****         }
1366:../drivers/fsl_sdhc.c ****         else
1367:../drivers/fsl_sdhc.c ****         {
1368:../drivers/fsl_sdhc.c ****         }
1369:../drivers/fsl_sdhc.c ****     }
1370:../drivers/fsl_sdhc.c **** 
1371:../drivers/fsl_sdhc.c ****     /* Save command and data into handle before transferring. */
1372:../drivers/fsl_sdhc.c ****     handle->command = command;
1373:../drivers/fsl_sdhc.c ****     handle->data = data;
1374:../drivers/fsl_sdhc.c ****     handle->interruptFlags = 0U;
1375:../drivers/fsl_sdhc.c ****     /* transferredWords will only be updated in ISR when transfer way is DATAPORT. */
1376:../drivers/fsl_sdhc.c ****     handle->transferredWords = 0U;
1377:../drivers/fsl_sdhc.c **** 
1378:../drivers/fsl_sdhc.c ****     SDHC_StartTransfer(base, command, data, dmaMode);
1379:../drivers/fsl_sdhc.c **** 
1380:../drivers/fsl_sdhc.c ****     return kStatus_Success;
1381:../drivers/fsl_sdhc.c **** }
1382:../drivers/fsl_sdhc.c **** 
1383:../drivers/fsl_sdhc.c **** void SDHC_TransferHandleIRQ(SDHC_Type *base, sdhc_handle_t *handle)
1384:../drivers/fsl_sdhc.c **** {
 334              		.loc 1 1384 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              	.LVL39:
 339 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 340              		.cfi_def_cfa_offset 24
 341              		.cfi_offset 3, -24
 342              		.cfi_offset 4, -20
 343              		.cfi_offset 5, -16
 344              		.cfi_offset 6, -12
 345              		.cfi_offset 7, -8
 346              		.cfi_offset 14, -4
 347              	.LBB122:
 348              	.LBB123:
 721:../drivers/fsl_sdhc.h **** }
 349              		.loc 2 721 0
 350 0002 056B     		ldr	r5, [r0, #48]
 351              	.LVL40:
 352              	.LBE123:
 353              	.LBE122:
1385:../drivers/fsl_sdhc.c ****     assert(handle);
1386:../drivers/fsl_sdhc.c **** 
1387:../drivers/fsl_sdhc.c ****     uint32_t interruptFlags;
1388:../drivers/fsl_sdhc.c **** 
1389:../drivers/fsl_sdhc.c ****     interruptFlags = SDHC_GetInterruptStatusFlags(base);
1390:../drivers/fsl_sdhc.c ****     handle->interruptFlags = interruptFlags;
 354              		.loc 1 1390 0
 355 0004 8D60     		str	r5, [r1, #8]
1391:../drivers/fsl_sdhc.c **** 
1392:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CardDetectFlag)
 356              		.loc 1 1392 0
 357 0006 15F0C00F 		tst	r5, #192
1384:../drivers/fsl_sdhc.c ****     assert(handle);
 358              		.loc 1 1384 0
 359 000a 0646     		mov	r6, r0
 360 000c 0C46     		mov	r4, r1
 361              		.loc 1 1392 0
 362 000e 06D0     		beq	.L29
 363              	.LVL41:
 364              	.LBB124:
 365              	.LBB125:
 696:../drivers/fsl_sdhc.c ****     {
 366              		.loc 1 696 0
 367 0010 6B06     		lsls	r3, r5, #25
 698:../drivers/fsl_sdhc.c ****         {
 368              		.loc 1 698 0
 369 0012 4CBF     		ite	mi
 370 0014 0B69     		ldrmi	r3, [r1, #16]
 705:../drivers/fsl_sdhc.c ****         {
 371              		.loc 1 705 0
 372 0016 4B69     		ldrpl	r3, [r1, #20]
 373 0018 0BB1     		cbz	r3, .L29
 707:../drivers/fsl_sdhc.c ****         }
 374              		.loc 1 707 0
 375 001a 496A     		ldr	r1, [r1, #36]
 376              	.LVL42:
 377 001c 9847     		blx	r3
 378              	.LVL43:
 379              	.L29:
 380              	.LBE125:
 381              	.LBE124:
1393:../drivers/fsl_sdhc.c ****     {
1394:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleCardDetect(base, handle, (interruptFlags & kSDHC_CardDetectFlag));
1395:../drivers/fsl_sdhc.c ****     }
1396:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CommandFlag)
 382              		.loc 1 1396 0
 383 001e 2A4B     		ldr	r3, .L94
 384 0020 2B40     		ands	r3, r3, r5
 385 0022 63B1     		cbz	r3, .L32
 386              	.LVL44:
 387              	.LBB126:
 388              	.LBB127:
 716:../drivers/fsl_sdhc.c ****     {
 389              		.loc 1 716 0
 390 0024 15F4702F 		tst	r5, #983040
 391 0028 2AD0     		beq	.L33
 392 002a 2368     		ldr	r3, [r4]
 393              	.LVL45:
 394 002c 43BB     		cbnz	r3, .L33
 395 002e 276A     		ldr	r7, [r4, #32]
 396 0030 37B3     		cbz	r7, .L33
 718:../drivers/fsl_sdhc.c ****     }
 397              		.loc 1 718 0
 398 0032 636A     		ldr	r3, [r4, #36]
 399 0034 40F2A662 		movw	r2, #1702
 400              	.L89:
 726:../drivers/fsl_sdhc.c ****         }
 401              		.loc 1 726 0
 402 0038 2146     		mov	r1, r4
 403 003a 3046     		mov	r0, r6
 404 003c B847     		blx	r7
 405              	.LVL46:
 406              	.L32:
 407              	.LBE127:
 408              	.LBE126:
1397:../drivers/fsl_sdhc.c ****     {
1398:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleCommand(base, handle, (interruptFlags & kSDHC_CommandFlag));
1399:../drivers/fsl_sdhc.c ****     }
1400:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_DataFlag)
 409              		.loc 1 1400 0
 410 003e 234B     		ldr	r3, .L94+4
 411 0040 2B40     		ands	r3, r3, r5
 412 0042 6BB1     		cbz	r3, .L36
 413              	.LVL47:
 414              	.LBB129:
 415              	.LBB130:
 735:../drivers/fsl_sdhc.c ****         (handle->callback.TransferComplete))
 416              		.loc 1 735 0
 417 0044 2368     		ldr	r3, [r4]
 418              	.LVL48:
 419 0046 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 420 0048 33BB     		cbnz	r3, .L37
 421 004a 214B     		ldr	r3, .L94+8
 422 004c 1D42     		tst	r5, r3
 423 004e 23D0     		beq	.L37
 736:../drivers/fsl_sdhc.c ****     {
 424              		.loc 1 736 0
 425 0050 276A     		ldr	r7, [r4, #32]
 735:../drivers/fsl_sdhc.c ****         (handle->callback.TransferComplete))
 426              		.loc 1 735 0
 427 0052 0FB3     		cbz	r7, .L37
 738:../drivers/fsl_sdhc.c ****     }
 428              		.loc 1 738 0
 429 0054 636A     		ldr	r3, [r4, #36]
 430 0056 40F2A762 		movw	r2, #1703
 431              	.L91:
 756:../drivers/fsl_sdhc.c ****         }
 432              		.loc 1 756 0
 433 005a 2146     		mov	r1, r4
 434 005c 3046     		mov	r0, r6
 435 005e B847     		blx	r7
 436              	.LVL49:
 437              	.L36:
 438              	.LBE130:
 439              	.LBE129:
1401:../drivers/fsl_sdhc.c ****     {
1402:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleData(base, handle, (interruptFlags & kSDHC_DataFlag));
1403:../drivers/fsl_sdhc.c ****     }
1404:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_CardInterruptFlag)
 440              		.loc 1 1404 0
 441 0060 EA05     		lsls	r2, r5, #23
 442 0062 04D5     		bpl	.L41
 443              	.LVL50:
 444              	.LBB132:
 445              	.LBB133:
 767:../drivers/fsl_sdhc.c ****     {
 446              		.loc 1 767 0
 447 0064 A369     		ldr	r3, [r4, #24]
 448 0066 13B1     		cbz	r3, .L41
 769:../drivers/fsl_sdhc.c ****     }
 449              		.loc 1 769 0
 450 0068 616A     		ldr	r1, [r4, #36]
 451 006a 3046     		mov	r0, r6
 452 006c 9847     		blx	r3
 453              	.LVL51:
 454              	.L41:
 455              	.LBE133:
 456              	.LBE132:
1405:../drivers/fsl_sdhc.c ****     {
1406:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleSdioInterrupt(base, handle);
1407:../drivers/fsl_sdhc.c ****     }
1408:../drivers/fsl_sdhc.c ****     if (interruptFlags & kSDHC_BlockGapEventFlag)
 457              		.loc 1 1408 0
 458 006e 6B07     		lsls	r3, r5, #29
 459 0070 04D5     		bpl	.L42
 460              	.LVL52:
 461              	.LBB134:
 462              	.LBB135:
 775:../drivers/fsl_sdhc.c ****     {
 463              		.loc 1 775 0
 464 0072 E369     		ldr	r3, [r4, #28]
 465 0074 13B1     		cbz	r3, .L42
 777:../drivers/fsl_sdhc.c ****     }
 466              		.loc 1 777 0
 467 0076 616A     		ldr	r1, [r4, #36]
 468 0078 3046     		mov	r0, r6
 469 007a 9847     		blx	r3
 470              	.LVL53:
 471              	.L42:
 472              	.LBE135:
 473              	.LBE134:
 474              	.LBB136:
 475              	.LBB137:
 732:../drivers/fsl_sdhc.h **** }
 476              		.loc 2 732 0
 477 007c 3563     		str	r5, [r6, #48]
 478              	.LVL54:
 479              	.LBE137:
 480              	.LBE136:
1409:../drivers/fsl_sdhc.c ****     {
1410:../drivers/fsl_sdhc.c ****         SDHC_TransferHandleSdioBlockGap(base, handle);
1411:../drivers/fsl_sdhc.c ****     }
1412:../drivers/fsl_sdhc.c **** 
1413:../drivers/fsl_sdhc.c ****     SDHC_ClearInterruptStatusFlags(base, interruptFlags);
1414:../drivers/fsl_sdhc.c **** }
 481              		.loc 1 1414 0
 482 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 483              	.LVL55:
 484              	.L33:
 485              	.LBB138:
 486              	.LBB128:
 723:../drivers/fsl_sdhc.c ****         if ((!(handle->data)) && (handle->callback.TransferComplete))
 487              		.loc 1 723 0
 488 0080 6168     		ldr	r1, [r4, #4]
 489 0082 3046     		mov	r0, r6
 490 0084 FFF7FEFF 		bl	SDHC_ReceiveCommandResponse
 491              	.LVL56:
 724:../drivers/fsl_sdhc.c ****         {
 492              		.loc 1 724 0
 493 0088 2268     		ldr	r2, [r4]
 494 008a 002A     		cmp	r2, #0
 495 008c D7D1     		bne	.L32
 496 008e 276A     		ldr	r7, [r4, #32]
 497 0090 002F     		cmp	r7, #0
 498 0092 D4D0     		beq	.L32
 726:../drivers/fsl_sdhc.c ****         }
 499              		.loc 1 726 0
 500 0094 636A     		ldr	r3, [r4, #36]
 501 0096 CFE7     		b	.L89
 502              	.LVL57:
 503              	.L37:
 504              	.LBE128:
 505              	.LBE138:
 506              	.LBB139:
 507              	.LBB131:
 742:../drivers/fsl_sdhc.c ****         {
 508              		.loc 1 742 0
 509 0098 AF06     		lsls	r7, r5, #26
 510 009a 0DD5     		bpl	.L38
 744:../drivers/fsl_sdhc.c ****         }
 511              		.loc 1 744 0
 512 009c 2168     		ldr	r1, [r4]
 513 009e E268     		ldr	r2, [r4, #12]
 514 00a0 3046     		mov	r0, r6
 515 00a2 FFF7FEFF 		bl	SDHC_ReadDataPort
 516              	.LVL58:
 517              	.L90:
 748:../drivers/fsl_sdhc.c ****         }
 518              		.loc 1 748 0
 519 00a6 E060     		str	r0, [r4, #12]
 520              	.L39:
 754:../drivers/fsl_sdhc.c ****         {
 521              		.loc 1 754 0
 522 00a8 A907     		lsls	r1, r5, #30
 523 00aa D9D5     		bpl	.L36
 524 00ac 276A     		ldr	r7, [r4, #32]
 525 00ae 002F     		cmp	r7, #0
 526 00b0 D6D0     		beq	.L36
 756:../drivers/fsl_sdhc.c ****         }
 527              		.loc 1 756 0
 528 00b2 636A     		ldr	r3, [r4, #36]
 529 00b4 0022     		movs	r2, #0
 530 00b6 D0E7     		b	.L91
 531              	.L38:
 746:../drivers/fsl_sdhc.c ****         {
 532              		.loc 1 746 0
 533 00b8 E806     		lsls	r0, r5, #27
 534 00ba F5D5     		bpl	.L39
 748:../drivers/fsl_sdhc.c ****         }
 535              		.loc 1 748 0
 536 00bc 2168     		ldr	r1, [r4]
 537 00be E268     		ldr	r2, [r4, #12]
 538 00c0 3046     		mov	r0, r6
 539 00c2 FFF7FEFF 		bl	SDHC_WriteDataPort
 540              	.LVL59:
 541 00c6 EEE7     		b	.L90
 542              	.L95:
 543              		.align	2
 544              	.L94:
 545 00c8 01000F00 		.word	983041
 546 00cc 3A007011 		.word	292552762
 547 00d0 00007011 		.word	292552704
 548              	.LBE131:
 549              	.LBE139:
 550              		.cfi_endproc
 551              	.LFE197:
 553              		.section	.text.SDHC_SetTransferInterrupt,"ax",%progbits
 554              		.align	1
 555              		.syntax unified
 556              		.thumb
 557              		.thumb_func
 558              		.fpu fpv4-sp-d16
 560              	SDHC_SetTransferInterrupt:
 561              	.LFB168:
 257:../drivers/fsl_sdhc.c ****     uint32_t interruptEnabled; /* The Interrupt status flags to be enabled */
 562              		.loc 1 257 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              	.LVL60:
 567 0000 30B5     		push	{r4, r5, lr}
 568              		.cfi_def_cfa_offset 12
 569              		.cfi_offset 4, -12
 570              		.cfi_offset 5, -8
 571              		.cfi_offset 14, -4
 259:../drivers/fsl_sdhc.c **** 
 572              		.loc 1 259 0
 573 0002 856A     		ldr	r5, [r0, #40]
 574              	.LVL61:
 575              	.LBB158:
 576              	.LBB159:
 681:../drivers/fsl_sdhc.h **** }
 577              		.loc 2 681 0
 578 0004 0E4C     		ldr	r4, .L103
 579 0006 426B     		ldr	r2, [r0, #52]
 580 0008 2240     		ands	r2, r2, r4
 581 000a 4263     		str	r2, [r0, #52]
 582              	.LVL62:
 583              	.LBE159:
 584              	.LBE158:
 585              	.LBB160:
 586              	.LBB161:
 703:../drivers/fsl_sdhc.h **** }
 587              		.loc 2 703 0
 588 000c 836B     		ldr	r3, [r0, #56]
 589 000e 2340     		ands	r3, r3, r4
 590 0010 8363     		str	r3, [r0, #56]
 591              	.LVL63:
 592              	.LBE161:
 593              	.LBE160:
 594              	.LBB162:
 595              	.LBB163:
 596              	.LBB164:
 597              		.file 3 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1677:../CMSIS/core_cm4.h ****   }
1678:../CMSIS/core_cm4.h **** }
1679:../CMSIS/core_cm4.h **** 
1680:../CMSIS/core_cm4.h **** 
1681:../CMSIS/core_cm4.h **** /**
1682:../CMSIS/core_cm4.h ****   \brief   Get Interrupt Enable status
1683:../CMSIS/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1684:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1685:../CMSIS/core_cm4.h ****   \return             0  Interrupt is not enabled.
1686:../CMSIS/core_cm4.h ****   \return             1  Interrupt is enabled.
1687:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1688:../CMSIS/core_cm4.h ****  */
1689:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1690:../CMSIS/core_cm4.h **** {
1691:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1692:../CMSIS/core_cm4.h ****   {
1693:../CMSIS/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1694:../CMSIS/core_cm4.h ****   }
1695:../CMSIS/core_cm4.h ****   else
1696:../CMSIS/core_cm4.h ****   {
1697:../CMSIS/core_cm4.h ****     return(0U);
1698:../CMSIS/core_cm4.h ****   }
1699:../CMSIS/core_cm4.h **** }
1700:../CMSIS/core_cm4.h **** 
1701:../CMSIS/core_cm4.h **** 
1702:../CMSIS/core_cm4.h **** /**
1703:../CMSIS/core_cm4.h ****   \brief   Disable Interrupt
1704:../CMSIS/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1705:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1706:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1707:../CMSIS/core_cm4.h ****  */
1708:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1709:../CMSIS/core_cm4.h **** {
1710:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1711:../CMSIS/core_cm4.h ****   {
1712:../CMSIS/core_cm4.h ****     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 598              		.loc 3 1712 0
 599 0012 0C4B     		ldr	r3, .L103+4
 600 0014 4FF40032 		mov	r2, #131072
 601 0018 C3F88820 		str	r2, [r3, #136]
 602              	.LBB165:
 603              	.LBB166:
 604              		.file 4 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 605              		.loc 4 833 0
 606              		.syntax unified
 607              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 608 001c BFF34F8F 		dsb 0xF
 609              	@ 0 "" 2
 610              		.thumb
 611              		.syntax unified
 612              	.LBE166:
 613              	.LBE165:
 614              	.LBB167:
 615              	.LBB168:
 822:../CMSIS/cmsis_gcc.h **** }
 616              		.loc 4 822 0
 617              		.syntax unified
 618              	@ 822 "../CMSIS/cmsis_gcc.h" 1
 619 0020 BFF36F8F 		isb 0xF
 620              	@ 0 "" 2
 621              	.LVL64:
 622              		.thumb
 623              		.syntax unified
 624              	.LBE168:
 625              	.LBE167:
 626              	.LBE164:
 627              	.LBE163:
 628              	.LBE162:
 273:../drivers/fsl_sdhc.c ****     }
 629              		.loc 1 273 0
 630 0024 084A     		ldr	r2, .L103+8
 631 0026 094B     		ldr	r3, .L103+12
 632 0028 15F0080F 		tst	r5, #8
 633 002c 18BF     		it	ne
 634 002e 1346     		movne	r3, r2
 635              	.LVL65:
 636              	.LBB169:
 637              	.LBB170:
 670:../drivers/fsl_sdhc.h **** }
 638              		.loc 2 670 0
 639 0030 426B     		ldr	r2, [r0, #52]
 640 0032 1A43     		orrs	r2, r2, r3
 641 0034 4263     		str	r2, [r0, #52]
 642              	.LVL66:
 643              	.LBE170:
 644              	.LBE169:
 277:../drivers/fsl_sdhc.c ****     {
 645              		.loc 1 277 0
 646 0036 11B1     		cbz	r1, .L96
 647              	.LVL67:
 648              	.LBB171:
 649              	.LBB172:
 692:../drivers/fsl_sdhc.h **** }
 650              		.loc 2 692 0
 651 0038 826B     		ldr	r2, [r0, #56]
 652 003a 1343     		orrs	r3, r3, r2
 653              	.LVL68:
 654 003c 8363     		str	r3, [r0, #56]
 655              	.LVL69:
 656              	.L96:
 657              	.LBE172:
 658              	.LBE171:
 281:../drivers/fsl_sdhc.c **** 
 659              		.loc 1 281 0
 660 003e 30BD     		pop	{r4, r5, pc}
 661              	.LVL70:
 662              	.L104:
 663              		.align	2
 664              	.L103:
 665 0040 C0FE80EE 		.word	-293536064
 666 0044 00E100E0 		.word	-536813312
 667 0048 FB007F11 		.word	293535995
 668 004c 3B007F11 		.word	293535803
 669              		.cfi_endproc
 670              	.LFE168:
 672              		.section	.text.SDHC_Deinit,"ax",%progbits
 673              		.align	1
 674              		.global	SDHC_Deinit
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv4-sp-d16
 680              	SDHC_Deinit:
 681              	.LFB185:
 829:../drivers/fsl_sdhc.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 682              		.loc 1 829 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 687              	.LVL71:
 688              	.LBB177:
 689              	.LBB178:
 690              		.file 5 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 691              		.loc 5 706 0
 692 0000 024A     		ldr	r2, .L106
 693 0002 1368     		ldr	r3, [r2]
 694 0004 23F40033 		bic	r3, r3, #131072
 695 0008 1360     		str	r3, [r2]
 696              	.LVL72:
 697              	.LBE178:
 698              	.LBE177:
 834:../drivers/fsl_sdhc.c **** 
 699              		.loc 1 834 0
 700 000a 7047     		bx	lr
 701              	.L107:
 702              		.align	2
 703              	.L106:
 704 000c 30800440 		.word	1074036784
 705              		.cfi_endproc
 706              	.LFE185:
 708              		.section	.text.SDHC_Reset,"ax",%progbits
 709              		.align	1
 710              		.global	SDHC_Reset
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu fpv4-sp-d16
 716              	SDHC_Reset:
 717              	.LFB186:
 837:../drivers/fsl_sdhc.c ****     base->SYSCTL |= (mask & (SDHC_SYSCTL_RSTA_MASK | SDHC_SYSCTL_RSTC_MASK | SDHC_SYSCTL_RSTD_MASK)
 718              		.loc 1 837 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              	.LVL73:
 723 0000 10B5     		push	{r4, lr}
 724              		.cfi_def_cfa_offset 8
 725              		.cfi_offset 4, -8
 726              		.cfi_offset 14, -4
 838:../drivers/fsl_sdhc.c ****     /* Delay some time to wait reset success. */
 727              		.loc 1 838 0
 728 0002 C46A     		ldr	r4, [r0, #44]
 729 0004 01F0E063 		and	r3, r1, #117440512
 730 0008 2343     		orrs	r3, r3, r4
 731 000a C362     		str	r3, [r0, #44]
 732              	.L109:
 840:../drivers/fsl_sdhc.c ****     {
 733              		.loc 1 840 0
 734 000c C36A     		ldr	r3, [r0, #44]
 735 000e 0B42     		tst	r3, r1
 736 0010 03D1     		bne	.L111
 737              	.L110:
 850:../drivers/fsl_sdhc.c **** 
 738              		.loc 1 850 0
 739 0012 101C     		adds	r0, r2, #0
 740              	.LVL74:
 741 0014 18BF     		it	ne
 742 0016 0120     		movne	r0, #1
 743 0018 10BD     		pop	{r4, pc}
 744              	.LVL75:
 745              	.L111:
 842:../drivers/fsl_sdhc.c ****         {
 746              		.loc 1 842 0
 747 001a 002A     		cmp	r2, #0
 748 001c F9D0     		beq	.L110
 846:../drivers/fsl_sdhc.c ****     }
 749              		.loc 1 846 0
 750 001e 013A     		subs	r2, r2, #1
 751              	.LVL76:
 752 0020 F4E7     		b	.L109
 753              		.cfi_endproc
 754              	.LFE186:
 756              		.section	.text.SDHC_Init,"ax",%progbits
 757              		.align	1
 758              		.global	SDHC_Init
 759              		.syntax unified
 760              		.thumb
 761              		.thumb_func
 762              		.fpu fpv4-sp-d16
 764              	SDHC_Init:
 765              	.LFB184:
 782:../drivers/fsl_sdhc.c ****     assert(config);
 766              		.loc 1 782 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 0, uses_anonymous_args = 0
 770              	.LVL77:
 771              	.LBB183:
 772              	.LBB184:
 695:../drivers/fsl_clock.h **** }
 773              		.loc 5 695 0
 774 0000 194A     		ldr	r2, .L121
 775 0002 1368     		ldr	r3, [r2]
 776              	.LBE184:
 777              	.LBE183:
 782:../drivers/fsl_sdhc.c ****     assert(config);
 778              		.loc 1 782 0
 779 0004 70B5     		push	{r4, r5, r6, lr}
 780              		.cfi_def_cfa_offset 16
 781              		.cfi_offset 4, -16
 782              		.cfi_offset 5, -12
 783              		.cfi_offset 6, -8
 784              		.cfi_offset 14, -4
 785              	.LBB187:
 786              	.LBB185:
 695:../drivers/fsl_clock.h **** }
 787              		.loc 5 695 0
 788 0006 43F40033 		orr	r3, r3, #131072
 789              	.LBE185:
 790              	.LBE187:
 782:../drivers/fsl_sdhc.c ****     assert(config);
 791              		.loc 1 782 0
 792 000a 0446     		mov	r4, r0
 793 000c 0D46     		mov	r5, r1
 794              	.LBB188:
 795              	.LBB186:
 695:../drivers/fsl_clock.h **** }
 796              		.loc 5 695 0
 797 000e 1360     		str	r3, [r2]
 798              	.LVL78:
 799              	.LBE186:
 800              	.LBE188:
 799:../drivers/fsl_sdhc.c **** 
 801              		.loc 1 799 0
 802 0010 4FF08071 		mov	r1, #16777216
 803              	.LVL79:
 804 0014 6422     		movs	r2, #100
 805 0016 FFF7FEFF 		bl	SDHC_Reset
 806              	.LVL80:
 801:../drivers/fsl_sdhc.c ****     wml = base->WML;
 807              		.loc 1 801 0
 808 001a A16A     		ldr	r1, [r4, #40]
 809              	.LVL81:
 806:../drivers/fsl_sdhc.c ****     {
 810              		.loc 1 806 0
 811 001c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 802:../drivers/fsl_sdhc.c **** 
 812              		.loc 1 802 0
 813 001e 666C     		ldr	r6, [r4, #68]
 814              	.LVL82:
 804:../drivers/fsl_sdhc.c ****     /* Set DAT3 as card detection pin */
 815              		.loc 1 804 0
 816 0020 21F44E71 		bic	r1, r1, #824
 817              	.LVL83:
 806:../drivers/fsl_sdhc.c ****     {
 818              		.loc 1 806 0
 819 0024 0BB1     		cbz	r3, .L117
 808:../drivers/fsl_sdhc.c ****     }
 820              		.loc 1 808 0
 821 0026 41F00801 		orr	r1, r1, #8
 822              	.LVL84:
 823              	.L117:
 811:../drivers/fsl_sdhc.c **** 
 824              		.loc 1 811 0
 825 002a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 826 002c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 815:../drivers/fsl_sdhc.c **** 
 827              		.loc 1 815 0
 828 002e AA68     		ldr	r2, [r5, #8]
 811:../drivers/fsl_sdhc.c **** 
 829              		.loc 1 811 0
 830 0030 1B01     		lsls	r3, r3, #4
 831 0032 0002     		lsls	r0, r0, #8
 832 0034 00F44070 		and	r0, r0, #768
 833 0038 03F03003 		and	r3, r3, #48
 834 003c 0343     		orrs	r3, r3, r0
 815:../drivers/fsl_sdhc.c **** 
 835              		.loc 1 815 0
 836 003e 1204     		lsls	r2, r2, #16
 811:../drivers/fsl_sdhc.c **** 
 837              		.loc 1 811 0
 838 0040 0B43     		orrs	r3, r3, r1
 839              	.LVL85:
 814:../drivers/fsl_sdhc.c ****     wml |= (SDHC_WML_RDWML(config->readWatermarkLevel) | SDHC_WML_WRWML(config->writeWatermarkLevel
 840              		.loc 1 814 0
 841 0042 06F0FF26 		and	r6, r6, #-16711936
 842              	.LVL86:
 815:../drivers/fsl_sdhc.c **** 
 843              		.loc 1 815 0
 844 0046 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 845 0048 02F47F02 		and	r2, r2, #16711680
 846 004c 3243     		orrs	r2, r2, r6
 847 004e 0A43     		orrs	r2, r2, r1
 848              	.LVL87:
 817:../drivers/fsl_sdhc.c ****     base->PROCTL = proctl;
 849              		.loc 1 817 0
 850 0050 6264     		str	r2, [r4, #68]
 818:../drivers/fsl_sdhc.c **** 
 851              		.loc 1 818 0
 852 0052 A362     		str	r3, [r4, #40]
 822:../drivers/fsl_sdhc.c **** 
 853              		.loc 1 822 0
 854 0054 E36A     		ldr	r3, [r4, #44]
 855              	.LVL88:
 856 0056 43F00703 		orr	r3, r3, #7
 857 005a E362     		str	r3, [r4, #44]
 858              	.LVL89:
 825:../drivers/fsl_sdhc.c **** }
 859              		.loc 1 825 0
 860 005c 2046     		mov	r0, r4
 861 005e 0021     		movs	r1, #0
 826:../drivers/fsl_sdhc.c **** 
 862              		.loc 1 826 0
 863 0060 BDE87040 		pop	{r4, r5, r6, lr}
 864              		.cfi_restore 14
 865              		.cfi_restore 6
 866              		.cfi_restore 5
 867              		.cfi_restore 4
 868              		.cfi_def_cfa_offset 0
 869              	.LVL90:
 825:../drivers/fsl_sdhc.c **** }
 870              		.loc 1 825 0
 871 0064 FFF7FEBF 		b	SDHC_SetTransferInterrupt
 872              	.LVL91:
 873              	.L122:
 874              		.align	2
 875              	.L121:
 876 0068 30800440 		.word	1074036784
 877              		.cfi_endproc
 878              	.LFE184:
 880              		.section	.text.SDHC_GetCapability,"ax",%progbits
 881              		.align	1
 882              		.global	SDHC_GetCapability
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu fpv4-sp-d16
 888              	SDHC_GetCapability:
 889              	.LFB187:
 853:../drivers/fsl_sdhc.c ****     assert(capability);
 890              		.loc 1 853 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895              	.LVL92:
 860:../drivers/fsl_sdhc.c ****     htCapability = base->HTCAPBLT;
 896              		.loc 1 860 0
 897 0000 D0F8FC20 		ldr	r2, [r0, #252]
 898              	.LVL93:
 861:../drivers/fsl_sdhc.c **** 
 899              		.loc 1 861 0
 900 0004 036C     		ldr	r3, [r0, #64]
 901              	.LVL94:
 864:../drivers/fsl_sdhc.c ****     capability->vendorVersion = ((hostVer & SDHC_HOSTVER_VVN_MASK) >> SDHC_HOSTVER_VVN_SHIFT);
 902              		.loc 1 864 0
 903 0006 D0B2     		uxtb	r0, r2
 904              	.LVL95:
 865:../drivers/fsl_sdhc.c ****     maxBlockLength = ((htCapability & SDHC_HTCAPBLT_MBL_MASK) >> SDHC_HTCAPBLT_MBL_SHIFT);
 905              		.loc 1 865 0
 906 0008 C2F30722 		ubfx	r2, r2, #8, #8
 907              	.LVL96:
 864:../drivers/fsl_sdhc.c ****     capability->vendorVersion = ((hostVer & SDHC_HOSTVER_VVN_MASK) >> SDHC_HOSTVER_VVN_SHIFT);
 908              		.loc 1 864 0
 909 000c 0860     		str	r0, [r1]
 865:../drivers/fsl_sdhc.c ****     maxBlockLength = ((htCapability & SDHC_HTCAPBLT_MBL_MASK) >> SDHC_HTCAPBLT_MBL_SHIFT);
 910              		.loc 1 865 0
 911 000e 4A60     		str	r2, [r1, #4]
 912              	.LVL97:
 866:../drivers/fsl_sdhc.c ****     capability->maxBlockLength = (512U << maxBlockLength);
 913              		.loc 1 866 0
 914 0010 C3F30240 		ubfx	r0, r3, #16, #3
 867:../drivers/fsl_sdhc.c ****     /* Other attributes not in HTCAPBLT register. */
 915              		.loc 1 867 0
 916 0014 4FF40072 		mov	r2, #512
 917 0018 8240     		lsls	r2, r2, r0
 870:../drivers/fsl_sdhc.c ****                                          kSDHC_SupportSuspendResumeFlag | kSDHC_SupportV330Flag));
 918              		.loc 1 870 0
 919 001a 03F0F873 		and	r3, r3, #32505856
 920              	.LVL98:
 867:../drivers/fsl_sdhc.c ****     /* Other attributes not in HTCAPBLT register. */
 921              		.loc 1 867 0
 922 001e 8A60     		str	r2, [r1, #8]
 879:../drivers/fsl_sdhc.c **** }
 923              		.loc 1 879 0
 924 0020 43F03003 		orr	r3, r3, #48
 869:../drivers/fsl_sdhc.c ****     capability->flags = (htCapability & (kSDHC_SupportAdmaFlag | kSDHC_SupportHighSpeedFlag | kSDHC
 925              		.loc 1 869 0
 926 0024 4FF6FF72 		movw	r2, #65535
 927 0028 CA60     		str	r2, [r1, #12]
 879:../drivers/fsl_sdhc.c **** }
 928              		.loc 1 879 0
 929 002a 0B61     		str	r3, [r1, #16]
 880:../drivers/fsl_sdhc.c **** 
 930              		.loc 1 880 0
 931 002c 7047     		bx	lr
 932              		.cfi_endproc
 933              	.LFE187:
 935              		.section	.text.SDHC_SetSdClock,"ax",%progbits
 936              		.align	1
 937              		.global	SDHC_SetSdClock
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu fpv4-sp-d16
 943              	SDHC_SetSdClock:
 944              	.LFB188:
 883:../drivers/fsl_sdhc.c ****     assert(srcClock_Hz != 0U);
 945              		.loc 1 883 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              	.LVL99:
 950 0000 30B5     		push	{r4, r5, lr}
 951              		.cfi_def_cfa_offset 12
 952              		.cfi_offset 4, -12
 953              		.cfi_offset 5, -8
 954              		.cfi_offset 14, -4
 894:../drivers/fsl_sdhc.c **** 
 955              		.loc 1 894 0
 956 0002 B1FBF2F3 		udiv	r3, r1, r2
 957              	.LVL100:
 896:../drivers/fsl_sdhc.c ****     {
 958              		.loc 1 896 0
 959 0006 002B     		cmp	r3, #0
 960 0008 43D0     		beq	.L134
 899:../drivers/fsl_sdhc.c ****         {
 961              		.loc 1 899 0
 962 000a B1FBF3F4 		udiv	r4, r1, r3
 963 000e 9442     		cmp	r4, r2
 901:../drivers/fsl_sdhc.c ****         }
 964              		.loc 1 901 0
 965 0010 88BF     		it	hi
 966 0012 0133     		addhi	r3, r3, #1
 967              	.LVL101:
 905:../drivers/fsl_sdhc.c ****         {
 968              		.loc 1 905 0
 969 0014 102B     		cmp	r3, #16
 970 0016 38D9     		bls	.L127
 907:../drivers/fsl_sdhc.c ****             /* prescaler must be a value which equal 2^n and smaller than SDHC_MAX_CLKFS */
 971              		.loc 1 907 0
 972 0018 1A09     		lsrs	r2, r3, #4
 973              	.LVL102:
 909:../drivers/fsl_sdhc.c ****             {
 974              		.loc 1 909 0
 975 001a 4FF48075 		mov	r5, #256
 976              	.L128:
 977 001e B5FBF2F4 		udiv	r4, r5, r2
 978 0022 5443     		muls	r4, r2, r4
 979 0024 B4F5807F 		cmp	r4, #256
 980 0028 2AD1     		bne	.L129
 909:../drivers/fsl_sdhc.c ****             {
 981              		.loc 1 909 0 is_stmt 0 discriminator 1
 982 002a 012A     		cmp	r2, #1
 983 002c 28D0     		beq	.L129
 914:../drivers/fsl_sdhc.c ****             /* fine tuning the divisor until divisor * prescaler >= totalDiv */
 984              		.loc 1 914 0 is_stmt 1
 985 002e B3FBF2F4 		udiv	r4, r3, r2
 986              	.LVL103:
 987 0032 04FB02F5 		mul	r5, r4, r2
 988              	.L130:
 916:../drivers/fsl_sdhc.c ****             {
 989              		.loc 1 916 0
 990 0036 AB42     		cmp	r3, r5
 991 0038 24D8     		bhi	.L131
 920:../drivers/fsl_sdhc.c ****         }
 992              		.loc 1 920 0
 993 003a B1FBF4F1 		udiv	r1, r1, r4
 994              	.LVL104:
 995 003e B1FBF2F1 		udiv	r1, r1, r2
 996              	.LVL105:
 997 0042 2346     		mov	r3, r4
 998              	.LVL106:
 999              	.L132:
 939:../drivers/fsl_sdhc.c ****     {
 1000              		.loc 1 939 0
 1001 0044 03B1     		cbz	r3, .L125
 941:../drivers/fsl_sdhc.c ****     }
 1002              		.loc 1 941 0
 1003 0046 013B     		subs	r3, r3, #1
 1004              	.LVL107:
 1005              	.L125:
 950:../drivers/fsl_sdhc.c **** 
 1006              		.loc 1 950 0
 1007 0048 C46A     		ldr	r4, [r0, #44]
 1008 004a 24F00804 		bic	r4, r4, #8
 1009 004e C462     		str	r4, [r0, #44]
 953:../drivers/fsl_sdhc.c ****     sysctl &= ~(SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK | SDHC_SYSCTL_DTOCV_MASK);
 1010              		.loc 1 953 0
 1011 0050 C46A     		ldr	r4, [r0, #44]
 1012              	.LVL108:
 954:../drivers/fsl_sdhc.c ****     sysctl |= (SDHC_SYSCTL_DVS(divisor) | SDHC_SYSCTL_SDCLKFS(prescaler) | SDHC_SYSCTL_DTOCV(0xEU))
 1013              		.loc 1 954 0
 1014 0052 24F47F24 		bic	r4, r4, #1044480
 1015              	.LVL109:
 955:../drivers/fsl_sdhc.c ****     base->SYSCTL = sysctl;
 1016              		.loc 1 955 0
 1017 0056 1B01     		lsls	r3, r3, #4
 1018              	.LVL110:
 954:../drivers/fsl_sdhc.c ****     sysctl |= (SDHC_SYSCTL_DVS(divisor) | SDHC_SYSCTL_SDCLKFS(prescaler) | SDHC_SYSCTL_DTOCV(0xEU))
 1019              		.loc 1 954 0
 1020 0058 24F47F64 		bic	r4, r4, #4080
 955:../drivers/fsl_sdhc.c ****     base->SYSCTL = sysctl;
 1021              		.loc 1 955 0
 1022 005c DBB2     		uxtb	r3, r3
 1023 005e 44F46024 		orr	r4, r4, #917504
 1024 0062 D201     		lsls	r2, r2, #7
 1025              	.LVL111:
 1026 0064 2343     		orrs	r3, r3, r4
 1027 0066 02F47F42 		and	r2, r2, #65280
 1028 006a 1343     		orrs	r3, r3, r2
 1029              	.LVL112:
 956:../drivers/fsl_sdhc.c **** 
 1030              		.loc 1 956 0
 1031 006c C362     		str	r3, [r0, #44]
 1032              	.LVL113:
 1033              	.L133:
 959:../drivers/fsl_sdhc.c ****     {
 1034              		.loc 1 959 0 discriminator 1
 1035 006e 436A     		ldr	r3, [r0, #36]
 1036 0070 1B07     		lsls	r3, r3, #28
 1037 0072 FCD5     		bpl	.L133
 963:../drivers/fsl_sdhc.c **** 
 1038              		.loc 1 963 0
 1039 0074 C36A     		ldr	r3, [r0, #44]
 1040 0076 43F00803 		orr	r3, r3, #8
 1041 007a C362     		str	r3, [r0, #44]
 1042              	.LVL114:
 966:../drivers/fsl_sdhc.c **** 
 1043              		.loc 1 966 0
 1044 007c 0846     		mov	r0, r1
 1045              	.LVL115:
 1046 007e 30BD     		pop	{r4, r5, pc}
 1047              	.LVL116:
 1048              	.L129:
 911:../drivers/fsl_sdhc.c ****             }
 1049              		.loc 1 911 0
 1050 0080 0132     		adds	r2, r2, #1
 1051              	.LVL117:
 1052 0082 CCE7     		b	.L128
 1053              	.LVL118:
 1054              	.L131:
 918:../drivers/fsl_sdhc.c ****             }
 1055              		.loc 1 918 0
 1056 0084 0134     		adds	r4, r4, #1
 1057              	.LVL119:
 1058 0086 1544     		add	r5, r5, r2
 1059 0088 D5E7     		b	.L130
 1060              	.LVL120:
 1061              	.L127:
 926:../drivers/fsl_sdhc.c ****         }
 1062              		.loc 1 926 0
 1063 008a B1FBF3F1 		udiv	r1, r1, r3
 1064              	.LVL121:
 925:../drivers/fsl_sdhc.c ****             nearestFrequency = srcClock_Hz / divisor;
 1065              		.loc 1 925 0
 1066 008e 0022     		movs	r2, #0
 1067              	.LVL122:
 1068 0090 D8E7     		b	.L132
 1069              	.LVL123:
 1070              	.L134:
 934:../drivers/fsl_sdhc.c ****         nearestFrequency = srcClock_Hz;
 1071              		.loc 1 934 0
 1072 0092 1A46     		mov	r2, r3
 1073              	.LVL124:
 1074 0094 D8E7     		b	.L125
 1075              		.cfi_endproc
 1076              	.LFE188:
 1078              		.section	.text.SDHC_SetCardActive,"ax",%progbits
 1079              		.align	1
 1080              		.global	SDHC_SetCardActive
 1081              		.syntax unified
 1082              		.thumb
 1083              		.thumb_func
 1084              		.fpu fpv4-sp-d16
 1086              	SDHC_SetCardActive:
 1087              	.LFB189:
 969:../drivers/fsl_sdhc.c ****     base->SYSCTL |= SDHC_SYSCTL_INITA_MASK;
 1088              		.loc 1 969 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 1093              	.LVL125:
 970:../drivers/fsl_sdhc.c ****     /* Delay some time to wait card become active state. */
 1094              		.loc 1 970 0
 1095 0000 C36A     		ldr	r3, [r0, #44]
 1096 0002 43F00063 		orr	r3, r3, #134217728
 1097 0006 C362     		str	r3, [r0, #44]
 1098              	.L144:
 972:../drivers/fsl_sdhc.c ****     {
 1099              		.loc 1 972 0
 1100 0008 C36A     		ldr	r3, [r0, #44]
 1101 000a 1B01     		lsls	r3, r3, #4
 1102 000c 03D4     		bmi	.L146
 1103              	.L145:
 982:../drivers/fsl_sdhc.c **** 
 1104              		.loc 1 982 0
 1105 000e 081C     		adds	r0, r1, #0
 1106              	.LVL126:
 1107 0010 18BF     		it	ne
 1108 0012 0120     		movne	r0, #1
 1109 0014 7047     		bx	lr
 1110              	.LVL127:
 1111              	.L146:
 974:../drivers/fsl_sdhc.c ****         {
 1112              		.loc 1 974 0
 1113 0016 0029     		cmp	r1, #0
 1114 0018 F9D0     		beq	.L145
 978:../drivers/fsl_sdhc.c ****     }
 1115              		.loc 1 978 0
 1116 001a 0139     		subs	r1, r1, #1
 1117              	.LVL128:
 1118 001c F4E7     		b	.L144
 1119              		.cfi_endproc
 1120              	.LFE189:
 1122              		.section	.text.SDHC_SetTransferConfig,"ax",%progbits
 1123              		.align	1
 1124              		.global	SDHC_SetTransferConfig
 1125              		.syntax unified
 1126              		.thumb
 1127              		.thumb_func
 1128              		.fpu fpv4-sp-d16
 1130              	SDHC_SetTransferConfig:
 1131              	.LFB190:
 985:../drivers/fsl_sdhc.c ****     assert(config);
 1132              		.loc 1 985 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              	.LVL129:
 991:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 1137              		.loc 1 991 0
 1138 0000 0B68     		ldr	r3, [r1]
 990:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 1139              		.loc 1 990 0
 1140 0002 4268     		ldr	r2, [r0, #4]
 985:../drivers/fsl_sdhc.c ****     assert(config);
 1141              		.loc 1 985 0
 1142 0004 10B5     		push	{r4, lr}
 1143              		.cfi_def_cfa_offset 8
 1144              		.cfi_offset 4, -8
 1145              		.cfi_offset 14, -4
 991:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 1146              		.loc 1 991 0
 1147 0006 4C68     		ldr	r4, [r1, #4]
 1148 0008 C3F30C03 		ubfx	r3, r3, #0, #13
 990:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 1149              		.loc 1 990 0
 1150 000c 02F46042 		and	r2, r2, #57344
 991:../drivers/fsl_sdhc.c ****     base->CMDARG = config->commandArgument;
 1151              		.loc 1 991 0
 1152 0010 43EA0443 		orr	r3, r3, r4, lsl #16
 990:../drivers/fsl_sdhc.c ****                      (SDHC_BLKATTR_BLKSIZE(config->dataBlockSize) | SDHC_BLKATTR_BLKCNT(config->dat
 1153              		.loc 1 990 0
 1154 0014 1343     		orrs	r3, r3, r2
 1155 0016 4360     		str	r3, [r0, #4]
 992:../drivers/fsl_sdhc.c ****     base->XFERTYP = (((config->commandIndex << SDHC_XFERTYP_CMDINX_SHIFT) & SDHC_XFERTYP_CMDINX_MAS
 1156              		.loc 1 992 0
 1157 0018 8B68     		ldr	r3, [r1, #8]
 1158 001a 8360     		str	r3, [r0, #8]
 993:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 1159              		.loc 1 993 0
 1160 001c CB68     		ldr	r3, [r1, #12]
 994:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CMDTYP_MASK | SDHC_XFERTYP_BCEN_MASK | SDHC_XFE
 1161              		.loc 1 994 0
 1162 001e 044A     		ldr	r2, .L152
 1163 0020 0969     		ldr	r1, [r1, #16]
 1164              	.LVL130:
 993:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 1165              		.loc 1 993 0
 1166 0022 1B06     		lsls	r3, r3, #24
 1167 0024 03F07C53 		and	r3, r3, #1056964608
 994:../drivers/fsl_sdhc.c ****                                        SDHC_XFERTYP_CMDTYP_MASK | SDHC_XFERTYP_BCEN_MASK | SDHC_XFE
 1168              		.loc 1 994 0
 1169 0028 0A40     		ands	r2, r2, r1
 993:../drivers/fsl_sdhc.c ****                      (config->flags & (SDHC_XFERTYP_DMAEN_MASK | SDHC_XFERTYP_MSBSEL_MASK | SDHC_XF
 1170              		.loc 1 993 0
 1171 002a 1343     		orrs	r3, r3, r2
 1172 002c C360     		str	r3, [r0, #12]
 998:../drivers/fsl_sdhc.c **** 
 1173              		.loc 1 998 0
 1174 002e 10BD     		pop	{r4, pc}
 1175              	.L153:
 1176              		.align	2
 1177              	.L152:
 1178 0030 3700FB00 		.word	16449591
 1179              		.cfi_endproc
 1180              	.LFE190:
 1182              		.section	.text.SDHC_StartTransfer,"ax",%progbits
 1183              		.align	1
 1184              		.syntax unified
 1185              		.thumb
 1186              		.thumb_func
 1187              		.fpu fpv4-sp-d16
 1189              	SDHC_StartTransfer:
 1190              	.LFB169:
 284:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 1191              		.loc 1 284 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 24
 1194              		@ frame_needed = 0, uses_anonymous_args = 0
 1195              	.LVL131:
 1196 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1197              		.cfi_def_cfa_offset 20
 1198              		.cfi_offset 4, -20
 1199              		.cfi_offset 5, -16
 1200              		.cfi_offset 6, -12
 1201              		.cfi_offset 7, -8
 1202              		.cfi_offset 14, -4
 1203 0002 0D46     		mov	r5, r1
 1204 0004 87B0     		sub	sp, sp, #28
 1205              		.cfi_def_cfa_offset 48
 284:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 1206              		.loc 1 284 0
 1207 0006 0646     		mov	r6, r0
 1208 0008 1446     		mov	r4, r2
 286:../drivers/fsl_sdhc.c **** 
 1209              		.loc 1 286 0
 1210 000a 0021     		movs	r1, #0
 1211              	.LVL132:
 1212 000c 1422     		movs	r2, #20
 1213              	.LVL133:
 1214 000e 01A8     		add	r0, sp, #4
 1215              	.LVL134:
 284:../drivers/fsl_sdhc.c ****     uint32_t flags = 0U;
 1216              		.loc 1 284 0
 1217 0010 1F46     		mov	r7, r3
 286:../drivers/fsl_sdhc.c **** 
 1218              		.loc 1 286 0
 1219 0012 FFF7FEFF 		bl	memset
 1220              	.LVL135:
 1221 0016 6A7A     		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 1222 0018 013A     		subs	r2, r2, #1
 1223 001a D2B2     		uxtb	r2, r2
 1224 001c 082A     		cmp	r2, #8
 1225 001e 9CBF     		itt	ls
 1226 0020 164B     		ldrls	r3, .L170
 1227 0022 53F82220 		ldrls	r2, [r3, r2, lsl #2]
 323:../drivers/fsl_sdhc.c ****     {
 1228              		.loc 1 323 0
 1229 0026 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 289:../drivers/fsl_sdhc.c ****     {
 1230              		.loc 1 289 0
 1231 0028 88BF     		it	hi
 1232 002a 0022     		movhi	r2, #0
 1233              	.LVL136:
 323:../drivers/fsl_sdhc.c ****     {
 1234              		.loc 1 323 0
 1235 002c 032B     		cmp	r3, #3
 325:../drivers/fsl_sdhc.c ****     }
 1236              		.loc 1 325 0
 1237 002e 08BF     		it	eq
 1238 0030 42F44002 		orreq	r2, r2, #12582912
 1239              	.LVL137:
 328:../drivers/fsl_sdhc.c ****     {
 1240              		.loc 1 328 0
 1241 0034 84B1     		cbz	r4, .L157
 1242              	.LVL138:
 334:../drivers/fsl_sdhc.c ****         }
 1243              		.loc 1 334 0
 1244 0036 42F40012 		orr	r2, r2, #2097152
 1245              	.LVL139:
 332:../drivers/fsl_sdhc.c ****         {
 1246              		.loc 1 332 0
 1247 003a C7B9     		cbnz	r7, .L158
 1248              	.L159:
 336:../drivers/fsl_sdhc.c ****         {
 1249              		.loc 1 336 0
 1250 003c E368     		ldr	r3, [r4, #12]
 1251 003e 0BB1     		cbz	r3, .L160
 338:../drivers/fsl_sdhc.c ****         }
 1252              		.loc 1 338 0
 1253 0040 42F01002 		orr	r2, r2, #16
 1254              	.LVL140:
 1255              	.L160:
 340:../drivers/fsl_sdhc.c ****         {
 1256              		.loc 1 340 0
 1257 0044 A368     		ldr	r3, [r4, #8]
 1258 0046 012B     		cmp	r3, #1
 1259 0048 03D9     		bls	.L161
 1260              	.LVL141:
 343:../drivers/fsl_sdhc.c ****             {
 1261              		.loc 1 343 0
 1262 004a 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 1263 004c 91B9     		cbnz	r1, .L162
 342:../drivers/fsl_sdhc.c ****             if (data->enableAutoCommand12)
 1264              		.loc 1 342 0
 1265 004e 42F02202 		orr	r2, r2, #34
 1266              	.LVL142:
 1267              	.L161:
 350:../drivers/fsl_sdhc.c ****         sdhcTransferConfig.dataBlockCount = data->blockCount;
 1268              		.loc 1 350 0
 1269 0052 6168     		ldr	r1, [r4, #4]
 351:../drivers/fsl_sdhc.c ****     }
 1270              		.loc 1 351 0
 1271 0054 CDE90113 		strd	r1, r3, [sp, #4]
 1272              	.L157:
 359:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.commandIndex = command->index;
 1273              		.loc 1 359 0
 1274 0058 6B68     		ldr	r3, [r5, #4]
 1275 005a 0393     		str	r3, [sp, #12]
 360:../drivers/fsl_sdhc.c ****     sdhcTransferConfig.flags = flags;
 1276              		.loc 1 360 0
 1277 005c 2B68     		ldr	r3, [r5]
 362:../drivers/fsl_sdhc.c **** }
 1278              		.loc 1 362 0
 1279 005e 01A9     		add	r1, sp, #4
 1280 0060 3046     		mov	r0, r6
 361:../drivers/fsl_sdhc.c ****     SDHC_SetTransferConfig(base, &sdhcTransferConfig);
 1281              		.loc 1 361 0
 1282 0062 CDE90432 		strd	r3, r2, [sp, #16]
 362:../drivers/fsl_sdhc.c **** }
 1283              		.loc 1 362 0
 1284 0066 FFF7FEFF 		bl	SDHC_SetTransferConfig
 1285              	.LVL143:
 363:../drivers/fsl_sdhc.c **** 
 1286              		.loc 1 363 0
 1287 006a 07B0     		add	sp, sp, #28
 1288              		.cfi_remember_state
 1289              		.cfi_def_cfa_offset 20
 1290              		@ sp needed
 1291 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1292              	.LVL144:
 1293              	.L158:
 1294              		.cfi_restore_state
 334:../drivers/fsl_sdhc.c ****         }
 1295              		.loc 1 334 0
 1296 006e 42F00102 		orr	r2, r2, #1
 1297              	.LVL145:
 1298 0072 E3E7     		b	.L159
 1299              	.LVL146:
 1300              	.L162:
 346:../drivers/fsl_sdhc.c ****             }
 1301              		.loc 1 346 0
 1302 0074 42F02602 		orr	r2, r2, #38
 1303              	.LVL147:
 1304 0078 EBE7     		b	.L161
 1305              	.L171:
 1306 007a 00BF     		.align	2
 1307              	.L170:
 1308 007c 00000000 		.word	.LANCHOR0
 1309              		.cfi_endproc
 1310              	.LFE169:
 1312              		.section	.text.SDHC_EnableSdioControl,"ax",%progbits
 1313              		.align	1
 1314              		.global	SDHC_EnableSdioControl
 1315              		.syntax unified
 1316              		.thumb
 1317              		.thumb_func
 1318              		.fpu fpv4-sp-d16
 1320              	SDHC_EnableSdioControl:
 1321              	.LFB191:
1001:../drivers/fsl_sdhc.c ****     uint32_t proctl = base->PROCTL;
 1322              		.loc 1 1001 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326              	.LVL148:
 1327 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1328              		.cfi_def_cfa_offset 20
 1329              		.cfi_offset 4, -20
 1330              		.cfi_offset 5, -16
 1331              		.cfi_offset 6, -12
 1332              		.cfi_offset 7, -8
 1333              		.cfi_offset 14, -4
1002:../drivers/fsl_sdhc.c ****     uint32_t vendor = base->VENDOR;
 1334              		.loc 1 1002 0
 1335 0002 836A     		ldr	r3, [r0, #40]
 1336              	.LVL149:
1003:../drivers/fsl_sdhc.c **** 
 1337              		.loc 1 1003 0
 1338 0004 D0F8C040 		ldr	r4, [r0, #192]
 1339              	.LVL150:
 1340 0008 01F00107 		and	r7, r1, #1
 1341 000c 01F00206 		and	r6, r1, #2
 1342 0010 01F00405 		and	r5, r1, #4
 1343 0014 01F00801 		and	r1, r1, #8
 1344              	.LVL151:
1005:../drivers/fsl_sdhc.c ****     {
 1345              		.loc 1 1005 0
 1346 0018 7AB1     		cbz	r2, .L173
1007:../drivers/fsl_sdhc.c ****         {
 1347              		.loc 1 1007 0
 1348 001a 0FB1     		cbz	r7, .L174
1009:../drivers/fsl_sdhc.c ****         }
 1349              		.loc 1 1009 0
 1350 001c 43F48033 		orr	r3, r3, #65536
 1351              	.LVL152:
 1352              	.L174:
1011:../drivers/fsl_sdhc.c ****         {
 1353              		.loc 1 1011 0
 1354 0020 0EB1     		cbz	r6, .L175
1013:../drivers/fsl_sdhc.c ****         }
 1355              		.loc 1 1013 0
 1356 0022 43F48023 		orr	r3, r3, #262144
 1357              	.LVL153:
 1358              	.L175:
1015:../drivers/fsl_sdhc.c ****         {
 1359              		.loc 1 1015 0
 1360 0026 0DB1     		cbz	r5, .L176
1017:../drivers/fsl_sdhc.c ****         }
 1361              		.loc 1 1017 0
 1362 0028 43F40023 		orr	r3, r3, #524288
 1363              	.LVL154:
 1364              	.L176:
1019:../drivers/fsl_sdhc.c ****         {
 1365              		.loc 1 1019 0
 1366 002c 09B1     		cbz	r1, .L177
1021:../drivers/fsl_sdhc.c ****         }
 1367              		.loc 1 1021 0
 1368 002e 44F00204 		orr	r4, r4, #2
 1369              	.LVL155:
 1370              	.L177:
1044:../drivers/fsl_sdhc.c ****     base->VENDOR = vendor;
 1371              		.loc 1 1044 0
 1372 0032 8362     		str	r3, [r0, #40]
1045:../drivers/fsl_sdhc.c **** }
 1373              		.loc 1 1045 0
 1374 0034 C0F8C040 		str	r4, [r0, #192]
1046:../drivers/fsl_sdhc.c **** 
 1375              		.loc 1 1046 0
 1376 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 1377              	.LVL156:
 1378              	.L173:
1026:../drivers/fsl_sdhc.c ****         {
 1379              		.loc 1 1026 0
 1380 003a 0FB1     		cbz	r7, .L178
1028:../drivers/fsl_sdhc.c ****         }
 1381              		.loc 1 1028 0
 1382 003c 23F48033 		bic	r3, r3, #65536
 1383              	.LVL157:
 1384              	.L178:
1030:../drivers/fsl_sdhc.c ****         {
 1385              		.loc 1 1030 0
 1386 0040 0EB1     		cbz	r6, .L179
1032:../drivers/fsl_sdhc.c ****         }
 1387              		.loc 1 1032 0
 1388 0042 23F48023 		bic	r3, r3, #262144
 1389              	.LVL158:
 1390              	.L179:
1034:../drivers/fsl_sdhc.c ****         {
 1391              		.loc 1 1034 0
 1392 0046 0DB1     		cbz	r5, .L180
1036:../drivers/fsl_sdhc.c ****         }
 1393              		.loc 1 1036 0
 1394 0048 23F40023 		bic	r3, r3, #524288
 1395              	.LVL159:
 1396              	.L180:
1038:../drivers/fsl_sdhc.c ****         {
 1397              		.loc 1 1038 0
 1398 004c 0029     		cmp	r1, #0
 1399 004e F0D0     		beq	.L177
1040:../drivers/fsl_sdhc.c ****         }
 1400              		.loc 1 1040 0
 1401 0050 24F00204 		bic	r4, r4, #2
 1402              	.LVL160:
 1403 0054 EDE7     		b	.L177
 1404              		.cfi_endproc
 1405              	.LFE191:
 1407              		.section	.text.SDHC_SetMmcBootConfig,"ax",%progbits
 1408              		.align	1
 1409              		.global	SDHC_SetMmcBootConfig
 1410              		.syntax unified
 1411              		.thumb
 1412              		.thumb_func
 1413              		.fpu fpv4-sp-d16
 1415              	SDHC_SetMmcBootConfig:
 1416              	.LFB192:
1049:../drivers/fsl_sdhc.c ****     assert(config);
 1417              		.loc 1 1049 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 0, uses_anonymous_args = 0
 1421              		@ link register save eliminated.
 1422              	.LVL161:
1056:../drivers/fsl_sdhc.c ****                SDHC_MMCBOOT_BOOTBLKCNT(config->blockCount));
 1423              		.loc 1 1056 0
 1424 0000 0B68     		ldr	r3, [r1]
1057:../drivers/fsl_sdhc.c ****     if (config->enableBootAck)
 1425              		.loc 1 1057 0
 1426 0002 8A68     		ldr	r2, [r1, #8]
1056:../drivers/fsl_sdhc.c ****                SDHC_MMCBOOT_BOOTBLKCNT(config->blockCount));
 1427              		.loc 1 1056 0
 1428 0004 03F00F03 		and	r3, r3, #15
 1429 0008 43EA0243 		orr	r3, r3, r2, lsl #16
 1430 000c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1431 000e 5201     		lsls	r2, r2, #5
 1432 0010 02F02002 		and	r2, r2, #32
 1433 0014 1343     		orrs	r3, r3, r2
 1434              	.LVL162:
1058:../drivers/fsl_sdhc.c ****     {
 1435              		.loc 1 1058 0
 1436 0016 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 1437 0018 0AB1     		cbz	r2, .L206
1060:../drivers/fsl_sdhc.c ****     }
 1438              		.loc 1 1060 0
 1439 001a 43F01003 		orr	r3, r3, #16
 1440              	.LVL163:
 1441              	.L206:
1062:../drivers/fsl_sdhc.c ****     {
 1442              		.loc 1 1062 0
 1443 001e 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 1444 0020 0AB1     		cbz	r2, .L207
1064:../drivers/fsl_sdhc.c ****     }
 1445              		.loc 1 1064 0
 1446 0022 43F04003 		orr	r3, r3, #64
 1447              	.LVL164:
 1448              	.L207:
1066:../drivers/fsl_sdhc.c ****     {
 1449              		.loc 1 1066 0
 1450 0026 8A7B     		ldrb	r2, [r1, #14]	@ zero_extendqisi2
 1451 0028 0AB1     		cbz	r2, .L208
1068:../drivers/fsl_sdhc.c ****     }
 1452              		.loc 1 1068 0
 1453 002a 43F08003 		orr	r3, r3, #128
 1454              	.LVL165:
 1455              	.L208:
1070:../drivers/fsl_sdhc.c **** }
 1456              		.loc 1 1070 0
 1457 002e C0F8C430 		str	r3, [r0, #196]
1071:../drivers/fsl_sdhc.c **** 
 1458              		.loc 1 1071 0
 1459 0032 7047     		bx	lr
 1460              		.cfi_endproc
 1461              	.LFE192:
 1463              		.section	.text.SDHC_SetAdmaTableConfig,"ax",%progbits
 1464              		.align	1
 1465              		.global	SDHC_SetAdmaTableConfig
 1466              		.syntax unified
 1467              		.thumb
 1468              		.thumb_func
 1469              		.fpu fpv4-sp-d16
 1471              	SDHC_SetAdmaTableConfig:
 1472              	.LFB193:
1079:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 1473              		.loc 1 1079 0
 1474              		.cfi_startproc
 1475              		@ args = 8, pretend = 0, frame = 0
 1476              		@ frame_needed = 0, uses_anonymous_args = 0
 1477              	.LVL166:
 1478 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1479              		.cfi_def_cfa_offset 24
 1480              		.cfi_offset 4, -24
 1481              		.cfi_offset 5, -20
 1482              		.cfi_offset 6, -16
 1483              		.cfi_offset 7, -12
 1484              		.cfi_offset 8, -8
 1485              		.cfi_offset 14, -4
1079:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 1486              		.loc 1 1079 0
 1487 0004 DDE906C4 		ldrd	ip, r4, [sp, #24]
 1488              	.LVL167:
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1489              		.loc 1 1089 0
 1490 0008 02B1     		cbz	r2, .L219
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1491              		.loc 1 1089 0 is_stmt 0 discriminator 2
 1492 000a 13B9     		cbnz	r3, .L220
 1493              	.L219:
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1494              		.loc 1 1089 0 discriminator 3
 1495 000c 4D1E     		subs	r5, r1, #1
 1496 000e 012D     		cmp	r5, #1
 1497 0010 45D9     		bls	.L229
 1498              	.L220:
1089:../drivers/fsl_sdhc.c ****         (!data) || (!dataBytes)
 1499              		.loc 1 1089 0 discriminator 5
 1500 0012 BCF1000F 		cmp	ip, #0
 1501 0016 42D0     		beq	.L229
1090:../drivers/fsl_sdhc.c **** #if !defined FSL_SDHC_ENABLE_ADMA1
 1502              		.loc 1 1090 0 is_stmt 1
 1503 0018 002C     		cmp	r4, #0
 1504 001a 40D0     		beq	.L229
1092:../drivers/fsl_sdhc.c **** #endif
 1505              		.loc 1 1092 0
 1506 001c 0129     		cmp	r1, #1
 1507 001e 3ED0     		beq	.L229
1098:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 1508              		.loc 1 1098 0
 1509 0020 0229     		cmp	r1, #2
 1510 0022 3AD1     		bne	.L230
1098:../drivers/fsl_sdhc.c **** #if defined FSL_SDHC_ENABLE_ADMA1
 1511              		.loc 1 1098 0 is_stmt 0 discriminator 1
 1512 0024 1CF0030F 		tst	ip, #3
 1513 0028 3CD1     		bne	.L231
 1514              	.LVL168:
 1515              	.LBB195:
 1516              	.LBB196:
1178:../drivers/fsl_sdhc.c ****                 {
 1517              		.loc 1 1178 0 is_stmt 1
 1518 002a A107     		lsls	r1, r4, #30
 1519              	.LVL169:
1180:../drivers/fsl_sdhc.c ****                         sizeof(uint32_t) - (dataBytes % sizeof(uint32_t)); /* make the data length 
 1520              		.loc 1 1180 0
 1521 002c 1CBF     		itt	ne
 1522 002e 24F00304 		bicne	r4, r4, #3
 1523              	.LVL170:
 1524 0032 0434     		addne	r4, r4, #4
 1525              	.LVL171:
1185:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma2_descriptor_t)))
 1526              		.loc 1 1185 0
 1527 0034 4FF6FF75 		movw	r5, #65535
1186:../drivers/fsl_sdhc.c ****                 {
 1528              		.loc 1 1186 0
 1529 0038 C3F35C03 		ubfx	r3, r3, #1, #29
 1530              	.LVL172:
1185:../drivers/fsl_sdhc.c ****                 if (entries > ((tableWords * sizeof(uint32_t)) / sizeof(sdhc_adma2_descriptor_t)))
 1531              		.loc 1 1185 0
 1532 003c B4FBF5F5 		udiv	r5, r4, r5
 1533 0040 0135     		adds	r5, r5, #1
 1534              	.LVL173:
1186:../drivers/fsl_sdhc.c ****                 {
 1535              		.loc 1 1186 0
 1536 0042 9D42     		cmp	r5, r3
 1537 0044 31D8     		bhi	.L232
1212:../drivers/fsl_sdhc.c ****                             startAddress += (SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(ui
 1538              		.loc 1 1212 0
 1539 0046 DFF868E0 		ldr	lr, .L240
1186:../drivers/fsl_sdhc.c ****                 {
 1540              		.loc 1 1186 0
 1541 004a 6746     		mov	r7, ip
1193:../drivers/fsl_sdhc.c ****                     {
 1542              		.loc 1 1193 0
 1543 004c 0021     		movs	r1, #0
1213:../drivers/fsl_sdhc.c ****                         }
 1544              		.loc 1 1213 0
 1545 004e 4FF6FC78 		movw	r8, #65532
 1546              	.LVL174:
 1547              	.L225:
1196:../drivers/fsl_sdhc.c ****                             SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY)
 1548              		.loc 1 1196 0
 1549 0052 A7EB0C03 		sub	r3, r7, ip
 1550 0056 E31A     		subs	r3, r4, r3
 1551 0058 B3F5803F 		cmp	r3, #65536
 1552 005c 4FEAC106 		lsl	r6, r1, #3
1202:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute |=
 1553              		.loc 1 1202 0
 1554 0060 38BF     		it	cc
 1555 0062 1B04     		lslcc	r3, r3, #16
1200:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute = ((dataBytes - sizeof(uint32_t) * (star
 1556              		.loc 1 1200 0
 1557 0064 1644     		add	r6, r6, r2
1203:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma2DescriptorTypeTransfer | kSDHC_Adma2DescriptorEndFlag);
 1558              		.loc 1 1203 0
 1559 0066 38BF     		it	cc
 1560 0068 43F02303 		orrcc	r3, r3, #35
1200:../drivers/fsl_sdhc.c ****                             adma2EntryAddress[i].attribute = ((dataBytes - sizeof(uint32_t) * (star
 1561              		.loc 1 1200 0
 1562 006c 7760     		str	r7, [r6, #4]
1203:../drivers/fsl_sdhc.c ****                                 (kSDHC_Adma2DescriptorTypeTransfer | kSDHC_Adma2DescriptorEndFlag);
 1563              		.loc 1 1203 0
 1564 006e 34BF     		ite	cc
 1565 0070 42F83130 		strcc	r3, [r2, r1, lsl #3]
1212:../drivers/fsl_sdhc.c ****                             startAddress += (SDHC_ADMA2_DESCRIPTOR_MAX_LENGTH_PER_ENTRY / sizeof(ui
 1566              		.loc 1 1212 0
 1567 0074 42F831E0 		strcs	lr, [r2, r1, lsl #3]
1193:../drivers/fsl_sdhc.c ****                     {
 1568              		.loc 1 1193 0
 1569 0078 01F10101 		add	r1, r1, #1
 1570              	.LVL175:
1213:../drivers/fsl_sdhc.c ****                         }
 1571              		.loc 1 1213 0
 1572 007c 28BF     		it	cs
 1573 007e 4744     		addcs	r7, r7, r8
 1574              	.LVL176:
1193:../drivers/fsl_sdhc.c ****                     {
 1575              		.loc 1 1193 0
 1576 0080 8D42     		cmp	r5, r1
 1577 0082 E6D8     		bhi	.L225
1218:../drivers/fsl_sdhc.c ****                     base->ADSADDR = (uint32_t)table;
 1578              		.loc 1 1218 0
 1579 0084 0023     		movs	r3, #0
 1580 0086 0360     		str	r3, [r0]
1219:../drivers/fsl_sdhc.c ****                     /* disable the buffer read flag in DMA mode */
 1581              		.loc 1 1219 0
 1582 0088 8265     		str	r2, [r0, #88]
 1583              	.LVL177:
 1584              	.LBB197:
 1585              	.LBB198:
 703:../drivers/fsl_sdhc.h **** }
 1586              		.loc 2 703 0
 1587 008a 826B     		ldr	r2, [r0, #56]
 1588              	.LVL178:
 1589 008c 22F03002 		bic	r2, r2, #48
 1590 0090 8263     		str	r2, [r0, #56]
 1591              	.LVL179:
 1592              	.LBE198:
 1593              	.LBE197:
 1594              	.LBB199:
 1595              	.LBB200:
 681:../drivers/fsl_sdhc.h **** }
 1596              		.loc 2 681 0
 1597 0092 426B     		ldr	r2, [r0, #52]
 1598 0094 22F03002 		bic	r2, r2, #48
 1599 0098 4263     		str	r2, [r0, #52]
 1600              	.LVL180:
 1601              	.L230:
 1602              	.LBE200:
 1603              	.LBE199:
 1604              	.LBE196:
 1605              	.LBE195:
1080:../drivers/fsl_sdhc.c ****     const uint32_t *startAddress = data;
 1606              		.loc 1 1080 0
 1607 009a 0020     		movs	r0, #0
 1608              	.LVL181:
 1609 009c 00E0     		b	.L218
 1610              	.LVL182:
 1611              	.L229:
1096:../drivers/fsl_sdhc.c ****     }
 1612              		.loc 1 1096 0
 1613 009e 0420     		movs	r0, #4
 1614              	.LVL183:
 1615              	.L218:
1231:../drivers/fsl_sdhc.c **** 
 1616              		.loc 1 1231 0
 1617 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1618              	.LVL184:
 1619              	.L231:
1104:../drivers/fsl_sdhc.c ****     }
 1620              		.loc 1 1104 0
 1621 00a4 4FF4D560 		mov	r0, #1704
 1622              	.LVL185:
 1623 00a8 FAE7     		b	.L218
 1624              	.LVL186:
 1625              	.L232:
 1626              	.LBB202:
 1627              	.LBB201:
1188:../drivers/fsl_sdhc.c ****                 }
 1628              		.loc 1 1188 0
 1629 00aa 0320     		movs	r0, #3
 1630              	.LVL187:
 1631              	.LBE201:
 1632              	.LBE202:
1230:../drivers/fsl_sdhc.c **** }
 1633              		.loc 1 1230 0
 1634 00ac F8E7     		b	.L218
 1635              	.L241:
 1636 00ae 00BF     		.align	2
 1637              	.L240:
 1638 00b0 2100FCFF 		.word	-262111
 1639              		.cfi_endproc
 1640              	.LFE193:
 1642              		.section	.text.SDHC_TransferBlocking,"ax",%progbits
 1643              		.align	1
 1644              		.global	SDHC_TransferBlocking
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1648              		.fpu fpv4-sp-d16
 1650              	SDHC_TransferBlocking:
 1651              	.LFB194:
1234:../drivers/fsl_sdhc.c ****     assert(transfer);
 1652              		.loc 1 1234 0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 0
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 1656              	.LVL188:
 1657 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 1658              		.cfi_def_cfa_offset 32
 1659              		.cfi_offset 4, -24
 1660              		.cfi_offset 5, -20
 1661              		.cfi_offset 6, -16
 1662              		.cfi_offset 7, -12
 1663              		.cfi_offset 8, -8
 1664              		.cfi_offset 14, -4
1240:../drivers/fsl_sdhc.c **** 
 1665              		.loc 1 1240 0
 1666 0004 D3E90058 		ldrd	r5, r8, [r3]
1234:../drivers/fsl_sdhc.c ****     assert(transfer);
 1667              		.loc 1 1234 0
 1668 0008 0446     		mov	r4, r0
1238:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
 1669              		.loc 1 1238 0
 1670 000a 876A     		ldr	r7, [r0, #40]
 1671              	.LVL189:
1243:../drivers/fsl_sdhc.c ****     {
 1672              		.loc 1 1243 0
 1673 000c B8F1000F 		cmp	r8, #0
 1674 0010 00F0C180 		beq	.L272
1243:../drivers/fsl_sdhc.c ****     {
 1675              		.loc 1 1243 0 is_stmt 0 discriminator 1
 1676 0014 25B1     		cbz	r5, .L305
1243:../drivers/fsl_sdhc.c ****     {
 1677              		.loc 1 1243 0 discriminator 2
 1678 0016 AB68     		ldr	r3, [r5, #8]
 1679              	.LVL190:
 1680 0018 B3F5803F 		cmp	r3, #65536
 1681 001c 80F0BB80 		bcs	.L272
 1682              	.LVL191:
 1683              	.L305:
 1684              	.LBB253:
 1685              	.LBB254:
 767:../drivers/fsl_sdhc.h **** }
 1686              		.loc 2 767 0 is_stmt 1 discriminator 1
 1687 0020 636A     		ldr	r3, [r4, #36]
 1688              	.LVL192:
 1689              	.LBE254:
 1690              	.LBE253:
1249:../drivers/fsl_sdhc.c ****     {
 1691              		.loc 1 1249 0 discriminator 1
 1692 0022 D807     		lsls	r0, r3, #31
 1693 0024 FCD4     		bmi	.L305
1238:../drivers/fsl_sdhc.c ****     sdhc_command_t *command = transfer->command;
 1694              		.loc 1 1238 0
 1695 0026 C7F30127 		ubfx	r7, r7, #8, #2
 1696              	.LVL193:
 1697              	.L246:
1252:../drivers/fsl_sdhc.c ****     {
 1698              		.loc 1 1252 0 discriminator 2
 1699 002a D5B1     		cbz	r5, .L245
 1700              	.LVL194:
 1701              	.LBB255:
 1702              	.LBB256:
 767:../drivers/fsl_sdhc.h **** }
 1703              		.loc 2 767 0
 1704 002c 636A     		ldr	r3, [r4, #36]
 1705              	.LVL195:
 1706              	.LBE256:
 1707              	.LBE255:
1252:../drivers/fsl_sdhc.c ****     {
 1708              		.loc 1 1252 0
 1709 002e 9B07     		lsls	r3, r3, #30
 1710 0030 FBD4     		bmi	.L246
1257:../drivers/fsl_sdhc.c ****     {
 1711              		.loc 1 1257 0 discriminator 1
 1712 0032 B1B1     		cbz	r1, .L245
1261:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
 1713              		.loc 1 1261 0
 1714 0034 EB68     		ldr	r3, [r5, #12]
1260:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 1715              		.loc 1 1260 0
 1716 0036 03B9     		cbnz	r3, .L247
1260:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 1717              		.loc 1 1260 0 is_stmt 0 discriminator 2
 1718 0038 2B69     		ldr	r3, [r5, #16]
 1719              	.L247:
1260:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 1720              		.loc 1 1260 0
 1721 003a D5E90106 		ldrd	r0, r6, [r5, #4]
 1722 003e 7043     		muls	r0, r6, r0
1259:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 1723              		.loc 1 1259 0 is_stmt 1
 1724 0040 CDE90030 		strd	r3, r0, [sp]
 1725 0044 1346     		mov	r3, r2
 1726 0046 2046     		mov	r0, r4
 1727 0048 0A46     		mov	r2, r1
 1728              	.LVL196:
 1729 004a 3946     		mov	r1, r7
 1730              	.LVL197:
 1731 004c FFF7FEFF 		bl	SDHC_SetAdmaTableConfig
 1732              	.LVL198:
1263:../drivers/fsl_sdhc.c ****         {
 1733              		.loc 1 1263 0
 1734 0050 B0F5D56F 		cmp	r0, #1704
1259:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 1735              		.loc 1 1259 0
 1736 0054 0646     		mov	r6, r0
 1737              	.LVL199:
1263:../drivers/fsl_sdhc.c ****         {
 1738              		.loc 1 1263 0
 1739 0056 16D1     		bne	.L248
 1740              	.LVL200:
 1741              	.LBB257:
 1742              	.LBB258:
 670:../drivers/fsl_sdhc.h **** }
 1743              		.loc 2 670 0
 1744 0058 636B     		ldr	r3, [r4, #52]
 1745 005a 43F03003 		orr	r3, r3, #48
 1746 005e 6363     		str	r3, [r4, #52]
 1747              	.LBE258:
 1748              	.LBE257:
1265:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptStatus(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
 1749              		.loc 1 1265 0
 1750 0060 0027     		movs	r7, #0
 1751              	.LVL201:
 1752              	.L245:
1278:../drivers/fsl_sdhc.c ****     if (kStatus_Success != SDHC_SendCommandBlocking(base, command))
 1753              		.loc 1 1278 0
 1754 0062 3B46     		mov	r3, r7
 1755 0064 2A46     		mov	r2, r5
 1756 0066 4146     		mov	r1, r8
 1757 0068 2046     		mov	r0, r4
 1758 006a FFF7FEFF 		bl	SDHC_StartTransfer
 1759              	.LVL202:
 1760              	.LBB259:
 1761              	.LBB260:
 610:../drivers/fsl_sdhc.c ****     {
 1762              		.loc 1 610 0
 1763 006e 4C4E     		ldr	r6, .L324
 1764              	.L249:
 1765              	.LVL203:
 1766              	.LBB261:
 1767              	.LBB262:
 721:../drivers/fsl_sdhc.h **** }
 1768              		.loc 2 721 0
 1769 0070 236B     		ldr	r3, [r4, #48]
 1770              	.LVL204:
 1771              	.LBE262:
 1772              	.LBE261:
 610:../drivers/fsl_sdhc.c ****     {
 1773              		.loc 1 610 0
 1774 0072 3342     		tst	r3, r6
 1775 0074 FCD0     		beq	.L249
 1776              	.LVL205:
 1777              	.LBB263:
 1778              	.LBB264:
 721:../drivers/fsl_sdhc.h **** }
 1779              		.loc 2 721 0
 1780 0076 236B     		ldr	r3, [r4, #48]
 1781              	.LVL206:
 1782              	.LBE264:
 1783              	.LBE263:
 614:../drivers/fsl_sdhc.c ****     {
 1784              		.loc 1 614 0
 1785 0078 13F4702F 		tst	r3, #983040
 1786 007c 09D0     		beq	.L250
 1787              	.LVL207:
 1788              	.LBB265:
 1789              	.LBB266:
 732:../drivers/fsl_sdhc.h **** }
 1790              		.loc 2 732 0
 1791 007e 2663     		str	r6, [r4, #48]
 1792              	.LVL208:
 1793              	.L273:
 1794              	.LBE266:
 1795              	.LBE265:
 1796              	.LBE260:
 1797              	.LBE259:
1281:../drivers/fsl_sdhc.c ****     }
 1798              		.loc 1 1281 0
 1799 0080 40F2A666 		movw	r6, #1702
 1800 0084 01E0     		b	.L242
 1801              	.LVL209:
 1802              	.L248:
1268:../drivers/fsl_sdhc.c ****         {
 1803              		.loc 1 1268 0
 1804 0086 0028     		cmp	r0, #0
 1805 0088 EBD0     		beq	.L245
 1806              	.LVL210:
 1807              	.L242:
1292:../drivers/fsl_sdhc.c **** 
 1808              		.loc 1 1292 0
 1809 008a 3046     		mov	r0, r6
 1810 008c 02B0     		add	sp, sp, #8
 1811              		.cfi_remember_state
 1812              		.cfi_def_cfa_offset 24
 1813              		@ sp needed
 1814 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1815              	.LVL211:
 1816              	.L250:
 1817              		.cfi_restore_state
 1818              	.LBB270:
 1819              	.LBB269:
 621:../drivers/fsl_sdhc.c ****     }
 1820              		.loc 1 621 0
 1821 0092 4146     		mov	r1, r8
 1822 0094 2046     		mov	r0, r4
 1823 0096 FFF7FEFF 		bl	SDHC_ReceiveCommandResponse
 1824              	.LVL212:
 1825              	.LBB268:
 1826              	.LBB267:
 732:../drivers/fsl_sdhc.h **** }
 1827              		.loc 2 732 0
 1828 009a 2663     		str	r6, [r4, #48]
 1829              	.LVL213:
 1830              	.LBE267:
 1831              	.LBE268:
 1832              	.LBE269:
 1833              	.LBE270:
1279:../drivers/fsl_sdhc.c ****     {
 1834              		.loc 1 1279 0
 1835 009c 0646     		mov	r6, r0
 1836 009e 0028     		cmp	r0, #0
 1837 00a0 EED1     		bne	.L273
1283:../drivers/fsl_sdhc.c ****     {
 1838              		.loc 1 1283 0
 1839 00a2 002D     		cmp	r5, #0
 1840 00a4 F1D0     		beq	.L242
 1841              	.LVL214:
 1842              	.LBB271:
 1843              	.LBB272:
 673:../drivers/fsl_sdhc.c ****     {
 1844              		.loc 1 673 0
 1845 00a6 7FB1     		cbz	r7, .L252
 1846 00a8 022F     		cmp	r7, #2
 1847 00aa 76D1     		bne	.L322
 1848              	.LBB273:
 1849              	.LBB274:
 650:../drivers/fsl_sdhc.c ****     {
 1850              		.loc 1 650 0
 1851 00ac 3D4B     		ldr	r3, .L324+4
 1852              	.L253:
 1853              	.LVL215:
 1854              	.LBB275:
 1855              	.LBB276:
 721:../drivers/fsl_sdhc.h **** }
 1856              		.loc 2 721 0
 1857 00ae 226B     		ldr	r2, [r4, #48]
 1858              	.LVL216:
 1859              	.LBE276:
 1860              	.LBE275:
 650:../drivers/fsl_sdhc.c ****     {
 1861              		.loc 1 650 0
 1862 00b0 1A42     		tst	r2, r3
 1863 00b2 FCD0     		beq	.L253
 1864              	.LVL217:
 653:../drivers/fsl_sdhc.c ****     {
 1865              		.loc 1 653 0
 1866 00b4 3C4A     		ldr	r2, .L324+8
 1867              	.LBB277:
 1868              	.LBB278:
 721:../drivers/fsl_sdhc.h **** }
 1869              		.loc 2 721 0
 1870 00b6 236B     		ldr	r3, [r4, #48]
 1871              	.LVL218:
 1872              	.LBE278:
 1873              	.LBE277:
 653:../drivers/fsl_sdhc.c ****     {
 1874              		.loc 1 653 0
 1875 00b8 1340     		ands	r3, r3, r2
 655:../drivers/fsl_sdhc.c ****         {
 1876              		.loc 1 655 0
 1877 00ba 18BF     		it	ne
 1878 00bc 6B78     		ldrbne	r3, [r5, #1]	@ zero_extendqisi2
 1879              	.LBB279:
 1880              	.LBB280:
 732:../drivers/fsl_sdhc.h **** }
 1881              		.loc 2 732 0
 1882 00be 3B4A     		ldr	r2, .L324+12
 1883              	.LBE280:
 1884              	.LBE279:
 647:../drivers/fsl_sdhc.c **** 
 1885              		.loc 1 647 0
 1886 00c0 18BF     		it	ne
 1887 00c2 83F00103 		eorne	r3, r3, #1
 1888              	.LVL219:
 1889 00c6 29E0     		b	.L323
 1890              	.LVL220:
 1891              	.L252:
 1892 00c8 D5E90271 		ldrd	r7, r1, [r5, #8]
 1893              	.LVL221:
 1894 00cc 6B68     		ldr	r3, [r5, #4]
 1895 00ce 03F00302 		and	r2, r3, #3
 1896              	.LBE274:
 1897              	.LBE273:
 1898              	.LBB284:
 1899              	.LBB285:
 633:../drivers/fsl_sdhc.c ****     {
 1900              		.loc 1 633 0
 1901 00d2 39B3     		cbz	r1, .L254
 1902              	.LVL222:
 1903              	.LBB286:
 1904              	.LBB287:
 464:../drivers/fsl_sdhc.c ****     {
 1905              		.loc 1 464 0
 1906 00d4 1AB1     		cbz	r2, .L255
 466:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 1907              		.loc 1 466 0
 1908 00d6 23F00303 		bic	r3, r3, #3
 1909 00da 0433     		adds	r3, r3, #4
 1910 00dc 6B60     		str	r3, [r5, #4]
 1911              	.L255:
 470:../drivers/fsl_sdhc.c **** 
 1912              		.loc 1 470 0
 1913 00de 6A68     		ldr	r2, [r5, #4]
 474:../drivers/fsl_sdhc.c ****         {
 1914              		.loc 1 474 0
 1915 00e0 DFF8D080 		ldr	r8, .L324+20
 470:../drivers/fsl_sdhc.c **** 
 1916              		.loc 1 470 0
 1917 00e4 5743     		muls	r7, r2, r7
 1918 00e6 BF08     		lsrs	r7, r7, #2
 1919              	.LVL223:
 456:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 1920              		.loc 1 456 0
 1921 00e8 0022     		movs	r2, #0
 1922              	.LVL224:
 1923              	.L256:
 472:../drivers/fsl_sdhc.c ****     {
 1924              		.loc 1 472 0
 1925 00ea 9742     		cmp	r7, r2
 1926 00ec 01D8     		bhi	.L257
 1927 00ee 0023     		movs	r3, #0
 1928 00f0 13E0     		b	.L260
 1929              	.L257:
 1930              	.LVL225:
 1931              	.LBB288:
 1932              	.LBB289:
 721:../drivers/fsl_sdhc.h **** }
 1933              		.loc 2 721 0
 1934 00f2 236B     		ldr	r3, [r4, #48]
 1935              	.LVL226:
 1936              	.LBE289:
 1937              	.LBE288:
 474:../drivers/fsl_sdhc.c ****         {
 1938              		.loc 1 474 0
 1939 00f4 13EA080F 		tst	r3, r8
 1940 00f8 FBD0     		beq	.L257
 1941              	.LVL227:
 1942              	.LBB290:
 1943              	.LBB291:
 721:../drivers/fsl_sdhc.h **** }
 1944              		.loc 2 721 0
 1945 00fa 236B     		ldr	r3, [r4, #48]
 1946              	.LVL228:
 1947              	.LBE291:
 1948              	.LBE290:
 478:../drivers/fsl_sdhc.c ****         {
 1949              		.loc 1 478 0
 1950 00fc 13F0B87F 		tst	r3, #24117248
 1951 0100 01D0     		beq	.L258
 480:../drivers/fsl_sdhc.c ****             {
 1952              		.loc 1 480 0
 1953 0102 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1954 0104 63B1     		cbz	r3, .L275
 1955              	.L258:
 487:../drivers/fsl_sdhc.c ****         }
 1956              		.loc 1 487 0
 1957 0106 2946     		mov	r1, r5
 1958 0108 2046     		mov	r0, r4
 1959 010a FFF7FEFF 		bl	SDHC_ReadDataPort
 1960              	.LVL229:
 1961 010e 0023     		movs	r3, #0
 1962 0110 0246     		mov	r2, r0
 1963              	.LVL230:
 1964              	.L259:
 1965              	.LBB292:
 1966              	.LBB293:
 732:../drivers/fsl_sdhc.h **** }
 1967              		.loc 2 732 0
 1968 0112 C4F83080 		str	r8, [r4, #48]
 1969              	.LVL231:
 1970              	.LBE293:
 1971              	.LBE292:
 472:../drivers/fsl_sdhc.c ****     {
 1972              		.loc 1 472 0
 1973 0116 002B     		cmp	r3, #0
 1974 0118 E7D0     		beq	.L256
 1975              	.LVL232:
 1976              	.L260:
 1977              	.LBB294:
 1978              	.LBB295:
 732:../drivers/fsl_sdhc.h **** }
 1979              		.loc 2 732 0
 1980 011a 254A     		ldr	r2, .L324+16
 1981              	.LVL233:
 1982              	.L323:
 1983              	.LBE295:
 1984              	.LBE294:
 1985              	.LBE287:
 1986              	.LBE286:
 1987              	.LBE285:
 1988              	.LBE284:
 1989              	.LBB316:
 1990              	.LBB283:
 1991              	.LBB282:
 1992              	.LBB281:
 1993 011c 2263     		str	r2, [r4, #48]
 1994              	.LVL234:
 1995 011e 32E0     		b	.L261
 1996              	.LVL235:
 1997              	.L275:
 1998              	.LBE281:
 1999              	.LBE282:
 2000              	.LBE283:
 2001              	.LBE316:
 2002              	.LBB317:
 2003              	.LBB314:
 2004              	.LBB297:
 2005              	.LBB296:
 482:../drivers/fsl_sdhc.c ****             }
 2006              		.loc 1 482 0
 2007 0120 0123     		movs	r3, #1
 2008 0122 F6E7     		b	.L259
 2009              	.LVL236:
 2010              	.L254:
 2011              	.LBE296:
 2012              	.LBE297:
 2013              	.LBB298:
 2014              	.LBB299:
 558:../drivers/fsl_sdhc.c ****     {
 2015              		.loc 1 558 0
 2016 0124 1AB1     		cbz	r2, .L262
 560:../drivers/fsl_sdhc.c ****             sizeof(uint32_t) - (data->blockSize % sizeof(uint32_t)); /* make the block size as word
 2017              		.loc 1 560 0
 2018 0126 23F00303 		bic	r3, r3, #3
 2019 012a 0433     		adds	r3, r3, #4
 2020 012c 6B60     		str	r3, [r5, #4]
 2021              	.L262:
 564:../drivers/fsl_sdhc.c **** 
 2022              		.loc 1 564 0
 2023 012e 6B68     		ldr	r3, [r5, #4]
 568:../drivers/fsl_sdhc.c ****         {
 2024              		.loc 1 568 0
 2025 0130 DFF88480 		ldr	r8, .L324+24
 564:../drivers/fsl_sdhc.c **** 
 2026              		.loc 1 564 0
 2027 0134 7B43     		muls	r3, r7, r3
 2028 0136 9F08     		lsrs	r7, r3, #2
 2029              	.LVL237:
 550:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 2030              		.loc 1 550 0
 2031 0138 0022     		movs	r2, #0
 2032              	.LVL238:
 2033              	.L263:
 566:../drivers/fsl_sdhc.c ****     {
 2034              		.loc 1 566 0
 2035 013a 9742     		cmp	r7, r2
 2036 013c 01D8     		bhi	.L264
 2037 013e 0023     		movs	r3, #0
 2038 0140 13E0     		b	.L267
 2039              	.L264:
 2040              	.LVL239:
 2041              	.LBB300:
 2042              	.LBB301:
 721:../drivers/fsl_sdhc.h **** }
 2043              		.loc 2 721 0
 2044 0142 236B     		ldr	r3, [r4, #48]
 2045              	.LVL240:
 2046              	.LBE301:
 2047              	.LBE300:
 568:../drivers/fsl_sdhc.c ****         {
 2048              		.loc 1 568 0
 2049 0144 13EA080F 		tst	r3, r8
 2050 0148 FBD0     		beq	.L264
 2051              	.LVL241:
 2052              	.LBB302:
 2053              	.LBB303:
 721:../drivers/fsl_sdhc.h **** }
 2054              		.loc 2 721 0
 2055 014a 236B     		ldr	r3, [r4, #48]
 2056              	.LVL242:
 2057              	.LBE303:
 2058              	.LBE302:
 572:../drivers/fsl_sdhc.c ****         {
 2059              		.loc 1 572 0
 2060 014c 13F0B87F 		tst	r3, #24117248
 2061 0150 01D0     		beq	.L265
 574:../drivers/fsl_sdhc.c ****             {
 2062              		.loc 1 574 0
 2063 0152 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 2064 0154 EBB1     		cbz	r3, .L276
 2065              	.L265:
 581:../drivers/fsl_sdhc.c ****         }
 2066              		.loc 1 581 0
 2067 0156 2946     		mov	r1, r5
 2068 0158 2046     		mov	r0, r4
 2069 015a FFF7FEFF 		bl	SDHC_WriteDataPort
 2070              	.LVL243:
 2071 015e 0023     		movs	r3, #0
 2072 0160 0246     		mov	r2, r0
 2073              	.LVL244:
 2074              	.L266:
 2075              	.LBB304:
 2076              	.LBB305:
 732:../drivers/fsl_sdhc.h **** }
 2077              		.loc 2 732 0
 2078 0162 C4F83080 		str	r8, [r4, #48]
 2079              	.LVL245:
 2080              	.LBE305:
 2081              	.LBE304:
 566:../drivers/fsl_sdhc.c ****     {
 2082              		.loc 1 566 0
 2083 0166 002B     		cmp	r3, #0
 2084 0168 E7D0     		beq	.L263
 2085              	.LVL246:
 2086              	.L267:
 589:../drivers/fsl_sdhc.c ****     {
 2087              		.loc 1 589 0
 2088 016a 114A     		ldr	r2, .L324+16
 2089              	.LVL247:
 2090 016c 1146     		mov	r1, r2
 2091              	.L268:
 2092              	.LVL248:
 2093              	.LBB306:
 2094              	.LBB307:
 721:../drivers/fsl_sdhc.h **** }
 2095              		.loc 2 721 0
 2096 016e 206B     		ldr	r0, [r4, #48]
 2097              	.LVL249:
 2098              	.LBE307:
 2099              	.LBE306:
 589:../drivers/fsl_sdhc.c ****     {
 2100              		.loc 1 589 0
 2101 0170 1042     		tst	r0, r2
 2102 0172 FCD0     		beq	.L268
 2103              	.LVL250:
 2104              	.LBB308:
 2105              	.LBB309:
 721:../drivers/fsl_sdhc.h **** }
 2106              		.loc 2 721 0
 2107 0174 226B     		ldr	r2, [r4, #48]
 2108              	.LVL251:
 2109              	.LBE309:
 2110              	.LBE308:
 592:../drivers/fsl_sdhc.c ****     {
 2111              		.loc 1 592 0
 2112 0176 12F0B87F 		tst	r2, #24117248
 2113 017a 03D0     		beq	.L269
 594:../drivers/fsl_sdhc.c ****         {
 2114              		.loc 1 594 0
 2115 017c 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 596:../drivers/fsl_sdhc.c ****         }
 2116              		.loc 1 596 0
 2117 017e 002A     		cmp	r2, #0
 2118 0180 08BF     		it	eq
 2119 0182 0123     		moveq	r3, #1
 2120              	.L269:
 2121              	.LVL252:
 2122              	.LBB310:
 2123              	.LBB311:
 732:../drivers/fsl_sdhc.h **** }
 2124              		.loc 2 732 0
 2125 0184 2163     		str	r1, [r4, #48]
 2126              	.LVL253:
 2127              	.L261:
 2128              	.LBE311:
 2129              	.LBE310:
 2130              	.LBE299:
 2131              	.LBE298:
 2132              	.LBE314:
 2133              	.LBE317:
 2134              	.LBE272:
 2135              	.LBE271:
1285:../drivers/fsl_sdhc.c ****     }
 2136              		.loc 1 1285 0
 2137 0186 40F2A762 		movw	r2, #1703
 2138 018a 002B     		cmp	r3, #0
 2139 018c 18BF     		it	ne
 2140 018e 1646     		movne	r6, r2
 2141 0190 7BE7     		b	.L242
 2142              	.LVL254:
 2143              	.L276:
 2144              	.LBB320:
 2145              	.LBB319:
 2146              	.LBB318:
 2147              	.LBB315:
 2148              	.LBB313:
 2149              	.LBB312:
 576:../drivers/fsl_sdhc.c ****             }
 2150              		.loc 1 576 0
 2151 0192 0123     		movs	r3, #1
 2152 0194 E5E7     		b	.L266
 2153              	.LVL255:
 2154              	.L272:
 2155              	.LBE312:
 2156              	.LBE313:
 2157              	.LBE315:
 2158              	.LBE318:
 2159              	.LBE319:
 2160              	.LBE320:
1245:../drivers/fsl_sdhc.c ****     }
 2161              		.loc 1 1245 0
 2162 0196 0426     		movs	r6, #4
 2163 0198 77E7     		b	.L242
 2164              	.LVL256:
 2165              	.L322:
1285:../drivers/fsl_sdhc.c ****     }
 2166              		.loc 1 1285 0
 2167 019a 40F2A766 		movw	r6, #1703
 2168 019e 74E7     		b	.L242
 2169              	.L325:
 2170              		.align	2
 2171              	.L324:
 2172 01a0 01000F00 		.word	983041
 2173 01a4 02007011 		.word	292552706
 2174 01a8 00007011 		.word	292552704
 2175 01ac 0A007011 		.word	292552714
 2176 01b0 02007001 		.word	24117250
 2177 01b4 20007001 		.word	24117280
 2178 01b8 10007001 		.word	24117264
 2179              		.cfi_endproc
 2180              	.LFE194:
 2182              		.section	.text.SDHC_TransferCreateHandle,"ax",%progbits
 2183              		.align	1
 2184              		.global	SDHC_TransferCreateHandle
 2185              		.syntax unified
 2186              		.thumb
 2187              		.thumb_func
 2188              		.fpu fpv4-sp-d16
 2190              	SDHC_TransferCreateHandle:
 2191              	.LFB195:
1298:../drivers/fsl_sdhc.c ****     assert(handle);
 2192              		.loc 1 1298 0
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 0
 2195              		@ frame_needed = 0, uses_anonymous_args = 0
 2196              	.LVL257:
 2197 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2198              		.cfi_def_cfa_offset 24
 2199              		.cfi_offset 3, -24
 2200              		.cfi_offset 4, -20
 2201              		.cfi_offset 5, -16
 2202              		.cfi_offset 6, -12
 2203              		.cfi_offset 7, -8
 2204              		.cfi_offset 14, -4
1298:../drivers/fsl_sdhc.c ****     assert(handle);
 2205              		.loc 1 1298 0
 2206 0002 0C46     		mov	r4, r1
 2207 0004 1546     		mov	r5, r2
 2208 0006 0646     		mov	r6, r0
1303:../drivers/fsl_sdhc.c **** 
 2209              		.loc 1 1303 0
 2210 0008 2822     		movs	r2, #40
 2211              	.LVL258:
 2212 000a 0021     		movs	r1, #0
 2213              	.LVL259:
 2214 000c 2046     		mov	r0, r4
 2215              	.LVL260:
1298:../drivers/fsl_sdhc.c ****     assert(handle);
 2216              		.loc 1 1298 0
 2217 000e 1F46     		mov	r7, r3
1303:../drivers/fsl_sdhc.c **** 
 2218              		.loc 1 1303 0
 2219 0010 FFF7FEFF 		bl	memset
 2220              	.LVL261:
1306:../drivers/fsl_sdhc.c ****     handle->callback.CardRemoved = callback->CardRemoved;
 2221              		.loc 1 1306 0
 2222 0014 2B68     		ldr	r3, [r5]
 2223 0016 2361     		str	r3, [r4, #16]
1307:../drivers/fsl_sdhc.c ****     handle->callback.SdioInterrupt = callback->SdioInterrupt;
 2224              		.loc 1 1307 0
 2225 0018 6B68     		ldr	r3, [r5, #4]
 2226 001a 6361     		str	r3, [r4, #20]
1308:../drivers/fsl_sdhc.c ****     handle->callback.SdioBlockGap = callback->SdioBlockGap;
 2227              		.loc 1 1308 0
 2228 001c AB68     		ldr	r3, [r5, #8]
 2229 001e A361     		str	r3, [r4, #24]
1309:../drivers/fsl_sdhc.c ****     handle->callback.TransferComplete = callback->TransferComplete;
 2230              		.loc 1 1309 0
 2231 0020 EB68     		ldr	r3, [r5, #12]
 2232 0022 E361     		str	r3, [r4, #28]
1310:../drivers/fsl_sdhc.c ****     handle->userData = userData;
 2233              		.loc 1 1310 0
 2234 0024 2B69     		ldr	r3, [r5, #16]
1314:../drivers/fsl_sdhc.c **** 
 2235              		.loc 1 1314 0
 2236 0026 0A4A     		ldr	r2, .L327
1311:../drivers/fsl_sdhc.c **** 
 2237              		.loc 1 1311 0
 2238 0028 C4E90837 		strd	r3, r7, [r4, #32]
 2239              	.LBB327:
 2240              	.LBB328:
 246:../drivers/fsl_sdhc.c ****     {
 2241              		.loc 1 246 0
 2242 002c 094B     		ldr	r3, .L327+4
 2243 002e F31A     		subs	r3, r6, r3
 2244 0030 18BF     		it	ne
 2245 0032 0123     		movne	r3, #1
 2246              	.LBE328:
 2247              	.LBE327:
1317:../drivers/fsl_sdhc.c **** 
 2248              		.loc 1 1317 0
 2249 0034 0121     		movs	r1, #1
 2250 0036 3046     		mov	r0, r6
1314:../drivers/fsl_sdhc.c **** 
 2251              		.loc 1 1314 0
 2252 0038 42F82340 		str	r4, [r2, r3, lsl #2]
1317:../drivers/fsl_sdhc.c **** 
 2253              		.loc 1 1317 0
 2254 003c FFF7FEFF 		bl	SDHC_SetTransferInterrupt
 2255              	.LVL262:
1320:../drivers/fsl_sdhc.c **** 
 2256              		.loc 1 1320 0
 2257 0040 054B     		ldr	r3, .L327+8
 2258 0042 064A     		ldr	r2, .L327+12
 2259 0044 1A60     		str	r2, [r3]
 2260              	.LVL263:
 2261              	.LBB329:
 2262              	.LBB330:
 2263              	.LBB331:
1676:../CMSIS/core_cm4.h ****   }
 2264              		.loc 3 1676 0
 2265 0046 064B     		ldr	r3, .L327+16
 2266 0048 4FF40032 		mov	r2, #131072
 2267 004c 9A60     		str	r2, [r3, #8]
 2268              	.LVL264:
 2269              	.LBE331:
 2270              	.LBE330:
 2271              	.LBE329:
1323:../drivers/fsl_sdhc.c **** 
 2272              		.loc 1 1323 0
 2273 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2274              	.LVL265:
 2275              	.L328:
 2276              		.align	2
 2277              	.L327:
 2278 0050 00000000 		.word	.LANCHOR1
 2279 0054 00100B40 		.word	1074466816
 2280 0058 00000000 		.word	.LANCHOR2
 2281 005c 00000000 		.word	SDHC_TransferHandleIRQ
 2282 0060 00E100E0 		.word	-536813312
 2283              		.cfi_endproc
 2284              	.LFE195:
 2286              		.section	.text.SDHC_TransferNonBlocking,"ax",%progbits
 2287              		.align	1
 2288              		.global	SDHC_TransferNonBlocking
 2289              		.syntax unified
 2290              		.thumb
 2291              		.thumb_func
 2292              		.fpu fpv4-sp-d16
 2294              	SDHC_TransferNonBlocking:
 2295              	.LFB196:
1327:../drivers/fsl_sdhc.c ****     assert(transfer);
 2296              		.loc 1 1327 0
 2297              		.cfi_startproc
 2298              		@ args = 4, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              	.LVL266:
 2301 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 2302              		.cfi_def_cfa_offset 40
 2303              		.cfi_offset 4, -28
 2304              		.cfi_offset 5, -24
 2305              		.cfi_offset 6, -20
 2306              		.cfi_offset 7, -16
 2307              		.cfi_offset 8, -12
 2308              		.cfi_offset 9, -8
 2309              		.cfi_offset 14, -4
1327:../drivers/fsl_sdhc.c ****     assert(transfer);
 2310              		.loc 1 1327 0
 2311 0004 8846     		mov	r8, r1
 2312 0006 0A99     		ldr	r1, [sp, #40]
 2313              	.LVL267:
1330:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 2314              		.loc 1 1330 0
 2315 0008 876A     		ldr	r7, [r0, #40]
 2316              	.LVL268:
1333:../drivers/fsl_sdhc.c **** 
 2317              		.loc 1 1333 0
 2318 000a D1E90069 		ldrd	r6, r9, [r1]
 2319              	.LVL269:
1327:../drivers/fsl_sdhc.c ****     assert(transfer);
 2320              		.loc 1 1327 0
 2321 000e 0546     		mov	r5, r0
1336:../drivers/fsl_sdhc.c ****     {
 2322              		.loc 1 1336 0
 2323 0010 B9F1000F 		cmp	r9, #0
 2324 0014 3CD0     		beq	.L336
1336:../drivers/fsl_sdhc.c ****     {
 2325              		.loc 1 1336 0 is_stmt 0 discriminator 1
 2326 0016 1EB1     		cbz	r6, .L331
1336:../drivers/fsl_sdhc.c ****     {
 2327              		.loc 1 1336 0 discriminator 2
 2328 0018 B168     		ldr	r1, [r6, #8]
 2329 001a B1F5803F 		cmp	r1, #65536
 2330 001e 37D2     		bcs	.L336
 2331              	.L331:
 2332              	.LVL270:
 2333              	.LBB332:
 2334              	.LBB333:
 767:../drivers/fsl_sdhc.h **** }
 2335              		.loc 2 767 0 is_stmt 1
 2336 0020 696A     		ldr	r1, [r5, #36]
 2337              	.LVL271:
 2338              	.LBE333:
 2339              	.LBE332:
1342:../drivers/fsl_sdhc.c ****         (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag)))
 2340              		.loc 1 1342 0
 2341 0022 C807     		lsls	r0, r1, #31
 2342              	.LVL272:
 2343 0024 36D4     		bmi	.L338
1330:../drivers/fsl_sdhc.c ****     status_t error = kStatus_Success;
 2344              		.loc 1 1330 0 discriminator 1
 2345 0026 C7F30127 		ubfx	r7, r7, #8, #2
 2346              	.LVL273:
1342:../drivers/fsl_sdhc.c ****         (data && (SDHC_GetPresentStatusFlags(base) & kSDHC_DataInhibitFlag)))
 2347              		.loc 1 1342 0 discriminator 1
 2348 002a DEB1     		cbz	r6, .L332
 2349              	.LVL274:
 2350              	.LBB334:
 2351              	.LBB335:
 767:../drivers/fsl_sdhc.h **** }
 2352              		.loc 2 767 0
 2353 002c 696A     		ldr	r1, [r5, #36]
 2354              	.LVL275:
 2355              	.LBE335:
 2356              	.LBE334:
1343:../drivers/fsl_sdhc.c ****     {
 2357              		.loc 1 1343 0
 2358 002e 8907     		lsls	r1, r1, #30
 2359 0030 30D4     		bmi	.L338
1349:../drivers/fsl_sdhc.c ****     {
 2360              		.loc 1 1349 0 discriminator 1
 2361 0032 BAB1     		cbz	r2, .L332
1353:../drivers/fsl_sdhc.c ****         /* in this situation , we disable the DMA instead of polling transfer mode */
 2362              		.loc 1 1353 0
 2363 0034 F168     		ldr	r1, [r6, #12]
1352:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 2364              		.loc 1 1352 0
 2365 0036 01B9     		cbnz	r1, .L333
1352:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 2366              		.loc 1 1352 0 is_stmt 0 discriminator 2
 2367 0038 3169     		ldr	r1, [r6, #16]
 2368              	.L333:
1352:../drivers/fsl_sdhc.c ****                                     (data->rxData ? data->rxData : data->txData), (data->blockCount
 2369              		.loc 1 1352 0
 2370 003a D6E90104 		ldrd	r0, r4, [r6, #4]
 2371 003e 6043     		muls	r0, r4, r0
1351:../drivers/fsl_sdhc.c ****             SDHC_SetAdmaTableConfig(base, dmaMode, admaTable, admaTableWords,
 2372              		.loc 1 1351 0 is_stmt 1
 2373 0040 CDE90010 		strd	r1, r0, [sp]
 2374 0044 3946     		mov	r1, r7
 2375 0046 2846     		mov	r0, r5
 2376 0048 FFF7FEFF 		bl	SDHC_SetAdmaTableConfig
 2377              	.LVL276:
1355:../drivers/fsl_sdhc.c ****         {
 2378              		.loc 1 1355 0
 2379 004c B0F5D56F 		cmp	r0, #1704
 2380 0050 19D1     		bne	.L334
 2381              	.LVL277:
 2382              	.LBB336:
 2383              	.LBB337:
 692:../drivers/fsl_sdhc.h **** }
 2384              		.loc 2 692 0
 2385 0052 AB6B     		ldr	r3, [r5, #56]
 2386 0054 43F03003 		orr	r3, r3, #48
 2387 0058 AB63     		str	r3, [r5, #56]
 2388              	.LVL278:
 2389              	.LBE337:
 2390              	.LBE336:
 2391              	.LBB338:
 2392              	.LBB339:
 670:../drivers/fsl_sdhc.h **** }
 2393              		.loc 2 670 0
 2394 005a 6B6B     		ldr	r3, [r5, #52]
 2395 005c 43F03003 		orr	r3, r3, #48
 2396 0060 6B63     		str	r3, [r5, #52]
 2397              	.LBE339:
 2398              	.LBE338:
1358:../drivers/fsl_sdhc.c ****             SDHC_EnableInterruptSignal(base, kSDHC_BufferReadReadyFlag | kSDHC_BufferWriteReadyFlag
 2399              		.loc 1 1358 0
 2400 0062 0027     		movs	r7, #0
 2401              	.LVL279:
 2402              	.L332:
1374:../drivers/fsl_sdhc.c ****     /* transferredWords will only be updated in ISR when transfer way is DATAPORT. */
 2403              		.loc 1 1374 0
 2404 0064 0024     		movs	r4, #0
1372:../drivers/fsl_sdhc.c ****     handle->data = data;
 2405              		.loc 1 1372 0
 2406 0066 C8F80490 		str	r9, [r8, #4]
1378:../drivers/fsl_sdhc.c **** 
 2407              		.loc 1 1378 0
 2408 006a 2846     		mov	r0, r5
1373:../drivers/fsl_sdhc.c ****     handle->interruptFlags = 0U;
 2409              		.loc 1 1373 0
 2410 006c C8F80060 		str	r6, [r8]
1378:../drivers/fsl_sdhc.c **** 
 2411              		.loc 1 1378 0
 2412 0070 3B46     		mov	r3, r7
1374:../drivers/fsl_sdhc.c ****     /* transferredWords will only be updated in ISR when transfer way is DATAPORT. */
 2413              		.loc 1 1374 0
 2414 0072 C8F80840 		str	r4, [r8, #8]
1378:../drivers/fsl_sdhc.c **** 
 2415              		.loc 1 1378 0
 2416 0076 3246     		mov	r2, r6
1376:../drivers/fsl_sdhc.c **** 
 2417              		.loc 1 1376 0
 2418 0078 C8F80C40 		str	r4, [r8, #12]
1378:../drivers/fsl_sdhc.c **** 
 2419              		.loc 1 1378 0
 2420 007c 4946     		mov	r1, r9
 2421 007e FFF7FEFF 		bl	SDHC_StartTransfer
 2422              	.LVL280:
1380:../drivers/fsl_sdhc.c **** }
 2423              		.loc 1 1380 0
 2424 0082 2046     		mov	r0, r4
 2425 0084 01E0     		b	.L329
 2426              	.LVL281:
 2427              	.L334:
1362:../drivers/fsl_sdhc.c ****         {
 2428              		.loc 1 1362 0
 2429 0086 0028     		cmp	r0, #0
 2430 0088 ECD0     		beq	.L332
 2431              	.LVL282:
 2432              	.L329:
1381:../drivers/fsl_sdhc.c **** 
 2433              		.loc 1 1381 0
 2434 008a 03B0     		add	sp, sp, #12
 2435              		.cfi_remember_state
 2436              		.cfi_def_cfa_offset 28
 2437              		@ sp needed
 2438 008c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2439              	.LVL283:
 2440              	.L336:
 2441              		.cfi_restore_state
1338:../drivers/fsl_sdhc.c ****     }
 2442              		.loc 1 1338 0
 2443 0090 0420     		movs	r0, #4
 2444              	.LVL284:
 2445 0092 FAE7     		b	.L329
 2446              	.LVL285:
 2447              	.L338:
1345:../drivers/fsl_sdhc.c ****     }
 2448              		.loc 1 1345 0
 2449 0094 40F2A460 		movw	r0, #1700
 2450 0098 F7E7     		b	.L329
 2451              		.cfi_endproc
 2452              	.LFE196:
 2454              		.section	.text.SDHC_DriverIRQHandler,"ax",%progbits
 2455              		.align	1
 2456              		.global	SDHC_DriverIRQHandler
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu fpv4-sp-d16
 2462              	SDHC_DriverIRQHandler:
 2463              	.LFB198:
1415:../drivers/fsl_sdhc.c **** 
1416:../drivers/fsl_sdhc.c **** #if defined(SDHC)
1417:../drivers/fsl_sdhc.c **** void SDHC_DriverIRQHandler(void)
1418:../drivers/fsl_sdhc.c **** {
 2464              		.loc 1 1418 0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
 2468 0000 08B5     		push	{r3, lr}
 2469              		.cfi_def_cfa_offset 8
 2470              		.cfi_offset 3, -8
 2471              		.cfi_offset 14, -4
1419:../drivers/fsl_sdhc.c ****     assert(s_sdhcHandle[0]);
1420:../drivers/fsl_sdhc.c **** 
1421:../drivers/fsl_sdhc.c ****     s_sdhcIsr(SDHC, s_sdhcHandle[0]);
 2472              		.loc 1 1421 0
 2473 0002 044A     		ldr	r2, .L349
 2474 0004 044B     		ldr	r3, .L349+4
 2475 0006 1168     		ldr	r1, [r2]
 2476 0008 1B68     		ldr	r3, [r3]
 2477 000a 0448     		ldr	r0, .L349+8
 2478 000c 9847     		blx	r3
 2479              	.LVL286:
 2480              	.LBB340:
 2481              	.LBB341:
 2482              		.loc 4 833 0
 2483              		.syntax unified
 2484              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2485 000e BFF34F8F 		dsb 0xF
 2486              	@ 0 "" 2
 2487              		.thumb
 2488              		.syntax unified
 2489              	.LBE341:
 2490              	.LBE340:
1422:../drivers/fsl_sdhc.c **** /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1423:../drivers/fsl_sdhc.c ****   exception return operation might vector to incorrect interrupt */
1424:../drivers/fsl_sdhc.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1425:../drivers/fsl_sdhc.c ****     __DSB();
1426:../drivers/fsl_sdhc.c **** #endif
1427:../drivers/fsl_sdhc.c **** }
 2491              		.loc 1 1427 0
 2492 0012 08BD     		pop	{r3, pc}
 2493              	.L350:
 2494              		.align	2
 2495              	.L349:
 2496 0014 00000000 		.word	.LANCHOR1
 2497 0018 00000000 		.word	.LANCHOR2
 2498 001c 00100B40 		.word	1074466816
 2499              		.cfi_endproc
 2500              	.LFE198:
 2502              		.section	.bss.s_sdhcHandle,"aw",%nobits
 2503              		.align	2
 2504              		.set	.LANCHOR1,. + 0
 2507              	s_sdhcHandle:
 2508 0000 00000000 		.space	4
 2509              		.section	.bss.s_sdhcIsr,"aw",%nobits
 2510              		.align	2
 2511              		.set	.LANCHOR2,. + 0
 2514              	s_sdhcIsr:
 2515 0000 00000000 		.space	4
 2516              		.section	.rodata.CSWTCH.63,"a",%progbits
 2517              		.align	2
 2518              		.set	.LANCHOR0,. + 0
 2521              	CSWTCH.63:
 2522 0000 00001A00 		.word	1703936
 2523 0004 00001B00 		.word	1769472
 2524 0008 00000900 		.word	589824
 2525 000c 00000200 		.word	131072
 2526 0010 00000200 		.word	131072
 2527 0014 00001A00 		.word	1703936
 2528 0018 00001B00 		.word	1769472
 2529 001c 00001A00 		.word	1703936
 2530 0020 00001A00 		.word	1703936
 2531              		.text
 2532              	.Letext0:
 2533              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2534              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2535              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 2536              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 2537              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 2538              		.file 11 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 2539              		.file 12 "../CMSIS/MK64F12.h"
 2540              		.file 13 "../CMSIS/system_MK64F12.h"
 2541              		.file 14 "../drivers/fsl_common.h"
 2542              		.file 15 "<built-in>"
