   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.flash_check_execute_in_ram_function_info,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	flash_check_execute_in_ram_function_info:
  25              	.LFB180:
  26              		.file 1 "../drivers/fsl_flash.c"
   1:../drivers/fsl_flash.c **** /*
   2:../drivers/fsl_flash.c ****  * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
   3:../drivers/fsl_flash.c ****  * Copyright 2016-2017 NXP
   4:../drivers/fsl_flash.c ****  * All rights reserved.
   5:../drivers/fsl_flash.c ****  *
   6:../drivers/fsl_flash.c ****  * Redistribution and use in source and binary forms, with or without modification,
   7:../drivers/fsl_flash.c ****  * are permitted provided that the following conditions are met:
   8:../drivers/fsl_flash.c ****  *
   9:../drivers/fsl_flash.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  10:../drivers/fsl_flash.c ****  *   of conditions and the following disclaimer.
  11:../drivers/fsl_flash.c ****  *
  12:../drivers/fsl_flash.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  13:../drivers/fsl_flash.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  14:../drivers/fsl_flash.c ****  *   other materials provided with the distribution.
  15:../drivers/fsl_flash.c ****  *
  16:../drivers/fsl_flash.c ****  * o Neither the name of the copyright holder nor the names of its
  17:../drivers/fsl_flash.c ****  *   contributors may be used to endorse or promote products derived from this
  18:../drivers/fsl_flash.c ****  *   software without specific prior written permission.
  19:../drivers/fsl_flash.c ****  *
  20:../drivers/fsl_flash.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  21:../drivers/fsl_flash.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  22:../drivers/fsl_flash.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:../drivers/fsl_flash.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  24:../drivers/fsl_flash.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  25:../drivers/fsl_flash.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  26:../drivers/fsl_flash.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  27:../drivers/fsl_flash.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  28:../drivers/fsl_flash.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  29:../drivers/fsl_flash.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:../drivers/fsl_flash.c ****  */
  31:../drivers/fsl_flash.c **** 
  32:../drivers/fsl_flash.c **** #include "fsl_flash.h"
  33:../drivers/fsl_flash.c **** 
  34:../drivers/fsl_flash.c **** /*******************************************************************************
  35:../drivers/fsl_flash.c ****  * Definitions
  36:../drivers/fsl_flash.c ****  ******************************************************************************/
  37:../drivers/fsl_flash.c **** 
  38:../drivers/fsl_flash.c **** /*!
  39:../drivers/fsl_flash.c ****  * @name Misc utility defines
  40:../drivers/fsl_flash.c ****  * @{
  41:../drivers/fsl_flash.c ****  */
  42:../drivers/fsl_flash.c **** /*! @brief Alignment utility. */
  43:../drivers/fsl_flash.c **** #ifndef ALIGN_DOWN
  44:../drivers/fsl_flash.c **** #define ALIGN_DOWN(x, a) ((x) & (uint32_t)(-((int32_t)(a))))
  45:../drivers/fsl_flash.c **** #endif
  46:../drivers/fsl_flash.c **** #ifndef ALIGN_UP
  47:../drivers/fsl_flash.c **** #define ALIGN_UP(x, a) (-((int32_t)((uint32_t)(-((int32_t)(x))) & (uint32_t)(-((int32_t)(a))))))
  48:../drivers/fsl_flash.c **** #endif
  49:../drivers/fsl_flash.c **** 
  50:../drivers/fsl_flash.c **** /*! @brief Join bytes to word utility. */
  51:../drivers/fsl_flash.c **** #define B1P4(b) (((uint32_t)(b)&0xFFU) << 24)
  52:../drivers/fsl_flash.c **** #define B1P3(b) (((uint32_t)(b)&0xFFU) << 16)
  53:../drivers/fsl_flash.c **** #define B1P2(b) (((uint32_t)(b)&0xFFU) << 8)
  54:../drivers/fsl_flash.c **** #define B1P1(b) ((uint32_t)(b)&0xFFU)
  55:../drivers/fsl_flash.c **** #define B2P3(b) (((uint32_t)(b)&0xFFFFU) << 16)
  56:../drivers/fsl_flash.c **** #define B2P2(b) (((uint32_t)(b)&0xFFFFU) << 8)
  57:../drivers/fsl_flash.c **** #define B2P1(b) ((uint32_t)(b)&0xFFFFU)
  58:../drivers/fsl_flash.c **** #define B3P2(b) (((uint32_t)(b)&0xFFFFFFU) << 8)
  59:../drivers/fsl_flash.c **** #define B3P1(b) ((uint32_t)(b)&0xFFFFFFU)
  60:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_3(x, y) (B1P4(x) | B3P1(y))
  61:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_2_2(x, y) (B2P3(x) | B2P1(y))
  62:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_3_1(x, y) (B3P2(x) | B1P1(y))
  63:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_1_2(x, y, z) (B1P4(x) | B1P3(y) | B2P1(z))
  64:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_2_1(x, y, z) (B1P4(x) | B2P2(y) | B1P1(z))
  65:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_2_1_1(x, y, z) (B2P3(x) | B1P2(y) | B1P1(z))
  66:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_1_1_1(x, y, z, w) (B1P4(x) | B1P3(y) | B1P2(z) | B1P1(w))
  67:../drivers/fsl_flash.c **** /*@}*/
  68:../drivers/fsl_flash.c **** 
  69:../drivers/fsl_flash.c **** /*!
  70:../drivers/fsl_flash.c ****  * @name Secondary flash configuration
  71:../drivers/fsl_flash.c ****  * @{
  72:../drivers/fsl_flash.c ****  */
  73:../drivers/fsl_flash.c **** /*! @brief Indicates whether the secondary flash has its own protection register in flash module. *
  74:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_MULTIPLE_FLASH) && defined(FTFE_FPROTS_PROTS_MASK)
  75:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER (1)
  76:../drivers/fsl_flash.c **** #else
  77:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER (0)
  78:../drivers/fsl_flash.c **** #endif
  79:../drivers/fsl_flash.c **** 
  80:../drivers/fsl_flash.c **** /*! @brief Indicates whether the secondary flash has its own Execute-Only access register in flash 
  81:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_MULTIPLE_FLASH) && defined(FTFE_FACSSS_SGSIZE_S_MASK)
  82:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER (1)
  83:../drivers/fsl_flash.c **** #else
  84:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER (0)
  85:../drivers/fsl_flash.c **** #endif
  86:../drivers/fsl_flash.c **** /*@}*/
  87:../drivers/fsl_flash.c **** 
  88:../drivers/fsl_flash.c **** /*!
  89:../drivers/fsl_flash.c ****  * @name Dual core/flash configuration
  90:../drivers/fsl_flash.c ****  * @{
  91:../drivers/fsl_flash.c ****  */
  92:../drivers/fsl_flash.c **** /*! @brief Redefines some flash features. */
  93:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
  94:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_CURRENT_CORE_ID == 0u)
  95:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
  96:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
  97:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
  98:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
  99:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_S
 100:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_REGIO
 101:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_1_START_ADDRESS
 102:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT
 103:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZE
 104:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SECTOR_SI
 105:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_WRITE
 106:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_1_PROTECTIO
 107:../drivers/fsl_flash.c **** #elif (FSL_FEATURE_FLASH_CURRENT_CORE_ID == 1u)
 108:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_1_START_ADDRESS
 109:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT
 110:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZE
 111:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SECTOR_SIZE
 112:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_WRITE_UNIT
 113:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_1_PROTECTION_REG
 114:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
 115:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
 116:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
 117:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
 118:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_U
 119:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_
 120:../drivers/fsl_flash.c **** #endif
 121:../drivers/fsl_flash.c **** #else
 122:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
 123:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
 124:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
 125:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
 126:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_S
 127:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_REGIO
 128:../drivers/fsl_flash.c **** #endif
 129:../drivers/fsl_flash.c **** /*@}*/
 130:../drivers/fsl_flash.c **** 
 131:../drivers/fsl_flash.c **** /*!
 132:../drivers/fsl_flash.c ****  * @name Flash cache and speculation control defines
 133:../drivers/fsl_flash.c ****  * @{
 134:../drivers/fsl_flash.c ****  */
 135:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_CFCC_MASK) || defined(MCM_CPCR2_CCBC_MASK)
 136:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_MCM (1)
 137:../drivers/fsl_flash.c **** #else
 138:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_MCM (0)
 139:../drivers/fsl_flash.c **** #endif
 140:../drivers/fsl_flash.c **** #if defined(FMC_PFB0CR_CINV_WAY_MASK) || defined(FMC_PFB01CR_CINV_WAY_MASK)
 141:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_FMC (1)
 142:../drivers/fsl_flash.c **** #else
 143:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_FMC (0)
 144:../drivers/fsl_flash.c **** #endif
 145:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_DFCS_MASK)
 146:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM (1)
 147:../drivers/fsl_flash.c **** #else
 148:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM (0)
 149:../drivers/fsl_flash.c **** #endif
 150:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCMC1_MASK) || defined(MSCM_OCMDR_OCM1_MASK) || defined(MSCM_OCMDR0_OCM1_MAS
 151:../drivers/fsl_flash.c ****     defined(MSCM_OCMDR1_OCM1_MASK)
 152:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM (1)
 153:../drivers/fsl_flash.c **** #else
 154:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM (0)
 155:../drivers/fsl_flash.c **** #endif
 156:../drivers/fsl_flash.c **** #if defined(FMC_PFB0CR_S_INV_MASK) || defined(FMC_PFB0CR_S_B_INV_MASK) || defined(FMC_PFB01CR_S_INV
 157:../drivers/fsl_flash.c ****     defined(FMC_PFB01CR_S_B_INV_MASK)
 158:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC (1)
 159:../drivers/fsl_flash.c **** #else
 160:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC (0)
 161:../drivers/fsl_flash.c **** #endif
 162:../drivers/fsl_flash.c **** 
 163:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM || FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY
 164:../drivers/fsl_flash.c ****     FLASH_CACHE_IS_CONTROLLED_BY_MCM || FLASH_CACHE_IS_CONTROLLED_BY_FMC
 165:../drivers/fsl_flash.c **** #define FLASH_IS_CACHE_INVALIDATION_AVAILABLE (1)
 166:../drivers/fsl_flash.c **** #else
 167:../drivers/fsl_flash.c **** #define FLASH_IS_CACHE_INVALIDATION_AVAILABLE (0)
 168:../drivers/fsl_flash.c **** #endif
 169:../drivers/fsl_flash.c **** /*@}*/
 170:../drivers/fsl_flash.c **** 
 171:../drivers/fsl_flash.c **** /*! @brief Data flash IFR map Field*/
 172:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_IS_FTFE) && FSL_FEATURE_FLASH_IS_FTFE
 173:../drivers/fsl_flash.c **** #define DFLASH_IFR_READRESOURCE_START_ADDRESS 0x8003F8U
 174:../drivers/fsl_flash.c **** #else /* FSL_FEATURE_FLASH_IS_FTFL == 1 or FSL_FEATURE_FLASH_IS_FTFA = =1 */
 175:../drivers/fsl_flash.c **** #define DFLASH_IFR_READRESOURCE_START_ADDRESS 0x8000F8U
 176:../drivers/fsl_flash.c **** #endif
 177:../drivers/fsl_flash.c **** 
 178:../drivers/fsl_flash.c **** /*!
 179:../drivers/fsl_flash.c ****  * @name Reserved FlexNVM size (For a variety of purposes) defines
 180:../drivers/fsl_flash.c ****  * @{
 181:../drivers/fsl_flash.c ****  */
 182:../drivers/fsl_flash.c **** #define FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED 0xFFFFFFFFU
 183:../drivers/fsl_flash.c **** #define FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED 0xFFFFU
 184:../drivers/fsl_flash.c **** /*@}*/
 185:../drivers/fsl_flash.c **** 
 186:../drivers/fsl_flash.c **** /*!
 187:../drivers/fsl_flash.c ****  * @name Flash Program Once Field defines
 188:../drivers/fsl_flash.c ****  * @{
 189:../drivers/fsl_flash.c ****  */
 190:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_IS_FTFA) && FSL_FEATURE_FLASH_IS_FTFA
 191:../drivers/fsl_flash.c **** /* FTFA parts(eg. K80, KL80, L5K) support both 4-bytes and 8-bytes unit size */
 192:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_MIN_ID_8BYTES \
 193:../drivers/fsl_flash.c ****     0x10U /* Minimum Index indcating one of Progam Once Fields which is accessed in 8-byte records 
 194:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_MAX_ID_8BYTES \
 195:../drivers/fsl_flash.c ****     0x13U /* Maximum Index indcating one of Progam Once Fields which is accessed in 8-byte records 
 196:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 1
 197:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 1
 198:../drivers/fsl_flash.c **** #elif defined(FSL_FEATURE_FLASH_IS_FTFE) && FSL_FEATURE_FLASH_IS_FTFE
 199:../drivers/fsl_flash.c **** /* FTFE parts(eg. K65, KE18) only support 8-bytes unit size */
 200:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 0
 201:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 1
 202:../drivers/fsl_flash.c **** #elif defined(FSL_FEATURE_FLASH_IS_FTFL) && FSL_FEATURE_FLASH_IS_FTFL
 203:../drivers/fsl_flash.c **** /* FTFL parts(eg. K20) only support 4-bytes unit size */
 204:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 1
 205:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 0
 206:../drivers/fsl_flash.c **** #endif
 207:../drivers/fsl_flash.c **** /*@}*/
 208:../drivers/fsl_flash.c **** 
 209:../drivers/fsl_flash.c **** /*!
 210:../drivers/fsl_flash.c ****  * @name Flash security status defines
 211:../drivers/fsl_flash.c ****  * @{
 212:../drivers/fsl_flash.c ****  */
 213:../drivers/fsl_flash.c **** #define FLASH_SECURITY_STATE_KEYEN 0x80U
 214:../drivers/fsl_flash.c **** #define FLASH_SECURITY_STATE_UNSECURED 0x02U
 215:../drivers/fsl_flash.c **** #define FLASH_NOT_SECURE 0x01U
 216:../drivers/fsl_flash.c **** #define FLASH_SECURE_BACKDOOR_ENABLED 0x02U
 217:../drivers/fsl_flash.c **** #define FLASH_SECURE_BACKDOOR_DISABLED 0x04U
 218:../drivers/fsl_flash.c **** /*@}*/
 219:../drivers/fsl_flash.c **** 
 220:../drivers/fsl_flash.c **** /*!
 221:../drivers/fsl_flash.c ****  * @name Flash controller command numbers
 222:../drivers/fsl_flash.c ****  * @{
 223:../drivers/fsl_flash.c ****  */
 224:../drivers/fsl_flash.c **** #define FTFx_VERIFY_BLOCK 0x00U                    /*!< RD1BLK*/
 225:../drivers/fsl_flash.c **** #define FTFx_VERIFY_SECTION 0x01U                  /*!< RD1SEC*/
 226:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_CHECK 0x02U                   /*!< PGMCHK*/
 227:../drivers/fsl_flash.c **** #define FTFx_READ_RESOURCE 0x03U                   /*!< RDRSRC*/
 228:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_LONGWORD 0x06U                /*!< PGM4*/
 229:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_PHRASE 0x07U                  /*!< PGM8*/
 230:../drivers/fsl_flash.c **** #define FTFx_ERASE_BLOCK 0x08U                     /*!< ERSBLK*/
 231:../drivers/fsl_flash.c **** #define FTFx_ERASE_SECTOR 0x09U                    /*!< ERSSCR*/
 232:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_SECTION 0x0BU                 /*!< PGMSEC*/
 233:../drivers/fsl_flash.c **** #define FTFx_GENERATE_CRC 0x0CU                    /*!< CRCGEN*/
 234:../drivers/fsl_flash.c **** #define FTFx_VERIFY_ALL_BLOCK 0x40U                /*!< RD1ALL*/
 235:../drivers/fsl_flash.c **** #define FTFx_READ_ONCE 0x41U                       /*!< RDONCE or RDINDEX*/
 236:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_ONCE 0x43U                    /*!< PGMONCE or PGMINDEX*/
 237:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_BLOCK 0x44U                 /*!< ERSALL*/
 238:../drivers/fsl_flash.c **** #define FTFx_SECURITY_BY_PASS 0x45U                /*!< VFYKEY*/
 239:../drivers/fsl_flash.c **** #define FTFx_SWAP_CONTROL 0x46U                    /*!< SWAP*/
 240:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_BLOCK_UNSECURE 0x49U        /*!< ERSALLU*/
 241:../drivers/fsl_flash.c **** #define FTFx_VERIFY_ALL_EXECUTE_ONLY_SEGMENT 0x4AU /*!< RD1XA*/
 242:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_EXECUTE_ONLY_SEGMENT 0x4BU  /*!< ERSXA*/
 243:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_PARTITION 0x80U               /*!< PGMPART)*/
 244:../drivers/fsl_flash.c **** #define FTFx_SET_FLEXRAM_FUNCTION 0x81U            /*!< SETRAM*/
 245:../drivers/fsl_flash.c ****                                                    /*@}*/
 246:../drivers/fsl_flash.c **** 
 247:../drivers/fsl_flash.c **** /*!
 248:../drivers/fsl_flash.c ****  * @name Common flash register info defines
 249:../drivers/fsl_flash.c ****  * @{
 250:../drivers/fsl_flash.c ****  */
 251:../drivers/fsl_flash.c **** #if defined(FTFA)
 252:../drivers/fsl_flash.c **** #define FTFx FTFA
 253:../drivers/fsl_flash.c **** #define FTFx_BASE FTFA_BASE
 254:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFA_FSTAT_CCIF_MASK
 255:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFA_FSTAT_RDCOLERR_MASK
 256:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFA_FSTAT_ACCERR_MASK
 257:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFA_FSTAT_FPVIOL_MASK
 258:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFA_FSTAT_MGSTAT0_MASK
 259:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFA_FSEC_SEC_MASK
 260:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFA_FSEC_KEYEN_MASK
 261:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 262:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFA_FCNFG_RAMRDY_MASK
 263:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 264:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 265:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFA_FCNFG_EEERDY_MASK
 266:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 267:../drivers/fsl_flash.c **** #elif defined(FTFE)
 268:../drivers/fsl_flash.c **** #define FTFx FTFE
 269:../drivers/fsl_flash.c **** #define FTFx_BASE FTFE_BASE
 270:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFE_FSTAT_CCIF_MASK
 271:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFE_FSTAT_RDCOLERR_MASK
 272:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFE_FSTAT_ACCERR_MASK
 273:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFE_FSTAT_FPVIOL_MASK
 274:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFE_FSTAT_MGSTAT0_MASK
 275:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFE_FSEC_SEC_MASK
 276:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFE_FSEC_KEYEN_MASK
 277:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 278:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFE_FCNFG_RAMRDY_MASK
 279:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 280:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 281:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFE_FCNFG_EEERDY_MASK
 282:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 283:../drivers/fsl_flash.c **** #elif defined(FTFL)
 284:../drivers/fsl_flash.c **** #define FTFx FTFL
 285:../drivers/fsl_flash.c **** #define FTFx_BASE FTFL_BASE
 286:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFL_FSTAT_CCIF_MASK
 287:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFL_FSTAT_RDCOLERR_MASK
 288:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFL_FSTAT_ACCERR_MASK
 289:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFL_FSTAT_FPVIOL_MASK
 290:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFL_FSTAT_MGSTAT0_MASK
 291:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFL_FSEC_SEC_MASK
 292:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFL_FSEC_KEYEN_MASK
 293:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 294:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFL_FCNFG_RAMRDY_MASK
 295:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 296:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 297:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFL_FCNFG_EEERDY_MASK
 298:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 299:../drivers/fsl_flash.c **** #else
 300:../drivers/fsl_flash.c **** #error "Unknown flash controller"
 301:../drivers/fsl_flash.c **** #endif
 302:../drivers/fsl_flash.c **** /*@}*/
 303:../drivers/fsl_flash.c **** 
 304:../drivers/fsl_flash.c **** /*!
 305:../drivers/fsl_flash.c ****  * @name Common flash register access info defines
 306:../drivers/fsl_flash.c ****  * @{
 307:../drivers/fsl_flash.c ****  */
 308:../drivers/fsl_flash.c **** #define FTFx_FCCOB3_REG (FTFx->FCCOB3)
 309:../drivers/fsl_flash.c **** #define FTFx_FCCOB5_REG (FTFx->FCCOB5)
 310:../drivers/fsl_flash.c **** #define FTFx_FCCOB6_REG (FTFx->FCCOB6)
 311:../drivers/fsl_flash.c **** #define FTFx_FCCOB7_REG (FTFx->FCCOB7)
 312:../drivers/fsl_flash.c **** 
 313:../drivers/fsl_flash.c **** #if defined(FTFA_FPROTH0_PROT_MASK) || defined(FTFE_FPROTH0_PROT_MASK) || defined(FTFL_FPROTH0_PROT
 314:../drivers/fsl_flash.c **** #define FTFx_FPROT_HIGH_REG (FTFx->FPROTH3)
 315:../drivers/fsl_flash.c **** #define FTFx_FPROTH3_REG (FTFx->FPROTH3)
 316:../drivers/fsl_flash.c **** #define FTFx_FPROTH2_REG (FTFx->FPROTH2)
 317:../drivers/fsl_flash.c **** #define FTFx_FPROTH1_REG (FTFx->FPROTH1)
 318:../drivers/fsl_flash.c **** #define FTFx_FPROTH0_REG (FTFx->FPROTH0)
 319:../drivers/fsl_flash.c **** #endif
 320:../drivers/fsl_flash.c **** 
 321:../drivers/fsl_flash.c **** #if defined(FTFA_FPROTL0_PROT_MASK) || defined(FTFE_FPROTL0_PROT_MASK) || defined(FTFL_FPROTL0_PROT
 322:../drivers/fsl_flash.c **** #define FTFx_FPROT_LOW_REG (FTFx->FPROTL3)
 323:../drivers/fsl_flash.c **** #define FTFx_FPROTL3_REG (FTFx->FPROTL3)
 324:../drivers/fsl_flash.c **** #define FTFx_FPROTL2_REG (FTFx->FPROTL2)
 325:../drivers/fsl_flash.c **** #define FTFx_FPROTL1_REG (FTFx->FPROTL1)
 326:../drivers/fsl_flash.c **** #define FTFx_FPROTL0_REG (FTFx->FPROTL0)
 327:../drivers/fsl_flash.c **** #elif defined(FTFA_FPROT0_PROT_MASK) || defined(FTFE_FPROT0_PROT_MASK) || defined(FTFL_FPROT0_PROT_
 328:../drivers/fsl_flash.c **** #define FTFx_FPROT_LOW_REG (FTFx->FPROT3)
 329:../drivers/fsl_flash.c **** #define FTFx_FPROTL3_REG (FTFx->FPROT3)
 330:../drivers/fsl_flash.c **** #define FTFx_FPROTL2_REG (FTFx->FPROT2)
 331:../drivers/fsl_flash.c **** #define FTFx_FPROTL1_REG (FTFx->FPROT1)
 332:../drivers/fsl_flash.c **** #define FTFx_FPROTL0_REG (FTFx->FPROT0)
 333:../drivers/fsl_flash.c **** #endif
 334:../drivers/fsl_flash.c **** 
 335:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
 336:../drivers/fsl_flash.c **** #define FTFx_FPROTSH_REG (FTFx->FPROTSH)
 337:../drivers/fsl_flash.c **** #define FTFx_FPROTSL_REG (FTFx->FPROTSL)
 338:../drivers/fsl_flash.c **** #endif
 339:../drivers/fsl_flash.c **** 
 340:../drivers/fsl_flash.c **** #define FTFx_XACCH3_REG (FTFx->XACCH3)
 341:../drivers/fsl_flash.c **** #define FTFx_XACCL3_REG (FTFx->XACCL3)
 342:../drivers/fsl_flash.c **** 
 343:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
 344:../drivers/fsl_flash.c **** #define FTFx_XACCSH_REG (FTFx->XACCSH)
 345:../drivers/fsl_flash.c **** #define FTFx_XACCSL_REG (FTFx->XACCSL)
 346:../drivers/fsl_flash.c **** #endif
 347:../drivers/fsl_flash.c **** /*@}*/
 348:../drivers/fsl_flash.c **** 
 349:../drivers/fsl_flash.c **** /*!
 350:../drivers/fsl_flash.c ****  * @brief Enumeration for access segment property.
 351:../drivers/fsl_flash.c ****  */
 352:../drivers/fsl_flash.c **** enum _flash_access_segment_property
 353:../drivers/fsl_flash.c **** {
 354:../drivers/fsl_flash.c ****     kFLASH_AccessSegmentBase = 256UL,
 355:../drivers/fsl_flash.c **** };
 356:../drivers/fsl_flash.c **** 
 357:../drivers/fsl_flash.c **** /*!
 358:../drivers/fsl_flash.c ****  * @brief Enumeration for flash config area.
 359:../drivers/fsl_flash.c ****  */
 360:../drivers/fsl_flash.c **** enum _flash_config_area_range
 361:../drivers/fsl_flash.c **** {
 362:../drivers/fsl_flash.c ****     kFLASH_ConfigAreaStart = 0x400U,
 363:../drivers/fsl_flash.c ****     kFLASH_ConfigAreaEnd = 0x40FU
 364:../drivers/fsl_flash.c **** };
 365:../drivers/fsl_flash.c **** 
 366:../drivers/fsl_flash.c **** /*!
 367:../drivers/fsl_flash.c ****  * @name Flash register access type defines
 368:../drivers/fsl_flash.c ****  * @{
 369:../drivers/fsl_flash.c ****  */
 370:../drivers/fsl_flash.c **** #define FTFx_REG8_ACCESS_TYPE volatile uint8_t *
 371:../drivers/fsl_flash.c **** #define FTFx_REG32_ACCESS_TYPE volatile uint32_t *
 372:../drivers/fsl_flash.c **** /*@}*/
 373:../drivers/fsl_flash.c **** 
 374:../drivers/fsl_flash.c **** /*!
 375:../drivers/fsl_flash.c ****  * @brief MCM cache register access info defines.
 376:../drivers/fsl_flash.c ****  */
 377:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_CFCC_MASK)
 378:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_MASK MCM_PLACR_CFCC_MASK
 379:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_SHIFT MCM_PLACR_CFCC_SHIFT
 380:../drivers/fsl_flash.c **** #if defined(MCM0)
 381:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM0->PLACR
 382:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM1))
 383:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM->PLACR
 384:../drivers/fsl_flash.c **** #endif
 385:../drivers/fsl_flash.c **** #if defined(MCM1)
 386:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM1->PLACR
 387:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM0))
 388:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM->PLACR
 389:../drivers/fsl_flash.c **** #endif
 390:../drivers/fsl_flash.c **** #elif defined(MCM_CPCR2_CCBC_MASK)
 391:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_MASK MCM_CPCR2_CCBC_MASK
 392:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_SHIFT MCM_CPCR2_CCBC_SHIFT
 393:../drivers/fsl_flash.c **** #if defined(MCM0)
 394:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM0->CPCR2
 395:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM1))
 396:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM->CPCR2
 397:../drivers/fsl_flash.c **** #endif
 398:../drivers/fsl_flash.c **** #if defined(MCM1)
 399:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM1->CPCR2
 400:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM0))
 401:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM->CPCR2
 402:../drivers/fsl_flash.c **** #endif
 403:../drivers/fsl_flash.c **** #endif
 404:../drivers/fsl_flash.c **** 
 405:../drivers/fsl_flash.c **** /*!
 406:../drivers/fsl_flash.c ****  * @brief Enumeration for ARM core part number.
 407:../drivers/fsl_flash.c ****  */
 408:../drivers/fsl_flash.c **** enum _arm_core_part_number
 409:../drivers/fsl_flash.c **** {
 410:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0 = 0xc20U,
 411:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0P = 0xc60U,
 412:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM1 = 0xc21U,
 413:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM3 = 0xc23U,
 414:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM4 = 0xc24U,
 415:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM7 = 0xc27U,
 416:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM23 = 0xd20U,
 417:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM33 = 0xd21U,
 418:../drivers/fsl_flash.c **** 
 419:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid = 0xFFFFU,
 420:../drivers/fsl_flash.c **** };
 421:../drivers/fsl_flash.c **** 
 422:../drivers/fsl_flash.c **** #if defined(BL_TARGET_ROM) && defined(MCM0_CACHE_REG) && defined(MCM1_CACHE_REG) && \
 423:../drivers/fsl_flash.c ****     defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
 424:../drivers/fsl_flash.c **** FTFx_REG32_ACCESS_TYPE const s_mcmModuleAccessTypeArray[] = {
 425:../drivers/fsl_flash.c ****     (FTFx_REG32_ACCESS_TYPE)&MCM0_CACHE_REG,
 426:../drivers/fsl_flash.c ****     (FTFx_REG32_ACCESS_TYPE)&MCM1_CACHE_REG
 427:../drivers/fsl_flash.c **** };
 428:../drivers/fsl_flash.c **** 
 429:../drivers/fsl_flash.c **** static const uint16_t s_armCorePartNumberArray[] = {
 430:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0P,
 431:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM1,
 432:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 433:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM3,
 434:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM4,
 435:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 436:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 437:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM7
 438:../drivers/fsl_flash.c **** };
 439:../drivers/fsl_flash.c **** #endif
 440:../drivers/fsl_flash.c **** 
 441:../drivers/fsl_flash.c **** /*!
 442:../drivers/fsl_flash.c ****  * @brief MSCM cache register access info defines.
 443:../drivers/fsl_flash.c ****  */
 444:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCM1_MASK)
 445:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR_OCM1_MASK
 446:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR_OCM1_SHIFT
 447:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR_OCM1(x)
 448:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR0_OCM1_MASK) || defined(MSCM_OCMDR1_OCM1_MASK)
 449:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR0_OCM1_MASK
 450:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR0_OCM1_SHIFT
 451:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR0_OCM1(x)
 452:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR_OCMC1_MASK)
 453:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR_OCMC1_MASK
 454:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR_OCMC1_SHIFT
 455:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR_OCMC1(x)
 456:../drivers/fsl_flash.c **** #endif
 457:../drivers/fsl_flash.c **** 
 458:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCM1_MASK) || defined(MSCM_OCMDR_OCMC1_MASK)
 459:../drivers/fsl_flash.c **** #define MSCM_OCMDR0_REG MSCM->OCMDR[0]
 460:../drivers/fsl_flash.c **** #define MSCM_OCMDR1_REG MSCM->OCMDR[1]
 461:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR0_OCM1_MASK) || defined(MSCM_OCMDR1_OCM1_MASK)
 462:../drivers/fsl_flash.c **** #define MSCM_OCMDR0_REG MSCM->OCMDR0
 463:../drivers/fsl_flash.c **** #define MSCM_OCMDR1_REG MSCM->OCMDR1
 464:../drivers/fsl_flash.c **** #endif
 465:../drivers/fsl_flash.c **** 
 466:../drivers/fsl_flash.c **** /*!
 467:../drivers/fsl_flash.c ****  * @brief MSCM prefetch speculation defines.
 468:../drivers/fsl_flash.c ****  */
 469:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFDS_MASK (0x10U)
 470:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFCS_MASK (0x20U)
 471:../drivers/fsl_flash.c **** 
 472:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFDS_SHIFT (4U)
 473:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFCS_SHIFT (5U)
 474:../drivers/fsl_flash.c **** 
 475:../drivers/fsl_flash.c **** /*******************************************************************************
 476:../drivers/fsl_flash.c ****  * Prototypes
 477:../drivers/fsl_flash.c ****  ******************************************************************************/
 478:../drivers/fsl_flash.c **** 
 479:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 480:../drivers/fsl_flash.c **** /*! @brief Copy flash_run_command() to RAM*/
 481:../drivers/fsl_flash.c **** static void copy_flash_run_command(uint32_t *flashRunCommand);
 482:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 483:../drivers/fsl_flash.c **** /*! @brief Copy flash_cache_clear_command() to RAM*/
 484:../drivers/fsl_flash.c **** static void copy_flash_common_bit_operation(uint32_t *flashCommonBitOperation);
 485:../drivers/fsl_flash.c **** #endif
 486:../drivers/fsl_flash.c **** /*! @brief Check whether flash execute-in-ram functions are ready*/
 487:../drivers/fsl_flash.c **** static status_t flash_check_execute_in_ram_function_info(flash_config_t *config);
 488:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 489:../drivers/fsl_flash.c **** 
 490:../drivers/fsl_flash.c **** /*! @brief Internal function Flash command sequence. Called by driver APIs only*/
 491:../drivers/fsl_flash.c **** static status_t flash_command_sequence(flash_config_t *config);
 492:../drivers/fsl_flash.c **** 
 493:../drivers/fsl_flash.c **** /*! @brief Perform the cache clear to the flash*/
 494:../drivers/fsl_flash.c **** void flash_cache_clear(flash_config_t *config);
 495:../drivers/fsl_flash.c **** 
 496:../drivers/fsl_flash.c **** /*! @brief Process the cache to the flash*/
 497:../drivers/fsl_flash.c **** static void flash_cache_clear_process(flash_config_t *config, flash_cache_clear_process_t process);
 498:../drivers/fsl_flash.c **** 
 499:../drivers/fsl_flash.c **** /*! @brief Validates the range and alignment of the given address range.*/
 500:../drivers/fsl_flash.c **** static status_t flash_check_range(flash_config_t *config,
 501:../drivers/fsl_flash.c ****                                   uint32_t startAddress,
 502:../drivers/fsl_flash.c ****                                   uint32_t lengthInBytes,
 503:../drivers/fsl_flash.c ****                                   uint32_t alignmentBaseline);
 504:../drivers/fsl_flash.c **** /*! @brief Gets the right address, sector and block size of current flash type which is indicated b
 505:../drivers/fsl_flash.c **** static status_t flash_get_matched_operation_info(flash_config_t *config,
 506:../drivers/fsl_flash.c ****                                                  uint32_t address,
 507:../drivers/fsl_flash.c ****                                                  flash_operation_config_t *info);
 508:../drivers/fsl_flash.c **** /*! @brief Validates the given user key for flash erase APIs.*/
 509:../drivers/fsl_flash.c **** static status_t flash_check_user_key(uint32_t key);
 510:../drivers/fsl_flash.c **** 
 511:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 512:../drivers/fsl_flash.c **** /*! @brief Updates FlexNVM memory partition status according to data flash 0 IFR.*/
 513:../drivers/fsl_flash.c **** static status_t flash_update_flexnvm_memory_partition_status(flash_config_t *config);
 514:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
 515:../drivers/fsl_flash.c **** 
 516:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
 517:../drivers/fsl_flash.c **** /*! @brief Validates the range of the given resource address.*/
 518:../drivers/fsl_flash.c **** static status_t flash_check_resource_range(uint32_t start,
 519:../drivers/fsl_flash.c ****                                            uint32_t lengthInBytes,
 520:../drivers/fsl_flash.c ****                                            uint32_t alignmentBaseline,
 521:../drivers/fsl_flash.c ****                                            flash_read_resource_option_t option);
 522:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
 523:../drivers/fsl_flash.c **** 
 524:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
 525:../drivers/fsl_flash.c **** /*! @brief Validates the gived swap control option.*/
 526:../drivers/fsl_flash.c **** static status_t flash_check_swap_control_option(flash_swap_control_option_t option);
 527:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
 528:../drivers/fsl_flash.c **** 
 529:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
 530:../drivers/fsl_flash.c **** /*! @brief Validates the gived address to see if it is equal to swap indicator address in pflash sw
 531:../drivers/fsl_flash.c **** static status_t flash_validate_swap_indicator_address(flash_config_t *config, uint32_t address);
 532:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
 533:../drivers/fsl_flash.c **** 
 534:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
 535:../drivers/fsl_flash.c **** /*! @brief Validates the gived flexram function option.*/
 536:../drivers/fsl_flash.c **** static inline status_t flasn_check_flexram_function_option_range(flash_flexram_function_option_t op
 537:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
 538:../drivers/fsl_flash.c **** 
 539:../drivers/fsl_flash.c **** /*! @brief Gets the flash protection information (region size, region count).*/
 540:../drivers/fsl_flash.c **** static status_t flash_get_protection_info(flash_config_t *config, flash_protection_config_t *info);
 541:../drivers/fsl_flash.c **** 
 542:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 543:../drivers/fsl_flash.c **** /*! @brief Gets the flash Execute-Only access information (Segment size, Segment count).*/
 544:../drivers/fsl_flash.c **** static status_t flash_get_access_info(flash_config_t *config, flash_access_config_t *info);
 545:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 546:../drivers/fsl_flash.c **** 
 547:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
 548:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by MCM.*/
 549:../drivers/fsl_flash.c **** void mcm_flash_cache_clear(void);
 550:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_MCM */
 551:../drivers/fsl_flash.c **** 
 552:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
 553:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by FMC.*/
 554:../drivers/fsl_flash.c **** void fmc_flash_cache_clear(void);
 555:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
 556:../drivers/fsl_flash.c **** 
 557:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
 558:../drivers/fsl_flash.c **** /*! @brief Sets the prefetch speculation buffer to the flash by MSCM.*/
 559:../drivers/fsl_flash.c **** void mscm_flash_prefetch_speculation_enable(uint32_t flashIndex, bool enable);
 560:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM */
 561:../drivers/fsl_flash.c **** 
 562:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
 563:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by FMC.*/
 564:../drivers/fsl_flash.c **** void fmc_flash_prefetch_speculation_clear(void);
 565:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
 566:../drivers/fsl_flash.c **** 
 567:../drivers/fsl_flash.c **** /*******************************************************************************
 568:../drivers/fsl_flash.c ****  * Variables
 569:../drivers/fsl_flash.c ****  ******************************************************************************/
 570:../drivers/fsl_flash.c **** 
 571:../drivers/fsl_flash.c **** /*! @brief Access to FTFx->FCCOB */
 572:../drivers/fsl_flash.c **** volatile uint32_t *const kFCCOBx = (volatile uint32_t *)&FTFx_FCCOB3_REG;
 573:../drivers/fsl_flash.c **** /*! @brief Access to FTFx->FPROT */
 574:../drivers/fsl_flash.c **** volatile uint32_t *const kFPROTL = (volatile uint32_t *)&FTFx_FPROT_LOW_REG;
 575:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
 576:../drivers/fsl_flash.c **** volatile uint32_t *const kFPROTH = (volatile uint32_t *)&FTFx_FPROT_HIGH_REG;
 577:../drivers/fsl_flash.c **** #endif
 578:../drivers/fsl_flash.c **** 
 579:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
 580:../drivers/fsl_flash.c **** volatile uint8_t *const kFPROTSL = (volatile uint8_t *)&FTFx_FPROTSL_REG;
 581:../drivers/fsl_flash.c **** volatile uint8_t *const kFPROTSH = (volatile uint8_t *)&FTFx_FPROTSH_REG;
 582:../drivers/fsl_flash.c **** #endif
 583:../drivers/fsl_flash.c **** 
 584:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 585:../drivers/fsl_flash.c **** /*! @brief A function pointer used to point to relocated flash_run_command() */
 586:../drivers/fsl_flash.c **** static void (*callFlashRunCommand)(FTFx_REG8_ACCESS_TYPE ftfx_fstat);
 587:../drivers/fsl_flash.c **** 
 588:../drivers/fsl_flash.c **** /*!
 589:../drivers/fsl_flash.c ****  * @brief Position independent code of flash_run_command()
 590:../drivers/fsl_flash.c ****  *
 591:../drivers/fsl_flash.c ****  * Note1: The prototype of C function is shown as below:
 592:../drivers/fsl_flash.c ****  * @code
 593:../drivers/fsl_flash.c ****  *   void flash_run_command(FTFx_REG8_ACCESS_TYPE ftfx_fstat)
 594:../drivers/fsl_flash.c ****  *   {
 595:../drivers/fsl_flash.c ****  *       // clear CCIF bit
 596:../drivers/fsl_flash.c ****  *       *ftfx_fstat = FTFx_FSTAT_CCIF_MASK;
 597:../drivers/fsl_flash.c ****  *
 598:../drivers/fsl_flash.c ****  *       // Check CCIF bit of the flash status register, wait till it is set.
 599:../drivers/fsl_flash.c ****  *       // IP team indicates that this loop will always complete.
 600:../drivers/fsl_flash.c ****  *       while (!((*ftfx_fstat) & FTFx_FSTAT_CCIF_MASK))
 601:../drivers/fsl_flash.c ****  *       {
 602:../drivers/fsl_flash.c ****  *       }
 603:../drivers/fsl_flash.c ****  *   }
 604:../drivers/fsl_flash.c ****  * @endcode
 605:../drivers/fsl_flash.c ****  * Note2: The binary code is generated by IAR 7.70.1
 606:../drivers/fsl_flash.c ****  */
 607:../drivers/fsl_flash.c **** static const uint16_t s_flashRunCommandFunctionCode[] = {
 608:../drivers/fsl_flash.c ****     0x2180, /* MOVS  R1, #128 ; 0x80 */
 609:../drivers/fsl_flash.c ****     0x7001, /* STRB  R1, [R0] */
 610:../drivers/fsl_flash.c ****     /* @4: */
 611:../drivers/fsl_flash.c ****     0x7802, /* LDRB  R2, [R0] */
 612:../drivers/fsl_flash.c ****     0x420a, /* TST   R2, R1 */
 613:../drivers/fsl_flash.c ****     0xd0fc, /* BEQ.N @4 */
 614:../drivers/fsl_flash.c ****     0x4770  /* BX    LR */
 615:../drivers/fsl_flash.c **** };
 616:../drivers/fsl_flash.c **** 
 617:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 618:../drivers/fsl_flash.c **** /*! @brief A function pointer used to point to relocated flash_common_bit_operation() */
 619:../drivers/fsl_flash.c **** static void (*callFlashCommonBitOperation)(FTFx_REG32_ACCESS_TYPE base,
 620:../drivers/fsl_flash.c ****                                            uint32_t bitMask,
 621:../drivers/fsl_flash.c ****                                            uint32_t bitShift,
 622:../drivers/fsl_flash.c ****                                            uint32_t bitValue);
 623:../drivers/fsl_flash.c **** 
 624:../drivers/fsl_flash.c **** /*!
 625:../drivers/fsl_flash.c ****  * @brief Position independent code of flash_common_bit_operation()
 626:../drivers/fsl_flash.c ****  *
 627:../drivers/fsl_flash.c ****  * Note1: The prototype of C function is shown as below:
 628:../drivers/fsl_flash.c ****  * @code
 629:../drivers/fsl_flash.c ****  *   void flash_common_bit_operation(FTFx_REG32_ACCESS_TYPE base, uint32_t bitMask, uint32_t bitShi
 630:../drivers/fsl_flash.c ****  * bitValue)
 631:../drivers/fsl_flash.c ****  *   {
 632:../drivers/fsl_flash.c ****  *       if (bitMask)
 633:../drivers/fsl_flash.c ****  *       {
 634:../drivers/fsl_flash.c ****  *           uint32_t value = (((uint32_t)(((uint32_t)(bitValue)) << bitShift)) & bitMask);
 635:../drivers/fsl_flash.c ****  *           *base = (*base & (~bitMask)) | value;
 636:../drivers/fsl_flash.c ****  *       }
 637:../drivers/fsl_flash.c ****  *
 638:../drivers/fsl_flash.c ****  *       __ISB();
 639:../drivers/fsl_flash.c ****  *       __DSB();
 640:../drivers/fsl_flash.c ****  *   }
 641:../drivers/fsl_flash.c ****  * @endcode
 642:../drivers/fsl_flash.c ****  * Note2: The binary code is generated by IAR 7.70.1
 643:../drivers/fsl_flash.c ****  */
 644:../drivers/fsl_flash.c **** static const uint16_t s_flashCommonBitOperationFunctionCode[] = {
 645:../drivers/fsl_flash.c ****     0xb510, /* PUSH  {R4, LR} */
 646:../drivers/fsl_flash.c ****     0x2900, /* CMP   R1, #0 */
 647:../drivers/fsl_flash.c ****     0xd005, /* BEQ.N @12 */
 648:../drivers/fsl_flash.c ****     0x6804, /* LDR   R4, [R0] */
 649:../drivers/fsl_flash.c ****     0x438c, /* BICS  R4, R4, R1 */
 650:../drivers/fsl_flash.c ****     0x4093, /* LSLS  R3, R3, R2 */
 651:../drivers/fsl_flash.c ****     0x4019, /* ANDS  R1, R1, R3 */
 652:../drivers/fsl_flash.c ****     0x4321, /* ORRS  R1, R1, R4 */
 653:../drivers/fsl_flash.c ****     0x6001, /* STR   R1, [R0] */
 654:../drivers/fsl_flash.c ****     /*  @12: */
 655:../drivers/fsl_flash.c ****     0xf3bf, 0x8f6f, /* ISB */
 656:../drivers/fsl_flash.c ****     0xf3bf, 0x8f4f, /* DSB */
 657:../drivers/fsl_flash.c ****     0xbd10          /* POP   {R4, PC} */
 658:../drivers/fsl_flash.c **** };
 659:../drivers/fsl_flash.c **** #endif /* FLASH_IS_CACHE_INVALIDATION_AVAILABLE */
 660:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 661:../drivers/fsl_flash.c **** 
 662:../drivers/fsl_flash.c **** #if (FLASH_DRIVER_IS_FLASH_RESIDENT && !FLASH_DRIVER_IS_EXPORTED)
 663:../drivers/fsl_flash.c **** /*! @brief A static buffer used to hold flash_run_command() */
 664:../drivers/fsl_flash.c **** static uint32_t s_flashRunCommand[kFLASH_ExecuteInRamFunctionMaxSizeInWords];
 665:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 666:../drivers/fsl_flash.c **** /*! @brief A static buffer used to hold flash_common_bit_operation() */
 667:../drivers/fsl_flash.c **** static uint32_t s_flashCommonBitOperation[kFLASH_ExecuteInRamFunctionMaxSizeInWords];
 668:../drivers/fsl_flash.c **** #endif
 669:../drivers/fsl_flash.c **** /*! @brief Flash execute-in-ram function information */
 670:../drivers/fsl_flash.c **** static flash_execute_in_ram_function_config_t s_flashExecuteInRamFunctionInfo;
 671:../drivers/fsl_flash.c **** #endif
 672:../drivers/fsl_flash.c **** 
 673:../drivers/fsl_flash.c **** /*!
 674:../drivers/fsl_flash.c ****  * @brief Table of pflash sizes.
 675:../drivers/fsl_flash.c ****  *
 676:../drivers/fsl_flash.c ****  *  The index into this table is the value of the SIM_FCFG1.PFSIZE bitfield.
 677:../drivers/fsl_flash.c ****  *
 678:../drivers/fsl_flash.c ****  *  The values in this table have been right shifted 10 bits so that they will all fit within
 679:../drivers/fsl_flash.c ****  *  an 16-bit integer. To get the actual flash density, you must left shift the looked up value
 680:../drivers/fsl_flash.c ****  *  by 10 bits.
 681:../drivers/fsl_flash.c ****  *
 682:../drivers/fsl_flash.c ****  *  Elements of this table have a value of 0 in cases where the PFSIZE bitfield value is
 683:../drivers/fsl_flash.c ****  *  reserved.
 684:../drivers/fsl_flash.c ****  *
 685:../drivers/fsl_flash.c ****  *  Code to use the table:
 686:../drivers/fsl_flash.c ****  *  @code
 687:../drivers/fsl_flash.c ****  *      uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_PFSIZE_MASK) >> SIM_FCFG1_PFSIZE_SHIFT;
 688:../drivers/fsl_flash.c ****  *      flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 689:../drivers/fsl_flash.c ****  *  @endcode
 690:../drivers/fsl_flash.c ****  */
 691:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_SIZE_ENCODING_RULE_VERSION) && (FSL_FEATURE_FLASH_SIZE_ENCODING_RULE_
 692:../drivers/fsl_flash.c **** const uint16_t kPFlashDensities[] = {
 693:../drivers/fsl_flash.c ****     0,    /* 0x0 - undefined */
 694:../drivers/fsl_flash.c ****     0,    /* 0x1 - undefined */
 695:../drivers/fsl_flash.c ****     0,    /* 0x2 - undefined */
 696:../drivers/fsl_flash.c ****     0,    /* 0x3 - undefined */
 697:../drivers/fsl_flash.c ****     0,    /* 0x4 - undefined */
 698:../drivers/fsl_flash.c ****     0,    /* 0x5 - undefined */
 699:../drivers/fsl_flash.c ****     0,    /* 0x6 - undefined */
 700:../drivers/fsl_flash.c ****     0,    /* 0x7 - undefined */
 701:../drivers/fsl_flash.c ****     0,    /* 0x8 - undefined */
 702:../drivers/fsl_flash.c ****     0,    /* 0x9 - undefined */
 703:../drivers/fsl_flash.c ****     256,  /* 0xa - 262144, 256KB */
 704:../drivers/fsl_flash.c ****     0,    /* 0xb - undefined */
 705:../drivers/fsl_flash.c ****     1024, /* 0xc - 1048576, 1MB */
 706:../drivers/fsl_flash.c ****     0,    /* 0xd - undefined */
 707:../drivers/fsl_flash.c ****     0,    /* 0xe - undefined */
 708:../drivers/fsl_flash.c ****     0,    /* 0xf - undefined */
 709:../drivers/fsl_flash.c **** };
 710:../drivers/fsl_flash.c **** #else
 711:../drivers/fsl_flash.c **** const uint16_t kPFlashDensities[] = {
 712:../drivers/fsl_flash.c ****     8,    /* 0x0 - 8192, 8KB */
 713:../drivers/fsl_flash.c ****     16,   /* 0x1 - 16384, 16KB */
 714:../drivers/fsl_flash.c ****     24,   /* 0x2 - 24576, 24KB */
 715:../drivers/fsl_flash.c ****     32,   /* 0x3 - 32768, 32KB */
 716:../drivers/fsl_flash.c ****     48,   /* 0x4 - 49152, 48KB */
 717:../drivers/fsl_flash.c ****     64,   /* 0x5 - 65536, 64KB */
 718:../drivers/fsl_flash.c ****     96,   /* 0x6 - 98304, 96KB */
 719:../drivers/fsl_flash.c ****     128,  /* 0x7 - 131072, 128KB */
 720:../drivers/fsl_flash.c ****     192,  /* 0x8 - 196608, 192KB */
 721:../drivers/fsl_flash.c ****     256,  /* 0x9 - 262144, 256KB */
 722:../drivers/fsl_flash.c ****     384,  /* 0xa - 393216, 384KB */
 723:../drivers/fsl_flash.c ****     512,  /* 0xb - 524288, 512KB */
 724:../drivers/fsl_flash.c ****     768,  /* 0xc - 786432, 768KB */
 725:../drivers/fsl_flash.c ****     1024, /* 0xd - 1048576, 1MB */
 726:../drivers/fsl_flash.c ****     1536, /* 0xe - 1572864, 1.5MB */
 727:../drivers/fsl_flash.c ****     /* 2048,  0xf - 2097152, 2MB */
 728:../drivers/fsl_flash.c **** };
 729:../drivers/fsl_flash.c **** #endif
 730:../drivers/fsl_flash.c **** 
 731:../drivers/fsl_flash.c **** /*******************************************************************************
 732:../drivers/fsl_flash.c ****  * Code
 733:../drivers/fsl_flash.c ****  ******************************************************************************/
 734:../drivers/fsl_flash.c **** 
 735:../drivers/fsl_flash.c **** status_t FLASH_Init(flash_config_t *config)
 736:../drivers/fsl_flash.c **** {
 737:../drivers/fsl_flash.c ****     if (config == NULL)
 738:../drivers/fsl_flash.c ****     {
 739:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 740:../drivers/fsl_flash.c ****     }
 741:../drivers/fsl_flash.c **** 
 742:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
 743:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
 744:../drivers/fsl_flash.c ****     {
 745:../drivers/fsl_flash.c **** /* calculate the flash density from SIM_FCFG1.PFSIZE */
 746:../drivers/fsl_flash.c **** #if defined(SIM_FCFG1_CORE1_PFSIZE_MASK)
 747:../drivers/fsl_flash.c ****         uint32_t flashDensity;
 748:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_CORE1_PFSIZE_MASK) >> SIM_FCFG1_CORE1_PFSIZE_SHIFT
 749:../drivers/fsl_flash.c ****         if (pfsize == 0xf)
 750:../drivers/fsl_flash.c ****         {
 751:../drivers/fsl_flash.c ****             flashDensity = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT * SECONDARY_FLASH_FEATURE_PFL
 752:../drivers/fsl_flash.c ****         }
 753:../drivers/fsl_flash.c ****         else
 754:../drivers/fsl_flash.c ****         {
 755:../drivers/fsl_flash.c ****             flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 756:../drivers/fsl_flash.c ****         }
 757:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 758:../drivers/fsl_flash.c **** #else
 759:../drivers/fsl_flash.c ****         /* Unused code to solve MISRA-C issue*/
 760:../drivers/fsl_flash.c ****         config->PFlashBlockBase = kPFlashDensities[0];
 761:../drivers/fsl_flash.c ****         config->PFlashTotalSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT * SECONDARY_FLASH_FEAT
 762:../drivers/fsl_flash.c **** #endif
 763:../drivers/fsl_flash.c ****         config->PFlashBlockBase = SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS;
 764:../drivers/fsl_flash.c ****         config->PFlashBlockCount = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 765:../drivers/fsl_flash.c ****         config->PFlashSectorSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 766:../drivers/fsl_flash.c ****     }
 767:../drivers/fsl_flash.c ****     else
 768:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
 769:../drivers/fsl_flash.c ****     {
 770:../drivers/fsl_flash.c ****         uint32_t flashDensity;
 771:../drivers/fsl_flash.c **** 
 772:../drivers/fsl_flash.c **** /* calculate the flash density from SIM_FCFG1.PFSIZE */
 773:../drivers/fsl_flash.c **** #if defined(SIM_FCFG1_CORE0_PFSIZE_MASK)
 774:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_CORE0_PFSIZE_MASK) >> SIM_FCFG1_CORE0_PFSIZE_SHIFT
 775:../drivers/fsl_flash.c **** #elif defined(SIM_FCFG1_PFSIZE_MASK)
 776:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_PFSIZE_MASK) >> SIM_FCFG1_PFSIZE_SHIFT;
 777:../drivers/fsl_flash.c **** #else
 778:../drivers/fsl_flash.c **** #error "Unknown flash size"
 779:../drivers/fsl_flash.c **** #endif
 780:../drivers/fsl_flash.c ****         /* PFSIZE=0xf means that on customer parts the IFR was not correctly programmed.
 781:../drivers/fsl_flash.c ****          * We just use the pre-defined flash size in feature file here to support pre-production pa
 782:../drivers/fsl_flash.c ****         if (pfsize == 0xf)
 783:../drivers/fsl_flash.c ****         {
 784:../drivers/fsl_flash.c ****             flashDensity = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT * MAIN_FLASH_FEATURE_PFLASH_BLOCK_
 785:../drivers/fsl_flash.c ****         }
 786:../drivers/fsl_flash.c ****         else
 787:../drivers/fsl_flash.c ****         {
 788:../drivers/fsl_flash.c ****             flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 789:../drivers/fsl_flash.c ****         }
 790:../drivers/fsl_flash.c **** 
 791:../drivers/fsl_flash.c ****         /* fill out a few of the structure members */
 792:../drivers/fsl_flash.c ****         config->PFlashBlockBase = MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS;
 793:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 794:../drivers/fsl_flash.c ****         config->PFlashBlockCount = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 795:../drivers/fsl_flash.c ****         config->PFlashSectorSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 796:../drivers/fsl_flash.c ****     }
 797:../drivers/fsl_flash.c **** 
 798:../drivers/fsl_flash.c ****     {
 799:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 800:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
 801:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
 802:../drivers/fsl_flash.c ****         {
 803:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentSize = kFLASH_AccessSegmentBase << FTFx->FACSSS;
 804:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentCount = FTFx->FACSNS;
 805:../drivers/fsl_flash.c ****         }
 806:../drivers/fsl_flash.c ****         else
 807:../drivers/fsl_flash.c **** #endif
 808:../drivers/fsl_flash.c ****         {
 809:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentSize = kFLASH_AccessSegmentBase << FTFx->FACSS;
 810:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentCount = FTFx->FACSN;
 811:../drivers/fsl_flash.c ****         }
 812:../drivers/fsl_flash.c **** #else
 813:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentSize = 0;
 814:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentCount = 0;
 815:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 816:../drivers/fsl_flash.c ****     }
 817:../drivers/fsl_flash.c **** 
 818:../drivers/fsl_flash.c **** /* copy required flash commands to RAM */
 819:../drivers/fsl_flash.c **** #if (FLASH_DRIVER_IS_FLASH_RESIDENT && !FLASH_DRIVER_IS_EXPORTED)
 820:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != flash_check_execute_in_ram_function_info(config))
 821:../drivers/fsl_flash.c ****     {
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.activeFunctionCount = 0;
 823:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 824:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 825:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashCommonBitOperation = s_flashCommonBitOperation;
 826:../drivers/fsl_flash.c **** #endif
 827:../drivers/fsl_flash.c ****         config->flashExecuteInRamFunctionInfo = &s_flashExecuteInRamFunctionInfo.activeFunctionCoun
 828:../drivers/fsl_flash.c ****         FLASH_PrepareExecuteInRamFunctions(config);
 829:../drivers/fsl_flash.c ****     }
 830:../drivers/fsl_flash.c **** #endif
 831:../drivers/fsl_flash.c **** 
 832:../drivers/fsl_flash.c ****     config->FlexRAMBlockBase = FSL_FEATURE_FLASH_FLEX_RAM_START_ADDRESS;
 833:../drivers/fsl_flash.c ****     config->FlexRAMTotalSize = FSL_FEATURE_FLASH_FLEX_RAM_SIZE;
 834:../drivers/fsl_flash.c **** 
 835:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 836:../drivers/fsl_flash.c ****     {
 837:../drivers/fsl_flash.c ****         status_t returnCode;
 838:../drivers/fsl_flash.c ****         config->DFlashBlockBase = FSL_FEATURE_FLASH_FLEX_NVM_START_ADDRESS;
 839:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
 840:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
 841:../drivers/fsl_flash.c ****         {
 842:../drivers/fsl_flash.c ****             return returnCode;
 843:../drivers/fsl_flash.c ****         }
 844:../drivers/fsl_flash.c ****     }
 845:../drivers/fsl_flash.c **** #endif
 846:../drivers/fsl_flash.c **** 
 847:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 848:../drivers/fsl_flash.c **** }
 849:../drivers/fsl_flash.c **** 
 850:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 851:../drivers/fsl_flash.c **** status_t FLASH_PrepareExecuteInRamFunctions(flash_config_t *config)
 852:../drivers/fsl_flash.c **** {
 853:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
 854:../drivers/fsl_flash.c **** 
 855:../drivers/fsl_flash.c ****     if ((config == NULL) || (config->flashExecuteInRamFunctionInfo == NULL))
 856:../drivers/fsl_flash.c ****     {
 857:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 858:../drivers/fsl_flash.c ****     }
 859:../drivers/fsl_flash.c **** 
 860:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo = (flash_execute_in_ram_function_config_t *)config->flashExecuteI
 861:../drivers/fsl_flash.c **** 
 862:../drivers/fsl_flash.c ****     copy_flash_run_command(flashExecuteInRamFunctionInfo->flashRunCommand);
 863:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 864:../drivers/fsl_flash.c ****     copy_flash_common_bit_operation(flashExecuteInRamFunctionInfo->flashCommonBitOperation);
 865:../drivers/fsl_flash.c **** #endif
 866:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo->activeFunctionCount = kFLASH_ExecuteInRamFunctionTotalNum;
 867:../drivers/fsl_flash.c **** 
 868:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 869:../drivers/fsl_flash.c **** }
 870:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 871:../drivers/fsl_flash.c **** 
 872:../drivers/fsl_flash.c **** status_t FLASH_EraseAll(flash_config_t *config, uint32_t key)
 873:../drivers/fsl_flash.c **** {
 874:../drivers/fsl_flash.c ****     status_t returnCode;
 875:../drivers/fsl_flash.c **** 
 876:../drivers/fsl_flash.c ****     if (config == NULL)
 877:../drivers/fsl_flash.c ****     {
 878:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 879:../drivers/fsl_flash.c ****     }
 880:../drivers/fsl_flash.c **** 
 881:../drivers/fsl_flash.c ****     /* preparing passing parameter to erase all flash blocks */
 882:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_BLOCK, 0xFFFFFFU);
 883:../drivers/fsl_flash.c **** 
 884:../drivers/fsl_flash.c ****     /* Validate the user key */
 885:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 886:../drivers/fsl_flash.c ****     if (returnCode)
 887:../drivers/fsl_flash.c ****     {
 888:../drivers/fsl_flash.c ****         return returnCode;
 889:../drivers/fsl_flash.c ****     }
 890:../drivers/fsl_flash.c **** 
 891:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 892:../drivers/fsl_flash.c **** 
 893:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
 894:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
 895:../drivers/fsl_flash.c **** 
 896:../drivers/fsl_flash.c ****     flash_cache_clear(config);
 897:../drivers/fsl_flash.c **** 
 898:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 899:../drivers/fsl_flash.c ****     /* Data flash IFR will be erased by erase all command, so we need to
 900:../drivers/fsl_flash.c ****      *  update FlexNVM memory partition status synchronously */
 901:../drivers/fsl_flash.c ****     if (returnCode == kStatus_FLASH_Success)
 902:../drivers/fsl_flash.c ****     {
 903:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
 904:../drivers/fsl_flash.c ****     }
 905:../drivers/fsl_flash.c **** #endif
 906:../drivers/fsl_flash.c **** 
 907:../drivers/fsl_flash.c ****     return returnCode;
 908:../drivers/fsl_flash.c **** }
 909:../drivers/fsl_flash.c **** 
 910:../drivers/fsl_flash.c **** status_t FLASH_Erase(flash_config_t *config, uint32_t start, uint32_t lengthInBytes, uint32_t key)
 911:../drivers/fsl_flash.c **** {
 912:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 913:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
 914:../drivers/fsl_flash.c ****     uint32_t endAddress;      /* storing end address */
 915:../drivers/fsl_flash.c ****     uint32_t numberOfSectors; /* number of sectors calculated by endAddress */
 916:../drivers/fsl_flash.c ****     status_t returnCode;
 917:../drivers/fsl_flash.c **** 
 918:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
 919:../drivers/fsl_flash.c **** 
 920:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
 921:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectorCmdAddres
 922:../drivers/fsl_flash.c ****     if (returnCode)
 923:../drivers/fsl_flash.c ****     {
 924:../drivers/fsl_flash.c ****         return returnCode;
 925:../drivers/fsl_flash.c ****     }
 926:../drivers/fsl_flash.c **** 
 927:../drivers/fsl_flash.c ****     /* Validate the user key */
 928:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 929:../drivers/fsl_flash.c ****     if (returnCode)
 930:../drivers/fsl_flash.c ****     {
 931:../drivers/fsl_flash.c ****         return returnCode;
 932:../drivers/fsl_flash.c ****     }
 933:../drivers/fsl_flash.c **** 
 934:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
 935:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
 936:../drivers/fsl_flash.c **** 
 937:../drivers/fsl_flash.c ****     /* calculating Flash end address */
 938:../drivers/fsl_flash.c ****     endAddress = start + lengthInBytes - 1;
 939:../drivers/fsl_flash.c **** 
 940:../drivers/fsl_flash.c ****     /* re-calculate the endAddress and align it to the start of the next sector
 941:../drivers/fsl_flash.c ****      * which will be used in the comparison below */
 942:../drivers/fsl_flash.c ****     if (endAddress % sectorSize)
 943:../drivers/fsl_flash.c ****     {
 944:../drivers/fsl_flash.c ****         numberOfSectors = endAddress / sectorSize + 1;
 945:../drivers/fsl_flash.c ****         endAddress = numberOfSectors * sectorSize - 1;
 946:../drivers/fsl_flash.c ****     }
 947:../drivers/fsl_flash.c **** 
 948:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 949:../drivers/fsl_flash.c **** 
 950:../drivers/fsl_flash.c ****     /* the start address will increment to the next sector address
 951:../drivers/fsl_flash.c ****      * until it reaches the endAdddress */
 952:../drivers/fsl_flash.c ****     while (start <= endAddress)
 953:../drivers/fsl_flash.c ****     {
 954:../drivers/fsl_flash.c ****         /* preparing passing parameter to erase a flash block */
 955:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_SECTOR, start);
 956:../drivers/fsl_flash.c **** 
 957:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
 958:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
 959:../drivers/fsl_flash.c **** 
 960:../drivers/fsl_flash.c ****         /* checking the success of command execution */
 961:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
 962:../drivers/fsl_flash.c ****         {
 963:../drivers/fsl_flash.c ****             break;
 964:../drivers/fsl_flash.c ****         }
 965:../drivers/fsl_flash.c ****         else
 966:../drivers/fsl_flash.c ****         {
 967:../drivers/fsl_flash.c ****             /* Increment to the next sector */
 968:../drivers/fsl_flash.c ****             start += sectorSize;
 969:../drivers/fsl_flash.c ****         }
 970:../drivers/fsl_flash.c ****     }
 971:../drivers/fsl_flash.c **** 
 972:../drivers/fsl_flash.c ****     flash_cache_clear(config);
 973:../drivers/fsl_flash.c **** 
 974:../drivers/fsl_flash.c ****     return (returnCode);
 975:../drivers/fsl_flash.c **** }
 976:../drivers/fsl_flash.c **** 
 977:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD) && FSL_FEATURE_FLASH_HAS_ERASE_ALL
 978:../drivers/fsl_flash.c **** status_t FLASH_EraseAllUnsecure(flash_config_t *config, uint32_t key)
 979:../drivers/fsl_flash.c **** {
 980:../drivers/fsl_flash.c ****     status_t returnCode;
 981:../drivers/fsl_flash.c **** 
 982:../drivers/fsl_flash.c ****     if (config == NULL)
 983:../drivers/fsl_flash.c ****     {
 984:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 985:../drivers/fsl_flash.c ****     }
 986:../drivers/fsl_flash.c **** 
 987:../drivers/fsl_flash.c ****     /* Prepare passing parameter to erase all flash blocks (unsecure). */
 988:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_BLOCK_UNSECURE, 0xFFFFFFU);
 989:../drivers/fsl_flash.c **** 
 990:../drivers/fsl_flash.c ****     /* Validate the user key */
 991:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 992:../drivers/fsl_flash.c ****     if (returnCode)
 993:../drivers/fsl_flash.c ****     {
 994:../drivers/fsl_flash.c ****         return returnCode;
 995:../drivers/fsl_flash.c ****     }
 996:../drivers/fsl_flash.c **** 
 997:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 998:../drivers/fsl_flash.c **** 
 999:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1000:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1001:../drivers/fsl_flash.c **** 
1002:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1003:../drivers/fsl_flash.c **** 
1004:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
1005:../drivers/fsl_flash.c ****     /* Data flash IFR will be erased by erase all unsecure command, so we need to
1006:../drivers/fsl_flash.c ****      *  update FlexNVM memory partition status synchronously */
1007:../drivers/fsl_flash.c ****     if (returnCode == kStatus_FLASH_Success)
1008:../drivers/fsl_flash.c ****     {
1009:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
1010:../drivers/fsl_flash.c ****     }
1011:../drivers/fsl_flash.c **** #endif
1012:../drivers/fsl_flash.c **** 
1013:../drivers/fsl_flash.c ****     return returnCode;
1014:../drivers/fsl_flash.c **** }
1015:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD */
1016:../drivers/fsl_flash.c **** 
1017:../drivers/fsl_flash.c **** status_t FLASH_EraseAllExecuteOnlySegments(flash_config_t *config, uint32_t key)
1018:../drivers/fsl_flash.c **** {
1019:../drivers/fsl_flash.c ****     status_t returnCode;
1020:../drivers/fsl_flash.c **** 
1021:../drivers/fsl_flash.c ****     if (config == NULL)
1022:../drivers/fsl_flash.c ****     {
1023:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1024:../drivers/fsl_flash.c ****     }
1025:../drivers/fsl_flash.c **** 
1026:../drivers/fsl_flash.c ****     /* preparing passing parameter to erase all execute-only segments
1027:../drivers/fsl_flash.c ****      * 1st element for the FCCOB register */
1028:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_EXECUTE_ONLY_SEGMENT, 0xFFFFFFU);
1029:../drivers/fsl_flash.c **** 
1030:../drivers/fsl_flash.c ****     /* Validate the user key */
1031:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
1032:../drivers/fsl_flash.c ****     if (returnCode)
1033:../drivers/fsl_flash.c ****     {
1034:../drivers/fsl_flash.c ****         return returnCode;
1035:../drivers/fsl_flash.c ****     }
1036:../drivers/fsl_flash.c **** 
1037:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1038:../drivers/fsl_flash.c **** 
1039:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1040:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1041:../drivers/fsl_flash.c **** 
1042:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1043:../drivers/fsl_flash.c **** 
1044:../drivers/fsl_flash.c ****     return returnCode;
1045:../drivers/fsl_flash.c **** }
1046:../drivers/fsl_flash.c **** 
1047:../drivers/fsl_flash.c **** status_t FLASH_Program(flash_config_t *config, uint32_t start, uint32_t *src, uint32_t lengthInByte
1048:../drivers/fsl_flash.c **** {
1049:../drivers/fsl_flash.c ****     status_t returnCode;
1050:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1051:../drivers/fsl_flash.c **** 
1052:../drivers/fsl_flash.c ****     if (src == NULL)
1053:../drivers/fsl_flash.c ****     {
1054:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1055:../drivers/fsl_flash.c ****     }
1056:../drivers/fsl_flash.c **** 
1057:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1058:../drivers/fsl_flash.c **** 
1059:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1060:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.blockWriteUnitS
1061:../drivers/fsl_flash.c ****     if (returnCode)
1062:../drivers/fsl_flash.c ****     {
1063:../drivers/fsl_flash.c ****         return returnCode;
1064:../drivers/fsl_flash.c ****     }
1065:../drivers/fsl_flash.c **** 
1066:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1067:../drivers/fsl_flash.c **** 
1068:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1069:../drivers/fsl_flash.c **** 
1070:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1071:../drivers/fsl_flash.c ****     {
1072:../drivers/fsl_flash.c ****         /* preparing passing parameter to program the flash block */
1073:../drivers/fsl_flash.c ****         kFCCOBx[1] = *src++;
1074:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
1075:../drivers/fsl_flash.c ****         {
1076:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_LONGWORD, start);
1077:../drivers/fsl_flash.c ****         }
1078:../drivers/fsl_flash.c ****         else if (8 == flashOperationInfo.blockWriteUnitSize)
1079:../drivers/fsl_flash.c ****         {
1080:../drivers/fsl_flash.c ****             kFCCOBx[2] = *src++;
1081:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
1082:../drivers/fsl_flash.c ****         }
1083:../drivers/fsl_flash.c ****         else
1084:../drivers/fsl_flash.c ****         {
1085:../drivers/fsl_flash.c ****         }
1086:../drivers/fsl_flash.c **** 
1087:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1088:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1089:../drivers/fsl_flash.c **** 
1090:../drivers/fsl_flash.c ****         /* checking for the success of command execution */
1091:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1092:../drivers/fsl_flash.c ****         {
1093:../drivers/fsl_flash.c ****             break;
1094:../drivers/fsl_flash.c ****         }
1095:../drivers/fsl_flash.c ****         else
1096:../drivers/fsl_flash.c ****         {
1097:../drivers/fsl_flash.c ****             /* update start address for next iteration */
1098:../drivers/fsl_flash.c ****             start += flashOperationInfo.blockWriteUnitSize;
1099:../drivers/fsl_flash.c **** 
1100:../drivers/fsl_flash.c ****             /* update lengthInBytes for next iteration */
1101:../drivers/fsl_flash.c ****             lengthInBytes -= flashOperationInfo.blockWriteUnitSize;
1102:../drivers/fsl_flash.c ****         }
1103:../drivers/fsl_flash.c ****     }
1104:../drivers/fsl_flash.c **** 
1105:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1106:../drivers/fsl_flash.c **** 
1107:../drivers/fsl_flash.c ****     return (returnCode);
1108:../drivers/fsl_flash.c **** }
1109:../drivers/fsl_flash.c **** 
1110:../drivers/fsl_flash.c **** status_t FLASH_ProgramOnce(flash_config_t *config, uint32_t index, uint32_t *src, uint32_t lengthIn
1111:../drivers/fsl_flash.c **** {
1112:../drivers/fsl_flash.c ****     status_t returnCode;
1113:../drivers/fsl_flash.c **** 
1114:../drivers/fsl_flash.c ****     if ((config == NULL) || (src == NULL))
1115:../drivers/fsl_flash.c ****     {
1116:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1117:../drivers/fsl_flash.c ****     }
1118:../drivers/fsl_flash.c **** 
1119:../drivers/fsl_flash.c ****     /* pass paramters to FTFx */
1120:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_PROGRAM_ONCE, index, 0xFFFFU);
1121:../drivers/fsl_flash.c **** 
1122:../drivers/fsl_flash.c ****     kFCCOBx[1] = *src;
1123:../drivers/fsl_flash.c **** 
1124:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
1125:../drivers/fsl_flash.c ****  * to avoid a pointless comparison of unsigned int to 0 compiler warning */
1126:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT
1127:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT
1128:../drivers/fsl_flash.c ****     if (((index == FLASH_PROGRAM_ONCE_MIN_ID_8BYTES) ||
1129:../drivers/fsl_flash.c ****          /* Range check */
1130:../drivers/fsl_flash.c ****          ((index >= FLASH_PROGRAM_ONCE_MIN_ID_8BYTES + 1) && (index <= FLASH_PROGRAM_ONCE_MAX_ID_8B
1131:../drivers/fsl_flash.c ****         (lengthInBytes == 8))
1132:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT */
1133:../drivers/fsl_flash.c ****     {
1134:../drivers/fsl_flash.c ****         kFCCOBx[2] = *(src + 1);
1135:../drivers/fsl_flash.c ****     }
1136:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT */
1137:../drivers/fsl_flash.c **** 
1138:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1139:../drivers/fsl_flash.c **** 
1140:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1141:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1142:../drivers/fsl_flash.c **** 
1143:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1144:../drivers/fsl_flash.c **** 
1145:../drivers/fsl_flash.c ****     return returnCode;
1146:../drivers/fsl_flash.c **** }
1147:../drivers/fsl_flash.c **** 
1148:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD) && FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD
1149:../drivers/fsl_flash.c **** status_t FLASH_ProgramSection(flash_config_t *config, uint32_t start, uint32_t *src, uint32_t lengt
1150:../drivers/fsl_flash.c **** {
1151:../drivers/fsl_flash.c ****     status_t returnCode;
1152:../drivers/fsl_flash.c ****     uint32_t sectorSize;
1153:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1154:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1155:../drivers/fsl_flash.c ****     bool needSwitchFlexRamMode = false;
1156:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1157:../drivers/fsl_flash.c **** 
1158:../drivers/fsl_flash.c ****     if (src == NULL)
1159:../drivers/fsl_flash.c ****     {
1160:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1161:../drivers/fsl_flash.c ****     }
1162:../drivers/fsl_flash.c **** 
1163:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1164:../drivers/fsl_flash.c **** 
1165:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1166:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectionCmdAddre
1167:../drivers/fsl_flash.c ****     if (returnCode)
1168:../drivers/fsl_flash.c ****     {
1169:../drivers/fsl_flash.c ****         return returnCode;
1170:../drivers/fsl_flash.c ****     }
1171:../drivers/fsl_flash.c **** 
1172:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1173:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
1174:../drivers/fsl_flash.c **** 
1175:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1176:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1177:../drivers/fsl_flash.c ****     if (!(FTFx->FCNFG & FTFx_FCNFG_RAMRDY_MASK))
1178:../drivers/fsl_flash.c ****     {
1179:../drivers/fsl_flash.c ****         needSwitchFlexRamMode = true;
1180:../drivers/fsl_flash.c **** 
1181:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableAsRam);
1182:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1183:../drivers/fsl_flash.c ****         {
1184:../drivers/fsl_flash.c ****             return kStatus_FLASH_SetFlexramAsRamError;
1185:../drivers/fsl_flash.c ****         }
1186:../drivers/fsl_flash.c ****     }
1187:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1188:../drivers/fsl_flash.c **** 
1189:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1190:../drivers/fsl_flash.c **** 
1191:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1192:../drivers/fsl_flash.c ****     {
1193:../drivers/fsl_flash.c ****         /* Make sure the write operation doesn't span two sectors */
1194:../drivers/fsl_flash.c ****         uint32_t endAddressOfCurrentSector = ALIGN_UP(start, sectorSize);
1195:../drivers/fsl_flash.c ****         uint32_t lengthTobeProgrammedOfCurrentSector;
1196:../drivers/fsl_flash.c ****         uint32_t currentOffset = 0;
1197:../drivers/fsl_flash.c **** 
1198:../drivers/fsl_flash.c ****         if (endAddressOfCurrentSector == start)
1199:../drivers/fsl_flash.c ****         {
1200:../drivers/fsl_flash.c ****             endAddressOfCurrentSector += sectorSize;
1201:../drivers/fsl_flash.c ****         }
1202:../drivers/fsl_flash.c **** 
1203:../drivers/fsl_flash.c ****         if (lengthInBytes + start > endAddressOfCurrentSector)
1204:../drivers/fsl_flash.c ****         {
1205:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector = endAddressOfCurrentSector - start;
1206:../drivers/fsl_flash.c ****         }
1207:../drivers/fsl_flash.c ****         else
1208:../drivers/fsl_flash.c ****         {
1209:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector = lengthInBytes;
1210:../drivers/fsl_flash.c ****         }
1211:../drivers/fsl_flash.c **** 
1212:../drivers/fsl_flash.c ****         /* Program Current Sector */
1213:../drivers/fsl_flash.c ****         while (lengthTobeProgrammedOfCurrentSector > 0)
1214:../drivers/fsl_flash.c ****         {
1215:../drivers/fsl_flash.c ****             /* Make sure the program size doesn't exceeds Acceleration RAM size */
1216:../drivers/fsl_flash.c ****             uint32_t programSizeOfCurrentPass;
1217:../drivers/fsl_flash.c ****             uint32_t numberOfPhases;
1218:../drivers/fsl_flash.c **** 
1219:../drivers/fsl_flash.c ****             if (lengthTobeProgrammedOfCurrentSector > kFLASH_AccelerationRamSize)
1220:../drivers/fsl_flash.c ****             {
1221:../drivers/fsl_flash.c ****                 programSizeOfCurrentPass = kFLASH_AccelerationRamSize;
1222:../drivers/fsl_flash.c ****             }
1223:../drivers/fsl_flash.c ****             else
1224:../drivers/fsl_flash.c ****             {
1225:../drivers/fsl_flash.c ****                 programSizeOfCurrentPass = lengthTobeProgrammedOfCurrentSector;
1226:../drivers/fsl_flash.c ****             }
1227:../drivers/fsl_flash.c **** 
1228:../drivers/fsl_flash.c ****             /* Copy data to FlexRAM */
1229:../drivers/fsl_flash.c ****             memcpy((void *)FSL_FEATURE_FLASH_FLEX_RAM_START_ADDRESS, src + currentOffset / 4, progr
1230:../drivers/fsl_flash.c ****             /* Set start address of the data to be programmed */
1231:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_SECTION, start + currentOffset);
1232:../drivers/fsl_flash.c ****             /* Set program size in terms of FEATURE_FLASH_SECTION_CMD_ADDRESS_ALIGMENT */
1233:../drivers/fsl_flash.c ****             numberOfPhases = programSizeOfCurrentPass / flashOperationInfo.sectionCmdAddressAligmen
1234:../drivers/fsl_flash.c **** 
1235:../drivers/fsl_flash.c ****             kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_2(numberOfPhases, 0xFFFFU);
1236:../drivers/fsl_flash.c **** 
1237:../drivers/fsl_flash.c ****             /* Peform command sequence */
1238:../drivers/fsl_flash.c ****             returnCode = flash_command_sequence(config);
1239:../drivers/fsl_flash.c **** 
1240:../drivers/fsl_flash.c ****             if (returnCode != kStatus_FLASH_Success)
1241:../drivers/fsl_flash.c ****             {
1242:../drivers/fsl_flash.c ****                 flash_cache_clear(config);
1243:../drivers/fsl_flash.c ****                 return returnCode;
1244:../drivers/fsl_flash.c ****             }
1245:../drivers/fsl_flash.c **** 
1246:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector -= programSizeOfCurrentPass;
1247:../drivers/fsl_flash.c ****             currentOffset += programSizeOfCurrentPass;
1248:../drivers/fsl_flash.c ****         }
1249:../drivers/fsl_flash.c **** 
1250:../drivers/fsl_flash.c ****         src += currentOffset / 4;
1251:../drivers/fsl_flash.c ****         start += currentOffset;
1252:../drivers/fsl_flash.c ****         lengthInBytes -= currentOffset;
1253:../drivers/fsl_flash.c ****     }
1254:../drivers/fsl_flash.c **** 
1255:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1256:../drivers/fsl_flash.c **** 
1257:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1258:../drivers/fsl_flash.c ****     /* Restore function of FlexRAM if needed. */
1259:../drivers/fsl_flash.c ****     if (needSwitchFlexRamMode)
1260:../drivers/fsl_flash.c ****     {
1261:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableForEepro
1262:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1263:../drivers/fsl_flash.c ****         {
1264:../drivers/fsl_flash.c ****             return kStatus_FLASH_RecoverFlexramAsEepromError;
1265:../drivers/fsl_flash.c ****         }
1266:../drivers/fsl_flash.c ****     }
1267:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1268:../drivers/fsl_flash.c **** 
1269:../drivers/fsl_flash.c ****     return returnCode;
1270:../drivers/fsl_flash.c **** }
1271:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD */
1272:../drivers/fsl_flash.c **** 
1273:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
1274:../drivers/fsl_flash.c **** status_t FLASH_EepromWrite(flash_config_t *config, uint32_t start, uint8_t *src, uint32_t lengthInB
1275:../drivers/fsl_flash.c **** {
1276:../drivers/fsl_flash.c ****     status_t returnCode;
1277:../drivers/fsl_flash.c ****     bool needSwitchFlexRamMode = false;
1278:../drivers/fsl_flash.c **** 
1279:../drivers/fsl_flash.c ****     if (config == NULL)
1280:../drivers/fsl_flash.c ****     {
1281:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1282:../drivers/fsl_flash.c ****     }
1283:../drivers/fsl_flash.c **** 
1284:../drivers/fsl_flash.c ****     /* Validates the range of the given address */
1285:../drivers/fsl_flash.c ****     if ((start < config->FlexRAMBlockBase) ||
1286:../drivers/fsl_flash.c ****         ((start + lengthInBytes) > (config->FlexRAMBlockBase + config->EEpromTotalSize)))
1287:../drivers/fsl_flash.c ****     {
1288:../drivers/fsl_flash.c ****         return kStatus_FLASH_AddressError;
1289:../drivers/fsl_flash.c ****     }
1290:../drivers/fsl_flash.c **** 
1291:../drivers/fsl_flash.c ****     returnCode = kStatus_FLASH_Success;
1292:../drivers/fsl_flash.c **** 
1293:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1294:../drivers/fsl_flash.c ****     if (!(FTFx->FCNFG & FTFx_FCNFG_EEERDY_MASK))
1295:../drivers/fsl_flash.c ****     {
1296:../drivers/fsl_flash.c ****         needSwitchFlexRamMode = true;
1297:../drivers/fsl_flash.c **** 
1298:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableForEepro
1299:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1300:../drivers/fsl_flash.c ****         {
1301:../drivers/fsl_flash.c ****             return kStatus_FLASH_SetFlexramAsEepromError;
1302:../drivers/fsl_flash.c ****         }
1303:../drivers/fsl_flash.c ****     }
1304:../drivers/fsl_flash.c **** 
1305:../drivers/fsl_flash.c ****     /* Write data to FlexRAM when it is used as EEPROM emulator */
1306:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1307:../drivers/fsl_flash.c ****     {
1308:../drivers/fsl_flash.c ****         if ((!(start & 0x3U)) && (lengthInBytes >= 4))
1309:../drivers/fsl_flash.c ****         {
1310:../drivers/fsl_flash.c ****             *(uint32_t *)start = *(uint32_t *)src;
1311:../drivers/fsl_flash.c ****             start += 4;
1312:../drivers/fsl_flash.c ****             src += 4;
1313:../drivers/fsl_flash.c ****             lengthInBytes -= 4;
1314:../drivers/fsl_flash.c ****         }
1315:../drivers/fsl_flash.c ****         else if ((!(start & 0x1U)) && (lengthInBytes >= 2))
1316:../drivers/fsl_flash.c ****         {
1317:../drivers/fsl_flash.c ****             *(uint16_t *)start = *(uint16_t *)src;
1318:../drivers/fsl_flash.c ****             start += 2;
1319:../drivers/fsl_flash.c ****             src += 2;
1320:../drivers/fsl_flash.c ****             lengthInBytes -= 2;
1321:../drivers/fsl_flash.c ****         }
1322:../drivers/fsl_flash.c ****         else
1323:../drivers/fsl_flash.c ****         {
1324:../drivers/fsl_flash.c ****             *(uint8_t *)start = *src;
1325:../drivers/fsl_flash.c ****             start += 1;
1326:../drivers/fsl_flash.c ****             src += 1;
1327:../drivers/fsl_flash.c ****             lengthInBytes -= 1;
1328:../drivers/fsl_flash.c ****         }
1329:../drivers/fsl_flash.c ****         /* Wait till EEERDY bit is set */
1330:../drivers/fsl_flash.c ****         while (!(FTFx->FCNFG & FTFx_FCNFG_EEERDY_MASK))
1331:../drivers/fsl_flash.c ****         {
1332:../drivers/fsl_flash.c ****         }
1333:../drivers/fsl_flash.c **** 
1334:../drivers/fsl_flash.c ****         /* Check for protection violation error */
1335:../drivers/fsl_flash.c ****         if (FTFx->FSTAT & FTFx_FSTAT_FPVIOL_MASK)
1336:../drivers/fsl_flash.c ****         {
1337:../drivers/fsl_flash.c ****             return kStatus_FLASH_ProtectionViolation;
1338:../drivers/fsl_flash.c ****         }
1339:../drivers/fsl_flash.c ****     }
1340:../drivers/fsl_flash.c **** 
1341:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1342:../drivers/fsl_flash.c ****     if (needSwitchFlexRamMode)
1343:../drivers/fsl_flash.c ****     {
1344:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableAsRam);
1345:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1346:../drivers/fsl_flash.c ****         {
1347:../drivers/fsl_flash.c ****             return kStatus_FLASH_RecoverFlexramAsRamError;
1348:../drivers/fsl_flash.c ****         }
1349:../drivers/fsl_flash.c ****     }
1350:../drivers/fsl_flash.c **** 
1351:../drivers/fsl_flash.c ****     return returnCode;
1352:../drivers/fsl_flash.c **** }
1353:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
1354:../drivers/fsl_flash.c **** 
1355:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
1356:../drivers/fsl_flash.c **** status_t FLASH_ReadResource(
1357:../drivers/fsl_flash.c ****     flash_config_t *config, uint32_t start, uint32_t *dst, uint32_t lengthInBytes, flash_read_resou
1358:../drivers/fsl_flash.c **** {
1359:../drivers/fsl_flash.c ****     status_t returnCode;
1360:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1361:../drivers/fsl_flash.c **** 
1362:../drivers/fsl_flash.c ****     if ((config == NULL) || (dst == NULL))
1363:../drivers/fsl_flash.c ****     {
1364:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1365:../drivers/fsl_flash.c ****     }
1366:../drivers/fsl_flash.c **** 
1367:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1368:../drivers/fsl_flash.c **** 
1369:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1370:../drivers/fsl_flash.c ****     returnCode =
1371:../drivers/fsl_flash.c ****         flash_check_resource_range(start, lengthInBytes, flashOperationInfo.resourceCmdAddressAligm
1372:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
1373:../drivers/fsl_flash.c ****     {
1374:../drivers/fsl_flash.c ****         return returnCode;
1375:../drivers/fsl_flash.c ****     }
1376:../drivers/fsl_flash.c **** 
1377:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1378:../drivers/fsl_flash.c ****     {
1379:../drivers/fsl_flash.c ****         /* preparing passing parameter */
1380:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_READ_RESOURCE, start);
1381:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
1382:../drivers/fsl_flash.c ****         {
1383:../drivers/fsl_flash.c ****             kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
1384:../drivers/fsl_flash.c ****         }
1385:../drivers/fsl_flash.c ****         else if (flashOperationInfo.resourceCmdAddressAligment == 8)
1386:../drivers/fsl_flash.c ****         {
1387:../drivers/fsl_flash.c ****             kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
1388:../drivers/fsl_flash.c ****         }
1389:../drivers/fsl_flash.c ****         else
1390:../drivers/fsl_flash.c ****         {
1391:../drivers/fsl_flash.c ****         }
1392:../drivers/fsl_flash.c **** 
1393:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1394:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1395:../drivers/fsl_flash.c **** 
1396:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1397:../drivers/fsl_flash.c ****         {
1398:../drivers/fsl_flash.c ****             break;
1399:../drivers/fsl_flash.c ****         }
1400:../drivers/fsl_flash.c **** 
1401:../drivers/fsl_flash.c ****         /* fetch data */
1402:../drivers/fsl_flash.c ****         *dst++ = kFCCOBx[1];
1403:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
1404:../drivers/fsl_flash.c ****         {
1405:../drivers/fsl_flash.c ****             *dst++ = kFCCOBx[2];
1406:../drivers/fsl_flash.c ****         }
1407:../drivers/fsl_flash.c ****         /* update start address for next iteration */
1408:../drivers/fsl_flash.c ****         start += flashOperationInfo.resourceCmdAddressAligment;
1409:../drivers/fsl_flash.c ****         /* update lengthInBytes for next iteration */
1410:../drivers/fsl_flash.c ****         lengthInBytes -= flashOperationInfo.resourceCmdAddressAligment;
1411:../drivers/fsl_flash.c ****     }
1412:../drivers/fsl_flash.c **** 
1413:../drivers/fsl_flash.c ****     return (returnCode);
1414:../drivers/fsl_flash.c **** }
1415:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
1416:../drivers/fsl_flash.c **** 
1417:../drivers/fsl_flash.c **** status_t FLASH_ReadOnce(flash_config_t *config, uint32_t index, uint32_t *dst, uint32_t lengthInByt
1418:../drivers/fsl_flash.c **** {
1419:../drivers/fsl_flash.c ****     status_t returnCode;
1420:../drivers/fsl_flash.c **** 
1421:../drivers/fsl_flash.c ****     if ((config == NULL) || (dst == NULL))
1422:../drivers/fsl_flash.c ****     {
1423:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1424:../drivers/fsl_flash.c ****     }
1425:../drivers/fsl_flash.c **** 
1426:../drivers/fsl_flash.c ****     /* pass paramters to FTFx */
1427:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_READ_ONCE, index, 0xFFFFU);
1428:../drivers/fsl_flash.c **** 
1429:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1430:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1431:../drivers/fsl_flash.c **** 
1432:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success == returnCode)
1433:../drivers/fsl_flash.c ****     {
1434:../drivers/fsl_flash.c ****         *dst = kFCCOBx[1];
1435:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
1436:../drivers/fsl_flash.c ****  *       to avoid a pointless comparison of unsigned int to 0 compiler warning */
1437:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT
1438:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT
1439:../drivers/fsl_flash.c ****         if (((index == FLASH_PROGRAM_ONCE_MIN_ID_8BYTES) ||
1440:../drivers/fsl_flash.c ****              /* Range check */
1441:../drivers/fsl_flash.c ****              ((index >= FLASH_PROGRAM_ONCE_MIN_ID_8BYTES + 1) && (index <= FLASH_PROGRAM_ONCE_MAX_I
1442:../drivers/fsl_flash.c ****             (lengthInBytes == 8))
1443:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT */
1444:../drivers/fsl_flash.c ****         {
1445:../drivers/fsl_flash.c ****             *(dst + 1) = kFCCOBx[2];
1446:../drivers/fsl_flash.c ****         }
1447:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT */
1448:../drivers/fsl_flash.c ****     }
1449:../drivers/fsl_flash.c **** 
1450:../drivers/fsl_flash.c ****     return returnCode;
1451:../drivers/fsl_flash.c **** }
1452:../drivers/fsl_flash.c **** 
1453:../drivers/fsl_flash.c **** status_t FLASH_GetSecurityState(flash_config_t *config, flash_security_state_t *state)
1454:../drivers/fsl_flash.c **** {
1455:../drivers/fsl_flash.c ****     /* store data read from flash register */
1456:../drivers/fsl_flash.c ****     uint8_t registerValue;
1457:../drivers/fsl_flash.c **** 
1458:../drivers/fsl_flash.c ****     if ((config == NULL) || (state == NULL))
1459:../drivers/fsl_flash.c ****     {
1460:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1461:../drivers/fsl_flash.c ****     }
1462:../drivers/fsl_flash.c **** 
1463:../drivers/fsl_flash.c ****     /* Get flash security register value */
1464:../drivers/fsl_flash.c ****     registerValue = FTFx->FSEC;
1465:../drivers/fsl_flash.c **** 
1466:../drivers/fsl_flash.c ****     /* check the status of the flash security bits in the security register */
1467:../drivers/fsl_flash.c ****     if (FLASH_SECURITY_STATE_UNSECURED == (registerValue & FTFx_FSEC_SEC_MASK))
1468:../drivers/fsl_flash.c ****     {
1469:../drivers/fsl_flash.c ****         /* Flash in unsecured state */
1470:../drivers/fsl_flash.c ****         *state = kFLASH_SecurityStateNotSecure;
1471:../drivers/fsl_flash.c ****     }
1472:../drivers/fsl_flash.c ****     else
1473:../drivers/fsl_flash.c ****     {
1474:../drivers/fsl_flash.c ****         /* Flash in secured state
1475:../drivers/fsl_flash.c ****          * check for backdoor key security enable bit */
1476:../drivers/fsl_flash.c ****         if (FLASH_SECURITY_STATE_KEYEN == (registerValue & FTFx_FSEC_KEYEN_MASK))
1477:../drivers/fsl_flash.c ****         {
1478:../drivers/fsl_flash.c ****             /* Backdoor key security enabled */
1479:../drivers/fsl_flash.c ****             *state = kFLASH_SecurityStateBackdoorEnabled;
1480:../drivers/fsl_flash.c ****         }
1481:../drivers/fsl_flash.c ****         else
1482:../drivers/fsl_flash.c ****         {
1483:../drivers/fsl_flash.c ****             /* Backdoor key security disabled */
1484:../drivers/fsl_flash.c ****             *state = kFLASH_SecurityStateBackdoorDisabled;
1485:../drivers/fsl_flash.c ****         }
1486:../drivers/fsl_flash.c ****     }
1487:../drivers/fsl_flash.c **** 
1488:../drivers/fsl_flash.c ****     return (kStatus_FLASH_Success);
1489:../drivers/fsl_flash.c **** }
1490:../drivers/fsl_flash.c **** 
1491:../drivers/fsl_flash.c **** status_t FLASH_SecurityBypass(flash_config_t *config, const uint8_t *backdoorKey)
1492:../drivers/fsl_flash.c **** {
1493:../drivers/fsl_flash.c ****     uint8_t registerValue; /* registerValue */
1494:../drivers/fsl_flash.c ****     status_t returnCode;   /* return code variable */
1495:../drivers/fsl_flash.c **** 
1496:../drivers/fsl_flash.c ****     if ((config == NULL) || (backdoorKey == NULL))
1497:../drivers/fsl_flash.c ****     {
1498:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1499:../drivers/fsl_flash.c ****     }
1500:../drivers/fsl_flash.c **** 
1501:../drivers/fsl_flash.c ****     /* set the default return code as kStatus_Success */
1502:../drivers/fsl_flash.c ****     returnCode = kStatus_FLASH_Success;
1503:../drivers/fsl_flash.c **** 
1504:../drivers/fsl_flash.c ****     /* Get flash security register value */
1505:../drivers/fsl_flash.c ****     registerValue = FTFx->FSEC;
1506:../drivers/fsl_flash.c **** 
1507:../drivers/fsl_flash.c ****     /* Check to see if flash is in secure state (any state other than 0x2)
1508:../drivers/fsl_flash.c ****      * If not, then skip this since flash is not secure */
1509:../drivers/fsl_flash.c ****     if (0x02 != (registerValue & 0x03))
1510:../drivers/fsl_flash.c ****     {
1511:../drivers/fsl_flash.c ****         /* preparing passing parameter to erase a flash block */
1512:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_SECURITY_BY_PASS, 0xFFFFFFU);
1513:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[0], backdoorKey[1], backdoorKey[2], bac
1514:../drivers/fsl_flash.c ****         kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[4], backdoorKey[5], backdoorKey[6], bac
1515:../drivers/fsl_flash.c **** 
1516:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1517:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1518:../drivers/fsl_flash.c ****     }
1519:../drivers/fsl_flash.c **** 
1520:../drivers/fsl_flash.c ****     return (returnCode);
1521:../drivers/fsl_flash.c **** }
1522:../drivers/fsl_flash.c **** 
1523:../drivers/fsl_flash.c **** status_t FLASH_VerifyEraseAll(flash_config_t *config, flash_margin_value_t margin)
1524:../drivers/fsl_flash.c **** {
1525:../drivers/fsl_flash.c ****     if (config == NULL)
1526:../drivers/fsl_flash.c ****     {
1527:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1528:../drivers/fsl_flash.c ****     }
1529:../drivers/fsl_flash.c **** 
1530:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify all block command */
1531:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_VERIFY_ALL_BLOCK, margin, 0xFFFFU);
1532:../drivers/fsl_flash.c **** 
1533:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1534:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
1535:../drivers/fsl_flash.c **** }
1536:../drivers/fsl_flash.c **** 
1537:../drivers/fsl_flash.c **** status_t FLASH_VerifyErase(flash_config_t *config, uint32_t start, uint32_t lengthInBytes, flash_ma
1538:../drivers/fsl_flash.c **** {
1539:../drivers/fsl_flash.c ****     /* Check arguments. */
1540:../drivers/fsl_flash.c ****     uint32_t blockSize;
1541:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1542:../drivers/fsl_flash.c ****     uint32_t nextBlockStartAddress;
1543:../drivers/fsl_flash.c ****     uint32_t remainingBytes;
1544:../drivers/fsl_flash.c ****     status_t returnCode;
1545:../drivers/fsl_flash.c **** 
1546:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1547:../drivers/fsl_flash.c **** 
1548:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectionCmdAddre
1549:../drivers/fsl_flash.c ****     if (returnCode)
1550:../drivers/fsl_flash.c ****     {
1551:../drivers/fsl_flash.c ****         return returnCode;
1552:../drivers/fsl_flash.c ****     }
1553:../drivers/fsl_flash.c **** 
1554:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1555:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1556:../drivers/fsl_flash.c ****     blockSize = flashOperationInfo.activeBlockSize;
1557:../drivers/fsl_flash.c **** 
1558:../drivers/fsl_flash.c ****     nextBlockStartAddress = ALIGN_UP(start, blockSize);
1559:../drivers/fsl_flash.c ****     if (nextBlockStartAddress == start)
1560:../drivers/fsl_flash.c ****     {
1561:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
1562:../drivers/fsl_flash.c ****     }
1563:../drivers/fsl_flash.c **** 
1564:../drivers/fsl_flash.c ****     remainingBytes = lengthInBytes;
1565:../drivers/fsl_flash.c **** 
1566:../drivers/fsl_flash.c ****     while (remainingBytes)
1567:../drivers/fsl_flash.c ****     {
1568:../drivers/fsl_flash.c ****         uint32_t numberOfPhrases;
1569:../drivers/fsl_flash.c ****         uint32_t verifyLength = nextBlockStartAddress - start;
1570:../drivers/fsl_flash.c ****         if (verifyLength > remainingBytes)
1571:../drivers/fsl_flash.c ****         {
1572:../drivers/fsl_flash.c ****             verifyLength = remainingBytes;
1573:../drivers/fsl_flash.c ****         }
1574:../drivers/fsl_flash.c **** 
1575:../drivers/fsl_flash.c ****         numberOfPhrases = verifyLength / flashOperationInfo.sectionCmdAddressAligment;
1576:../drivers/fsl_flash.c **** 
1577:../drivers/fsl_flash.c ****         /* Fill in verify section command parameters. */
1578:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_VERIFY_SECTION, start);
1579:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
1580:../drivers/fsl_flash.c **** 
1581:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1582:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1583:../drivers/fsl_flash.c ****         if (returnCode)
1584:../drivers/fsl_flash.c ****         {
1585:../drivers/fsl_flash.c ****             return returnCode;
1586:../drivers/fsl_flash.c ****         }
1587:../drivers/fsl_flash.c **** 
1588:../drivers/fsl_flash.c ****         remainingBytes -= verifyLength;
1589:../drivers/fsl_flash.c ****         start += verifyLength;
1590:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
1591:../drivers/fsl_flash.c ****     }
1592:../drivers/fsl_flash.c **** 
1593:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
1594:../drivers/fsl_flash.c **** }
1595:../drivers/fsl_flash.c **** 
1596:../drivers/fsl_flash.c **** status_t FLASH_VerifyProgram(flash_config_t *config,
1597:../drivers/fsl_flash.c ****                              uint32_t start,
1598:../drivers/fsl_flash.c ****                              uint32_t lengthInBytes,
1599:../drivers/fsl_flash.c ****                              const uint32_t *expectedData,
1600:../drivers/fsl_flash.c ****                              flash_margin_value_t margin,
1601:../drivers/fsl_flash.c ****                              uint32_t *failedAddress,
1602:../drivers/fsl_flash.c ****                              uint32_t *failedData)
1603:../drivers/fsl_flash.c **** {
1604:../drivers/fsl_flash.c ****     status_t returnCode;
1605:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1606:../drivers/fsl_flash.c **** 
1607:../drivers/fsl_flash.c ****     if (expectedData == NULL)
1608:../drivers/fsl_flash.c ****     {
1609:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1610:../drivers/fsl_flash.c ****     }
1611:../drivers/fsl_flash.c **** 
1612:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1613:../drivers/fsl_flash.c **** 
1614:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.checkCmdAddress
1615:../drivers/fsl_flash.c ****     if (returnCode)
1616:../drivers/fsl_flash.c ****     {
1617:../drivers/fsl_flash.c ****         return returnCode;
1618:../drivers/fsl_flash.c ****     }
1619:../drivers/fsl_flash.c **** 
1620:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1621:../drivers/fsl_flash.c **** 
1622:../drivers/fsl_flash.c ****     while (lengthInBytes)
1623:../drivers/fsl_flash.c ****     {
1624:../drivers/fsl_flash.c ****         /* preparing passing parameter to program check the flash block */
1625:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_CHECK, start);
1626:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
1627:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
1628:../drivers/fsl_flash.c **** 
1629:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1630:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1631:../drivers/fsl_flash.c **** 
1632:../drivers/fsl_flash.c ****         /* checking for the success of command execution */
1633:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1634:../drivers/fsl_flash.c ****         {
1635:../drivers/fsl_flash.c ****             if (failedAddress)
1636:../drivers/fsl_flash.c ****             {
1637:../drivers/fsl_flash.c ****                 *failedAddress = start;
1638:../drivers/fsl_flash.c ****             }
1639:../drivers/fsl_flash.c ****             if (failedData)
1640:../drivers/fsl_flash.c ****             {
1641:../drivers/fsl_flash.c ****                 *failedData = 0;
1642:../drivers/fsl_flash.c ****             }
1643:../drivers/fsl_flash.c ****             break;
1644:../drivers/fsl_flash.c ****         }
1645:../drivers/fsl_flash.c **** 
1646:../drivers/fsl_flash.c ****         lengthInBytes -= flashOperationInfo.checkCmdAddressAligment;
1647:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
1648:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
1649:../drivers/fsl_flash.c ****     }
1650:../drivers/fsl_flash.c **** 
1651:../drivers/fsl_flash.c ****     return (returnCode);
1652:../drivers/fsl_flash.c **** }
1653:../drivers/fsl_flash.c **** 
1654:../drivers/fsl_flash.c **** status_t FLASH_VerifyEraseAllExecuteOnlySegments(flash_config_t *config, flash_margin_value_t margi
1655:../drivers/fsl_flash.c **** {
1656:../drivers/fsl_flash.c ****     if (config == NULL)
1657:../drivers/fsl_flash.c ****     {
1658:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1659:../drivers/fsl_flash.c ****     }
1660:../drivers/fsl_flash.c **** 
1661:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify erase all execute-only segments command */
1662:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_VERIFY_ALL_EXECUTE_ONLY_SEGMENT, margin, 0xFFFFU);
1663:../drivers/fsl_flash.c **** 
1664:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1665:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
1666:../drivers/fsl_flash.c **** }
1667:../drivers/fsl_flash.c **** 
1668:../drivers/fsl_flash.c **** status_t FLASH_IsProtected(flash_config_t *config,
1669:../drivers/fsl_flash.c ****                            uint32_t start,
1670:../drivers/fsl_flash.c ****                            uint32_t lengthInBytes,
1671:../drivers/fsl_flash.c ****                            flash_protection_state_t *protection_state)
1672:../drivers/fsl_flash.c **** {
1673:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
1674:../drivers/fsl_flash.c ****     uint32_t regionCheckedCounter; /* increments each time the flash address was checked for
1675:../drivers/fsl_flash.c ****                                     * protection status */
1676:../drivers/fsl_flash.c ****     uint32_t regionCounter;        /* incrementing variable used to increment through the flash
1677:../drivers/fsl_flash.c ****                                     * protection regions */
1678:../drivers/fsl_flash.c ****     uint32_t protectStatusCounter; /* increments each time a flash region was detected as protected
1679:../drivers/fsl_flash.c **** 
1680:../drivers/fsl_flash.c ****     uint8_t flashRegionProtectStatus[MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT]; /* array o
1681:../drivers/fsl_flash.c ****                                                                       * status for each
1682:../drivers/fsl_flash.c ****                                                                       * protection region */
1683:../drivers/fsl_flash.c ****     uint32_t flashRegionAddress[MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT +
1684:../drivers/fsl_flash.c ****                                 1];                /* array of the start addresses for each flash
1685:../drivers/fsl_flash.c ****                                  * protection region. Note this is REGION_COUNT+1
1686:../drivers/fsl_flash.c ****                                  * due to requiring the next start address after
1687:../drivers/fsl_flash.c ****                                  * the end of flash for loop-check purposes below */
1688:../drivers/fsl_flash.c ****     flash_protection_config_t flashProtectionInfo; /* flash protection information */
1689:../drivers/fsl_flash.c ****     status_t returnCode;
1690:../drivers/fsl_flash.c **** 
1691:../drivers/fsl_flash.c ****     if (protection_state == NULL)
1692:../drivers/fsl_flash.c ****     {
1693:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1694:../drivers/fsl_flash.c ****     }
1695:../drivers/fsl_flash.c **** 
1696:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1697:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, MAIN_FLASH_FEATURE_PFLASH_BLOCK_WR
1698:../drivers/fsl_flash.c ****     if (returnCode)
1699:../drivers/fsl_flash.c ****     {
1700:../drivers/fsl_flash.c ****         return returnCode;
1701:../drivers/fsl_flash.c ****     }
1702:../drivers/fsl_flash.c **** 
1703:../drivers/fsl_flash.c ****     /* Get necessary flash protection information. */
1704:../drivers/fsl_flash.c ****     returnCode = flash_get_protection_info(config, &flashProtectionInfo);
1705:../drivers/fsl_flash.c ****     if (returnCode)
1706:../drivers/fsl_flash.c ****     {
1707:../drivers/fsl_flash.c ****         return returnCode;
1708:../drivers/fsl_flash.c ****     }
1709:../drivers/fsl_flash.c **** 
1710:../drivers/fsl_flash.c ****     /* calculating Flash end address */
1711:../drivers/fsl_flash.c ****     endAddress = start + lengthInBytes;
1712:../drivers/fsl_flash.c **** 
1713:../drivers/fsl_flash.c ****     /* populate the flashRegionAddress array with the start address of each flash region */
1714:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1715:../drivers/fsl_flash.c **** 
1716:../drivers/fsl_flash.c ****     /* populate up to 33rd element of array, this is the next address after end of flash array */
1717:../drivers/fsl_flash.c ****     while (regionCounter <= flashProtectionInfo.regionCount)
1718:../drivers/fsl_flash.c ****     {
1719:../drivers/fsl_flash.c ****         flashRegionAddress[regionCounter] =
1720:../drivers/fsl_flash.c ****             flashProtectionInfo.regionBase + flashProtectionInfo.regionSize * regionCounter;
1721:../drivers/fsl_flash.c ****         regionCounter++;
1722:../drivers/fsl_flash.c ****     }
1723:../drivers/fsl_flash.c **** 
1724:../drivers/fsl_flash.c ****     /* populate flashRegionProtectStatus array with status information
1725:../drivers/fsl_flash.c ****      * Protection status for each region is stored in the FPROT[3:0] registers
1726:../drivers/fsl_flash.c ****      * Each bit represents one region of flash
1727:../drivers/fsl_flash.c ****      * 4 registers * 8-bits-per-register = 32-bits (32-regions)
1728:../drivers/fsl_flash.c ****      * The convention is:
1729:../drivers/fsl_flash.c ****      * FPROT3[bit 0] is the first protection region (start of flash memory)
1730:../drivers/fsl_flash.c ****      * FPROT0[bit 7] is the last protection region (end of flash memory)
1731:../drivers/fsl_flash.c ****      * regionCounter is used to determine which FPROT[3:0] register to check for protection status
1732:../drivers/fsl_flash.c ****      * Note: FPROT=1 means NOT protected, FPROT=0 means protected */
1733:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1734:../drivers/fsl_flash.c ****     while (regionCounter < flashProtectionInfo.regionCount)
1735:../drivers/fsl_flash.c ****     {
1736:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
1737:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
1738:../drivers/fsl_flash.c ****         {
1739:../drivers/fsl_flash.c ****             if (regionCounter < 8)
1740:../drivers/fsl_flash.c ****             {
1741:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTSL_REG >> regionCounter) & (0x
1742:../drivers/fsl_flash.c ****             }
1743:../drivers/fsl_flash.c ****             else if ((regionCounter >= 8) && (regionCounter < 16))
1744:../drivers/fsl_flash.c ****             {
1745:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTSH_REG >> (regionCounter - 8))
1746:../drivers/fsl_flash.c ****             }
1747:../drivers/fsl_flash.c ****             else
1748:../drivers/fsl_flash.c ****             {
1749:../drivers/fsl_flash.c ****                 break;
1750:../drivers/fsl_flash.c ****             }
1751:../drivers/fsl_flash.c ****         }
1752:../drivers/fsl_flash.c ****         else
1753:../drivers/fsl_flash.c **** #endif
1754:../drivers/fsl_flash.c ****         {
1755:../drivers/fsl_flash.c ****             /* Note: So far protection region count may be 16/20/24/32/64 */
1756:../drivers/fsl_flash.c ****             if (regionCounter < 8)
1757:../drivers/fsl_flash.c ****             {
1758:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL3_REG >> regionCounter) & (0x
1759:../drivers/fsl_flash.c ****             }
1760:../drivers/fsl_flash.c ****             else if ((regionCounter >= 8) && (regionCounter < 16))
1761:../drivers/fsl_flash.c ****             {
1762:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL2_REG >> (regionCounter - 8))
1763:../drivers/fsl_flash.c ****             }
1764:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && (MAIN_FLASH_FEATURE_PFLASH_PROTEC
1765:../drivers/fsl_flash.c **** #if (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 20)
1766:../drivers/fsl_flash.c ****             else if ((regionCounter >= 16) && (regionCounter < 20))
1767:../drivers/fsl_flash.c ****             {
1768:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL1_REG >> (regionCounter - 16)
1769:../drivers/fsl_flash.c ****             }
1770:../drivers/fsl_flash.c **** #else
1771:../drivers/fsl_flash.c ****             else if ((regionCounter >= 16) && (regionCounter < 24))
1772:../drivers/fsl_flash.c ****             {
1773:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL1_REG >> (regionCounter - 16)
1774:../drivers/fsl_flash.c ****             }
1775:../drivers/fsl_flash.c **** #endif /* (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 20) */
1776:../drivers/fsl_flash.c **** #endif
1777:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && (MAIN_FLASH_FEATURE_PFLASH_PROTEC
1778:../drivers/fsl_flash.c ****             else if ((regionCounter >= 24) && (regionCounter < 32))
1779:../drivers/fsl_flash.c ****             {
1780:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL0_REG >> (regionCounter - 24)
1781:../drivers/fsl_flash.c ****             }
1782:../drivers/fsl_flash.c **** #endif
1783:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && \
1784:../drivers/fsl_flash.c ****     (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 64)
1785:../drivers/fsl_flash.c ****             else if (regionCounter < 40)
1786:../drivers/fsl_flash.c ****             {
1787:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH3_REG >> (regionCounter - 32)
1788:../drivers/fsl_flash.c ****             }
1789:../drivers/fsl_flash.c ****             else if (regionCounter < 48)
1790:../drivers/fsl_flash.c ****             {
1791:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH2_REG >> (regionCounter - 40)
1792:../drivers/fsl_flash.c ****             }
1793:../drivers/fsl_flash.c ****             else if (regionCounter < 56)
1794:../drivers/fsl_flash.c ****             {
1795:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH1_REG >> (regionCounter - 48)
1796:../drivers/fsl_flash.c ****             }
1797:../drivers/fsl_flash.c ****             else if (regionCounter < 64)
1798:../drivers/fsl_flash.c ****             {
1799:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH0_REG >> (regionCounter - 56)
1800:../drivers/fsl_flash.c ****             }
1801:../drivers/fsl_flash.c **** #endif
1802:../drivers/fsl_flash.c ****             else
1803:../drivers/fsl_flash.c ****             {
1804:../drivers/fsl_flash.c ****                 break;
1805:../drivers/fsl_flash.c ****             }
1806:../drivers/fsl_flash.c ****         }
1807:../drivers/fsl_flash.c **** 
1808:../drivers/fsl_flash.c ****         regionCounter++;
1809:../drivers/fsl_flash.c ****     }
1810:../drivers/fsl_flash.c **** 
1811:../drivers/fsl_flash.c ****     /* loop through the flash regions and check
1812:../drivers/fsl_flash.c ****      * desired flash address range for protection status
1813:../drivers/fsl_flash.c ****      * loop stops when it is detected that start has exceeded the endAddress */
1814:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1815:../drivers/fsl_flash.c ****     regionCheckedCounter = 0;
1816:../drivers/fsl_flash.c ****     protectStatusCounter = 0; /* make sure protectStatusCounter is initialized to 0 first */
1817:../drivers/fsl_flash.c ****     while (start < endAddress)
1818:../drivers/fsl_flash.c ****     {
1819:../drivers/fsl_flash.c ****         /* check to see if the address falls within this protection region
1820:../drivers/fsl_flash.c ****          * Note that if the entire flash is to be checked, the last protection
1821:../drivers/fsl_flash.c ****          * region checked would consist of the last protection start address and
1822:../drivers/fsl_flash.c ****          * the start address following the end of flash */
1823:../drivers/fsl_flash.c ****         if ((start >= flashRegionAddress[regionCounter]) && (start < flashRegionAddress[regionCount
1824:../drivers/fsl_flash.c ****         {
1825:../drivers/fsl_flash.c ****             /* increment regionCheckedCounter to indicate this region was checked */
1826:../drivers/fsl_flash.c ****             regionCheckedCounter++;
1827:../drivers/fsl_flash.c **** 
1828:../drivers/fsl_flash.c ****             /* check the protection status of this region
1829:../drivers/fsl_flash.c ****              * Note: FPROT=1 means NOT protected, FPROT=0 means protected */
1830:../drivers/fsl_flash.c ****             if (!flashRegionProtectStatus[regionCounter])
1831:../drivers/fsl_flash.c ****             {
1832:../drivers/fsl_flash.c ****                 /* increment protectStatusCounter to indicate this region is protected */
1833:../drivers/fsl_flash.c ****                 protectStatusCounter++;
1834:../drivers/fsl_flash.c ****             }
1835:../drivers/fsl_flash.c ****             start += flashProtectionInfo.regionSize; /* increment to an address within the next reg
1836:../drivers/fsl_flash.c ****         }
1837:../drivers/fsl_flash.c ****         regionCounter++; /* increment regionCounter to check for the next flash protection region *
1838:../drivers/fsl_flash.c ****     }
1839:../drivers/fsl_flash.c **** 
1840:../drivers/fsl_flash.c ****     /* if protectStatusCounter == 0, then no region of the desired flash region is protected */
1841:../drivers/fsl_flash.c ****     if (protectStatusCounter == 0)
1842:../drivers/fsl_flash.c ****     {
1843:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateUnprotected;
1844:../drivers/fsl_flash.c ****     }
1845:../drivers/fsl_flash.c ****     /* if protectStatusCounter == regionCheckedCounter, then each region checked was protected */
1846:../drivers/fsl_flash.c ****     else if (protectStatusCounter == regionCheckedCounter)
1847:../drivers/fsl_flash.c ****     {
1848:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateProtected;
1849:../drivers/fsl_flash.c ****     }
1850:../drivers/fsl_flash.c ****     /* if protectStatusCounter != regionCheckedCounter, then protection status is mixed
1851:../drivers/fsl_flash.c ****      * In other words, some regions are protected while others are unprotected */
1852:../drivers/fsl_flash.c ****     else
1853:../drivers/fsl_flash.c ****     {
1854:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateMixed;
1855:../drivers/fsl_flash.c ****     }
1856:../drivers/fsl_flash.c **** 
1857:../drivers/fsl_flash.c ****     return (returnCode);
1858:../drivers/fsl_flash.c **** }
1859:../drivers/fsl_flash.c **** 
1860:../drivers/fsl_flash.c **** status_t FLASH_IsExecuteOnly(flash_config_t *config,
1861:../drivers/fsl_flash.c ****                              uint32_t start,
1862:../drivers/fsl_flash.c ****                              uint32_t lengthInBytes,
1863:../drivers/fsl_flash.c ****                              flash_execute_only_access_state_t *access_state)
1864:../drivers/fsl_flash.c **** {
1865:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
1866:../drivers/fsl_flash.c ****     flash_access_config_t flashAccessInfo; /* flash Execute-Only information */
1867:../drivers/fsl_flash.c **** #endif                                     /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
1868:../drivers/fsl_flash.c ****     status_t returnCode;
1869:../drivers/fsl_flash.c **** 
1870:../drivers/fsl_flash.c ****     if (access_state == NULL)
1871:../drivers/fsl_flash.c ****     {
1872:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1873:../drivers/fsl_flash.c ****     }
1874:../drivers/fsl_flash.c **** 
1875:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1876:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, MAIN_FLASH_FEATURE_PFLASH_BLOCK_WR
1877:../drivers/fsl_flash.c ****     if (returnCode)
1878:../drivers/fsl_flash.c ****     {
1879:../drivers/fsl_flash.c ****         return returnCode;
1880:../drivers/fsl_flash.c ****     }
1881:../drivers/fsl_flash.c **** 
1882:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
1883:../drivers/fsl_flash.c ****     /* Get necessary flash Execute-Only information. */
1884:../drivers/fsl_flash.c ****     returnCode = flash_get_access_info(config, &flashAccessInfo);
1885:../drivers/fsl_flash.c ****     if (returnCode)
1886:../drivers/fsl_flash.c ****     {
1887:../drivers/fsl_flash.c ****         return returnCode;
1888:../drivers/fsl_flash.c ****     }
1889:../drivers/fsl_flash.c **** 
1890:../drivers/fsl_flash.c ****     {
1891:../drivers/fsl_flash.c ****         uint32_t executeOnlySegmentCounter = 0;
1892:../drivers/fsl_flash.c **** 
1893:../drivers/fsl_flash.c ****         /* calculating end address */
1894:../drivers/fsl_flash.c ****         uint32_t endAddress = start + lengthInBytes;
1895:../drivers/fsl_flash.c **** 
1896:../drivers/fsl_flash.c ****         /* Aligning start address and end address */
1897:../drivers/fsl_flash.c ****         uint32_t alignedStartAddress = ALIGN_DOWN(start, flashAccessInfo.SegmentSize);
1898:../drivers/fsl_flash.c ****         uint32_t alignedEndAddress = ALIGN_UP(endAddress, flashAccessInfo.SegmentSize);
1899:../drivers/fsl_flash.c **** 
1900:../drivers/fsl_flash.c ****         uint32_t segmentIndex = 0;
1901:../drivers/fsl_flash.c ****         uint32_t maxSupportedExecuteOnlySegmentCount =
1902:../drivers/fsl_flash.c ****             (alignedEndAddress - alignedStartAddress) / flashAccessInfo.SegmentSize;
1903:../drivers/fsl_flash.c **** 
1904:../drivers/fsl_flash.c ****         while (start < endAddress)
1905:../drivers/fsl_flash.c ****         {
1906:../drivers/fsl_flash.c ****             uint32_t xacc;
1907:../drivers/fsl_flash.c ****             bool isInvalidSegmentIndex = false;
1908:../drivers/fsl_flash.c **** 
1909:../drivers/fsl_flash.c ****             segmentIndex = (start - flashAccessInfo.SegmentBase) / flashAccessInfo.SegmentSize;
1910:../drivers/fsl_flash.c **** 
1911:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
1912:../drivers/fsl_flash.c ****             if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
1913:../drivers/fsl_flash.c ****             {
1914:../drivers/fsl_flash.c ****                 /* For secondary flash, The two XACCS registers allow up to 16 restricted segments 
1915:../drivers/fsl_flash.c ****                  */
1916:../drivers/fsl_flash.c ****                 if (segmentIndex < 8)
1917:../drivers/fsl_flash.c ****                 {
1918:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint8_t *)&FTFx_XACCSL_REG;
1919:../drivers/fsl_flash.c ****                 }
1920:../drivers/fsl_flash.c ****                 else if (segmentIndex < flashAccessInfo.SegmentCount)
1921:../drivers/fsl_flash.c ****                 {
1922:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint8_t *)&FTFx_XACCSH_REG;
1923:../drivers/fsl_flash.c ****                     segmentIndex -= 8;
1924:../drivers/fsl_flash.c ****                 }
1925:../drivers/fsl_flash.c ****                 else
1926:../drivers/fsl_flash.c ****                 {
1927:../drivers/fsl_flash.c ****                     isInvalidSegmentIndex = true;
1928:../drivers/fsl_flash.c ****                 }
1929:../drivers/fsl_flash.c ****             }
1930:../drivers/fsl_flash.c ****             else
1931:../drivers/fsl_flash.c **** #endif
1932:../drivers/fsl_flash.c ****             {
1933:../drivers/fsl_flash.c ****                 /* For primary flash, The eight XACC registers allow up to 64 restricted segments o
1934:../drivers/fsl_flash.c ****                  */
1935:../drivers/fsl_flash.c ****                 if (segmentIndex < 32)
1936:../drivers/fsl_flash.c ****                 {
1937:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint32_t *)&FTFx_XACCL3_REG;
1938:../drivers/fsl_flash.c ****                 }
1939:../drivers/fsl_flash.c ****                 else if (segmentIndex < flashAccessInfo.SegmentCount)
1940:../drivers/fsl_flash.c ****                 {
1941:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint32_t *)&FTFx_XACCH3_REG;
1942:../drivers/fsl_flash.c ****                     segmentIndex -= 32;
1943:../drivers/fsl_flash.c ****                 }
1944:../drivers/fsl_flash.c ****                 else
1945:../drivers/fsl_flash.c ****                 {
1946:../drivers/fsl_flash.c ****                     isInvalidSegmentIndex = true;
1947:../drivers/fsl_flash.c ****                 }
1948:../drivers/fsl_flash.c ****             }
1949:../drivers/fsl_flash.c **** 
1950:../drivers/fsl_flash.c ****             if (isInvalidSegmentIndex)
1951:../drivers/fsl_flash.c ****             {
1952:../drivers/fsl_flash.c ****                 break;
1953:../drivers/fsl_flash.c ****             }
1954:../drivers/fsl_flash.c **** 
1955:../drivers/fsl_flash.c ****             /* Determine if this address range is in a execute-only protection flash segment. */
1956:../drivers/fsl_flash.c ****             if ((~xacc) & (1u << segmentIndex))
1957:../drivers/fsl_flash.c ****             {
1958:../drivers/fsl_flash.c ****                 executeOnlySegmentCounter++;
1959:../drivers/fsl_flash.c ****             }
1960:../drivers/fsl_flash.c **** 
1961:../drivers/fsl_flash.c ****             start += flashAccessInfo.SegmentSize;
1962:../drivers/fsl_flash.c ****         }
1963:../drivers/fsl_flash.c **** 
1964:../drivers/fsl_flash.c ****         if (executeOnlySegmentCounter < 1u)
1965:../drivers/fsl_flash.c ****         {
1966:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateUnLimited;
1967:../drivers/fsl_flash.c ****         }
1968:../drivers/fsl_flash.c ****         else if (executeOnlySegmentCounter < maxSupportedExecuteOnlySegmentCount)
1969:../drivers/fsl_flash.c ****         {
1970:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateMixed;
1971:../drivers/fsl_flash.c ****         }
1972:../drivers/fsl_flash.c ****         else
1973:../drivers/fsl_flash.c ****         {
1974:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateExecuteOnly;
1975:../drivers/fsl_flash.c ****         }
1976:../drivers/fsl_flash.c ****     }
1977:../drivers/fsl_flash.c **** #else
1978:../drivers/fsl_flash.c ****     *access_state = kFLASH_AccessStateUnLimited;
1979:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
1980:../drivers/fsl_flash.c **** 
1981:../drivers/fsl_flash.c ****     return (returnCode);
1982:../drivers/fsl_flash.c **** }
1983:../drivers/fsl_flash.c **** 
1984:../drivers/fsl_flash.c **** status_t FLASH_GetProperty(flash_config_t *config, flash_property_tag_t whichProperty, uint32_t *va
1985:../drivers/fsl_flash.c **** {
1986:../drivers/fsl_flash.c ****     if ((config == NULL) || (value == NULL))
1987:../drivers/fsl_flash.c ****     {
1988:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1989:../drivers/fsl_flash.c ****     }
1990:../drivers/fsl_flash.c **** 
1991:../drivers/fsl_flash.c ****     switch (whichProperty)
1992:../drivers/fsl_flash.c ****     {
1993:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashSectorSize:
1994:../drivers/fsl_flash.c ****             *value = config->PFlashSectorSize;
1995:../drivers/fsl_flash.c ****             break;
1996:../drivers/fsl_flash.c **** 
1997:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashTotalSize:
1998:../drivers/fsl_flash.c ****             *value = config->PFlashTotalSize;
1999:../drivers/fsl_flash.c ****             break;
2000:../drivers/fsl_flash.c **** 
2001:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockSize:
2002:../drivers/fsl_flash.c ****             *value = config->PFlashTotalSize / (uint32_t)config->PFlashBlockCount;
2003:../drivers/fsl_flash.c ****             break;
2004:../drivers/fsl_flash.c **** 
2005:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockCount:
2006:../drivers/fsl_flash.c ****             *value = (uint32_t)config->PFlashBlockCount;
2007:../drivers/fsl_flash.c ****             break;
2008:../drivers/fsl_flash.c **** 
2009:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockBaseAddr:
2010:../drivers/fsl_flash.c ****             *value = config->PFlashBlockBase;
2011:../drivers/fsl_flash.c ****             break;
2012:../drivers/fsl_flash.c **** 
2013:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashFacSupport:
2014:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL)
2015:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL;
2016:../drivers/fsl_flash.c **** #else
2017:../drivers/fsl_flash.c ****             *value = 0;
2018:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
2019:../drivers/fsl_flash.c ****             break;
2020:../drivers/fsl_flash.c **** 
2021:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentSize:
2022:../drivers/fsl_flash.c ****             *value = config->PFlashAccessSegmentSize;
2023:../drivers/fsl_flash.c ****             break;
2024:../drivers/fsl_flash.c **** 
2025:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentCount:
2026:../drivers/fsl_flash.c ****             *value = config->PFlashAccessSegmentCount;
2027:../drivers/fsl_flash.c ****             break;
2028:../drivers/fsl_flash.c **** 
2029:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamBlockBaseAddr:
2030:../drivers/fsl_flash.c ****             *value = config->FlexRAMBlockBase;
2031:../drivers/fsl_flash.c ****             break;
2032:../drivers/fsl_flash.c **** 
2033:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamTotalSize:
2034:../drivers/fsl_flash.c ****             *value = config->FlexRAMTotalSize;
2035:../drivers/fsl_flash.c ****             break;
2036:../drivers/fsl_flash.c **** 
2037:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2038:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashSectorSize:
2039:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SECTOR_SIZE;
2040:../drivers/fsl_flash.c ****             break;
2041:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashTotalSize:
2042:../drivers/fsl_flash.c ****             *value = config->DFlashTotalSize;
2043:../drivers/fsl_flash.c ****             break;
2044:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockSize:
2045:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SIZE;
2046:../drivers/fsl_flash.c ****             break;
2047:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockCount:
2048:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_COUNT;
2049:../drivers/fsl_flash.c ****             break;
2050:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockBaseAddr:
2051:../drivers/fsl_flash.c ****             *value = config->DFlashBlockBase;
2052:../drivers/fsl_flash.c ****             break;
2053:../drivers/fsl_flash.c ****         case kFLASH_PropertyEepromTotalSize:
2054:../drivers/fsl_flash.c ****             *value = config->EEpromTotalSize;
2055:../drivers/fsl_flash.c ****             break;
2056:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2057:../drivers/fsl_flash.c **** 
2058:../drivers/fsl_flash.c ****         default: /* catch inputs that are not recognized */
2059:../drivers/fsl_flash.c ****             return kStatus_FLASH_UnknownProperty;
2060:../drivers/fsl_flash.c ****     }
2061:../drivers/fsl_flash.c **** 
2062:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2063:../drivers/fsl_flash.c **** }
2064:../drivers/fsl_flash.c **** 
2065:../drivers/fsl_flash.c **** status_t FLASH_SetProperty(flash_config_t *config, flash_property_tag_t whichProperty, uint32_t val
2066:../drivers/fsl_flash.c **** {
2067:../drivers/fsl_flash.c ****     status_t status = kStatus_FLASH_Success;
2068:../drivers/fsl_flash.c **** 
2069:../drivers/fsl_flash.c ****     if (config == NULL)
2070:../drivers/fsl_flash.c ****     {
2071:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2072:../drivers/fsl_flash.c ****     }
2073:../drivers/fsl_flash.c **** 
2074:../drivers/fsl_flash.c ****     switch (whichProperty)
2075:../drivers/fsl_flash.c ****     {
2076:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2077:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlashMemoryIndex:
2078:../drivers/fsl_flash.c ****             if ((value != (uint32_t)kFLASH_MemoryIndexPrimaryFlash) &&
2079:../drivers/fsl_flash.c ****                 (value != (uint32_t)kFLASH_MemoryIndexSecondaryFlash))
2080:../drivers/fsl_flash.c ****             {
2081:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidPropertyValue;
2082:../drivers/fsl_flash.c ****             }
2083:../drivers/fsl_flash.c ****             config->FlashMemoryIndex = (uint8_t)value;
2084:../drivers/fsl_flash.c ****             break;
2085:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
2086:../drivers/fsl_flash.c **** 
2087:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashSectorSize:
2088:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashTotalSize:
2089:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockSize:
2090:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockCount:
2091:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockBaseAddr:
2092:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashFacSupport:
2093:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentSize:
2094:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentCount:
2095:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamBlockBaseAddr:
2096:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamTotalSize:
2097:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2098:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashSectorSize:
2099:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashTotalSize:
2100:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockSize:
2101:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockCount:
2102:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockBaseAddr:
2103:../drivers/fsl_flash.c ****         case kFLASH_PropertyEepromTotalSize:
2104:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2105:../drivers/fsl_flash.c ****             status = kStatus_FLASH_ReadOnlyProperty;
2106:../drivers/fsl_flash.c ****             break;
2107:../drivers/fsl_flash.c ****         default: /* catch inputs that are not recognized */
2108:../drivers/fsl_flash.c ****             status = kStatus_FLASH_UnknownProperty;
2109:../drivers/fsl_flash.c ****             break;
2110:../drivers/fsl_flash.c ****     }
2111:../drivers/fsl_flash.c **** 
2112:../drivers/fsl_flash.c ****     return status;
2113:../drivers/fsl_flash.c **** }
2114:../drivers/fsl_flash.c **** 
2115:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
2116:../drivers/fsl_flash.c **** status_t FLASH_SetFlexramFunction(flash_config_t *config, flash_flexram_function_option_t option)
2117:../drivers/fsl_flash.c **** {
2118:../drivers/fsl_flash.c ****     status_t status;
2119:../drivers/fsl_flash.c **** 
2120:../drivers/fsl_flash.c ****     if (config == NULL)
2121:../drivers/fsl_flash.c ****     {
2122:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2123:../drivers/fsl_flash.c ****     }
2124:../drivers/fsl_flash.c **** 
2125:../drivers/fsl_flash.c ****     status = flasn_check_flexram_function_option_range(option);
2126:../drivers/fsl_flash.c ****     if (status != kStatus_FLASH_Success)
2127:../drivers/fsl_flash.c ****     {
2128:../drivers/fsl_flash.c ****         return status;
2129:../drivers/fsl_flash.c ****     }
2130:../drivers/fsl_flash.c **** 
2131:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify all block command */
2132:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_SET_FLEXRAM_FUNCTION, option, 0xFFFFU);
2133:../drivers/fsl_flash.c **** 
2134:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
2135:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
2136:../drivers/fsl_flash.c **** }
2137:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
2138:../drivers/fsl_flash.c **** 
2139:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
2140:../drivers/fsl_flash.c **** status_t FLASH_SwapControl(flash_config_t *config,
2141:../drivers/fsl_flash.c ****                            uint32_t address,
2142:../drivers/fsl_flash.c ****                            flash_swap_control_option_t option,
2143:../drivers/fsl_flash.c ****                            flash_swap_state_config_t *returnInfo)
2144:../drivers/fsl_flash.c **** {
2145:../drivers/fsl_flash.c ****     status_t returnCode;
2146:../drivers/fsl_flash.c **** 
2147:../drivers/fsl_flash.c ****     if ((config == NULL) || (returnInfo == NULL))
2148:../drivers/fsl_flash.c ****     {
2149:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2150:../drivers/fsl_flash.c ****     }
2151:../drivers/fsl_flash.c **** 
2152:../drivers/fsl_flash.c ****     if (address & (FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT - 1))
2153:../drivers/fsl_flash.c ****     {
2154:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
2155:../drivers/fsl_flash.c ****     }
2156:../drivers/fsl_flash.c **** 
2157:../drivers/fsl_flash.c ****     /* Make sure address provided is in the lower half of Program flash but not in the Flash Config
2158:../drivers/fsl_flash.c ****     if ((address >= (config->PFlashTotalSize / 2)) ||
2159:../drivers/fsl_flash.c ****         ((address >= kFLASH_ConfigAreaStart) && (address <= kFLASH_ConfigAreaEnd)))
2160:../drivers/fsl_flash.c ****     {
2161:../drivers/fsl_flash.c ****         return kStatus_FLASH_SwapIndicatorAddressError;
2162:../drivers/fsl_flash.c ****     }
2163:../drivers/fsl_flash.c **** 
2164:../drivers/fsl_flash.c ****     /* Check the option. */
2165:../drivers/fsl_flash.c ****     returnCode = flash_check_swap_control_option(option);
2166:../drivers/fsl_flash.c ****     if (returnCode)
2167:../drivers/fsl_flash.c ****     {
2168:../drivers/fsl_flash.c ****         return returnCode;
2169:../drivers/fsl_flash.c ****     }
2170:../drivers/fsl_flash.c **** 
2171:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_SWAP_CONTROL, address);
2172:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
2173:../drivers/fsl_flash.c **** 
2174:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
2175:../drivers/fsl_flash.c **** 
2176:../drivers/fsl_flash.c ****     returnInfo->flashSwapState = (flash_swap_state_t)FTFx_FCCOB5_REG;
2177:../drivers/fsl_flash.c ****     returnInfo->currentSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB6_REG;
2178:../drivers/fsl_flash.c ****     returnInfo->nextSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB7_REG;
2179:../drivers/fsl_flash.c **** 
2180:../drivers/fsl_flash.c ****     return returnCode;
2181:../drivers/fsl_flash.c **** }
2182:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
2183:../drivers/fsl_flash.c **** 
2184:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
2185:../drivers/fsl_flash.c **** status_t FLASH_Swap(flash_config_t *config, uint32_t address, flash_swap_function_option_t option)
2186:../drivers/fsl_flash.c **** {
2187:../drivers/fsl_flash.c ****     flash_swap_state_config_t returnInfo;
2188:../drivers/fsl_flash.c ****     status_t returnCode;
2189:../drivers/fsl_flash.c **** 
2190:../drivers/fsl_flash.c ****     memset(&returnInfo, 0xFFU, sizeof(returnInfo));
2191:../drivers/fsl_flash.c **** 
2192:../drivers/fsl_flash.c ****     do
2193:../drivers/fsl_flash.c ****     {
2194:../drivers/fsl_flash.c ****         returnCode = FLASH_SwapControl(config, address, kFLASH_SwapControlOptionReportStatus, &retu
2195:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
2196:../drivers/fsl_flash.c ****         {
2197:../drivers/fsl_flash.c ****             return returnCode;
2198:../drivers/fsl_flash.c ****         }
2199:../drivers/fsl_flash.c **** 
2200:../drivers/fsl_flash.c ****         if (kFLASH_SwapFunctionOptionDisable == option)
2201:../drivers/fsl_flash.c ****         {
2202:../drivers/fsl_flash.c ****             if (returnInfo.flashSwapState == kFLASH_SwapStateDisabled)
2203:../drivers/fsl_flash.c ****             {
2204:../drivers/fsl_flash.c ****                 return kStatus_FLASH_Success;
2205:../drivers/fsl_flash.c ****             }
2206:../drivers/fsl_flash.c ****             else if (returnInfo.flashSwapState == kFLASH_SwapStateUninitialized)
2207:../drivers/fsl_flash.c ****             {
2208:../drivers/fsl_flash.c ****                 /* The swap system changed to the DISABLED state with Program flash block 0
2209:../drivers/fsl_flash.c ****                  * located at relative flash address 0x0_0000 */
2210:../drivers/fsl_flash.c ****                 returnCode = FLASH_SwapControl(config, address, kFLASH_SwapControlOptionDisableSyst
2211:../drivers/fsl_flash.c ****             }
2212:../drivers/fsl_flash.c ****             else
2213:../drivers/fsl_flash.c ****             {
2214:../drivers/fsl_flash.c ****                 /* Swap disable should be requested only when swap system is in the uninitialized s
2215:../drivers/fsl_flash.c ****                 return kStatus_FLASH_SwapSystemNotInUninitialized;
2216:../drivers/fsl_flash.c ****             }
2217:../drivers/fsl_flash.c ****         }
2218:../drivers/fsl_flash.c ****         else
2219:../drivers/fsl_flash.c ****         {
2220:../drivers/fsl_flash.c ****             /* When first swap: the initial swap state is Uninitialized, flash swap inidicator addr
2221:../drivers/fsl_flash.c ****              *    the swap procedure should be Uninitialized -> Update-Erased -> Complete.
2222:../drivers/fsl_flash.c ****              * After the first swap has been completed, the flash swap inidicator address cannot be
2223:../drivers/fsl_flash.c ****              *    unless EraseAllBlocks command is issued, the swap procedure is changed to Update 
2224:../drivers/fsl_flash.c ****              *    Complete. */
2225:../drivers/fsl_flash.c ****             switch (returnInfo.flashSwapState)
2226:../drivers/fsl_flash.c ****             {
2227:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUninitialized:
2228:../drivers/fsl_flash.c ****                     /* If current swap mode is Uninitialized, Initialize Swap to Initialized/READY 
2229:../drivers/fsl_flash.c ****                     returnCode =
2230:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionIntializeSystem,
2231:../drivers/fsl_flash.c ****                     break;
2232:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateReady:
2233:../drivers/fsl_flash.c ****                     /* Validate whether the address provided to the swap system is matched to
2234:../drivers/fsl_flash.c ****                      * swap indicator address in the IFR */
2235:../drivers/fsl_flash.c ****                     returnCode = flash_validate_swap_indicator_address(config, address);
2236:../drivers/fsl_flash.c ****                     if (returnCode == kStatus_FLASH_Success)
2237:../drivers/fsl_flash.c ****                     {
2238:../drivers/fsl_flash.c ****                         /* If current swap mode is Initialized/Ready, Initialize Swap to UPDATE sta
2239:../drivers/fsl_flash.c ****                         returnCode =
2240:../drivers/fsl_flash.c ****                             FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInUpdateS
2241:../drivers/fsl_flash.c ****                     }
2242:../drivers/fsl_flash.c ****                     break;
2243:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUpdate:
2244:../drivers/fsl_flash.c ****                     /* If current swap mode is Update, Erase indicator sector in non active block
2245:../drivers/fsl_flash.c ****                      * to proceed swap system to update-erased state */
2246:../drivers/fsl_flash.c ****                     returnCode = FLASH_Erase(config, address + (config->PFlashTotalSize >> 1),
2247:../drivers/fsl_flash.c ****                                              FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT, 
2248:../drivers/fsl_flash.c ****                     break;
2249:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUpdateErased:
2250:../drivers/fsl_flash.c ****                     /* If current swap mode is Update or Update-Erased, progress Swap to COMPLETE S
2251:../drivers/fsl_flash.c ****                     returnCode =
2252:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInCompleteSta
2253:../drivers/fsl_flash.c ****                     break;
2254:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateComplete:
2255:../drivers/fsl_flash.c ****                     break;
2256:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateDisabled:
2257:../drivers/fsl_flash.c ****                     /* When swap system is in disabled state, We need to clear swap system back to 
2258:../drivers/fsl_flash.c ****                      * by issuing EraseAllBlocks command */
2259:../drivers/fsl_flash.c ****                     returnCode = kStatus_FLASH_SwapSystemNotInUninitialized;
2260:../drivers/fsl_flash.c ****                     break;
2261:../drivers/fsl_flash.c ****                 default:
2262:../drivers/fsl_flash.c ****                     returnCode = kStatus_FLASH_InvalidArgument;
2263:../drivers/fsl_flash.c ****                     break;
2264:../drivers/fsl_flash.c ****             }
2265:../drivers/fsl_flash.c ****         }
2266:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
2267:../drivers/fsl_flash.c ****         {
2268:../drivers/fsl_flash.c ****             break;
2269:../drivers/fsl_flash.c ****         }
2270:../drivers/fsl_flash.c ****     } while (!((kFLASH_SwapStateComplete == returnInfo.flashSwapState) && (kFLASH_SwapFunctionOptio
2271:../drivers/fsl_flash.c **** 
2272:../drivers/fsl_flash.c ****     return returnCode;
2273:../drivers/fsl_flash.c **** }
2274:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
2275:../drivers/fsl_flash.c **** 
2276:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION_CMD) && FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION
2277:../drivers/fsl_flash.c **** status_t FLASH_ProgramPartition(flash_config_t *config,
2278:../drivers/fsl_flash.c ****                                 flash_partition_flexram_load_option_t option,
2279:../drivers/fsl_flash.c ****                                 uint32_t eepromDataSizeCode,
2280:../drivers/fsl_flash.c ****                                 uint32_t flexnvmPartitionCode)
2281:../drivers/fsl_flash.c **** {
2282:../drivers/fsl_flash.c ****     status_t returnCode;
2283:../drivers/fsl_flash.c **** 
2284:../drivers/fsl_flash.c ****     if (config == NULL)
2285:../drivers/fsl_flash.c ****     {
2286:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2287:../drivers/fsl_flash.c ****     }
2288:../drivers/fsl_flash.c **** 
2289:../drivers/fsl_flash.c ****     /* eepromDataSizeCode[7:6], flexnvmPartitionCode[7:4] should be all 1'b0
2290:../drivers/fsl_flash.c ****      *  or it will cause access error. */
2291:../drivers/fsl_flash.c ****     /* eepromDataSizeCode &= 0x3FU;  */
2292:../drivers/fsl_flash.c ****     /* flexnvmPartitionCode &= 0x0FU; */
2293:../drivers/fsl_flash.c **** 
2294:../drivers/fsl_flash.c ****     /* preparing passing parameter to program the flash block */
2295:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_2_1(FTFx_PROGRAM_PARTITION, 0xFFFFU, option);
2296:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_2(eepromDataSizeCode, flexnvmPartitionCode, 0xFFFFU);
2297:../drivers/fsl_flash.c **** 
2298:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
2299:../drivers/fsl_flash.c **** 
2300:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
2301:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
2302:../drivers/fsl_flash.c **** 
2303:../drivers/fsl_flash.c ****     flash_cache_clear(config);
2304:../drivers/fsl_flash.c **** 
2305:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2306:../drivers/fsl_flash.c ****     /* Data flash IFR will be updated by program partition command during reset sequence,
2307:../drivers/fsl_flash.c ****      * so we just set reserved values for partitioned FlexNVM size here */
2308:../drivers/fsl_flash.c ****     config->EEpromTotalSize = FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED;
2309:../drivers/fsl_flash.c ****     config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
2310:../drivers/fsl_flash.c **** #endif
2311:../drivers/fsl_flash.c **** 
2312:../drivers/fsl_flash.c ****     return (returnCode);
2313:../drivers/fsl_flash.c **** }
2314:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION_CMD */
2315:../drivers/fsl_flash.c **** 
2316:../drivers/fsl_flash.c **** status_t FLASH_PflashSetProtection(flash_config_t *config, pflash_protection_status_t *protectStatu
2317:../drivers/fsl_flash.c **** {
2318:../drivers/fsl_flash.c ****     if (config == NULL)
2319:../drivers/fsl_flash.c ****     {
2320:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2321:../drivers/fsl_flash.c ****     }
2322:../drivers/fsl_flash.c **** 
2323:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
2324:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
2325:../drivers/fsl_flash.c ****     {
2326:../drivers/fsl_flash.c ****         *kFPROTSL = protectStatus->valueLow32b.prots16b.protsl;
2327:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.prots16b.protsl != *kFPROTSL)
2328:../drivers/fsl_flash.c ****         {
2329:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2330:../drivers/fsl_flash.c ****         }
2331:../drivers/fsl_flash.c **** 
2332:../drivers/fsl_flash.c ****         *kFPROTSH = protectStatus->valueLow32b.prots16b.protsh;
2333:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.prots16b.protsh != *kFPROTSH)
2334:../drivers/fsl_flash.c ****         {
2335:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2336:../drivers/fsl_flash.c ****         }
2337:../drivers/fsl_flash.c ****     }
2338:../drivers/fsl_flash.c ****     else
2339:../drivers/fsl_flash.c **** #endif
2340:../drivers/fsl_flash.c ****     {
2341:../drivers/fsl_flash.c ****         *kFPROTL = protectStatus->valueLow32b.protl32b;
2342:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.protl32b != *kFPROTL)
2343:../drivers/fsl_flash.c ****         {
2344:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2345:../drivers/fsl_flash.c ****         }
2346:../drivers/fsl_flash.c **** 
2347:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
2348:../drivers/fsl_flash.c ****         *kFPROTH = protectStatus->valueHigh32b.proth32b;
2349:../drivers/fsl_flash.c ****         if (protectStatus->valueHigh32b.proth32b != *kFPROTH)
2350:../drivers/fsl_flash.c ****         {
2351:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2352:../drivers/fsl_flash.c ****         }
2353:../drivers/fsl_flash.c **** #endif
2354:../drivers/fsl_flash.c ****     }
2355:../drivers/fsl_flash.c **** 
2356:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2357:../drivers/fsl_flash.c **** }
2358:../drivers/fsl_flash.c **** 
2359:../drivers/fsl_flash.c **** status_t FLASH_PflashGetProtection(flash_config_t *config, pflash_protection_status_t *protectStatu
2360:../drivers/fsl_flash.c **** {
2361:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2362:../drivers/fsl_flash.c ****     {
2363:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2364:../drivers/fsl_flash.c ****     }
2365:../drivers/fsl_flash.c **** 
2366:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
2367:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
2368:../drivers/fsl_flash.c ****     {
2369:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.prots16b.protsl = *kFPROTSL;
2370:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.prots16b.protsh = *kFPROTSH;
2371:../drivers/fsl_flash.c ****     }
2372:../drivers/fsl_flash.c ****     else
2373:../drivers/fsl_flash.c **** #endif
2374:../drivers/fsl_flash.c ****     {
2375:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.protl32b = *kFPROTL;
2376:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
2377:../drivers/fsl_flash.c ****         protectStatus->valueHigh32b.proth32b = *kFPROTH;
2378:../drivers/fsl_flash.c **** #endif
2379:../drivers/fsl_flash.c ****     }
2380:../drivers/fsl_flash.c **** 
2381:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2382:../drivers/fsl_flash.c **** }
2383:../drivers/fsl_flash.c **** 
2384:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2385:../drivers/fsl_flash.c **** status_t FLASH_DflashSetProtection(flash_config_t *config, uint8_t protectStatus)
2386:../drivers/fsl_flash.c **** {
2387:../drivers/fsl_flash.c ****     if (config == NULL)
2388:../drivers/fsl_flash.c ****     {
2389:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2390:../drivers/fsl_flash.c ****     }
2391:../drivers/fsl_flash.c **** 
2392:../drivers/fsl_flash.c ****     if ((config->DFlashTotalSize == 0) || (config->DFlashTotalSize == FLEX_NVM_DFLASH_SIZE_FOR_DEPA
2393:../drivers/fsl_flash.c ****     {
2394:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2395:../drivers/fsl_flash.c ****     }
2396:../drivers/fsl_flash.c **** 
2397:../drivers/fsl_flash.c ****     FTFx->FDPROT = protectStatus;
2398:../drivers/fsl_flash.c **** 
2399:../drivers/fsl_flash.c ****     if (FTFx->FDPROT != protectStatus)
2400:../drivers/fsl_flash.c ****     {
2401:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2402:../drivers/fsl_flash.c ****     }
2403:../drivers/fsl_flash.c **** 
2404:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2405:../drivers/fsl_flash.c **** }
2406:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2407:../drivers/fsl_flash.c **** 
2408:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2409:../drivers/fsl_flash.c **** status_t FLASH_DflashGetProtection(flash_config_t *config, uint8_t *protectStatus)
2410:../drivers/fsl_flash.c **** {
2411:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2412:../drivers/fsl_flash.c ****     {
2413:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2414:../drivers/fsl_flash.c ****     }
2415:../drivers/fsl_flash.c **** 
2416:../drivers/fsl_flash.c ****     if ((config->DFlashTotalSize == 0) || (config->DFlashTotalSize == FLEX_NVM_DFLASH_SIZE_FOR_DEPA
2417:../drivers/fsl_flash.c ****     {
2418:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2419:../drivers/fsl_flash.c ****     }
2420:../drivers/fsl_flash.c **** 
2421:../drivers/fsl_flash.c ****     *protectStatus = FTFx->FDPROT;
2422:../drivers/fsl_flash.c **** 
2423:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2424:../drivers/fsl_flash.c **** }
2425:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2426:../drivers/fsl_flash.c **** 
2427:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2428:../drivers/fsl_flash.c **** status_t FLASH_EepromSetProtection(flash_config_t *config, uint8_t protectStatus)
2429:../drivers/fsl_flash.c **** {
2430:../drivers/fsl_flash.c ****     if (config == NULL)
2431:../drivers/fsl_flash.c ****     {
2432:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2433:../drivers/fsl_flash.c ****     }
2434:../drivers/fsl_flash.c **** 
2435:../drivers/fsl_flash.c ****     if ((config->EEpromTotalSize == 0) || (config->EEpromTotalSize == FLEX_NVM_EEPROM_SIZE_FOR_EEES
2436:../drivers/fsl_flash.c ****     {
2437:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2438:../drivers/fsl_flash.c ****     }
2439:../drivers/fsl_flash.c **** 
2440:../drivers/fsl_flash.c ****     FTFx->FEPROT = protectStatus;
2441:../drivers/fsl_flash.c **** 
2442:../drivers/fsl_flash.c ****     if (FTFx->FEPROT != protectStatus)
2443:../drivers/fsl_flash.c ****     {
2444:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2445:../drivers/fsl_flash.c ****     }
2446:../drivers/fsl_flash.c **** 
2447:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2448:../drivers/fsl_flash.c **** }
2449:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2450:../drivers/fsl_flash.c **** 
2451:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2452:../drivers/fsl_flash.c **** status_t FLASH_EepromGetProtection(flash_config_t *config, uint8_t *protectStatus)
2453:../drivers/fsl_flash.c **** {
2454:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2455:../drivers/fsl_flash.c ****     {
2456:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2457:../drivers/fsl_flash.c ****     }
2458:../drivers/fsl_flash.c **** 
2459:../drivers/fsl_flash.c ****     if ((config->EEpromTotalSize == 0) || (config->EEpromTotalSize == FLEX_NVM_EEPROM_SIZE_FOR_EEES
2460:../drivers/fsl_flash.c ****     {
2461:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2462:../drivers/fsl_flash.c ****     }
2463:../drivers/fsl_flash.c **** 
2464:../drivers/fsl_flash.c ****     *protectStatus = FTFx->FEPROT;
2465:../drivers/fsl_flash.c **** 
2466:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2467:../drivers/fsl_flash.c **** }
2468:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2469:../drivers/fsl_flash.c **** 
2470:../drivers/fsl_flash.c **** status_t FLASH_PflashSetPrefetchSpeculation(flash_prefetch_speculation_status_t *speculationStatus)
2471:../drivers/fsl_flash.c **** {
2472:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
2473:../drivers/fsl_flash.c ****     {
2474:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2475:../drivers/fsl_flash.c **** #if defined(MCM)
2476:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MCM->PLACR;
2477:../drivers/fsl_flash.c **** #elif defined(MCM0)
2478:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MCM0->PLACR;
2479:../drivers/fsl_flash.c **** #endif
2480:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionDisable)
2481:../drivers/fsl_flash.c ****         {
2482:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2483:../drivers/fsl_flash.c ****             {
2484:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidSpeculationOption;
2485:../drivers/fsl_flash.c ****             }
2486:../drivers/fsl_flash.c ****             else
2487:../drivers/fsl_flash.c ****             {
2488:../drivers/fsl_flash.c ****                 *regBase |= MCM_PLACR_DFCS_MASK;
2489:../drivers/fsl_flash.c ****             }
2490:../drivers/fsl_flash.c ****         }
2491:../drivers/fsl_flash.c ****         else
2492:../drivers/fsl_flash.c ****         {
2493:../drivers/fsl_flash.c ****             *regBase &= ~MCM_PLACR_DFCS_MASK;
2494:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2495:../drivers/fsl_flash.c ****             {
2496:../drivers/fsl_flash.c ****                 *regBase |= MCM_PLACR_EFDS_MASK;
2497:../drivers/fsl_flash.c ****             }
2498:../drivers/fsl_flash.c ****             else
2499:../drivers/fsl_flash.c ****             {
2500:../drivers/fsl_flash.c ****                 *regBase &= ~MCM_PLACR_EFDS_MASK;
2501:../drivers/fsl_flash.c ****             }
2502:../drivers/fsl_flash.c ****         }
2503:../drivers/fsl_flash.c ****     }
2504:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2505:../drivers/fsl_flash.c ****     {
2506:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2507:../drivers/fsl_flash.c ****         uint32_t b0dpeMask, b0ipeMask;
2508:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_B0DPE_MASK)
2509:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2510:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB01CR_B0DPE_MASK;
2511:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB01CR_B0IPE_MASK;
2512:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_B0DPE_MASK)
2513:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2514:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
2515:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB0CR_B0IPE_MASK;
2516:../drivers/fsl_flash.c **** #endif
2517:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionEnable)
2518:../drivers/fsl_flash.c ****         {
2519:../drivers/fsl_flash.c ****             *regBase |= b0ipeMask;
2520:../drivers/fsl_flash.c ****         }
2521:../drivers/fsl_flash.c ****         else
2522:../drivers/fsl_flash.c ****         {
2523:../drivers/fsl_flash.c ****             *regBase &= ~b0ipeMask;
2524:../drivers/fsl_flash.c ****         }
2525:../drivers/fsl_flash.c ****         if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2526:../drivers/fsl_flash.c ****         {
2527:../drivers/fsl_flash.c ****             *regBase |= b0dpeMask;
2528:../drivers/fsl_flash.c ****         }
2529:../drivers/fsl_flash.c ****         else
2530:../drivers/fsl_flash.c ****         {
2531:../drivers/fsl_flash.c ****             *regBase &= ~b0dpeMask;
2532:../drivers/fsl_flash.c ****         }
2533:../drivers/fsl_flash.c **** 
2534:../drivers/fsl_flash.c **** /* Invalidate Prefetch Speculation Buffer */
2535:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2536:../drivers/fsl_flash.c ****         FMC->PFB01CR |= FMC_PFB01CR_S_INV_MASK;
2537:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2538:../drivers/fsl_flash.c ****         FMC->PFB01CR |= FMC_PFB01CR_S_B_INV_MASK;
2539:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2540:../drivers/fsl_flash.c ****         FMC->PFB0CR |= FMC_PFB0CR_S_INV_MASK;
2541:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2542:../drivers/fsl_flash.c ****         FMC->PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
2543:../drivers/fsl_flash.c **** #endif
2544:../drivers/fsl_flash.c ****     }
2545:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2546:../drivers/fsl_flash.c ****     {
2547:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2548:../drivers/fsl_flash.c ****         uint32_t flashSpeculationMask, dataPrefetchMask;
2549:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR0_REG;
2550:../drivers/fsl_flash.c ****         flashSpeculationMask = MSCM_OCMDR_OCMC1_DFCS_MASK;
2551:../drivers/fsl_flash.c ****         dataPrefetchMask = MSCM_OCMDR_OCMC1_DFDS_MASK;
2552:../drivers/fsl_flash.c **** 
2553:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionDisable)
2554:../drivers/fsl_flash.c ****         {
2555:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2556:../drivers/fsl_flash.c ****             {
2557:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidSpeculationOption;
2558:../drivers/fsl_flash.c ****             }
2559:../drivers/fsl_flash.c ****             else
2560:../drivers/fsl_flash.c ****             {
2561:../drivers/fsl_flash.c ****                 *regBase |= flashSpeculationMask;
2562:../drivers/fsl_flash.c ****             }
2563:../drivers/fsl_flash.c ****         }
2564:../drivers/fsl_flash.c ****         else
2565:../drivers/fsl_flash.c ****         {
2566:../drivers/fsl_flash.c ****             *regBase &= ~flashSpeculationMask;
2567:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2568:../drivers/fsl_flash.c ****             {
2569:../drivers/fsl_flash.c ****                 *regBase &= ~dataPrefetchMask;
2570:../drivers/fsl_flash.c ****             }
2571:../drivers/fsl_flash.c ****             else
2572:../drivers/fsl_flash.c ****             {
2573:../drivers/fsl_flash.c ****                 *regBase |= dataPrefetchMask;
2574:../drivers/fsl_flash.c ****             }
2575:../drivers/fsl_flash.c ****         }
2576:../drivers/fsl_flash.c ****     }
2577:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FTFx_MCM_FLASH_CACHE_CONTROLS */
2578:../drivers/fsl_flash.c **** 
2579:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2580:../drivers/fsl_flash.c **** }
2581:../drivers/fsl_flash.c **** 
2582:../drivers/fsl_flash.c **** status_t FLASH_PflashGetPrefetchSpeculation(flash_prefetch_speculation_status_t *speculationStatus)
2583:../drivers/fsl_flash.c **** {
2584:../drivers/fsl_flash.c ****     memset(speculationStatus, 0, sizeof(flash_prefetch_speculation_status_t));
2585:../drivers/fsl_flash.c **** 
2586:../drivers/fsl_flash.c ****     /* Assuming that all speculation options are enabled. */
2587:../drivers/fsl_flash.c ****     speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionEnable;
2588:../drivers/fsl_flash.c ****     speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionEnable;
2589:../drivers/fsl_flash.c **** 
2590:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
2591:../drivers/fsl_flash.c ****     {
2592:../drivers/fsl_flash.c ****         uint32_t value;
2593:../drivers/fsl_flash.c **** #if defined(MCM)
2594:../drivers/fsl_flash.c ****         value = MCM->PLACR;
2595:../drivers/fsl_flash.c **** #elif defined(MCM0)
2596:../drivers/fsl_flash.c ****         value = MCM0->PLACR;
2597:../drivers/fsl_flash.c **** #endif
2598:../drivers/fsl_flash.c ****         if (value & MCM_PLACR_DFCS_MASK)
2599:../drivers/fsl_flash.c ****         {
2600:../drivers/fsl_flash.c ****             /* Speculation buffer is off. */
2601:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2602:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2603:../drivers/fsl_flash.c ****         }
2604:../drivers/fsl_flash.c ****         else
2605:../drivers/fsl_flash.c ****         {
2606:../drivers/fsl_flash.c ****             /* Speculation buffer is on for instruction. */
2607:../drivers/fsl_flash.c ****             if (!(value & MCM_PLACR_EFDS_MASK))
2608:../drivers/fsl_flash.c ****             {
2609:../drivers/fsl_flash.c ****                 /* Speculation buffer is off for data. */
2610:../drivers/fsl_flash.c ****                 speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2611:../drivers/fsl_flash.c ****             }
2612:../drivers/fsl_flash.c ****         }
2613:../drivers/fsl_flash.c ****     }
2614:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2615:../drivers/fsl_flash.c ****     {
2616:../drivers/fsl_flash.c ****         uint32_t value;
2617:../drivers/fsl_flash.c ****         uint32_t b0dpeMask, b0ipeMask;
2618:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_B0DPE_MASK)
2619:../drivers/fsl_flash.c ****         value = FMC->PFB01CR;
2620:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB01CR_B0DPE_MASK;
2621:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB01CR_B0IPE_MASK;
2622:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_B0DPE_MASK)
2623:../drivers/fsl_flash.c ****         value = FMC->PFB0CR;
2624:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
2625:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB0CR_B0IPE_MASK;
2626:../drivers/fsl_flash.c **** #endif
2627:../drivers/fsl_flash.c ****         if (!(value & b0dpeMask))
2628:../drivers/fsl_flash.c ****         {
2629:../drivers/fsl_flash.c ****             /* Do not prefetch in response to data references. */
2630:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2631:../drivers/fsl_flash.c ****         }
2632:../drivers/fsl_flash.c ****         if (!(value & b0ipeMask))
2633:../drivers/fsl_flash.c ****         {
2634:../drivers/fsl_flash.c ****             /* Do not prefetch in response to instruction fetches. */
2635:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2636:../drivers/fsl_flash.c ****         }
2637:../drivers/fsl_flash.c ****     }
2638:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2639:../drivers/fsl_flash.c ****     {
2640:../drivers/fsl_flash.c ****         uint32_t value;
2641:../drivers/fsl_flash.c ****         uint32_t flashSpeculationMask, dataPrefetchMask;
2642:../drivers/fsl_flash.c ****         value = MSCM_OCMDR0_REG;
2643:../drivers/fsl_flash.c ****         flashSpeculationMask = MSCM_OCMDR_OCMC1_DFCS_MASK;
2644:../drivers/fsl_flash.c ****         dataPrefetchMask = MSCM_OCMDR_OCMC1_DFDS_MASK;
2645:../drivers/fsl_flash.c **** 
2646:../drivers/fsl_flash.c ****         if (value & flashSpeculationMask)
2647:../drivers/fsl_flash.c ****         {
2648:../drivers/fsl_flash.c ****             /* Speculation buffer is off. */
2649:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2650:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2651:../drivers/fsl_flash.c ****         }
2652:../drivers/fsl_flash.c ****         else
2653:../drivers/fsl_flash.c ****         {
2654:../drivers/fsl_flash.c ****             /* Speculation buffer is on for instruction. */
2655:../drivers/fsl_flash.c ****             if (value & dataPrefetchMask)
2656:../drivers/fsl_flash.c ****             {
2657:../drivers/fsl_flash.c ****                 /* Speculation buffer is off for data. */
2658:../drivers/fsl_flash.c ****                 speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2659:../drivers/fsl_flash.c ****             }
2660:../drivers/fsl_flash.c ****         }
2661:../drivers/fsl_flash.c ****     }
2662:../drivers/fsl_flash.c **** #endif
2663:../drivers/fsl_flash.c **** 
2664:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2665:../drivers/fsl_flash.c **** }
2666:../drivers/fsl_flash.c **** 
2667:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2668:../drivers/fsl_flash.c **** /*!
2669:../drivers/fsl_flash.c ****  * @brief Copy PIC of flash_run_command() to RAM
2670:../drivers/fsl_flash.c ****  */
2671:../drivers/fsl_flash.c **** static void copy_flash_run_command(uint32_t *flashRunCommand)
2672:../drivers/fsl_flash.c **** {
2673:../drivers/fsl_flash.c ****     assert(sizeof(s_flashRunCommandFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWords * 4)
2674:../drivers/fsl_flash.c **** 
2675:../drivers/fsl_flash.c ****     /* Since the value of ARM function pointer is always odd, but the real start address
2676:../drivers/fsl_flash.c ****      * of function memory should be even, that's why +1 operation exist. */
2677:../drivers/fsl_flash.c ****     memcpy((void *)flashRunCommand, (void *)s_flashRunCommandFunctionCode, sizeof(s_flashRunCommand
2678:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
2679:../drivers/fsl_flash.c **** }
2680:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2681:../drivers/fsl_flash.c **** 
2682:../drivers/fsl_flash.c **** /*!
2683:../drivers/fsl_flash.c ****  * @brief Flash Command Sequence
2684:../drivers/fsl_flash.c ****  *
2685:../drivers/fsl_flash.c ****  * This function is used to perform the command write sequence to the flash.
2686:../drivers/fsl_flash.c ****  *
2687:../drivers/fsl_flash.c ****  * @param driver Pointer to storage for the driver runtime state.
2688:../drivers/fsl_flash.c ****  * @return An error code or kStatus_FLASH_Success
2689:../drivers/fsl_flash.c ****  */
2690:../drivers/fsl_flash.c **** static status_t flash_command_sequence(flash_config_t *config)
2691:../drivers/fsl_flash.c **** {
2692:../drivers/fsl_flash.c ****     uint8_t registerValue;
2693:../drivers/fsl_flash.c **** 
2694:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2695:../drivers/fsl_flash.c ****     /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register */
2696:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_RDCOLERR_MASK | FTFx_FSTAT_ACCERR_MASK | FTFx_FSTAT_FPVIOL_MASK;
2697:../drivers/fsl_flash.c **** 
2698:../drivers/fsl_flash.c ****     status_t returnCode = flash_check_execute_in_ram_function_info(config);
2699:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
2700:../drivers/fsl_flash.c ****     {
2701:../drivers/fsl_flash.c ****         return returnCode;
2702:../drivers/fsl_flash.c ****     }
2703:../drivers/fsl_flash.c **** 
2704:../drivers/fsl_flash.c ****     /* We pass the ftfx_fstat address as a parameter to flash_run_comamnd() instead of using
2705:../drivers/fsl_flash.c ****      * pre-processed MICRO sentences or operating global variable in flash_run_comamnd()
2706:../drivers/fsl_flash.c ****      * to make sure that flash_run_command() will be compiled into position-independent code (PIC).
2707:../drivers/fsl_flash.c ****     callFlashRunCommand((FTFx_REG8_ACCESS_TYPE)(&FTFx->FSTAT));
2708:../drivers/fsl_flash.c **** #else
2709:../drivers/fsl_flash.c ****     /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register */
2710:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_RDCOLERR_MASK | FTFx_FSTAT_ACCERR_MASK | FTFx_FSTAT_FPVIOL_MASK;
2711:../drivers/fsl_flash.c **** 
2712:../drivers/fsl_flash.c ****     /* clear CCIF bit */
2713:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_CCIF_MASK;
2714:../drivers/fsl_flash.c **** 
2715:../drivers/fsl_flash.c ****     /* Check CCIF bit of the flash status register, wait till it is set.
2716:../drivers/fsl_flash.c ****      * IP team indicates that this loop will always complete. */
2717:../drivers/fsl_flash.c ****     while (!(FTFx->FSTAT & FTFx_FSTAT_CCIF_MASK))
2718:../drivers/fsl_flash.c ****     {
2719:../drivers/fsl_flash.c ****     }
2720:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2721:../drivers/fsl_flash.c **** 
2722:../drivers/fsl_flash.c ****     /* Check error bits */
2723:../drivers/fsl_flash.c ****     /* Get flash status register value */
2724:../drivers/fsl_flash.c ****     registerValue = FTFx->FSTAT;
2725:../drivers/fsl_flash.c **** 
2726:../drivers/fsl_flash.c ****     /* checking access error */
2727:../drivers/fsl_flash.c ****     if (registerValue & FTFx_FSTAT_ACCERR_MASK)
2728:../drivers/fsl_flash.c ****     {
2729:../drivers/fsl_flash.c ****         return kStatus_FLASH_AccessError;
2730:../drivers/fsl_flash.c ****     }
2731:../drivers/fsl_flash.c ****     /* checking protection error */
2732:../drivers/fsl_flash.c ****     else if (registerValue & FTFx_FSTAT_FPVIOL_MASK)
2733:../drivers/fsl_flash.c ****     {
2734:../drivers/fsl_flash.c ****         return kStatus_FLASH_ProtectionViolation;
2735:../drivers/fsl_flash.c ****     }
2736:../drivers/fsl_flash.c ****     /* checking MGSTAT0 non-correctable error */
2737:../drivers/fsl_flash.c ****     else if (registerValue & FTFx_FSTAT_MGSTAT0_MASK)
2738:../drivers/fsl_flash.c ****     {
2739:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2740:../drivers/fsl_flash.c ****     }
2741:../drivers/fsl_flash.c ****     else
2742:../drivers/fsl_flash.c ****     {
2743:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
2744:../drivers/fsl_flash.c ****     }
2745:../drivers/fsl_flash.c **** }
2746:../drivers/fsl_flash.c **** 
2747:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT && FLASH_IS_CACHE_INVALIDATION_AVAILABLE
2748:../drivers/fsl_flash.c **** /*!
2749:../drivers/fsl_flash.c ****  * @brief Copy PIC of flash_common_bit_operation() to RAM
2750:../drivers/fsl_flash.c ****  *
2751:../drivers/fsl_flash.c ****  */
2752:../drivers/fsl_flash.c **** static void copy_flash_common_bit_operation(uint32_t *flashCommonBitOperation)
2753:../drivers/fsl_flash.c **** {
2754:../drivers/fsl_flash.c ****     assert(sizeof(s_flashCommonBitOperationFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWo
2755:../drivers/fsl_flash.c **** 
2756:../drivers/fsl_flash.c ****     /* Since the value of ARM function pointer is always odd, but the real start address
2757:../drivers/fsl_flash.c ****      * of function memory should be even, that's why +1 operation exist. */
2758:../drivers/fsl_flash.c ****     memcpy((void *)flashCommonBitOperation, (void *)s_flashCommonBitOperationFunctionCode,
2759:../drivers/fsl_flash.c ****            sizeof(s_flashCommonBitOperationFunctionCode));
2760:../drivers/fsl_flash.c ****     callFlashCommonBitOperation = (void (*)(FTFx_REG32_ACCESS_TYPE base, uint32_t bitMask, uint32_t
2761:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
2762:../drivers/fsl_flash.c **** }
2763:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT && FLASH_IS_CACHE_INVALIDATION_AVAILABLE */
2764:../drivers/fsl_flash.c **** 
2765:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
2766:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by MCM.*/
2767:../drivers/fsl_flash.c **** void mcm_flash_cache_clear(void)
2768:../drivers/fsl_flash.c **** {
2769:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase;
2770:../drivers/fsl_flash.c **** 
2771:../drivers/fsl_flash.c **** #if defined(BL_TARGET_ROM) && defined(MCM0_CACHE_REG) && defined(MCM1_CACHE_REG) && \
2772:../drivers/fsl_flash.c ****     defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
2773:../drivers/fsl_flash.c ****     {
2774:../drivers/fsl_flash.c ****         uint16_t armPartNumber = (uint16_t)((SCB->CPUID & SCB_CPUID_PARTNO_Msk) >> SCB_CPUID_PARTNO
2775:../drivers/fsl_flash.c ****         uint32_t cortexVersion = __CORTEX_M;
2776:../drivers/fsl_flash.c ****         uint32_t coreId = FSL_FEATURE_FLASH_CURRENT_CORE_ID;
2777:../drivers/fsl_flash.c **** #if (__CORTEX_M <= 7)
2778:../drivers/fsl_flash.c ****         /* Note: Below code only apply to dual core device (such K3S) */
2779:../drivers/fsl_flash.c ****         if (s_armCorePartNumberArray[cortexVersion] != armPartNumber)
2780:../drivers/fsl_flash.c ****         {
2781:../drivers/fsl_flash.c ****             coreId ^= 0x1;
2782:../drivers/fsl_flash.c ****         }
2783:../drivers/fsl_flash.c ****         regBase = s_mcmModuleAccessTypeArray[coreId];
2784:../drivers/fsl_flash.c **** #else
2785:../drivers/fsl_flash.c ****         #error "Inapplicable ARM Cortext Version!"
2786:../drivers/fsl_flash.c **** #endif
2787:../drivers/fsl_flash.c ****     }
2788:../drivers/fsl_flash.c **** #elif defined(MCM0_CACHE_REG)
2789:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&MCM0_CACHE_REG;
2790:../drivers/fsl_flash.c **** #elif defined(MCM1_CACHE_REG)
2791:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&MCM1_CACHE_REG;
2792:../drivers/fsl_flash.c **** #endif
2793:../drivers/fsl_flash.c **** 
2794:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2795:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, MCM_CACHE_CLEAR_MASK, MCM_CACHE_CLEAR_SHIFT, 1U);
2796:../drivers/fsl_flash.c **** #else  /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2797:../drivers/fsl_flash.c ****     *regBase |= MCM_CACHE_CLEAR_MASK;
2798:../drivers/fsl_flash.c **** 
2799:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2800:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2801:../drivers/fsl_flash.c ****     __ISB();
2802:../drivers/fsl_flash.c ****     __DSB();
2803:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2804:../drivers/fsl_flash.c **** }
2805:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_MCM */
2806:../drivers/fsl_flash.c **** 
2807:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
2808:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by FMC.*/
2809:../drivers/fsl_flash.c **** void fmc_flash_cache_clear(void)
2810:../drivers/fsl_flash.c **** {
2811:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2812:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase = (FTFx_REG32_ACCESS_TYPE)0;
2813:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_CINV_WAY_MASK)
2814:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2815:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_CINV_WAY_MASK, FMC_PFB01CR_CINV_WAY_SHIFT, 0xF
2816:../drivers/fsl_flash.c **** #else
2817:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2818:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_CINV_WAY_MASK, FMC_PFB0CR_CINV_WAY_SHIFT, 0xFU)
2819:../drivers/fsl_flash.c **** #endif
2820:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2821:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_CINV_WAY_MASK)
2822:../drivers/fsl_flash.c ****     FMC->PFB01CR = (FMC->PFB01CR & ~FMC_PFB01CR_CINV_WAY_MASK) | FMC_PFB01CR_CINV_WAY(~0);
2823:../drivers/fsl_flash.c **** #else
2824:../drivers/fsl_flash.c ****     FMC->PFB0CR = (FMC->PFB0CR & ~FMC_PFB0CR_CINV_WAY_MASK) | FMC_PFB0CR_CINV_WAY(~0);
2825:../drivers/fsl_flash.c **** #endif
2826:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2827:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2828:../drivers/fsl_flash.c ****     __ISB();
2829:../drivers/fsl_flash.c ****     __DSB();
2830:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2831:../drivers/fsl_flash.c **** }
2832:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
2833:../drivers/fsl_flash.c **** 
2834:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2835:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by MSCM.*/
2836:../drivers/fsl_flash.c **** void mscm_flash_prefetch_speculation_enable(uint32_t flashIndex, bool enable)
2837:../drivers/fsl_flash.c **** {
2838:../drivers/fsl_flash.c ****     uint8_t setValue;
2839:../drivers/fsl_flash.c ****     if (enable)
2840:../drivers/fsl_flash.c ****     {
2841:../drivers/fsl_flash.c ****         setValue = 0x0U;
2842:../drivers/fsl_flash.c ****     }
2843:../drivers/fsl_flash.c ****     else
2844:../drivers/fsl_flash.c ****     {
2845:../drivers/fsl_flash.c ****         setValue = 0x3U;
2846:../drivers/fsl_flash.c ****     }
2847:../drivers/fsl_flash.c **** 
2848:../drivers/fsl_flash.c **** /* The OCMDR[0] is always used to prefetch main Pflash*/
2849:../drivers/fsl_flash.c **** /* For device with FlexNVM support, the OCMDR[1] is used to prefetch Dflash.
2850:../drivers/fsl_flash.c ****  * For device with secondary flash support, the OCMDR[1] is used to prefetch secondary Pflash. */
2851:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2852:../drivers/fsl_flash.c ****     switch (flashIndex)
2853:../drivers/fsl_flash.c ****     {
2854:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED || FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2855:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexSecondaryFlash:
2856:../drivers/fsl_flash.c ****             callFlashCommonBitOperation((FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR1_REG, MSCM_SPECULATION_
2857:../drivers/fsl_flash.c ****                                         MSCM_SPECULATION_DISABLE_SHIFT, setValue);
2858:../drivers/fsl_flash.c ****             break;
2859:../drivers/fsl_flash.c **** #endif
2860:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexPrimaryFlash:
2861:../drivers/fsl_flash.c ****         default:
2862:../drivers/fsl_flash.c ****             callFlashCommonBitOperation((FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR0_REG, MSCM_SPECULATION_
2863:../drivers/fsl_flash.c ****                                         MSCM_SPECULATION_DISABLE_SHIFT, setValue);
2864:../drivers/fsl_flash.c ****             break;
2865:../drivers/fsl_flash.c ****     }
2866:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2867:../drivers/fsl_flash.c ****     switch (flashIndex)
2868:../drivers/fsl_flash.c ****     {
2869:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED || FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2870:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexSecondaryFlash:
2871:../drivers/fsl_flash.c ****             MSCM_OCMDR1_REG = (MSCM_OCMDR1_REG & (~MSCM_SPECULATION_DISABLE_MASK)) | MSCM_SPECULATI
2872:../drivers/fsl_flash.c ****             /* Each cahce clear instaruction should be followed by below code*/
2873:../drivers/fsl_flash.c ****             __ISB();
2874:../drivers/fsl_flash.c ****             __DSB();
2875:../drivers/fsl_flash.c ****             break;
2876:../drivers/fsl_flash.c **** #endif
2877:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexPrimaryFlash:
2878:../drivers/fsl_flash.c ****         default:
2879:../drivers/fsl_flash.c ****             MSCM_OCMDR0_REG = (MSCM_OCMDR0_REG & (~MSCM_SPECULATION_DISABLE_MASK)) | MSCM_SPECULATI
2880:../drivers/fsl_flash.c ****             /* Memory barriers for good measure.
2881:../drivers/fsl_flash.c ****              * All Cache, Branch predictor and TLB maintenance operations before this instruction c
2882:../drivers/fsl_flash.c ****             __ISB();
2883:../drivers/fsl_flash.c ****             __DSB();
2884:../drivers/fsl_flash.c ****             break;
2885:../drivers/fsl_flash.c ****     }
2886:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2887:../drivers/fsl_flash.c **** }
2888:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM */
2889:../drivers/fsl_flash.c **** 
2890:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2891:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by FMC.*/
2892:../drivers/fsl_flash.c **** void fmc_flash_prefetch_speculation_clear(void)
2893:../drivers/fsl_flash.c **** {
2894:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2895:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase = (FTFx_REG32_ACCESS_TYPE)0;
2896:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2897:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2898:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_S_INV_MASK, FMC_PFB01CR_S_INV_SHIFT, 1U);
2899:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2900:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2901:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_S_B_INV_MASK, FMC_PFB01CR_S_B_INV_SHIFT, 1U);
2902:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2903:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2904:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_S_INV_MASK, FMC_PFB0CR_S_INV_SHIFT, 1U);
2905:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2906:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2907:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_S_B_INV_MASK, FMC_PFB0CR_S_B_INV_SHIFT, 1U);
2908:../drivers/fsl_flash.c **** #endif
2909:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2910:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2911:../drivers/fsl_flash.c ****     FMC->PFB01CR |= FMC_PFB01CR_S_INV_MASK;
2912:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2913:../drivers/fsl_flash.c ****     FMC->PFB01CR |= FMC_PFB01CR_S_B_INV_MASK;
2914:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2915:../drivers/fsl_flash.c ****     FMC->PFB0CR |= FMC_PFB0CR_S_INV_MASK;
2916:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2917:../drivers/fsl_flash.c ****     FMC->PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
2918:../drivers/fsl_flash.c **** #endif
2919:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2920:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2921:../drivers/fsl_flash.c ****     __ISB();
2922:../drivers/fsl_flash.c ****     __DSB();
2923:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2924:../drivers/fsl_flash.c **** }
2925:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
2926:../drivers/fsl_flash.c **** 
2927:../drivers/fsl_flash.c **** /*!
2928:../drivers/fsl_flash.c ****  * @brief Flash Cache Clear
2929:../drivers/fsl_flash.c ****  *
2930:../drivers/fsl_flash.c ****  * This function is used to perform the cache and prefetch speculation clear to the flash.
2931:../drivers/fsl_flash.c ****  */
2932:../drivers/fsl_flash.c **** void flash_cache_clear(flash_config_t *config)
2933:../drivers/fsl_flash.c **** {
2934:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPost);
2935:../drivers/fsl_flash.c **** }
2936:../drivers/fsl_flash.c **** 
2937:../drivers/fsl_flash.c **** /*!
2938:../drivers/fsl_flash.c ****  * @brief Flash Cache Clear Process
2939:../drivers/fsl_flash.c ****  *
2940:../drivers/fsl_flash.c ****  * This function is used to perform the cache and prefetch speculation clear process to the flash.
2941:../drivers/fsl_flash.c ****  */
2942:../drivers/fsl_flash.c **** static void flash_cache_clear_process(flash_config_t *config, flash_cache_clear_process_t process)
2943:../drivers/fsl_flash.c **** {
2944:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2945:../drivers/fsl_flash.c ****     status_t returnCode = flash_check_execute_in_ram_function_info(config);
2946:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
2947:../drivers/fsl_flash.c ****     {
2948:../drivers/fsl_flash.c ****         return;
2949:../drivers/fsl_flash.c ****     }
2950:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2951:../drivers/fsl_flash.c **** 
2952:../drivers/fsl_flash.c ****     /* We pass the ftfx register address as a parameter to flash_common_bit_operation() instead of 
2953:../drivers/fsl_flash.c ****      * pre-processed MACROs or a global variable in flash_common_bit_operation()
2954:../drivers/fsl_flash.c ****      * to make sure that flash_common_bit_operation() will be compiled into position-independent co
2955:../drivers/fsl_flash.c ****     if (process == kFLASH_CacheClearProcessPost)
2956:../drivers/fsl_flash.c ****     {
2957:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
2958:../drivers/fsl_flash.c ****         mcm_flash_cache_clear();
2959:../drivers/fsl_flash.c **** #endif
2960:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
2961:../drivers/fsl_flash.c ****         fmc_flash_cache_clear();
2962:../drivers/fsl_flash.c **** #endif
2963:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2964:../drivers/fsl_flash.c ****         mscm_flash_prefetch_speculation_enable(config->FlashMemoryIndex, true);
2965:../drivers/fsl_flash.c **** #endif
2966:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2967:../drivers/fsl_flash.c ****         fmc_flash_prefetch_speculation_clear();
2968:../drivers/fsl_flash.c **** #endif
2969:../drivers/fsl_flash.c ****     }
2970:../drivers/fsl_flash.c ****     if (process == kFLASH_CacheClearProcessPre)
2971:../drivers/fsl_flash.c ****     {
2972:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2973:../drivers/fsl_flash.c ****         mscm_flash_prefetch_speculation_enable(config->FlashMemoryIndex, false);
2974:../drivers/fsl_flash.c **** #endif
2975:../drivers/fsl_flash.c ****     }
2976:../drivers/fsl_flash.c **** }
2977:../drivers/fsl_flash.c **** 
2978:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2979:../drivers/fsl_flash.c **** /*! @brief Check whether flash execute-in-ram functions are ready  */
2980:../drivers/fsl_flash.c **** static status_t flash_check_execute_in_ram_function_info(flash_config_t *config)
2981:../drivers/fsl_flash.c **** {
  27              		.loc 1 2981 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2982:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
2983:../drivers/fsl_flash.c **** 
2984:../drivers/fsl_flash.c ****     if (config == NULL)
  33              		.loc 1 2984 0
  34 0000 38B1     		cbz	r0, .L3
2985:../drivers/fsl_flash.c ****     {
2986:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2987:../drivers/fsl_flash.c ****     }
2988:../drivers/fsl_flash.c **** 
2989:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo = (flash_execute_in_ram_function_config_t *)config->flashExecuteI
  35              		.loc 1 2989 0
  36 0002 C369     		ldr	r3, [r0, #28]
  37              	.LVL1:
2990:../drivers/fsl_flash.c **** 
2991:../drivers/fsl_flash.c ****     if ((config->flashExecuteInRamFunctionInfo) &&
  38              		.loc 1 2991 0
  39 0004 3BB1     		cbz	r3, .L4
  40              		.loc 1 2991 0 is_stmt 0 discriminator 1
  41 0006 1B68     		ldr	r3, [r3]
  42              	.LVL2:
  43 0008 022B     		cmp	r3, #2
2992:../drivers/fsl_flash.c ****         (kFLASH_ExecuteInRamFunctionTotalNum == flashExecuteInRamFunctionInfo->activeFunctionCount)
2993:../drivers/fsl_flash.c ****     {
2994:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
  44              		.loc 1 2994 0 is_stmt 1 discriminator 1
  45 000a 14BF     		ite	ne
  46 000c 6D20     		movne	r0, #109
  47              	.LVL3:
  48 000e 0020     		moveq	r0, #0
  49 0010 7047     		bx	lr
  50              	.LVL4:
  51              	.L3:
2986:../drivers/fsl_flash.c ****     }
  52              		.loc 1 2986 0
  53 0012 0420     		movs	r0, #4
  54              	.LVL5:
  55 0014 7047     		bx	lr
  56              	.LVL6:
  57              	.L4:
2995:../drivers/fsl_flash.c ****     }
2996:../drivers/fsl_flash.c **** 
2997:../drivers/fsl_flash.c ****     return kStatus_FLASH_ExecuteInRamFunctionNotReady;
  58              		.loc 1 2997 0
  59 0016 6D20     		movs	r0, #109
  60              	.LVL7:
2998:../drivers/fsl_flash.c **** }
  61              		.loc 1 2998 0
  62 0018 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE180:
  66              		.section	.text.flash_command_sequence,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	flash_command_sequence:
  74              	.LFB174:
2691:../drivers/fsl_flash.c ****     uint8_t registerValue;
  75              		.loc 1 2691 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL8:
  80 0000 38B5     		push	{r3, r4, r5, lr}
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 3, -16
  83              		.cfi_offset 4, -12
  84              		.cfi_offset 5, -8
  85              		.cfi_offset 14, -4
2696:../drivers/fsl_flash.c **** 
  86              		.loc 1 2696 0
  87 0002 0D4D     		ldr	r5, .L11
  88 0004 7023     		movs	r3, #112
  89 0006 2B70     		strb	r3, [r5]
2698:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
  90              		.loc 1 2698 0
  91 0008 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
  92              	.LVL9:
2699:../drivers/fsl_flash.c ****     {
  93              		.loc 1 2699 0
  94 000c 0446     		mov	r4, r0
  95 000e 68B9     		cbnz	r0, .L6
  96              	.LVL10:
  97              	.LBB10:
  98              	.LBB11:
2707:../drivers/fsl_flash.c **** #else
  99              		.loc 1 2707 0
 100 0010 0A4B     		ldr	r3, .L11+4
 101 0012 2846     		mov	r0, r5
 102              	.LVL11:
 103 0014 1B68     		ldr	r3, [r3]
 104 0016 9847     		blx	r3
 105              	.LVL12:
2724:../drivers/fsl_flash.c **** 
 106              		.loc 1 2724 0
 107 0018 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 108 001a DBB2     		uxtb	r3, r3
 109              	.LVL13:
2727:../drivers/fsl_flash.c ****     {
 110              		.loc 1 2727 0
 111 001c 9906     		lsls	r1, r3, #26
 112 001e 07D4     		bmi	.L8
2732:../drivers/fsl_flash.c ****     {
 113              		.loc 1 2732 0
 114 0020 DA06     		lsls	r2, r3, #27
 115 0022 07D4     		bmi	.L9
2737:../drivers/fsl_flash.c ****     {
 116              		.loc 1 2737 0
 117 0024 13F0010F 		tst	r3, #1
2739:../drivers/fsl_flash.c ****     }
 118              		.loc 1 2739 0
 119 0028 18BF     		it	ne
 120 002a 6924     		movne	r4, #105
 121              	.LVL14:
 122              	.L6:
 123              	.LBE11:
 124              	.LBE10:
2745:../drivers/fsl_flash.c **** 
 125              		.loc 1 2745 0
 126 002c 2046     		mov	r0, r4
 127 002e 38BD     		pop	{r3, r4, r5, pc}
 128              	.LVL15:
 129              	.L8:
 130              	.LBB13:
 131              	.LBB12:
2729:../drivers/fsl_flash.c ****     }
 132              		.loc 1 2729 0
 133 0030 6724     		movs	r4, #103
 134              	.LVL16:
 135 0032 FBE7     		b	.L6
 136              	.LVL17:
 137              	.L9:
2734:../drivers/fsl_flash.c ****     }
 138              		.loc 1 2734 0
 139 0034 6824     		movs	r4, #104
 140              	.LVL18:
 141 0036 F9E7     		b	.L6
 142              	.L12:
 143              		.align	2
 144              	.L11:
 145 0038 00000240 		.word	1073872896
 146 003c 00000000 		.word	.LANCHOR0
 147              	.LBE12:
 148              	.LBE13:
 149              		.cfi_endproc
 150              	.LFE174:
 152              		.section	.text.flash_check_range,"ax",%progbits
 153              		.align	1
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu fpv4-sp-d16
 159              	flash_check_range:
 160              	.LFB181:
2999:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
3000:../drivers/fsl_flash.c **** 
3001:../drivers/fsl_flash.c **** /*! @brief Validates the range and alignment of the given address range.*/
3002:../drivers/fsl_flash.c **** static status_t flash_check_range(flash_config_t *config,
3003:../drivers/fsl_flash.c ****                                   uint32_t startAddress,
3004:../drivers/fsl_flash.c ****                                   uint32_t lengthInBytes,
3005:../drivers/fsl_flash.c ****                                   uint32_t alignmentBaseline)
3006:../drivers/fsl_flash.c **** {
 161              		.loc 1 3006 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL19:
 166 0000 10B5     		push	{r4, lr}
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 4, -8
 169              		.cfi_offset 14, -4
3007:../drivers/fsl_flash.c ****     if (config == NULL)
 170              		.loc 1 3007 0
 171 0002 78B1     		cbz	r0, .L15
3008:../drivers/fsl_flash.c ****     {
3009:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3010:../drivers/fsl_flash.c ****     }
3011:../drivers/fsl_flash.c **** 
3012:../drivers/fsl_flash.c ****     /* Verify the start and length are alignmentBaseline aligned. */
3013:../drivers/fsl_flash.c ****     if ((startAddress & (alignmentBaseline - 1)) || (lengthInBytes & (alignmentBaseline - 1)))
 172              		.loc 1 3013 0
 173 0004 013B     		subs	r3, r3, #1
 174              	.LVL20:
 175 0006 41EA0204 		orr	r4, r1, r2
 176 000a 2342     		tst	r3, r4
 177 000c 0CD1     		bne	.L16
 178              	.LVL21:
 179              	.LBB16:
 180              	.LBB17:
3014:../drivers/fsl_flash.c ****     {
3015:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
3016:../drivers/fsl_flash.c ****     }
3017:../drivers/fsl_flash.c **** 
3018:../drivers/fsl_flash.c ****     /* check for valid range of the target addresses */
3019:../drivers/fsl_flash.c ****     if (
3020:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3021:../drivers/fsl_flash.c ****         ((startAddress >= config->DFlashBlockBase) &&
3022:../drivers/fsl_flash.c ****          ((startAddress + lengthInBytes) <= (config->DFlashBlockBase + config->DFlashTotalSize))) |
3023:../drivers/fsl_flash.c **** #endif
3024:../drivers/fsl_flash.c ****         ((startAddress >= config->PFlashBlockBase) &&
 181              		.loc 1 3024 0
 182 000e 0368     		ldr	r3, [r0]
 183              	.LVL22:
3019:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 184              		.loc 1 3019 0
 185 0010 9942     		cmp	r1, r3
 186 0012 0BD3     		bcc	.L17
3025:../drivers/fsl_flash.c ****          ((startAddress + lengthInBytes) <= (config->PFlashBlockBase + config->PFlashTotalSize))))
 187              		.loc 1 3025 0
 188 0014 4068     		ldr	r0, [r0, #4]
 189              	.LVL23:
 190 0016 1144     		add	r1, r1, r2
 191              	.LVL24:
 192 0018 1844     		add	r0, r0, r3
3026:../drivers/fsl_flash.c ****     {
3027:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
 193              		.loc 1 3027 0
 194 001a 8142     		cmp	r1, r0
 195 001c 8CBF     		ite	hi
 196 001e 6620     		movhi	r0, #102
 197 0020 0020     		movls	r0, #0
 198 0022 10BD     		pop	{r4, pc}
 199              	.LVL25:
 200              	.L15:
 201              	.LBE17:
 202              	.LBE16:
3009:../drivers/fsl_flash.c ****     }
 203              		.loc 1 3009 0
 204 0024 0420     		movs	r0, #4
 205              	.LVL26:
 206 0026 10BD     		pop	{r4, pc}
 207              	.LVL27:
 208              	.L16:
3015:../drivers/fsl_flash.c ****     }
 209              		.loc 1 3015 0
 210 0028 6520     		movs	r0, #101
 211              	.LVL28:
 212 002a 10BD     		pop	{r4, pc}
 213              	.LVL29:
 214              	.L17:
 215              	.LBB19:
 216              	.LBB18:
3028:../drivers/fsl_flash.c ****     }
3029:../drivers/fsl_flash.c **** 
3030:../drivers/fsl_flash.c ****     return kStatus_FLASH_AddressError;
 217              		.loc 1 3030 0
 218 002c 6620     		movs	r0, #102
 219              	.LVL30:
 220              	.LBE18:
 221              	.LBE19:
3031:../drivers/fsl_flash.c **** }
 222              		.loc 1 3031 0
 223 002e 10BD     		pop	{r4, pc}
 224              		.cfi_endproc
 225              	.LFE181:
 227              		.section	.text.flash_get_matched_operation_info,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	flash_get_matched_operation_info:
 235              	.LFB182:
3032:../drivers/fsl_flash.c **** 
3033:../drivers/fsl_flash.c **** /*! @brief Gets the right address, sector and block size of current flash type which is indicated b
3034:../drivers/fsl_flash.c **** static status_t flash_get_matched_operation_info(flash_config_t *config,
3035:../drivers/fsl_flash.c ****                                                  uint32_t address,
3036:../drivers/fsl_flash.c ****                                                  flash_operation_config_t *info)
3037:../drivers/fsl_flash.c **** {
 236              		.loc 1 3037 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              	.LVL31:
 241 0000 70B5     		push	{r4, r5, r6, lr}
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247              		.loc 1 3037 0
 248 0002 0E46     		mov	r6, r1
 249 0004 1446     		mov	r4, r2
3038:../drivers/fsl_flash.c ****     if ((config == NULL) || (info == NULL))
 250              		.loc 1 3038 0
 251 0006 0546     		mov	r5, r0
 252 0008 C8B1     		cbz	r0, .L22
 253              		.loc 1 3038 0 is_stmt 0 discriminator 1
 254 000a C2B1     		cbz	r2, .L22
 255              	.LVL32:
 256              	.LBB22:
 257              	.LBB23:
3039:../drivers/fsl_flash.c ****     {
3040:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3041:../drivers/fsl_flash.c ****     }
3042:../drivers/fsl_flash.c **** 
3043:../drivers/fsl_flash.c ****     /* Clean up info Structure*/
3044:../drivers/fsl_flash.c ****     memset(info, 0, sizeof(flash_operation_config_t));
 258              		.loc 1 3044 0 is_stmt 1
 259 000c 2022     		movs	r2, #32
 260              	.LVL33:
 261 000e 0021     		movs	r1, #0
 262              	.LVL34:
 263 0010 2046     		mov	r0, r4
 264              	.LVL35:
 265 0012 FFF7FEFF 		bl	memset
 266              	.LVL36:
3045:../drivers/fsl_flash.c **** 
3046:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3047:../drivers/fsl_flash.c ****     if ((address >= config->DFlashBlockBase) && (address <= (config->DFlashBlockBase + config->DFla
3048:../drivers/fsl_flash.c ****     {
3049:../drivers/fsl_flash.c ****         /* When required by the command, address bit 23 selects between program flash memory
3050:../drivers/fsl_flash.c ****          * (=0) and data flash memory (=1).*/
3051:../drivers/fsl_flash.c ****         info->convertedAddress = address - config->DFlashBlockBase + 0x800000U;
3052:../drivers/fsl_flash.c ****         info->activeSectorSize = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SECTOR_SIZE;
3053:../drivers/fsl_flash.c ****         info->activeBlockSize = config->DFlashTotalSize / FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_COUNT;
3054:../drivers/fsl_flash.c **** 
3055:../drivers/fsl_flash.c ****         info->blockWriteUnitSize = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_WRITE_UNIT_SIZE;
3056:../drivers/fsl_flash.c ****         info->sectorCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_SECTOR_CMD_ADDRESS_ALIGMENT;
3057:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_SECTION_CMD_ADDRESS_ALIGMENT;
3058:../drivers/fsl_flash.c ****         info->resourceCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_RESOURCE_CMD_ADDRESS_ALIGMENT
3059:../drivers/fsl_flash.c ****         info->checkCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_CHECK_CMD_ADDRESS_ALIGMENT;
3060:../drivers/fsl_flash.c ****     }
3061:../drivers/fsl_flash.c ****     else
3062:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
3063:../drivers/fsl_flash.c ****     {
3064:../drivers/fsl_flash.c ****         info->convertedAddress = address - config->PFlashBlockBase;
 267              		.loc 1 3064 0
 268 0016 2B68     		ldr	r3, [r5]
 269 0018 F61A     		subs	r6, r6, r3
 270              	.LVL37:
3065:../drivers/fsl_flash.c ****         info->activeSectorSize = config->PFlashSectorSize;
 271              		.loc 1 3065 0
 272 001a EB68     		ldr	r3, [r5, #12]
 273 001c 6360     		str	r3, [r4, #4]
3064:../drivers/fsl_flash.c ****         info->activeSectorSize = config->PFlashSectorSize;
 274              		.loc 1 3064 0
 275 001e 2660     		str	r6, [r4]
3066:../drivers/fsl_flash.c ****         info->activeBlockSize = config->PFlashTotalSize / config->PFlashBlockCount;
 276              		.loc 1 3066 0
 277 0020 2A7A     		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 278 0022 6B68     		ldr	r3, [r5, #4]
 279 0024 B3FBF2F3 		udiv	r3, r3, r2
 280 0028 A360     		str	r3, [r4, #8]
3067:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
3068:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
3069:../drivers/fsl_flash.c ****         {
3070:../drivers/fsl_flash.c **** #if FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER || FLASH_SSD_SECONDARY_FLASH_HAS_ITS_
3071:../drivers/fsl_flash.c ****             /* When required by the command, address bit 23 selects between main flash memory
3072:../drivers/fsl_flash.c ****              * (=0) and secondary flash memory (=1).*/
3073:../drivers/fsl_flash.c ****             info->convertedAddress += 0x800000U;
3074:../drivers/fsl_flash.c **** #endif
3075:../drivers/fsl_flash.c ****             info->blockWriteUnitSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE;
3076:../drivers/fsl_flash.c ****         }
3077:../drivers/fsl_flash.c ****         else
3078:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
3079:../drivers/fsl_flash.c ****         {
3080:../drivers/fsl_flash.c ****             info->blockWriteUnitSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE;
 281              		.loc 1 3080 0
 282 002a 0823     		movs	r3, #8
3081:../drivers/fsl_flash.c ****         }
3082:../drivers/fsl_flash.c **** 
3083:../drivers/fsl_flash.c ****         info->sectorCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT;
 283              		.loc 1 3083 0
 284 002c 1022     		movs	r2, #16
3080:../drivers/fsl_flash.c ****         }
 285              		.loc 1 3080 0
 286 002e E360     		str	r3, [r4, #12]
3084:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTION_CMD_ADDRESS_ALIGMENT;
3085:../drivers/fsl_flash.c ****         info->resourceCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_RESOURCE_CMD_ADDRESS_ALIGMENT;
 287              		.loc 1 3085 0
 288 0030 A361     		str	r3, [r4, #24]
3086:../drivers/fsl_flash.c ****         info->checkCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_CHECK_CMD_ADDRESS_ALIGMENT;
 289              		.loc 1 3086 0
 290 0032 0423     		movs	r3, #4
3083:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTION_CMD_ADDRESS_ALIGMENT;
 291              		.loc 1 3083 0
 292 0034 2261     		str	r2, [r4, #16]
3084:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTION_CMD_ADDRESS_ALIGMENT;
 293              		.loc 1 3084 0
 294 0036 6261     		str	r2, [r4, #20]
 295              		.loc 1 3086 0
 296 0038 E361     		str	r3, [r4, #28]
 297              	.LVL38:
 298 003a 0020     		movs	r0, #0
 299 003c 70BD     		pop	{r4, r5, r6, pc}
 300              	.LVL39:
 301              	.L22:
 302              	.LBE23:
 303              	.LBE22:
3040:../drivers/fsl_flash.c ****     }
 304              		.loc 1 3040 0
 305 003e 0420     		movs	r0, #4
 306              	.LVL40:
3087:../drivers/fsl_flash.c ****     }
3088:../drivers/fsl_flash.c **** 
3089:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3090:../drivers/fsl_flash.c **** }
 307              		.loc 1 3090 0
 308 0040 70BD     		pop	{r4, r5, r6, pc}
 309              		.cfi_endproc
 310              	.LFE182:
 312              		.section	.text.FLASH_PrepareExecuteInRamFunctions,"ax",%progbits
 313              		.align	1
 314              		.global	FLASH_PrepareExecuteInRamFunctions
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	FLASH_PrepareExecuteInRamFunctions:
 321              	.LFB148:
 852:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
 322              		.loc 1 852 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              	.LVL41:
 327 0000 30B5     		push	{r4, r5, lr}
 328              		.cfi_def_cfa_offset 12
 329              		.cfi_offset 4, -12
 330              		.cfi_offset 5, -8
 331              		.cfi_offset 14, -4
 855:../drivers/fsl_flash.c ****     {
 332              		.loc 1 855 0
 333 0002 F0B1     		cbz	r0, .L27
 855:../drivers/fsl_flash.c ****     {
 334              		.loc 1 855 0 is_stmt 0 discriminator 1
 335 0004 C169     		ldr	r1, [r0, #28]
 336 0006 E1B1     		cbz	r1, .L27
 337              	.LVL42:
 338              	.LBB28:
 339              	.LBB29:
2677:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
 340              		.loc 1 2677 0 is_stmt 1
 341 0008 0F48     		ldr	r0, .L29
 342              	.LVL43:
 343              	.LBE29:
 344              	.LBE28:
 862:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 345              		.loc 1 862 0
 346 000a 4B68     		ldr	r3, [r1, #4]
 347              	.LVL44:
 348              	.LBB31:
 349              	.LBB30:
2677:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
 350              		.loc 1 2677 0
 351 000c 0268     		ldr	r2, [r0]	@ unaligned
 352 000e 1A60     		str	r2, [r3]	@ unaligned
 353 0010 4268     		ldr	r2, [r0, #4]	@ unaligned
 354 0012 5A60     		str	r2, [r3, #4]	@ unaligned
 355 0014 8268     		ldr	r2, [r0, #8]	@ unaligned
 356 0016 9A60     		str	r2, [r3, #8]	@ unaligned
2678:../drivers/fsl_flash.c **** }
 357              		.loc 1 2678 0
 358 0018 0C4A     		ldr	r2, .L29+4
 359 001a 0133     		adds	r3, r3, #1
 360              	.LVL45:
 361 001c 1360     		str	r3, [r2]
 362              	.LVL46:
 363              	.LBE30:
 364              	.LBE31:
 864:../drivers/fsl_flash.c **** #endif
 365              		.loc 1 864 0
 366 001e 8B68     		ldr	r3, [r1, #8]
 367              	.LVL47:
 368              	.LBB32:
 369              	.LBB33:
2758:../drivers/fsl_flash.c ****            sizeof(s_flashCommonBitOperationFunctionCode));
 370              		.loc 1 2758 0
 371 0020 0B4A     		ldr	r2, .L29+8
 372 0022 1846     		mov	r0, r3
 373 0024 02F11C04 		add	r4, r2, #28
 374              	.L25:
 375 0028 52F8045B 		ldr	r5, [r2], #4	@ unaligned
 376 002c 40F8045B 		str	r5, [r0], #4	@ unaligned
 377 0030 A242     		cmp	r2, r4
 378 0032 F9D1     		bne	.L25
2760:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
 379              		.loc 1 2760 0
 380 0034 074A     		ldr	r2, .L29+12
2761:../drivers/fsl_flash.c **** }
 381              		.loc 1 2761 0
 382 0036 0133     		adds	r3, r3, #1
 383              	.LVL48:
2760:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
 384              		.loc 1 2760 0
 385 0038 1360     		str	r3, [r2]
 386              	.LVL49:
 387              	.LBE33:
 388              	.LBE32:
 866:../drivers/fsl_flash.c **** 
 389              		.loc 1 866 0
 390 003a 0223     		movs	r3, #2
 391 003c 0B60     		str	r3, [r1]
 868:../drivers/fsl_flash.c **** }
 392              		.loc 1 868 0
 393 003e 0020     		movs	r0, #0
 394 0040 30BD     		pop	{r4, r5, pc}
 395              	.LVL50:
 396              	.L27:
 857:../drivers/fsl_flash.c ****     }
 397              		.loc 1 857 0
 398 0042 0420     		movs	r0, #4
 399              	.LVL51:
 869:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 400              		.loc 1 869 0
 401 0044 30BD     		pop	{r4, r5, pc}
 402              	.L30:
 403 0046 00BF     		.align	2
 404              	.L29:
 405 0048 00000000 		.word	.LANCHOR1
 406 004c 00000000 		.word	.LANCHOR0
 407 0050 00000000 		.word	.LANCHOR2
 408 0054 00000000 		.word	.LANCHOR3
 409              		.cfi_endproc
 410              	.LFE148:
 412              		.section	.text.FLASH_Init,"ax",%progbits
 413              		.align	1
 414              		.global	FLASH_Init
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu fpv4-sp-d16
 420              	FLASH_Init:
 421              	.LFB147:
 736:../drivers/fsl_flash.c ****     if (config == NULL)
 422              		.loc 1 736 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              	.LVL52:
 427 0000 10B5     		push	{r4, lr}
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 4, -8
 430              		.cfi_offset 14, -4
 737:../drivers/fsl_flash.c ****     {
 431              		.loc 1 737 0
 432 0002 0446     		mov	r4, r0
 433 0004 0028     		cmp	r0, #0
 434 0006 2CD0     		beq	.L35
 435              	.LBB34:
 776:../drivers/fsl_flash.c **** #else
 436              		.loc 1 776 0
 437 0008 174A     		ldr	r2, .L40
 438 000a 41F24C03 		movw	r3, #4172
 439 000e D358     		ldr	r3, [r2, r3]
 440 0010 C3F30363 		ubfx	r3, r3, #24, #4
 441              	.LVL53:
 782:../drivers/fsl_flash.c ****         {
 442              		.loc 1 782 0
 443 0014 0F2B     		cmp	r3, #15
 788:../drivers/fsl_flash.c ****         }
 444              		.loc 1 788 0
 445 0016 1BBF     		ittet	ne
 446 0018 144A     		ldrne	r2, .L40+4
 447 001a 32F81330 		ldrhne	r3, [r2, r3, lsl #1]
 448              	.LVL54:
 784:../drivers/fsl_flash.c ****         }
 449              		.loc 1 784 0
 450 001e 4FF48013 		moveq	r3, #1048576
 788:../drivers/fsl_flash.c ****         }
 451              		.loc 1 788 0
 452 0022 9B02     		lslne	r3, r3, #10
 453              	.LVL55:
 792:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 454              		.loc 1 792 0
 455 0024 0022     		movs	r2, #0
 793:../drivers/fsl_flash.c ****         config->PFlashBlockCount = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 456              		.loc 1 793 0
 457 0026 80E80C00 		stm	r0, {r2, r3}
 794:../drivers/fsl_flash.c ****         config->PFlashSectorSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 458              		.loc 1 794 0
 459 002a 0223     		movs	r3, #2
 460              	.LVL56:
 461 002c 0372     		strb	r3, [r0, #8]
 795:../drivers/fsl_flash.c ****     }
 462              		.loc 1 795 0
 463 002e 4FF48053 		mov	r3, #4096
 464 0032 C360     		str	r3, [r0, #12]
 465              	.LBE34:
 813:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentCount = 0;
 466              		.loc 1 813 0
 467 0034 4261     		str	r2, [r0, #20]
 814:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 468              		.loc 1 814 0
 469 0036 8261     		str	r2, [r0, #24]
 820:../drivers/fsl_flash.c ****     {
 470              		.loc 1 820 0
 471 0038 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
 472              	.LVL57:
 473 003c 48B1     		cbz	r0, .L34
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 474              		.loc 1 822 0
 475 003e 0C4B     		ldr	r3, .L40+8
 827:../drivers/fsl_flash.c ****         FLASH_PrepareExecuteInRamFunctions(config);
 476              		.loc 1 827 0
 477 0040 E361     		str	r3, [r4, #28]
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 478              		.loc 1 822 0
 479 0042 1A60     		str	r2, [r3]
 823:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 480              		.loc 1 823 0
 481 0044 0B4A     		ldr	r2, .L40+12
 482 0046 5A60     		str	r2, [r3, #4]
 828:../drivers/fsl_flash.c ****     }
 483              		.loc 1 828 0
 484 0048 2046     		mov	r0, r4
 825:../drivers/fsl_flash.c **** #endif
 485              		.loc 1 825 0
 486 004a 0B4A     		ldr	r2, .L40+16
 487 004c 9A60     		str	r2, [r3, #8]
 828:../drivers/fsl_flash.c ****     }
 488              		.loc 1 828 0
 489 004e FFF7FEFF 		bl	FLASH_PrepareExecuteInRamFunctions
 490              	.LVL58:
 491              	.L34:
 832:../drivers/fsl_flash.c ****     config->FlexRAMTotalSize = FSL_FEATURE_FLASH_FLEX_RAM_SIZE;
 492              		.loc 1 832 0
 493 0052 4FF0A053 		mov	r3, #335544320
 494 0056 2362     		str	r3, [r4, #32]
 833:../drivers/fsl_flash.c **** 
 495              		.loc 1 833 0
 496 0058 4FF48053 		mov	r3, #4096
 497 005c 6362     		str	r3, [r4, #36]
 847:../drivers/fsl_flash.c **** }
 498              		.loc 1 847 0
 499 005e 0020     		movs	r0, #0
 500 0060 10BD     		pop	{r4, pc}
 501              	.LVL59:
 502              	.L35:
 739:../drivers/fsl_flash.c ****     }
 503              		.loc 1 739 0
 504 0062 0420     		movs	r0, #4
 505              	.LVL60:
 848:../drivers/fsl_flash.c **** 
 506              		.loc 1 848 0
 507 0064 10BD     		pop	{r4, pc}
 508              	.LVL61:
 509              	.L41:
 510 0066 00BF     		.align	2
 511              	.L40:
 512 0068 00700440 		.word	1074032640
 513 006c 00000000 		.word	.LANCHOR4
 514 0070 00000000 		.word	.LANCHOR5
 515 0074 00000000 		.word	.LANCHOR6
 516 0078 00000000 		.word	.LANCHOR7
 517              		.cfi_endproc
 518              	.LFE147:
 520              		.section	.text.FLASH_ReadResource,"ax",%progbits
 521              		.align	1
 522              		.global	FLASH_ReadResource
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu fpv4-sp-d16
 528              	FLASH_ReadResource:
 529              	.LFB155:
1358:../drivers/fsl_flash.c ****     status_t returnCode;
 530              		.loc 1 1358 0
 531              		.cfi_startproc
 532              		@ args = 4, pretend = 0, frame = 32
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              	.LVL62:
 535 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 536              		.cfi_def_cfa_offset 36
 537              		.cfi_offset 4, -36
 538              		.cfi_offset 5, -32
 539              		.cfi_offset 6, -28
 540              		.cfi_offset 7, -24
 541              		.cfi_offset 8, -20
 542              		.cfi_offset 9, -16
 543              		.cfi_offset 10, -12
 544              		.cfi_offset 11, -8
 545              		.cfi_offset 14, -4
 546 0004 89B0     		sub	sp, sp, #36
 547              		.cfi_def_cfa_offset 72
1358:../drivers/fsl_flash.c ****     status_t returnCode;
 548              		.loc 1 1358 0
 549 0006 0D46     		mov	r5, r1
 550 0008 1646     		mov	r6, r2
 551 000a 9846     		mov	r8, r3
 552 000c 9DF84840 		ldrb	r4, [sp, #72]	@ zero_extendqisi2
1362:../drivers/fsl_flash.c ****     {
 553              		.loc 1 1362 0
 554 0010 0746     		mov	r7, r0
 555 0012 98B3     		cbz	r0, .L55
1362:../drivers/fsl_flash.c ****     {
 556              		.loc 1 1362 0 is_stmt 0 discriminator 1
 557 0014 92B3     		cbz	r2, .L55
 558              	.LVL63:
 559              	.LBB39:
 560              	.LBB40:
1367:../drivers/fsl_flash.c **** 
 561              		.loc 1 1367 0 is_stmt 1
 562 0016 6A46     		mov	r2, sp
 563              	.LVL64:
 564 0018 FFF7FEFF 		bl	flash_get_matched_operation_info
 565              	.LVL65:
 566              	.LBB41:
 567              	.LBB42:
3091:../drivers/fsl_flash.c **** 
3092:../drivers/fsl_flash.c **** /*! @brief Validates the given user key for flash erase APIs.*/
3093:../drivers/fsl_flash.c **** static status_t flash_check_user_key(uint32_t key)
3094:../drivers/fsl_flash.c **** {
3095:../drivers/fsl_flash.c ****     /* Validate the user key */
3096:../drivers/fsl_flash.c ****     if (key != kFLASH_ApiEraseKey)
3097:../drivers/fsl_flash.c ****     {
3098:../drivers/fsl_flash.c ****         return kStatus_FLASH_EraseKeyError;
3099:../drivers/fsl_flash.c ****     }
3100:../drivers/fsl_flash.c **** 
3101:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3102:../drivers/fsl_flash.c **** }
3103:../drivers/fsl_flash.c **** 
3104:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3105:../drivers/fsl_flash.c **** /*! @brief Updates FlexNVM memory partition status according to data flash 0 IFR.*/
3106:../drivers/fsl_flash.c **** static status_t flash_update_flexnvm_memory_partition_status(flash_config_t *config)
3107:../drivers/fsl_flash.c **** {
3108:../drivers/fsl_flash.c ****     struct
3109:../drivers/fsl_flash.c ****     {
3110:../drivers/fsl_flash.c ****         uint32_t reserved0;
3111:../drivers/fsl_flash.c ****         uint8_t FlexNVMPartitionCode;
3112:../drivers/fsl_flash.c ****         uint8_t EEPROMDataSetSize;
3113:../drivers/fsl_flash.c ****         uint16_t reserved1;
3114:../drivers/fsl_flash.c ****     } dataIFRReadOut;
3115:../drivers/fsl_flash.c ****     status_t returnCode;
3116:../drivers/fsl_flash.c **** 
3117:../drivers/fsl_flash.c ****     if (config == NULL)
3118:../drivers/fsl_flash.c ****     {
3119:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3120:../drivers/fsl_flash.c ****     }
3121:../drivers/fsl_flash.c **** 
3122:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3123:../drivers/fsl_flash.c ****     /* Get FlexNVM memory partition info from data flash IFR */
3124:../drivers/fsl_flash.c ****     returnCode = FLASH_ReadResource(config, DFLASH_IFR_READRESOURCE_START_ADDRESS, (uint32_t *)&dat
3125:../drivers/fsl_flash.c ****                                     sizeof(dataIFRReadOut), kFLASH_ResourceOptionFlashIfr);
3126:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
3127:../drivers/fsl_flash.c ****     {
3128:../drivers/fsl_flash.c ****         return kStatus_FLASH_PartitionStatusUpdateFailure;
3129:../drivers/fsl_flash.c ****     }
3130:../drivers/fsl_flash.c **** #else
3131:../drivers/fsl_flash.c **** #error "Cannot get FlexNVM memory partition info"
3132:../drivers/fsl_flash.c **** #endif
3133:../drivers/fsl_flash.c **** 
3134:../drivers/fsl_flash.c ****     /* Fill out partitioned EEPROM size */
3135:../drivers/fsl_flash.c ****     dataIFRReadOut.EEPROMDataSetSize &= 0x0FU;
3136:../drivers/fsl_flash.c ****     switch (dataIFRReadOut.EEPROMDataSetSize)
3137:../drivers/fsl_flash.c ****     {
3138:../drivers/fsl_flash.c ****         case 0x00U:
3139:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0000;
3140:../drivers/fsl_flash.c ****             break;
3141:../drivers/fsl_flash.c ****         case 0x01U:
3142:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0001;
3143:../drivers/fsl_flash.c ****             break;
3144:../drivers/fsl_flash.c ****         case 0x02U:
3145:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0010;
3146:../drivers/fsl_flash.c ****             break;
3147:../drivers/fsl_flash.c ****         case 0x03U:
3148:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0011;
3149:../drivers/fsl_flash.c ****             break;
3150:../drivers/fsl_flash.c ****         case 0x04U:
3151:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0100;
3152:../drivers/fsl_flash.c ****             break;
3153:../drivers/fsl_flash.c ****         case 0x05U:
3154:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0101;
3155:../drivers/fsl_flash.c ****             break;
3156:../drivers/fsl_flash.c ****         case 0x06U:
3157:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0110;
3158:../drivers/fsl_flash.c ****             break;
3159:../drivers/fsl_flash.c ****         case 0x07U:
3160:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0111;
3161:../drivers/fsl_flash.c ****             break;
3162:../drivers/fsl_flash.c ****         case 0x08U:
3163:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1000;
3164:../drivers/fsl_flash.c ****             break;
3165:../drivers/fsl_flash.c ****         case 0x09U:
3166:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1001;
3167:../drivers/fsl_flash.c ****             break;
3168:../drivers/fsl_flash.c ****         case 0x0AU:
3169:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1010;
3170:../drivers/fsl_flash.c ****             break;
3171:../drivers/fsl_flash.c ****         case 0x0BU:
3172:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1011;
3173:../drivers/fsl_flash.c ****             break;
3174:../drivers/fsl_flash.c ****         case 0x0CU:
3175:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1100;
3176:../drivers/fsl_flash.c ****             break;
3177:../drivers/fsl_flash.c ****         case 0x0DU:
3178:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1101;
3179:../drivers/fsl_flash.c ****             break;
3180:../drivers/fsl_flash.c ****         case 0x0EU:
3181:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1110;
3182:../drivers/fsl_flash.c ****             break;
3183:../drivers/fsl_flash.c ****         case 0x0FU:
3184:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1111;
3185:../drivers/fsl_flash.c ****             break;
3186:../drivers/fsl_flash.c ****         default:
3187:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED;
3188:../drivers/fsl_flash.c ****             break;
3189:../drivers/fsl_flash.c ****     }
3190:../drivers/fsl_flash.c **** 
3191:../drivers/fsl_flash.c ****     /* Fill out partitioned DFlash size */
3192:../drivers/fsl_flash.c ****     dataIFRReadOut.FlexNVMPartitionCode &= 0x0FU;
3193:../drivers/fsl_flash.c ****     switch (dataIFRReadOut.FlexNVMPartitionCode)
3194:../drivers/fsl_flash.c ****     {
3195:../drivers/fsl_flash.c ****         case 0x00U:
3196:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000 != 0xFFFFFFFF)
3197:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000;
3198:../drivers/fsl_flash.c **** #else
3199:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3200:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000 */
3201:../drivers/fsl_flash.c ****             break;
3202:../drivers/fsl_flash.c ****         case 0x01U:
3203:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001 != 0xFFFFFFFF)
3204:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001;
3205:../drivers/fsl_flash.c **** #else
3206:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3207:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001 */
3208:../drivers/fsl_flash.c ****             break;
3209:../drivers/fsl_flash.c ****         case 0x02U:
3210:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010 != 0xFFFFFFFF)
3211:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010;
3212:../drivers/fsl_flash.c **** #else
3213:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3214:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010 */
3215:../drivers/fsl_flash.c ****             break;
3216:../drivers/fsl_flash.c ****         case 0x03U:
3217:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011 != 0xFFFFFFFF)
3218:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011;
3219:../drivers/fsl_flash.c **** #else
3220:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3221:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011 */
3222:../drivers/fsl_flash.c ****             break;
3223:../drivers/fsl_flash.c ****         case 0x04U:
3224:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100 != 0xFFFFFFFF)
3225:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100;
3226:../drivers/fsl_flash.c **** #else
3227:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3228:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100 */
3229:../drivers/fsl_flash.c ****             break;
3230:../drivers/fsl_flash.c ****         case 0x05U:
3231:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101 != 0xFFFFFFFF)
3232:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101;
3233:../drivers/fsl_flash.c **** #else
3234:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3235:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101 */
3236:../drivers/fsl_flash.c ****             break;
3237:../drivers/fsl_flash.c ****         case 0x06U:
3238:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110 != 0xFFFFFFFF)
3239:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110;
3240:../drivers/fsl_flash.c **** #else
3241:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3242:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110 */
3243:../drivers/fsl_flash.c ****             break;
3244:../drivers/fsl_flash.c ****         case 0x07U:
3245:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111 != 0xFFFFFFFF)
3246:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111;
3247:../drivers/fsl_flash.c **** #else
3248:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3249:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111 */
3250:../drivers/fsl_flash.c ****             break;
3251:../drivers/fsl_flash.c ****         case 0x08U:
3252:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000 != 0xFFFFFFFF)
3253:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000;
3254:../drivers/fsl_flash.c **** #else
3255:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3256:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000 */
3257:../drivers/fsl_flash.c ****             break;
3258:../drivers/fsl_flash.c ****         case 0x09U:
3259:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001 != 0xFFFFFFFF)
3260:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001;
3261:../drivers/fsl_flash.c **** #else
3262:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3263:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001 */
3264:../drivers/fsl_flash.c ****             break;
3265:../drivers/fsl_flash.c ****         case 0x0AU:
3266:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010 != 0xFFFFFFFF)
3267:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010;
3268:../drivers/fsl_flash.c **** #else
3269:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3270:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010 */
3271:../drivers/fsl_flash.c ****             break;
3272:../drivers/fsl_flash.c ****         case 0x0BU:
3273:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011 != 0xFFFFFFFF)
3274:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011;
3275:../drivers/fsl_flash.c **** #else
3276:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3277:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011 */
3278:../drivers/fsl_flash.c ****             break;
3279:../drivers/fsl_flash.c ****         case 0x0CU:
3280:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100 != 0xFFFFFFFF)
3281:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100;
3282:../drivers/fsl_flash.c **** #else
3283:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3284:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100 */
3285:../drivers/fsl_flash.c ****             break;
3286:../drivers/fsl_flash.c ****         case 0x0DU:
3287:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101 != 0xFFFFFFFF)
3288:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101;
3289:../drivers/fsl_flash.c **** #else
3290:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3291:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101 */
3292:../drivers/fsl_flash.c ****             break;
3293:../drivers/fsl_flash.c ****         case 0x0EU:
3294:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110 != 0xFFFFFFFF)
3295:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110;
3296:../drivers/fsl_flash.c **** #else
3297:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3298:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110 */
3299:../drivers/fsl_flash.c ****             break;
3300:../drivers/fsl_flash.c ****         case 0x0FU:
3301:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111 != 0xFFFFFFFF)
3302:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111;
3303:../drivers/fsl_flash.c **** #else
3304:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3305:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111 */
3306:../drivers/fsl_flash.c ****             break;
3307:../drivers/fsl_flash.c ****         default:
3308:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3309:../drivers/fsl_flash.c ****             break;
3310:../drivers/fsl_flash.c ****     }
3311:../drivers/fsl_flash.c **** 
3312:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3313:../drivers/fsl_flash.c **** }
3314:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
3315:../drivers/fsl_flash.c **** 
3316:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3317:../drivers/fsl_flash.c **** /*! @brief Validates the range of the given resource address.*/
3318:../drivers/fsl_flash.c **** static status_t flash_check_resource_range(uint32_t start,
3319:../drivers/fsl_flash.c ****                                            uint32_t lengthInBytes,
3320:../drivers/fsl_flash.c ****                                            uint32_t alignmentBaseline,
3321:../drivers/fsl_flash.c ****                                            flash_read_resource_option_t option)
3322:../drivers/fsl_flash.c **** {
3323:../drivers/fsl_flash.c ****     status_t status;
3324:../drivers/fsl_flash.c ****     uint32_t maxReadbleAddress;
3325:../drivers/fsl_flash.c **** 
3326:../drivers/fsl_flash.c ****     if ((start & (alignmentBaseline - 1)) || (lengthInBytes & (alignmentBaseline - 1)))
 568              		.loc 1 3326 0
 569 001c 069B     		ldr	r3, [sp, #24]
 570 001e 45EA0802 		orr	r2, r5, r8
 571 0022 013B     		subs	r3, r3, #1
 572 0024 1342     		tst	r3, r2
 573 0026 4FD1     		bne	.L56
 574              	.LVL66:
3327:../drivers/fsl_flash.c ****     {
3328:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
3329:../drivers/fsl_flash.c ****     }
3330:../drivers/fsl_flash.c **** 
3331:../drivers/fsl_flash.c ****     status = kStatus_FLASH_Success;
3332:../drivers/fsl_flash.c **** 
3333:../drivers/fsl_flash.c ****     maxReadbleAddress = start + lengthInBytes - 1;
3334:../drivers/fsl_flash.c ****     if (option == kFLASH_ResourceOptionVersionId)
 575              		.loc 1 3334 0
 576 0028 012C     		cmp	r4, #1
3333:../drivers/fsl_flash.c ****     if (option == kFLASH_ResourceOptionVersionId)
 577              		.loc 1 3333 0
 578 002a 05EB0802 		add	r2, r5, r8
 579              	.LVL67:
 580              		.loc 1 3334 0
 581 002e 13D1     		bne	.L45
3335:../drivers/fsl_flash.c ****     {
3336:../drivers/fsl_flash.c ****         if ((start != kFLASH_ResourceRangeVersionIdStart) ||
 582              		.loc 1 3336 0
 583 0030 082D     		cmp	r5, #8
 584 0032 23D1     		bne	.L55
 585 0034 102A     		cmp	r2, #16
 586 0036 21D1     		bne	.L55
 587              	.LVL68:
 588              	.L46:
 589              	.LBE42:
 590              	.LBE41:
1387:../drivers/fsl_flash.c ****         }
 591              		.loc 1 1387 0
 592 0038 2406     		lsls	r4, r4, #24
 593              	.LVL69:
1380:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
 594              		.loc 1 1380 0
 595 003a DFF894B0 		ldr	fp, .L62+4
1387:../drivers/fsl_flash.c ****         }
 596              		.loc 1 1387 0
 597 003e DFF89490 		ldr	r9, .L62+8
1383:../drivers/fsl_flash.c ****         }
 598              		.loc 1 1383 0
 599 0042 DFF894A0 		ldr	r10, .L62+12
1387:../drivers/fsl_flash.c ****         }
 600              		.loc 1 1387 0
 601 0046 64F07F44 		orn	r4, r4, #-16777216
 602              	.LVL70:
 603              	.L48:
1377:../drivers/fsl_flash.c ****     {
 604              		.loc 1 1377 0
 605 004a B8F1000F 		cmp	r8, #0
 606 004e 17D1     		bne	.L53
 607 0050 4046     		mov	r0, r8
 608              	.LVL71:
 609              	.L42:
 610              	.LBE40:
 611              	.LBE39:
1414:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
 612              		.loc 1 1414 0
 613 0052 09B0     		add	sp, sp, #36
 614              		.cfi_remember_state
 615              		.cfi_def_cfa_offset 36
 616              		@ sp needed
 617 0054 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 618              	.LVL72:
 619              	.L45:
 620              		.cfi_restore_state
 621              	.LBB49:
 622              	.LBB47:
 623              	.LBB45:
 624              	.LBB43:
3337:../drivers/fsl_flash.c ****             ((start + lengthInBytes - 1) != kFLASH_ResourceRangeVersionIdEnd))
3338:../drivers/fsl_flash.c ****         {
3339:../drivers/fsl_flash.c ****             status = kStatus_FLASH_InvalidArgument;
3340:../drivers/fsl_flash.c ****         }
3341:../drivers/fsl_flash.c ****     }
3342:../drivers/fsl_flash.c ****     else if (option == kFLASH_ResourceOptionFlashIfr)
 625              		.loc 1 3342 0
 626 0058 84B9     		cbnz	r4, .L55
3333:../drivers/fsl_flash.c ****     if (option == kFLASH_ResourceOptionVersionId)
 627              		.loc 1 3333 0
 628 005a 013A     		subs	r2, r2, #1
 629              	.LVL73:
3343:../drivers/fsl_flash.c ****     {
3344:../drivers/fsl_flash.c ****         if (maxReadbleAddress < kFLASH_ResourceRangePflashIfrSizeInBytes)
 630              		.loc 1 3344 0
 631 005c B2F5806F 		cmp	r2, #1024
 632 0060 EAD3     		bcc	.L46
3345:../drivers/fsl_flash.c ****         {
3346:../drivers/fsl_flash.c ****         }
3347:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
3348:../drivers/fsl_flash.c ****         else if ((start >= kFLASH_ResourceRangePflashSwapIfrStart) &&
 633              		.loc 1 3348 0
 634 0062 B5F5802F 		cmp	r5, #262144
 635 0066 09D3     		bcc	.L55
 636 0068 184B     		ldr	r3, .L62
 637 006a 9A42     		cmp	r2, r3
 638 006c E4D9     		bls	.L46
3349:../drivers/fsl_flash.c ****                  (maxReadbleAddress <= kFLASH_ResourceRangePflashSwapIfrEnd))
3350:../drivers/fsl_flash.c ****         {
3351:../drivers/fsl_flash.c ****         }
3352:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
3353:../drivers/fsl_flash.c ****         else if ((start >= kFLASH_ResourceRangeDflashIfrStart) &&
 639              		.loc 1 3353 0
 640 006e B5F5000F 		cmp	r5, #8388608
 641 0072 03D3     		bcc	.L55
 642 0074 03F5F803 		add	r3, r3, #8126464
 643 0078 9A42     		cmp	r2, r3
 644 007a DDD9     		bls	.L46
 645              	.LVL74:
 646              	.L55:
 647              	.LBE43:
 648              	.LBE45:
 649              	.LBE47:
 650              	.LBE49:
1364:../drivers/fsl_flash.c ****     }
 651              		.loc 1 1364 0
 652 007c 0420     		movs	r0, #4
 653 007e E8E7     		b	.L42
 654              	.LVL75:
 655              	.L53:
 656              	.LBB50:
 657              	.LBB48:
1380:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
 658              		.loc 1 1380 0
 659 0080 25F07F43 		bic	r3, r5, #-16777216
 660 0084 43F04073 		orr	r3, r3, #50331648
 661 0088 CBF80030 		str	r3, [fp]
1381:../drivers/fsl_flash.c ****         {
 662              		.loc 1 1381 0
 663 008c 069B     		ldr	r3, [sp, #24]
 664 008e 042B     		cmp	r3, #4
 665 0090 15D1     		bne	.L49
1383:../drivers/fsl_flash.c ****         }
 666              		.loc 1 1383 0
 667 0092 CAF80040 		str	r4, [r10]
 668              	.L50:
1394:../drivers/fsl_flash.c **** 
 669              		.loc 1 1394 0
 670 0096 3846     		mov	r0, r7
 671 0098 FFF7FEFF 		bl	flash_command_sequence
 672              	.LVL76:
1396:../drivers/fsl_flash.c ****         {
 673              		.loc 1 1396 0
 674 009c 0028     		cmp	r0, #0
 675 009e D8D1     		bne	.L42
 676              	.LVL77:
1402:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
 677              		.loc 1 1402 0
 678 00a0 D9F80030 		ldr	r3, [r9]
 679 00a4 3360     		str	r3, [r6]
1403:../drivers/fsl_flash.c ****         {
 680              		.loc 1 1403 0
 681 00a6 069B     		ldr	r3, [sp, #24]
 682 00a8 082B     		cmp	r3, #8
1405:../drivers/fsl_flash.c ****         }
 683              		.loc 1 1405 0
 684 00aa 05BF     		ittet	eq
 685 00ac DAF80020 		ldreq	r2, [r10]
 686 00b0 7260     		streq	r2, [r6, #4]
1402:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
 687              		.loc 1 1402 0
 688 00b2 0436     		addne	r6, r6, #4
 689              	.LVL78:
1405:../drivers/fsl_flash.c ****         }
 690              		.loc 1 1405 0
 691 00b4 0836     		addeq	r6, r6, #8
 692              	.LVL79:
1408:../drivers/fsl_flash.c ****         /* update lengthInBytes for next iteration */
 693              		.loc 1 1408 0
 694 00b6 1D44     		add	r5, r5, r3
 695              	.LVL80:
1410:../drivers/fsl_flash.c ****     }
 696              		.loc 1 1410 0
 697 00b8 A8EB0308 		sub	r8, r8, r3
 698              	.LVL81:
 699 00bc C5E7     		b	.L48
 700              	.LVL82:
 701              	.L49:
1385:../drivers/fsl_flash.c ****         {
 702              		.loc 1 1385 0
 703 00be 082B     		cmp	r3, #8
1387:../drivers/fsl_flash.c ****         }
 704              		.loc 1 1387 0
 705 00c0 08BF     		it	eq
 706 00c2 C9F80040 		streq	r4, [r9]
 707 00c6 E6E7     		b	.L50
 708              	.LVL83:
 709              	.L56:
 710              	.LBB46:
 711              	.LBB44:
3328:../drivers/fsl_flash.c ****     }
 712              		.loc 1 3328 0
 713 00c8 6520     		movs	r0, #101
 714 00ca C2E7     		b	.L42
 715              	.L63:
 716              		.align	2
 717              	.L62:
 718 00cc FF030400 		.word	263167
 719 00d0 04000240 		.word	1073872900
 720 00d4 08000240 		.word	1073872904
 721 00d8 0C000240 		.word	1073872908
 722              	.LBE44:
 723              	.LBE46:
 724              	.LBE48:
 725              	.LBE50:
 726              		.cfi_endproc
 727              	.LFE155:
 729              		.section	.text.FLASH_ReadOnce,"ax",%progbits
 730              		.align	1
 731              		.global	FLASH_ReadOnce
 732              		.syntax unified
 733              		.thumb
 734              		.thumb_func
 735              		.fpu fpv4-sp-d16
 737              	FLASH_ReadOnce:
 738              	.LFB156:
1418:../drivers/fsl_flash.c ****     status_t returnCode;
 739              		.loc 1 1418 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              	.LVL84:
 744 0000 10B5     		push	{r4, lr}
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 4, -8
 747              		.cfi_offset 14, -4
1418:../drivers/fsl_flash.c ****     status_t returnCode;
 748              		.loc 1 1418 0
 749 0002 1446     		mov	r4, r2
1421:../drivers/fsl_flash.c ****     {
 750              		.loc 1 1421 0
 751 0004 88B1     		cbz	r0, .L67
1421:../drivers/fsl_flash.c ****     {
 752              		.loc 1 1421 0 is_stmt 0 discriminator 1
 753 0006 82B1     		cbz	r2, .L67
1427:../drivers/fsl_flash.c **** 
 754              		.loc 1 1427 0 is_stmt 1
 755 0008 0904     		lsls	r1, r1, #16
 756              	.LVL85:
 757 000a 094B     		ldr	r3, .L68
 758              	.LVL86:
 759 000c 094A     		ldr	r2, .L68+4
 760              	.LVL87:
 761 000e 01F47F01 		and	r1, r1, #16711680
 762 0012 0B43     		orrs	r3, r3, r1
 763 0014 1360     		str	r3, [r2]
1430:../drivers/fsl_flash.c **** 
 764              		.loc 1 1430 0
 765 0016 FFF7FEFF 		bl	flash_command_sequence
 766              	.LVL88:
1432:../drivers/fsl_flash.c ****     {
 767              		.loc 1 1432 0
 768 001a 38B9     		cbnz	r0, .L64
1434:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
 769              		.loc 1 1434 0
 770 001c 064B     		ldr	r3, .L68+8
 771 001e 1B68     		ldr	r3, [r3]
 772 0020 2360     		str	r3, [r4]
1445:../drivers/fsl_flash.c ****         }
 773              		.loc 1 1445 0
 774 0022 064B     		ldr	r3, .L68+12
 775 0024 1B68     		ldr	r3, [r3]
 776 0026 6360     		str	r3, [r4, #4]
 777 0028 10BD     		pop	{r4, pc}
 778              	.LVL89:
 779              	.L67:
1423:../drivers/fsl_flash.c ****     }
 780              		.loc 1 1423 0
 781 002a 0420     		movs	r0, #4
 782              	.LVL90:
 783              	.L64:
1451:../drivers/fsl_flash.c **** 
 784              		.loc 1 1451 0
 785 002c 10BD     		pop	{r4, pc}
 786              	.LVL91:
 787              	.L69:
 788 002e 00BF     		.align	2
 789              	.L68:
 790 0030 FFFF0041 		.word	1090584575
 791 0034 04000240 		.word	1073872900
 792 0038 08000240 		.word	1073872904
 793 003c 0C000240 		.word	1073872908
 794              		.cfi_endproc
 795              	.LFE156:
 797              		.section	.text.FLASH_GetSecurityState,"ax",%progbits
 798              		.align	1
 799              		.global	FLASH_GetSecurityState
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 803              		.fpu fpv4-sp-d16
 805              	FLASH_GetSecurityState:
 806              	.LFB157:
1454:../drivers/fsl_flash.c ****     /* store data read from flash register */
 807              		.loc 1 1454 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811              		@ link register save eliminated.
 812              	.LVL92:
1458:../drivers/fsl_flash.c ****     {
 813              		.loc 1 1458 0
 814 0000 90B1     		cbz	r0, .L75
1458:../drivers/fsl_flash.c ****     {
 815              		.loc 1 1458 0 is_stmt 0 discriminator 1
 816 0002 89B1     		cbz	r1, .L75
1464:../drivers/fsl_flash.c **** 
 817              		.loc 1 1464 0 is_stmt 1
 818 0004 094B     		ldr	r3, .L77
 819 0006 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 820 0008 DBB2     		uxtb	r3, r3
 821              	.LVL93:
1467:../drivers/fsl_flash.c ****     {
 822              		.loc 1 1467 0
 823 000a 03F00302 		and	r2, r3, #3
 824 000e 022A     		cmp	r2, #2
 825 0010 03D1     		bne	.L72
1470:../drivers/fsl_flash.c ****     }
 826              		.loc 1 1470 0
 827 0012 074B     		ldr	r3, .L77+4
 828              	.LVL94:
 829              	.L76:
1484:../drivers/fsl_flash.c ****         }
 830              		.loc 1 1484 0
 831 0014 0B60     		str	r3, [r1]
1488:../drivers/fsl_flash.c **** }
 832              		.loc 1 1488 0
 833 0016 0020     		movs	r0, #0
 834              	.LVL95:
 835 0018 7047     		bx	lr
 836              	.LVL96:
 837              	.L72:
1476:../drivers/fsl_flash.c ****         {
 838              		.loc 1 1476 0
 839 001a 03F0C003 		and	r3, r3, #192
 840              	.LVL97:
 841 001e 802B     		cmp	r3, #128
1479:../drivers/fsl_flash.c ****         }
 842              		.loc 1 1479 0
 843 0020 0CBF     		ite	eq
 844 0022 044B     		ldreq	r3, .L77+8
1484:../drivers/fsl_flash.c ****         }
 845              		.loc 1 1484 0
 846 0024 044B     		ldrne	r3, .L77+12
 847 0026 F5E7     		b	.L76
 848              	.L75:
1460:../drivers/fsl_flash.c ****     }
 849              		.loc 1 1460 0
 850 0028 0420     		movs	r0, #4
 851              	.LVL98:
1489:../drivers/fsl_flash.c **** 
 852              		.loc 1 1489 0
 853 002a 7047     		bx	lr
 854              	.L78:
 855              		.align	2
 856              	.L77:
 857 002c 00000240 		.word	1073872896
 858 0030 3CC33CC3 		.word	-1019428036
 859 0034 A55AA55A 		.word	1520786085
 860 0038 A53CC35A 		.word	1522744485
 861              		.cfi_endproc
 862              	.LFE157:
 864              		.section	.text.FLASH_SecurityBypass,"ax",%progbits
 865              		.align	1
 866              		.global	FLASH_SecurityBypass
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu fpv4-sp-d16
 872              	FLASH_SecurityBypass:
 873              	.LFB158:
1492:../drivers/fsl_flash.c ****     uint8_t registerValue; /* registerValue */
 874              		.loc 1 1492 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879              	.LVL99:
1496:../drivers/fsl_flash.c ****     {
 880              		.loc 1 1496 0
 881 0000 20B3     		cbz	r0, .L82
1496:../drivers/fsl_flash.c ****     {
 882              		.loc 1 1496 0 is_stmt 0 discriminator 1
 883 0002 19B3     		cbz	r1, .L82
 884              	.LVL100:
1505:../drivers/fsl_flash.c **** 
 885              		.loc 1 1505 0 is_stmt 1
 886 0004 134B     		ldr	r3, .L84
 887 0006 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 888              	.LVL101:
1509:../drivers/fsl_flash.c ****     {
 889              		.loc 1 1509 0
 890 0008 03F00303 		and	r3, r3, #3
 891              	.LVL102:
 892 000c 022B     		cmp	r3, #2
 893 000e 1FD0     		beq	.L83
1512:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[0], backdoorKey[1], backdoorKey[2], bac
 894              		.loc 1 1512 0
 895 0010 114B     		ldr	r3, .L84+4
 896 0012 6FF03A42 		mvn	r2, #-1174405120
 897 0016 1A60     		str	r2, [r3]
1513:../drivers/fsl_flash.c ****         kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[4], backdoorKey[5], backdoorKey[6], bac
 898              		.loc 1 1513 0
 899 0018 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 900 001a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 901 001c 1B04     		lsls	r3, r3, #16
 902 001e 43EA0263 		orr	r3, r3, r2, lsl #24
 903 0022 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 904 0024 1343     		orrs	r3, r3, r2
 905 0026 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 906 0028 43EA0223 		orr	r3, r3, r2, lsl #8
 907 002c 0B4A     		ldr	r2, .L84+8
 908 002e 1360     		str	r3, [r2]
1514:../drivers/fsl_flash.c **** 
 909              		.loc 1 1514 0
 910 0030 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 911 0032 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 912 0034 1B04     		lsls	r3, r3, #16
 913 0036 43EA0263 		orr	r3, r3, r2, lsl #24
 914 003a CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 915 003c 1343     		orrs	r3, r3, r2
 916 003e 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 917 0040 43EA0223 		orr	r3, r3, r2, lsl #8
 918 0044 064A     		ldr	r2, .L84+12
 919 0046 1360     		str	r3, [r2]
1517:../drivers/fsl_flash.c ****     }
 920              		.loc 1 1517 0
 921 0048 FFF7FEBF 		b	flash_command_sequence
 922              	.LVL103:
 923              	.L82:
1498:../drivers/fsl_flash.c ****     }
 924              		.loc 1 1498 0
 925 004c 0420     		movs	r0, #4
 926              	.LVL104:
 927 004e 7047     		bx	lr
 928              	.LVL105:
 929              	.L83:
1502:../drivers/fsl_flash.c **** 
 930              		.loc 1 1502 0
 931 0050 0020     		movs	r0, #0
 932              	.LVL106:
1521:../drivers/fsl_flash.c **** 
 933              		.loc 1 1521 0
 934 0052 7047     		bx	lr
 935              	.L85:
 936              		.align	2
 937              	.L84:
 938 0054 00000240 		.word	1073872896
 939 0058 04000240 		.word	1073872900
 940 005c 08000240 		.word	1073872904
 941 0060 0C000240 		.word	1073872908
 942              		.cfi_endproc
 943              	.LFE158:
 945              		.section	.text.FLASH_VerifyEraseAll,"ax",%progbits
 946              		.align	1
 947              		.global	FLASH_VerifyEraseAll
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu fpv4-sp-d16
 953              	FLASH_VerifyEraseAll:
 954              	.LFB159:
1524:../drivers/fsl_flash.c ****     if (config == NULL)
 955              		.loc 1 1524 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 960              	.LVL107:
1525:../drivers/fsl_flash.c ****     {
 961              		.loc 1 1525 0
 962 0000 40B1     		cbz	r0, .L87
1531:../drivers/fsl_flash.c **** 
 963              		.loc 1 1531 0
 964 0002 054B     		ldr	r3, .L88
 965 0004 43EA0141 		orr	r1, r3, r1, lsl #16
 966              	.LVL108:
 967 0008 03F58033 		add	r3, r3, #65536
 968 000c 0533     		adds	r3, r3, #5
 969 000e 1960     		str	r1, [r3]
1534:../drivers/fsl_flash.c **** }
 970              		.loc 1 1534 0
 971 0010 FFF7FEBF 		b	flash_command_sequence
 972              	.LVL109:
 973              	.L87:
1535:../drivers/fsl_flash.c **** 
 974              		.loc 1 1535 0
 975 0014 0420     		movs	r0, #4
 976              	.LVL110:
 977 0016 7047     		bx	lr
 978              	.L89:
 979              		.align	2
 980              	.L88:
 981 0018 FFFF0040 		.word	1073807359
 982              		.cfi_endproc
 983              	.LFE159:
 985              		.section	.text.FLASH_VerifyErase,"ax",%progbits
 986              		.align	1
 987              		.global	FLASH_VerifyErase
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 991              		.fpu fpv4-sp-d16
 993              	FLASH_VerifyErase:
 994              	.LFB160:
1538:../drivers/fsl_flash.c ****     /* Check arguments. */
 995              		.loc 1 1538 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 40
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              	.LVL111:
 1000 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1001              		.cfi_def_cfa_offset 36
 1002              		.cfi_offset 4, -36
 1003              		.cfi_offset 5, -32
 1004              		.cfi_offset 6, -28
 1005              		.cfi_offset 7, -24
 1006              		.cfi_offset 8, -20
 1007              		.cfi_offset 9, -16
 1008              		.cfi_offset 10, -12
 1009              		.cfi_offset 11, -8
 1010              		.cfi_offset 14, -4
 1011 0004 8BB0     		sub	sp, sp, #44
 1012              		.cfi_def_cfa_offset 80
1538:../drivers/fsl_flash.c ****     /* Check arguments. */
 1013              		.loc 1 1538 0
 1014 0006 8246     		mov	r10, r0
 1015 0008 0C46     		mov	r4, r1
 1016 000a 1546     		mov	r5, r2
1546:../drivers/fsl_flash.c **** 
 1017              		.loc 1 1546 0
 1018 000c 02AA     		add	r2, sp, #8
 1019              	.LVL112:
1538:../drivers/fsl_flash.c ****     /* Check arguments. */
 1020              		.loc 1 1538 0
 1021 000e 1F46     		mov	r7, r3
1546:../drivers/fsl_flash.c **** 
 1022              		.loc 1 1546 0
 1023 0010 FFF7FEFF 		bl	flash_get_matched_operation_info
 1024              	.LVL113:
1548:../drivers/fsl_flash.c ****     if (returnCode)
 1025              		.loc 1 1548 0
 1026 0014 079B     		ldr	r3, [sp, #28]
 1027 0016 2A46     		mov	r2, r5
 1028 0018 2146     		mov	r1, r4
 1029 001a 5046     		mov	r0, r10
 1030 001c FFF7FEFF 		bl	flash_check_range
 1031              	.LVL114:
1549:../drivers/fsl_flash.c ****     {
 1032              		.loc 1 1549 0
 1033 0020 8146     		mov	r9, r0
 1034 0022 B8B9     		cbnz	r0, .L90
1554:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
 1035              		.loc 1 1554 0
 1036 0024 2146     		mov	r1, r4
 1037 0026 02AA     		add	r2, sp, #8
 1038 0028 5046     		mov	r0, r10
 1039              	.LVL115:
 1040 002a FFF7FEFF 		bl	flash_get_matched_operation_info
 1041              	.LVL116:
1555:../drivers/fsl_flash.c ****     blockSize = flashOperationInfo.activeBlockSize;
 1042              		.loc 1 1555 0
 1043 002e 029C     		ldr	r4, [sp, #8]
 1044              	.LVL117:
1556:../drivers/fsl_flash.c **** 
 1045              		.loc 1 1556 0
 1046 0030 DDF810B0 		ldr	fp, [sp, #16]
 1047              	.LVL118:
 1048              	.LBB51:
1579:../drivers/fsl_flash.c **** 
 1049              		.loc 1 1579 0
 1050 0034 1949     		ldr	r1, .L96
 1051              	.LBE51:
1558:../drivers/fsl_flash.c ****     if (nextBlockStartAddress == start)
 1052              		.loc 1 1558 0
 1053 0036 CBF10002 		rsb	r2, fp, #0
 1054 003a 6342     		negs	r3, r4
 1055 003c 1340     		ands	r3, r3, r2
 1056 003e 5E42     		negs	r6, r3
 1057              	.LVL119:
1559:../drivers/fsl_flash.c ****     {
 1058              		.loc 1 1559 0
 1059 0040 B442     		cmp	r4, r6
 1060              	.LBB52:
1579:../drivers/fsl_flash.c **** 
 1061              		.loc 1 1579 0
 1062 0042 4FEA0727 		lsl	r7, r7, #8
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1063              		.loc 1 1578 0
 1064 0046 164A     		ldr	r2, .L96+4
 1065              	.LBE52:
1561:../drivers/fsl_flash.c ****     }
 1066              		.loc 1 1561 0
 1067 0048 08BF     		it	eq
 1068 004a ABEB0306 		subeq	r6, fp, r3
 1069              	.LVL120:
 1070 004e 47F0FF07 		orr	r7, r7, #255
 1071              	.LVL121:
 1072              	.L93:
1566:../drivers/fsl_flash.c ****     {
 1073              		.loc 1 1566 0
 1074 0052 1DB9     		cbnz	r5, .L94
 1075              	.LVL122:
 1076              	.L90:
1594:../drivers/fsl_flash.c **** 
 1077              		.loc 1 1594 0
 1078 0054 4846     		mov	r0, r9
 1079 0056 0BB0     		add	sp, sp, #44
 1080              		.cfi_remember_state
 1081              		.cfi_def_cfa_offset 36
 1082              		@ sp needed
 1083 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1084              	.LVL123:
 1085              	.L94:
 1086              		.cfi_restore_state
 1087              	.LBB53:
1569:../drivers/fsl_flash.c ****         if (verifyLength > remainingBytes)
 1088              		.loc 1 1569 0
 1089 005c A6EB0408 		sub	r8, r6, r4
 1090              	.LVL124:
 1091 0060 A845     		cmp	r8, r5
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1092              		.loc 1 1578 0
 1093 0062 24F07F40 		bic	r0, r4, #-16777216
1575:../drivers/fsl_flash.c **** 
 1094              		.loc 1 1575 0
 1095 0066 079B     		ldr	r3, [sp, #28]
 1096 0068 28BF     		it	cs
 1097 006a A846     		movcs	r8, r5
 1098              	.LVL125:
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1099              		.loc 1 1578 0
 1100 006c 40F08070 		orr	r0, r0, #16777216
1575:../drivers/fsl_flash.c **** 
 1101              		.loc 1 1575 0
 1102 0070 B8FBF3F3 		udiv	r3, r8, r3
 1103              	.LVL126:
1579:../drivers/fsl_flash.c **** 
 1104              		.loc 1 1579 0
 1105 0074 47EA0343 		orr	r3, r7, r3, lsl #16
 1106              	.LVL127:
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1107              		.loc 1 1578 0
 1108 0078 1060     		str	r0, [r2]
 1109              	.LVL128:
 1110 007a 0192     		str	r2, [sp, #4]
1582:../drivers/fsl_flash.c ****         if (returnCode)
 1111              		.loc 1 1582 0
 1112 007c 5046     		mov	r0, r10
1579:../drivers/fsl_flash.c **** 
 1113              		.loc 1 1579 0
 1114 007e 0B60     		str	r3, [r1]
 1115 0080 0091     		str	r1, [sp]
1582:../drivers/fsl_flash.c ****         if (returnCode)
 1116              		.loc 1 1582 0
 1117 0082 FFF7FEFF 		bl	flash_command_sequence
 1118              	.LVL129:
1583:../drivers/fsl_flash.c ****         {
 1119              		.loc 1 1583 0
 1120 0086 30B9     		cbnz	r0, .L95
1588:../drivers/fsl_flash.c ****         start += verifyLength;
 1121              		.loc 1 1588 0
 1122 0088 A5EB0805 		sub	r5, r5, r8
 1123              	.LVL130:
1589:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
 1124              		.loc 1 1589 0
 1125 008c 4444     		add	r4, r4, r8
 1126              	.LVL131:
1590:../drivers/fsl_flash.c ****     }
 1127              		.loc 1 1590 0
 1128 008e 5E44     		add	r6, r6, fp
 1129              	.LVL132:
 1130 0090 9DE80600 		ldm	sp, {r1, r2}
 1131              	.LVL133:
 1132 0094 DDE7     		b	.L93
 1133              	.L95:
1582:../drivers/fsl_flash.c ****         if (returnCode)
 1134              		.loc 1 1582 0
 1135 0096 8146     		mov	r9, r0
 1136 0098 DCE7     		b	.L90
 1137              	.L97:
 1138 009a 00BF     		.align	2
 1139              	.L96:
 1140 009c 08000240 		.word	1073872904
 1141 00a0 04000240 		.word	1073872900
 1142              	.LBE53:
 1143              		.cfi_endproc
 1144              	.LFE160:
 1146              		.section	.text.FLASH_VerifyProgram,"ax",%progbits
 1147              		.align	1
 1148              		.global	FLASH_VerifyProgram
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1152              		.fpu fpv4-sp-d16
 1154              	FLASH_VerifyProgram:
 1155              	.LFB161:
1603:../drivers/fsl_flash.c ****     status_t returnCode;
 1156              		.loc 1 1603 0
 1157              		.cfi_startproc
 1158              		@ args = 12, pretend = 0, frame = 40
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              	.LVL134:
 1161 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1162              		.cfi_def_cfa_offset 36
 1163              		.cfi_offset 4, -36
 1164              		.cfi_offset 5, -32
 1165              		.cfi_offset 6, -28
 1166              		.cfi_offset 7, -24
 1167              		.cfi_offset 8, -20
 1168              		.cfi_offset 9, -16
 1169              		.cfi_offset 10, -12
 1170              		.cfi_offset 11, -8
 1171              		.cfi_offset 14, -4
 1172 0004 8146     		mov	r9, r0
 1173 0006 8BB0     		sub	sp, sp, #44
 1174              		.cfi_def_cfa_offset 80
1603:../drivers/fsl_flash.c ****     status_t returnCode;
 1175              		.loc 1 1603 0
 1176 0008 0C46     		mov	r4, r1
 1177 000a 1646     		mov	r6, r2
1607:../drivers/fsl_flash.c ****     {
 1178              		.loc 1 1607 0
 1179 000c 9846     		mov	r8, r3
 1180 000e 002B     		cmp	r3, #0
 1181 0010 3CD0     		beq	.L104
1612:../drivers/fsl_flash.c **** 
 1182              		.loc 1 1612 0
 1183 0012 02AA     		add	r2, sp, #8
 1184              	.LVL135:
 1185 0014 FFF7FEFF 		bl	flash_get_matched_operation_info
 1186              	.LVL136:
1614:../drivers/fsl_flash.c ****     if (returnCode)
 1187              		.loc 1 1614 0
 1188 0018 2146     		mov	r1, r4
 1189 001a 099B     		ldr	r3, [sp, #36]
 1190 001c 3246     		mov	r2, r6
 1191 001e 4846     		mov	r0, r9
 1192 0020 FFF7FEFF 		bl	flash_check_range
 1193              	.LVL137:
1615:../drivers/fsl_flash.c ****     {
 1194              		.loc 1 1615 0
 1195 0024 0446     		mov	r4, r0
 1196              	.LVL138:
 1197 0026 58B9     		cbnz	r0, .L98
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1198              		.loc 1 1626 0
 1199 0028 9DF85050 		ldrb	r5, [sp, #80]	@ zero_extendqisi2
1620:../drivers/fsl_flash.c **** 
 1200              		.loc 1 1620 0
 1201 002c 029F     		ldr	r7, [sp, #8]
 1202              	.LVL139:
1625:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
 1203              		.loc 1 1625 0
 1204 002e DFF864A0 		ldr	r10, .L109+4
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1205              		.loc 1 1626 0
 1206 0032 DFF864B0 		ldr	fp, .L109+8
1627:../drivers/fsl_flash.c **** 
 1207              		.loc 1 1627 0
 1208 0036 1649     		ldr	r1, .L109
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1209              		.loc 1 1626 0
 1210 0038 2D06     		lsls	r5, r5, #24
 1211 003a 65F07F45 		orn	r5, r5, #-16777216
 1212              	.LVL140:
 1213              	.L100:
1622:../drivers/fsl_flash.c ****     {
 1214              		.loc 1 1622 0
 1215 003e 1EB9     		cbnz	r6, .L103
 1216              	.LVL141:
 1217              	.L98:
1652:../drivers/fsl_flash.c **** 
 1218              		.loc 1 1652 0
 1219 0040 2046     		mov	r0, r4
 1220 0042 0BB0     		add	sp, sp, #44
 1221              		.cfi_remember_state
 1222              		.cfi_def_cfa_offset 36
 1223              		@ sp needed
 1224 0044 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1225              	.LVL142:
 1226              	.L103:
 1227              		.cfi_restore_state
1625:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
 1228              		.loc 1 1625 0
 1229 0048 27F07F40 		bic	r0, r7, #-16777216
 1230 004c 40F00070 		orr	r0, r0, #33554432
 1231 0050 CAF80000 		str	r0, [r10]
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1232              		.loc 1 1626 0
 1233 0054 CBF80050 		str	r5, [fp]
1627:../drivers/fsl_flash.c **** 
 1234              		.loc 1 1627 0
 1235 0058 D8F80000 		ldr	r0, [r8]
 1236 005c 0860     		str	r0, [r1]
1630:../drivers/fsl_flash.c **** 
 1237              		.loc 1 1630 0
 1238 005e 4846     		mov	r0, r9
1627:../drivers/fsl_flash.c **** 
 1239              		.loc 1 1627 0
 1240 0060 0191     		str	r1, [sp, #4]
1630:../drivers/fsl_flash.c **** 
 1241              		.loc 1 1630 0
 1242 0062 FFF7FEFF 		bl	flash_command_sequence
 1243              	.LVL143:
1633:../drivers/fsl_flash.c ****         {
 1244              		.loc 1 1633 0
 1245 0066 0199     		ldr	r1, [sp, #4]
 1246 0068 48B1     		cbz	r0, .L101
1635:../drivers/fsl_flash.c ****             {
 1247              		.loc 1 1635 0
 1248 006a 159B     		ldr	r3, [sp, #84]
 1249 006c 03B1     		cbz	r3, .L102
1637:../drivers/fsl_flash.c ****             }
 1250              		.loc 1 1637 0
 1251 006e 1F60     		str	r7, [r3]
 1252              	.L102:
1639:../drivers/fsl_flash.c ****             {
 1253              		.loc 1 1639 0
 1254 0070 169B     		ldr	r3, [sp, #88]
 1255 0072 13B1     		cbz	r3, .L105
1641:../drivers/fsl_flash.c ****             }
 1256              		.loc 1 1641 0
 1257 0074 169A     		ldr	r2, [sp, #88]
 1258 0076 0023     		movs	r3, #0
 1259 0078 1360     		str	r3, [r2]
 1260              	.L105:
1630:../drivers/fsl_flash.c **** 
 1261              		.loc 1 1630 0
 1262 007a 0446     		mov	r4, r0
 1263 007c E0E7     		b	.L98
 1264              	.L101:
1646:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
 1265              		.loc 1 1646 0
 1266 007e 0998     		ldr	r0, [sp, #36]
 1267              	.LVL144:
1647:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
 1268              		.loc 1 1647 0
 1269 0080 20F0030E 		bic	lr, r0, #3
1646:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
 1270              		.loc 1 1646 0
 1271 0084 361A     		subs	r6, r6, r0
 1272              	.LVL145:
1647:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
 1273              		.loc 1 1647 0
 1274 0086 F044     		add	r8, r8, lr
 1275              	.LVL146:
1648:../drivers/fsl_flash.c ****     }
 1276              		.loc 1 1648 0
 1277 0088 0744     		add	r7, r7, r0
 1278              	.LVL147:
 1279 008a D8E7     		b	.L100
 1280              	.LVL148:
 1281              	.L104:
1609:../drivers/fsl_flash.c ****     }
 1282              		.loc 1 1609 0
 1283 008c 0424     		movs	r4, #4
 1284 008e D7E7     		b	.L98
 1285              	.L110:
 1286              		.align	2
 1287              	.L109:
 1288 0090 0C000240 		.word	1073872908
 1289 0094 04000240 		.word	1073872900
 1290 0098 08000240 		.word	1073872904
 1291              		.cfi_endproc
 1292              	.LFE161:
 1294              		.section	.text.FLASH_VerifyEraseAllExecuteOnlySegments,"ax",%progbits
 1295              		.align	1
 1296              		.global	FLASH_VerifyEraseAllExecuteOnlySegments
 1297              		.syntax unified
 1298              		.thumb
 1299              		.thumb_func
 1300              		.fpu fpv4-sp-d16
 1302              	FLASH_VerifyEraseAllExecuteOnlySegments:
 1303              	.LFB162:
1655:../drivers/fsl_flash.c ****     if (config == NULL)
 1304              		.loc 1 1655 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309              	.LVL149:
1656:../drivers/fsl_flash.c ****     {
 1310              		.loc 1 1656 0
 1311 0000 30B1     		cbz	r0, .L112
1662:../drivers/fsl_flash.c **** 
 1312              		.loc 1 1662 0
 1313 0002 044B     		ldr	r3, .L113
 1314 0004 43EA0141 		orr	r1, r3, r1, lsl #16
 1315              	.LVL150:
 1316 0008 034B     		ldr	r3, .L113+4
 1317 000a 1960     		str	r1, [r3]
1665:../drivers/fsl_flash.c **** }
 1318              		.loc 1 1665 0
 1319 000c FFF7FEBF 		b	flash_command_sequence
 1320              	.LVL151:
 1321              	.L112:
1666:../drivers/fsl_flash.c **** 
 1322              		.loc 1 1666 0
 1323 0010 0420     		movs	r0, #4
 1324              	.LVL152:
 1325 0012 7047     		bx	lr
 1326              	.L114:
 1327              		.align	2
 1328              	.L113:
 1329 0014 FFFF004A 		.word	1241579519
 1330 0018 04000240 		.word	1073872900
 1331              		.cfi_endproc
 1332              	.LFE162:
 1334              		.section	.text.FLASH_IsProtected,"ax",%progbits
 1335              		.align	1
 1336              		.global	FLASH_IsProtected
 1337              		.syntax unified
 1338              		.thumb
 1339              		.thumb_func
 1340              		.fpu fpv4-sp-d16
 1342              	FLASH_IsProtected:
 1343              	.LFB163:
1672:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
 1344              		.loc 1 1672 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 176
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348              	.LVL153:
 1349 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1350              		.cfi_def_cfa_offset 28
 1351              		.cfi_offset 4, -28
 1352              		.cfi_offset 5, -24
 1353              		.cfi_offset 6, -20
 1354              		.cfi_offset 7, -16
 1355              		.cfi_offset 8, -12
 1356              		.cfi_offset 9, -8
 1357              		.cfi_offset 14, -4
 1358 0004 0446     		mov	r4, r0
 1359 0006 ADB0     		sub	sp, sp, #180
 1360              		.cfi_def_cfa_offset 208
1672:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
 1361              		.loc 1 1672 0
 1362 0008 0D46     		mov	r5, r1
 1363 000a 1646     		mov	r6, r2
1691:../drivers/fsl_flash.c ****     {
 1364              		.loc 1 1691 0
 1365 000c 1F46     		mov	r7, r3
 1366 000e 002B     		cmp	r3, #0
 1367 0010 6DD0     		beq	.L135
1697:../drivers/fsl_flash.c ****     if (returnCode)
 1368              		.loc 1 1697 0
 1369 0012 0823     		movs	r3, #8
 1370              	.LVL154:
 1371 0014 FFF7FEFF 		bl	flash_check_range
 1372              	.LVL155:
1698:../drivers/fsl_flash.c ****     {
 1373              		.loc 1 1698 0
 1374 0018 98BB     		cbnz	r0, .L115
 1375              	.LVL156:
 1376              	.LBB56:
 1377              	.LBB57:
3354:../drivers/fsl_flash.c ****                  (maxReadbleAddress <= kFLASH_ResourceRangeDflashIfrEnd))
3355:../drivers/fsl_flash.c ****         {
3356:../drivers/fsl_flash.c ****         }
3357:../drivers/fsl_flash.c ****         else
3358:../drivers/fsl_flash.c ****         {
3359:../drivers/fsl_flash.c ****             status = kStatus_FLASH_InvalidArgument;
3360:../drivers/fsl_flash.c ****         }
3361:../drivers/fsl_flash.c ****     }
3362:../drivers/fsl_flash.c ****     else
3363:../drivers/fsl_flash.c ****     {
3364:../drivers/fsl_flash.c ****         status = kStatus_FLASH_InvalidArgument;
3365:../drivers/fsl_flash.c ****     }
3366:../drivers/fsl_flash.c **** 
3367:../drivers/fsl_flash.c ****     return status;
3368:../drivers/fsl_flash.c **** }
3369:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
3370:../drivers/fsl_flash.c **** 
3371:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
3372:../drivers/fsl_flash.c **** /*! @brief Validates the gived swap control option.*/
3373:../drivers/fsl_flash.c **** static status_t flash_check_swap_control_option(flash_swap_control_option_t option)
3374:../drivers/fsl_flash.c **** {
3375:../drivers/fsl_flash.c ****     if ((option == kFLASH_SwapControlOptionIntializeSystem) || (option == kFLASH_SwapControlOptionS
3376:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionSetInCompleteState) || (option == kFLASH_SwapControlOpti
3377:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionDisableSystem))
3378:../drivers/fsl_flash.c ****     {
3379:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
3380:../drivers/fsl_flash.c ****     }
3381:../drivers/fsl_flash.c **** 
3382:../drivers/fsl_flash.c ****     return kStatus_FLASH_InvalidArgument;
3383:../drivers/fsl_flash.c **** }
3384:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
3385:../drivers/fsl_flash.c **** 
3386:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
3387:../drivers/fsl_flash.c **** /*! @brief Validates the gived address to see if it is equal to swap indicator address in pflash sw
3388:../drivers/fsl_flash.c **** static status_t flash_validate_swap_indicator_address(flash_config_t *config, uint32_t address)
3389:../drivers/fsl_flash.c **** {
3390:../drivers/fsl_flash.c ****     flash_swap_ifr_field_data_t flashSwapIfrFieldData;
3391:../drivers/fsl_flash.c ****     uint32_t swapIndicatorAddress;
3392:../drivers/fsl_flash.c **** 
3393:../drivers/fsl_flash.c ****     status_t returnCode;
3394:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3395:../drivers/fsl_flash.c ****     returnCode =
3396:../drivers/fsl_flash.c ****         FLASH_ReadResource(config, kFLASH_ResourceRangePflashSwapIfrStart, flashSwapIfrFieldData.fl
3397:../drivers/fsl_flash.c ****                            sizeof(flashSwapIfrFieldData.flashSwapIfrData), kFLASH_ResourceOptionFla
3398:../drivers/fsl_flash.c **** 
3399:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
3400:../drivers/fsl_flash.c ****     {
3401:../drivers/fsl_flash.c ****         return returnCode;
3402:../drivers/fsl_flash.c ****     }
3403:../drivers/fsl_flash.c **** #else
3404:../drivers/fsl_flash.c ****     {
3405:../drivers/fsl_flash.c ****         /* From RM, the actual info are stored in FCCOB6,7 */
3406:../drivers/fsl_flash.c ****         uint32_t returnValue[2];
3407:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapAddr, returnValue, 4);
3408:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3409:../drivers/fsl_flash.c ****         {
3410:../drivers/fsl_flash.c ****             return returnCode;
3411:../drivers/fsl_flash.c ****         }
3412:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapIndicatorAddress = (uint16_t)returnValue[0];
3413:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapEnable, returnValue, 4);
3414:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3415:../drivers/fsl_flash.c ****         {
3416:../drivers/fsl_flash.c ****             return returnCode;
3417:../drivers/fsl_flash.c ****         }
3418:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapEnableWord = (uint16_t)returnValue[0];
3419:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapDisable, returnValue, 4);
3420:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3421:../drivers/fsl_flash.c ****         {
3422:../drivers/fsl_flash.c ****             return returnCode;
3423:../drivers/fsl_flash.c ****         }
3424:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapDisableWord = (uint16_t)returnValue[0];
3425:../drivers/fsl_flash.c ****     }
3426:../drivers/fsl_flash.c **** #endif
3427:../drivers/fsl_flash.c **** 
3428:../drivers/fsl_flash.c ****     /* The high bits value of Swap Indicator Address is stored in Program Flash Swap IFR Field,
3429:../drivers/fsl_flash.c ****      * the low severval bit value of Swap Indicator Address is always 1'b0 */
3430:../drivers/fsl_flash.c ****     swapIndicatorAddress = (uint32_t)flashSwapIfrFieldData.flashSwapIfrField.swapIndicatorAddress *
3431:../drivers/fsl_flash.c ****                            FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT;
3432:../drivers/fsl_flash.c ****     if (address != swapIndicatorAddress)
3433:../drivers/fsl_flash.c ****     {
3434:../drivers/fsl_flash.c ****         return kStatus_FLASH_SwapIndicatorAddressError;
3435:../drivers/fsl_flash.c ****     }
3436:../drivers/fsl_flash.c **** 
3437:../drivers/fsl_flash.c ****     return returnCode;
3438:../drivers/fsl_flash.c **** }
3439:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
3440:../drivers/fsl_flash.c **** 
3441:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
3442:../drivers/fsl_flash.c **** /*! @brief Validates the gived flexram function option.*/
3443:../drivers/fsl_flash.c **** static inline status_t flasn_check_flexram_function_option_range(flash_flexram_function_option_t op
3444:../drivers/fsl_flash.c **** {
3445:../drivers/fsl_flash.c ****     if ((option != kFLASH_FlexramFunctionOptionAvailableAsRam) &&
3446:../drivers/fsl_flash.c ****         (option != kFLASH_FlexramFunctionOptionAvailableForEeprom))
3447:../drivers/fsl_flash.c ****     {
3448:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3449:../drivers/fsl_flash.c ****     }
3450:../drivers/fsl_flash.c **** 
3451:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3452:../drivers/fsl_flash.c **** }
3453:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
3454:../drivers/fsl_flash.c **** 
3455:../drivers/fsl_flash.c **** /*! @brief Gets the flash protection information (region size, region count).*/
3456:../drivers/fsl_flash.c **** static status_t flash_get_protection_info(flash_config_t *config, flash_protection_config_t *info)
3457:../drivers/fsl_flash.c **** {
3458:../drivers/fsl_flash.c ****     uint32_t pflashTotalSize;
3459:../drivers/fsl_flash.c **** 
3460:../drivers/fsl_flash.c ****     if ((config == NULL) || (info == NULL))
 1378              		.loc 1 3460 0
 1379 001a 002C     		cmp	r4, #0
 1380 001c 67D0     		beq	.L135
3461:../drivers/fsl_flash.c ****     {
3462:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3463:../drivers/fsl_flash.c ****     }
3464:../drivers/fsl_flash.c **** 
3465:../drivers/fsl_flash.c ****     /* Clean up info Structure*/
3466:../drivers/fsl_flash.c ****     memset(info, 0, sizeof(flash_protection_config_t));
3467:../drivers/fsl_flash.c **** 
3468:../drivers/fsl_flash.c **** /* Note: KW40 has a secondary flash, but it doesn't have independent protection register*/
3469:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && (!FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGI
3470:../drivers/fsl_flash.c ****     pflashTotalSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT * MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE 
3471:../drivers/fsl_flash.c ****                       FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT * FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZ
3472:../drivers/fsl_flash.c ****     info->regionBase = MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS;
3473:../drivers/fsl_flash.c **** #else
3474:../drivers/fsl_flash.c ****     pflashTotalSize = config->PFlashTotalSize;
3475:../drivers/fsl_flash.c ****     info->regionBase = config->PFlashBlockBase;
 1381              		.loc 1 3475 0
 1382 001e 94E80A00 		ldm	r4, {r1, r3}
3476:../drivers/fsl_flash.c **** #endif
3477:../drivers/fsl_flash.c **** 
3478:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
3479:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
3480:../drivers/fsl_flash.c ****     {
3481:../drivers/fsl_flash.c ****         info->regionCount = SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT;
3482:../drivers/fsl_flash.c ****     }
3483:../drivers/fsl_flash.c ****     else
3484:../drivers/fsl_flash.c **** #endif
3485:../drivers/fsl_flash.c ****     {
3486:../drivers/fsl_flash.c ****         info->regionCount = MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT;
3487:../drivers/fsl_flash.c ****     }
3488:../drivers/fsl_flash.c **** 
3489:../drivers/fsl_flash.c ****     /* Calculate the size of the flash protection region
3490:../drivers/fsl_flash.c ****      * If the flash density is > 32KB, then protection region is 1/32 of total flash density
3491:../drivers/fsl_flash.c ****      * Else if flash density is < 32KB, then flash protection region is set to 1KB */
3492:../drivers/fsl_flash.c ****     if (pflashTotalSize > info->regionCount * 1024)
 1383              		.loc 1 3492 0
 1384 0022 B3F5004F 		cmp	r3, #32768
3493:../drivers/fsl_flash.c ****     {
3494:../drivers/fsl_flash.c ****         info->regionSize = (pflashTotalSize) / info->regionCount;
 1385              		.loc 1 3494 0
 1386 0026 8CBF     		ite	hi
 1387 0028 5B09     		lsrhi	r3, r3, #5
3495:../drivers/fsl_flash.c ****     }
3496:../drivers/fsl_flash.c ****     else
3497:../drivers/fsl_flash.c ****     {
3498:../drivers/fsl_flash.c ****         info->regionSize = 1024;
 1388              		.loc 1 3498 0
 1389 002a 4FF48063 		movls	r3, #1024
 1390 002e 0193     		str	r3, [sp, #4]
 1391              	.LVL157:
3486:../drivers/fsl_flash.c ****     }
 1392              		.loc 1 3486 0
 1393 0030 2022     		movs	r2, #32
 1394              	.LVL158:
 1395              	.LBE57:
 1396              	.LBE56:
1720:../drivers/fsl_flash.c ****         regionCounter++;
 1397              		.loc 1 1720 0
 1398 0032 DDF804E0 		ldr	lr, [sp, #4]
 1399              	.LBB59:
 1400              	.LBB58:
3486:../drivers/fsl_flash.c ****     }
 1401              		.loc 1 3486 0
 1402 0036 0292     		str	r2, [sp, #8]
3475:../drivers/fsl_flash.c **** #endif
 1403              		.loc 1 3475 0
 1404 0038 0091     		str	r1, [sp]
 1405              	.LBE58:
 1406              	.LBE59:
1711:../drivers/fsl_flash.c **** 
 1407              		.loc 1 1711 0
 1408 003a AA19     		adds	r2, r5, r6
 1409              	.LVL159:
1714:../drivers/fsl_flash.c **** 
 1410              		.loc 1 1714 0
 1411 003c 0023     		movs	r3, #0
1719:../drivers/fsl_flash.c ****             flashProtectionInfo.regionBase + flashProtectionInfo.regionSize * regionCounter;
 1412              		.loc 1 1719 0
 1413 003e 0BAC     		add	r4, sp, #44
 1414              	.LVL160:
 1415              	.L119:
 1416 0040 44F82310 		str	r1, [r4, r3, lsl #2]
1721:../drivers/fsl_flash.c ****     }
 1417              		.loc 1 1721 0
 1418 0044 0133     		adds	r3, r3, #1
 1419              	.LVL161:
1717:../drivers/fsl_flash.c ****     {
 1420              		.loc 1 1717 0
 1421 0046 212B     		cmp	r3, #33
 1422 0048 7144     		add	r1, r1, lr
 1423 004a F9D1     		bne	.L119
1758:../drivers/fsl_flash.c ****             }
 1424              		.loc 1 1758 0
 1425 004c DFF8A480 		ldr	r8, .L144
 1426 0050 0023     		movs	r3, #0
 1427              	.LVL162:
 1428 0052 0DF10C0C 		add	ip, sp, #12
 1429              	.LVL163:
 1430              	.L121:
 1431 0056 98F81010 		ldrb	r1, [r8, #16]	@ zero_extendqisi2
 1432 005a 2CAE     		add	r6, sp, #176
 1433 005c 1941     		asrs	r1, r1, r3
 1434 005e 1E44     		add	r6, r6, r3
 1435 0060 01F00101 		and	r1, r1, #1
 1436 0064 06F8A41C 		strb	r1, [r6, #-164]
 1437 0068 591C     		adds	r1, r3, #1
 1438 006a 6144     		add	r1, r1, ip
 1439              	.L140:
 1440 006c 1E46     		mov	r6, r3
1808:../drivers/fsl_flash.c ****     }
 1441              		.loc 1 1808 0
 1442 006e 0133     		adds	r3, r3, #1
 1443              	.LVL164:
1734:../drivers/fsl_flash.c ****     {
 1444              		.loc 1 1734 0
 1445 0070 1F2B     		cmp	r3, #31
 1446 0072 09D9     		bls	.L127
 1447 0074 0023     		movs	r3, #0
 1448              	.LVL165:
 1449 0076 9846     		mov	r8, r3
 1450 0078 1E46     		mov	r6, r3
 1451              	.LVL166:
 1452              	.L128:
1817:../drivers/fsl_flash.c ****     {
 1453              		.loc 1 1817 0
 1454 007a 9542     		cmp	r5, r2
 1455 007c 22D3     		bcc	.L131
1841:../drivers/fsl_flash.c ****     {
 1456              		.loc 1 1841 0
 1457 007e 8BBB     		cbnz	r3, .L132
 1458              	.LVL167:
 1459              	.L142:
1854:../drivers/fsl_flash.c ****     }
 1460              		.loc 1 1854 0
 1461 0080 3B70     		strb	r3, [r7]
 1462              	.LVL168:
 1463              	.L115:
1858:../drivers/fsl_flash.c **** 
 1464              		.loc 1 1858 0
 1465 0082 2DB0     		add	sp, sp, #180
 1466              		.cfi_remember_state
 1467              		.cfi_def_cfa_offset 28
 1468              		@ sp needed
 1469 0084 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1470              	.LVL169:
 1471              	.L127:
 1472              		.cfi_restore_state
1756:../drivers/fsl_flash.c ****             {
 1473              		.loc 1 1756 0
 1474 0088 072B     		cmp	r3, #7
 1475 008a E4D9     		bls	.L121
 1476 008c A6F10709 		sub	r9, r6, #7
1760:../drivers/fsl_flash.c ****             {
 1477              		.loc 1 1760 0
 1478 0090 B9F1070F 		cmp	r9, #7
 1479 0094 08D8     		bhi	.L124
1762:../drivers/fsl_flash.c ****             }
 1480              		.loc 1 1762 0
 1481 0096 98F81160 		ldrb	r6, [r8, #17]	@ zero_extendqisi2
 1482              	.L143:
1773:../drivers/fsl_flash.c ****             }
 1483              		.loc 1 1773 0
 1484 009a 46FA09F6 		asr	r6, r6, r9
 1485              	.L139:
1780:../drivers/fsl_flash.c ****             }
 1486              		.loc 1 1780 0
 1487 009e 06F00106 		and	r6, r6, #1
 1488 00a2 0E70     		strb	r6, [r1]
 1489 00a4 0131     		adds	r1, r1, #1
 1490 00a6 E1E7     		b	.L140
 1491              	.L124:
 1492 00a8 A6F10F09 		sub	r9, r6, #15
1771:../drivers/fsl_flash.c ****             {
 1493              		.loc 1 1771 0
 1494 00ac B9F1070F 		cmp	r9, #7
 1495 00b0 02D8     		bhi	.L126
1773:../drivers/fsl_flash.c ****             }
 1496              		.loc 1 1773 0
 1497 00b2 98F81260 		ldrb	r6, [r8, #18]	@ zero_extendqisi2
 1498 00b6 F0E7     		b	.L143
 1499              	.L126:
1780:../drivers/fsl_flash.c ****             }
 1500              		.loc 1 1780 0
 1501 00b8 98F81390 		ldrb	r9, [r8, #19]	@ zero_extendqisi2
 1502 00bc 173E     		subs	r6, r6, #23
 1503 00be 49FA06F6 		asr	r6, r9, r6
 1504 00c2 ECE7     		b	.L139
 1505              	.LVL170:
 1506              	.L131:
1823:../drivers/fsl_flash.c ****         {
 1507              		.loc 1 1823 0
 1508 00c4 54F8041B 		ldr	r1, [r4], #4
 1509 00c8 8D42     		cmp	r5, r1
 1510 00ca 08D3     		bcc	.L129
1823:../drivers/fsl_flash.c ****         {
 1511              		.loc 1 1823 0 is_stmt 0 discriminator 1
 1512 00cc 2168     		ldr	r1, [r4]
 1513 00ce 8D42     		cmp	r5, r1
 1514 00d0 05D2     		bcs	.L129
1830:../drivers/fsl_flash.c ****             {
 1515              		.loc 1 1830 0 is_stmt 1
 1516 00d2 1CF80810 		ldrb	r1, [ip, r8]	@ zero_extendqisi2
1826:../drivers/fsl_flash.c **** 
 1517              		.loc 1 1826 0
 1518 00d6 0136     		adds	r6, r6, #1
 1519              	.LVL171:
1830:../drivers/fsl_flash.c ****             {
 1520              		.loc 1 1830 0
 1521 00d8 01B9     		cbnz	r1, .L130
1833:../drivers/fsl_flash.c ****             }
 1522              		.loc 1 1833 0
 1523 00da 0133     		adds	r3, r3, #1
 1524              	.LVL172:
 1525              	.L130:
1835:../drivers/fsl_flash.c ****         }
 1526              		.loc 1 1835 0
 1527 00dc 7544     		add	r5, r5, lr
 1528              	.LVL173:
 1529              	.L129:
1837:../drivers/fsl_flash.c ****     }
 1530              		.loc 1 1837 0
 1531 00de 08F10108 		add	r8, r8, #1
 1532              	.LVL174:
 1533 00e2 CAE7     		b	.L128
 1534              	.L132:
1846:../drivers/fsl_flash.c ****     {
 1535              		.loc 1 1846 0
 1536 00e4 9E42     		cmp	r6, r3
1848:../drivers/fsl_flash.c ****     }
 1537              		.loc 1 1848 0
 1538 00e6 0CBF     		ite	eq
 1539 00e8 0123     		moveq	r3, #1
 1540              	.LVL175:
1854:../drivers/fsl_flash.c ****     }
 1541              		.loc 1 1854 0
 1542 00ea 0223     		movne	r3, #2
 1543 00ec C8E7     		b	.L142
 1544              	.LVL176:
 1545              	.L135:
1693:../drivers/fsl_flash.c ****     }
 1546              		.loc 1 1693 0
 1547 00ee 0420     		movs	r0, #4
 1548 00f0 C7E7     		b	.L115
 1549              	.L145:
 1550 00f2 00BF     		.align	2
 1551              	.L144:
 1552 00f4 00000240 		.word	1073872896
 1553              		.cfi_endproc
 1554              	.LFE163:
 1556              		.section	.text.FLASH_IsExecuteOnly,"ax",%progbits
 1557              		.align	1
 1558              		.global	FLASH_IsExecuteOnly
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1562              		.fpu fpv4-sp-d16
 1564              	FLASH_IsExecuteOnly:
 1565              	.LFB164:
1864:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 1566              		.loc 1 1864 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              	.LVL177:
 1571 0000 10B5     		push	{r4, lr}
 1572              		.cfi_def_cfa_offset 8
 1573              		.cfi_offset 4, -8
 1574              		.cfi_offset 14, -4
1870:../drivers/fsl_flash.c ****     {
 1575              		.loc 1 1870 0
 1576 0002 1C46     		mov	r4, r3
 1577 0004 2BB1     		cbz	r3, .L148
1876:../drivers/fsl_flash.c ****     if (returnCode)
 1578              		.loc 1 1876 0
 1579 0006 0823     		movs	r3, #8
 1580              	.LVL178:
 1581 0008 FFF7FEFF 		bl	flash_check_range
 1582              	.LVL179:
1877:../drivers/fsl_flash.c ****     {
 1583              		.loc 1 1877 0
 1584 000c 10B9     		cbnz	r0, .L146
1978:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 1585              		.loc 1 1978 0
 1586 000e 2070     		strb	r0, [r4]
1981:../drivers/fsl_flash.c **** }
 1587              		.loc 1 1981 0
 1588 0010 10BD     		pop	{r4, pc}
 1589              	.LVL180:
 1590              	.L148:
1872:../drivers/fsl_flash.c ****     }
 1591              		.loc 1 1872 0
 1592 0012 0420     		movs	r0, #4
 1593              	.LVL181:
 1594              	.L146:
1982:../drivers/fsl_flash.c **** 
 1595              		.loc 1 1982 0
 1596 0014 10BD     		pop	{r4, pc}
 1597              		.cfi_endproc
 1598              	.LFE164:
 1600              		.section	.text.FLASH_GetProperty,"ax",%progbits
 1601              		.align	1
 1602              		.global	FLASH_GetProperty
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1606              		.fpu fpv4-sp-d16
 1608              	FLASH_GetProperty:
 1609              	.LFB165:
1985:../drivers/fsl_flash.c ****     if ((config == NULL) || (value == NULL))
 1610              		.loc 1 1985 0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 0
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
 1614              		@ link register save eliminated.
 1615              	.LVL182:
1986:../drivers/fsl_flash.c ****     {
 1616              		.loc 1 1986 0
 1617 0000 18B3     		cbz	r0, .L163
1986:../drivers/fsl_flash.c ****     {
 1618              		.loc 1 1986 0 is_stmt 0 discriminator 1
 1619 0002 12B3     		cbz	r2, .L163
1991:../drivers/fsl_flash.c ****     {
 1620              		.loc 1 1991 0 is_stmt 1
 1621 0004 0929     		cmp	r1, #9
 1622 0006 22D8     		bhi	.L164
 1623 0008 DFE801F0 		tbb	[pc, r1]
 1624              	.L152:
 1625 000c 05       		.byte	(.L151-.L152)/2
 1626 000d 09       		.byte	(.L153-.L152)/2
 1627 000e 0B       		.byte	(.L154-.L152)/2
 1628 000f 10       		.byte	(.L155-.L152)/2
 1629 0010 12       		.byte	(.L156-.L152)/2
 1630 0011 14       		.byte	(.L157-.L152)/2
 1631 0012 17       		.byte	(.L158-.L152)/2
 1632 0013 19       		.byte	(.L159-.L152)/2
 1633 0014 1B       		.byte	(.L160-.L152)/2
 1634 0015 1D       		.byte	(.L161-.L152)/2
 1635              		.p2align 1
 1636              	.L151:
1994:../drivers/fsl_flash.c ****             break;
 1637              		.loc 1 1994 0
 1638 0016 C368     		ldr	r3, [r0, #12]
 1639              	.LVL183:
 1640              	.L165:
1998:../drivers/fsl_flash.c ****             break;
 1641              		.loc 1 1998 0
 1642 0018 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 1643              		.loc 1 2062 0
 1644 001a 0020     		movs	r0, #0
 1645              	.LVL184:
1999:../drivers/fsl_flash.c **** 
 1646              		.loc 1 1999 0
 1647 001c 7047     		bx	lr
 1648              	.LVL185:
 1649              	.L153:
1998:../drivers/fsl_flash.c ****             break;
 1650              		.loc 1 1998 0
 1651 001e 4368     		ldr	r3, [r0, #4]
 1652 0020 FAE7     		b	.L165
 1653              	.L154:
2002:../drivers/fsl_flash.c ****             break;
 1654              		.loc 1 2002 0
 1655 0022 017A     		ldrb	r1, [r0, #8]	@ zero_extendqisi2
 1656              	.LVL186:
 1657 0024 4368     		ldr	r3, [r0, #4]
 1658 0026 B3FBF1F3 		udiv	r3, r3, r1
 1659 002a F5E7     		b	.L165
 1660              	.LVL187:
 1661              	.L155:
2006:../drivers/fsl_flash.c ****             break;
 1662              		.loc 1 2006 0
 1663 002c 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 1664 002e F3E7     		b	.L165
 1665              	.L156:
2010:../drivers/fsl_flash.c ****             break;
 1666              		.loc 1 2010 0
 1667 0030 0368     		ldr	r3, [r0]
 1668 0032 F1E7     		b	.L165
 1669              	.L157:
2015:../drivers/fsl_flash.c **** #else
 1670              		.loc 1 2015 0
 1671 0034 0020     		movs	r0, #0
 1672              	.LVL188:
 1673 0036 1060     		str	r0, [r2]
2019:../drivers/fsl_flash.c **** 
 1674              		.loc 1 2019 0
 1675 0038 7047     		bx	lr
 1676              	.LVL189:
 1677              	.L158:
2022:../drivers/fsl_flash.c ****             break;
 1678              		.loc 1 2022 0
 1679 003a 4369     		ldr	r3, [r0, #20]
 1680 003c ECE7     		b	.L165
 1681              	.L159:
2026:../drivers/fsl_flash.c ****             break;
 1682              		.loc 1 2026 0
 1683 003e 8369     		ldr	r3, [r0, #24]
 1684 0040 EAE7     		b	.L165
 1685              	.L160:
2030:../drivers/fsl_flash.c ****             break;
 1686              		.loc 1 2030 0
 1687 0042 036A     		ldr	r3, [r0, #32]
 1688 0044 E8E7     		b	.L165
 1689              	.L161:
2034:../drivers/fsl_flash.c ****             break;
 1690              		.loc 1 2034 0
 1691 0046 436A     		ldr	r3, [r0, #36]
 1692 0048 E6E7     		b	.L165
 1693              	.L163:
1988:../drivers/fsl_flash.c ****     }
 1694              		.loc 1 1988 0
 1695 004a 0420     		movs	r0, #4
 1696              	.LVL190:
 1697 004c 7047     		bx	lr
 1698              	.LVL191:
 1699              	.L164:
2059:../drivers/fsl_flash.c ****     }
 1700              		.loc 1 2059 0
 1701 004e 6A20     		movs	r0, #106
 1702              	.LVL192:
2063:../drivers/fsl_flash.c **** 
 1703              		.loc 1 2063 0
 1704 0050 7047     		bx	lr
 1705              		.cfi_endproc
 1706              	.LFE165:
 1708              		.section	.text.FLASH_SetProperty,"ax",%progbits
 1709              		.align	1
 1710              		.global	FLASH_SetProperty
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu fpv4-sp-d16
 1716              	FLASH_SetProperty:
 1717              	.LFB166:
2066:../drivers/fsl_flash.c ****     status_t status = kStatus_FLASH_Success;
 1718              		.loc 1 2066 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
 1723              	.LVL193:
2069:../drivers/fsl_flash.c ****     {
 1724              		.loc 1 2069 0
 1725 0000 20B1     		cbz	r0, .L169
2074:../drivers/fsl_flash.c ****     {
 1726              		.loc 1 2074 0
 1727 0002 0929     		cmp	r1, #9
2105:../drivers/fsl_flash.c ****             break;
 1728              		.loc 1 2105 0
 1729 0004 8CBF     		ite	hi
 1730 0006 6A20     		movhi	r0, #106
 1731              	.LVL194:
 1732 0008 7620     		movls	r0, #118
 1733 000a 7047     		bx	lr
 1734              	.LVL195:
 1735              	.L169:
2071:../drivers/fsl_flash.c ****     }
 1736              		.loc 1 2071 0
 1737 000c 0420     		movs	r0, #4
 1738              	.LVL196:
2113:../drivers/fsl_flash.c **** 
 1739              		.loc 1 2113 0
 1740 000e 7047     		bx	lr
 1741              		.cfi_endproc
 1742              	.LFE166:
 1744              		.section	.text.FLASH_SwapControl,"ax",%progbits
 1745              		.align	1
 1746              		.global	FLASH_SwapControl
 1747              		.syntax unified
 1748              		.thumb
 1749              		.thumb_func
 1750              		.fpu fpv4-sp-d16
 1752              	FLASH_SwapControl:
 1753              	.LFB167:
2144:../drivers/fsl_flash.c ****     status_t returnCode;
 1754              		.loc 1 2144 0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 0
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 1758              	.LVL197:
 1759 0000 38B5     		push	{r3, r4, r5, lr}
 1760              		.cfi_def_cfa_offset 16
 1761              		.cfi_offset 3, -16
 1762              		.cfi_offset 4, -12
 1763              		.cfi_offset 5, -8
 1764              		.cfi_offset 14, -4
2144:../drivers/fsl_flash.c ****     status_t returnCode;
 1765              		.loc 1 2144 0
 1766 0002 1D46     		mov	r5, r3
2147:../drivers/fsl_flash.c ****     {
 1767              		.loc 1 2147 0
 1768 0004 90B1     		cbz	r0, .L176
2147:../drivers/fsl_flash.c ****     {
 1769              		.loc 1 2147 0 is_stmt 0 discriminator 1
 1770 0006 8BB1     		cbz	r3, .L176
2152:../drivers/fsl_flash.c ****     {
 1771              		.loc 1 2152 0 is_stmt 1
 1772 0008 0C07     		lsls	r4, r1, #28
 1773 000a 11D1     		bne	.L177
2158:../drivers/fsl_flash.c ****         ((address >= kFLASH_ConfigAreaStart) && (address <= kFLASH_ConfigAreaEnd)))
 1774              		.loc 1 2158 0
 1775 000c 4368     		ldr	r3, [r0, #4]
 1776              	.LVL198:
 1777 000e B1EB530F 		cmp	r1, r3, lsr #1
 1778 0012 0FD2     		bcs	.L179
2159:../drivers/fsl_flash.c ****     {
 1779              		.loc 1 2159 0 discriminator 1
 1780 0014 A1F58063 		sub	r3, r1, #1024
2158:../drivers/fsl_flash.c ****         ((address >= kFLASH_ConfigAreaStart) && (address <= kFLASH_ConfigAreaEnd)))
 1781              		.loc 1 2158 0 discriminator 1
 1782 0018 0F2B     		cmp	r3, #15
 1783 001a 0BD9     		bls	.L179
 1784              	.LVL199:
 1785              	.LBB64:
 1786              	.LBB65:
3375:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionSetInCompleteState) || (option == kFLASH_SwapControlOpti
 1787              		.loc 1 3375 0
 1788 001c 102A     		cmp	r2, #16
 1789 001e 9DBF     		ittte	ls
 1790 0020 0F4C     		ldrls	r4, .L181
 1791 0022 D440     		lsrls	r4, r4, r2
 1792 0024 E443     		mvnls	r4, r4
 1793 0026 0124     		movhi	r4, #1
 1794 0028 E307     		lsls	r3, r4, #31
 1795 002a 05D5     		bpl	.L174
 1796              	.LVL200:
 1797              	.L176:
 1798              	.LBE65:
 1799              	.LBE64:
2149:../drivers/fsl_flash.c ****     }
 1800              		.loc 1 2149 0
 1801 002c 0420     		movs	r0, #4
 1802              	.LVL201:
 1803 002e 38BD     		pop	{r3, r4, r5, pc}
 1804              	.LVL202:
 1805              	.L177:
2154:../drivers/fsl_flash.c ****     }
 1806              		.loc 1 2154 0
 1807 0030 6520     		movs	r0, #101
 1808              	.LVL203:
 1809 0032 38BD     		pop	{r3, r4, r5, pc}
 1810              	.LVL204:
 1811              	.L179:
2161:../drivers/fsl_flash.c ****     }
 1812              		.loc 1 2161 0
 1813 0034 7520     		movs	r0, #117
 1814              	.LVL205:
 1815 0036 38BD     		pop	{r3, r4, r5, pc}
 1816              	.LVL206:
 1817              	.L174:
 1818              	.LBB66:
 1819              	.LBB67:
2171:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
 1820              		.loc 1 2171 0
 1821 0038 0A4B     		ldr	r3, .L181+4
 1822 003a 21F07F41 		bic	r1, r1, #-16777216
 1823              	.LVL207:
2172:../drivers/fsl_flash.c **** 
 1824              		.loc 1 2172 0
 1825 003e 1206     		lsls	r2, r2, #24
 1826              	.LVL208:
2171:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
 1827              		.loc 1 2171 0
 1828 0040 41F08C41 		orr	r1, r1, #1174405120
2172:../drivers/fsl_flash.c **** 
 1829              		.loc 1 2172 0
 1830 0044 62F07F42 		orn	r2, r2, #-16777216
2171:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
 1831              		.loc 1 2171 0
 1832 0048 1960     		str	r1, [r3]
2172:../drivers/fsl_flash.c **** 
 1833              		.loc 1 2172 0
 1834 004a 5A60     		str	r2, [r3, #4]
2174:../drivers/fsl_flash.c **** 
 1835              		.loc 1 2174 0
 1836 004c FFF7FEFF 		bl	flash_command_sequence
 1837              	.LVL209:
2176:../drivers/fsl_flash.c ****     returnInfo->currentSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB6_REG;
 1838              		.loc 1 2176 0
 1839 0050 054B     		ldr	r3, .L181+8
 1840 0052 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 1841 0054 2A70     		strb	r2, [r5]
2177:../drivers/fsl_flash.c ****     returnInfo->nextSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB7_REG;
 1842              		.loc 1 2177 0
 1843 0056 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 1844 0058 6A70     		strb	r2, [r5, #1]
2178:../drivers/fsl_flash.c **** 
 1845              		.loc 1 2178 0
 1846 005a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1847 005c AB70     		strb	r3, [r5, #2]
 1848              	.LVL210:
 1849              	.LBE67:
 1850              	.LBE66:
2181:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
 1851              		.loc 1 2181 0
 1852 005e 38BD     		pop	{r3, r4, r5, pc}
 1853              	.LVL211:
 1854              	.L182:
 1855              		.align	2
 1856              	.L181:
 1857 0060 16010100 		.word	65814
 1858 0064 04000240 		.word	1073872900
 1859 0068 00000240 		.word	1073872896
 1860              		.cfi_endproc
 1861              	.LFE167:
 1863              		.section	.text.FLASH_PflashSetProtection,"ax",%progbits
 1864              		.align	1
 1865              		.global	FLASH_PflashSetProtection
 1866              		.syntax unified
 1867              		.thumb
 1868              		.thumb_func
 1869              		.fpu fpv4-sp-d16
 1871              	FLASH_PflashSetProtection:
 1872              	.LFB169:
2317:../drivers/fsl_flash.c ****     if (config == NULL)
 1873              		.loc 1 2317 0
 1874              		.cfi_startproc
 1875              		@ args = 0, pretend = 0, frame = 0
 1876              		@ frame_needed = 0, uses_anonymous_args = 0
 1877              		@ link register save eliminated.
 1878              	.LVL212:
2318:../drivers/fsl_flash.c ****     {
 1879              		.loc 1 2318 0
 1880 0000 48B1     		cbz	r0, .L185
2341:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.protl32b != *kFPROTL)
 1881              		.loc 1 2341 0
 1882 0002 064B     		ldr	r3, .L187
 1883 0004 0A68     		ldr	r2, [r1]
 1884 0006 1A60     		str	r2, [r3]
2342:../drivers/fsl_flash.c ****         {
 1885              		.loc 1 2342 0
 1886 0008 1B68     		ldr	r3, [r3]
 1887 000a 0868     		ldr	r0, [r1]
 1888              	.LVL213:
2356:../drivers/fsl_flash.c **** }
 1889              		.loc 1 2356 0
 1890 000c 9842     		cmp	r0, r3
 1891 000e 14BF     		ite	ne
 1892 0010 6920     		movne	r0, #105
 1893 0012 0020     		moveq	r0, #0
 1894 0014 7047     		bx	lr
 1895              	.LVL214:
 1896              	.L185:
2320:../drivers/fsl_flash.c ****     }
 1897              		.loc 1 2320 0
 1898 0016 0420     		movs	r0, #4
 1899              	.LVL215:
2357:../drivers/fsl_flash.c **** 
 1900              		.loc 1 2357 0
 1901 0018 7047     		bx	lr
 1902              	.L188:
 1903 001a 00BF     		.align	2
 1904              	.L187:
 1905 001c 10000240 		.word	1073872912
 1906              		.cfi_endproc
 1907              	.LFE169:
 1909              		.section	.text.FLASH_PflashGetProtection,"ax",%progbits
 1910              		.align	1
 1911              		.global	FLASH_PflashGetProtection
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1915              		.fpu fpv4-sp-d16
 1917              	FLASH_PflashGetProtection:
 1918              	.LFB170:
2360:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
 1919              		.loc 1 2360 0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 1924              	.LVL216:
2361:../drivers/fsl_flash.c ****     {
 1925              		.loc 1 2361 0
 1926 0000 28B1     		cbz	r0, .L192
2361:../drivers/fsl_flash.c ****     {
 1927              		.loc 1 2361 0 is_stmt 0 discriminator 1
 1928 0002 21B1     		cbz	r1, .L192
2375:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
 1929              		.loc 1 2375 0 is_stmt 1
 1930 0004 034B     		ldr	r3, .L193
 1931 0006 1B68     		ldr	r3, [r3]
 1932 0008 0B60     		str	r3, [r1]
2381:../drivers/fsl_flash.c **** }
 1933              		.loc 1 2381 0
 1934 000a 0020     		movs	r0, #0
 1935              	.LVL217:
 1936 000c 7047     		bx	lr
 1937              	.LVL218:
 1938              	.L192:
2363:../drivers/fsl_flash.c ****     }
 1939              		.loc 1 2363 0
 1940 000e 0420     		movs	r0, #4
 1941              	.LVL219:
2382:../drivers/fsl_flash.c **** 
 1942              		.loc 1 2382 0
 1943 0010 7047     		bx	lr
 1944              	.L194:
 1945 0012 00BF     		.align	2
 1946              	.L193:
 1947 0014 10000240 		.word	1073872912
 1948              		.cfi_endproc
 1949              	.LFE170:
 1951              		.section	.text.FLASH_PflashSetPrefetchSpeculation,"ax",%progbits
 1952              		.align	1
 1953              		.global	FLASH_PflashSetPrefetchSpeculation
 1954              		.syntax unified
 1955              		.thumb
 1956              		.thumb_func
 1957              		.fpu fpv4-sp-d16
 1959              	FLASH_PflashSetPrefetchSpeculation:
 1960              	.LFB171:
2471:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
 1961              		.loc 1 2471 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 1965              		@ link register save eliminated.
 1966              	.LVL220:
 1967              	.LBB68:
2517:../drivers/fsl_flash.c ****         {
 1968              		.loc 1 2517 0
 1969 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1970 0002 0D4B     		ldr	r3, .L202
 1971 0004 82B9     		cbnz	r2, .L196
2519:../drivers/fsl_flash.c ****         }
 1972              		.loc 1 2519 0
 1973 0006 1A68     		ldr	r2, [r3]
 1974 0008 42F00202 		orr	r2, r2, #2
 1975              	.L200:
2523:../drivers/fsl_flash.c ****         }
 1976              		.loc 1 2523 0
 1977 000c 1A60     		str	r2, [r3]
2525:../drivers/fsl_flash.c ****         {
 1978              		.loc 1 2525 0
 1979 000e 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 1980 0010 72B9     		cbnz	r2, .L198
2527:../drivers/fsl_flash.c ****         }
 1981              		.loc 1 2527 0
 1982 0012 1A68     		ldr	r2, [r3]
 1983 0014 42F00402 		orr	r2, r2, #4
 1984              	.L201:
2531:../drivers/fsl_flash.c ****         }
 1985              		.loc 1 2531 0
 1986 0018 1A60     		str	r2, [r3]
2542:../drivers/fsl_flash.c **** #endif
 1987              		.loc 1 2542 0
 1988 001a 084A     		ldr	r2, .L202+4
 1989 001c 5368     		ldr	r3, [r2, #4]
 1990 001e 43F40023 		orr	r3, r3, #524288
 1991 0022 5360     		str	r3, [r2, #4]
 1992              	.LBE68:
2580:../drivers/fsl_flash.c **** 
 1993              		.loc 1 2580 0
 1994 0024 0020     		movs	r0, #0
 1995              	.LVL221:
 1996 0026 7047     		bx	lr
 1997              	.LVL222:
 1998              	.L196:
 1999              	.LBB69:
2523:../drivers/fsl_flash.c ****         }
 2000              		.loc 1 2523 0
 2001 0028 1A68     		ldr	r2, [r3]
 2002 002a 22F00202 		bic	r2, r2, #2
 2003 002e EDE7     		b	.L200
 2004              	.L198:
2531:../drivers/fsl_flash.c ****         }
 2005              		.loc 1 2531 0
 2006 0030 1A68     		ldr	r2, [r3]
 2007 0032 22F00402 		bic	r2, r2, #4
 2008 0036 EFE7     		b	.L201
 2009              	.L203:
 2010              		.align	2
 2011              	.L202:
 2012 0038 04F00140 		.word	1073868804
 2013 003c 00F00140 		.word	1073868800
 2014              	.LBE69:
 2015              		.cfi_endproc
 2016              	.LFE171:
 2018              		.section	.text.FLASH_PflashGetPrefetchSpeculation,"ax",%progbits
 2019              		.align	1
 2020              		.global	FLASH_PflashGetPrefetchSpeculation
 2021              		.syntax unified
 2022              		.thumb
 2023              		.thumb_func
 2024              		.fpu fpv4-sp-d16
 2026              	FLASH_PflashGetPrefetchSpeculation:
 2027              	.LFB172:
2583:../drivers/fsl_flash.c ****     memset(speculationStatus, 0, sizeof(flash_prefetch_speculation_status_t));
 2028              		.loc 1 2583 0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 0
 2031              		@ frame_needed = 0, uses_anonymous_args = 0
 2032              		@ link register save eliminated.
 2033              	.LVL223:
2584:../drivers/fsl_flash.c **** 
 2034              		.loc 1 2584 0
 2035 0000 0023     		movs	r3, #0
2587:../drivers/fsl_flash.c ****     speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionEnable;
 2036              		.loc 1 2587 0
 2037 0002 0370     		strb	r3, [r0]
2588:../drivers/fsl_flash.c **** 
 2038              		.loc 1 2588 0
 2039 0004 4370     		strb	r3, [r0, #1]
 2040              	.LBB70:
2623:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
 2041              		.loc 1 2623 0
 2042 0006 064B     		ldr	r3, .L207
 2043 0008 5B68     		ldr	r3, [r3, #4]
 2044              	.LVL224:
2627:../drivers/fsl_flash.c ****         {
 2045              		.loc 1 2627 0
 2046 000a 5A07     		lsls	r2, r3, #29
2630:../drivers/fsl_flash.c ****         }
 2047              		.loc 1 2630 0
 2048 000c 5CBF     		itt	pl
 2049 000e 0122     		movpl	r2, #1
 2050 0010 4270     		strbpl	r2, [r0, #1]
2632:../drivers/fsl_flash.c ****         {
 2051              		.loc 1 2632 0
 2052 0012 9B07     		lsls	r3, r3, #30
 2053              	.LVL225:
2635:../drivers/fsl_flash.c ****         }
 2054              		.loc 1 2635 0
 2055 0014 5CBF     		itt	pl
 2056 0016 0123     		movpl	r3, #1
 2057 0018 0370     		strbpl	r3, [r0]
 2058              	.LBE70:
2665:../drivers/fsl_flash.c **** 
 2059              		.loc 1 2665 0
 2060 001a 0020     		movs	r0, #0
 2061              	.LVL226:
 2062 001c 7047     		bx	lr
 2063              	.L208:
 2064 001e 00BF     		.align	2
 2065              	.L207:
 2066 0020 00F00140 		.word	1073868800
 2067              		.cfi_endproc
 2068              	.LFE172:
 2070              		.section	.text.fmc_flash_cache_clear,"ax",%progbits
 2071              		.align	1
 2072              		.global	fmc_flash_cache_clear
 2073              		.syntax unified
 2074              		.thumb
 2075              		.thumb_func
 2076              		.fpu fpv4-sp-d16
 2078              	fmc_flash_cache_clear:
 2079              	.LFB176:
2810:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2080              		.loc 1 2810 0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 2084              		@ link register save eliminated.
 2085              	.LVL227:
2818:../drivers/fsl_flash.c **** #endif
 2086              		.loc 1 2818 0
 2087 0000 054B     		ldr	r3, .L210
 2088 0002 0648     		ldr	r0, .L210+4
2810:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2089              		.loc 1 2810 0
 2090 0004 10B4     		push	{r4}
 2091              		.cfi_def_cfa_offset 4
 2092              		.cfi_offset 4, -4
2818:../drivers/fsl_flash.c **** #endif
 2093              		.loc 1 2818 0
 2094 0006 1C68     		ldr	r4, [r3]
 2095 0008 1422     		movs	r2, #20
 2096 000a A446     		mov	ip, r4
 2097 000c 0F23     		movs	r3, #15
 2098 000e 4FF47001 		mov	r1, #15728640
2831:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
 2099              		.loc 1 2831 0
 2100 0012 5DF8044B 		ldr	r4, [sp], #4
 2101              		.cfi_restore 4
 2102              		.cfi_def_cfa_offset 0
2818:../drivers/fsl_flash.c **** #endif
 2103              		.loc 1 2818 0
 2104 0016 6047     		bx	ip	@ indirect register sibling call
 2105              	.LVL228:
 2106              	.L211:
 2107              		.align	2
 2108              	.L210:
 2109 0018 00000000 		.word	.LANCHOR3
 2110 001c 04F00140 		.word	1073868804
 2111              		.cfi_endproc
 2112              	.LFE176:
 2114              		.section	.text.fmc_flash_prefetch_speculation_clear,"ax",%progbits
 2115              		.align	1
 2116              		.global	fmc_flash_prefetch_speculation_clear
 2117              		.syntax unified
 2118              		.thumb
 2119              		.thumb_func
 2120              		.fpu fpv4-sp-d16
 2122              	fmc_flash_prefetch_speculation_clear:
 2123              	.LFB177:
2893:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2124              		.loc 1 2893 0
 2125              		.cfi_startproc
 2126              		@ args = 0, pretend = 0, frame = 0
 2127              		@ frame_needed = 0, uses_anonymous_args = 0
 2128              		@ link register save eliminated.
 2129              	.LVL229:
2907:../drivers/fsl_flash.c **** #endif
 2130              		.loc 1 2907 0
 2131 0000 054B     		ldr	r3, .L213
 2132 0002 0648     		ldr	r0, .L213+4
2893:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2133              		.loc 1 2893 0
 2134 0004 10B4     		push	{r4}
 2135              		.cfi_def_cfa_offset 4
 2136              		.cfi_offset 4, -4
2907:../drivers/fsl_flash.c **** #endif
 2137              		.loc 1 2907 0
 2138 0006 1C68     		ldr	r4, [r3]
 2139 0008 1322     		movs	r2, #19
 2140 000a A446     		mov	ip, r4
 2141 000c 0123     		movs	r3, #1
 2142 000e 4FF40021 		mov	r1, #524288
2924:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
 2143              		.loc 1 2924 0
 2144 0012 5DF8044B 		ldr	r4, [sp], #4
 2145              		.cfi_restore 4
 2146              		.cfi_def_cfa_offset 0
2907:../drivers/fsl_flash.c **** #endif
 2147              		.loc 1 2907 0
 2148 0016 6047     		bx	ip	@ indirect register sibling call
 2149              	.LVL230:
 2150              	.L214:
 2151              		.align	2
 2152              	.L213:
 2153 0018 00000000 		.word	.LANCHOR3
 2154 001c 04F00140 		.word	1073868804
 2155              		.cfi_endproc
 2156              	.LFE177:
 2158              		.section	.text.flash_cache_clear_process,"ax",%progbits
 2159              		.align	1
 2160              		.syntax unified
 2161              		.thumb
 2162              		.thumb_func
 2163              		.fpu fpv4-sp-d16
 2165              	flash_cache_clear_process:
 2166              	.LFB179:
2943:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2167              		.loc 1 2943 0
 2168              		.cfi_startproc
 2169              		@ args = 0, pretend = 0, frame = 0
 2170              		@ frame_needed = 0, uses_anonymous_args = 0
 2171              	.LVL231:
 2172 0000 08B5     		push	{r3, lr}
 2173              		.cfi_def_cfa_offset 8
 2174              		.cfi_offset 3, -8
 2175              		.cfi_offset 14, -4
2945:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
 2176              		.loc 1 2945 0
 2177 0002 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
 2178              	.LVL232:
2946:../drivers/fsl_flash.c ****     {
 2179              		.loc 1 2946 0
 2180 0006 38B9     		cbnz	r0, .L215
 2181              	.LVL233:
 2182              	.LBB73:
 2183              	.LBB74:
2955:../drivers/fsl_flash.c ****     {
 2184              		.loc 1 2955 0
 2185 0008 0129     		cmp	r1, #1
 2186 000a 05D1     		bne	.L215
2961:../drivers/fsl_flash.c **** #endif
 2187              		.loc 1 2961 0
 2188 000c FFF7FEFF 		bl	fmc_flash_cache_clear
 2189              	.LVL234:
 2190              	.LBE74:
 2191              	.LBE73:
2976:../drivers/fsl_flash.c **** 
 2192              		.loc 1 2976 0
 2193 0010 BDE80840 		pop	{r3, lr}
 2194              		.cfi_remember_state
 2195              		.cfi_restore 14
 2196              		.cfi_restore 3
 2197              		.cfi_def_cfa_offset 0
 2198              	.LBB76:
 2199              	.LBB75:
2967:../drivers/fsl_flash.c **** #endif
 2200              		.loc 1 2967 0
 2201 0014 FFF7FEBF 		b	fmc_flash_prefetch_speculation_clear
 2202              	.LVL235:
 2203              	.L215:
 2204              		.cfi_restore_state
 2205 0018 08BD     		pop	{r3, pc}
 2206              	.LBE75:
 2207              	.LBE76:
 2208              		.cfi_endproc
 2209              	.LFE179:
 2211              		.section	.text.flash_cache_clear,"ax",%progbits
 2212              		.align	1
 2213              		.global	flash_cache_clear
 2214              		.syntax unified
 2215              		.thumb
 2216              		.thumb_func
 2217              		.fpu fpv4-sp-d16
 2219              	flash_cache_clear:
 2220              	.LFB178:
2933:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPost);
 2221              		.loc 1 2933 0
 2222              		.cfi_startproc
 2223              		@ args = 0, pretend = 0, frame = 0
 2224              		@ frame_needed = 0, uses_anonymous_args = 0
 2225              		@ link register save eliminated.
 2226              	.LVL236:
2934:../drivers/fsl_flash.c **** }
 2227              		.loc 1 2934 0
 2228 0000 0121     		movs	r1, #1
 2229 0002 FFF7FEBF 		b	flash_cache_clear_process
 2230              	.LVL237:
 2231              		.cfi_endproc
 2232              	.LFE178:
 2234              		.section	.text.FLASH_EraseAll,"ax",%progbits
 2235              		.align	1
 2236              		.global	FLASH_EraseAll
 2237              		.syntax unified
 2238              		.thumb
 2239              		.thumb_func
 2240              		.fpu fpv4-sp-d16
 2242              	FLASH_EraseAll:
 2243              	.LFB149:
 873:../drivers/fsl_flash.c ****     status_t returnCode;
 2244              		.loc 1 873 0
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 0
 2247              		@ frame_needed = 0, uses_anonymous_args = 0
 2248              	.LVL238:
 2249 0000 38B5     		push	{r3, r4, r5, lr}
 2250              		.cfi_def_cfa_offset 16
 2251              		.cfi_offset 3, -16
 2252              		.cfi_offset 4, -12
 2253              		.cfi_offset 5, -8
 2254              		.cfi_offset 14, -4
 876:../drivers/fsl_flash.c ****     {
 2255              		.loc 1 876 0
 2256 0002 0546     		mov	r5, r0
 2257 0004 48B1     		cbz	r0, .L221
 882:../drivers/fsl_flash.c **** 
 2258              		.loc 1 882 0
 2259 0006 0B4B     		ldr	r3, .L222
 2260 0008 6FF03B42 		mvn	r2, #-1157627904
 2261 000c 1A60     		str	r2, [r3]
 2262              	.LVL239:
 2263              	.LBB77:
 2264              	.LBB78:
3096:../drivers/fsl_flash.c ****     {
 2265              		.loc 1 3096 0
 2266 000e 0A4B     		ldr	r3, .L222+4
 2267 0010 9942     		cmp	r1, r3
 2268 0012 04D0     		beq	.L220
3098:../drivers/fsl_flash.c ****     }
 2269              		.loc 1 3098 0
 2270 0014 6B24     		movs	r4, #107
 2271              	.LVL240:
 2272              	.L218:
 2273              	.LBE78:
 2274              	.LBE77:
 908:../drivers/fsl_flash.c **** 
 2275              		.loc 1 908 0
 2276 0016 2046     		mov	r0, r4
 2277 0018 38BD     		pop	{r3, r4, r5, pc}
 2278              	.LVL241:
 2279              	.L221:
 878:../drivers/fsl_flash.c ****     }
 2280              		.loc 1 878 0
 2281 001a 0424     		movs	r4, #4
 2282 001c FBE7     		b	.L218
 2283              	.LVL242:
 2284              	.L220:
 891:../drivers/fsl_flash.c **** 
 2285              		.loc 1 891 0
 2286 001e 0021     		movs	r1, #0
 2287              	.LVL243:
 2288 0020 FFF7FEFF 		bl	flash_cache_clear_process
 2289              	.LVL244:
 894:../drivers/fsl_flash.c **** 
 2290              		.loc 1 894 0
 2291 0024 2846     		mov	r0, r5
 2292 0026 FFF7FEFF 		bl	flash_command_sequence
 2293              	.LVL245:
 2294 002a 0446     		mov	r4, r0
 2295              	.LVL246:
 896:../drivers/fsl_flash.c **** 
 2296              		.loc 1 896 0
 2297 002c 2846     		mov	r0, r5
 2298              	.LVL247:
 2299 002e FFF7FEFF 		bl	flash_cache_clear
 2300              	.LVL248:
 907:../drivers/fsl_flash.c **** }
 2301              		.loc 1 907 0
 2302 0032 F0E7     		b	.L218
 2303              	.L223:
 2304              		.align	2
 2305              	.L222:
 2306 0034 04000240 		.word	1073872900
 2307 0038 6B66656B 		.word	1801807467
 2308              		.cfi_endproc
 2309              	.LFE149:
 2311              		.section	.text.FLASH_Erase,"ax",%progbits
 2312              		.align	1
 2313              		.global	FLASH_Erase
 2314              		.syntax unified
 2315              		.thumb
 2316              		.thumb_func
 2317              		.fpu fpv4-sp-d16
 2319              	FLASH_Erase:
 2320              	.LFB150:
 911:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 2321              		.loc 1 911 0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 32
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 2325              	.LVL249:
 2326 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2327              		.cfi_def_cfa_offset 28
 2328              		.cfi_offset 4, -28
 2329              		.cfi_offset 5, -24
 2330              		.cfi_offset 6, -20
 2331              		.cfi_offset 7, -16
 2332              		.cfi_offset 8, -12
 2333              		.cfi_offset 9, -8
 2334              		.cfi_offset 14, -4
 2335 0004 89B0     		sub	sp, sp, #36
 2336              		.cfi_def_cfa_offset 64
 911:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 2337              		.loc 1 911 0
 2338 0006 8046     		mov	r8, r0
 2339 0008 0E46     		mov	r6, r1
 2340 000a 1446     		mov	r4, r2
 918:../drivers/fsl_flash.c **** 
 2341              		.loc 1 918 0
 2342 000c 6A46     		mov	r2, sp
 2343              	.LVL250:
 911:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 2344              		.loc 1 911 0
 2345 000e 1D46     		mov	r5, r3
 918:../drivers/fsl_flash.c **** 
 2346              		.loc 1 918 0
 2347 0010 FFF7FEFF 		bl	flash_get_matched_operation_info
 2348              	.LVL251:
 921:../drivers/fsl_flash.c ****     if (returnCode)
 2349              		.loc 1 921 0
 2350 0014 049B     		ldr	r3, [sp, #16]
 2351 0016 2246     		mov	r2, r4
 2352 0018 3146     		mov	r1, r6
 2353 001a 4046     		mov	r0, r8
 2354 001c FFF7FEFF 		bl	flash_check_range
 2355              	.LVL252:
 922:../drivers/fsl_flash.c ****     {
 2356              		.loc 1 922 0
 2357 0020 D8B9     		cbnz	r0, .L224
 2358              	.LVL253:
 2359              	.LBB79:
 2360              	.LBB80:
3096:../drivers/fsl_flash.c ****     {
 2361              		.loc 1 3096 0
 2362 0022 174B     		ldr	r3, .L234
 2363 0024 9D42     		cmp	r5, r3
 2364 0026 29D1     		bne	.L232
 2365              	.LVL254:
 2366              	.LBE80:
 2367              	.LBE79:
 935:../drivers/fsl_flash.c **** 
 2368              		.loc 1 935 0
 2369 0028 9DE8C000 		ldm	sp, {r6, r7}
 2370              	.LVL255:
 938:../drivers/fsl_flash.c **** 
 2371              		.loc 1 938 0
 2372 002c 751E     		subs	r5, r6, #1
 2373              	.LVL256:
 2374 002e 2544     		add	r5, r5, r4
 2375              	.LVL257:
 942:../drivers/fsl_flash.c ****     {
 2376              		.loc 1 942 0
 2377 0030 B5FBF7F3 		udiv	r3, r5, r7
 2378 0034 07FB1352 		mls	r2, r7, r3, r5
 2379 0038 12B1     		cbz	r2, .L231
 945:../drivers/fsl_flash.c ****     }
 2380              		.loc 1 945 0
 2381 003a 03FB0775 		mla	r5, r3, r7, r7
 2382              	.LVL258:
 2383 003e 013D     		subs	r5, r5, #1
 2384              	.LVL259:
 2385              	.L231:
 948:../drivers/fsl_flash.c **** 
 2386              		.loc 1 948 0
 2387 0040 0021     		movs	r1, #0
 2388 0042 4046     		mov	r0, r8
 2389 0044 FFF7FEFF 		bl	flash_cache_clear_process
 2390              	.LVL260:
 955:../drivers/fsl_flash.c **** 
 2391              		.loc 1 955 0
 2392 0048 DFF83890 		ldr	r9, .L234+4
 2393              	.LVL261:
 2394              	.L227:
 952:../drivers/fsl_flash.c ****     {
 2395              		.loc 1 952 0
 2396 004c AE42     		cmp	r6, r5
 2397 004e 07D9     		bls	.L229
 2398 0050 0024     		movs	r4, #0
 2399              	.LVL262:
 2400              	.L228:
 972:../drivers/fsl_flash.c **** 
 2401              		.loc 1 972 0
 2402 0052 4046     		mov	r0, r8
 2403 0054 FFF7FEFF 		bl	flash_cache_clear
 2404              	.LVL263:
 974:../drivers/fsl_flash.c **** }
 2405              		.loc 1 974 0
 2406 0058 2046     		mov	r0, r4
 2407              	.LVL264:
 2408              	.L224:
 975:../drivers/fsl_flash.c **** 
 2409              		.loc 1 975 0
 2410 005a 09B0     		add	sp, sp, #36
 2411              		.cfi_remember_state
 2412              		.cfi_def_cfa_offset 28
 2413              		@ sp needed
 2414 005c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2415              	.LVL265:
 2416              	.L229:
 2417              		.cfi_restore_state
 955:../drivers/fsl_flash.c **** 
 2418              		.loc 1 955 0
 2419 0060 26F07F43 		bic	r3, r6, #-16777216
 2420 0064 43F01063 		orr	r3, r3, #150994944
 2421 0068 C9F80030 		str	r3, [r9]
 958:../drivers/fsl_flash.c **** 
 2422              		.loc 1 958 0
 2423 006c 4046     		mov	r0, r8
 2424 006e FFF7FEFF 		bl	flash_command_sequence
 2425              	.LVL266:
 961:../drivers/fsl_flash.c ****         {
 2426              		.loc 1 961 0
 2427 0072 0446     		mov	r4, r0
 2428 0074 0028     		cmp	r0, #0
 2429 0076 ECD1     		bne	.L228
 968:../drivers/fsl_flash.c ****         }
 2430              		.loc 1 968 0
 2431 0078 3E44     		add	r6, r6, r7
 2432              	.LVL267:
 2433 007a E7E7     		b	.L227
 2434              	.LVL268:
 2435              	.L232:
 2436              	.LBB82:
 2437              	.LBB81:
3098:../drivers/fsl_flash.c ****     }
 2438              		.loc 1 3098 0
 2439 007c 6B20     		movs	r0, #107
 2440              	.LVL269:
 2441 007e ECE7     		b	.L224
 2442              	.L235:
 2443              		.align	2
 2444              	.L234:
 2445 0080 6B66656B 		.word	1801807467
 2446 0084 04000240 		.word	1073872900
 2447              	.LBE81:
 2448              	.LBE82:
 2449              		.cfi_endproc
 2450              	.LFE150:
 2452              		.section	.text.FLASH_Swap,"ax",%progbits
 2453              		.align	1
 2454              		.global	FLASH_Swap
 2455              		.syntax unified
 2456              		.thumb
 2457              		.thumb_func
 2458              		.fpu fpv4-sp-d16
 2460              	FLASH_Swap:
 2461              	.LFB168:
2186:../drivers/fsl_flash.c ****     flash_swap_state_config_t returnInfo;
 2462              		.loc 1 2186 0
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 24
 2465              		@ frame_needed = 0, uses_anonymous_args = 0
 2466              	.LVL270:
 2467 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2468              		.cfi_def_cfa_offset 24
 2469              		.cfi_offset 4, -24
 2470              		.cfi_offset 5, -20
 2471              		.cfi_offset 6, -16
 2472              		.cfi_offset 7, -12
 2473              		.cfi_offset 8, -8
 2474              		.cfi_offset 14, -4
 2475 0004 88B0     		sub	sp, sp, #32
 2476              		.cfi_def_cfa_offset 56
2190:../drivers/fsl_flash.c **** 
 2477              		.loc 1 2190 0
 2478 0006 6FF07F43 		mvn	r3, #-16777216
2246:../drivers/fsl_flash.c ****                                              FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT, 
 2479              		.loc 1 2246 0
 2480 000a DFF8B080 		ldr	r8, .L259
2190:../drivers/fsl_flash.c **** 
 2481              		.loc 1 2190 0
 2482 000e ADF80C30 		strh	r3, [sp, #12]	@ movhi
2186:../drivers/fsl_flash.c ****     flash_swap_state_config_t returnInfo;
 2483              		.loc 1 2186 0
 2484 0012 0446     		mov	r4, r0
 2485 0014 0E46     		mov	r6, r1
 2486 0016 1746     		mov	r7, r2
2190:../drivers/fsl_flash.c **** 
 2487              		.loc 1 2190 0
 2488 0018 8DF80E30 		strb	r3, [sp, #14]
 2489              	.LVL271:
 2490              	.L256:
2194:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
 2491              		.loc 1 2194 0
 2492 001c 03AB     		add	r3, sp, #12
 2493 001e 0822     		movs	r2, #8
 2494 0020 3146     		mov	r1, r6
 2495 0022 2046     		mov	r0, r4
 2496 0024 FFF7FEFF 		bl	FLASH_SwapControl
 2497              	.LVL272:
2195:../drivers/fsl_flash.c ****         {
 2498              		.loc 1 2195 0
 2499 0028 0546     		mov	r5, r0
 2500 002a B0B9     		cbnz	r0, .L236
2200:../drivers/fsl_flash.c ****         {
 2501              		.loc 1 2200 0
 2502 002c 012F     		cmp	r7, #1
 2503 002e 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 2504 0032 0AD1     		bne	.L238
2202:../drivers/fsl_flash.c ****             {
 2505              		.loc 1 2202 0
 2506 0034 052B     		cmp	r3, #5
 2507 0036 10D0     		beq	.L236
2206:../drivers/fsl_flash.c ****             {
 2508              		.loc 1 2206 0
 2509 0038 002B     		cmp	r3, #0
 2510 003a 3AD1     		bne	.L253
2210:../drivers/fsl_flash.c ****             }
 2511              		.loc 1 2210 0
 2512 003c 03AB     		add	r3, sp, #12
 2513 003e 1022     		movs	r2, #16
 2514              	.LVL273:
 2515              	.L258:
2251:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInCompleteSta
 2516              		.loc 1 2251 0
 2517 0040 3146     		mov	r1, r6
 2518 0042 2046     		mov	r0, r4
 2519 0044 FFF7FEFF 		bl	FLASH_SwapControl
 2520              	.LVL274:
2253:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateComplete:
 2521              		.loc 1 2253 0
 2522 0048 28E0     		b	.L240
 2523              	.L238:
2225:../drivers/fsl_flash.c ****             {
 2524              		.loc 1 2225 0
 2525 004a 052B     		cmp	r3, #5
 2526 004c 04D8     		bhi	.L241
 2527 004e DFE803F0 		tbb	[pc, r3]
 2528              	.L243:
 2529 0052 08       		.byte	(.L242-.L243)/2
 2530 0053 0B       		.byte	(.L244-.L243)/2
 2531 0054 1D       		.byte	(.L245-.L243)/2
 2532 0055 2D       		.byte	(.L246-.L243)/2
 2533 0056 26       		.byte	(.L247-.L243)/2
 2534 0057 30       		.byte	(.L253-.L243)/2
 2535              		.p2align 1
 2536              	.L241:
2262:../drivers/fsl_flash.c ****                     break;
 2537              		.loc 1 2262 0
 2538 0058 0425     		movs	r5, #4
 2539              	.LVL275:
 2540              	.L236:
2273:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
 2541              		.loc 1 2273 0
 2542 005a 2846     		mov	r0, r5
 2543 005c 08B0     		add	sp, sp, #32
 2544              		.cfi_remember_state
 2545              		.cfi_def_cfa_offset 24
 2546              		@ sp needed
 2547 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2548              	.LVL276:
 2549              	.L242:
 2550              		.cfi_restore_state
2229:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionIntializeSystem,
 2551              		.loc 1 2229 0
 2552 0062 03AB     		add	r3, sp, #12
 2553 0064 0122     		movs	r2, #1
 2554 0066 EBE7     		b	.L258
 2555              	.L244:
 2556              	.LVL277:
 2557              	.LBB85:
 2558              	.LBB86:
3395:../drivers/fsl_flash.c ****         FLASH_ReadResource(config, kFLASH_ResourceRangePflashSwapIfrStart, flashSwapIfrFieldData.fl
 2559              		.loc 1 3395 0
 2560 0068 0023     		movs	r3, #0
 2561 006a 0093     		str	r3, [sp]
 2562 006c 04AA     		add	r2, sp, #16
 2563 006e 0823     		movs	r3, #8
 2564 0070 4FF48021 		mov	r1, #262144
 2565 0074 2046     		mov	r0, r4
 2566              	.LVL278:
 2567 0076 FFF7FEFF 		bl	FLASH_ReadResource
 2568              	.LVL279:
3399:../drivers/fsl_flash.c ****     {
 2569              		.loc 1 3399 0
 2570 007a E8B9     		cbnz	r0, .L248
 2571              	.LVL280:
3430:../drivers/fsl_flash.c ****                            FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT;
 2572              		.loc 1 3430 0
 2573 007c BDF81030 		ldrh	r3, [sp, #16]
3432:../drivers/fsl_flash.c ****     {
 2574              		.loc 1 3432 0
 2575 0080 B6EB031F 		cmp	r6, r3, lsl #4
 2576 0084 17D1     		bne	.L254
 2577              	.LVL281:
 2578              	.LBE86:
 2579              	.LBE85:
2239:../drivers/fsl_flash.c ****                             FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInUpdateS
 2580              		.loc 1 2239 0
 2581 0086 03AB     		add	r3, sp, #12
 2582 0088 0222     		movs	r2, #2
 2583 008a D9E7     		b	.L258
 2584              	.LVL282:
 2585              	.L245:
2246:../drivers/fsl_flash.c ****                                              FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT, 
 2586              		.loc 1 2246 0
 2587 008c 6168     		ldr	r1, [r4, #4]
 2588 008e 4346     		mov	r3, r8
 2589 0090 1022     		movs	r2, #16
 2590 0092 06EB5101 		add	r1, r6, r1, lsr #1
 2591 0096 2046     		mov	r0, r4
 2592              	.LVL283:
 2593 0098 FFF7FEFF 		bl	FLASH_Erase
 2594              	.LVL284:
 2595              	.L240:
2266:../drivers/fsl_flash.c ****         {
 2596              		.loc 1 2266 0
 2597 009c 60B9     		cbnz	r0, .L248
 2598              	.L247:
 2599              	.LVL285:
2270:../drivers/fsl_flash.c **** 
 2600              		.loc 1 2270 0
 2601 009e 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 2602 00a2 042B     		cmp	r3, #4
 2603 00a4 BAD1     		bne	.L256
2270:../drivers/fsl_flash.c **** 
 2604              		.loc 1 2270 0 is_stmt 0 discriminator 1
 2605 00a6 002F     		cmp	r7, #0
 2606 00a8 B8D1     		bne	.L256
 2607 00aa D6E7     		b	.L236
 2608              	.LVL286:
 2609              	.L246:
2251:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInCompleteSta
 2610              		.loc 1 2251 0 is_stmt 1
 2611 00ac 03AB     		add	r3, sp, #12
 2612 00ae 0422     		movs	r2, #4
 2613 00b0 C6E7     		b	.L258
 2614              	.L253:
2259:../drivers/fsl_flash.c ****                     break;
 2615              		.loc 1 2259 0
 2616 00b2 7425     		movs	r5, #116
 2617 00b4 D1E7     		b	.L236
 2618              	.LVL287:
 2619              	.L254:
 2620              	.LBB88:
 2621              	.LBB87:
3434:../drivers/fsl_flash.c ****     }
 2622              		.loc 1 3434 0
 2623 00b6 7520     		movs	r0, #117
 2624              	.LVL288:
 2625              	.L248:
 2626 00b8 0546     		mov	r5, r0
 2627 00ba CEE7     		b	.L236
 2628              	.L260:
 2629              		.align	2
 2630              	.L259:
 2631 00bc 6B66656B 		.word	1801807467
 2632              	.LBE87:
 2633              	.LBE88:
 2634              		.cfi_endproc
 2635              	.LFE168:
 2637              		.section	.text.FLASH_EraseAllExecuteOnlySegments,"ax",%progbits
 2638              		.align	1
 2639              		.global	FLASH_EraseAllExecuteOnlySegments
 2640              		.syntax unified
 2641              		.thumb
 2642              		.thumb_func
 2643              		.fpu fpv4-sp-d16
 2645              	FLASH_EraseAllExecuteOnlySegments:
 2646              	.LFB151:
1018:../drivers/fsl_flash.c ****     status_t returnCode;
 2647              		.loc 1 1018 0
 2648              		.cfi_startproc
 2649              		@ args = 0, pretend = 0, frame = 0
 2650              		@ frame_needed = 0, uses_anonymous_args = 0
 2651              	.LVL289:
 2652 0000 38B5     		push	{r3, r4, r5, lr}
 2653              		.cfi_def_cfa_offset 16
 2654              		.cfi_offset 3, -16
 2655              		.cfi_offset 4, -12
 2656              		.cfi_offset 5, -8
 2657              		.cfi_offset 14, -4
1021:../drivers/fsl_flash.c ****     {
 2658              		.loc 1 1021 0
 2659 0002 0546     		mov	r5, r0
 2660 0004 48B1     		cbz	r0, .L264
1028:../drivers/fsl_flash.c **** 
 2661              		.loc 1 1028 0
 2662 0006 0B4B     		ldr	r3, .L265
 2663 0008 6FF03442 		mvn	r2, #-1275068416
 2664 000c 1A60     		str	r2, [r3]
 2665              	.LVL290:
 2666              	.LBB89:
 2667              	.LBB90:
3096:../drivers/fsl_flash.c ****     {
 2668              		.loc 1 3096 0
 2669 000e 0A4B     		ldr	r3, .L265+4
 2670 0010 9942     		cmp	r1, r3
 2671 0012 04D0     		beq	.L263
3098:../drivers/fsl_flash.c ****     }
 2672              		.loc 1 3098 0
 2673 0014 6B24     		movs	r4, #107
 2674              	.LVL291:
 2675              	.L261:
 2676              	.LBE90:
 2677              	.LBE89:
1045:../drivers/fsl_flash.c **** 
 2678              		.loc 1 1045 0
 2679 0016 2046     		mov	r0, r4
 2680 0018 38BD     		pop	{r3, r4, r5, pc}
 2681              	.LVL292:
 2682              	.L264:
1023:../drivers/fsl_flash.c ****     }
 2683              		.loc 1 1023 0
 2684 001a 0424     		movs	r4, #4
 2685 001c FBE7     		b	.L261
 2686              	.LVL293:
 2687              	.L263:
1037:../drivers/fsl_flash.c **** 
 2688              		.loc 1 1037 0
 2689 001e 0021     		movs	r1, #0
 2690              	.LVL294:
 2691 0020 FFF7FEFF 		bl	flash_cache_clear_process
 2692              	.LVL295:
1040:../drivers/fsl_flash.c **** 
 2693              		.loc 1 1040 0
 2694 0024 2846     		mov	r0, r5
 2695 0026 FFF7FEFF 		bl	flash_command_sequence
 2696              	.LVL296:
 2697 002a 0446     		mov	r4, r0
 2698              	.LVL297:
1042:../drivers/fsl_flash.c **** 
 2699              		.loc 1 1042 0
 2700 002c 2846     		mov	r0, r5
 2701              	.LVL298:
 2702 002e FFF7FEFF 		bl	flash_cache_clear
 2703              	.LVL299:
1044:../drivers/fsl_flash.c **** }
 2704              		.loc 1 1044 0
 2705 0032 F0E7     		b	.L261
 2706              	.L266:
 2707              		.align	2
 2708              	.L265:
 2709 0034 04000240 		.word	1073872900
 2710 0038 6B66656B 		.word	1801807467
 2711              		.cfi_endproc
 2712              	.LFE151:
 2714              		.section	.text.FLASH_Program,"ax",%progbits
 2715              		.align	1
 2716              		.global	FLASH_Program
 2717              		.syntax unified
 2718              		.thumb
 2719              		.thumb_func
 2720              		.fpu fpv4-sp-d16
 2722              	FLASH_Program:
 2723              	.LFB152:
1048:../drivers/fsl_flash.c ****     status_t returnCode;
 2724              		.loc 1 1048 0
 2725              		.cfi_startproc
 2726              		@ args = 0, pretend = 0, frame = 32
 2727              		@ frame_needed = 0, uses_anonymous_args = 0
 2728              	.LVL300:
 2729 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2730              		.cfi_def_cfa_offset 36
 2731              		.cfi_offset 4, -36
 2732              		.cfi_offset 5, -32
 2733              		.cfi_offset 6, -28
 2734              		.cfi_offset 7, -24
 2735              		.cfi_offset 8, -20
 2736              		.cfi_offset 9, -16
 2737              		.cfi_offset 10, -12
 2738              		.cfi_offset 11, -8
 2739              		.cfi_offset 14, -4
 2740 0004 0646     		mov	r6, r0
 2741 0006 89B0     		sub	sp, sp, #36
 2742              		.cfi_def_cfa_offset 72
1048:../drivers/fsl_flash.c ****     status_t returnCode;
 2743              		.loc 1 1048 0
 2744 0008 0F46     		mov	r7, r1
 2745 000a 1D46     		mov	r5, r3
1052:../drivers/fsl_flash.c ****     {
 2746              		.loc 1 1052 0
 2747 000c 1446     		mov	r4, r2
 2748 000e 002A     		cmp	r2, #0
 2749 0010 42D0     		beq	.L274
1057:../drivers/fsl_flash.c **** 
 2750              		.loc 1 1057 0
 2751 0012 6A46     		mov	r2, sp
 2752              	.LVL301:
 2753 0014 FFF7FEFF 		bl	flash_get_matched_operation_info
 2754              	.LVL302:
1060:../drivers/fsl_flash.c ****     if (returnCode)
 2755              		.loc 1 1060 0
 2756 0018 039B     		ldr	r3, [sp, #12]
 2757 001a 2A46     		mov	r2, r5
 2758 001c 3946     		mov	r1, r7
 2759 001e 3046     		mov	r0, r6
 2760 0020 FFF7FEFF 		bl	flash_check_range
 2761              	.LVL303:
1061:../drivers/fsl_flash.c ****     {
 2762              		.loc 1 1061 0
 2763 0024 80B9     		cbnz	r0, .L267
1068:../drivers/fsl_flash.c **** 
 2764              		.loc 1 1068 0
 2765 0026 0146     		mov	r1, r0
 2766 0028 3046     		mov	r0, r6
 2767              	.LVL304:
1066:../drivers/fsl_flash.c **** 
 2768              		.loc 1 1066 0
 2769 002a 009F     		ldr	r7, [sp]
 2770              	.LVL305:
1073:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
 2771              		.loc 1 1073 0
 2772 002c DFF86CA0 		ldr	r10, .L276
1080:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
 2773              		.loc 1 1080 0
 2774 0030 DFF86CB0 		ldr	fp, .L276+4
1081:../drivers/fsl_flash.c ****         }
 2775              		.loc 1 1081 0
 2776 0034 DFF86C80 		ldr	r8, .L276+8
1068:../drivers/fsl_flash.c **** 
 2777              		.loc 1 1068 0
 2778 0038 FFF7FEFF 		bl	flash_cache_clear_process
 2779              	.LVL306:
 2780              	.L269:
1070:../drivers/fsl_flash.c ****     {
 2781              		.loc 1 1070 0
 2782 003c 3DB9     		cbnz	r5, .L273
 2783 003e 2C46     		mov	r4, r5
 2784              	.LVL307:
 2785              	.L272:
1105:../drivers/fsl_flash.c **** 
 2786              		.loc 1 1105 0
 2787 0040 3046     		mov	r0, r6
 2788 0042 FFF7FEFF 		bl	flash_cache_clear
 2789              	.LVL308:
1107:../drivers/fsl_flash.c **** }
 2790              		.loc 1 1107 0
 2791 0046 2046     		mov	r0, r4
 2792              	.LVL309:
 2793              	.L267:
1108:../drivers/fsl_flash.c **** 
 2794              		.loc 1 1108 0
 2795 0048 09B0     		add	sp, sp, #36
 2796              		.cfi_remember_state
 2797              		.cfi_def_cfa_offset 36
 2798              		@ sp needed
 2799 004a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2800              	.LVL310:
 2801              	.L273:
 2802              		.cfi_restore_state
1073:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
 2803              		.loc 1 1073 0
 2804 004e 2368     		ldr	r3, [r4]
 2805 0050 CAF80030 		str	r3, [r10]
1074:../drivers/fsl_flash.c ****         {
 2806              		.loc 1 1074 0
 2807 0054 039B     		ldr	r3, [sp, #12]
 2808 0056 042B     		cmp	r3, #4
1073:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
 2809              		.loc 1 1073 0
 2810 0058 04F10409 		add	r9, r4, #4
 2811              	.LVL311:
1074:../drivers/fsl_flash.c ****         {
 2812              		.loc 1 1074 0
 2813 005c 10D1     		bne	.L270
1076:../drivers/fsl_flash.c ****         }
 2814              		.loc 1 1076 0
 2815 005e 27F07F43 		bic	r3, r7, #-16777216
 2816 0062 43F0C063 		orr	r3, r3, #100663296
 2817              	.L275:
1081:../drivers/fsl_flash.c ****         }
 2818              		.loc 1 1081 0
 2819 0066 C8F80030 		str	r3, [r8]
 2820              	.L271:
1088:../drivers/fsl_flash.c **** 
 2821              		.loc 1 1088 0
 2822 006a 3046     		mov	r0, r6
 2823 006c FFF7FEFF 		bl	flash_command_sequence
 2824              	.LVL312:
1091:../drivers/fsl_flash.c ****         {
 2825              		.loc 1 1091 0
 2826 0070 0446     		mov	r4, r0
 2827 0072 0028     		cmp	r0, #0
 2828 0074 E4D1     		bne	.L272
1098:../drivers/fsl_flash.c **** 
 2829              		.loc 1 1098 0
 2830 0076 039B     		ldr	r3, [sp, #12]
1101:../drivers/fsl_flash.c ****         }
 2831              		.loc 1 1101 0
 2832 0078 4C46     		mov	r4, r9
1098:../drivers/fsl_flash.c **** 
 2833              		.loc 1 1098 0
 2834 007a 1F44     		add	r7, r7, r3
 2835              	.LVL313:
1101:../drivers/fsl_flash.c ****         }
 2836              		.loc 1 1101 0
 2837 007c ED1A     		subs	r5, r5, r3
 2838              	.LVL314:
 2839 007e DDE7     		b	.L269
 2840              	.LVL315:
 2841              	.L270:
1078:../drivers/fsl_flash.c ****         {
 2842              		.loc 1 1078 0
 2843 0080 082B     		cmp	r3, #8
 2844 0082 F2D1     		bne	.L271
1080:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
 2845              		.loc 1 1080 0
 2846 0084 6368     		ldr	r3, [r4, #4]
 2847 0086 CBF80030 		str	r3, [fp]
1081:../drivers/fsl_flash.c ****         }
 2848              		.loc 1 1081 0
 2849 008a 27F07F43 		bic	r3, r7, #-16777216
1080:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
 2850              		.loc 1 1080 0
 2851 008e 04F10809 		add	r9, r4, #8
 2852              	.LVL316:
1081:../drivers/fsl_flash.c ****         }
 2853              		.loc 1 1081 0
 2854 0092 43F0E063 		orr	r3, r3, #117440512
 2855 0096 E6E7     		b	.L275
 2856              	.LVL317:
 2857              	.L274:
1054:../drivers/fsl_flash.c ****     }
 2858              		.loc 1 1054 0
 2859 0098 0420     		movs	r0, #4
 2860              	.LVL318:
 2861 009a D5E7     		b	.L267
 2862              	.L277:
 2863              		.align	2
 2864              	.L276:
 2865 009c 08000240 		.word	1073872904
 2866 00a0 0C000240 		.word	1073872908
 2867 00a4 04000240 		.word	1073872900
 2868              		.cfi_endproc
 2869              	.LFE152:
 2871              		.section	.text.FLASH_ProgramOnce,"ax",%progbits
 2872              		.align	1
 2873              		.global	FLASH_ProgramOnce
 2874              		.syntax unified
 2875              		.thumb
 2876              		.thumb_func
 2877              		.fpu fpv4-sp-d16
 2879              	FLASH_ProgramOnce:
 2880              	.LFB153:
1111:../drivers/fsl_flash.c ****     status_t returnCode;
 2881              		.loc 1 1111 0
 2882              		.cfi_startproc
 2883              		@ args = 0, pretend = 0, frame = 0
 2884              		@ frame_needed = 0, uses_anonymous_args = 0
 2885              	.LVL319:
 2886 0000 38B5     		push	{r3, r4, r5, lr}
 2887              		.cfi_def_cfa_offset 16
 2888              		.cfi_offset 3, -16
 2889              		.cfi_offset 4, -12
 2890              		.cfi_offset 5, -8
 2891              		.cfi_offset 14, -4
1114:../drivers/fsl_flash.c ****     {
 2892              		.loc 1 1114 0
 2893 0002 0546     		mov	r5, r0
 2894 0004 C0B1     		cbz	r0, .L281
1114:../drivers/fsl_flash.c ****     {
 2895              		.loc 1 1114 0 is_stmt 0 discriminator 1
 2896 0006 BAB1     		cbz	r2, .L281
1120:../drivers/fsl_flash.c **** 
 2897              		.loc 1 1120 0 is_stmt 1
 2898 0008 0904     		lsls	r1, r1, #16
 2899              	.LVL320:
 2900 000a 0C4B     		ldr	r3, .L282
 2901              	.LVL321:
 2902 000c 01F47F01 		and	r1, r1, #16711680
 2903 0010 0B43     		orrs	r3, r3, r1
 2904 0012 0B49     		ldr	r1, .L282+4
 2905 0014 0B60     		str	r3, [r1]
1122:../drivers/fsl_flash.c **** 
 2906              		.loc 1 1122 0
 2907 0016 0B4B     		ldr	r3, .L282+8
 2908 0018 1168     		ldr	r1, [r2]
 2909 001a 1960     		str	r1, [r3]
1134:../drivers/fsl_flash.c ****     }
 2910              		.loc 1 1134 0
 2911 001c 5268     		ldr	r2, [r2, #4]
 2912              	.LVL322:
 2913 001e 5A60     		str	r2, [r3, #4]
1138:../drivers/fsl_flash.c **** 
 2914              		.loc 1 1138 0
 2915 0020 0021     		movs	r1, #0
 2916 0022 FFF7FEFF 		bl	flash_cache_clear_process
 2917              	.LVL323:
1141:../drivers/fsl_flash.c **** 
 2918              		.loc 1 1141 0
 2919 0026 2846     		mov	r0, r5
 2920 0028 FFF7FEFF 		bl	flash_command_sequence
 2921              	.LVL324:
 2922 002c 0446     		mov	r4, r0
 2923              	.LVL325:
1143:../drivers/fsl_flash.c **** 
 2924              		.loc 1 1143 0
 2925 002e 2846     		mov	r0, r5
 2926              	.LVL326:
 2927 0030 FFF7FEFF 		bl	flash_cache_clear
 2928              	.LVL327:
 2929              	.L278:
1146:../drivers/fsl_flash.c **** 
 2930              		.loc 1 1146 0
 2931 0034 2046     		mov	r0, r4
 2932 0036 38BD     		pop	{r3, r4, r5, pc}
 2933              	.LVL328:
 2934              	.L281:
1116:../drivers/fsl_flash.c ****     }
 2935              		.loc 1 1116 0
 2936 0038 0424     		movs	r4, #4
 2937 003a FBE7     		b	.L278
 2938              	.L283:
 2939              		.align	2
 2940              	.L282:
 2941 003c FFFF0043 		.word	1124139007
 2942 0040 04000240 		.word	1073872900
 2943 0044 08000240 		.word	1073872904
 2944              		.cfi_endproc
 2945              	.LFE153:
 2947              		.section	.text.FLASH_ProgramSection,"ax",%progbits
 2948              		.align	1
 2949              		.global	FLASH_ProgramSection
 2950              		.syntax unified
 2951              		.thumb
 2952              		.thumb_func
 2953              		.fpu fpv4-sp-d16
 2955              	FLASH_ProgramSection:
 2956              	.LFB154:
1150:../drivers/fsl_flash.c ****     status_t returnCode;
 2957              		.loc 1 1150 0
 2958              		.cfi_startproc
 2959              		@ args = 0, pretend = 0, frame = 40
 2960              		@ frame_needed = 0, uses_anonymous_args = 0
 2961              	.LVL329:
 2962 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2963              		.cfi_def_cfa_offset 36
 2964              		.cfi_offset 4, -36
 2965              		.cfi_offset 5, -32
 2966              		.cfi_offset 6, -28
 2967              		.cfi_offset 7, -24
 2968              		.cfi_offset 8, -20
 2969              		.cfi_offset 9, -16
 2970              		.cfi_offset 10, -12
 2971              		.cfi_offset 11, -8
 2972              		.cfi_offset 14, -4
 2973 0004 8146     		mov	r9, r0
 2974 0006 8BB0     		sub	sp, sp, #44
 2975              		.cfi_def_cfa_offset 80
1150:../drivers/fsl_flash.c ****     status_t returnCode;
 2976              		.loc 1 1150 0
 2977 0008 0C46     		mov	r4, r1
 2978 000a 1D46     		mov	r5, r3
1158:../drivers/fsl_flash.c ****     {
 2979              		.loc 1 1158 0
 2980 000c 9346     		mov	fp, r2
 2981 000e 002A     		cmp	r2, #0
 2982 0010 5FD0     		beq	.L293
1163:../drivers/fsl_flash.c **** 
 2983              		.loc 1 1163 0
 2984 0012 02AA     		add	r2, sp, #8
 2985              	.LVL330:
 2986 0014 FFF7FEFF 		bl	flash_get_matched_operation_info
 2987              	.LVL331:
1166:../drivers/fsl_flash.c ****     if (returnCode)
 2988              		.loc 1 1166 0
 2989 0018 079B     		ldr	r3, [sp, #28]
 2990 001a 2A46     		mov	r2, r5
 2991 001c 2146     		mov	r1, r4
 2992 001e 4846     		mov	r0, r9
 2993 0020 FFF7FEFF 		bl	flash_check_range
 2994              	.LVL332:
1167:../drivers/fsl_flash.c ****     {
 2995              		.loc 1 1167 0
 2996 0024 8046     		mov	r8, r0
 2997 0026 0028     		cmp	r0, #0
 2998 0028 4CD1     		bne	.L284
1173:../drivers/fsl_flash.c **** 
 2999              		.loc 1 1173 0
 3000 002a 039B     		ldr	r3, [sp, #12]
1172:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
 3001              		.loc 1 1172 0
 3002 002c 029E     		ldr	r6, [sp, #8]
 3003              	.LVL333:
1173:../drivers/fsl_flash.c **** 
 3004              		.loc 1 1173 0
 3005 002e 0093     		str	r3, [sp]
 3006              	.LVL334:
1189:../drivers/fsl_flash.c **** 
 3007              		.loc 1 1189 0
 3008 0030 0146     		mov	r1, r0
 3009 0032 4846     		mov	r0, r9
 3010              	.LVL335:
 3011 0034 FFF7FEFF 		bl	flash_cache_clear_process
 3012              	.LVL336:
 3013              	.L286:
1191:../drivers/fsl_flash.c ****     {
 3014              		.loc 1 1191 0
 3015 0038 1DB9     		cbnz	r5, .L292
1255:../drivers/fsl_flash.c **** 
 3016              		.loc 1 1255 0
 3017 003a 4846     		mov	r0, r9
 3018 003c FFF7FEFF 		bl	flash_cache_clear
 3019              	.LVL337:
1269:../drivers/fsl_flash.c **** }
 3020              		.loc 1 1269 0
 3021 0040 40E0     		b	.L284
 3022              	.L292:
 3023              	.LBB91:
1194:../drivers/fsl_flash.c ****         uint32_t lengthTobeProgrammedOfCurrentSector;
 3024              		.loc 1 1194 0
 3025 0042 009A     		ldr	r2, [sp]
 3026 0044 7342     		negs	r3, r6
 3027 0046 5242     		negs	r2, r2
 3028 0048 1340     		ands	r3, r3, r2
 3029 004a 5C42     		negs	r4, r3
 3030              	.LVL338:
1198:../drivers/fsl_flash.c ****         {
 3031              		.loc 1 1198 0
 3032 004c A642     		cmp	r6, r4
1200:../drivers/fsl_flash.c ****         }
 3033              		.loc 1 1200 0
 3034 004e 04BF     		itt	eq
 3035 0050 009A     		ldreq	r2, [sp]
 3036 0052 D41A     		subeq	r4, r2, r3
 3037              	.LVL339:
1203:../drivers/fsl_flash.c ****         {
 3038              		.loc 1 1203 0
 3039 0054 7319     		adds	r3, r6, r5
 3040 0056 9C42     		cmp	r4, r3
1205:../drivers/fsl_flash.c ****         }
 3041              		.loc 1 1205 0
 3042 0058 34BF     		ite	cc
 3043 005a A41B     		subcc	r4, r4, r6
 3044              	.LVL340:
 3045 005c 2C46     		movcs	r4, r5
 3046              	.LVL341:
 3047 005e 4FF0000A 		mov	r10, #0
 3048              	.LVL342:
 3049              	.L289:
 3050 0062 2AF00301 		bic	r1, r10, #3
 3051 0066 06EB0A07 		add	r7, r6, r10
1213:../drivers/fsl_flash.c ****         {
 3052              		.loc 1 1213 0
 3053 006a 24B9     		cbnz	r4, .L291
1250:../drivers/fsl_flash.c ****         start += currentOffset;
 3054              		.loc 1 1250 0
 3055 006c 8B44     		add	fp, fp, r1
 3056              	.LVL343:
1251:../drivers/fsl_flash.c ****         lengthInBytes -= currentOffset;
 3057              		.loc 1 1251 0
 3058 006e 3E46     		mov	r6, r7
 3059              	.LVL344:
1252:../drivers/fsl_flash.c ****     }
 3060              		.loc 1 1252 0
 3061 0070 A5EB0A05 		sub	r5, r5, r10
 3062              	.LVL345:
 3063 0074 E0E7     		b	.L286
 3064              	.LVL346:
 3065              	.L291:
 3066 0076 B4F5806F 		cmp	r4, #1024
 3067 007a 2346     		mov	r3, r4
 3068 007c 28BF     		it	cs
 3069 007e 4FF48063 		movcs	r3, #1024
 3070              	.LVL347:
 3071              	.LBB92:
1229:../drivers/fsl_flash.c ****             /* Set start address of the data to be programmed */
 3072              		.loc 1 1229 0
 3073 0082 1A46     		mov	r2, r3
 3074 0084 5944     		add	r1, r1, fp
 3075 0086 4FF0A050 		mov	r0, #335544320
 3076 008a 0193     		str	r3, [sp, #4]
1231:../drivers/fsl_flash.c ****             /* Set program size in terms of FEATURE_FLASH_SECTION_CMD_ADDRESS_ALIGMENT */
 3077              		.loc 1 1231 0
 3078 008c 27F07F47 		bic	r7, r7, #-16777216
1229:../drivers/fsl_flash.c ****             /* Set start address of the data to be programmed */
 3079              		.loc 1 1229 0
 3080 0090 FFF7FEFF 		bl	memcpy
 3081              	.LVL348:
1231:../drivers/fsl_flash.c ****             /* Set program size in terms of FEATURE_FLASH_SECTION_CMD_ADDRESS_ALIGMENT */
 3082              		.loc 1 1231 0
 3083 0094 104B     		ldr	r3, .L295
 3084 0096 47F03067 		orr	r7, r7, #184549376
 3085 009a 1F60     		str	r7, [r3]
 3086              	.LVL349:
1233:../drivers/fsl_flash.c **** 
 3087              		.loc 1 1233 0
 3088 009c 079A     		ldr	r2, [sp, #28]
 3089 009e 019B     		ldr	r3, [sp, #4]
 3090 00a0 B3FBF2F1 		udiv	r1, r3, r2
 3091              	.LVL350:
1235:../drivers/fsl_flash.c **** 
 3092              		.loc 1 1235 0
 3093 00a4 0D4B     		ldr	r3, .L295+4
 3094 00a6 4FF6FF72 		movw	r2, #65535
 3095 00aa 42EA0142 		orr	r2, r2, r1, lsl #16
 3096 00ae 1A60     		str	r2, [r3]
1238:../drivers/fsl_flash.c **** 
 3097              		.loc 1 1238 0
 3098 00b0 4846     		mov	r0, r9
 3099 00b2 FFF7FEFF 		bl	flash_command_sequence
 3100              	.LVL351:
1240:../drivers/fsl_flash.c ****             {
 3101              		.loc 1 1240 0
 3102 00b6 019B     		ldr	r3, [sp, #4]
 3103 00b8 0746     		mov	r7, r0
 3104 00ba 38B1     		cbz	r0, .L290
1242:../drivers/fsl_flash.c ****                 return returnCode;
 3105              		.loc 1 1242 0
 3106 00bc 4846     		mov	r0, r9
 3107              	.LVL352:
 3108 00be FFF7FEFF 		bl	flash_cache_clear
 3109              	.LVL353:
1238:../drivers/fsl_flash.c **** 
 3110              		.loc 1 1238 0
 3111 00c2 B846     		mov	r8, r7
 3112              	.LVL354:
 3113              	.L284:
 3114              	.LBE92:
 3115              	.LBE91:
1270:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD */
 3116              		.loc 1 1270 0
 3117 00c4 4046     		mov	r0, r8
 3118 00c6 0BB0     		add	sp, sp, #44
 3119              		.cfi_remember_state
 3120              		.cfi_def_cfa_offset 36
 3121              		@ sp needed
 3122 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3123              	.LVL355:
 3124              	.L290:
 3125              		.cfi_restore_state
 3126              	.LBB94:
 3127              	.LBB93:
1246:../drivers/fsl_flash.c ****             currentOffset += programSizeOfCurrentPass;
 3128              		.loc 1 1246 0
 3129 00cc E41A     		subs	r4, r4, r3
 3130              	.LVL356:
1247:../drivers/fsl_flash.c ****         }
 3131              		.loc 1 1247 0
 3132 00ce 9A44     		add	r10, r10, r3
 3133              	.LVL357:
 3134 00d0 C7E7     		b	.L289
 3135              	.LVL358:
 3136              	.L293:
 3137              	.LBE93:
 3138              	.LBE94:
1160:../drivers/fsl_flash.c ****     }
 3139              		.loc 1 1160 0
 3140 00d2 4FF00408 		mov	r8, #4
 3141 00d6 F5E7     		b	.L284
 3142              	.L296:
 3143              		.align	2
 3144              	.L295:
 3145 00d8 04000240 		.word	1073872900
 3146 00dc 08000240 		.word	1073872904
 3147              		.cfi_endproc
 3148              	.LFE154:
 3150              		.global	kPFlashDensities
 3151              		.global	kFPROTL
 3152              		.global	kFCCOBx
 3153              		.section	.bss.callFlashCommonBitOperation,"aw",%nobits
 3154              		.align	2
 3155              		.set	.LANCHOR3,. + 0
 3158              	callFlashCommonBitOperation:
 3159 0000 00000000 		.space	4
 3160              		.section	.bss.callFlashRunCommand,"aw",%nobits
 3161              		.align	2
 3162              		.set	.LANCHOR0,. + 0
 3165              	callFlashRunCommand:
 3166 0000 00000000 		.space	4
 3167              		.section	.bss.s_flashCommonBitOperation,"aw",%nobits
 3168              		.align	2
 3169              		.set	.LANCHOR7,. + 0
 3172              	s_flashCommonBitOperation:
 3173 0000 00000000 		.space	64
 3173      00000000 
 3173      00000000 
 3173      00000000 
 3173      00000000 
 3174              		.section	.bss.s_flashExecuteInRamFunctionInfo,"aw",%nobits
 3175              		.align	2
 3176              		.set	.LANCHOR5,. + 0
 3179              	s_flashExecuteInRamFunctionInfo:
 3180 0000 00000000 		.space	12
 3180      00000000 
 3180      00000000 
 3181              		.section	.bss.s_flashRunCommand,"aw",%nobits
 3182              		.align	2
 3183              		.set	.LANCHOR6,. + 0
 3186              	s_flashRunCommand:
 3187 0000 00000000 		.space	64
 3187      00000000 
 3187      00000000 
 3187      00000000 
 3187      00000000 
 3188              		.section	.rodata.kFCCOBx,"a",%progbits
 3189              		.align	2
 3192              	kFCCOBx:
 3193 0000 04000240 		.word	1073872900
 3194              		.section	.rodata.kFPROTL,"a",%progbits
 3195              		.align	2
 3198              	kFPROTL:
 3199 0000 10000240 		.word	1073872912
 3200              		.section	.rodata.kPFlashDensities,"a",%progbits
 3201              		.align	1
 3202              		.set	.LANCHOR4,. + 0
 3205              	kPFlashDensities:
 3206 0000 0800     		.short	8
 3207 0002 1000     		.short	16
 3208 0004 1800     		.short	24
 3209 0006 2000     		.short	32
 3210 0008 3000     		.short	48
 3211 000a 4000     		.short	64
 3212 000c 6000     		.short	96
 3213 000e 8000     		.short	128
 3214 0010 C000     		.short	192
 3215 0012 0001     		.short	256
 3216 0014 8001     		.short	384
 3217 0016 0002     		.short	512
 3218 0018 0003     		.short	768
 3219 001a 0004     		.short	1024
 3220 001c 0006     		.short	1536
 3221              		.section	.rodata.s_flashCommonBitOperationFunctionCode,"a",%progbits
 3222              		.align	1
 3223              		.set	.LANCHOR2,. + 0
 3226              	s_flashCommonBitOperationFunctionCode:
 3227 0000 10B5     		.short	-19184
 3228 0002 0029     		.short	10496
 3229 0004 05D0     		.short	-12283
 3230 0006 0468     		.short	26628
 3231 0008 8C43     		.short	17292
 3232 000a 9340     		.short	16531
 3233 000c 1940     		.short	16409
 3234 000e 2143     		.short	17185
 3235 0010 0160     		.short	24577
 3236 0012 BFF3     		.short	-3137
 3237 0014 6F8F     		.short	-28817
 3238 0016 BFF3     		.short	-3137
 3239 0018 4F8F     		.short	-28849
 3240 001a 10BD     		.short	-17136
 3241              		.section	.rodata.s_flashRunCommandFunctionCode,"a",%progbits
 3242              		.align	1
 3243              		.set	.LANCHOR1,. + 0
 3246              	s_flashRunCommandFunctionCode:
 3247 0000 8021     		.short	8576
 3248 0002 0170     		.short	28673
 3249 0004 0278     		.short	30722
 3250 0006 0A42     		.short	16906
 3251 0008 FCD0     		.short	-12036
 3252 000a 7047     		.short	18288
 3253              		.text
 3254              	.Letext0:
 3255              		.file 2 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 3256              		.file 3 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 3257              		.file 4 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 3258              		.file 5 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 3259              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 3260              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 3261              		.file 8 "../CMSIS/core_cm4.h"
 3262              		.file 9 "../CMSIS/system_MK64F12.h"
 3263              		.file 10 "../CMSIS/MK64F12.h"
 3264              		.file 11 "../drivers/fsl_common.h"
 3265              		.file 12 "../drivers/fsl_clock.h"
 3266              		.file 13 "../drivers/fsl_flash.h"
