   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.flash_check_execute_in_ram_function_info,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	flash_check_execute_in_ram_function_info:
  25              	.LFB180:
  26              		.file 1 "../drivers/fsl_flash.c"
   1:../drivers/fsl_flash.c **** /*
   2:../drivers/fsl_flash.c ****  * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
   3:../drivers/fsl_flash.c ****  * Copyright 2016-2017 NXP
   4:../drivers/fsl_flash.c ****  * All rights reserved.
   5:../drivers/fsl_flash.c ****  *
   6:../drivers/fsl_flash.c ****  * Redistribution and use in source and binary forms, with or without modification,
   7:../drivers/fsl_flash.c ****  * are permitted provided that the following conditions are met:
   8:../drivers/fsl_flash.c ****  *
   9:../drivers/fsl_flash.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  10:../drivers/fsl_flash.c ****  *   of conditions and the following disclaimer.
  11:../drivers/fsl_flash.c ****  *
  12:../drivers/fsl_flash.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  13:../drivers/fsl_flash.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  14:../drivers/fsl_flash.c ****  *   other materials provided with the distribution.
  15:../drivers/fsl_flash.c ****  *
  16:../drivers/fsl_flash.c ****  * o Neither the name of the copyright holder nor the names of its
  17:../drivers/fsl_flash.c ****  *   contributors may be used to endorse or promote products derived from this
  18:../drivers/fsl_flash.c ****  *   software without specific prior written permission.
  19:../drivers/fsl_flash.c ****  *
  20:../drivers/fsl_flash.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  21:../drivers/fsl_flash.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  22:../drivers/fsl_flash.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:../drivers/fsl_flash.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  24:../drivers/fsl_flash.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  25:../drivers/fsl_flash.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  26:../drivers/fsl_flash.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  27:../drivers/fsl_flash.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  28:../drivers/fsl_flash.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  29:../drivers/fsl_flash.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:../drivers/fsl_flash.c ****  */
  31:../drivers/fsl_flash.c **** 
  32:../drivers/fsl_flash.c **** #include "fsl_flash.h"
  33:../drivers/fsl_flash.c **** 
  34:../drivers/fsl_flash.c **** /*******************************************************************************
  35:../drivers/fsl_flash.c ****  * Definitions
  36:../drivers/fsl_flash.c ****  ******************************************************************************/
  37:../drivers/fsl_flash.c **** 
  38:../drivers/fsl_flash.c **** /*!
  39:../drivers/fsl_flash.c ****  * @name Misc utility defines
  40:../drivers/fsl_flash.c ****  * @{
  41:../drivers/fsl_flash.c ****  */
  42:../drivers/fsl_flash.c **** /*! @brief Alignment utility. */
  43:../drivers/fsl_flash.c **** #ifndef ALIGN_DOWN
  44:../drivers/fsl_flash.c **** #define ALIGN_DOWN(x, a) ((x) & (uint32_t)(-((int32_t)(a))))
  45:../drivers/fsl_flash.c **** #endif
  46:../drivers/fsl_flash.c **** #ifndef ALIGN_UP
  47:../drivers/fsl_flash.c **** #define ALIGN_UP(x, a) (-((int32_t)((uint32_t)(-((int32_t)(x))) & (uint32_t)(-((int32_t)(a))))))
  48:../drivers/fsl_flash.c **** #endif
  49:../drivers/fsl_flash.c **** 
  50:../drivers/fsl_flash.c **** /*! @brief Join bytes to word utility. */
  51:../drivers/fsl_flash.c **** #define B1P4(b) (((uint32_t)(b)&0xFFU) << 24)
  52:../drivers/fsl_flash.c **** #define B1P3(b) (((uint32_t)(b)&0xFFU) << 16)
  53:../drivers/fsl_flash.c **** #define B1P2(b) (((uint32_t)(b)&0xFFU) << 8)
  54:../drivers/fsl_flash.c **** #define B1P1(b) ((uint32_t)(b)&0xFFU)
  55:../drivers/fsl_flash.c **** #define B2P3(b) (((uint32_t)(b)&0xFFFFU) << 16)
  56:../drivers/fsl_flash.c **** #define B2P2(b) (((uint32_t)(b)&0xFFFFU) << 8)
  57:../drivers/fsl_flash.c **** #define B2P1(b) ((uint32_t)(b)&0xFFFFU)
  58:../drivers/fsl_flash.c **** #define B3P2(b) (((uint32_t)(b)&0xFFFFFFU) << 8)
  59:../drivers/fsl_flash.c **** #define B3P1(b) ((uint32_t)(b)&0xFFFFFFU)
  60:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_3(x, y) (B1P4(x) | B3P1(y))
  61:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_2_2(x, y) (B2P3(x) | B2P1(y))
  62:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_3_1(x, y) (B3P2(x) | B1P1(y))
  63:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_1_2(x, y, z) (B1P4(x) | B1P3(y) | B2P1(z))
  64:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_2_1(x, y, z) (B1P4(x) | B2P2(y) | B1P1(z))
  65:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_2_1_1(x, y, z) (B2P3(x) | B1P2(y) | B1P1(z))
  66:../drivers/fsl_flash.c **** #define BYTES_JOIN_TO_WORD_1_1_1_1(x, y, z, w) (B1P4(x) | B1P3(y) | B1P2(z) | B1P1(w))
  67:../drivers/fsl_flash.c **** /*@}*/
  68:../drivers/fsl_flash.c **** 
  69:../drivers/fsl_flash.c **** /*!
  70:../drivers/fsl_flash.c ****  * @name Secondary flash configuration
  71:../drivers/fsl_flash.c ****  * @{
  72:../drivers/fsl_flash.c ****  */
  73:../drivers/fsl_flash.c **** /*! @brief Indicates whether the secondary flash has its own protection register in flash module. *
  74:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_MULTIPLE_FLASH) && defined(FTFE_FPROTS_PROTS_MASK)
  75:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER (1)
  76:../drivers/fsl_flash.c **** #else
  77:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER (0)
  78:../drivers/fsl_flash.c **** #endif
  79:../drivers/fsl_flash.c **** 
  80:../drivers/fsl_flash.c **** /*! @brief Indicates whether the secondary flash has its own Execute-Only access register in flash 
  81:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_MULTIPLE_FLASH) && defined(FTFE_FACSSS_SGSIZE_S_MASK)
  82:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER (1)
  83:../drivers/fsl_flash.c **** #else
  84:../drivers/fsl_flash.c **** #define FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER (0)
  85:../drivers/fsl_flash.c **** #endif
  86:../drivers/fsl_flash.c **** /*@}*/
  87:../drivers/fsl_flash.c **** 
  88:../drivers/fsl_flash.c **** /*!
  89:../drivers/fsl_flash.c ****  * @name Dual core/flash configuration
  90:../drivers/fsl_flash.c ****  * @{
  91:../drivers/fsl_flash.c ****  */
  92:../drivers/fsl_flash.c **** /*! @brief Redefines some flash features. */
  93:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
  94:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_CURRENT_CORE_ID == 0u)
  95:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
  96:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
  97:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
  98:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
  99:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_S
 100:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_REGIO
 101:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_1_START_ADDRESS
 102:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT
 103:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZE
 104:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SECTOR_SI
 105:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_WRITE
 106:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_1_PROTECTIO
 107:../drivers/fsl_flash.c **** #elif (FSL_FEATURE_FLASH_CURRENT_CORE_ID == 1u)
 108:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_1_START_ADDRESS
 109:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT
 110:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZE
 111:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SECTOR_SIZE
 112:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_1_BLOCK_WRITE_UNIT
 113:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_1_PROTECTION_REG
 114:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
 115:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
 116:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
 117:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
 118:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_U
 119:../drivers/fsl_flash.c **** #define SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_
 120:../drivers/fsl_flash.c **** #endif
 121:../drivers/fsl_flash.c **** #else
 122:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS FSL_FEATURE_FLASH_PFLASH_START_ADDRESS
 123:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT
 124:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SIZE
 125:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE
 126:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_S
 127:../drivers/fsl_flash.c **** #define MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT FSL_FEATURE_FLASH_PFLASH_PROTECTION_REGIO
 128:../drivers/fsl_flash.c **** #endif
 129:../drivers/fsl_flash.c **** /*@}*/
 130:../drivers/fsl_flash.c **** 
 131:../drivers/fsl_flash.c **** /*!
 132:../drivers/fsl_flash.c ****  * @name Flash cache and speculation control defines
 133:../drivers/fsl_flash.c ****  * @{
 134:../drivers/fsl_flash.c ****  */
 135:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_CFCC_MASK) || defined(MCM_CPCR2_CCBC_MASK)
 136:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_MCM (1)
 137:../drivers/fsl_flash.c **** #else
 138:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_MCM (0)
 139:../drivers/fsl_flash.c **** #endif
 140:../drivers/fsl_flash.c **** #if defined(FMC_PFB0CR_CINV_WAY_MASK) || defined(FMC_PFB01CR_CINV_WAY_MASK)
 141:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_FMC (1)
 142:../drivers/fsl_flash.c **** #else
 143:../drivers/fsl_flash.c **** #define FLASH_CACHE_IS_CONTROLLED_BY_FMC (0)
 144:../drivers/fsl_flash.c **** #endif
 145:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_DFCS_MASK)
 146:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM (1)
 147:../drivers/fsl_flash.c **** #else
 148:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM (0)
 149:../drivers/fsl_flash.c **** #endif
 150:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCMC1_MASK) || defined(MSCM_OCMDR_OCM1_MASK) || defined(MSCM_OCMDR0_OCM1_MAS
 151:../drivers/fsl_flash.c ****     defined(MSCM_OCMDR1_OCM1_MASK)
 152:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM (1)
 153:../drivers/fsl_flash.c **** #else
 154:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM (0)
 155:../drivers/fsl_flash.c **** #endif
 156:../drivers/fsl_flash.c **** #if defined(FMC_PFB0CR_S_INV_MASK) || defined(FMC_PFB0CR_S_B_INV_MASK) || defined(FMC_PFB01CR_S_INV
 157:../drivers/fsl_flash.c ****     defined(FMC_PFB01CR_S_B_INV_MASK)
 158:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC (1)
 159:../drivers/fsl_flash.c **** #else
 160:../drivers/fsl_flash.c **** #define FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC (0)
 161:../drivers/fsl_flash.c **** #endif
 162:../drivers/fsl_flash.c **** 
 163:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM || FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY
 164:../drivers/fsl_flash.c ****     FLASH_CACHE_IS_CONTROLLED_BY_MCM || FLASH_CACHE_IS_CONTROLLED_BY_FMC
 165:../drivers/fsl_flash.c **** #define FLASH_IS_CACHE_INVALIDATION_AVAILABLE (1)
 166:../drivers/fsl_flash.c **** #else
 167:../drivers/fsl_flash.c **** #define FLASH_IS_CACHE_INVALIDATION_AVAILABLE (0)
 168:../drivers/fsl_flash.c **** #endif
 169:../drivers/fsl_flash.c **** /*@}*/
 170:../drivers/fsl_flash.c **** 
 171:../drivers/fsl_flash.c **** /*! @brief Data flash IFR map Field*/
 172:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_IS_FTFE) && FSL_FEATURE_FLASH_IS_FTFE
 173:../drivers/fsl_flash.c **** #define DFLASH_IFR_READRESOURCE_START_ADDRESS 0x8003F8U
 174:../drivers/fsl_flash.c **** #else /* FSL_FEATURE_FLASH_IS_FTFL == 1 or FSL_FEATURE_FLASH_IS_FTFA = =1 */
 175:../drivers/fsl_flash.c **** #define DFLASH_IFR_READRESOURCE_START_ADDRESS 0x8000F8U
 176:../drivers/fsl_flash.c **** #endif
 177:../drivers/fsl_flash.c **** 
 178:../drivers/fsl_flash.c **** /*!
 179:../drivers/fsl_flash.c ****  * @name Reserved FlexNVM size (For a variety of purposes) defines
 180:../drivers/fsl_flash.c ****  * @{
 181:../drivers/fsl_flash.c ****  */
 182:../drivers/fsl_flash.c **** #define FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED 0xFFFFFFFFU
 183:../drivers/fsl_flash.c **** #define FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED 0xFFFFU
 184:../drivers/fsl_flash.c **** /*@}*/
 185:../drivers/fsl_flash.c **** 
 186:../drivers/fsl_flash.c **** /*!
 187:../drivers/fsl_flash.c ****  * @name Flash Program Once Field defines
 188:../drivers/fsl_flash.c ****  * @{
 189:../drivers/fsl_flash.c ****  */
 190:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_IS_FTFA) && FSL_FEATURE_FLASH_IS_FTFA
 191:../drivers/fsl_flash.c **** /* FTFA parts(eg. K80, KL80, L5K) support both 4-bytes and 8-bytes unit size */
 192:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_MIN_ID_8BYTES \
 193:../drivers/fsl_flash.c ****     0x10U /* Minimum Index indcating one of Progam Once Fields which is accessed in 8-byte records 
 194:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_MAX_ID_8BYTES \
 195:../drivers/fsl_flash.c ****     0x13U /* Maximum Index indcating one of Progam Once Fields which is accessed in 8-byte records 
 196:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 1
 197:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 1
 198:../drivers/fsl_flash.c **** #elif defined(FSL_FEATURE_FLASH_IS_FTFE) && FSL_FEATURE_FLASH_IS_FTFE
 199:../drivers/fsl_flash.c **** /* FTFE parts(eg. K65, KE18) only support 8-bytes unit size */
 200:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 0
 201:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 1
 202:../drivers/fsl_flash.c **** #elif defined(FSL_FEATURE_FLASH_IS_FTFL) && FSL_FEATURE_FLASH_IS_FTFL
 203:../drivers/fsl_flash.c **** /* FTFL parts(eg. K20) only support 4-bytes unit size */
 204:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT 1
 205:../drivers/fsl_flash.c **** #define FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT 0
 206:../drivers/fsl_flash.c **** #endif
 207:../drivers/fsl_flash.c **** /*@}*/
 208:../drivers/fsl_flash.c **** 
 209:../drivers/fsl_flash.c **** /*!
 210:../drivers/fsl_flash.c ****  * @name Flash security status defines
 211:../drivers/fsl_flash.c ****  * @{
 212:../drivers/fsl_flash.c ****  */
 213:../drivers/fsl_flash.c **** #define FLASH_SECURITY_STATE_KEYEN 0x80U
 214:../drivers/fsl_flash.c **** #define FLASH_SECURITY_STATE_UNSECURED 0x02U
 215:../drivers/fsl_flash.c **** #define FLASH_NOT_SECURE 0x01U
 216:../drivers/fsl_flash.c **** #define FLASH_SECURE_BACKDOOR_ENABLED 0x02U
 217:../drivers/fsl_flash.c **** #define FLASH_SECURE_BACKDOOR_DISABLED 0x04U
 218:../drivers/fsl_flash.c **** /*@}*/
 219:../drivers/fsl_flash.c **** 
 220:../drivers/fsl_flash.c **** /*!
 221:../drivers/fsl_flash.c ****  * @name Flash controller command numbers
 222:../drivers/fsl_flash.c ****  * @{
 223:../drivers/fsl_flash.c ****  */
 224:../drivers/fsl_flash.c **** #define FTFx_VERIFY_BLOCK 0x00U                    /*!< RD1BLK*/
 225:../drivers/fsl_flash.c **** #define FTFx_VERIFY_SECTION 0x01U                  /*!< RD1SEC*/
 226:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_CHECK 0x02U                   /*!< PGMCHK*/
 227:../drivers/fsl_flash.c **** #define FTFx_READ_RESOURCE 0x03U                   /*!< RDRSRC*/
 228:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_LONGWORD 0x06U                /*!< PGM4*/
 229:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_PHRASE 0x07U                  /*!< PGM8*/
 230:../drivers/fsl_flash.c **** #define FTFx_ERASE_BLOCK 0x08U                     /*!< ERSBLK*/
 231:../drivers/fsl_flash.c **** #define FTFx_ERASE_SECTOR 0x09U                    /*!< ERSSCR*/
 232:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_SECTION 0x0BU                 /*!< PGMSEC*/
 233:../drivers/fsl_flash.c **** #define FTFx_GENERATE_CRC 0x0CU                    /*!< CRCGEN*/
 234:../drivers/fsl_flash.c **** #define FTFx_VERIFY_ALL_BLOCK 0x40U                /*!< RD1ALL*/
 235:../drivers/fsl_flash.c **** #define FTFx_READ_ONCE 0x41U                       /*!< RDONCE or RDINDEX*/
 236:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_ONCE 0x43U                    /*!< PGMONCE or PGMINDEX*/
 237:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_BLOCK 0x44U                 /*!< ERSALL*/
 238:../drivers/fsl_flash.c **** #define FTFx_SECURITY_BY_PASS 0x45U                /*!< VFYKEY*/
 239:../drivers/fsl_flash.c **** #define FTFx_SWAP_CONTROL 0x46U                    /*!< SWAP*/
 240:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_BLOCK_UNSECURE 0x49U        /*!< ERSALLU*/
 241:../drivers/fsl_flash.c **** #define FTFx_VERIFY_ALL_EXECUTE_ONLY_SEGMENT 0x4AU /*!< RD1XA*/
 242:../drivers/fsl_flash.c **** #define FTFx_ERASE_ALL_EXECUTE_ONLY_SEGMENT 0x4BU  /*!< ERSXA*/
 243:../drivers/fsl_flash.c **** #define FTFx_PROGRAM_PARTITION 0x80U               /*!< PGMPART)*/
 244:../drivers/fsl_flash.c **** #define FTFx_SET_FLEXRAM_FUNCTION 0x81U            /*!< SETRAM*/
 245:../drivers/fsl_flash.c ****                                                    /*@}*/
 246:../drivers/fsl_flash.c **** 
 247:../drivers/fsl_flash.c **** /*!
 248:../drivers/fsl_flash.c ****  * @name Common flash register info defines
 249:../drivers/fsl_flash.c ****  * @{
 250:../drivers/fsl_flash.c ****  */
 251:../drivers/fsl_flash.c **** #if defined(FTFA)
 252:../drivers/fsl_flash.c **** #define FTFx FTFA
 253:../drivers/fsl_flash.c **** #define FTFx_BASE FTFA_BASE
 254:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFA_FSTAT_CCIF_MASK
 255:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFA_FSTAT_RDCOLERR_MASK
 256:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFA_FSTAT_ACCERR_MASK
 257:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFA_FSTAT_FPVIOL_MASK
 258:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFA_FSTAT_MGSTAT0_MASK
 259:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFA_FSEC_SEC_MASK
 260:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFA_FSEC_KEYEN_MASK
 261:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 262:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFA_FCNFG_RAMRDY_MASK
 263:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 264:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 265:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFA_FCNFG_EEERDY_MASK
 266:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 267:../drivers/fsl_flash.c **** #elif defined(FTFE)
 268:../drivers/fsl_flash.c **** #define FTFx FTFE
 269:../drivers/fsl_flash.c **** #define FTFx_BASE FTFE_BASE
 270:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFE_FSTAT_CCIF_MASK
 271:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFE_FSTAT_RDCOLERR_MASK
 272:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFE_FSTAT_ACCERR_MASK
 273:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFE_FSTAT_FPVIOL_MASK
 274:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFE_FSTAT_MGSTAT0_MASK
 275:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFE_FSEC_SEC_MASK
 276:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFE_FSEC_KEYEN_MASK
 277:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 278:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFE_FCNFG_RAMRDY_MASK
 279:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 280:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 281:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFE_FCNFG_EEERDY_MASK
 282:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 283:../drivers/fsl_flash.c **** #elif defined(FTFL)
 284:../drivers/fsl_flash.c **** #define FTFx FTFL
 285:../drivers/fsl_flash.c **** #define FTFx_BASE FTFL_BASE
 286:../drivers/fsl_flash.c **** #define FTFx_FSTAT_CCIF_MASK FTFL_FSTAT_CCIF_MASK
 287:../drivers/fsl_flash.c **** #define FTFx_FSTAT_RDCOLERR_MASK FTFL_FSTAT_RDCOLERR_MASK
 288:../drivers/fsl_flash.c **** #define FTFx_FSTAT_ACCERR_MASK FTFL_FSTAT_ACCERR_MASK
 289:../drivers/fsl_flash.c **** #define FTFx_FSTAT_FPVIOL_MASK FTFL_FSTAT_FPVIOL_MASK
 290:../drivers/fsl_flash.c **** #define FTFx_FSTAT_MGSTAT0_MASK FTFL_FSTAT_MGSTAT0_MASK
 291:../drivers/fsl_flash.c **** #define FTFx_FSEC_SEC_MASK FTFL_FSEC_SEC_MASK
 292:../drivers/fsl_flash.c **** #define FTFx_FSEC_KEYEN_MASK FTFL_FSEC_KEYEN_MASK
 293:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_RAM) && FSL_FEATURE_FLASH_HAS_FLEX_RAM
 294:../drivers/fsl_flash.c **** #define FTFx_FCNFG_RAMRDY_MASK FTFL_FCNFG_RAMRDY_MASK
 295:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_RAM */
 296:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_FLEX_NVM) && FSL_FEATURE_FLASH_HAS_FLEX_NVM
 297:../drivers/fsl_flash.c **** #define FTFx_FCNFG_EEERDY_MASK FTFL_FCNFG_EEERDY_MASK
 298:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_FLEX_NVM */
 299:../drivers/fsl_flash.c **** #else
 300:../drivers/fsl_flash.c **** #error "Unknown flash controller"
 301:../drivers/fsl_flash.c **** #endif
 302:../drivers/fsl_flash.c **** /*@}*/
 303:../drivers/fsl_flash.c **** 
 304:../drivers/fsl_flash.c **** /*!
 305:../drivers/fsl_flash.c ****  * @name Common flash register access info defines
 306:../drivers/fsl_flash.c ****  * @{
 307:../drivers/fsl_flash.c ****  */
 308:../drivers/fsl_flash.c **** #define FTFx_FCCOB3_REG (FTFx->FCCOB3)
 309:../drivers/fsl_flash.c **** #define FTFx_FCCOB5_REG (FTFx->FCCOB5)
 310:../drivers/fsl_flash.c **** #define FTFx_FCCOB6_REG (FTFx->FCCOB6)
 311:../drivers/fsl_flash.c **** #define FTFx_FCCOB7_REG (FTFx->FCCOB7)
 312:../drivers/fsl_flash.c **** 
 313:../drivers/fsl_flash.c **** #if defined(FTFA_FPROTH0_PROT_MASK) || defined(FTFE_FPROTH0_PROT_MASK) || defined(FTFL_FPROTH0_PROT
 314:../drivers/fsl_flash.c **** #define FTFx_FPROT_HIGH_REG (FTFx->FPROTH3)
 315:../drivers/fsl_flash.c **** #define FTFx_FPROTH3_REG (FTFx->FPROTH3)
 316:../drivers/fsl_flash.c **** #define FTFx_FPROTH2_REG (FTFx->FPROTH2)
 317:../drivers/fsl_flash.c **** #define FTFx_FPROTH1_REG (FTFx->FPROTH1)
 318:../drivers/fsl_flash.c **** #define FTFx_FPROTH0_REG (FTFx->FPROTH0)
 319:../drivers/fsl_flash.c **** #endif
 320:../drivers/fsl_flash.c **** 
 321:../drivers/fsl_flash.c **** #if defined(FTFA_FPROTL0_PROT_MASK) || defined(FTFE_FPROTL0_PROT_MASK) || defined(FTFL_FPROTL0_PROT
 322:../drivers/fsl_flash.c **** #define FTFx_FPROT_LOW_REG (FTFx->FPROTL3)
 323:../drivers/fsl_flash.c **** #define FTFx_FPROTL3_REG (FTFx->FPROTL3)
 324:../drivers/fsl_flash.c **** #define FTFx_FPROTL2_REG (FTFx->FPROTL2)
 325:../drivers/fsl_flash.c **** #define FTFx_FPROTL1_REG (FTFx->FPROTL1)
 326:../drivers/fsl_flash.c **** #define FTFx_FPROTL0_REG (FTFx->FPROTL0)
 327:../drivers/fsl_flash.c **** #elif defined(FTFA_FPROT0_PROT_MASK) || defined(FTFE_FPROT0_PROT_MASK) || defined(FTFL_FPROT0_PROT_
 328:../drivers/fsl_flash.c **** #define FTFx_FPROT_LOW_REG (FTFx->FPROT3)
 329:../drivers/fsl_flash.c **** #define FTFx_FPROTL3_REG (FTFx->FPROT3)
 330:../drivers/fsl_flash.c **** #define FTFx_FPROTL2_REG (FTFx->FPROT2)
 331:../drivers/fsl_flash.c **** #define FTFx_FPROTL1_REG (FTFx->FPROT1)
 332:../drivers/fsl_flash.c **** #define FTFx_FPROTL0_REG (FTFx->FPROT0)
 333:../drivers/fsl_flash.c **** #endif
 334:../drivers/fsl_flash.c **** 
 335:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
 336:../drivers/fsl_flash.c **** #define FTFx_FPROTSH_REG (FTFx->FPROTSH)
 337:../drivers/fsl_flash.c **** #define FTFx_FPROTSL_REG (FTFx->FPROTSL)
 338:../drivers/fsl_flash.c **** #endif
 339:../drivers/fsl_flash.c **** 
 340:../drivers/fsl_flash.c **** #define FTFx_XACCH3_REG (FTFx->XACCH3)
 341:../drivers/fsl_flash.c **** #define FTFx_XACCL3_REG (FTFx->XACCL3)
 342:../drivers/fsl_flash.c **** 
 343:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
 344:../drivers/fsl_flash.c **** #define FTFx_XACCSH_REG (FTFx->XACCSH)
 345:../drivers/fsl_flash.c **** #define FTFx_XACCSL_REG (FTFx->XACCSL)
 346:../drivers/fsl_flash.c **** #endif
 347:../drivers/fsl_flash.c **** /*@}*/
 348:../drivers/fsl_flash.c **** 
 349:../drivers/fsl_flash.c **** /*!
 350:../drivers/fsl_flash.c ****  * @brief Enumeration for access segment property.
 351:../drivers/fsl_flash.c ****  */
 352:../drivers/fsl_flash.c **** enum _flash_access_segment_property
 353:../drivers/fsl_flash.c **** {
 354:../drivers/fsl_flash.c ****     kFLASH_AccessSegmentBase = 256UL,
 355:../drivers/fsl_flash.c **** };
 356:../drivers/fsl_flash.c **** 
 357:../drivers/fsl_flash.c **** /*!
 358:../drivers/fsl_flash.c ****  * @brief Enumeration for flash config area.
 359:../drivers/fsl_flash.c ****  */
 360:../drivers/fsl_flash.c **** enum _flash_config_area_range
 361:../drivers/fsl_flash.c **** {
 362:../drivers/fsl_flash.c ****     kFLASH_ConfigAreaStart = 0x400U,
 363:../drivers/fsl_flash.c ****     kFLASH_ConfigAreaEnd = 0x40FU
 364:../drivers/fsl_flash.c **** };
 365:../drivers/fsl_flash.c **** 
 366:../drivers/fsl_flash.c **** /*!
 367:../drivers/fsl_flash.c ****  * @name Flash register access type defines
 368:../drivers/fsl_flash.c ****  * @{
 369:../drivers/fsl_flash.c ****  */
 370:../drivers/fsl_flash.c **** #define FTFx_REG8_ACCESS_TYPE volatile uint8_t *
 371:../drivers/fsl_flash.c **** #define FTFx_REG32_ACCESS_TYPE volatile uint32_t *
 372:../drivers/fsl_flash.c **** /*@}*/
 373:../drivers/fsl_flash.c **** 
 374:../drivers/fsl_flash.c **** /*!
 375:../drivers/fsl_flash.c ****  * @brief MCM cache register access info defines.
 376:../drivers/fsl_flash.c ****  */
 377:../drivers/fsl_flash.c **** #if defined(MCM_PLACR_CFCC_MASK)
 378:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_MASK MCM_PLACR_CFCC_MASK
 379:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_SHIFT MCM_PLACR_CFCC_SHIFT
 380:../drivers/fsl_flash.c **** #if defined(MCM0)
 381:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM0->PLACR
 382:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM1))
 383:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM->PLACR
 384:../drivers/fsl_flash.c **** #endif
 385:../drivers/fsl_flash.c **** #if defined(MCM1)
 386:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM1->PLACR
 387:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM0))
 388:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM->PLACR
 389:../drivers/fsl_flash.c **** #endif
 390:../drivers/fsl_flash.c **** #elif defined(MCM_CPCR2_CCBC_MASK)
 391:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_MASK MCM_CPCR2_CCBC_MASK
 392:../drivers/fsl_flash.c **** #define MCM_CACHE_CLEAR_SHIFT MCM_CPCR2_CCBC_SHIFT
 393:../drivers/fsl_flash.c **** #if defined(MCM0)
 394:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM0->CPCR2
 395:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM1))
 396:../drivers/fsl_flash.c **** #define MCM0_CACHE_REG MCM->CPCR2
 397:../drivers/fsl_flash.c **** #endif
 398:../drivers/fsl_flash.c **** #if defined(MCM1)
 399:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM1->CPCR2
 400:../drivers/fsl_flash.c **** #elif defined(MCM) && (!defined(MCM0))
 401:../drivers/fsl_flash.c **** #define MCM1_CACHE_REG MCM->CPCR2
 402:../drivers/fsl_flash.c **** #endif
 403:../drivers/fsl_flash.c **** #endif
 404:../drivers/fsl_flash.c **** 
 405:../drivers/fsl_flash.c **** /*!
 406:../drivers/fsl_flash.c ****  * @brief Enumeration for ARM core part number.
 407:../drivers/fsl_flash.c ****  */
 408:../drivers/fsl_flash.c **** enum _arm_core_part_number
 409:../drivers/fsl_flash.c **** {
 410:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0 = 0xc20U,
 411:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0P = 0xc60U,
 412:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM1 = 0xc21U,
 413:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM3 = 0xc23U,
 414:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM4 = 0xc24U,
 415:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM7 = 0xc27U,
 416:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM23 = 0xd20U,
 417:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM33 = 0xd21U,
 418:../drivers/fsl_flash.c **** 
 419:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid = 0xFFFFU,
 420:../drivers/fsl_flash.c **** };
 421:../drivers/fsl_flash.c **** 
 422:../drivers/fsl_flash.c **** #if defined(BL_TARGET_ROM) && defined(MCM0_CACHE_REG) && defined(MCM1_CACHE_REG) && \
 423:../drivers/fsl_flash.c ****     defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
 424:../drivers/fsl_flash.c **** FTFx_REG32_ACCESS_TYPE const s_mcmModuleAccessTypeArray[] = {
 425:../drivers/fsl_flash.c ****     (FTFx_REG32_ACCESS_TYPE)&MCM0_CACHE_REG,
 426:../drivers/fsl_flash.c ****     (FTFx_REG32_ACCESS_TYPE)&MCM1_CACHE_REG
 427:../drivers/fsl_flash.c **** };
 428:../drivers/fsl_flash.c **** 
 429:../drivers/fsl_flash.c **** static const uint16_t s_armCorePartNumberArray[] = {
 430:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM0P,
 431:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM1,
 432:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 433:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM3,
 434:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM4,
 435:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 436:../drivers/fsl_flash.c ****     kARM_CorePartNumber_Invalid,
 437:../drivers/fsl_flash.c ****     kARM_CorePartNumber_CM7
 438:../drivers/fsl_flash.c **** };
 439:../drivers/fsl_flash.c **** #endif
 440:../drivers/fsl_flash.c **** 
 441:../drivers/fsl_flash.c **** /*!
 442:../drivers/fsl_flash.c ****  * @brief MSCM cache register access info defines.
 443:../drivers/fsl_flash.c ****  */
 444:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCM1_MASK)
 445:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR_OCM1_MASK
 446:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR_OCM1_SHIFT
 447:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR_OCM1(x)
 448:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR0_OCM1_MASK) || defined(MSCM_OCMDR1_OCM1_MASK)
 449:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR0_OCM1_MASK
 450:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR0_OCM1_SHIFT
 451:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR0_OCM1(x)
 452:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR_OCMC1_MASK)
 453:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_MASK MSCM_OCMDR_OCMC1_MASK
 454:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE_SHIFT MSCM_OCMDR_OCMC1_SHIFT
 455:../drivers/fsl_flash.c **** #define MSCM_SPECULATION_DISABLE(x) MSCM_OCMDR_OCMC1(x)
 456:../drivers/fsl_flash.c **** #endif
 457:../drivers/fsl_flash.c **** 
 458:../drivers/fsl_flash.c **** #if defined(MSCM_OCMDR_OCM1_MASK) || defined(MSCM_OCMDR_OCMC1_MASK)
 459:../drivers/fsl_flash.c **** #define MSCM_OCMDR0_REG MSCM->OCMDR[0]
 460:../drivers/fsl_flash.c **** #define MSCM_OCMDR1_REG MSCM->OCMDR[1]
 461:../drivers/fsl_flash.c **** #elif defined(MSCM_OCMDR0_OCM1_MASK) || defined(MSCM_OCMDR1_OCM1_MASK)
 462:../drivers/fsl_flash.c **** #define MSCM_OCMDR0_REG MSCM->OCMDR0
 463:../drivers/fsl_flash.c **** #define MSCM_OCMDR1_REG MSCM->OCMDR1
 464:../drivers/fsl_flash.c **** #endif
 465:../drivers/fsl_flash.c **** 
 466:../drivers/fsl_flash.c **** /*!
 467:../drivers/fsl_flash.c ****  * @brief MSCM prefetch speculation defines.
 468:../drivers/fsl_flash.c ****  */
 469:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFDS_MASK (0x10U)
 470:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFCS_MASK (0x20U)
 471:../drivers/fsl_flash.c **** 
 472:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFDS_SHIFT (4U)
 473:../drivers/fsl_flash.c **** #define MSCM_OCMDR_OCMC1_DFCS_SHIFT (5U)
 474:../drivers/fsl_flash.c **** 
 475:../drivers/fsl_flash.c **** /*******************************************************************************
 476:../drivers/fsl_flash.c ****  * Prototypes
 477:../drivers/fsl_flash.c ****  ******************************************************************************/
 478:../drivers/fsl_flash.c **** 
 479:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 480:../drivers/fsl_flash.c **** /*! @brief Copy flash_run_command() to RAM*/
 481:../drivers/fsl_flash.c **** static void copy_flash_run_command(uint32_t *flashRunCommand);
 482:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 483:../drivers/fsl_flash.c **** /*! @brief Copy flash_cache_clear_command() to RAM*/
 484:../drivers/fsl_flash.c **** static void copy_flash_common_bit_operation(uint32_t *flashCommonBitOperation);
 485:../drivers/fsl_flash.c **** #endif
 486:../drivers/fsl_flash.c **** /*! @brief Check whether flash execute-in-ram functions are ready*/
 487:../drivers/fsl_flash.c **** static status_t flash_check_execute_in_ram_function_info(flash_config_t *config);
 488:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 489:../drivers/fsl_flash.c **** 
 490:../drivers/fsl_flash.c **** /*! @brief Internal function Flash command sequence. Called by driver APIs only*/
 491:../drivers/fsl_flash.c **** static status_t flash_command_sequence(flash_config_t *config);
 492:../drivers/fsl_flash.c **** 
 493:../drivers/fsl_flash.c **** /*! @brief Perform the cache clear to the flash*/
 494:../drivers/fsl_flash.c **** void flash_cache_clear(flash_config_t *config);
 495:../drivers/fsl_flash.c **** 
 496:../drivers/fsl_flash.c **** /*! @brief Process the cache to the flash*/
 497:../drivers/fsl_flash.c **** static void flash_cache_clear_process(flash_config_t *config, flash_cache_clear_process_t process);
 498:../drivers/fsl_flash.c **** 
 499:../drivers/fsl_flash.c **** /*! @brief Validates the range and alignment of the given address range.*/
 500:../drivers/fsl_flash.c **** static status_t flash_check_range(flash_config_t *config,
 501:../drivers/fsl_flash.c ****                                   uint32_t startAddress,
 502:../drivers/fsl_flash.c ****                                   uint32_t lengthInBytes,
 503:../drivers/fsl_flash.c ****                                   uint32_t alignmentBaseline);
 504:../drivers/fsl_flash.c **** /*! @brief Gets the right address, sector and block size of current flash type which is indicated b
 505:../drivers/fsl_flash.c **** static status_t flash_get_matched_operation_info(flash_config_t *config,
 506:../drivers/fsl_flash.c ****                                                  uint32_t address,
 507:../drivers/fsl_flash.c ****                                                  flash_operation_config_t *info);
 508:../drivers/fsl_flash.c **** /*! @brief Validates the given user key for flash erase APIs.*/
 509:../drivers/fsl_flash.c **** static status_t flash_check_user_key(uint32_t key);
 510:../drivers/fsl_flash.c **** 
 511:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 512:../drivers/fsl_flash.c **** /*! @brief Updates FlexNVM memory partition status according to data flash 0 IFR.*/
 513:../drivers/fsl_flash.c **** static status_t flash_update_flexnvm_memory_partition_status(flash_config_t *config);
 514:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
 515:../drivers/fsl_flash.c **** 
 516:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
 517:../drivers/fsl_flash.c **** /*! @brief Validates the range of the given resource address.*/
 518:../drivers/fsl_flash.c **** static status_t flash_check_resource_range(uint32_t start,
 519:../drivers/fsl_flash.c ****                                            uint32_t lengthInBytes,
 520:../drivers/fsl_flash.c ****                                            uint32_t alignmentBaseline,
 521:../drivers/fsl_flash.c ****                                            flash_read_resource_option_t option);
 522:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
 523:../drivers/fsl_flash.c **** 
 524:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
 525:../drivers/fsl_flash.c **** /*! @brief Validates the gived swap control option.*/
 526:../drivers/fsl_flash.c **** static status_t flash_check_swap_control_option(flash_swap_control_option_t option);
 527:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
 528:../drivers/fsl_flash.c **** 
 529:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
 530:../drivers/fsl_flash.c **** /*! @brief Validates the gived address to see if it is equal to swap indicator address in pflash sw
 531:../drivers/fsl_flash.c **** static status_t flash_validate_swap_indicator_address(flash_config_t *config, uint32_t address);
 532:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
 533:../drivers/fsl_flash.c **** 
 534:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
 535:../drivers/fsl_flash.c **** /*! @brief Validates the gived flexram function option.*/
 536:../drivers/fsl_flash.c **** static inline status_t flasn_check_flexram_function_option_range(flash_flexram_function_option_t op
 537:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
 538:../drivers/fsl_flash.c **** 
 539:../drivers/fsl_flash.c **** /*! @brief Gets the flash protection information (region size, region count).*/
 540:../drivers/fsl_flash.c **** static status_t flash_get_protection_info(flash_config_t *config, flash_protection_config_t *info);
 541:../drivers/fsl_flash.c **** 
 542:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 543:../drivers/fsl_flash.c **** /*! @brief Gets the flash Execute-Only access information (Segment size, Segment count).*/
 544:../drivers/fsl_flash.c **** static status_t flash_get_access_info(flash_config_t *config, flash_access_config_t *info);
 545:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 546:../drivers/fsl_flash.c **** 
 547:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
 548:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by MCM.*/
 549:../drivers/fsl_flash.c **** void mcm_flash_cache_clear(void);
 550:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_MCM */
 551:../drivers/fsl_flash.c **** 
 552:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
 553:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by FMC.*/
 554:../drivers/fsl_flash.c **** void fmc_flash_cache_clear(void);
 555:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
 556:../drivers/fsl_flash.c **** 
 557:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
 558:../drivers/fsl_flash.c **** /*! @brief Sets the prefetch speculation buffer to the flash by MSCM.*/
 559:../drivers/fsl_flash.c **** void mscm_flash_prefetch_speculation_enable(uint32_t flashIndex, bool enable);
 560:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM */
 561:../drivers/fsl_flash.c **** 
 562:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
 563:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by FMC.*/
 564:../drivers/fsl_flash.c **** void fmc_flash_prefetch_speculation_clear(void);
 565:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
 566:../drivers/fsl_flash.c **** 
 567:../drivers/fsl_flash.c **** /*******************************************************************************
 568:../drivers/fsl_flash.c ****  * Variables
 569:../drivers/fsl_flash.c ****  ******************************************************************************/
 570:../drivers/fsl_flash.c **** 
 571:../drivers/fsl_flash.c **** /*! @brief Access to FTFx->FCCOB */
 572:../drivers/fsl_flash.c **** volatile uint32_t *const kFCCOBx = (volatile uint32_t *)&FTFx_FCCOB3_REG;
 573:../drivers/fsl_flash.c **** /*! @brief Access to FTFx->FPROT */
 574:../drivers/fsl_flash.c **** volatile uint32_t *const kFPROTL = (volatile uint32_t *)&FTFx_FPROT_LOW_REG;
 575:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
 576:../drivers/fsl_flash.c **** volatile uint32_t *const kFPROTH = (volatile uint32_t *)&FTFx_FPROT_HIGH_REG;
 577:../drivers/fsl_flash.c **** #endif
 578:../drivers/fsl_flash.c **** 
 579:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
 580:../drivers/fsl_flash.c **** volatile uint8_t *const kFPROTSL = (volatile uint8_t *)&FTFx_FPROTSL_REG;
 581:../drivers/fsl_flash.c **** volatile uint8_t *const kFPROTSH = (volatile uint8_t *)&FTFx_FPROTSH_REG;
 582:../drivers/fsl_flash.c **** #endif
 583:../drivers/fsl_flash.c **** 
 584:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 585:../drivers/fsl_flash.c **** /*! @brief A function pointer used to point to relocated flash_run_command() */
 586:../drivers/fsl_flash.c **** static void (*callFlashRunCommand)(FTFx_REG8_ACCESS_TYPE ftfx_fstat);
 587:../drivers/fsl_flash.c **** 
 588:../drivers/fsl_flash.c **** /*!
 589:../drivers/fsl_flash.c ****  * @brief Position independent code of flash_run_command()
 590:../drivers/fsl_flash.c ****  *
 591:../drivers/fsl_flash.c ****  * Note1: The prototype of C function is shown as below:
 592:../drivers/fsl_flash.c ****  * @code
 593:../drivers/fsl_flash.c ****  *   void flash_run_command(FTFx_REG8_ACCESS_TYPE ftfx_fstat)
 594:../drivers/fsl_flash.c ****  *   {
 595:../drivers/fsl_flash.c ****  *       // clear CCIF bit
 596:../drivers/fsl_flash.c ****  *       *ftfx_fstat = FTFx_FSTAT_CCIF_MASK;
 597:../drivers/fsl_flash.c ****  *
 598:../drivers/fsl_flash.c ****  *       // Check CCIF bit of the flash status register, wait till it is set.
 599:../drivers/fsl_flash.c ****  *       // IP team indicates that this loop will always complete.
 600:../drivers/fsl_flash.c ****  *       while (!((*ftfx_fstat) & FTFx_FSTAT_CCIF_MASK))
 601:../drivers/fsl_flash.c ****  *       {
 602:../drivers/fsl_flash.c ****  *       }
 603:../drivers/fsl_flash.c ****  *   }
 604:../drivers/fsl_flash.c ****  * @endcode
 605:../drivers/fsl_flash.c ****  * Note2: The binary code is generated by IAR 7.70.1
 606:../drivers/fsl_flash.c ****  */
 607:../drivers/fsl_flash.c **** static const uint16_t s_flashRunCommandFunctionCode[] = {
 608:../drivers/fsl_flash.c ****     0x2180, /* MOVS  R1, #128 ; 0x80 */
 609:../drivers/fsl_flash.c ****     0x7001, /* STRB  R1, [R0] */
 610:../drivers/fsl_flash.c ****     /* @4: */
 611:../drivers/fsl_flash.c ****     0x7802, /* LDRB  R2, [R0] */
 612:../drivers/fsl_flash.c ****     0x420a, /* TST   R2, R1 */
 613:../drivers/fsl_flash.c ****     0xd0fc, /* BEQ.N @4 */
 614:../drivers/fsl_flash.c ****     0x4770  /* BX    LR */
 615:../drivers/fsl_flash.c **** };
 616:../drivers/fsl_flash.c **** 
 617:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 618:../drivers/fsl_flash.c **** /*! @brief A function pointer used to point to relocated flash_common_bit_operation() */
 619:../drivers/fsl_flash.c **** static void (*callFlashCommonBitOperation)(FTFx_REG32_ACCESS_TYPE base,
 620:../drivers/fsl_flash.c ****                                            uint32_t bitMask,
 621:../drivers/fsl_flash.c ****                                            uint32_t bitShift,
 622:../drivers/fsl_flash.c ****                                            uint32_t bitValue);
 623:../drivers/fsl_flash.c **** 
 624:../drivers/fsl_flash.c **** /*!
 625:../drivers/fsl_flash.c ****  * @brief Position independent code of flash_common_bit_operation()
 626:../drivers/fsl_flash.c ****  *
 627:../drivers/fsl_flash.c ****  * Note1: The prototype of C function is shown as below:
 628:../drivers/fsl_flash.c ****  * @code
 629:../drivers/fsl_flash.c ****  *   void flash_common_bit_operation(FTFx_REG32_ACCESS_TYPE base, uint32_t bitMask, uint32_t bitShi
 630:../drivers/fsl_flash.c ****  * bitValue)
 631:../drivers/fsl_flash.c ****  *   {
 632:../drivers/fsl_flash.c ****  *       if (bitMask)
 633:../drivers/fsl_flash.c ****  *       {
 634:../drivers/fsl_flash.c ****  *           uint32_t value = (((uint32_t)(((uint32_t)(bitValue)) << bitShift)) & bitMask);
 635:../drivers/fsl_flash.c ****  *           *base = (*base & (~bitMask)) | value;
 636:../drivers/fsl_flash.c ****  *       }
 637:../drivers/fsl_flash.c ****  *
 638:../drivers/fsl_flash.c ****  *       __ISB();
 639:../drivers/fsl_flash.c ****  *       __DSB();
 640:../drivers/fsl_flash.c ****  *   }
 641:../drivers/fsl_flash.c ****  * @endcode
 642:../drivers/fsl_flash.c ****  * Note2: The binary code is generated by IAR 7.70.1
 643:../drivers/fsl_flash.c ****  */
 644:../drivers/fsl_flash.c **** static const uint16_t s_flashCommonBitOperationFunctionCode[] = {
 645:../drivers/fsl_flash.c ****     0xb510, /* PUSH  {R4, LR} */
 646:../drivers/fsl_flash.c ****     0x2900, /* CMP   R1, #0 */
 647:../drivers/fsl_flash.c ****     0xd005, /* BEQ.N @12 */
 648:../drivers/fsl_flash.c ****     0x6804, /* LDR   R4, [R0] */
 649:../drivers/fsl_flash.c ****     0x438c, /* BICS  R4, R4, R1 */
 650:../drivers/fsl_flash.c ****     0x4093, /* LSLS  R3, R3, R2 */
 651:../drivers/fsl_flash.c ****     0x4019, /* ANDS  R1, R1, R3 */
 652:../drivers/fsl_flash.c ****     0x4321, /* ORRS  R1, R1, R4 */
 653:../drivers/fsl_flash.c ****     0x6001, /* STR   R1, [R0] */
 654:../drivers/fsl_flash.c ****     /*  @12: */
 655:../drivers/fsl_flash.c ****     0xf3bf, 0x8f6f, /* ISB */
 656:../drivers/fsl_flash.c ****     0xf3bf, 0x8f4f, /* DSB */
 657:../drivers/fsl_flash.c ****     0xbd10          /* POP   {R4, PC} */
 658:../drivers/fsl_flash.c **** };
 659:../drivers/fsl_flash.c **** #endif /* FLASH_IS_CACHE_INVALIDATION_AVAILABLE */
 660:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 661:../drivers/fsl_flash.c **** 
 662:../drivers/fsl_flash.c **** #if (FLASH_DRIVER_IS_FLASH_RESIDENT && !FLASH_DRIVER_IS_EXPORTED)
 663:../drivers/fsl_flash.c **** /*! @brief A static buffer used to hold flash_run_command() */
 664:../drivers/fsl_flash.c **** static uint32_t s_flashRunCommand[kFLASH_ExecuteInRamFunctionMaxSizeInWords];
 665:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 666:../drivers/fsl_flash.c **** /*! @brief A static buffer used to hold flash_common_bit_operation() */
 667:../drivers/fsl_flash.c **** static uint32_t s_flashCommonBitOperation[kFLASH_ExecuteInRamFunctionMaxSizeInWords];
 668:../drivers/fsl_flash.c **** #endif
 669:../drivers/fsl_flash.c **** /*! @brief Flash execute-in-ram function information */
 670:../drivers/fsl_flash.c **** static flash_execute_in_ram_function_config_t s_flashExecuteInRamFunctionInfo;
 671:../drivers/fsl_flash.c **** #endif
 672:../drivers/fsl_flash.c **** 
 673:../drivers/fsl_flash.c **** /*!
 674:../drivers/fsl_flash.c ****  * @brief Table of pflash sizes.
 675:../drivers/fsl_flash.c ****  *
 676:../drivers/fsl_flash.c ****  *  The index into this table is the value of the SIM_FCFG1.PFSIZE bitfield.
 677:../drivers/fsl_flash.c ****  *
 678:../drivers/fsl_flash.c ****  *  The values in this table have been right shifted 10 bits so that they will all fit within
 679:../drivers/fsl_flash.c ****  *  an 16-bit integer. To get the actual flash density, you must left shift the looked up value
 680:../drivers/fsl_flash.c ****  *  by 10 bits.
 681:../drivers/fsl_flash.c ****  *
 682:../drivers/fsl_flash.c ****  *  Elements of this table have a value of 0 in cases where the PFSIZE bitfield value is
 683:../drivers/fsl_flash.c ****  *  reserved.
 684:../drivers/fsl_flash.c ****  *
 685:../drivers/fsl_flash.c ****  *  Code to use the table:
 686:../drivers/fsl_flash.c ****  *  @code
 687:../drivers/fsl_flash.c ****  *      uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_PFSIZE_MASK) >> SIM_FCFG1_PFSIZE_SHIFT;
 688:../drivers/fsl_flash.c ****  *      flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 689:../drivers/fsl_flash.c ****  *  @endcode
 690:../drivers/fsl_flash.c ****  */
 691:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_SIZE_ENCODING_RULE_VERSION) && (FSL_FEATURE_FLASH_SIZE_ENCODING_RULE_
 692:../drivers/fsl_flash.c **** const uint16_t kPFlashDensities[] = {
 693:../drivers/fsl_flash.c ****     0,    /* 0x0 - undefined */
 694:../drivers/fsl_flash.c ****     0,    /* 0x1 - undefined */
 695:../drivers/fsl_flash.c ****     0,    /* 0x2 - undefined */
 696:../drivers/fsl_flash.c ****     0,    /* 0x3 - undefined */
 697:../drivers/fsl_flash.c ****     0,    /* 0x4 - undefined */
 698:../drivers/fsl_flash.c ****     0,    /* 0x5 - undefined */
 699:../drivers/fsl_flash.c ****     0,    /* 0x6 - undefined */
 700:../drivers/fsl_flash.c ****     0,    /* 0x7 - undefined */
 701:../drivers/fsl_flash.c ****     0,    /* 0x8 - undefined */
 702:../drivers/fsl_flash.c ****     0,    /* 0x9 - undefined */
 703:../drivers/fsl_flash.c ****     256,  /* 0xa - 262144, 256KB */
 704:../drivers/fsl_flash.c ****     0,    /* 0xb - undefined */
 705:../drivers/fsl_flash.c ****     1024, /* 0xc - 1048576, 1MB */
 706:../drivers/fsl_flash.c ****     0,    /* 0xd - undefined */
 707:../drivers/fsl_flash.c ****     0,    /* 0xe - undefined */
 708:../drivers/fsl_flash.c ****     0,    /* 0xf - undefined */
 709:../drivers/fsl_flash.c **** };
 710:../drivers/fsl_flash.c **** #else
 711:../drivers/fsl_flash.c **** const uint16_t kPFlashDensities[] = {
 712:../drivers/fsl_flash.c ****     8,    /* 0x0 - 8192, 8KB */
 713:../drivers/fsl_flash.c ****     16,   /* 0x1 - 16384, 16KB */
 714:../drivers/fsl_flash.c ****     24,   /* 0x2 - 24576, 24KB */
 715:../drivers/fsl_flash.c ****     32,   /* 0x3 - 32768, 32KB */
 716:../drivers/fsl_flash.c ****     48,   /* 0x4 - 49152, 48KB */
 717:../drivers/fsl_flash.c ****     64,   /* 0x5 - 65536, 64KB */
 718:../drivers/fsl_flash.c ****     96,   /* 0x6 - 98304, 96KB */
 719:../drivers/fsl_flash.c ****     128,  /* 0x7 - 131072, 128KB */
 720:../drivers/fsl_flash.c ****     192,  /* 0x8 - 196608, 192KB */
 721:../drivers/fsl_flash.c ****     256,  /* 0x9 - 262144, 256KB */
 722:../drivers/fsl_flash.c ****     384,  /* 0xa - 393216, 384KB */
 723:../drivers/fsl_flash.c ****     512,  /* 0xb - 524288, 512KB */
 724:../drivers/fsl_flash.c ****     768,  /* 0xc - 786432, 768KB */
 725:../drivers/fsl_flash.c ****     1024, /* 0xd - 1048576, 1MB */
 726:../drivers/fsl_flash.c ****     1536, /* 0xe - 1572864, 1.5MB */
 727:../drivers/fsl_flash.c ****     /* 2048,  0xf - 2097152, 2MB */
 728:../drivers/fsl_flash.c **** };
 729:../drivers/fsl_flash.c **** #endif
 730:../drivers/fsl_flash.c **** 
 731:../drivers/fsl_flash.c **** /*******************************************************************************
 732:../drivers/fsl_flash.c ****  * Code
 733:../drivers/fsl_flash.c ****  ******************************************************************************/
 734:../drivers/fsl_flash.c **** 
 735:../drivers/fsl_flash.c **** status_t FLASH_Init(flash_config_t *config)
 736:../drivers/fsl_flash.c **** {
 737:../drivers/fsl_flash.c ****     if (config == NULL)
 738:../drivers/fsl_flash.c ****     {
 739:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 740:../drivers/fsl_flash.c ****     }
 741:../drivers/fsl_flash.c **** 
 742:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
 743:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
 744:../drivers/fsl_flash.c ****     {
 745:../drivers/fsl_flash.c **** /* calculate the flash density from SIM_FCFG1.PFSIZE */
 746:../drivers/fsl_flash.c **** #if defined(SIM_FCFG1_CORE1_PFSIZE_MASK)
 747:../drivers/fsl_flash.c ****         uint32_t flashDensity;
 748:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_CORE1_PFSIZE_MASK) >> SIM_FCFG1_CORE1_PFSIZE_SHIFT
 749:../drivers/fsl_flash.c ****         if (pfsize == 0xf)
 750:../drivers/fsl_flash.c ****         {
 751:../drivers/fsl_flash.c ****             flashDensity = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT * SECONDARY_FLASH_FEATURE_PFL
 752:../drivers/fsl_flash.c ****         }
 753:../drivers/fsl_flash.c ****         else
 754:../drivers/fsl_flash.c ****         {
 755:../drivers/fsl_flash.c ****             flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 756:../drivers/fsl_flash.c ****         }
 757:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 758:../drivers/fsl_flash.c **** #else
 759:../drivers/fsl_flash.c ****         /* Unused code to solve MISRA-C issue*/
 760:../drivers/fsl_flash.c ****         config->PFlashBlockBase = kPFlashDensities[0];
 761:../drivers/fsl_flash.c ****         config->PFlashTotalSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT * SECONDARY_FLASH_FEAT
 762:../drivers/fsl_flash.c **** #endif
 763:../drivers/fsl_flash.c ****         config->PFlashBlockBase = SECONDARY_FLASH_FEATURE_PFLASH_START_ADDRESS;
 764:../drivers/fsl_flash.c ****         config->PFlashBlockCount = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 765:../drivers/fsl_flash.c ****         config->PFlashSectorSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 766:../drivers/fsl_flash.c ****     }
 767:../drivers/fsl_flash.c ****     else
 768:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
 769:../drivers/fsl_flash.c ****     {
 770:../drivers/fsl_flash.c ****         uint32_t flashDensity;
 771:../drivers/fsl_flash.c **** 
 772:../drivers/fsl_flash.c **** /* calculate the flash density from SIM_FCFG1.PFSIZE */
 773:../drivers/fsl_flash.c **** #if defined(SIM_FCFG1_CORE0_PFSIZE_MASK)
 774:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_CORE0_PFSIZE_MASK) >> SIM_FCFG1_CORE0_PFSIZE_SHIFT
 775:../drivers/fsl_flash.c **** #elif defined(SIM_FCFG1_PFSIZE_MASK)
 776:../drivers/fsl_flash.c ****         uint8_t pfsize = (SIM->FCFG1 & SIM_FCFG1_PFSIZE_MASK) >> SIM_FCFG1_PFSIZE_SHIFT;
 777:../drivers/fsl_flash.c **** #else
 778:../drivers/fsl_flash.c **** #error "Unknown flash size"
 779:../drivers/fsl_flash.c **** #endif
 780:../drivers/fsl_flash.c ****         /* PFSIZE=0xf means that on customer parts the IFR was not correctly programmed.
 781:../drivers/fsl_flash.c ****          * We just use the pre-defined flash size in feature file here to support pre-production pa
 782:../drivers/fsl_flash.c ****         if (pfsize == 0xf)
 783:../drivers/fsl_flash.c ****         {
 784:../drivers/fsl_flash.c ****             flashDensity = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT * MAIN_FLASH_FEATURE_PFLASH_BLOCK_
 785:../drivers/fsl_flash.c ****         }
 786:../drivers/fsl_flash.c ****         else
 787:../drivers/fsl_flash.c ****         {
 788:../drivers/fsl_flash.c ****             flashDensity = ((uint32_t)kPFlashDensities[pfsize]) << 10;
 789:../drivers/fsl_flash.c ****         }
 790:../drivers/fsl_flash.c **** 
 791:../drivers/fsl_flash.c ****         /* fill out a few of the structure members */
 792:../drivers/fsl_flash.c ****         config->PFlashBlockBase = MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS;
 793:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 794:../drivers/fsl_flash.c ****         config->PFlashBlockCount = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 795:../drivers/fsl_flash.c ****         config->PFlashSectorSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 796:../drivers/fsl_flash.c ****     }
 797:../drivers/fsl_flash.c **** 
 798:../drivers/fsl_flash.c ****     {
 799:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 800:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
 801:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
 802:../drivers/fsl_flash.c ****         {
 803:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentSize = kFLASH_AccessSegmentBase << FTFx->FACSSS;
 804:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentCount = FTFx->FACSNS;
 805:../drivers/fsl_flash.c ****         }
 806:../drivers/fsl_flash.c ****         else
 807:../drivers/fsl_flash.c **** #endif
 808:../drivers/fsl_flash.c ****         {
 809:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentSize = kFLASH_AccessSegmentBase << FTFx->FACSS;
 810:../drivers/fsl_flash.c ****             config->PFlashAccessSegmentCount = FTFx->FACSN;
 811:../drivers/fsl_flash.c ****         }
 812:../drivers/fsl_flash.c **** #else
 813:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentSize = 0;
 814:../drivers/fsl_flash.c ****         config->PFlashAccessSegmentCount = 0;
 815:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 816:../drivers/fsl_flash.c ****     }
 817:../drivers/fsl_flash.c **** 
 818:../drivers/fsl_flash.c **** /* copy required flash commands to RAM */
 819:../drivers/fsl_flash.c **** #if (FLASH_DRIVER_IS_FLASH_RESIDENT && !FLASH_DRIVER_IS_EXPORTED)
 820:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != flash_check_execute_in_ram_function_info(config))
 821:../drivers/fsl_flash.c ****     {
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.activeFunctionCount = 0;
 823:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 824:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 825:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashCommonBitOperation = s_flashCommonBitOperation;
 826:../drivers/fsl_flash.c **** #endif
 827:../drivers/fsl_flash.c ****         config->flashExecuteInRamFunctionInfo = &s_flashExecuteInRamFunctionInfo.activeFunctionCoun
 828:../drivers/fsl_flash.c ****         FLASH_PrepareExecuteInRamFunctions(config);
 829:../drivers/fsl_flash.c ****     }
 830:../drivers/fsl_flash.c **** #endif
 831:../drivers/fsl_flash.c **** 
 832:../drivers/fsl_flash.c ****     config->FlexRAMBlockBase = FSL_FEATURE_FLASH_FLEX_RAM_START_ADDRESS;
 833:../drivers/fsl_flash.c ****     config->FlexRAMTotalSize = FSL_FEATURE_FLASH_FLEX_RAM_SIZE;
 834:../drivers/fsl_flash.c **** 
 835:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 836:../drivers/fsl_flash.c ****     {
 837:../drivers/fsl_flash.c ****         status_t returnCode;
 838:../drivers/fsl_flash.c ****         config->DFlashBlockBase = FSL_FEATURE_FLASH_FLEX_NVM_START_ADDRESS;
 839:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
 840:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
 841:../drivers/fsl_flash.c ****         {
 842:../drivers/fsl_flash.c ****             return returnCode;
 843:../drivers/fsl_flash.c ****         }
 844:../drivers/fsl_flash.c ****     }
 845:../drivers/fsl_flash.c **** #endif
 846:../drivers/fsl_flash.c **** 
 847:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 848:../drivers/fsl_flash.c **** }
 849:../drivers/fsl_flash.c **** 
 850:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 851:../drivers/fsl_flash.c **** status_t FLASH_PrepareExecuteInRamFunctions(flash_config_t *config)
 852:../drivers/fsl_flash.c **** {
 853:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
 854:../drivers/fsl_flash.c **** 
 855:../drivers/fsl_flash.c ****     if ((config == NULL) || (config->flashExecuteInRamFunctionInfo == NULL))
 856:../drivers/fsl_flash.c ****     {
 857:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 858:../drivers/fsl_flash.c ****     }
 859:../drivers/fsl_flash.c **** 
 860:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo = (flash_execute_in_ram_function_config_t *)config->flashExecuteI
 861:../drivers/fsl_flash.c **** 
 862:../drivers/fsl_flash.c ****     copy_flash_run_command(flashExecuteInRamFunctionInfo->flashRunCommand);
 863:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 864:../drivers/fsl_flash.c ****     copy_flash_common_bit_operation(flashExecuteInRamFunctionInfo->flashCommonBitOperation);
 865:../drivers/fsl_flash.c **** #endif
 866:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo->activeFunctionCount = kFLASH_ExecuteInRamFunctionTotalNum;
 867:../drivers/fsl_flash.c **** 
 868:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
 869:../drivers/fsl_flash.c **** }
 870:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 871:../drivers/fsl_flash.c **** 
 872:../drivers/fsl_flash.c **** status_t FLASH_EraseAll(flash_config_t *config, uint32_t key)
 873:../drivers/fsl_flash.c **** {
 874:../drivers/fsl_flash.c ****     status_t returnCode;
 875:../drivers/fsl_flash.c **** 
 876:../drivers/fsl_flash.c ****     if (config == NULL)
 877:../drivers/fsl_flash.c ****     {
 878:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 879:../drivers/fsl_flash.c ****     }
 880:../drivers/fsl_flash.c **** 
 881:../drivers/fsl_flash.c ****     /* preparing passing parameter to erase all flash blocks */
 882:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_BLOCK, 0xFFFFFFU);
 883:../drivers/fsl_flash.c **** 
 884:../drivers/fsl_flash.c ****     /* Validate the user key */
 885:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 886:../drivers/fsl_flash.c ****     if (returnCode)
 887:../drivers/fsl_flash.c ****     {
 888:../drivers/fsl_flash.c ****         return returnCode;
 889:../drivers/fsl_flash.c ****     }
 890:../drivers/fsl_flash.c **** 
 891:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 892:../drivers/fsl_flash.c **** 
 893:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
 894:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
 895:../drivers/fsl_flash.c **** 
 896:../drivers/fsl_flash.c ****     flash_cache_clear(config);
 897:../drivers/fsl_flash.c **** 
 898:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 899:../drivers/fsl_flash.c ****     /* Data flash IFR will be erased by erase all command, so we need to
 900:../drivers/fsl_flash.c ****      *  update FlexNVM memory partition status synchronously */
 901:../drivers/fsl_flash.c ****     if (returnCode == kStatus_FLASH_Success)
 902:../drivers/fsl_flash.c ****     {
 903:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
 904:../drivers/fsl_flash.c ****     }
 905:../drivers/fsl_flash.c **** #endif
 906:../drivers/fsl_flash.c **** 
 907:../drivers/fsl_flash.c ****     return returnCode;
 908:../drivers/fsl_flash.c **** }
 909:../drivers/fsl_flash.c **** 
 910:../drivers/fsl_flash.c **** status_t FLASH_Erase(flash_config_t *config, uint32_t start, uint32_t lengthInBytes, uint32_t key)
 911:../drivers/fsl_flash.c **** {
 912:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 913:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
 914:../drivers/fsl_flash.c ****     uint32_t endAddress;      /* storing end address */
 915:../drivers/fsl_flash.c ****     uint32_t numberOfSectors; /* number of sectors calculated by endAddress */
 916:../drivers/fsl_flash.c ****     status_t returnCode;
 917:../drivers/fsl_flash.c **** 
 918:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
 919:../drivers/fsl_flash.c **** 
 920:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
 921:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectorCmdAddres
 922:../drivers/fsl_flash.c ****     if (returnCode)
 923:../drivers/fsl_flash.c ****     {
 924:../drivers/fsl_flash.c ****         return returnCode;
 925:../drivers/fsl_flash.c ****     }
 926:../drivers/fsl_flash.c **** 
 927:../drivers/fsl_flash.c ****     /* Validate the user key */
 928:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 929:../drivers/fsl_flash.c ****     if (returnCode)
 930:../drivers/fsl_flash.c ****     {
 931:../drivers/fsl_flash.c ****         return returnCode;
 932:../drivers/fsl_flash.c ****     }
 933:../drivers/fsl_flash.c **** 
 934:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
 935:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
 936:../drivers/fsl_flash.c **** 
 937:../drivers/fsl_flash.c ****     /* calculating Flash end address */
 938:../drivers/fsl_flash.c ****     endAddress = start + lengthInBytes - 1;
 939:../drivers/fsl_flash.c **** 
 940:../drivers/fsl_flash.c ****     /* re-calculate the endAddress and align it to the start of the next sector
 941:../drivers/fsl_flash.c ****      * which will be used in the comparison below */
 942:../drivers/fsl_flash.c ****     if (endAddress % sectorSize)
 943:../drivers/fsl_flash.c ****     {
 944:../drivers/fsl_flash.c ****         numberOfSectors = endAddress / sectorSize + 1;
 945:../drivers/fsl_flash.c ****         endAddress = numberOfSectors * sectorSize - 1;
 946:../drivers/fsl_flash.c ****     }
 947:../drivers/fsl_flash.c **** 
 948:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 949:../drivers/fsl_flash.c **** 
 950:../drivers/fsl_flash.c ****     /* the start address will increment to the next sector address
 951:../drivers/fsl_flash.c ****      * until it reaches the endAdddress */
 952:../drivers/fsl_flash.c ****     while (start <= endAddress)
 953:../drivers/fsl_flash.c ****     {
 954:../drivers/fsl_flash.c ****         /* preparing passing parameter to erase a flash block */
 955:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_SECTOR, start);
 956:../drivers/fsl_flash.c **** 
 957:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
 958:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
 959:../drivers/fsl_flash.c **** 
 960:../drivers/fsl_flash.c ****         /* checking the success of command execution */
 961:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
 962:../drivers/fsl_flash.c ****         {
 963:../drivers/fsl_flash.c ****             break;
 964:../drivers/fsl_flash.c ****         }
 965:../drivers/fsl_flash.c ****         else
 966:../drivers/fsl_flash.c ****         {
 967:../drivers/fsl_flash.c ****             /* Increment to the next sector */
 968:../drivers/fsl_flash.c ****             start += sectorSize;
 969:../drivers/fsl_flash.c ****         }
 970:../drivers/fsl_flash.c ****     }
 971:../drivers/fsl_flash.c **** 
 972:../drivers/fsl_flash.c ****     flash_cache_clear(config);
 973:../drivers/fsl_flash.c **** 
 974:../drivers/fsl_flash.c ****     return (returnCode);
 975:../drivers/fsl_flash.c **** }
 976:../drivers/fsl_flash.c **** 
 977:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD) && FSL_FEATURE_FLASH_HAS_ERASE_ALL
 978:../drivers/fsl_flash.c **** status_t FLASH_EraseAllUnsecure(flash_config_t *config, uint32_t key)
 979:../drivers/fsl_flash.c **** {
 980:../drivers/fsl_flash.c ****     status_t returnCode;
 981:../drivers/fsl_flash.c **** 
 982:../drivers/fsl_flash.c ****     if (config == NULL)
 983:../drivers/fsl_flash.c ****     {
 984:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
 985:../drivers/fsl_flash.c ****     }
 986:../drivers/fsl_flash.c **** 
 987:../drivers/fsl_flash.c ****     /* Prepare passing parameter to erase all flash blocks (unsecure). */
 988:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_BLOCK_UNSECURE, 0xFFFFFFU);
 989:../drivers/fsl_flash.c **** 
 990:../drivers/fsl_flash.c ****     /* Validate the user key */
 991:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
 992:../drivers/fsl_flash.c ****     if (returnCode)
 993:../drivers/fsl_flash.c ****     {
 994:../drivers/fsl_flash.c ****         return returnCode;
 995:../drivers/fsl_flash.c ****     }
 996:../drivers/fsl_flash.c **** 
 997:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
 998:../drivers/fsl_flash.c **** 
 999:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1000:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1001:../drivers/fsl_flash.c **** 
1002:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1003:../drivers/fsl_flash.c **** 
1004:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
1005:../drivers/fsl_flash.c ****     /* Data flash IFR will be erased by erase all unsecure command, so we need to
1006:../drivers/fsl_flash.c ****      *  update FlexNVM memory partition status synchronously */
1007:../drivers/fsl_flash.c ****     if (returnCode == kStatus_FLASH_Success)
1008:../drivers/fsl_flash.c ****     {
1009:../drivers/fsl_flash.c ****         returnCode = flash_update_flexnvm_memory_partition_status(config);
1010:../drivers/fsl_flash.c ****     }
1011:../drivers/fsl_flash.c **** #endif
1012:../drivers/fsl_flash.c **** 
1013:../drivers/fsl_flash.c ****     return returnCode;
1014:../drivers/fsl_flash.c **** }
1015:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD */
1016:../drivers/fsl_flash.c **** 
1017:../drivers/fsl_flash.c **** status_t FLASH_EraseAllExecuteOnlySegments(flash_config_t *config, uint32_t key)
1018:../drivers/fsl_flash.c **** {
1019:../drivers/fsl_flash.c ****     status_t returnCode;
1020:../drivers/fsl_flash.c **** 
1021:../drivers/fsl_flash.c ****     if (config == NULL)
1022:../drivers/fsl_flash.c ****     {
1023:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1024:../drivers/fsl_flash.c ****     }
1025:../drivers/fsl_flash.c **** 
1026:../drivers/fsl_flash.c ****     /* preparing passing parameter to erase all execute-only segments
1027:../drivers/fsl_flash.c ****      * 1st element for the FCCOB register */
1028:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_ERASE_ALL_EXECUTE_ONLY_SEGMENT, 0xFFFFFFU);
1029:../drivers/fsl_flash.c **** 
1030:../drivers/fsl_flash.c ****     /* Validate the user key */
1031:../drivers/fsl_flash.c ****     returnCode = flash_check_user_key(key);
1032:../drivers/fsl_flash.c ****     if (returnCode)
1033:../drivers/fsl_flash.c ****     {
1034:../drivers/fsl_flash.c ****         return returnCode;
1035:../drivers/fsl_flash.c ****     }
1036:../drivers/fsl_flash.c **** 
1037:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1038:../drivers/fsl_flash.c **** 
1039:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1040:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1041:../drivers/fsl_flash.c **** 
1042:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1043:../drivers/fsl_flash.c **** 
1044:../drivers/fsl_flash.c ****     return returnCode;
1045:../drivers/fsl_flash.c **** }
1046:../drivers/fsl_flash.c **** 
1047:../drivers/fsl_flash.c **** status_t FLASH_Program(flash_config_t *config, uint32_t start, uint32_t *src, uint32_t lengthInByte
1048:../drivers/fsl_flash.c **** {
1049:../drivers/fsl_flash.c ****     status_t returnCode;
1050:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1051:../drivers/fsl_flash.c **** 
1052:../drivers/fsl_flash.c ****     if (src == NULL)
1053:../drivers/fsl_flash.c ****     {
1054:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1055:../drivers/fsl_flash.c ****     }
1056:../drivers/fsl_flash.c **** 
1057:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1058:../drivers/fsl_flash.c **** 
1059:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1060:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.blockWriteUnitS
1061:../drivers/fsl_flash.c ****     if (returnCode)
1062:../drivers/fsl_flash.c ****     {
1063:../drivers/fsl_flash.c ****         return returnCode;
1064:../drivers/fsl_flash.c ****     }
1065:../drivers/fsl_flash.c **** 
1066:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1067:../drivers/fsl_flash.c **** 
1068:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1069:../drivers/fsl_flash.c **** 
1070:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1071:../drivers/fsl_flash.c ****     {
1072:../drivers/fsl_flash.c ****         /* preparing passing parameter to program the flash block */
1073:../drivers/fsl_flash.c ****         kFCCOBx[1] = *src++;
1074:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
1075:../drivers/fsl_flash.c ****         {
1076:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_LONGWORD, start);
1077:../drivers/fsl_flash.c ****         }
1078:../drivers/fsl_flash.c ****         else if (8 == flashOperationInfo.blockWriteUnitSize)
1079:../drivers/fsl_flash.c ****         {
1080:../drivers/fsl_flash.c ****             kFCCOBx[2] = *src++;
1081:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
1082:../drivers/fsl_flash.c ****         }
1083:../drivers/fsl_flash.c ****         else
1084:../drivers/fsl_flash.c ****         {
1085:../drivers/fsl_flash.c ****         }
1086:../drivers/fsl_flash.c **** 
1087:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1088:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1089:../drivers/fsl_flash.c **** 
1090:../drivers/fsl_flash.c ****         /* checking for the success of command execution */
1091:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1092:../drivers/fsl_flash.c ****         {
1093:../drivers/fsl_flash.c ****             break;
1094:../drivers/fsl_flash.c ****         }
1095:../drivers/fsl_flash.c ****         else
1096:../drivers/fsl_flash.c ****         {
1097:../drivers/fsl_flash.c ****             /* update start address for next iteration */
1098:../drivers/fsl_flash.c ****             start += flashOperationInfo.blockWriteUnitSize;
1099:../drivers/fsl_flash.c **** 
1100:../drivers/fsl_flash.c ****             /* update lengthInBytes for next iteration */
1101:../drivers/fsl_flash.c ****             lengthInBytes -= flashOperationInfo.blockWriteUnitSize;
1102:../drivers/fsl_flash.c ****         }
1103:../drivers/fsl_flash.c ****     }
1104:../drivers/fsl_flash.c **** 
1105:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1106:../drivers/fsl_flash.c **** 
1107:../drivers/fsl_flash.c ****     return (returnCode);
1108:../drivers/fsl_flash.c **** }
1109:../drivers/fsl_flash.c **** 
1110:../drivers/fsl_flash.c **** status_t FLASH_ProgramOnce(flash_config_t *config, uint32_t index, uint32_t *src, uint32_t lengthIn
1111:../drivers/fsl_flash.c **** {
1112:../drivers/fsl_flash.c ****     status_t returnCode;
1113:../drivers/fsl_flash.c **** 
1114:../drivers/fsl_flash.c ****     if ((config == NULL) || (src == NULL))
1115:../drivers/fsl_flash.c ****     {
1116:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1117:../drivers/fsl_flash.c ****     }
1118:../drivers/fsl_flash.c **** 
1119:../drivers/fsl_flash.c ****     /* pass paramters to FTFx */
1120:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_PROGRAM_ONCE, index, 0xFFFFU);
1121:../drivers/fsl_flash.c **** 
1122:../drivers/fsl_flash.c ****     kFCCOBx[1] = *src;
1123:../drivers/fsl_flash.c **** 
1124:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
1125:../drivers/fsl_flash.c ****  * to avoid a pointless comparison of unsigned int to 0 compiler warning */
1126:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT
1127:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT
1128:../drivers/fsl_flash.c ****     if (((index == FLASH_PROGRAM_ONCE_MIN_ID_8BYTES) ||
1129:../drivers/fsl_flash.c ****          /* Range check */
1130:../drivers/fsl_flash.c ****          ((index >= FLASH_PROGRAM_ONCE_MIN_ID_8BYTES + 1) && (index <= FLASH_PROGRAM_ONCE_MAX_ID_8B
1131:../drivers/fsl_flash.c ****         (lengthInBytes == 8))
1132:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT */
1133:../drivers/fsl_flash.c ****     {
1134:../drivers/fsl_flash.c ****         kFCCOBx[2] = *(src + 1);
1135:../drivers/fsl_flash.c ****     }
1136:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT */
1137:../drivers/fsl_flash.c **** 
1138:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1139:../drivers/fsl_flash.c **** 
1140:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1141:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1142:../drivers/fsl_flash.c **** 
1143:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1144:../drivers/fsl_flash.c **** 
1145:../drivers/fsl_flash.c ****     return returnCode;
1146:../drivers/fsl_flash.c **** }
1147:../drivers/fsl_flash.c **** 
1148:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD) && FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD
1149:../drivers/fsl_flash.c **** status_t FLASH_ProgramSection(flash_config_t *config, uint32_t start, uint32_t *src, uint32_t lengt
1150:../drivers/fsl_flash.c **** {
1151:../drivers/fsl_flash.c ****     status_t returnCode;
1152:../drivers/fsl_flash.c ****     uint32_t sectorSize;
1153:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1154:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1155:../drivers/fsl_flash.c ****     bool needSwitchFlexRamMode = false;
1156:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1157:../drivers/fsl_flash.c **** 
1158:../drivers/fsl_flash.c ****     if (src == NULL)
1159:../drivers/fsl_flash.c ****     {
1160:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1161:../drivers/fsl_flash.c ****     }
1162:../drivers/fsl_flash.c **** 
1163:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1164:../drivers/fsl_flash.c **** 
1165:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1166:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectionCmdAddre
1167:../drivers/fsl_flash.c ****     if (returnCode)
1168:../drivers/fsl_flash.c ****     {
1169:../drivers/fsl_flash.c ****         return returnCode;
1170:../drivers/fsl_flash.c ****     }
1171:../drivers/fsl_flash.c **** 
1172:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1173:../drivers/fsl_flash.c ****     sectorSize = flashOperationInfo.activeSectorSize;
1174:../drivers/fsl_flash.c **** 
1175:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1176:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1177:../drivers/fsl_flash.c ****     if (!(FTFx->FCNFG & FTFx_FCNFG_RAMRDY_MASK))
1178:../drivers/fsl_flash.c ****     {
1179:../drivers/fsl_flash.c ****         needSwitchFlexRamMode = true;
1180:../drivers/fsl_flash.c **** 
1181:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableAsRam);
1182:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1183:../drivers/fsl_flash.c ****         {
1184:../drivers/fsl_flash.c ****             return kStatus_FLASH_SetFlexramAsRamError;
1185:../drivers/fsl_flash.c ****         }
1186:../drivers/fsl_flash.c ****     }
1187:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1188:../drivers/fsl_flash.c **** 
1189:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
1190:../drivers/fsl_flash.c **** 
1191:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1192:../drivers/fsl_flash.c ****     {
1193:../drivers/fsl_flash.c ****         /* Make sure the write operation doesn't span two sectors */
1194:../drivers/fsl_flash.c ****         uint32_t endAddressOfCurrentSector = ALIGN_UP(start, sectorSize);
1195:../drivers/fsl_flash.c ****         uint32_t lengthTobeProgrammedOfCurrentSector;
1196:../drivers/fsl_flash.c ****         uint32_t currentOffset = 0;
1197:../drivers/fsl_flash.c **** 
1198:../drivers/fsl_flash.c ****         if (endAddressOfCurrentSector == start)
1199:../drivers/fsl_flash.c ****         {
1200:../drivers/fsl_flash.c ****             endAddressOfCurrentSector += sectorSize;
1201:../drivers/fsl_flash.c ****         }
1202:../drivers/fsl_flash.c **** 
1203:../drivers/fsl_flash.c ****         if (lengthInBytes + start > endAddressOfCurrentSector)
1204:../drivers/fsl_flash.c ****         {
1205:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector = endAddressOfCurrentSector - start;
1206:../drivers/fsl_flash.c ****         }
1207:../drivers/fsl_flash.c ****         else
1208:../drivers/fsl_flash.c ****         {
1209:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector = lengthInBytes;
1210:../drivers/fsl_flash.c ****         }
1211:../drivers/fsl_flash.c **** 
1212:../drivers/fsl_flash.c ****         /* Program Current Sector */
1213:../drivers/fsl_flash.c ****         while (lengthTobeProgrammedOfCurrentSector > 0)
1214:../drivers/fsl_flash.c ****         {
1215:../drivers/fsl_flash.c ****             /* Make sure the program size doesn't exceeds Acceleration RAM size */
1216:../drivers/fsl_flash.c ****             uint32_t programSizeOfCurrentPass;
1217:../drivers/fsl_flash.c ****             uint32_t numberOfPhases;
1218:../drivers/fsl_flash.c **** 
1219:../drivers/fsl_flash.c ****             if (lengthTobeProgrammedOfCurrentSector > kFLASH_AccelerationRamSize)
1220:../drivers/fsl_flash.c ****             {
1221:../drivers/fsl_flash.c ****                 programSizeOfCurrentPass = kFLASH_AccelerationRamSize;
1222:../drivers/fsl_flash.c ****             }
1223:../drivers/fsl_flash.c ****             else
1224:../drivers/fsl_flash.c ****             {
1225:../drivers/fsl_flash.c ****                 programSizeOfCurrentPass = lengthTobeProgrammedOfCurrentSector;
1226:../drivers/fsl_flash.c ****             }
1227:../drivers/fsl_flash.c **** 
1228:../drivers/fsl_flash.c ****             /* Copy data to FlexRAM */
1229:../drivers/fsl_flash.c ****             memcpy((void *)FSL_FEATURE_FLASH_FLEX_RAM_START_ADDRESS, src + currentOffset / 4, progr
1230:../drivers/fsl_flash.c ****             /* Set start address of the data to be programmed */
1231:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_SECTION, start + currentOffset);
1232:../drivers/fsl_flash.c ****             /* Set program size in terms of FEATURE_FLASH_SECTION_CMD_ADDRESS_ALIGMENT */
1233:../drivers/fsl_flash.c ****             numberOfPhases = programSizeOfCurrentPass / flashOperationInfo.sectionCmdAddressAligmen
1234:../drivers/fsl_flash.c **** 
1235:../drivers/fsl_flash.c ****             kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_2(numberOfPhases, 0xFFFFU);
1236:../drivers/fsl_flash.c **** 
1237:../drivers/fsl_flash.c ****             /* Peform command sequence */
1238:../drivers/fsl_flash.c ****             returnCode = flash_command_sequence(config);
1239:../drivers/fsl_flash.c **** 
1240:../drivers/fsl_flash.c ****             if (returnCode != kStatus_FLASH_Success)
1241:../drivers/fsl_flash.c ****             {
1242:../drivers/fsl_flash.c ****                 flash_cache_clear(config);
1243:../drivers/fsl_flash.c ****                 return returnCode;
1244:../drivers/fsl_flash.c ****             }
1245:../drivers/fsl_flash.c **** 
1246:../drivers/fsl_flash.c ****             lengthTobeProgrammedOfCurrentSector -= programSizeOfCurrentPass;
1247:../drivers/fsl_flash.c ****             currentOffset += programSizeOfCurrentPass;
1248:../drivers/fsl_flash.c ****         }
1249:../drivers/fsl_flash.c **** 
1250:../drivers/fsl_flash.c ****         src += currentOffset / 4;
1251:../drivers/fsl_flash.c ****         start += currentOffset;
1252:../drivers/fsl_flash.c ****         lengthInBytes -= currentOffset;
1253:../drivers/fsl_flash.c ****     }
1254:../drivers/fsl_flash.c **** 
1255:../drivers/fsl_flash.c ****     flash_cache_clear(config);
1256:../drivers/fsl_flash.c **** 
1257:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
1258:../drivers/fsl_flash.c ****     /* Restore function of FlexRAM if needed. */
1259:../drivers/fsl_flash.c ****     if (needSwitchFlexRamMode)
1260:../drivers/fsl_flash.c ****     {
1261:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableForEepro
1262:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1263:../drivers/fsl_flash.c ****         {
1264:../drivers/fsl_flash.c ****             return kStatus_FLASH_RecoverFlexramAsEepromError;
1265:../drivers/fsl_flash.c ****         }
1266:../drivers/fsl_flash.c ****     }
1267:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
1268:../drivers/fsl_flash.c **** 
1269:../drivers/fsl_flash.c ****     return returnCode;
1270:../drivers/fsl_flash.c **** }
1271:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD */
1272:../drivers/fsl_flash.c **** 
1273:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
1274:../drivers/fsl_flash.c **** status_t FLASH_EepromWrite(flash_config_t *config, uint32_t start, uint8_t *src, uint32_t lengthInB
1275:../drivers/fsl_flash.c **** {
1276:../drivers/fsl_flash.c ****     status_t returnCode;
1277:../drivers/fsl_flash.c ****     bool needSwitchFlexRamMode = false;
1278:../drivers/fsl_flash.c **** 
1279:../drivers/fsl_flash.c ****     if (config == NULL)
1280:../drivers/fsl_flash.c ****     {
1281:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1282:../drivers/fsl_flash.c ****     }
1283:../drivers/fsl_flash.c **** 
1284:../drivers/fsl_flash.c ****     /* Validates the range of the given address */
1285:../drivers/fsl_flash.c ****     if ((start < config->FlexRAMBlockBase) ||
1286:../drivers/fsl_flash.c ****         ((start + lengthInBytes) > (config->FlexRAMBlockBase + config->EEpromTotalSize)))
1287:../drivers/fsl_flash.c ****     {
1288:../drivers/fsl_flash.c ****         return kStatus_FLASH_AddressError;
1289:../drivers/fsl_flash.c ****     }
1290:../drivers/fsl_flash.c **** 
1291:../drivers/fsl_flash.c ****     returnCode = kStatus_FLASH_Success;
1292:../drivers/fsl_flash.c **** 
1293:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1294:../drivers/fsl_flash.c ****     if (!(FTFx->FCNFG & FTFx_FCNFG_EEERDY_MASK))
1295:../drivers/fsl_flash.c ****     {
1296:../drivers/fsl_flash.c ****         needSwitchFlexRamMode = true;
1297:../drivers/fsl_flash.c **** 
1298:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableForEepro
1299:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1300:../drivers/fsl_flash.c ****         {
1301:../drivers/fsl_flash.c ****             return kStatus_FLASH_SetFlexramAsEepromError;
1302:../drivers/fsl_flash.c ****         }
1303:../drivers/fsl_flash.c ****     }
1304:../drivers/fsl_flash.c **** 
1305:../drivers/fsl_flash.c ****     /* Write data to FlexRAM when it is used as EEPROM emulator */
1306:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1307:../drivers/fsl_flash.c ****     {
1308:../drivers/fsl_flash.c ****         if ((!(start & 0x3U)) && (lengthInBytes >= 4))
1309:../drivers/fsl_flash.c ****         {
1310:../drivers/fsl_flash.c ****             *(uint32_t *)start = *(uint32_t *)src;
1311:../drivers/fsl_flash.c ****             start += 4;
1312:../drivers/fsl_flash.c ****             src += 4;
1313:../drivers/fsl_flash.c ****             lengthInBytes -= 4;
1314:../drivers/fsl_flash.c ****         }
1315:../drivers/fsl_flash.c ****         else if ((!(start & 0x1U)) && (lengthInBytes >= 2))
1316:../drivers/fsl_flash.c ****         {
1317:../drivers/fsl_flash.c ****             *(uint16_t *)start = *(uint16_t *)src;
1318:../drivers/fsl_flash.c ****             start += 2;
1319:../drivers/fsl_flash.c ****             src += 2;
1320:../drivers/fsl_flash.c ****             lengthInBytes -= 2;
1321:../drivers/fsl_flash.c ****         }
1322:../drivers/fsl_flash.c ****         else
1323:../drivers/fsl_flash.c ****         {
1324:../drivers/fsl_flash.c ****             *(uint8_t *)start = *src;
1325:../drivers/fsl_flash.c ****             start += 1;
1326:../drivers/fsl_flash.c ****             src += 1;
1327:../drivers/fsl_flash.c ****             lengthInBytes -= 1;
1328:../drivers/fsl_flash.c ****         }
1329:../drivers/fsl_flash.c ****         /* Wait till EEERDY bit is set */
1330:../drivers/fsl_flash.c ****         while (!(FTFx->FCNFG & FTFx_FCNFG_EEERDY_MASK))
1331:../drivers/fsl_flash.c ****         {
1332:../drivers/fsl_flash.c ****         }
1333:../drivers/fsl_flash.c **** 
1334:../drivers/fsl_flash.c ****         /* Check for protection violation error */
1335:../drivers/fsl_flash.c ****         if (FTFx->FSTAT & FTFx_FSTAT_FPVIOL_MASK)
1336:../drivers/fsl_flash.c ****         {
1337:../drivers/fsl_flash.c ****             return kStatus_FLASH_ProtectionViolation;
1338:../drivers/fsl_flash.c ****         }
1339:../drivers/fsl_flash.c ****     }
1340:../drivers/fsl_flash.c **** 
1341:../drivers/fsl_flash.c ****     /* Switch function of FlexRAM if needed */
1342:../drivers/fsl_flash.c ****     if (needSwitchFlexRamMode)
1343:../drivers/fsl_flash.c ****     {
1344:../drivers/fsl_flash.c ****         returnCode = FLASH_SetFlexramFunction(config, kFLASH_FlexramFunctionOptionAvailableAsRam);
1345:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
1346:../drivers/fsl_flash.c ****         {
1347:../drivers/fsl_flash.c ****             return kStatus_FLASH_RecoverFlexramAsRamError;
1348:../drivers/fsl_flash.c ****         }
1349:../drivers/fsl_flash.c ****     }
1350:../drivers/fsl_flash.c **** 
1351:../drivers/fsl_flash.c ****     return returnCode;
1352:../drivers/fsl_flash.c **** }
1353:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
1354:../drivers/fsl_flash.c **** 
1355:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
1356:../drivers/fsl_flash.c **** status_t FLASH_ReadResource(
1357:../drivers/fsl_flash.c ****     flash_config_t *config, uint32_t start, uint32_t *dst, uint32_t lengthInBytes, flash_read_resou
1358:../drivers/fsl_flash.c **** {
1359:../drivers/fsl_flash.c ****     status_t returnCode;
1360:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1361:../drivers/fsl_flash.c **** 
1362:../drivers/fsl_flash.c ****     if ((config == NULL) || (dst == NULL))
1363:../drivers/fsl_flash.c ****     {
1364:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1365:../drivers/fsl_flash.c ****     }
1366:../drivers/fsl_flash.c **** 
1367:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1368:../drivers/fsl_flash.c **** 
1369:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1370:../drivers/fsl_flash.c ****     returnCode =
1371:../drivers/fsl_flash.c ****         flash_check_resource_range(start, lengthInBytes, flashOperationInfo.resourceCmdAddressAligm
1372:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
1373:../drivers/fsl_flash.c ****     {
1374:../drivers/fsl_flash.c ****         return returnCode;
1375:../drivers/fsl_flash.c ****     }
1376:../drivers/fsl_flash.c **** 
1377:../drivers/fsl_flash.c ****     while (lengthInBytes > 0)
1378:../drivers/fsl_flash.c ****     {
1379:../drivers/fsl_flash.c ****         /* preparing passing parameter */
1380:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_READ_RESOURCE, start);
1381:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
1382:../drivers/fsl_flash.c ****         {
1383:../drivers/fsl_flash.c ****             kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
1384:../drivers/fsl_flash.c ****         }
1385:../drivers/fsl_flash.c ****         else if (flashOperationInfo.resourceCmdAddressAligment == 8)
1386:../drivers/fsl_flash.c ****         {
1387:../drivers/fsl_flash.c ****             kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
1388:../drivers/fsl_flash.c ****         }
1389:../drivers/fsl_flash.c ****         else
1390:../drivers/fsl_flash.c ****         {
1391:../drivers/fsl_flash.c ****         }
1392:../drivers/fsl_flash.c **** 
1393:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1394:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1395:../drivers/fsl_flash.c **** 
1396:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1397:../drivers/fsl_flash.c ****         {
1398:../drivers/fsl_flash.c ****             break;
1399:../drivers/fsl_flash.c ****         }
1400:../drivers/fsl_flash.c **** 
1401:../drivers/fsl_flash.c ****         /* fetch data */
1402:../drivers/fsl_flash.c ****         *dst++ = kFCCOBx[1];
1403:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
1404:../drivers/fsl_flash.c ****         {
1405:../drivers/fsl_flash.c ****             *dst++ = kFCCOBx[2];
1406:../drivers/fsl_flash.c ****         }
1407:../drivers/fsl_flash.c ****         /* update start address for next iteration */
1408:../drivers/fsl_flash.c ****         start += flashOperationInfo.resourceCmdAddressAligment;
1409:../drivers/fsl_flash.c ****         /* update lengthInBytes for next iteration */
1410:../drivers/fsl_flash.c ****         lengthInBytes -= flashOperationInfo.resourceCmdAddressAligment;
1411:../drivers/fsl_flash.c ****     }
1412:../drivers/fsl_flash.c **** 
1413:../drivers/fsl_flash.c ****     return (returnCode);
1414:../drivers/fsl_flash.c **** }
1415:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
1416:../drivers/fsl_flash.c **** 
1417:../drivers/fsl_flash.c **** status_t FLASH_ReadOnce(flash_config_t *config, uint32_t index, uint32_t *dst, uint32_t lengthInByt
1418:../drivers/fsl_flash.c **** {
1419:../drivers/fsl_flash.c ****     status_t returnCode;
1420:../drivers/fsl_flash.c **** 
1421:../drivers/fsl_flash.c ****     if ((config == NULL) || (dst == NULL))
1422:../drivers/fsl_flash.c ****     {
1423:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1424:../drivers/fsl_flash.c ****     }
1425:../drivers/fsl_flash.c **** 
1426:../drivers/fsl_flash.c ****     /* pass paramters to FTFx */
1427:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_READ_ONCE, index, 0xFFFFU);
1428:../drivers/fsl_flash.c **** 
1429:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1430:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
1431:../drivers/fsl_flash.c **** 
1432:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success == returnCode)
1433:../drivers/fsl_flash.c ****     {
1434:../drivers/fsl_flash.c ****         *dst = kFCCOBx[1];
1435:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
1436:../drivers/fsl_flash.c ****  *       to avoid a pointless comparison of unsigned int to 0 compiler warning */
1437:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT
1438:../drivers/fsl_flash.c **** #if FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT
1439:../drivers/fsl_flash.c ****         if (((index == FLASH_PROGRAM_ONCE_MIN_ID_8BYTES) ||
1440:../drivers/fsl_flash.c ****              /* Range check */
1441:../drivers/fsl_flash.c ****              ((index >= FLASH_PROGRAM_ONCE_MIN_ID_8BYTES + 1) && (index <= FLASH_PROGRAM_ONCE_MAX_I
1442:../drivers/fsl_flash.c ****             (lengthInBytes == 8))
1443:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_4BYTES_UNIT_SUPPORT */
1444:../drivers/fsl_flash.c ****         {
1445:../drivers/fsl_flash.c ****             *(dst + 1) = kFCCOBx[2];
1446:../drivers/fsl_flash.c ****         }
1447:../drivers/fsl_flash.c **** #endif /* FLASH_PROGRAM_ONCE_IS_8BYTES_UNIT_SUPPORT */
1448:../drivers/fsl_flash.c ****     }
1449:../drivers/fsl_flash.c **** 
1450:../drivers/fsl_flash.c ****     return returnCode;
1451:../drivers/fsl_flash.c **** }
1452:../drivers/fsl_flash.c **** 
1453:../drivers/fsl_flash.c **** status_t FLASH_GetSecurityState(flash_config_t *config, flash_security_state_t *state)
1454:../drivers/fsl_flash.c **** {
1455:../drivers/fsl_flash.c ****     /* store data read from flash register */
1456:../drivers/fsl_flash.c ****     uint8_t registerValue;
1457:../drivers/fsl_flash.c **** 
1458:../drivers/fsl_flash.c ****     if ((config == NULL) || (state == NULL))
1459:../drivers/fsl_flash.c ****     {
1460:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1461:../drivers/fsl_flash.c ****     }
1462:../drivers/fsl_flash.c **** 
1463:../drivers/fsl_flash.c ****     /* Get flash security register value */
1464:../drivers/fsl_flash.c ****     registerValue = FTFx->FSEC;
1465:../drivers/fsl_flash.c **** 
1466:../drivers/fsl_flash.c ****     /* check the status of the flash security bits in the security register */
1467:../drivers/fsl_flash.c ****     if (FLASH_SECURITY_STATE_UNSECURED == (registerValue & FTFx_FSEC_SEC_MASK))
1468:../drivers/fsl_flash.c ****     {
1469:../drivers/fsl_flash.c ****         /* Flash in unsecured state */
1470:../drivers/fsl_flash.c ****         *state = kFLASH_SecurityStateNotSecure;
1471:../drivers/fsl_flash.c ****     }
1472:../drivers/fsl_flash.c ****     else
1473:../drivers/fsl_flash.c ****     {
1474:../drivers/fsl_flash.c ****         /* Flash in secured state
1475:../drivers/fsl_flash.c ****          * check for backdoor key security enable bit */
1476:../drivers/fsl_flash.c ****         if (FLASH_SECURITY_STATE_KEYEN == (registerValue & FTFx_FSEC_KEYEN_MASK))
1477:../drivers/fsl_flash.c ****         {
1478:../drivers/fsl_flash.c ****             /* Backdoor key security enabled */
1479:../drivers/fsl_flash.c ****             *state = kFLASH_SecurityStateBackdoorEnabled;
1480:../drivers/fsl_flash.c ****         }
1481:../drivers/fsl_flash.c ****         else
1482:../drivers/fsl_flash.c ****         {
1483:../drivers/fsl_flash.c ****             /* Backdoor key security disabled */
1484:../drivers/fsl_flash.c ****             *state = kFLASH_SecurityStateBackdoorDisabled;
1485:../drivers/fsl_flash.c ****         }
1486:../drivers/fsl_flash.c ****     }
1487:../drivers/fsl_flash.c **** 
1488:../drivers/fsl_flash.c ****     return (kStatus_FLASH_Success);
1489:../drivers/fsl_flash.c **** }
1490:../drivers/fsl_flash.c **** 
1491:../drivers/fsl_flash.c **** status_t FLASH_SecurityBypass(flash_config_t *config, const uint8_t *backdoorKey)
1492:../drivers/fsl_flash.c **** {
1493:../drivers/fsl_flash.c ****     uint8_t registerValue; /* registerValue */
1494:../drivers/fsl_flash.c ****     status_t returnCode;   /* return code variable */
1495:../drivers/fsl_flash.c **** 
1496:../drivers/fsl_flash.c ****     if ((config == NULL) || (backdoorKey == NULL))
1497:../drivers/fsl_flash.c ****     {
1498:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1499:../drivers/fsl_flash.c ****     }
1500:../drivers/fsl_flash.c **** 
1501:../drivers/fsl_flash.c ****     /* set the default return code as kStatus_Success */
1502:../drivers/fsl_flash.c ****     returnCode = kStatus_FLASH_Success;
1503:../drivers/fsl_flash.c **** 
1504:../drivers/fsl_flash.c ****     /* Get flash security register value */
1505:../drivers/fsl_flash.c ****     registerValue = FTFx->FSEC;
1506:../drivers/fsl_flash.c **** 
1507:../drivers/fsl_flash.c ****     /* Check to see if flash is in secure state (any state other than 0x2)
1508:../drivers/fsl_flash.c ****      * If not, then skip this since flash is not secure */
1509:../drivers/fsl_flash.c ****     if (0x02 != (registerValue & 0x03))
1510:../drivers/fsl_flash.c ****     {
1511:../drivers/fsl_flash.c ****         /* preparing passing parameter to erase a flash block */
1512:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_SECURITY_BY_PASS, 0xFFFFFFU);
1513:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[0], backdoorKey[1], backdoorKey[2], bac
1514:../drivers/fsl_flash.c ****         kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[4], backdoorKey[5], backdoorKey[6], bac
1515:../drivers/fsl_flash.c **** 
1516:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1517:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1518:../drivers/fsl_flash.c ****     }
1519:../drivers/fsl_flash.c **** 
1520:../drivers/fsl_flash.c ****     return (returnCode);
1521:../drivers/fsl_flash.c **** }
1522:../drivers/fsl_flash.c **** 
1523:../drivers/fsl_flash.c **** status_t FLASH_VerifyEraseAll(flash_config_t *config, flash_margin_value_t margin)
1524:../drivers/fsl_flash.c **** {
1525:../drivers/fsl_flash.c ****     if (config == NULL)
1526:../drivers/fsl_flash.c ****     {
1527:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1528:../drivers/fsl_flash.c ****     }
1529:../drivers/fsl_flash.c **** 
1530:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify all block command */
1531:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_VERIFY_ALL_BLOCK, margin, 0xFFFFU);
1532:../drivers/fsl_flash.c **** 
1533:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1534:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
1535:../drivers/fsl_flash.c **** }
1536:../drivers/fsl_flash.c **** 
1537:../drivers/fsl_flash.c **** status_t FLASH_VerifyErase(flash_config_t *config, uint32_t start, uint32_t lengthInBytes, flash_ma
1538:../drivers/fsl_flash.c **** {
1539:../drivers/fsl_flash.c ****     /* Check arguments. */
1540:../drivers/fsl_flash.c ****     uint32_t blockSize;
1541:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1542:../drivers/fsl_flash.c ****     uint32_t nextBlockStartAddress;
1543:../drivers/fsl_flash.c ****     uint32_t remainingBytes;
1544:../drivers/fsl_flash.c ****     status_t returnCode;
1545:../drivers/fsl_flash.c **** 
1546:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1547:../drivers/fsl_flash.c **** 
1548:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.sectionCmdAddre
1549:../drivers/fsl_flash.c ****     if (returnCode)
1550:../drivers/fsl_flash.c ****     {
1551:../drivers/fsl_flash.c ****         return returnCode;
1552:../drivers/fsl_flash.c ****     }
1553:../drivers/fsl_flash.c **** 
1554:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1555:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1556:../drivers/fsl_flash.c ****     blockSize = flashOperationInfo.activeBlockSize;
1557:../drivers/fsl_flash.c **** 
1558:../drivers/fsl_flash.c ****     nextBlockStartAddress = ALIGN_UP(start, blockSize);
1559:../drivers/fsl_flash.c ****     if (nextBlockStartAddress == start)
1560:../drivers/fsl_flash.c ****     {
1561:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
1562:../drivers/fsl_flash.c ****     }
1563:../drivers/fsl_flash.c **** 
1564:../drivers/fsl_flash.c ****     remainingBytes = lengthInBytes;
1565:../drivers/fsl_flash.c **** 
1566:../drivers/fsl_flash.c ****     while (remainingBytes)
1567:../drivers/fsl_flash.c ****     {
1568:../drivers/fsl_flash.c ****         uint32_t numberOfPhrases;
1569:../drivers/fsl_flash.c ****         uint32_t verifyLength = nextBlockStartAddress - start;
1570:../drivers/fsl_flash.c ****         if (verifyLength > remainingBytes)
1571:../drivers/fsl_flash.c ****         {
1572:../drivers/fsl_flash.c ****             verifyLength = remainingBytes;
1573:../drivers/fsl_flash.c ****         }
1574:../drivers/fsl_flash.c **** 
1575:../drivers/fsl_flash.c ****         numberOfPhrases = verifyLength / flashOperationInfo.sectionCmdAddressAligment;
1576:../drivers/fsl_flash.c **** 
1577:../drivers/fsl_flash.c ****         /* Fill in verify section command parameters. */
1578:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_VERIFY_SECTION, start);
1579:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
1580:../drivers/fsl_flash.c **** 
1581:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1582:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1583:../drivers/fsl_flash.c ****         if (returnCode)
1584:../drivers/fsl_flash.c ****         {
1585:../drivers/fsl_flash.c ****             return returnCode;
1586:../drivers/fsl_flash.c ****         }
1587:../drivers/fsl_flash.c **** 
1588:../drivers/fsl_flash.c ****         remainingBytes -= verifyLength;
1589:../drivers/fsl_flash.c ****         start += verifyLength;
1590:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
1591:../drivers/fsl_flash.c ****     }
1592:../drivers/fsl_flash.c **** 
1593:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
1594:../drivers/fsl_flash.c **** }
1595:../drivers/fsl_flash.c **** 
1596:../drivers/fsl_flash.c **** status_t FLASH_VerifyProgram(flash_config_t *config,
1597:../drivers/fsl_flash.c ****                              uint32_t start,
1598:../drivers/fsl_flash.c ****                              uint32_t lengthInBytes,
1599:../drivers/fsl_flash.c ****                              const uint32_t *expectedData,
1600:../drivers/fsl_flash.c ****                              flash_margin_value_t margin,
1601:../drivers/fsl_flash.c ****                              uint32_t *failedAddress,
1602:../drivers/fsl_flash.c ****                              uint32_t *failedData)
1603:../drivers/fsl_flash.c **** {
1604:../drivers/fsl_flash.c ****     status_t returnCode;
1605:../drivers/fsl_flash.c ****     flash_operation_config_t flashOperationInfo;
1606:../drivers/fsl_flash.c **** 
1607:../drivers/fsl_flash.c ****     if (expectedData == NULL)
1608:../drivers/fsl_flash.c ****     {
1609:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1610:../drivers/fsl_flash.c ****     }
1611:../drivers/fsl_flash.c **** 
1612:../drivers/fsl_flash.c ****     flash_get_matched_operation_info(config, start, &flashOperationInfo);
1613:../drivers/fsl_flash.c **** 
1614:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, flashOperationInfo.checkCmdAddress
1615:../drivers/fsl_flash.c ****     if (returnCode)
1616:../drivers/fsl_flash.c ****     {
1617:../drivers/fsl_flash.c ****         return returnCode;
1618:../drivers/fsl_flash.c ****     }
1619:../drivers/fsl_flash.c **** 
1620:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
1621:../drivers/fsl_flash.c **** 
1622:../drivers/fsl_flash.c ****     while (lengthInBytes)
1623:../drivers/fsl_flash.c ****     {
1624:../drivers/fsl_flash.c ****         /* preparing passing parameter to program check the flash block */
1625:../drivers/fsl_flash.c ****         kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_CHECK, start);
1626:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
1627:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
1628:../drivers/fsl_flash.c **** 
1629:../drivers/fsl_flash.c ****         /* calling flash command sequence function to execute the command */
1630:../drivers/fsl_flash.c ****         returnCode = flash_command_sequence(config);
1631:../drivers/fsl_flash.c **** 
1632:../drivers/fsl_flash.c ****         /* checking for the success of command execution */
1633:../drivers/fsl_flash.c ****         if (kStatus_FLASH_Success != returnCode)
1634:../drivers/fsl_flash.c ****         {
1635:../drivers/fsl_flash.c ****             if (failedAddress)
1636:../drivers/fsl_flash.c ****             {
1637:../drivers/fsl_flash.c ****                 *failedAddress = start;
1638:../drivers/fsl_flash.c ****             }
1639:../drivers/fsl_flash.c ****             if (failedData)
1640:../drivers/fsl_flash.c ****             {
1641:../drivers/fsl_flash.c ****                 *failedData = 0;
1642:../drivers/fsl_flash.c ****             }
1643:../drivers/fsl_flash.c ****             break;
1644:../drivers/fsl_flash.c ****         }
1645:../drivers/fsl_flash.c **** 
1646:../drivers/fsl_flash.c ****         lengthInBytes -= flashOperationInfo.checkCmdAddressAligment;
1647:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
1648:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
1649:../drivers/fsl_flash.c ****     }
1650:../drivers/fsl_flash.c **** 
1651:../drivers/fsl_flash.c ****     return (returnCode);
1652:../drivers/fsl_flash.c **** }
1653:../drivers/fsl_flash.c **** 
1654:../drivers/fsl_flash.c **** status_t FLASH_VerifyEraseAllExecuteOnlySegments(flash_config_t *config, flash_margin_value_t margi
1655:../drivers/fsl_flash.c **** {
1656:../drivers/fsl_flash.c ****     if (config == NULL)
1657:../drivers/fsl_flash.c ****     {
1658:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1659:../drivers/fsl_flash.c ****     }
1660:../drivers/fsl_flash.c **** 
1661:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify erase all execute-only segments command */
1662:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_VERIFY_ALL_EXECUTE_ONLY_SEGMENT, margin, 0xFFFFU);
1663:../drivers/fsl_flash.c **** 
1664:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
1665:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
1666:../drivers/fsl_flash.c **** }
1667:../drivers/fsl_flash.c **** 
1668:../drivers/fsl_flash.c **** status_t FLASH_IsProtected(flash_config_t *config,
1669:../drivers/fsl_flash.c ****                            uint32_t start,
1670:../drivers/fsl_flash.c ****                            uint32_t lengthInBytes,
1671:../drivers/fsl_flash.c ****                            flash_protection_state_t *protection_state)
1672:../drivers/fsl_flash.c **** {
1673:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
1674:../drivers/fsl_flash.c ****     uint32_t regionCheckedCounter; /* increments each time the flash address was checked for
1675:../drivers/fsl_flash.c ****                                     * protection status */
1676:../drivers/fsl_flash.c ****     uint32_t regionCounter;        /* incrementing variable used to increment through the flash
1677:../drivers/fsl_flash.c ****                                     * protection regions */
1678:../drivers/fsl_flash.c ****     uint32_t protectStatusCounter; /* increments each time a flash region was detected as protected
1679:../drivers/fsl_flash.c **** 
1680:../drivers/fsl_flash.c ****     uint8_t flashRegionProtectStatus[MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT]; /* array o
1681:../drivers/fsl_flash.c ****                                                                       * status for each
1682:../drivers/fsl_flash.c ****                                                                       * protection region */
1683:../drivers/fsl_flash.c ****     uint32_t flashRegionAddress[MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT +
1684:../drivers/fsl_flash.c ****                                 1];                /* array of the start addresses for each flash
1685:../drivers/fsl_flash.c ****                                  * protection region. Note this is REGION_COUNT+1
1686:../drivers/fsl_flash.c ****                                  * due to requiring the next start address after
1687:../drivers/fsl_flash.c ****                                  * the end of flash for loop-check purposes below */
1688:../drivers/fsl_flash.c ****     flash_protection_config_t flashProtectionInfo; /* flash protection information */
1689:../drivers/fsl_flash.c ****     status_t returnCode;
1690:../drivers/fsl_flash.c **** 
1691:../drivers/fsl_flash.c ****     if (protection_state == NULL)
1692:../drivers/fsl_flash.c ****     {
1693:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1694:../drivers/fsl_flash.c ****     }
1695:../drivers/fsl_flash.c **** 
1696:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1697:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, MAIN_FLASH_FEATURE_PFLASH_BLOCK_WR
1698:../drivers/fsl_flash.c ****     if (returnCode)
1699:../drivers/fsl_flash.c ****     {
1700:../drivers/fsl_flash.c ****         return returnCode;
1701:../drivers/fsl_flash.c ****     }
1702:../drivers/fsl_flash.c **** 
1703:../drivers/fsl_flash.c ****     /* Get necessary flash protection information. */
1704:../drivers/fsl_flash.c ****     returnCode = flash_get_protection_info(config, &flashProtectionInfo);
1705:../drivers/fsl_flash.c ****     if (returnCode)
1706:../drivers/fsl_flash.c ****     {
1707:../drivers/fsl_flash.c ****         return returnCode;
1708:../drivers/fsl_flash.c ****     }
1709:../drivers/fsl_flash.c **** 
1710:../drivers/fsl_flash.c ****     /* calculating Flash end address */
1711:../drivers/fsl_flash.c ****     endAddress = start + lengthInBytes;
1712:../drivers/fsl_flash.c **** 
1713:../drivers/fsl_flash.c ****     /* populate the flashRegionAddress array with the start address of each flash region */
1714:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1715:../drivers/fsl_flash.c **** 
1716:../drivers/fsl_flash.c ****     /* populate up to 33rd element of array, this is the next address after end of flash array */
1717:../drivers/fsl_flash.c ****     while (regionCounter <= flashProtectionInfo.regionCount)
1718:../drivers/fsl_flash.c ****     {
1719:../drivers/fsl_flash.c ****         flashRegionAddress[regionCounter] =
1720:../drivers/fsl_flash.c ****             flashProtectionInfo.regionBase + flashProtectionInfo.regionSize * regionCounter;
1721:../drivers/fsl_flash.c ****         regionCounter++;
1722:../drivers/fsl_flash.c ****     }
1723:../drivers/fsl_flash.c **** 
1724:../drivers/fsl_flash.c ****     /* populate flashRegionProtectStatus array with status information
1725:../drivers/fsl_flash.c ****      * Protection status for each region is stored in the FPROT[3:0] registers
1726:../drivers/fsl_flash.c ****      * Each bit represents one region of flash
1727:../drivers/fsl_flash.c ****      * 4 registers * 8-bits-per-register = 32-bits (32-regions)
1728:../drivers/fsl_flash.c ****      * The convention is:
1729:../drivers/fsl_flash.c ****      * FPROT3[bit 0] is the first protection region (start of flash memory)
1730:../drivers/fsl_flash.c ****      * FPROT0[bit 7] is the last protection region (end of flash memory)
1731:../drivers/fsl_flash.c ****      * regionCounter is used to determine which FPROT[3:0] register to check for protection status
1732:../drivers/fsl_flash.c ****      * Note: FPROT=1 means NOT protected, FPROT=0 means protected */
1733:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1734:../drivers/fsl_flash.c ****     while (regionCounter < flashProtectionInfo.regionCount)
1735:../drivers/fsl_flash.c ****     {
1736:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
1737:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
1738:../drivers/fsl_flash.c ****         {
1739:../drivers/fsl_flash.c ****             if (regionCounter < 8)
1740:../drivers/fsl_flash.c ****             {
1741:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTSL_REG >> regionCounter) & (0x
1742:../drivers/fsl_flash.c ****             }
1743:../drivers/fsl_flash.c ****             else if ((regionCounter >= 8) && (regionCounter < 16))
1744:../drivers/fsl_flash.c ****             {
1745:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTSH_REG >> (regionCounter - 8))
1746:../drivers/fsl_flash.c ****             }
1747:../drivers/fsl_flash.c ****             else
1748:../drivers/fsl_flash.c ****             {
1749:../drivers/fsl_flash.c ****                 break;
1750:../drivers/fsl_flash.c ****             }
1751:../drivers/fsl_flash.c ****         }
1752:../drivers/fsl_flash.c ****         else
1753:../drivers/fsl_flash.c **** #endif
1754:../drivers/fsl_flash.c ****         {
1755:../drivers/fsl_flash.c ****             /* Note: So far protection region count may be 16/20/24/32/64 */
1756:../drivers/fsl_flash.c ****             if (regionCounter < 8)
1757:../drivers/fsl_flash.c ****             {
1758:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL3_REG >> regionCounter) & (0x
1759:../drivers/fsl_flash.c ****             }
1760:../drivers/fsl_flash.c ****             else if ((regionCounter >= 8) && (regionCounter < 16))
1761:../drivers/fsl_flash.c ****             {
1762:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL2_REG >> (regionCounter - 8))
1763:../drivers/fsl_flash.c ****             }
1764:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && (MAIN_FLASH_FEATURE_PFLASH_PROTEC
1765:../drivers/fsl_flash.c **** #if (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 20)
1766:../drivers/fsl_flash.c ****             else if ((regionCounter >= 16) && (regionCounter < 20))
1767:../drivers/fsl_flash.c ****             {
1768:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL1_REG >> (regionCounter - 16)
1769:../drivers/fsl_flash.c ****             }
1770:../drivers/fsl_flash.c **** #else
1771:../drivers/fsl_flash.c ****             else if ((regionCounter >= 16) && (regionCounter < 24))
1772:../drivers/fsl_flash.c ****             {
1773:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL1_REG >> (regionCounter - 16)
1774:../drivers/fsl_flash.c ****             }
1775:../drivers/fsl_flash.c **** #endif /* (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 20) */
1776:../drivers/fsl_flash.c **** #endif
1777:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && (MAIN_FLASH_FEATURE_PFLASH_PROTEC
1778:../drivers/fsl_flash.c ****             else if ((regionCounter >= 24) && (regionCounter < 32))
1779:../drivers/fsl_flash.c ****             {
1780:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTL0_REG >> (regionCounter - 24)
1781:../drivers/fsl_flash.c ****             }
1782:../drivers/fsl_flash.c **** #endif
1783:../drivers/fsl_flash.c **** #if defined(MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT) && \
1784:../drivers/fsl_flash.c ****     (MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT == 64)
1785:../drivers/fsl_flash.c ****             else if (regionCounter < 40)
1786:../drivers/fsl_flash.c ****             {
1787:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH3_REG >> (regionCounter - 32)
1788:../drivers/fsl_flash.c ****             }
1789:../drivers/fsl_flash.c ****             else if (regionCounter < 48)
1790:../drivers/fsl_flash.c ****             {
1791:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH2_REG >> (regionCounter - 40)
1792:../drivers/fsl_flash.c ****             }
1793:../drivers/fsl_flash.c ****             else if (regionCounter < 56)
1794:../drivers/fsl_flash.c ****             {
1795:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH1_REG >> (regionCounter - 48)
1796:../drivers/fsl_flash.c ****             }
1797:../drivers/fsl_flash.c ****             else if (regionCounter < 64)
1798:../drivers/fsl_flash.c ****             {
1799:../drivers/fsl_flash.c ****                 flashRegionProtectStatus[regionCounter] = (FTFx_FPROTH0_REG >> (regionCounter - 56)
1800:../drivers/fsl_flash.c ****             }
1801:../drivers/fsl_flash.c **** #endif
1802:../drivers/fsl_flash.c ****             else
1803:../drivers/fsl_flash.c ****             {
1804:../drivers/fsl_flash.c ****                 break;
1805:../drivers/fsl_flash.c ****             }
1806:../drivers/fsl_flash.c ****         }
1807:../drivers/fsl_flash.c **** 
1808:../drivers/fsl_flash.c ****         regionCounter++;
1809:../drivers/fsl_flash.c ****     }
1810:../drivers/fsl_flash.c **** 
1811:../drivers/fsl_flash.c ****     /* loop through the flash regions and check
1812:../drivers/fsl_flash.c ****      * desired flash address range for protection status
1813:../drivers/fsl_flash.c ****      * loop stops when it is detected that start has exceeded the endAddress */
1814:../drivers/fsl_flash.c ****     regionCounter = 0; /* make sure regionCounter is initialized to 0 first */
1815:../drivers/fsl_flash.c ****     regionCheckedCounter = 0;
1816:../drivers/fsl_flash.c ****     protectStatusCounter = 0; /* make sure protectStatusCounter is initialized to 0 first */
1817:../drivers/fsl_flash.c ****     while (start < endAddress)
1818:../drivers/fsl_flash.c ****     {
1819:../drivers/fsl_flash.c ****         /* check to see if the address falls within this protection region
1820:../drivers/fsl_flash.c ****          * Note that if the entire flash is to be checked, the last protection
1821:../drivers/fsl_flash.c ****          * region checked would consist of the last protection start address and
1822:../drivers/fsl_flash.c ****          * the start address following the end of flash */
1823:../drivers/fsl_flash.c ****         if ((start >= flashRegionAddress[regionCounter]) && (start < flashRegionAddress[regionCount
1824:../drivers/fsl_flash.c ****         {
1825:../drivers/fsl_flash.c ****             /* increment regionCheckedCounter to indicate this region was checked */
1826:../drivers/fsl_flash.c ****             regionCheckedCounter++;
1827:../drivers/fsl_flash.c **** 
1828:../drivers/fsl_flash.c ****             /* check the protection status of this region
1829:../drivers/fsl_flash.c ****              * Note: FPROT=1 means NOT protected, FPROT=0 means protected */
1830:../drivers/fsl_flash.c ****             if (!flashRegionProtectStatus[regionCounter])
1831:../drivers/fsl_flash.c ****             {
1832:../drivers/fsl_flash.c ****                 /* increment protectStatusCounter to indicate this region is protected */
1833:../drivers/fsl_flash.c ****                 protectStatusCounter++;
1834:../drivers/fsl_flash.c ****             }
1835:../drivers/fsl_flash.c ****             start += flashProtectionInfo.regionSize; /* increment to an address within the next reg
1836:../drivers/fsl_flash.c ****         }
1837:../drivers/fsl_flash.c ****         regionCounter++; /* increment regionCounter to check for the next flash protection region *
1838:../drivers/fsl_flash.c ****     }
1839:../drivers/fsl_flash.c **** 
1840:../drivers/fsl_flash.c ****     /* if protectStatusCounter == 0, then no region of the desired flash region is protected */
1841:../drivers/fsl_flash.c ****     if (protectStatusCounter == 0)
1842:../drivers/fsl_flash.c ****     {
1843:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateUnprotected;
1844:../drivers/fsl_flash.c ****     }
1845:../drivers/fsl_flash.c ****     /* if protectStatusCounter == regionCheckedCounter, then each region checked was protected */
1846:../drivers/fsl_flash.c ****     else if (protectStatusCounter == regionCheckedCounter)
1847:../drivers/fsl_flash.c ****     {
1848:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateProtected;
1849:../drivers/fsl_flash.c ****     }
1850:../drivers/fsl_flash.c ****     /* if protectStatusCounter != regionCheckedCounter, then protection status is mixed
1851:../drivers/fsl_flash.c ****      * In other words, some regions are protected while others are unprotected */
1852:../drivers/fsl_flash.c ****     else
1853:../drivers/fsl_flash.c ****     {
1854:../drivers/fsl_flash.c ****         *protection_state = kFLASH_ProtectionStateMixed;
1855:../drivers/fsl_flash.c ****     }
1856:../drivers/fsl_flash.c **** 
1857:../drivers/fsl_flash.c ****     return (returnCode);
1858:../drivers/fsl_flash.c **** }
1859:../drivers/fsl_flash.c **** 
1860:../drivers/fsl_flash.c **** status_t FLASH_IsExecuteOnly(flash_config_t *config,
1861:../drivers/fsl_flash.c ****                              uint32_t start,
1862:../drivers/fsl_flash.c ****                              uint32_t lengthInBytes,
1863:../drivers/fsl_flash.c ****                              flash_execute_only_access_state_t *access_state)
1864:../drivers/fsl_flash.c **** {
1865:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
1866:../drivers/fsl_flash.c ****     flash_access_config_t flashAccessInfo; /* flash Execute-Only information */
1867:../drivers/fsl_flash.c **** #endif                                     /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
1868:../drivers/fsl_flash.c ****     status_t returnCode;
1869:../drivers/fsl_flash.c **** 
1870:../drivers/fsl_flash.c ****     if (access_state == NULL)
1871:../drivers/fsl_flash.c ****     {
1872:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1873:../drivers/fsl_flash.c ****     }
1874:../drivers/fsl_flash.c **** 
1875:../drivers/fsl_flash.c ****     /* Check the supplied address range. */
1876:../drivers/fsl_flash.c ****     returnCode = flash_check_range(config, start, lengthInBytes, MAIN_FLASH_FEATURE_PFLASH_BLOCK_WR
1877:../drivers/fsl_flash.c ****     if (returnCode)
1878:../drivers/fsl_flash.c ****     {
1879:../drivers/fsl_flash.c ****         return returnCode;
1880:../drivers/fsl_flash.c ****     }
1881:../drivers/fsl_flash.c **** 
1882:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
1883:../drivers/fsl_flash.c ****     /* Get necessary flash Execute-Only information. */
1884:../drivers/fsl_flash.c ****     returnCode = flash_get_access_info(config, &flashAccessInfo);
1885:../drivers/fsl_flash.c ****     if (returnCode)
1886:../drivers/fsl_flash.c ****     {
1887:../drivers/fsl_flash.c ****         return returnCode;
1888:../drivers/fsl_flash.c ****     }
1889:../drivers/fsl_flash.c **** 
1890:../drivers/fsl_flash.c ****     {
1891:../drivers/fsl_flash.c ****         uint32_t executeOnlySegmentCounter = 0;
1892:../drivers/fsl_flash.c **** 
1893:../drivers/fsl_flash.c ****         /* calculating end address */
1894:../drivers/fsl_flash.c ****         uint32_t endAddress = start + lengthInBytes;
1895:../drivers/fsl_flash.c **** 
1896:../drivers/fsl_flash.c ****         /* Aligning start address and end address */
1897:../drivers/fsl_flash.c ****         uint32_t alignedStartAddress = ALIGN_DOWN(start, flashAccessInfo.SegmentSize);
1898:../drivers/fsl_flash.c ****         uint32_t alignedEndAddress = ALIGN_UP(endAddress, flashAccessInfo.SegmentSize);
1899:../drivers/fsl_flash.c **** 
1900:../drivers/fsl_flash.c ****         uint32_t segmentIndex = 0;
1901:../drivers/fsl_flash.c ****         uint32_t maxSupportedExecuteOnlySegmentCount =
1902:../drivers/fsl_flash.c ****             (alignedEndAddress - alignedStartAddress) / flashAccessInfo.SegmentSize;
1903:../drivers/fsl_flash.c **** 
1904:../drivers/fsl_flash.c ****         while (start < endAddress)
1905:../drivers/fsl_flash.c ****         {
1906:../drivers/fsl_flash.c ****             uint32_t xacc;
1907:../drivers/fsl_flash.c ****             bool isInvalidSegmentIndex = false;
1908:../drivers/fsl_flash.c **** 
1909:../drivers/fsl_flash.c ****             segmentIndex = (start - flashAccessInfo.SegmentBase) / flashAccessInfo.SegmentSize;
1910:../drivers/fsl_flash.c **** 
1911:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_ACCESS_REGISTER
1912:../drivers/fsl_flash.c ****             if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
1913:../drivers/fsl_flash.c ****             {
1914:../drivers/fsl_flash.c ****                 /* For secondary flash, The two XACCS registers allow up to 16 restricted segments 
1915:../drivers/fsl_flash.c ****                  */
1916:../drivers/fsl_flash.c ****                 if (segmentIndex < 8)
1917:../drivers/fsl_flash.c ****                 {
1918:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint8_t *)&FTFx_XACCSL_REG;
1919:../drivers/fsl_flash.c ****                 }
1920:../drivers/fsl_flash.c ****                 else if (segmentIndex < flashAccessInfo.SegmentCount)
1921:../drivers/fsl_flash.c ****                 {
1922:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint8_t *)&FTFx_XACCSH_REG;
1923:../drivers/fsl_flash.c ****                     segmentIndex -= 8;
1924:../drivers/fsl_flash.c ****                 }
1925:../drivers/fsl_flash.c ****                 else
1926:../drivers/fsl_flash.c ****                 {
1927:../drivers/fsl_flash.c ****                     isInvalidSegmentIndex = true;
1928:../drivers/fsl_flash.c ****                 }
1929:../drivers/fsl_flash.c ****             }
1930:../drivers/fsl_flash.c ****             else
1931:../drivers/fsl_flash.c **** #endif
1932:../drivers/fsl_flash.c ****             {
1933:../drivers/fsl_flash.c ****                 /* For primary flash, The eight XACC registers allow up to 64 restricted segments o
1934:../drivers/fsl_flash.c ****                  */
1935:../drivers/fsl_flash.c ****                 if (segmentIndex < 32)
1936:../drivers/fsl_flash.c ****                 {
1937:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint32_t *)&FTFx_XACCL3_REG;
1938:../drivers/fsl_flash.c ****                 }
1939:../drivers/fsl_flash.c ****                 else if (segmentIndex < flashAccessInfo.SegmentCount)
1940:../drivers/fsl_flash.c ****                 {
1941:../drivers/fsl_flash.c ****                     xacc = *(const volatile uint32_t *)&FTFx_XACCH3_REG;
1942:../drivers/fsl_flash.c ****                     segmentIndex -= 32;
1943:../drivers/fsl_flash.c ****                 }
1944:../drivers/fsl_flash.c ****                 else
1945:../drivers/fsl_flash.c ****                 {
1946:../drivers/fsl_flash.c ****                     isInvalidSegmentIndex = true;
1947:../drivers/fsl_flash.c ****                 }
1948:../drivers/fsl_flash.c ****             }
1949:../drivers/fsl_flash.c **** 
1950:../drivers/fsl_flash.c ****             if (isInvalidSegmentIndex)
1951:../drivers/fsl_flash.c ****             {
1952:../drivers/fsl_flash.c ****                 break;
1953:../drivers/fsl_flash.c ****             }
1954:../drivers/fsl_flash.c **** 
1955:../drivers/fsl_flash.c ****             /* Determine if this address range is in a execute-only protection flash segment. */
1956:../drivers/fsl_flash.c ****             if ((~xacc) & (1u << segmentIndex))
1957:../drivers/fsl_flash.c ****             {
1958:../drivers/fsl_flash.c ****                 executeOnlySegmentCounter++;
1959:../drivers/fsl_flash.c ****             }
1960:../drivers/fsl_flash.c **** 
1961:../drivers/fsl_flash.c ****             start += flashAccessInfo.SegmentSize;
1962:../drivers/fsl_flash.c ****         }
1963:../drivers/fsl_flash.c **** 
1964:../drivers/fsl_flash.c ****         if (executeOnlySegmentCounter < 1u)
1965:../drivers/fsl_flash.c ****         {
1966:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateUnLimited;
1967:../drivers/fsl_flash.c ****         }
1968:../drivers/fsl_flash.c ****         else if (executeOnlySegmentCounter < maxSupportedExecuteOnlySegmentCount)
1969:../drivers/fsl_flash.c ****         {
1970:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateMixed;
1971:../drivers/fsl_flash.c ****         }
1972:../drivers/fsl_flash.c ****         else
1973:../drivers/fsl_flash.c ****         {
1974:../drivers/fsl_flash.c ****             *access_state = kFLASH_AccessStateExecuteOnly;
1975:../drivers/fsl_flash.c ****         }
1976:../drivers/fsl_flash.c ****     }
1977:../drivers/fsl_flash.c **** #else
1978:../drivers/fsl_flash.c ****     *access_state = kFLASH_AccessStateUnLimited;
1979:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
1980:../drivers/fsl_flash.c **** 
1981:../drivers/fsl_flash.c ****     return (returnCode);
1982:../drivers/fsl_flash.c **** }
1983:../drivers/fsl_flash.c **** 
1984:../drivers/fsl_flash.c **** status_t FLASH_GetProperty(flash_config_t *config, flash_property_tag_t whichProperty, uint32_t *va
1985:../drivers/fsl_flash.c **** {
1986:../drivers/fsl_flash.c ****     if ((config == NULL) || (value == NULL))
1987:../drivers/fsl_flash.c ****     {
1988:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
1989:../drivers/fsl_flash.c ****     }
1990:../drivers/fsl_flash.c **** 
1991:../drivers/fsl_flash.c ****     switch (whichProperty)
1992:../drivers/fsl_flash.c ****     {
1993:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashSectorSize:
1994:../drivers/fsl_flash.c ****             *value = config->PFlashSectorSize;
1995:../drivers/fsl_flash.c ****             break;
1996:../drivers/fsl_flash.c **** 
1997:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashTotalSize:
1998:../drivers/fsl_flash.c ****             *value = config->PFlashTotalSize;
1999:../drivers/fsl_flash.c ****             break;
2000:../drivers/fsl_flash.c **** 
2001:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockSize:
2002:../drivers/fsl_flash.c ****             *value = config->PFlashTotalSize / (uint32_t)config->PFlashBlockCount;
2003:../drivers/fsl_flash.c ****             break;
2004:../drivers/fsl_flash.c **** 
2005:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockCount:
2006:../drivers/fsl_flash.c ****             *value = (uint32_t)config->PFlashBlockCount;
2007:../drivers/fsl_flash.c ****             break;
2008:../drivers/fsl_flash.c **** 
2009:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockBaseAddr:
2010:../drivers/fsl_flash.c ****             *value = config->PFlashBlockBase;
2011:../drivers/fsl_flash.c ****             break;
2012:../drivers/fsl_flash.c **** 
2013:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashFacSupport:
2014:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL)
2015:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL;
2016:../drivers/fsl_flash.c **** #else
2017:../drivers/fsl_flash.c ****             *value = 0;
2018:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
2019:../drivers/fsl_flash.c ****             break;
2020:../drivers/fsl_flash.c **** 
2021:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentSize:
2022:../drivers/fsl_flash.c ****             *value = config->PFlashAccessSegmentSize;
2023:../drivers/fsl_flash.c ****             break;
2024:../drivers/fsl_flash.c **** 
2025:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentCount:
2026:../drivers/fsl_flash.c ****             *value = config->PFlashAccessSegmentCount;
2027:../drivers/fsl_flash.c ****             break;
2028:../drivers/fsl_flash.c **** 
2029:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamBlockBaseAddr:
2030:../drivers/fsl_flash.c ****             *value = config->FlexRAMBlockBase;
2031:../drivers/fsl_flash.c ****             break;
2032:../drivers/fsl_flash.c **** 
2033:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamTotalSize:
2034:../drivers/fsl_flash.c ****             *value = config->FlexRAMTotalSize;
2035:../drivers/fsl_flash.c ****             break;
2036:../drivers/fsl_flash.c **** 
2037:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2038:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashSectorSize:
2039:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SECTOR_SIZE;
2040:../drivers/fsl_flash.c ****             break;
2041:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashTotalSize:
2042:../drivers/fsl_flash.c ****             *value = config->DFlashTotalSize;
2043:../drivers/fsl_flash.c ****             break;
2044:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockSize:
2045:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SIZE;
2046:../drivers/fsl_flash.c ****             break;
2047:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockCount:
2048:../drivers/fsl_flash.c ****             *value = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_COUNT;
2049:../drivers/fsl_flash.c ****             break;
2050:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockBaseAddr:
2051:../drivers/fsl_flash.c ****             *value = config->DFlashBlockBase;
2052:../drivers/fsl_flash.c ****             break;
2053:../drivers/fsl_flash.c ****         case kFLASH_PropertyEepromTotalSize:
2054:../drivers/fsl_flash.c ****             *value = config->EEpromTotalSize;
2055:../drivers/fsl_flash.c ****             break;
2056:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2057:../drivers/fsl_flash.c **** 
2058:../drivers/fsl_flash.c ****         default: /* catch inputs that are not recognized */
2059:../drivers/fsl_flash.c ****             return kStatus_FLASH_UnknownProperty;
2060:../drivers/fsl_flash.c ****     }
2061:../drivers/fsl_flash.c **** 
2062:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2063:../drivers/fsl_flash.c **** }
2064:../drivers/fsl_flash.c **** 
2065:../drivers/fsl_flash.c **** status_t FLASH_SetProperty(flash_config_t *config, flash_property_tag_t whichProperty, uint32_t val
2066:../drivers/fsl_flash.c **** {
2067:../drivers/fsl_flash.c ****     status_t status = kStatus_FLASH_Success;
2068:../drivers/fsl_flash.c **** 
2069:../drivers/fsl_flash.c ****     if (config == NULL)
2070:../drivers/fsl_flash.c ****     {
2071:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2072:../drivers/fsl_flash.c ****     }
2073:../drivers/fsl_flash.c **** 
2074:../drivers/fsl_flash.c ****     switch (whichProperty)
2075:../drivers/fsl_flash.c ****     {
2076:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2077:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlashMemoryIndex:
2078:../drivers/fsl_flash.c ****             if ((value != (uint32_t)kFLASH_MemoryIndexPrimaryFlash) &&
2079:../drivers/fsl_flash.c ****                 (value != (uint32_t)kFLASH_MemoryIndexSecondaryFlash))
2080:../drivers/fsl_flash.c ****             {
2081:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidPropertyValue;
2082:../drivers/fsl_flash.c ****             }
2083:../drivers/fsl_flash.c ****             config->FlashMemoryIndex = (uint8_t)value;
2084:../drivers/fsl_flash.c ****             break;
2085:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
2086:../drivers/fsl_flash.c **** 
2087:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashSectorSize:
2088:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashTotalSize:
2089:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockSize:
2090:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockCount:
2091:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashBlockBaseAddr:
2092:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashFacSupport:
2093:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentSize:
2094:../drivers/fsl_flash.c ****         case kFLASH_PropertyPflashAccessSegmentCount:
2095:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamBlockBaseAddr:
2096:../drivers/fsl_flash.c ****         case kFLASH_PropertyFlexRamTotalSize:
2097:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2098:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashSectorSize:
2099:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashTotalSize:
2100:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockSize:
2101:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockCount:
2102:../drivers/fsl_flash.c ****         case kFLASH_PropertyDflashBlockBaseAddr:
2103:../drivers/fsl_flash.c ****         case kFLASH_PropertyEepromTotalSize:
2104:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2105:../drivers/fsl_flash.c ****             status = kStatus_FLASH_ReadOnlyProperty;
2106:../drivers/fsl_flash.c ****             break;
2107:../drivers/fsl_flash.c ****         default: /* catch inputs that are not recognized */
2108:../drivers/fsl_flash.c ****             status = kStatus_FLASH_UnknownProperty;
2109:../drivers/fsl_flash.c ****             break;
2110:../drivers/fsl_flash.c ****     }
2111:../drivers/fsl_flash.c **** 
2112:../drivers/fsl_flash.c ****     return status;
2113:../drivers/fsl_flash.c **** }
2114:../drivers/fsl_flash.c **** 
2115:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
2116:../drivers/fsl_flash.c **** status_t FLASH_SetFlexramFunction(flash_config_t *config, flash_flexram_function_option_t option)
2117:../drivers/fsl_flash.c **** {
2118:../drivers/fsl_flash.c ****     status_t status;
2119:../drivers/fsl_flash.c **** 
2120:../drivers/fsl_flash.c ****     if (config == NULL)
2121:../drivers/fsl_flash.c ****     {
2122:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2123:../drivers/fsl_flash.c ****     }
2124:../drivers/fsl_flash.c **** 
2125:../drivers/fsl_flash.c ****     status = flasn_check_flexram_function_option_range(option);
2126:../drivers/fsl_flash.c ****     if (status != kStatus_FLASH_Success)
2127:../drivers/fsl_flash.c ****     {
2128:../drivers/fsl_flash.c ****         return status;
2129:../drivers/fsl_flash.c ****     }
2130:../drivers/fsl_flash.c **** 
2131:../drivers/fsl_flash.c ****     /* preparing passing parameter to verify all block command */
2132:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_1_2(FTFx_SET_FLEXRAM_FUNCTION, option, 0xFFFFU);
2133:../drivers/fsl_flash.c **** 
2134:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
2135:../drivers/fsl_flash.c ****     return flash_command_sequence(config);
2136:../drivers/fsl_flash.c **** }
2137:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
2138:../drivers/fsl_flash.c **** 
2139:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
2140:../drivers/fsl_flash.c **** status_t FLASH_SwapControl(flash_config_t *config,
2141:../drivers/fsl_flash.c ****                            uint32_t address,
2142:../drivers/fsl_flash.c ****                            flash_swap_control_option_t option,
2143:../drivers/fsl_flash.c ****                            flash_swap_state_config_t *returnInfo)
2144:../drivers/fsl_flash.c **** {
2145:../drivers/fsl_flash.c ****     status_t returnCode;
2146:../drivers/fsl_flash.c **** 
2147:../drivers/fsl_flash.c ****     if ((config == NULL) || (returnInfo == NULL))
2148:../drivers/fsl_flash.c ****     {
2149:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2150:../drivers/fsl_flash.c ****     }
2151:../drivers/fsl_flash.c **** 
2152:../drivers/fsl_flash.c ****     if (address & (FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT - 1))
2153:../drivers/fsl_flash.c ****     {
2154:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
2155:../drivers/fsl_flash.c ****     }
2156:../drivers/fsl_flash.c **** 
2157:../drivers/fsl_flash.c ****     /* Make sure address provided is in the lower half of Program flash but not in the Flash Config
2158:../drivers/fsl_flash.c ****     if ((address >= (config->PFlashTotalSize / 2)) ||
2159:../drivers/fsl_flash.c ****         ((address >= kFLASH_ConfigAreaStart) && (address <= kFLASH_ConfigAreaEnd)))
2160:../drivers/fsl_flash.c ****     {
2161:../drivers/fsl_flash.c ****         return kStatus_FLASH_SwapIndicatorAddressError;
2162:../drivers/fsl_flash.c ****     }
2163:../drivers/fsl_flash.c **** 
2164:../drivers/fsl_flash.c ****     /* Check the option. */
2165:../drivers/fsl_flash.c ****     returnCode = flash_check_swap_control_option(option);
2166:../drivers/fsl_flash.c ****     if (returnCode)
2167:../drivers/fsl_flash.c ****     {
2168:../drivers/fsl_flash.c ****         return returnCode;
2169:../drivers/fsl_flash.c ****     }
2170:../drivers/fsl_flash.c **** 
2171:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_SWAP_CONTROL, address);
2172:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
2173:../drivers/fsl_flash.c **** 
2174:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
2175:../drivers/fsl_flash.c **** 
2176:../drivers/fsl_flash.c ****     returnInfo->flashSwapState = (flash_swap_state_t)FTFx_FCCOB5_REG;
2177:../drivers/fsl_flash.c ****     returnInfo->currentSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB6_REG;
2178:../drivers/fsl_flash.c ****     returnInfo->nextSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB7_REG;
2179:../drivers/fsl_flash.c **** 
2180:../drivers/fsl_flash.c ****     return returnCode;
2181:../drivers/fsl_flash.c **** }
2182:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
2183:../drivers/fsl_flash.c **** 
2184:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
2185:../drivers/fsl_flash.c **** status_t FLASH_Swap(flash_config_t *config, uint32_t address, flash_swap_function_option_t option)
2186:../drivers/fsl_flash.c **** {
2187:../drivers/fsl_flash.c ****     flash_swap_state_config_t returnInfo;
2188:../drivers/fsl_flash.c ****     status_t returnCode;
2189:../drivers/fsl_flash.c **** 
2190:../drivers/fsl_flash.c ****     memset(&returnInfo, 0xFFU, sizeof(returnInfo));
2191:../drivers/fsl_flash.c **** 
2192:../drivers/fsl_flash.c ****     do
2193:../drivers/fsl_flash.c ****     {
2194:../drivers/fsl_flash.c ****         returnCode = FLASH_SwapControl(config, address, kFLASH_SwapControlOptionReportStatus, &retu
2195:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
2196:../drivers/fsl_flash.c ****         {
2197:../drivers/fsl_flash.c ****             return returnCode;
2198:../drivers/fsl_flash.c ****         }
2199:../drivers/fsl_flash.c **** 
2200:../drivers/fsl_flash.c ****         if (kFLASH_SwapFunctionOptionDisable == option)
2201:../drivers/fsl_flash.c ****         {
2202:../drivers/fsl_flash.c ****             if (returnInfo.flashSwapState == kFLASH_SwapStateDisabled)
2203:../drivers/fsl_flash.c ****             {
2204:../drivers/fsl_flash.c ****                 return kStatus_FLASH_Success;
2205:../drivers/fsl_flash.c ****             }
2206:../drivers/fsl_flash.c ****             else if (returnInfo.flashSwapState == kFLASH_SwapStateUninitialized)
2207:../drivers/fsl_flash.c ****             {
2208:../drivers/fsl_flash.c ****                 /* The swap system changed to the DISABLED state with Program flash block 0
2209:../drivers/fsl_flash.c ****                  * located at relative flash address 0x0_0000 */
2210:../drivers/fsl_flash.c ****                 returnCode = FLASH_SwapControl(config, address, kFLASH_SwapControlOptionDisableSyst
2211:../drivers/fsl_flash.c ****             }
2212:../drivers/fsl_flash.c ****             else
2213:../drivers/fsl_flash.c ****             {
2214:../drivers/fsl_flash.c ****                 /* Swap disable should be requested only when swap system is in the uninitialized s
2215:../drivers/fsl_flash.c ****                 return kStatus_FLASH_SwapSystemNotInUninitialized;
2216:../drivers/fsl_flash.c ****             }
2217:../drivers/fsl_flash.c ****         }
2218:../drivers/fsl_flash.c ****         else
2219:../drivers/fsl_flash.c ****         {
2220:../drivers/fsl_flash.c ****             /* When first swap: the initial swap state is Uninitialized, flash swap inidicator addr
2221:../drivers/fsl_flash.c ****              *    the swap procedure should be Uninitialized -> Update-Erased -> Complete.
2222:../drivers/fsl_flash.c ****              * After the first swap has been completed, the flash swap inidicator address cannot be
2223:../drivers/fsl_flash.c ****              *    unless EraseAllBlocks command is issued, the swap procedure is changed to Update 
2224:../drivers/fsl_flash.c ****              *    Complete. */
2225:../drivers/fsl_flash.c ****             switch (returnInfo.flashSwapState)
2226:../drivers/fsl_flash.c ****             {
2227:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUninitialized:
2228:../drivers/fsl_flash.c ****                     /* If current swap mode is Uninitialized, Initialize Swap to Initialized/READY 
2229:../drivers/fsl_flash.c ****                     returnCode =
2230:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionIntializeSystem,
2231:../drivers/fsl_flash.c ****                     break;
2232:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateReady:
2233:../drivers/fsl_flash.c ****                     /* Validate whether the address provided to the swap system is matched to
2234:../drivers/fsl_flash.c ****                      * swap indicator address in the IFR */
2235:../drivers/fsl_flash.c ****                     returnCode = flash_validate_swap_indicator_address(config, address);
2236:../drivers/fsl_flash.c ****                     if (returnCode == kStatus_FLASH_Success)
2237:../drivers/fsl_flash.c ****                     {
2238:../drivers/fsl_flash.c ****                         /* If current swap mode is Initialized/Ready, Initialize Swap to UPDATE sta
2239:../drivers/fsl_flash.c ****                         returnCode =
2240:../drivers/fsl_flash.c ****                             FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInUpdateS
2241:../drivers/fsl_flash.c ****                     }
2242:../drivers/fsl_flash.c ****                     break;
2243:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUpdate:
2244:../drivers/fsl_flash.c ****                     /* If current swap mode is Update, Erase indicator sector in non active block
2245:../drivers/fsl_flash.c ****                      * to proceed swap system to update-erased state */
2246:../drivers/fsl_flash.c ****                     returnCode = FLASH_Erase(config, address + (config->PFlashTotalSize >> 1),
2247:../drivers/fsl_flash.c ****                                              FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT, 
2248:../drivers/fsl_flash.c ****                     break;
2249:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateUpdateErased:
2250:../drivers/fsl_flash.c ****                     /* If current swap mode is Update or Update-Erased, progress Swap to COMPLETE S
2251:../drivers/fsl_flash.c ****                     returnCode =
2252:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInCompleteSta
2253:../drivers/fsl_flash.c ****                     break;
2254:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateComplete:
2255:../drivers/fsl_flash.c ****                     break;
2256:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateDisabled:
2257:../drivers/fsl_flash.c ****                     /* When swap system is in disabled state, We need to clear swap system back to 
2258:../drivers/fsl_flash.c ****                      * by issuing EraseAllBlocks command */
2259:../drivers/fsl_flash.c ****                     returnCode = kStatus_FLASH_SwapSystemNotInUninitialized;
2260:../drivers/fsl_flash.c ****                     break;
2261:../drivers/fsl_flash.c ****                 default:
2262:../drivers/fsl_flash.c ****                     returnCode = kStatus_FLASH_InvalidArgument;
2263:../drivers/fsl_flash.c ****                     break;
2264:../drivers/fsl_flash.c ****             }
2265:../drivers/fsl_flash.c ****         }
2266:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
2267:../drivers/fsl_flash.c ****         {
2268:../drivers/fsl_flash.c ****             break;
2269:../drivers/fsl_flash.c ****         }
2270:../drivers/fsl_flash.c ****     } while (!((kFLASH_SwapStateComplete == returnInfo.flashSwapState) && (kFLASH_SwapFunctionOptio
2271:../drivers/fsl_flash.c **** 
2272:../drivers/fsl_flash.c ****     return returnCode;
2273:../drivers/fsl_flash.c **** }
2274:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
2275:../drivers/fsl_flash.c **** 
2276:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION_CMD) && FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION
2277:../drivers/fsl_flash.c **** status_t FLASH_ProgramPartition(flash_config_t *config,
2278:../drivers/fsl_flash.c ****                                 flash_partition_flexram_load_option_t option,
2279:../drivers/fsl_flash.c ****                                 uint32_t eepromDataSizeCode,
2280:../drivers/fsl_flash.c ****                                 uint32_t flexnvmPartitionCode)
2281:../drivers/fsl_flash.c **** {
2282:../drivers/fsl_flash.c ****     status_t returnCode;
2283:../drivers/fsl_flash.c **** 
2284:../drivers/fsl_flash.c ****     if (config == NULL)
2285:../drivers/fsl_flash.c ****     {
2286:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2287:../drivers/fsl_flash.c ****     }
2288:../drivers/fsl_flash.c **** 
2289:../drivers/fsl_flash.c ****     /* eepromDataSizeCode[7:6], flexnvmPartitionCode[7:4] should be all 1'b0
2290:../drivers/fsl_flash.c ****      *  or it will cause access error. */
2291:../drivers/fsl_flash.c ****     /* eepromDataSizeCode &= 0x3FU;  */
2292:../drivers/fsl_flash.c ****     /* flexnvmPartitionCode &= 0x0FU; */
2293:../drivers/fsl_flash.c **** 
2294:../drivers/fsl_flash.c ****     /* preparing passing parameter to program the flash block */
2295:../drivers/fsl_flash.c ****     kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_2_1(FTFx_PROGRAM_PARTITION, 0xFFFFU, option);
2296:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_2(eepromDataSizeCode, flexnvmPartitionCode, 0xFFFFU);
2297:../drivers/fsl_flash.c **** 
2298:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPre);
2299:../drivers/fsl_flash.c **** 
2300:../drivers/fsl_flash.c ****     /* calling flash command sequence function to execute the command */
2301:../drivers/fsl_flash.c ****     returnCode = flash_command_sequence(config);
2302:../drivers/fsl_flash.c **** 
2303:../drivers/fsl_flash.c ****     flash_cache_clear(config);
2304:../drivers/fsl_flash.c **** 
2305:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2306:../drivers/fsl_flash.c ****     /* Data flash IFR will be updated by program partition command during reset sequence,
2307:../drivers/fsl_flash.c ****      * so we just set reserved values for partitioned FlexNVM size here */
2308:../drivers/fsl_flash.c ****     config->EEpromTotalSize = FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED;
2309:../drivers/fsl_flash.c ****     config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
2310:../drivers/fsl_flash.c **** #endif
2311:../drivers/fsl_flash.c **** 
2312:../drivers/fsl_flash.c ****     return (returnCode);
2313:../drivers/fsl_flash.c **** }
2314:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_PARTITION_CMD */
2315:../drivers/fsl_flash.c **** 
2316:../drivers/fsl_flash.c **** status_t FLASH_PflashSetProtection(flash_config_t *config, pflash_protection_status_t *protectStatu
2317:../drivers/fsl_flash.c **** {
2318:../drivers/fsl_flash.c ****     if (config == NULL)
2319:../drivers/fsl_flash.c ****     {
2320:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2321:../drivers/fsl_flash.c ****     }
2322:../drivers/fsl_flash.c **** 
2323:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
2324:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
2325:../drivers/fsl_flash.c ****     {
2326:../drivers/fsl_flash.c ****         *kFPROTSL = protectStatus->valueLow32b.prots16b.protsl;
2327:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.prots16b.protsl != *kFPROTSL)
2328:../drivers/fsl_flash.c ****         {
2329:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2330:../drivers/fsl_flash.c ****         }
2331:../drivers/fsl_flash.c **** 
2332:../drivers/fsl_flash.c ****         *kFPROTSH = protectStatus->valueLow32b.prots16b.protsh;
2333:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.prots16b.protsh != *kFPROTSH)
2334:../drivers/fsl_flash.c ****         {
2335:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2336:../drivers/fsl_flash.c ****         }
2337:../drivers/fsl_flash.c ****     }
2338:../drivers/fsl_flash.c ****     else
2339:../drivers/fsl_flash.c **** #endif
2340:../drivers/fsl_flash.c ****     {
2341:../drivers/fsl_flash.c ****         *kFPROTL = protectStatus->valueLow32b.protl32b;
2342:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.protl32b != *kFPROTL)
2343:../drivers/fsl_flash.c ****         {
2344:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2345:../drivers/fsl_flash.c ****         }
2346:../drivers/fsl_flash.c **** 
2347:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
2348:../drivers/fsl_flash.c ****         *kFPROTH = protectStatus->valueHigh32b.proth32b;
2349:../drivers/fsl_flash.c ****         if (protectStatus->valueHigh32b.proth32b != *kFPROTH)
2350:../drivers/fsl_flash.c ****         {
2351:../drivers/fsl_flash.c ****             return kStatus_FLASH_CommandFailure;
2352:../drivers/fsl_flash.c ****         }
2353:../drivers/fsl_flash.c **** #endif
2354:../drivers/fsl_flash.c ****     }
2355:../drivers/fsl_flash.c **** 
2356:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2357:../drivers/fsl_flash.c **** }
2358:../drivers/fsl_flash.c **** 
2359:../drivers/fsl_flash.c **** status_t FLASH_PflashGetProtection(flash_config_t *config, pflash_protection_status_t *protectStatu
2360:../drivers/fsl_flash.c **** {
2361:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2362:../drivers/fsl_flash.c ****     {
2363:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2364:../drivers/fsl_flash.c ****     }
2365:../drivers/fsl_flash.c **** 
2366:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
2367:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
2368:../drivers/fsl_flash.c ****     {
2369:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.prots16b.protsl = *kFPROTSL;
2370:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.prots16b.protsh = *kFPROTSH;
2371:../drivers/fsl_flash.c ****     }
2372:../drivers/fsl_flash.c ****     else
2373:../drivers/fsl_flash.c **** #endif
2374:../drivers/fsl_flash.c ****     {
2375:../drivers/fsl_flash.c ****         protectStatus->valueLow32b.protl32b = *kFPROTL;
2376:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
2377:../drivers/fsl_flash.c ****         protectStatus->valueHigh32b.proth32b = *kFPROTH;
2378:../drivers/fsl_flash.c **** #endif
2379:../drivers/fsl_flash.c ****     }
2380:../drivers/fsl_flash.c **** 
2381:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2382:../drivers/fsl_flash.c **** }
2383:../drivers/fsl_flash.c **** 
2384:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2385:../drivers/fsl_flash.c **** status_t FLASH_DflashSetProtection(flash_config_t *config, uint8_t protectStatus)
2386:../drivers/fsl_flash.c **** {
2387:../drivers/fsl_flash.c ****     if (config == NULL)
2388:../drivers/fsl_flash.c ****     {
2389:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2390:../drivers/fsl_flash.c ****     }
2391:../drivers/fsl_flash.c **** 
2392:../drivers/fsl_flash.c ****     if ((config->DFlashTotalSize == 0) || (config->DFlashTotalSize == FLEX_NVM_DFLASH_SIZE_FOR_DEPA
2393:../drivers/fsl_flash.c ****     {
2394:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2395:../drivers/fsl_flash.c ****     }
2396:../drivers/fsl_flash.c **** 
2397:../drivers/fsl_flash.c ****     FTFx->FDPROT = protectStatus;
2398:../drivers/fsl_flash.c **** 
2399:../drivers/fsl_flash.c ****     if (FTFx->FDPROT != protectStatus)
2400:../drivers/fsl_flash.c ****     {
2401:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2402:../drivers/fsl_flash.c ****     }
2403:../drivers/fsl_flash.c **** 
2404:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2405:../drivers/fsl_flash.c **** }
2406:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2407:../drivers/fsl_flash.c **** 
2408:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2409:../drivers/fsl_flash.c **** status_t FLASH_DflashGetProtection(flash_config_t *config, uint8_t *protectStatus)
2410:../drivers/fsl_flash.c **** {
2411:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2412:../drivers/fsl_flash.c ****     {
2413:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2414:../drivers/fsl_flash.c ****     }
2415:../drivers/fsl_flash.c **** 
2416:../drivers/fsl_flash.c ****     if ((config->DFlashTotalSize == 0) || (config->DFlashTotalSize == FLEX_NVM_DFLASH_SIZE_FOR_DEPA
2417:../drivers/fsl_flash.c ****     {
2418:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2419:../drivers/fsl_flash.c ****     }
2420:../drivers/fsl_flash.c **** 
2421:../drivers/fsl_flash.c ****     *protectStatus = FTFx->FDPROT;
2422:../drivers/fsl_flash.c **** 
2423:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2424:../drivers/fsl_flash.c **** }
2425:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2426:../drivers/fsl_flash.c **** 
2427:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2428:../drivers/fsl_flash.c **** status_t FLASH_EepromSetProtection(flash_config_t *config, uint8_t protectStatus)
2429:../drivers/fsl_flash.c **** {
2430:../drivers/fsl_flash.c ****     if (config == NULL)
2431:../drivers/fsl_flash.c ****     {
2432:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2433:../drivers/fsl_flash.c ****     }
2434:../drivers/fsl_flash.c **** 
2435:../drivers/fsl_flash.c ****     if ((config->EEpromTotalSize == 0) || (config->EEpromTotalSize == FLEX_NVM_EEPROM_SIZE_FOR_EEES
2436:../drivers/fsl_flash.c ****     {
2437:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2438:../drivers/fsl_flash.c ****     }
2439:../drivers/fsl_flash.c **** 
2440:../drivers/fsl_flash.c ****     FTFx->FEPROT = protectStatus;
2441:../drivers/fsl_flash.c **** 
2442:../drivers/fsl_flash.c ****     if (FTFx->FEPROT != protectStatus)
2443:../drivers/fsl_flash.c ****     {
2444:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2445:../drivers/fsl_flash.c ****     }
2446:../drivers/fsl_flash.c **** 
2447:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2448:../drivers/fsl_flash.c **** }
2449:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2450:../drivers/fsl_flash.c **** 
2451:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
2452:../drivers/fsl_flash.c **** status_t FLASH_EepromGetProtection(flash_config_t *config, uint8_t *protectStatus)
2453:../drivers/fsl_flash.c **** {
2454:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
2455:../drivers/fsl_flash.c ****     {
2456:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2457:../drivers/fsl_flash.c ****     }
2458:../drivers/fsl_flash.c **** 
2459:../drivers/fsl_flash.c ****     if ((config->EEpromTotalSize == 0) || (config->EEpromTotalSize == FLEX_NVM_EEPROM_SIZE_FOR_EEES
2460:../drivers/fsl_flash.c ****     {
2461:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandNotSupported;
2462:../drivers/fsl_flash.c ****     }
2463:../drivers/fsl_flash.c **** 
2464:../drivers/fsl_flash.c ****     *protectStatus = FTFx->FEPROT;
2465:../drivers/fsl_flash.c **** 
2466:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2467:../drivers/fsl_flash.c **** }
2468:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
2469:../drivers/fsl_flash.c **** 
2470:../drivers/fsl_flash.c **** status_t FLASH_PflashSetPrefetchSpeculation(flash_prefetch_speculation_status_t *speculationStatus)
2471:../drivers/fsl_flash.c **** {
2472:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
2473:../drivers/fsl_flash.c ****     {
2474:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2475:../drivers/fsl_flash.c **** #if defined(MCM)
2476:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MCM->PLACR;
2477:../drivers/fsl_flash.c **** #elif defined(MCM0)
2478:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MCM0->PLACR;
2479:../drivers/fsl_flash.c **** #endif
2480:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionDisable)
2481:../drivers/fsl_flash.c ****         {
2482:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2483:../drivers/fsl_flash.c ****             {
2484:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidSpeculationOption;
2485:../drivers/fsl_flash.c ****             }
2486:../drivers/fsl_flash.c ****             else
2487:../drivers/fsl_flash.c ****             {
2488:../drivers/fsl_flash.c ****                 *regBase |= MCM_PLACR_DFCS_MASK;
2489:../drivers/fsl_flash.c ****             }
2490:../drivers/fsl_flash.c ****         }
2491:../drivers/fsl_flash.c ****         else
2492:../drivers/fsl_flash.c ****         {
2493:../drivers/fsl_flash.c ****             *regBase &= ~MCM_PLACR_DFCS_MASK;
2494:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2495:../drivers/fsl_flash.c ****             {
2496:../drivers/fsl_flash.c ****                 *regBase |= MCM_PLACR_EFDS_MASK;
2497:../drivers/fsl_flash.c ****             }
2498:../drivers/fsl_flash.c ****             else
2499:../drivers/fsl_flash.c ****             {
2500:../drivers/fsl_flash.c ****                 *regBase &= ~MCM_PLACR_EFDS_MASK;
2501:../drivers/fsl_flash.c ****             }
2502:../drivers/fsl_flash.c ****         }
2503:../drivers/fsl_flash.c ****     }
2504:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2505:../drivers/fsl_flash.c ****     {
2506:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2507:../drivers/fsl_flash.c ****         uint32_t b0dpeMask, b0ipeMask;
2508:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_B0DPE_MASK)
2509:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2510:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB01CR_B0DPE_MASK;
2511:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB01CR_B0IPE_MASK;
2512:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_B0DPE_MASK)
2513:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2514:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
2515:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB0CR_B0IPE_MASK;
2516:../drivers/fsl_flash.c **** #endif
2517:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionEnable)
2518:../drivers/fsl_flash.c ****         {
2519:../drivers/fsl_flash.c ****             *regBase |= b0ipeMask;
2520:../drivers/fsl_flash.c ****         }
2521:../drivers/fsl_flash.c ****         else
2522:../drivers/fsl_flash.c ****         {
2523:../drivers/fsl_flash.c ****             *regBase &= ~b0ipeMask;
2524:../drivers/fsl_flash.c ****         }
2525:../drivers/fsl_flash.c ****         if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2526:../drivers/fsl_flash.c ****         {
2527:../drivers/fsl_flash.c ****             *regBase |= b0dpeMask;
2528:../drivers/fsl_flash.c ****         }
2529:../drivers/fsl_flash.c ****         else
2530:../drivers/fsl_flash.c ****         {
2531:../drivers/fsl_flash.c ****             *regBase &= ~b0dpeMask;
2532:../drivers/fsl_flash.c ****         }
2533:../drivers/fsl_flash.c **** 
2534:../drivers/fsl_flash.c **** /* Invalidate Prefetch Speculation Buffer */
2535:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2536:../drivers/fsl_flash.c ****         FMC->PFB01CR |= FMC_PFB01CR_S_INV_MASK;
2537:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2538:../drivers/fsl_flash.c ****         FMC->PFB01CR |= FMC_PFB01CR_S_B_INV_MASK;
2539:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2540:../drivers/fsl_flash.c ****         FMC->PFB0CR |= FMC_PFB0CR_S_INV_MASK;
2541:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2542:../drivers/fsl_flash.c ****         FMC->PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
2543:../drivers/fsl_flash.c **** #endif
2544:../drivers/fsl_flash.c ****     }
2545:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2546:../drivers/fsl_flash.c ****     {
2547:../drivers/fsl_flash.c ****         FTFx_REG32_ACCESS_TYPE regBase;
2548:../drivers/fsl_flash.c ****         uint32_t flashSpeculationMask, dataPrefetchMask;
2549:../drivers/fsl_flash.c ****         regBase = (FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR0_REG;
2550:../drivers/fsl_flash.c ****         flashSpeculationMask = MSCM_OCMDR_OCMC1_DFCS_MASK;
2551:../drivers/fsl_flash.c ****         dataPrefetchMask = MSCM_OCMDR_OCMC1_DFDS_MASK;
2552:../drivers/fsl_flash.c **** 
2553:../drivers/fsl_flash.c ****         if (speculationStatus->instructionOption == kFLASH_prefetchSpeculationOptionDisable)
2554:../drivers/fsl_flash.c ****         {
2555:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2556:../drivers/fsl_flash.c ****             {
2557:../drivers/fsl_flash.c ****                 return kStatus_FLASH_InvalidSpeculationOption;
2558:../drivers/fsl_flash.c ****             }
2559:../drivers/fsl_flash.c ****             else
2560:../drivers/fsl_flash.c ****             {
2561:../drivers/fsl_flash.c ****                 *regBase |= flashSpeculationMask;
2562:../drivers/fsl_flash.c ****             }
2563:../drivers/fsl_flash.c ****         }
2564:../drivers/fsl_flash.c ****         else
2565:../drivers/fsl_flash.c ****         {
2566:../drivers/fsl_flash.c ****             *regBase &= ~flashSpeculationMask;
2567:../drivers/fsl_flash.c ****             if (speculationStatus->dataOption == kFLASH_prefetchSpeculationOptionEnable)
2568:../drivers/fsl_flash.c ****             {
2569:../drivers/fsl_flash.c ****                 *regBase &= ~dataPrefetchMask;
2570:../drivers/fsl_flash.c ****             }
2571:../drivers/fsl_flash.c ****             else
2572:../drivers/fsl_flash.c ****             {
2573:../drivers/fsl_flash.c ****                 *regBase |= dataPrefetchMask;
2574:../drivers/fsl_flash.c ****             }
2575:../drivers/fsl_flash.c ****         }
2576:../drivers/fsl_flash.c ****     }
2577:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FTFx_MCM_FLASH_CACHE_CONTROLS */
2578:../drivers/fsl_flash.c **** 
2579:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2580:../drivers/fsl_flash.c **** }
2581:../drivers/fsl_flash.c **** 
2582:../drivers/fsl_flash.c **** status_t FLASH_PflashGetPrefetchSpeculation(flash_prefetch_speculation_status_t *speculationStatus)
2583:../drivers/fsl_flash.c **** {
2584:../drivers/fsl_flash.c ****     memset(speculationStatus, 0, sizeof(flash_prefetch_speculation_status_t));
2585:../drivers/fsl_flash.c **** 
2586:../drivers/fsl_flash.c ****     /* Assuming that all speculation options are enabled. */
2587:../drivers/fsl_flash.c ****     speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionEnable;
2588:../drivers/fsl_flash.c ****     speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionEnable;
2589:../drivers/fsl_flash.c **** 
2590:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
2591:../drivers/fsl_flash.c ****     {
2592:../drivers/fsl_flash.c ****         uint32_t value;
2593:../drivers/fsl_flash.c **** #if defined(MCM)
2594:../drivers/fsl_flash.c ****         value = MCM->PLACR;
2595:../drivers/fsl_flash.c **** #elif defined(MCM0)
2596:../drivers/fsl_flash.c ****         value = MCM0->PLACR;
2597:../drivers/fsl_flash.c **** #endif
2598:../drivers/fsl_flash.c ****         if (value & MCM_PLACR_DFCS_MASK)
2599:../drivers/fsl_flash.c ****         {
2600:../drivers/fsl_flash.c ****             /* Speculation buffer is off. */
2601:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2602:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2603:../drivers/fsl_flash.c ****         }
2604:../drivers/fsl_flash.c ****         else
2605:../drivers/fsl_flash.c ****         {
2606:../drivers/fsl_flash.c ****             /* Speculation buffer is on for instruction. */
2607:../drivers/fsl_flash.c ****             if (!(value & MCM_PLACR_EFDS_MASK))
2608:../drivers/fsl_flash.c ****             {
2609:../drivers/fsl_flash.c ****                 /* Speculation buffer is off for data. */
2610:../drivers/fsl_flash.c ****                 speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2611:../drivers/fsl_flash.c ****             }
2612:../drivers/fsl_flash.c ****         }
2613:../drivers/fsl_flash.c ****     }
2614:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2615:../drivers/fsl_flash.c ****     {
2616:../drivers/fsl_flash.c ****         uint32_t value;
2617:../drivers/fsl_flash.c ****         uint32_t b0dpeMask, b0ipeMask;
2618:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_B0DPE_MASK)
2619:../drivers/fsl_flash.c ****         value = FMC->PFB01CR;
2620:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB01CR_B0DPE_MASK;
2621:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB01CR_B0IPE_MASK;
2622:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_B0DPE_MASK)
2623:../drivers/fsl_flash.c ****         value = FMC->PFB0CR;
2624:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
2625:../drivers/fsl_flash.c ****         b0ipeMask = FMC_PFB0CR_B0IPE_MASK;
2626:../drivers/fsl_flash.c **** #endif
2627:../drivers/fsl_flash.c ****         if (!(value & b0dpeMask))
2628:../drivers/fsl_flash.c ****         {
2629:../drivers/fsl_flash.c ****             /* Do not prefetch in response to data references. */
2630:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2631:../drivers/fsl_flash.c ****         }
2632:../drivers/fsl_flash.c ****         if (!(value & b0ipeMask))
2633:../drivers/fsl_flash.c ****         {
2634:../drivers/fsl_flash.c ****             /* Do not prefetch in response to instruction fetches. */
2635:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2636:../drivers/fsl_flash.c ****         }
2637:../drivers/fsl_flash.c ****     }
2638:../drivers/fsl_flash.c **** #elif FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2639:../drivers/fsl_flash.c ****     {
2640:../drivers/fsl_flash.c ****         uint32_t value;
2641:../drivers/fsl_flash.c ****         uint32_t flashSpeculationMask, dataPrefetchMask;
2642:../drivers/fsl_flash.c ****         value = MSCM_OCMDR0_REG;
2643:../drivers/fsl_flash.c ****         flashSpeculationMask = MSCM_OCMDR_OCMC1_DFCS_MASK;
2644:../drivers/fsl_flash.c ****         dataPrefetchMask = MSCM_OCMDR_OCMC1_DFDS_MASK;
2645:../drivers/fsl_flash.c **** 
2646:../drivers/fsl_flash.c ****         if (value & flashSpeculationMask)
2647:../drivers/fsl_flash.c ****         {
2648:../drivers/fsl_flash.c ****             /* Speculation buffer is off. */
2649:../drivers/fsl_flash.c ****             speculationStatus->instructionOption = kFLASH_prefetchSpeculationOptionDisable;
2650:../drivers/fsl_flash.c ****             speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2651:../drivers/fsl_flash.c ****         }
2652:../drivers/fsl_flash.c ****         else
2653:../drivers/fsl_flash.c ****         {
2654:../drivers/fsl_flash.c ****             /* Speculation buffer is on for instruction. */
2655:../drivers/fsl_flash.c ****             if (value & dataPrefetchMask)
2656:../drivers/fsl_flash.c ****             {
2657:../drivers/fsl_flash.c ****                 /* Speculation buffer is off for data. */
2658:../drivers/fsl_flash.c ****                 speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionDisable;
2659:../drivers/fsl_flash.c ****             }
2660:../drivers/fsl_flash.c ****         }
2661:../drivers/fsl_flash.c ****     }
2662:../drivers/fsl_flash.c **** #endif
2663:../drivers/fsl_flash.c **** 
2664:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
2665:../drivers/fsl_flash.c **** }
2666:../drivers/fsl_flash.c **** 
2667:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2668:../drivers/fsl_flash.c **** /*!
2669:../drivers/fsl_flash.c ****  * @brief Copy PIC of flash_run_command() to RAM
2670:../drivers/fsl_flash.c ****  */
2671:../drivers/fsl_flash.c **** static void copy_flash_run_command(uint32_t *flashRunCommand)
2672:../drivers/fsl_flash.c **** {
2673:../drivers/fsl_flash.c ****     assert(sizeof(s_flashRunCommandFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWords * 4)
2674:../drivers/fsl_flash.c **** 
2675:../drivers/fsl_flash.c ****     /* Since the value of ARM function pointer is always odd, but the real start address
2676:../drivers/fsl_flash.c ****      * of function memory should be even, that's why +1 operation exist. */
2677:../drivers/fsl_flash.c ****     memcpy((void *)flashRunCommand, (void *)s_flashRunCommandFunctionCode, sizeof(s_flashRunCommand
2678:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
2679:../drivers/fsl_flash.c **** }
2680:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2681:../drivers/fsl_flash.c **** 
2682:../drivers/fsl_flash.c **** /*!
2683:../drivers/fsl_flash.c ****  * @brief Flash Command Sequence
2684:../drivers/fsl_flash.c ****  *
2685:../drivers/fsl_flash.c ****  * This function is used to perform the command write sequence to the flash.
2686:../drivers/fsl_flash.c ****  *
2687:../drivers/fsl_flash.c ****  * @param driver Pointer to storage for the driver runtime state.
2688:../drivers/fsl_flash.c ****  * @return An error code or kStatus_FLASH_Success
2689:../drivers/fsl_flash.c ****  */
2690:../drivers/fsl_flash.c **** static status_t flash_command_sequence(flash_config_t *config)
2691:../drivers/fsl_flash.c **** {
2692:../drivers/fsl_flash.c ****     uint8_t registerValue;
2693:../drivers/fsl_flash.c **** 
2694:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2695:../drivers/fsl_flash.c ****     /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register */
2696:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_RDCOLERR_MASK | FTFx_FSTAT_ACCERR_MASK | FTFx_FSTAT_FPVIOL_MASK;
2697:../drivers/fsl_flash.c **** 
2698:../drivers/fsl_flash.c ****     status_t returnCode = flash_check_execute_in_ram_function_info(config);
2699:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
2700:../drivers/fsl_flash.c ****     {
2701:../drivers/fsl_flash.c ****         return returnCode;
2702:../drivers/fsl_flash.c ****     }
2703:../drivers/fsl_flash.c **** 
2704:../drivers/fsl_flash.c ****     /* We pass the ftfx_fstat address as a parameter to flash_run_comamnd() instead of using
2705:../drivers/fsl_flash.c ****      * pre-processed MICRO sentences or operating global variable in flash_run_comamnd()
2706:../drivers/fsl_flash.c ****      * to make sure that flash_run_command() will be compiled into position-independent code (PIC).
2707:../drivers/fsl_flash.c ****     callFlashRunCommand((FTFx_REG8_ACCESS_TYPE)(&FTFx->FSTAT));
2708:../drivers/fsl_flash.c **** #else
2709:../drivers/fsl_flash.c ****     /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register */
2710:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_RDCOLERR_MASK | FTFx_FSTAT_ACCERR_MASK | FTFx_FSTAT_FPVIOL_MASK;
2711:../drivers/fsl_flash.c **** 
2712:../drivers/fsl_flash.c ****     /* clear CCIF bit */
2713:../drivers/fsl_flash.c ****     FTFx->FSTAT = FTFx_FSTAT_CCIF_MASK;
2714:../drivers/fsl_flash.c **** 
2715:../drivers/fsl_flash.c ****     /* Check CCIF bit of the flash status register, wait till it is set.
2716:../drivers/fsl_flash.c ****      * IP team indicates that this loop will always complete. */
2717:../drivers/fsl_flash.c ****     while (!(FTFx->FSTAT & FTFx_FSTAT_CCIF_MASK))
2718:../drivers/fsl_flash.c ****     {
2719:../drivers/fsl_flash.c ****     }
2720:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2721:../drivers/fsl_flash.c **** 
2722:../drivers/fsl_flash.c ****     /* Check error bits */
2723:../drivers/fsl_flash.c ****     /* Get flash status register value */
2724:../drivers/fsl_flash.c ****     registerValue = FTFx->FSTAT;
2725:../drivers/fsl_flash.c **** 
2726:../drivers/fsl_flash.c ****     /* checking access error */
2727:../drivers/fsl_flash.c ****     if (registerValue & FTFx_FSTAT_ACCERR_MASK)
2728:../drivers/fsl_flash.c ****     {
2729:../drivers/fsl_flash.c ****         return kStatus_FLASH_AccessError;
2730:../drivers/fsl_flash.c ****     }
2731:../drivers/fsl_flash.c ****     /* checking protection error */
2732:../drivers/fsl_flash.c ****     else if (registerValue & FTFx_FSTAT_FPVIOL_MASK)
2733:../drivers/fsl_flash.c ****     {
2734:../drivers/fsl_flash.c ****         return kStatus_FLASH_ProtectionViolation;
2735:../drivers/fsl_flash.c ****     }
2736:../drivers/fsl_flash.c ****     /* checking MGSTAT0 non-correctable error */
2737:../drivers/fsl_flash.c ****     else if (registerValue & FTFx_FSTAT_MGSTAT0_MASK)
2738:../drivers/fsl_flash.c ****     {
2739:../drivers/fsl_flash.c ****         return kStatus_FLASH_CommandFailure;
2740:../drivers/fsl_flash.c ****     }
2741:../drivers/fsl_flash.c ****     else
2742:../drivers/fsl_flash.c ****     {
2743:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
2744:../drivers/fsl_flash.c ****     }
2745:../drivers/fsl_flash.c **** }
2746:../drivers/fsl_flash.c **** 
2747:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT && FLASH_IS_CACHE_INVALIDATION_AVAILABLE
2748:../drivers/fsl_flash.c **** /*!
2749:../drivers/fsl_flash.c ****  * @brief Copy PIC of flash_common_bit_operation() to RAM
2750:../drivers/fsl_flash.c ****  *
2751:../drivers/fsl_flash.c ****  */
2752:../drivers/fsl_flash.c **** static void copy_flash_common_bit_operation(uint32_t *flashCommonBitOperation)
2753:../drivers/fsl_flash.c **** {
2754:../drivers/fsl_flash.c ****     assert(sizeof(s_flashCommonBitOperationFunctionCode) <= (kFLASH_ExecuteInRamFunctionMaxSizeInWo
2755:../drivers/fsl_flash.c **** 
2756:../drivers/fsl_flash.c ****     /* Since the value of ARM function pointer is always odd, but the real start address
2757:../drivers/fsl_flash.c ****      * of function memory should be even, that's why +1 operation exist. */
2758:../drivers/fsl_flash.c ****     memcpy((void *)flashCommonBitOperation, (void *)s_flashCommonBitOperationFunctionCode,
2759:../drivers/fsl_flash.c ****            sizeof(s_flashCommonBitOperationFunctionCode));
2760:../drivers/fsl_flash.c ****     callFlashCommonBitOperation = (void (*)(FTFx_REG32_ACCESS_TYPE base, uint32_t bitMask, uint32_t
2761:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
2762:../drivers/fsl_flash.c **** }
2763:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT && FLASH_IS_CACHE_INVALIDATION_AVAILABLE */
2764:../drivers/fsl_flash.c **** 
2765:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
2766:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by MCM.*/
2767:../drivers/fsl_flash.c **** void mcm_flash_cache_clear(void)
2768:../drivers/fsl_flash.c **** {
2769:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase;
2770:../drivers/fsl_flash.c **** 
2771:../drivers/fsl_flash.c **** #if defined(BL_TARGET_ROM) && defined(MCM0_CACHE_REG) && defined(MCM1_CACHE_REG) && \
2772:../drivers/fsl_flash.c ****     defined(FSL_FEATURE_FLASH_CURRENT_CORE_ID)
2773:../drivers/fsl_flash.c ****     {
2774:../drivers/fsl_flash.c ****         uint16_t armPartNumber = (uint16_t)((SCB->CPUID & SCB_CPUID_PARTNO_Msk) >> SCB_CPUID_PARTNO
2775:../drivers/fsl_flash.c ****         uint32_t cortexVersion = __CORTEX_M;
2776:../drivers/fsl_flash.c ****         uint32_t coreId = FSL_FEATURE_FLASH_CURRENT_CORE_ID;
2777:../drivers/fsl_flash.c **** #if (__CORTEX_M <= 7)
2778:../drivers/fsl_flash.c ****         /* Note: Below code only apply to dual core device (such K3S) */
2779:../drivers/fsl_flash.c ****         if (s_armCorePartNumberArray[cortexVersion] != armPartNumber)
2780:../drivers/fsl_flash.c ****         {
2781:../drivers/fsl_flash.c ****             coreId ^= 0x1;
2782:../drivers/fsl_flash.c ****         }
2783:../drivers/fsl_flash.c ****         regBase = s_mcmModuleAccessTypeArray[coreId];
2784:../drivers/fsl_flash.c **** #else
2785:../drivers/fsl_flash.c ****         #error "Inapplicable ARM Cortext Version!"
2786:../drivers/fsl_flash.c **** #endif
2787:../drivers/fsl_flash.c ****     }
2788:../drivers/fsl_flash.c **** #elif defined(MCM0_CACHE_REG)
2789:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&MCM0_CACHE_REG;
2790:../drivers/fsl_flash.c **** #elif defined(MCM1_CACHE_REG)
2791:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&MCM1_CACHE_REG;
2792:../drivers/fsl_flash.c **** #endif
2793:../drivers/fsl_flash.c **** 
2794:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2795:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, MCM_CACHE_CLEAR_MASK, MCM_CACHE_CLEAR_SHIFT, 1U);
2796:../drivers/fsl_flash.c **** #else  /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2797:../drivers/fsl_flash.c ****     *regBase |= MCM_CACHE_CLEAR_MASK;
2798:../drivers/fsl_flash.c **** 
2799:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2800:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2801:../drivers/fsl_flash.c ****     __ISB();
2802:../drivers/fsl_flash.c ****     __DSB();
2803:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2804:../drivers/fsl_flash.c **** }
2805:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_MCM */
2806:../drivers/fsl_flash.c **** 
2807:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
2808:../drivers/fsl_flash.c **** /*! @brief Performs the cache clear to the flash by FMC.*/
2809:../drivers/fsl_flash.c **** void fmc_flash_cache_clear(void)
2810:../drivers/fsl_flash.c **** {
2811:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2812:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase = (FTFx_REG32_ACCESS_TYPE)0;
2813:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_CINV_WAY_MASK)
2814:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2815:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_CINV_WAY_MASK, FMC_PFB01CR_CINV_WAY_SHIFT, 0xF
2816:../drivers/fsl_flash.c **** #else
2817:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2818:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_CINV_WAY_MASK, FMC_PFB0CR_CINV_WAY_SHIFT, 0xFU)
2819:../drivers/fsl_flash.c **** #endif
2820:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2821:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_CINV_WAY_MASK)
2822:../drivers/fsl_flash.c ****     FMC->PFB01CR = (FMC->PFB01CR & ~FMC_PFB01CR_CINV_WAY_MASK) | FMC_PFB01CR_CINV_WAY(~0);
2823:../drivers/fsl_flash.c **** #else
2824:../drivers/fsl_flash.c ****     FMC->PFB0CR = (FMC->PFB0CR & ~FMC_PFB0CR_CINV_WAY_MASK) | FMC_PFB0CR_CINV_WAY(~0);
2825:../drivers/fsl_flash.c **** #endif
2826:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2827:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2828:../drivers/fsl_flash.c ****     __ISB();
2829:../drivers/fsl_flash.c ****     __DSB();
2830:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2831:../drivers/fsl_flash.c **** }
2832:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
2833:../drivers/fsl_flash.c **** 
2834:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2835:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by MSCM.*/
2836:../drivers/fsl_flash.c **** void mscm_flash_prefetch_speculation_enable(uint32_t flashIndex, bool enable)
2837:../drivers/fsl_flash.c **** {
2838:../drivers/fsl_flash.c ****     uint8_t setValue;
2839:../drivers/fsl_flash.c ****     if (enable)
2840:../drivers/fsl_flash.c ****     {
2841:../drivers/fsl_flash.c ****         setValue = 0x0U;
2842:../drivers/fsl_flash.c ****     }
2843:../drivers/fsl_flash.c ****     else
2844:../drivers/fsl_flash.c ****     {
2845:../drivers/fsl_flash.c ****         setValue = 0x3U;
2846:../drivers/fsl_flash.c ****     }
2847:../drivers/fsl_flash.c **** 
2848:../drivers/fsl_flash.c **** /* The OCMDR[0] is always used to prefetch main Pflash*/
2849:../drivers/fsl_flash.c **** /* For device with FlexNVM support, the OCMDR[1] is used to prefetch Dflash.
2850:../drivers/fsl_flash.c ****  * For device with secondary flash support, the OCMDR[1] is used to prefetch secondary Pflash. */
2851:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2852:../drivers/fsl_flash.c ****     switch (flashIndex)
2853:../drivers/fsl_flash.c ****     {
2854:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED || FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2855:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexSecondaryFlash:
2856:../drivers/fsl_flash.c ****             callFlashCommonBitOperation((FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR1_REG, MSCM_SPECULATION_
2857:../drivers/fsl_flash.c ****                                         MSCM_SPECULATION_DISABLE_SHIFT, setValue);
2858:../drivers/fsl_flash.c ****             break;
2859:../drivers/fsl_flash.c **** #endif
2860:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexPrimaryFlash:
2861:../drivers/fsl_flash.c ****         default:
2862:../drivers/fsl_flash.c ****             callFlashCommonBitOperation((FTFx_REG32_ACCESS_TYPE)&MSCM_OCMDR0_REG, MSCM_SPECULATION_
2863:../drivers/fsl_flash.c ****                                         MSCM_SPECULATION_DISABLE_SHIFT, setValue);
2864:../drivers/fsl_flash.c ****             break;
2865:../drivers/fsl_flash.c ****     }
2866:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2867:../drivers/fsl_flash.c ****     switch (flashIndex)
2868:../drivers/fsl_flash.c ****     {
2869:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED || FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
2870:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexSecondaryFlash:
2871:../drivers/fsl_flash.c ****             MSCM_OCMDR1_REG = (MSCM_OCMDR1_REG & (~MSCM_SPECULATION_DISABLE_MASK)) | MSCM_SPECULATI
2872:../drivers/fsl_flash.c ****             /* Each cahce clear instaruction should be followed by below code*/
2873:../drivers/fsl_flash.c ****             __ISB();
2874:../drivers/fsl_flash.c ****             __DSB();
2875:../drivers/fsl_flash.c ****             break;
2876:../drivers/fsl_flash.c **** #endif
2877:../drivers/fsl_flash.c ****         case kFLASH_MemoryIndexPrimaryFlash:
2878:../drivers/fsl_flash.c ****         default:
2879:../drivers/fsl_flash.c ****             MSCM_OCMDR0_REG = (MSCM_OCMDR0_REG & (~MSCM_SPECULATION_DISABLE_MASK)) | MSCM_SPECULATI
2880:../drivers/fsl_flash.c ****             /* Memory barriers for good measure.
2881:../drivers/fsl_flash.c ****              * All Cache, Branch predictor and TLB maintenance operations before this instruction c
2882:../drivers/fsl_flash.c ****             __ISB();
2883:../drivers/fsl_flash.c ****             __DSB();
2884:../drivers/fsl_flash.c ****             break;
2885:../drivers/fsl_flash.c ****     }
2886:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2887:../drivers/fsl_flash.c **** }
2888:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM */
2889:../drivers/fsl_flash.c **** 
2890:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2891:../drivers/fsl_flash.c **** /*! @brief Performs the prefetch speculation buffer clear to the flash by FMC.*/
2892:../drivers/fsl_flash.c **** void fmc_flash_prefetch_speculation_clear(void)
2893:../drivers/fsl_flash.c **** {
2894:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2895:../drivers/fsl_flash.c ****     FTFx_REG32_ACCESS_TYPE regBase = (FTFx_REG32_ACCESS_TYPE)0;
2896:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2897:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2898:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_S_INV_MASK, FMC_PFB01CR_S_INV_SHIFT, 1U);
2899:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2900:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB01CR;
2901:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB01CR_S_B_INV_MASK, FMC_PFB01CR_S_B_INV_SHIFT, 1U);
2902:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2903:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2904:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_S_INV_MASK, FMC_PFB0CR_S_INV_SHIFT, 1U);
2905:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2906:../drivers/fsl_flash.c ****     regBase = (FTFx_REG32_ACCESS_TYPE)&FMC->PFB0CR;
2907:../drivers/fsl_flash.c ****     callFlashCommonBitOperation(regBase, FMC_PFB0CR_S_B_INV_MASK, FMC_PFB0CR_S_B_INV_SHIFT, 1U);
2908:../drivers/fsl_flash.c **** #endif
2909:../drivers/fsl_flash.c **** #else /* !FLASH_DRIVER_IS_FLASH_RESIDENT */
2910:../drivers/fsl_flash.c **** #if defined(FMC_PFB01CR_S_INV_MASK)
2911:../drivers/fsl_flash.c ****     FMC->PFB01CR |= FMC_PFB01CR_S_INV_MASK;
2912:../drivers/fsl_flash.c **** #elif defined(FMC_PFB01CR_S_B_INV_MASK)
2913:../drivers/fsl_flash.c ****     FMC->PFB01CR |= FMC_PFB01CR_S_B_INV_MASK;
2914:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_INV_MASK)
2915:../drivers/fsl_flash.c ****     FMC->PFB0CR |= FMC_PFB0CR_S_INV_MASK;
2916:../drivers/fsl_flash.c **** #elif defined(FMC_PFB0CR_S_B_INV_MASK)
2917:../drivers/fsl_flash.c ****     FMC->PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
2918:../drivers/fsl_flash.c **** #endif
2919:../drivers/fsl_flash.c ****     /* Memory barriers for good measure.
2920:../drivers/fsl_flash.c ****      * All Cache, Branch predictor and TLB maintenance operations before this instruction complete 
2921:../drivers/fsl_flash.c ****     __ISB();
2922:../drivers/fsl_flash.c ****     __DSB();
2923:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2924:../drivers/fsl_flash.c **** }
2925:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
2926:../drivers/fsl_flash.c **** 
2927:../drivers/fsl_flash.c **** /*!
2928:../drivers/fsl_flash.c ****  * @brief Flash Cache Clear
2929:../drivers/fsl_flash.c ****  *
2930:../drivers/fsl_flash.c ****  * This function is used to perform the cache and prefetch speculation clear to the flash.
2931:../drivers/fsl_flash.c ****  */
2932:../drivers/fsl_flash.c **** void flash_cache_clear(flash_config_t *config)
2933:../drivers/fsl_flash.c **** {
2934:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPost);
2935:../drivers/fsl_flash.c **** }
2936:../drivers/fsl_flash.c **** 
2937:../drivers/fsl_flash.c **** /*!
2938:../drivers/fsl_flash.c ****  * @brief Flash Cache Clear Process
2939:../drivers/fsl_flash.c ****  *
2940:../drivers/fsl_flash.c ****  * This function is used to perform the cache and prefetch speculation clear process to the flash.
2941:../drivers/fsl_flash.c ****  */
2942:../drivers/fsl_flash.c **** static void flash_cache_clear_process(flash_config_t *config, flash_cache_clear_process_t process)
2943:../drivers/fsl_flash.c **** {
2944:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2945:../drivers/fsl_flash.c ****     status_t returnCode = flash_check_execute_in_ram_function_info(config);
2946:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
2947:../drivers/fsl_flash.c ****     {
2948:../drivers/fsl_flash.c ****         return;
2949:../drivers/fsl_flash.c ****     }
2950:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
2951:../drivers/fsl_flash.c **** 
2952:../drivers/fsl_flash.c ****     /* We pass the ftfx register address as a parameter to flash_common_bit_operation() instead of 
2953:../drivers/fsl_flash.c ****      * pre-processed MACROs or a global variable in flash_common_bit_operation()
2954:../drivers/fsl_flash.c ****      * to make sure that flash_common_bit_operation() will be compiled into position-independent co
2955:../drivers/fsl_flash.c ****     if (process == kFLASH_CacheClearProcessPost)
2956:../drivers/fsl_flash.c ****     {
2957:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_MCM
2958:../drivers/fsl_flash.c ****         mcm_flash_cache_clear();
2959:../drivers/fsl_flash.c **** #endif
2960:../drivers/fsl_flash.c **** #if FLASH_CACHE_IS_CONTROLLED_BY_FMC
2961:../drivers/fsl_flash.c ****         fmc_flash_cache_clear();
2962:../drivers/fsl_flash.c **** #endif
2963:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2964:../drivers/fsl_flash.c ****         mscm_flash_prefetch_speculation_enable(config->FlashMemoryIndex, true);
2965:../drivers/fsl_flash.c **** #endif
2966:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC
2967:../drivers/fsl_flash.c ****         fmc_flash_prefetch_speculation_clear();
2968:../drivers/fsl_flash.c **** #endif
2969:../drivers/fsl_flash.c ****     }
2970:../drivers/fsl_flash.c ****     if (process == kFLASH_CacheClearProcessPre)
2971:../drivers/fsl_flash.c ****     {
2972:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MSCM
2973:../drivers/fsl_flash.c ****         mscm_flash_prefetch_speculation_enable(config->FlashMemoryIndex, false);
2974:../drivers/fsl_flash.c **** #endif
2975:../drivers/fsl_flash.c ****     }
2976:../drivers/fsl_flash.c **** }
2977:../drivers/fsl_flash.c **** 
2978:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
2979:../drivers/fsl_flash.c **** /*! @brief Check whether flash execute-in-ram functions are ready  */
2980:../drivers/fsl_flash.c **** static status_t flash_check_execute_in_ram_function_info(flash_config_t *config)
2981:../drivers/fsl_flash.c **** {
  27              		.loc 1 2981 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2982:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
2983:../drivers/fsl_flash.c **** 
2984:../drivers/fsl_flash.c ****     if (config == NULL)
  33              		.loc 1 2984 0
  34 0000 38B1     		cbz	r0, .L3
2985:../drivers/fsl_flash.c ****     {
2986:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
2987:../drivers/fsl_flash.c ****     }
2988:../drivers/fsl_flash.c **** 
2989:../drivers/fsl_flash.c ****     flashExecuteInRamFunctionInfo = (flash_execute_in_ram_function_config_t *)config->flashExecuteI
  35              		.loc 1 2989 0
  36 0002 C369     		ldr	r3, [r0, #28]
  37              	.LVL1:
2990:../drivers/fsl_flash.c **** 
2991:../drivers/fsl_flash.c ****     if ((config->flashExecuteInRamFunctionInfo) &&
  38              		.loc 1 2991 0
  39 0004 3BB1     		cbz	r3, .L4
  40              		.loc 1 2991 0 is_stmt 0 discriminator 1
  41 0006 1B68     		ldr	r3, [r3]
  42              	.LVL2:
  43 0008 022B     		cmp	r3, #2
2992:../drivers/fsl_flash.c ****         (kFLASH_ExecuteInRamFunctionTotalNum == flashExecuteInRamFunctionInfo->activeFunctionCount)
2993:../drivers/fsl_flash.c ****     {
2994:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
  44              		.loc 1 2994 0 is_stmt 1 discriminator 1
  45 000a 14BF     		ite	ne
  46 000c 6D20     		movne	r0, #109
  47              	.LVL3:
  48 000e 0020     		moveq	r0, #0
  49 0010 7047     		bx	lr
  50              	.LVL4:
  51              	.L3:
2986:../drivers/fsl_flash.c ****     }
  52              		.loc 1 2986 0
  53 0012 0420     		movs	r0, #4
  54              	.LVL5:
  55 0014 7047     		bx	lr
  56              	.LVL6:
  57              	.L4:
2995:../drivers/fsl_flash.c ****     }
2996:../drivers/fsl_flash.c **** 
2997:../drivers/fsl_flash.c ****     return kStatus_FLASH_ExecuteInRamFunctionNotReady;
  58              		.loc 1 2997 0
  59 0016 6D20     		movs	r0, #109
  60              	.LVL7:
2998:../drivers/fsl_flash.c **** }
  61              		.loc 1 2998 0
  62 0018 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE180:
  66              		.section	.text.flash_command_sequence,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	flash_command_sequence:
  74              	.LFB174:
2691:../drivers/fsl_flash.c ****     uint8_t registerValue;
  75              		.loc 1 2691 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL8:
  80 0000 38B5     		push	{r3, r4, r5, lr}
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 3, -16
  83              		.cfi_offset 4, -12
  84              		.cfi_offset 5, -8
  85              		.cfi_offset 14, -4
2696:../drivers/fsl_flash.c **** 
  86              		.loc 1 2696 0
  87 0002 0D4D     		ldr	r5, .L11
  88 0004 7023     		movs	r3, #112
  89 0006 2B70     		strb	r3, [r5]
2698:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
  90              		.loc 1 2698 0
  91 0008 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
  92              	.LVL9:
2699:../drivers/fsl_flash.c ****     {
  93              		.loc 1 2699 0
  94 000c 0446     		mov	r4, r0
  95 000e 68B9     		cbnz	r0, .L6
2707:../drivers/fsl_flash.c **** #else
  96              		.loc 1 2707 0
  97 0010 0A4B     		ldr	r3, .L11+4
  98 0012 2846     		mov	r0, r5
  99              	.LVL10:
 100 0014 1B68     		ldr	r3, [r3]
 101 0016 9847     		blx	r3
 102              	.LVL11:
2724:../drivers/fsl_flash.c **** 
 103              		.loc 1 2724 0
 104 0018 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 105 001a DBB2     		uxtb	r3, r3
 106              	.LVL12:
2727:../drivers/fsl_flash.c ****     {
 107              		.loc 1 2727 0
 108 001c 9906     		lsls	r1, r3, #26
 109 001e 07D4     		bmi	.L8
2732:../drivers/fsl_flash.c ****     {
 110              		.loc 1 2732 0
 111 0020 DA06     		lsls	r2, r3, #27
 112 0022 07D4     		bmi	.L9
2737:../drivers/fsl_flash.c ****     {
 113              		.loc 1 2737 0
 114 0024 13F0010F 		tst	r3, #1
2739:../drivers/fsl_flash.c ****     }
 115              		.loc 1 2739 0
 116 0028 18BF     		it	ne
 117 002a 6924     		movne	r4, #105
 118              	.LVL13:
 119              	.L6:
2745:../drivers/fsl_flash.c **** 
 120              		.loc 1 2745 0
 121 002c 2046     		mov	r0, r4
 122 002e 38BD     		pop	{r3, r4, r5, pc}
 123              	.LVL14:
 124              	.L8:
2729:../drivers/fsl_flash.c ****     }
 125              		.loc 1 2729 0
 126 0030 6724     		movs	r4, #103
 127              	.LVL15:
 128 0032 FBE7     		b	.L6
 129              	.LVL16:
 130              	.L9:
2734:../drivers/fsl_flash.c ****     }
 131              		.loc 1 2734 0
 132 0034 6824     		movs	r4, #104
 133              	.LVL17:
 134 0036 F9E7     		b	.L6
 135              	.L12:
 136              		.align	2
 137              	.L11:
 138 0038 00000240 		.word	1073872896
 139 003c 00000000 		.word	.LANCHOR0
 140              		.cfi_endproc
 141              	.LFE174:
 143              		.section	.text.flash_check_range,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	flash_check_range:
 151              	.LFB181:
2999:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
3000:../drivers/fsl_flash.c **** 
3001:../drivers/fsl_flash.c **** /*! @brief Validates the range and alignment of the given address range.*/
3002:../drivers/fsl_flash.c **** static status_t flash_check_range(flash_config_t *config,
3003:../drivers/fsl_flash.c ****                                   uint32_t startAddress,
3004:../drivers/fsl_flash.c ****                                   uint32_t lengthInBytes,
3005:../drivers/fsl_flash.c ****                                   uint32_t alignmentBaseline)
3006:../drivers/fsl_flash.c **** {
 152              		.loc 1 3006 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL18:
 157 0000 10B5     		push	{r4, lr}
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 4, -8
 160              		.cfi_offset 14, -4
3007:../drivers/fsl_flash.c ****     if (config == NULL)
 161              		.loc 1 3007 0
 162 0002 78B1     		cbz	r0, .L15
3008:../drivers/fsl_flash.c ****     {
3009:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3010:../drivers/fsl_flash.c ****     }
3011:../drivers/fsl_flash.c **** 
3012:../drivers/fsl_flash.c ****     /* Verify the start and length are alignmentBaseline aligned. */
3013:../drivers/fsl_flash.c ****     if ((startAddress & (alignmentBaseline - 1)) || (lengthInBytes & (alignmentBaseline - 1)))
 163              		.loc 1 3013 0
 164 0004 013B     		subs	r3, r3, #1
 165              	.LVL19:
 166 0006 41EA0204 		orr	r4, r1, r2
 167 000a 2342     		tst	r3, r4
 168 000c 0CD1     		bne	.L16
 169              	.LVL20:
 170              	.LBB10:
 171              	.LBB11:
3014:../drivers/fsl_flash.c ****     {
3015:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
3016:../drivers/fsl_flash.c ****     }
3017:../drivers/fsl_flash.c **** 
3018:../drivers/fsl_flash.c ****     /* check for valid range of the target addresses */
3019:../drivers/fsl_flash.c ****     if (
3020:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3021:../drivers/fsl_flash.c ****         ((startAddress >= config->DFlashBlockBase) &&
3022:../drivers/fsl_flash.c ****          ((startAddress + lengthInBytes) <= (config->DFlashBlockBase + config->DFlashTotalSize))) |
3023:../drivers/fsl_flash.c **** #endif
3024:../drivers/fsl_flash.c ****         ((startAddress >= config->PFlashBlockBase) &&
 172              		.loc 1 3024 0
 173 000e 0368     		ldr	r3, [r0]
 174              	.LVL21:
3019:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
 175              		.loc 1 3019 0
 176 0010 9942     		cmp	r1, r3
 177 0012 0BD3     		bcc	.L17
3025:../drivers/fsl_flash.c ****          ((startAddress + lengthInBytes) <= (config->PFlashBlockBase + config->PFlashTotalSize))))
 178              		.loc 1 3025 0
 179 0014 4068     		ldr	r0, [r0, #4]
 180              	.LVL22:
 181 0016 1144     		add	r1, r1, r2
 182              	.LVL23:
 183 0018 1844     		add	r0, r0, r3
3026:../drivers/fsl_flash.c ****     {
3027:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
 184              		.loc 1 3027 0
 185 001a 8142     		cmp	r1, r0
 186 001c 8CBF     		ite	hi
 187 001e 6620     		movhi	r0, #102
 188 0020 0020     		movls	r0, #0
 189              	.LVL24:
 190              	.L13:
 191              	.LBE11:
 192              	.LBE10:
3028:../drivers/fsl_flash.c ****     }
3029:../drivers/fsl_flash.c **** 
3030:../drivers/fsl_flash.c ****     return kStatus_FLASH_AddressError;
3031:../drivers/fsl_flash.c **** }
 193              		.loc 1 3031 0
 194 0022 10BD     		pop	{r4, pc}
 195              	.LVL25:
 196              	.L15:
3009:../drivers/fsl_flash.c ****     }
 197              		.loc 1 3009 0
 198 0024 0420     		movs	r0, #4
 199              	.LVL26:
 200 0026 FCE7     		b	.L13
 201              	.LVL27:
 202              	.L16:
3015:../drivers/fsl_flash.c ****     }
 203              		.loc 1 3015 0
 204 0028 6520     		movs	r0, #101
 205              	.LVL28:
 206 002a FAE7     		b	.L13
 207              	.LVL29:
 208              	.L17:
 209              	.LBB13:
 210              	.LBB12:
3030:../drivers/fsl_flash.c **** }
 211              		.loc 1 3030 0
 212 002c 6620     		movs	r0, #102
 213              	.LVL30:
 214 002e F8E7     		b	.L13
 215              	.LBE12:
 216              	.LBE13:
 217              		.cfi_endproc
 218              	.LFE181:
 220              		.section	.text.flash_get_matched_operation_info,"ax",%progbits
 221              		.align	1
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu fpv4-sp-d16
 227              	flash_get_matched_operation_info:
 228              	.LFB182:
3032:../drivers/fsl_flash.c **** 
3033:../drivers/fsl_flash.c **** /*! @brief Gets the right address, sector and block size of current flash type which is indicated b
3034:../drivers/fsl_flash.c **** static status_t flash_get_matched_operation_info(flash_config_t *config,
3035:../drivers/fsl_flash.c ****                                                  uint32_t address,
3036:../drivers/fsl_flash.c ****                                                  flash_operation_config_t *info)
3037:../drivers/fsl_flash.c **** {
 229              		.loc 1 3037 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              	.LVL31:
 234 0000 38B5     		push	{r3, r4, r5, lr}
 235              		.cfi_def_cfa_offset 16
 236              		.cfi_offset 3, -16
 237              		.cfi_offset 4, -12
 238              		.cfi_offset 5, -8
 239              		.cfi_offset 14, -4
 240              		.loc 1 3037 0
 241 0002 0D46     		mov	r5, r1
 242 0004 1346     		mov	r3, r2
3038:../drivers/fsl_flash.c ****     if ((config == NULL) || (info == NULL))
 243              		.loc 1 3038 0
 244 0006 0446     		mov	r4, r0
 245 0008 C0B1     		cbz	r0, .L21
 246              	.LVL32:
 247              	.LBB16:
 248              	.LBB17:
3039:../drivers/fsl_flash.c ****     {
3040:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3041:../drivers/fsl_flash.c ****     }
3042:../drivers/fsl_flash.c **** 
3043:../drivers/fsl_flash.c ****     /* Clean up info Structure*/
3044:../drivers/fsl_flash.c ****     memset(info, 0, sizeof(flash_operation_config_t));
 249              		.loc 1 3044 0
 250 000a 2022     		movs	r2, #32
 251              	.LVL33:
 252 000c 0021     		movs	r1, #0
 253              	.LVL34:
 254 000e 1846     		mov	r0, r3
 255              	.LVL35:
 256 0010 FFF7FEFF 		bl	memset
 257              	.LVL36:
3045:../drivers/fsl_flash.c **** 
3046:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3047:../drivers/fsl_flash.c ****     if ((address >= config->DFlashBlockBase) && (address <= (config->DFlashBlockBase + config->DFla
3048:../drivers/fsl_flash.c ****     {
3049:../drivers/fsl_flash.c ****         /* When required by the command, address bit 23 selects between program flash memory
3050:../drivers/fsl_flash.c ****          * (=0) and data flash memory (=1).*/
3051:../drivers/fsl_flash.c ****         info->convertedAddress = address - config->DFlashBlockBase + 0x800000U;
3052:../drivers/fsl_flash.c ****         info->activeSectorSize = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_SECTOR_SIZE;
3053:../drivers/fsl_flash.c ****         info->activeBlockSize = config->DFlashTotalSize / FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_COUNT;
3054:../drivers/fsl_flash.c **** 
3055:../drivers/fsl_flash.c ****         info->blockWriteUnitSize = FSL_FEATURE_FLASH_FLEX_NVM_BLOCK_WRITE_UNIT_SIZE;
3056:../drivers/fsl_flash.c ****         info->sectorCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_SECTOR_CMD_ADDRESS_ALIGMENT;
3057:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_SECTION_CMD_ADDRESS_ALIGMENT;
3058:../drivers/fsl_flash.c ****         info->resourceCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_RESOURCE_CMD_ADDRESS_ALIGMENT
3059:../drivers/fsl_flash.c ****         info->checkCmdAddressAligment = FSL_FEATURE_FLASH_FLEX_NVM_CHECK_CMD_ADDRESS_ALIGMENT;
3060:../drivers/fsl_flash.c ****     }
3061:../drivers/fsl_flash.c ****     else
3062:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
3063:../drivers/fsl_flash.c ****     {
3064:../drivers/fsl_flash.c ****         info->convertedAddress = address - config->PFlashBlockBase;
 258              		.loc 1 3064 0
 259 0014 2268     		ldr	r2, [r4]
 260 0016 AD1A     		subs	r5, r5, r2
 261              	.LVL37:
3065:../drivers/fsl_flash.c ****         info->activeSectorSize = config->PFlashSectorSize;
 262              		.loc 1 3065 0
 263 0018 E268     		ldr	r2, [r4, #12]
 264 001a 4260     		str	r2, [r0, #4]
3064:../drivers/fsl_flash.c ****         info->activeSectorSize = config->PFlashSectorSize;
 265              		.loc 1 3064 0
 266 001c 0560     		str	r5, [r0]
3066:../drivers/fsl_flash.c ****         info->activeBlockSize = config->PFlashTotalSize / config->PFlashBlockCount;
 267              		.loc 1 3066 0
 268 001e 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 269 0020 6268     		ldr	r2, [r4, #4]
 270 0022 B2FBF1F2 		udiv	r2, r2, r1
3067:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED
3068:../drivers/fsl_flash.c ****         if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
3069:../drivers/fsl_flash.c ****         {
3070:../drivers/fsl_flash.c **** #if FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGISTER || FLASH_SSD_SECONDARY_FLASH_HAS_ITS_
3071:../drivers/fsl_flash.c ****             /* When required by the command, address bit 23 selects between main flash memory
3072:../drivers/fsl_flash.c ****              * (=0) and secondary flash memory (=1).*/
3073:../drivers/fsl_flash.c ****             info->convertedAddress += 0x800000U;
3074:../drivers/fsl_flash.c **** #endif
3075:../drivers/fsl_flash.c ****             info->blockWriteUnitSize = SECONDARY_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE;
3076:../drivers/fsl_flash.c ****         }
3077:../drivers/fsl_flash.c ****         else
3078:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_SECONDARY_FLASH_ENABLED */
3079:../drivers/fsl_flash.c ****         {
3080:../drivers/fsl_flash.c ****             info->blockWriteUnitSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_WRITE_UNIT_SIZE;
3081:../drivers/fsl_flash.c ****         }
3082:../drivers/fsl_flash.c **** 
3083:../drivers/fsl_flash.c ****         info->sectorCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT;
 271              		.loc 1 3083 0
 272 0026 1021     		movs	r1, #16
3066:../drivers/fsl_flash.c ****         info->activeBlockSize = config->PFlashTotalSize / config->PFlashBlockCount;
 273              		.loc 1 3066 0
 274 0028 8260     		str	r2, [r0, #8]
 275              		.loc 1 3083 0
 276 002a 0822     		movs	r2, #8
 277 002c C0E90321 		strd	r2, r1, [r0, #12]
3084:../drivers/fsl_flash.c ****         info->sectionCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_SECTION_CMD_ADDRESS_ALIGMENT;
3085:../drivers/fsl_flash.c ****         info->resourceCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_RESOURCE_CMD_ADDRESS_ALIGMENT;
 278              		.loc 1 3085 0
 279 0030 C0E90512 		strd	r1, r2, [r0, #20]
3086:../drivers/fsl_flash.c ****         info->checkCmdAddressAligment = FSL_FEATURE_FLASH_PFLASH_CHECK_CMD_ADDRESS_ALIGMENT;
 280              		.loc 1 3086 0
 281 0034 0422     		movs	r2, #4
 282 0036 C261     		str	r2, [r0, #28]
 283              	.LVL38:
 284 0038 0020     		movs	r0, #0
 285              	.L19:
 286              	.LBE17:
 287              	.LBE16:
3087:../drivers/fsl_flash.c ****     }
3088:../drivers/fsl_flash.c **** 
3089:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3090:../drivers/fsl_flash.c **** }
 288              		.loc 1 3090 0
 289 003a 38BD     		pop	{r3, r4, r5, pc}
 290              	.LVL39:
 291              	.L21:
3040:../drivers/fsl_flash.c ****     }
 292              		.loc 1 3040 0
 293 003c 0420     		movs	r0, #4
 294              	.LVL40:
 295 003e FCE7     		b	.L19
 296              		.cfi_endproc
 297              	.LFE182:
 299              		.section	.text.FLASH_PrepareExecuteInRamFunctions,"ax",%progbits
 300              		.align	1
 301              		.global	FLASH_PrepareExecuteInRamFunctions
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	FLASH_PrepareExecuteInRamFunctions:
 308              	.LFB148:
 852:../drivers/fsl_flash.c ****     flash_execute_in_ram_function_config_t *flashExecuteInRamFunctionInfo;
 309              		.loc 1 852 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              	.LVL41:
 314 0000 30B5     		push	{r4, r5, lr}
 315              		.cfi_def_cfa_offset 12
 316              		.cfi_offset 4, -12
 317              		.cfi_offset 5, -8
 318              		.cfi_offset 14, -4
 855:../drivers/fsl_flash.c ****     {
 319              		.loc 1 855 0
 320 0002 F0B1     		cbz	r0, .L26
 855:../drivers/fsl_flash.c ****     {
 321              		.loc 1 855 0 is_stmt 0 discriminator 1
 322 0004 C169     		ldr	r1, [r0, #28]
 323 0006 E1B1     		cbz	r1, .L26
 324              	.LVL42:
 325              	.LBB22:
 326              	.LBB23:
2677:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
 327              		.loc 1 2677 0 is_stmt 1
 328 0008 0F48     		ldr	r0, .L28
 329              	.LVL43:
 330              	.LBE23:
 331              	.LBE22:
 862:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 332              		.loc 1 862 0
 333 000a 4B68     		ldr	r3, [r1, #4]
 334              	.LVL44:
 335              	.LBB25:
 336              	.LBB24:
2677:../drivers/fsl_flash.c ****     callFlashRunCommand = (void (*)(FTFx_REG8_ACCESS_TYPE ftfx_fstat))((uint32_t)flashRunCommand + 
 337              		.loc 1 2677 0
 338 000c 0268     		ldr	r2, [r0]	@ unaligned
 339 000e 1A60     		str	r2, [r3]	@ unaligned
 340 0010 4268     		ldr	r2, [r0, #4]	@ unaligned
 341 0012 5A60     		str	r2, [r3, #4]	@ unaligned
 342 0014 8268     		ldr	r2, [r0, #8]	@ unaligned
 343 0016 9A60     		str	r2, [r3, #8]	@ unaligned
2678:../drivers/fsl_flash.c **** }
 344              		.loc 1 2678 0
 345 0018 0C4A     		ldr	r2, .L28+4
 346 001a 0133     		adds	r3, r3, #1
 347              	.LVL45:
 348 001c 1360     		str	r3, [r2]
 349              	.LVL46:
 350              	.LBE24:
 351              	.LBE25:
 864:../drivers/fsl_flash.c **** #endif
 352              		.loc 1 864 0
 353 001e 8B68     		ldr	r3, [r1, #8]
 354              	.LVL47:
 355              	.LBB26:
 356              	.LBB27:
2758:../drivers/fsl_flash.c ****            sizeof(s_flashCommonBitOperationFunctionCode));
 357              		.loc 1 2758 0
 358 0020 0B4A     		ldr	r2, .L28+8
 359 0022 1846     		mov	r0, r3
 360 0024 02F11C04 		add	r4, r2, #28
 361              	.L24:
 362 0028 52F8045B 		ldr	r5, [r2], #4	@ unaligned
 363 002c 40F8045B 		str	r5, [r0], #4	@ unaligned
 364 0030 A242     		cmp	r2, r4
 365 0032 F9D1     		bne	.L24
2760:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
 366              		.loc 1 2760 0
 367 0034 074A     		ldr	r2, .L28+12
2761:../drivers/fsl_flash.c **** }
 368              		.loc 1 2761 0
 369 0036 0133     		adds	r3, r3, #1
 370              	.LVL48:
2760:../drivers/fsl_flash.c ****                                             uint32_t bitValue))((uint32_t)flashCommonBitOperation +
 371              		.loc 1 2760 0
 372 0038 1360     		str	r3, [r2]
 373              	.LVL49:
 374              	.LBE27:
 375              	.LBE26:
 866:../drivers/fsl_flash.c **** 
 376              		.loc 1 866 0
 377 003a 0223     		movs	r3, #2
 378 003c 0B60     		str	r3, [r1]
 868:../drivers/fsl_flash.c **** }
 379              		.loc 1 868 0
 380 003e 0020     		movs	r0, #0
 381              	.LVL50:
 382              	.L22:
 869:../drivers/fsl_flash.c **** #endif /* FLASH_DRIVER_IS_FLASH_RESIDENT */
 383              		.loc 1 869 0
 384 0040 30BD     		pop	{r4, r5, pc}
 385              	.LVL51:
 386              	.L26:
 857:../drivers/fsl_flash.c ****     }
 387              		.loc 1 857 0
 388 0042 0420     		movs	r0, #4
 389              	.LVL52:
 390 0044 FCE7     		b	.L22
 391              	.L29:
 392 0046 00BF     		.align	2
 393              	.L28:
 394 0048 00000000 		.word	.LANCHOR1
 395 004c 00000000 		.word	.LANCHOR0
 396 0050 00000000 		.word	.LANCHOR2
 397 0054 00000000 		.word	.LANCHOR3
 398              		.cfi_endproc
 399              	.LFE148:
 401              		.section	.text.FLASH_Init,"ax",%progbits
 402              		.align	1
 403              		.global	FLASH_Init
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu fpv4-sp-d16
 409              	FLASH_Init:
 410              	.LFB147:
 736:../drivers/fsl_flash.c ****     if (config == NULL)
 411              		.loc 1 736 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              	.LVL53:
 416 0000 10B5     		push	{r4, lr}
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 4, -8
 419              		.cfi_offset 14, -4
 737:../drivers/fsl_flash.c ****     {
 420              		.loc 1 737 0
 421 0002 0446     		mov	r4, r0
 422 0004 60B3     		cbz	r0, .L34
 423              	.LBB28:
 776:../drivers/fsl_flash.c **** #else
 424              		.loc 1 776 0
 425 0006 174A     		ldr	r2, .L39
 426 0008 41F24C03 		movw	r3, #4172
 427 000c D358     		ldr	r3, [r2, r3]
 428 000e C3F30363 		ubfx	r3, r3, #24, #4
 429              	.LVL54:
 782:../drivers/fsl_flash.c ****         {
 430              		.loc 1 782 0
 431 0012 0F2B     		cmp	r3, #15
 788:../drivers/fsl_flash.c ****         }
 432              		.loc 1 788 0
 433 0014 1BBF     		ittet	ne
 434 0016 144A     		ldrne	r2, .L39+4
 435 0018 32F81330 		ldrhne	r3, [r2, r3, lsl #1]
 436              	.LVL55:
 784:../drivers/fsl_flash.c ****         }
 437              		.loc 1 784 0
 438 001c 4FF48013 		moveq	r3, #1048576
 788:../drivers/fsl_flash.c ****         }
 439              		.loc 1 788 0
 440 0020 9B02     		lslne	r3, r3, #10
 441              	.LVL56:
 792:../drivers/fsl_flash.c ****         config->PFlashTotalSize = flashDensity;
 442              		.loc 1 792 0
 443 0022 0022     		movs	r2, #0
 793:../drivers/fsl_flash.c ****         config->PFlashBlockCount = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT;
 444              		.loc 1 793 0
 445 0024 C0E90023 		strd	r2, r3, [r0]
 794:../drivers/fsl_flash.c ****         config->PFlashSectorSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_SECTOR_SIZE;
 446              		.loc 1 794 0
 447 0028 0223     		movs	r3, #2
 448              	.LVL57:
 449 002a 0372     		strb	r3, [r0, #8]
 795:../drivers/fsl_flash.c ****     }
 450              		.loc 1 795 0
 451 002c 4FF48053 		mov	r3, #4096
 452 0030 C360     		str	r3, [r0, #12]
 453              	.LBE28:
 814:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 454              		.loc 1 814 0
 455 0032 C0E90522 		strd	r2, r2, [r0, #20]
 820:../drivers/fsl_flash.c ****     {
 456              		.loc 1 820 0
 457 0036 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
 458              	.LVL58:
 459 003a 48B1     		cbz	r0, .L33
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 460              		.loc 1 822 0
 461 003c 0B4B     		ldr	r3, .L39+8
 827:../drivers/fsl_flash.c ****         FLASH_PrepareExecuteInRamFunctions(config);
 462              		.loc 1 827 0
 463 003e E361     		str	r3, [r4, #28]
 822:../drivers/fsl_flash.c ****         s_flashExecuteInRamFunctionInfo.flashRunCommand = s_flashRunCommand;
 464              		.loc 1 822 0
 465 0040 1A60     		str	r2, [r3]
 823:../drivers/fsl_flash.c **** #if FLASH_IS_CACHE_INVALIDATION_AVAILABLE
 466              		.loc 1 823 0
 467 0042 0B4A     		ldr	r2, .L39+12
 468 0044 5A60     		str	r2, [r3, #4]
 828:../drivers/fsl_flash.c ****     }
 469              		.loc 1 828 0
 470 0046 2046     		mov	r0, r4
 825:../drivers/fsl_flash.c **** #endif
 471              		.loc 1 825 0
 472 0048 0A4A     		ldr	r2, .L39+16
 473 004a 9A60     		str	r2, [r3, #8]
 828:../drivers/fsl_flash.c ****     }
 474              		.loc 1 828 0
 475 004c FFF7FEFF 		bl	FLASH_PrepareExecuteInRamFunctions
 476              	.LVL59:
 477              	.L33:
 833:../drivers/fsl_flash.c **** 
 478              		.loc 1 833 0
 479 0050 4FF0A052 		mov	r2, #335544320
 480 0054 4FF48053 		mov	r3, #4096
 481 0058 C4E90823 		strd	r2, r3, [r4, #32]
 847:../drivers/fsl_flash.c **** }
 482              		.loc 1 847 0
 483 005c 0020     		movs	r0, #0
 484              	.L30:
 848:../drivers/fsl_flash.c **** 
 485              		.loc 1 848 0
 486 005e 10BD     		pop	{r4, pc}
 487              	.LVL60:
 488              	.L34:
 739:../drivers/fsl_flash.c ****     }
 489              		.loc 1 739 0
 490 0060 0420     		movs	r0, #4
 491              	.LVL61:
 492 0062 FCE7     		b	.L30
 493              	.L40:
 494              		.align	2
 495              	.L39:
 496 0064 00700440 		.word	1074032640
 497 0068 00000000 		.word	.LANCHOR4
 498 006c 00000000 		.word	.LANCHOR5
 499 0070 00000000 		.word	.LANCHOR6
 500 0074 00000000 		.word	.LANCHOR7
 501              		.cfi_endproc
 502              	.LFE147:
 504              		.section	.text.FLASH_ReadResource,"ax",%progbits
 505              		.align	1
 506              		.global	FLASH_ReadResource
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu fpv4-sp-d16
 512              	FLASH_ReadResource:
 513              	.LFB155:
1358:../drivers/fsl_flash.c ****     status_t returnCode;
 514              		.loc 1 1358 0
 515              		.cfi_startproc
 516              		@ args = 4, pretend = 0, frame = 32
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              	.LVL62:
 519 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 520              		.cfi_def_cfa_offset 36
 521              		.cfi_offset 4, -36
 522              		.cfi_offset 5, -32
 523              		.cfi_offset 6, -28
 524              		.cfi_offset 7, -24
 525              		.cfi_offset 8, -20
 526              		.cfi_offset 9, -16
 527              		.cfi_offset 10, -12
 528              		.cfi_offset 11, -8
 529              		.cfi_offset 14, -4
 530 0004 89B0     		sub	sp, sp, #36
 531              		.cfi_def_cfa_offset 72
1358:../drivers/fsl_flash.c ****     status_t returnCode;
 532              		.loc 1 1358 0
 533 0006 0D46     		mov	r5, r1
 534 0008 1646     		mov	r6, r2
 535 000a 9846     		mov	r8, r3
 536 000c 9DF84840 		ldrb	r4, [sp, #72]	@ zero_extendqisi2
1362:../drivers/fsl_flash.c ****     {
 537              		.loc 1 1362 0
 538 0010 0746     		mov	r7, r0
 539 0012 88B1     		cbz	r0, .L54
1362:../drivers/fsl_flash.c ****     {
 540              		.loc 1 1362 0 is_stmt 0 discriminator 1
 541 0014 82B1     		cbz	r2, .L54
 542              	.LVL63:
 543              	.LBB33:
 544              	.LBB34:
1367:../drivers/fsl_flash.c **** 
 545              		.loc 1 1367 0 is_stmt 1
 546 0016 6A46     		mov	r2, sp
 547              	.LVL64:
 548 0018 FFF7FEFF 		bl	flash_get_matched_operation_info
 549              	.LVL65:
 550              	.LBB35:
 551              	.LBB36:
3091:../drivers/fsl_flash.c **** 
3092:../drivers/fsl_flash.c **** /*! @brief Validates the given user key for flash erase APIs.*/
3093:../drivers/fsl_flash.c **** static status_t flash_check_user_key(uint32_t key)
3094:../drivers/fsl_flash.c **** {
3095:../drivers/fsl_flash.c ****     /* Validate the user key */
3096:../drivers/fsl_flash.c ****     if (key != kFLASH_ApiEraseKey)
3097:../drivers/fsl_flash.c ****     {
3098:../drivers/fsl_flash.c ****         return kStatus_FLASH_EraseKeyError;
3099:../drivers/fsl_flash.c ****     }
3100:../drivers/fsl_flash.c **** 
3101:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3102:../drivers/fsl_flash.c **** }
3103:../drivers/fsl_flash.c **** 
3104:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_FLEXNVM_ENABLED
3105:../drivers/fsl_flash.c **** /*! @brief Updates FlexNVM memory partition status according to data flash 0 IFR.*/
3106:../drivers/fsl_flash.c **** static status_t flash_update_flexnvm_memory_partition_status(flash_config_t *config)
3107:../drivers/fsl_flash.c **** {
3108:../drivers/fsl_flash.c ****     struct
3109:../drivers/fsl_flash.c ****     {
3110:../drivers/fsl_flash.c ****         uint32_t reserved0;
3111:../drivers/fsl_flash.c ****         uint8_t FlexNVMPartitionCode;
3112:../drivers/fsl_flash.c ****         uint8_t EEPROMDataSetSize;
3113:../drivers/fsl_flash.c ****         uint16_t reserved1;
3114:../drivers/fsl_flash.c ****     } dataIFRReadOut;
3115:../drivers/fsl_flash.c ****     status_t returnCode;
3116:../drivers/fsl_flash.c **** 
3117:../drivers/fsl_flash.c ****     if (config == NULL)
3118:../drivers/fsl_flash.c ****     {
3119:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3120:../drivers/fsl_flash.c ****     }
3121:../drivers/fsl_flash.c **** 
3122:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3123:../drivers/fsl_flash.c ****     /* Get FlexNVM memory partition info from data flash IFR */
3124:../drivers/fsl_flash.c ****     returnCode = FLASH_ReadResource(config, DFLASH_IFR_READRESOURCE_START_ADDRESS, (uint32_t *)&dat
3125:../drivers/fsl_flash.c ****                                     sizeof(dataIFRReadOut), kFLASH_ResourceOptionFlashIfr);
3126:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
3127:../drivers/fsl_flash.c ****     {
3128:../drivers/fsl_flash.c ****         return kStatus_FLASH_PartitionStatusUpdateFailure;
3129:../drivers/fsl_flash.c ****     }
3130:../drivers/fsl_flash.c **** #else
3131:../drivers/fsl_flash.c **** #error "Cannot get FlexNVM memory partition info"
3132:../drivers/fsl_flash.c **** #endif
3133:../drivers/fsl_flash.c **** 
3134:../drivers/fsl_flash.c ****     /* Fill out partitioned EEPROM size */
3135:../drivers/fsl_flash.c ****     dataIFRReadOut.EEPROMDataSetSize &= 0x0FU;
3136:../drivers/fsl_flash.c ****     switch (dataIFRReadOut.EEPROMDataSetSize)
3137:../drivers/fsl_flash.c ****     {
3138:../drivers/fsl_flash.c ****         case 0x00U:
3139:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0000;
3140:../drivers/fsl_flash.c ****             break;
3141:../drivers/fsl_flash.c ****         case 0x01U:
3142:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0001;
3143:../drivers/fsl_flash.c ****             break;
3144:../drivers/fsl_flash.c ****         case 0x02U:
3145:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0010;
3146:../drivers/fsl_flash.c ****             break;
3147:../drivers/fsl_flash.c ****         case 0x03U:
3148:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0011;
3149:../drivers/fsl_flash.c ****             break;
3150:../drivers/fsl_flash.c ****         case 0x04U:
3151:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0100;
3152:../drivers/fsl_flash.c ****             break;
3153:../drivers/fsl_flash.c ****         case 0x05U:
3154:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0101;
3155:../drivers/fsl_flash.c ****             break;
3156:../drivers/fsl_flash.c ****         case 0x06U:
3157:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0110;
3158:../drivers/fsl_flash.c ****             break;
3159:../drivers/fsl_flash.c ****         case 0x07U:
3160:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_0111;
3161:../drivers/fsl_flash.c ****             break;
3162:../drivers/fsl_flash.c ****         case 0x08U:
3163:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1000;
3164:../drivers/fsl_flash.c ****             break;
3165:../drivers/fsl_flash.c ****         case 0x09U:
3166:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1001;
3167:../drivers/fsl_flash.c ****             break;
3168:../drivers/fsl_flash.c ****         case 0x0AU:
3169:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1010;
3170:../drivers/fsl_flash.c ****             break;
3171:../drivers/fsl_flash.c ****         case 0x0BU:
3172:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1011;
3173:../drivers/fsl_flash.c ****             break;
3174:../drivers/fsl_flash.c ****         case 0x0CU:
3175:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1100;
3176:../drivers/fsl_flash.c ****             break;
3177:../drivers/fsl_flash.c ****         case 0x0DU:
3178:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1101;
3179:../drivers/fsl_flash.c ****             break;
3180:../drivers/fsl_flash.c ****         case 0x0EU:
3181:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1110;
3182:../drivers/fsl_flash.c ****             break;
3183:../drivers/fsl_flash.c ****         case 0x0FU:
3184:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_1111;
3185:../drivers/fsl_flash.c ****             break;
3186:../drivers/fsl_flash.c ****         default:
3187:../drivers/fsl_flash.c ****             config->EEpromTotalSize = FLEX_NVM_EEPROM_SIZE_FOR_EEESIZE_RESERVED;
3188:../drivers/fsl_flash.c ****             break;
3189:../drivers/fsl_flash.c ****     }
3190:../drivers/fsl_flash.c **** 
3191:../drivers/fsl_flash.c ****     /* Fill out partitioned DFlash size */
3192:../drivers/fsl_flash.c ****     dataIFRReadOut.FlexNVMPartitionCode &= 0x0FU;
3193:../drivers/fsl_flash.c ****     switch (dataIFRReadOut.FlexNVMPartitionCode)
3194:../drivers/fsl_flash.c ****     {
3195:../drivers/fsl_flash.c ****         case 0x00U:
3196:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000 != 0xFFFFFFFF)
3197:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000;
3198:../drivers/fsl_flash.c **** #else
3199:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3200:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0000 */
3201:../drivers/fsl_flash.c ****             break;
3202:../drivers/fsl_flash.c ****         case 0x01U:
3203:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001 != 0xFFFFFFFF)
3204:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001;
3205:../drivers/fsl_flash.c **** #else
3206:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3207:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0001 */
3208:../drivers/fsl_flash.c ****             break;
3209:../drivers/fsl_flash.c ****         case 0x02U:
3210:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010 != 0xFFFFFFFF)
3211:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010;
3212:../drivers/fsl_flash.c **** #else
3213:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3214:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0010 */
3215:../drivers/fsl_flash.c ****             break;
3216:../drivers/fsl_flash.c ****         case 0x03U:
3217:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011 != 0xFFFFFFFF)
3218:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011;
3219:../drivers/fsl_flash.c **** #else
3220:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3221:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0011 */
3222:../drivers/fsl_flash.c ****             break;
3223:../drivers/fsl_flash.c ****         case 0x04U:
3224:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100 != 0xFFFFFFFF)
3225:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100;
3226:../drivers/fsl_flash.c **** #else
3227:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3228:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0100 */
3229:../drivers/fsl_flash.c ****             break;
3230:../drivers/fsl_flash.c ****         case 0x05U:
3231:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101 != 0xFFFFFFFF)
3232:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101;
3233:../drivers/fsl_flash.c **** #else
3234:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3235:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0101 */
3236:../drivers/fsl_flash.c ****             break;
3237:../drivers/fsl_flash.c ****         case 0x06U:
3238:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110 != 0xFFFFFFFF)
3239:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110;
3240:../drivers/fsl_flash.c **** #else
3241:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3242:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0110 */
3243:../drivers/fsl_flash.c ****             break;
3244:../drivers/fsl_flash.c ****         case 0x07U:
3245:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111 != 0xFFFFFFFF)
3246:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111;
3247:../drivers/fsl_flash.c **** #else
3248:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3249:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_0111 */
3250:../drivers/fsl_flash.c ****             break;
3251:../drivers/fsl_flash.c ****         case 0x08U:
3252:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000 != 0xFFFFFFFF)
3253:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000;
3254:../drivers/fsl_flash.c **** #else
3255:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3256:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1000 */
3257:../drivers/fsl_flash.c ****             break;
3258:../drivers/fsl_flash.c ****         case 0x09U:
3259:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001 != 0xFFFFFFFF)
3260:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001;
3261:../drivers/fsl_flash.c **** #else
3262:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3263:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1001 */
3264:../drivers/fsl_flash.c ****             break;
3265:../drivers/fsl_flash.c ****         case 0x0AU:
3266:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010 != 0xFFFFFFFF)
3267:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010;
3268:../drivers/fsl_flash.c **** #else
3269:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3270:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1010 */
3271:../drivers/fsl_flash.c ****             break;
3272:../drivers/fsl_flash.c ****         case 0x0BU:
3273:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011 != 0xFFFFFFFF)
3274:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011;
3275:../drivers/fsl_flash.c **** #else
3276:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3277:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1011 */
3278:../drivers/fsl_flash.c ****             break;
3279:../drivers/fsl_flash.c ****         case 0x0CU:
3280:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100 != 0xFFFFFFFF)
3281:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100;
3282:../drivers/fsl_flash.c **** #else
3283:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3284:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1100 */
3285:../drivers/fsl_flash.c ****             break;
3286:../drivers/fsl_flash.c ****         case 0x0DU:
3287:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101 != 0xFFFFFFFF)
3288:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101;
3289:../drivers/fsl_flash.c **** #else
3290:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3291:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1101 */
3292:../drivers/fsl_flash.c ****             break;
3293:../drivers/fsl_flash.c ****         case 0x0EU:
3294:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110 != 0xFFFFFFFF)
3295:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110;
3296:../drivers/fsl_flash.c **** #else
3297:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3298:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1110 */
3299:../drivers/fsl_flash.c ****             break;
3300:../drivers/fsl_flash.c ****         case 0x0FU:
3301:../drivers/fsl_flash.c **** #if (FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111 != 0xFFFFFFFF)
3302:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111;
3303:../drivers/fsl_flash.c **** #else
3304:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3305:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_FLEX_NVM_DFLASH_SIZE_FOR_DEPART_1111 */
3306:../drivers/fsl_flash.c ****             break;
3307:../drivers/fsl_flash.c ****         default:
3308:../drivers/fsl_flash.c ****             config->DFlashTotalSize = FLEX_NVM_DFLASH_SIZE_FOR_DEPART_RESERVED;
3309:../drivers/fsl_flash.c ****             break;
3310:../drivers/fsl_flash.c ****     }
3311:../drivers/fsl_flash.c **** 
3312:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3313:../drivers/fsl_flash.c **** }
3314:../drivers/fsl_flash.c **** #endif /* FLASH_SSD_IS_FLEXNVM_ENABLED */
3315:../drivers/fsl_flash.c **** 
3316:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3317:../drivers/fsl_flash.c **** /*! @brief Validates the range of the given resource address.*/
3318:../drivers/fsl_flash.c **** static status_t flash_check_resource_range(uint32_t start,
3319:../drivers/fsl_flash.c ****                                            uint32_t lengthInBytes,
3320:../drivers/fsl_flash.c ****                                            uint32_t alignmentBaseline,
3321:../drivers/fsl_flash.c ****                                            flash_read_resource_option_t option)
3322:../drivers/fsl_flash.c **** {
3323:../drivers/fsl_flash.c ****     status_t status;
3324:../drivers/fsl_flash.c ****     uint32_t maxReadbleAddress;
3325:../drivers/fsl_flash.c **** 
3326:../drivers/fsl_flash.c ****     if ((start & (alignmentBaseline - 1)) || (lengthInBytes & (alignmentBaseline - 1)))
 552              		.loc 1 3326 0
 553 001c 069B     		ldr	r3, [sp, #24]
 554 001e 45EA0802 		orr	r2, r5, r8
 555 0022 013B     		subs	r3, r3, #1
 556 0024 1342     		tst	r3, r2
 557 0026 50D1     		bne	.L55
 558              	.LVL66:
3327:../drivers/fsl_flash.c ****     {
3328:../drivers/fsl_flash.c ****         return kStatus_FLASH_AlignmentError;
3329:../drivers/fsl_flash.c ****     }
3330:../drivers/fsl_flash.c **** 
3331:../drivers/fsl_flash.c ****     status = kStatus_FLASH_Success;
3332:../drivers/fsl_flash.c **** 
3333:../drivers/fsl_flash.c ****     maxReadbleAddress = start + lengthInBytes - 1;
3334:../drivers/fsl_flash.c ****     if (option == kFLASH_ResourceOptionVersionId)
 559              		.loc 1 3334 0
 560 0028 012C     		cmp	r4, #1
3333:../drivers/fsl_flash.c ****     if (option == kFLASH_ResourceOptionVersionId)
 561              		.loc 1 3333 0
 562 002a 05EB0802 		add	r2, r5, r8
 563              	.LVL67:
 564              		.loc 1 3334 0
 565 002e 05D1     		bne	.L44
3335:../drivers/fsl_flash.c ****     {
3336:../drivers/fsl_flash.c ****         if ((start != kFLASH_ResourceRangeVersionIdStart) ||
 566              		.loc 1 3336 0
 567 0030 082D     		cmp	r5, #8
 568 0032 01D1     		bne	.L54
 569 0034 102A     		cmp	r2, #16
 570 0036 0DD0     		beq	.L45
 571              	.LVL68:
 572              	.L54:
 573              	.LBE36:
 574              	.LBE35:
 575              	.LBE34:
 576              	.LBE33:
1364:../drivers/fsl_flash.c ****     }
 577              		.loc 1 1364 0
 578 0038 0420     		movs	r0, #4
 579 003a 18E0     		b	.L41
 580              	.LVL69:
 581              	.L44:
 582              	.LBB45:
 583              	.LBB43:
 584              	.LBB40:
 585              	.LBB37:
3337:../drivers/fsl_flash.c ****             ((start + lengthInBytes - 1) != kFLASH_ResourceRangeVersionIdEnd))
3338:../drivers/fsl_flash.c ****         {
3339:../drivers/fsl_flash.c ****             status = kStatus_FLASH_InvalidArgument;
3340:../drivers/fsl_flash.c ****         }
3341:../drivers/fsl_flash.c ****     }
3342:../drivers/fsl_flash.c ****     else if (option == kFLASH_ResourceOptionFlashIfr)
 586              		.loc 1 3342 0
 587 003c 002C     		cmp	r4, #0
 588 003e FBD1     		bne	.L54
3333:../drivers/fsl_flash.c ****     if (option == kFLASH_ResourceOptionVersionId)
 589              		.loc 1 3333 0
 590 0040 013A     		subs	r2, r2, #1
 591              	.LVL70:
3343:../drivers/fsl_flash.c ****     {
3344:../drivers/fsl_flash.c ****         if (maxReadbleAddress < kFLASH_ResourceRangePflashIfrSizeInBytes)
 592              		.loc 1 3344 0
 593 0042 B2F5806F 		cmp	r2, #1024
 594 0046 05D3     		bcc	.L45
3345:../drivers/fsl_flash.c ****         {
3346:../drivers/fsl_flash.c ****         }
3347:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
3348:../drivers/fsl_flash.c ****         else if ((start >= kFLASH_ResourceRangePflashSwapIfrStart) &&
 595              		.loc 1 3348 0
 596 0048 B5F5802F 		cmp	r5, #262144
 597 004c F4D3     		bcc	.L54
 598 004e 204B     		ldr	r3, .L61
 599 0050 9A42     		cmp	r2, r3
 600 0052 0FD8     		bhi	.L46
 601              	.LVL71:
 602              	.L45:
 603              	.LBE37:
 604              	.LBE40:
1387:../drivers/fsl_flash.c ****         }
 605              		.loc 1 1387 0
 606 0054 2406     		lsls	r4, r4, #24
 607              	.LVL72:
1380:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
 608              		.loc 1 1380 0
 609 0056 DFF880B0 		ldr	fp, .L61+8
1387:../drivers/fsl_flash.c ****         }
 610              		.loc 1 1387 0
 611 005a DFF88090 		ldr	r9, .L61+12
1383:../drivers/fsl_flash.c ****         }
 612              		.loc 1 1383 0
 613 005e DFF880A0 		ldr	r10, .L61+16
1387:../drivers/fsl_flash.c ****         }
 614              		.loc 1 1387 0
 615 0062 64F07F44 		orn	r4, r4, #-16777216
 616              	.LVL73:
 617              	.L47:
1377:../drivers/fsl_flash.c ****     {
 618              		.loc 1 1377 0
 619 0066 B8F1000F 		cmp	r8, #0
 620 006a 0AD1     		bne	.L52
 621 006c 4046     		mov	r0, r8
 622              	.LVL74:
 623              	.L41:
 624              	.LBE43:
 625              	.LBE45:
1414:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
 626              		.loc 1 1414 0
 627 006e 09B0     		add	sp, sp, #36
 628              		.cfi_remember_state
 629              		.cfi_def_cfa_offset 36
 630              		@ sp needed
 631 0070 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 632              	.LVL75:
 633              	.L46:
 634              		.cfi_restore_state
 635              	.LBB46:
 636              	.LBB44:
 637              	.LBB41:
 638              	.LBB38:
3349:../drivers/fsl_flash.c ****                  (maxReadbleAddress <= kFLASH_ResourceRangePflashSwapIfrEnd))
3350:../drivers/fsl_flash.c ****         {
3351:../drivers/fsl_flash.c ****         }
3352:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
3353:../drivers/fsl_flash.c ****         else if ((start >= kFLASH_ResourceRangeDflashIfrStart) &&
 639              		.loc 1 3353 0
 640 0074 B5F5000F 		cmp	r5, #8388608
 641 0078 DED3     		bcc	.L54
 642 007a 164B     		ldr	r3, .L61+4
 643 007c 9A42     		cmp	r2, r3
 644 007e E9D9     		bls	.L45
 645 0080 DAE7     		b	.L54
 646              	.LVL76:
 647              	.L52:
 648              	.LBE38:
 649              	.LBE41:
1380:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 4)
 650              		.loc 1 1380 0
 651 0082 25F07F43 		bic	r3, r5, #-16777216
 652 0086 43F04073 		orr	r3, r3, #50331648
 653 008a CBF80030 		str	r3, [fp]
1381:../drivers/fsl_flash.c ****         {
 654              		.loc 1 1381 0
 655 008e 069B     		ldr	r3, [sp, #24]
 656 0090 042B     		cmp	r3, #4
 657 0092 15D1     		bne	.L48
1383:../drivers/fsl_flash.c ****         }
 658              		.loc 1 1383 0
 659 0094 CAF80040 		str	r4, [r10]
 660              	.L49:
1394:../drivers/fsl_flash.c **** 
 661              		.loc 1 1394 0
 662 0098 3846     		mov	r0, r7
 663 009a FFF7FEFF 		bl	flash_command_sequence
 664              	.LVL77:
1396:../drivers/fsl_flash.c ****         {
 665              		.loc 1 1396 0
 666 009e 0028     		cmp	r0, #0
 667 00a0 E5D1     		bne	.L41
 668              	.LVL78:
1402:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
 669              		.loc 1 1402 0
 670 00a2 D9F80030 		ldr	r3, [r9]
 671 00a6 3360     		str	r3, [r6]
1403:../drivers/fsl_flash.c ****         {
 672              		.loc 1 1403 0
 673 00a8 069B     		ldr	r3, [sp, #24]
 674 00aa 082B     		cmp	r3, #8
1405:../drivers/fsl_flash.c ****         }
 675              		.loc 1 1405 0
 676 00ac 05BF     		ittet	eq
 677 00ae DAF80020 		ldreq	r2, [r10]
 678 00b2 7260     		streq	r2, [r6, #4]
1402:../drivers/fsl_flash.c ****         if (flashOperationInfo.resourceCmdAddressAligment == 8)
 679              		.loc 1 1402 0
 680 00b4 0436     		addne	r6, r6, #4
 681              	.LVL79:
1405:../drivers/fsl_flash.c ****         }
 682              		.loc 1 1405 0
 683 00b6 0836     		addeq	r6, r6, #8
 684              	.LVL80:
1408:../drivers/fsl_flash.c ****         /* update lengthInBytes for next iteration */
 685              		.loc 1 1408 0
 686 00b8 1D44     		add	r5, r5, r3
 687              	.LVL81:
1410:../drivers/fsl_flash.c ****     }
 688              		.loc 1 1410 0
 689 00ba A8EB0308 		sub	r8, r8, r3
 690              	.LVL82:
 691 00be D2E7     		b	.L47
 692              	.LVL83:
 693              	.L48:
1385:../drivers/fsl_flash.c ****         {
 694              		.loc 1 1385 0
 695 00c0 082B     		cmp	r3, #8
1387:../drivers/fsl_flash.c ****         }
 696              		.loc 1 1387 0
 697 00c2 08BF     		it	eq
 698 00c4 C9F80040 		streq	r4, [r9]
 699 00c8 E6E7     		b	.L49
 700              	.LVL84:
 701              	.L55:
 702              	.LBB42:
 703              	.LBB39:
3328:../drivers/fsl_flash.c ****     }
 704              		.loc 1 3328 0
 705 00ca 6520     		movs	r0, #101
 706 00cc CFE7     		b	.L41
 707              	.L62:
 708 00ce 00BF     		.align	2
 709              	.L61:
 710 00d0 FF030400 		.word	263167
 711 00d4 FF038000 		.word	8389631
 712 00d8 04000240 		.word	1073872900
 713 00dc 08000240 		.word	1073872904
 714 00e0 0C000240 		.word	1073872908
 715              	.LBE39:
 716              	.LBE42:
 717              	.LBE44:
 718              	.LBE46:
 719              		.cfi_endproc
 720              	.LFE155:
 722              		.section	.text.FLASH_ReadOnce,"ax",%progbits
 723              		.align	1
 724              		.global	FLASH_ReadOnce
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv4-sp-d16
 730              	FLASH_ReadOnce:
 731              	.LFB156:
1418:../drivers/fsl_flash.c ****     status_t returnCode;
 732              		.loc 1 1418 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              	.LVL85:
 737 0000 10B5     		push	{r4, lr}
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 4, -8
 740              		.cfi_offset 14, -4
1418:../drivers/fsl_flash.c ****     status_t returnCode;
 741              		.loc 1 1418 0
 742 0002 1446     		mov	r4, r2
1421:../drivers/fsl_flash.c ****     {
 743              		.loc 1 1421 0
 744 0004 88B1     		cbz	r0, .L66
1421:../drivers/fsl_flash.c ****     {
 745              		.loc 1 1421 0 is_stmt 0 discriminator 1
 746 0006 82B1     		cbz	r2, .L66
1427:../drivers/fsl_flash.c **** 
 747              		.loc 1 1427 0 is_stmt 1
 748 0008 0904     		lsls	r1, r1, #16
 749              	.LVL86:
 750 000a 094B     		ldr	r3, .L67
 751              	.LVL87:
 752 000c 094A     		ldr	r2, .L67+4
 753              	.LVL88:
 754 000e 01F47F01 		and	r1, r1, #16711680
 755 0012 0B43     		orrs	r3, r3, r1
 756 0014 1360     		str	r3, [r2]
1430:../drivers/fsl_flash.c **** 
 757              		.loc 1 1430 0
 758 0016 FFF7FEFF 		bl	flash_command_sequence
 759              	.LVL89:
1432:../drivers/fsl_flash.c ****     {
 760              		.loc 1 1432 0
 761 001a 28B9     		cbnz	r0, .L63
1434:../drivers/fsl_flash.c **** /* Note: Have to seperate the first index from the rest if it equals 0
 762              		.loc 1 1434 0
 763 001c 064B     		ldr	r3, .L67+8
 764 001e 1B68     		ldr	r3, [r3]
 765 0020 2360     		str	r3, [r4]
1445:../drivers/fsl_flash.c ****         }
 766              		.loc 1 1445 0
 767 0022 064B     		ldr	r3, .L67+12
 768 0024 1B68     		ldr	r3, [r3]
 769 0026 6360     		str	r3, [r4, #4]
 770              	.LVL90:
 771              	.L63:
1451:../drivers/fsl_flash.c **** 
 772              		.loc 1 1451 0
 773 0028 10BD     		pop	{r4, pc}
 774              	.LVL91:
 775              	.L66:
1423:../drivers/fsl_flash.c ****     }
 776              		.loc 1 1423 0
 777 002a 0420     		movs	r0, #4
 778              	.LVL92:
 779 002c FCE7     		b	.L63
 780              	.L68:
 781 002e 00BF     		.align	2
 782              	.L67:
 783 0030 FFFF0041 		.word	1090584575
 784 0034 04000240 		.word	1073872900
 785 0038 08000240 		.word	1073872904
 786 003c 0C000240 		.word	1073872908
 787              		.cfi_endproc
 788              	.LFE156:
 790              		.section	.text.FLASH_GetSecurityState,"ax",%progbits
 791              		.align	1
 792              		.global	FLASH_GetSecurityState
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	FLASH_GetSecurityState:
 799              	.LFB157:
1454:../drivers/fsl_flash.c ****     /* store data read from flash register */
 800              		.loc 1 1454 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805              	.LVL93:
1458:../drivers/fsl_flash.c ****     {
 806              		.loc 1 1458 0
 807 0000 98B1     		cbz	r0, .L74
1458:../drivers/fsl_flash.c ****     {
 808              		.loc 1 1458 0 is_stmt 0 discriminator 1
 809 0002 91B1     		cbz	r1, .L74
1464:../drivers/fsl_flash.c **** 
 810              		.loc 1 1464 0 is_stmt 1
 811 0004 0A4B     		ldr	r3, .L76
 812 0006 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 813 0008 DBB2     		uxtb	r3, r3
 814              	.LVL94:
1467:../drivers/fsl_flash.c ****     {
 815              		.loc 1 1467 0
 816 000a 03F00302 		and	r2, r3, #3
 817 000e 022A     		cmp	r2, #2
 818 0010 03D1     		bne	.L71
1470:../drivers/fsl_flash.c ****     }
 819              		.loc 1 1470 0
 820 0012 084B     		ldr	r3, .L76+4
 821              	.LVL95:
 822              	.L75:
1479:../drivers/fsl_flash.c ****         }
 823              		.loc 1 1479 0
 824 0014 0B60     		str	r3, [r1]
1488:../drivers/fsl_flash.c **** }
 825              		.loc 1 1488 0
 826 0016 0020     		movs	r0, #0
 827              	.LVL96:
 828 0018 7047     		bx	lr
 829              	.LVL97:
 830              	.L71:
1476:../drivers/fsl_flash.c ****         {
 831              		.loc 1 1476 0
 832 001a 03F0C003 		and	r3, r3, #192
 833              	.LVL98:
 834 001e 802B     		cmp	r3, #128
 835 0020 01D1     		bne	.L72
1479:../drivers/fsl_flash.c ****         }
 836              		.loc 1 1479 0
 837 0022 054B     		ldr	r3, .L76+8
 838 0024 F6E7     		b	.L75
 839              	.L72:
1484:../drivers/fsl_flash.c ****         }
 840              		.loc 1 1484 0
 841 0026 054B     		ldr	r3, .L76+12
 842 0028 F4E7     		b	.L75
 843              	.L74:
1460:../drivers/fsl_flash.c ****     }
 844              		.loc 1 1460 0
 845 002a 0420     		movs	r0, #4
 846              	.LVL99:
1489:../drivers/fsl_flash.c **** 
 847              		.loc 1 1489 0
 848 002c 7047     		bx	lr
 849              	.L77:
 850 002e 00BF     		.align	2
 851              	.L76:
 852 0030 00000240 		.word	1073872896
 853 0034 3CC33CC3 		.word	-1019428036
 854 0038 A55AA55A 		.word	1520786085
 855 003c A53CC35A 		.word	1522744485
 856              		.cfi_endproc
 857              	.LFE157:
 859              		.section	.text.FLASH_SecurityBypass,"ax",%progbits
 860              		.align	1
 861              		.global	FLASH_SecurityBypass
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu fpv4-sp-d16
 867              	FLASH_SecurityBypass:
 868              	.LFB158:
1492:../drivers/fsl_flash.c ****     uint8_t registerValue; /* registerValue */
 869              		.loc 1 1492 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              		@ link register save eliminated.
 874              	.LVL100:
1496:../drivers/fsl_flash.c ****     {
 875              		.loc 1 1496 0
 876 0000 98B1     		cbz	r0, .L81
1496:../drivers/fsl_flash.c ****     {
 877              		.loc 1 1496 0 is_stmt 0 discriminator 1
 878 0002 91B1     		cbz	r1, .L81
 879              	.LVL101:
1505:../drivers/fsl_flash.c **** 
 880              		.loc 1 1505 0 is_stmt 1
 881 0004 0B4B     		ldr	r3, .L83
 882 0006 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 883              	.LVL102:
1509:../drivers/fsl_flash.c ****     {
 884              		.loc 1 1509 0
 885 0008 03F00303 		and	r3, r3, #3
 886              	.LVL103:
 887 000c 022B     		cmp	r3, #2
 888 000e 0ED0     		beq	.L82
1512:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[0], backdoorKey[1], backdoorKey[2], bac
 889              		.loc 1 1512 0
 890 0010 094B     		ldr	r3, .L83+4
 891 0012 6FF03A42 		mvn	r2, #-1174405120
 892 0016 1A60     		str	r2, [r3]
 893 0018 0B68     		ldr	r3, [r1]	@ unaligned
1513:../drivers/fsl_flash.c ****         kFCCOBx[2] = BYTES_JOIN_TO_WORD_1_1_1_1(backdoorKey[4], backdoorKey[5], backdoorKey[6], bac
 894              		.loc 1 1513 0
 895 001a 084A     		ldr	r2, .L83+8
 896 001c 1BBA     		rev	r3, r3
 897 001e 1360     		str	r3, [r2]
 898 0020 4B68     		ldr	r3, [r1, #4]	@ unaligned
 899 0022 1BBA     		rev	r3, r3
1514:../drivers/fsl_flash.c **** 
 900              		.loc 1 1514 0
 901 0024 5360     		str	r3, [r2, #4]
1517:../drivers/fsl_flash.c ****     }
 902              		.loc 1 1517 0
 903 0026 FFF7FEBF 		b	flash_command_sequence
 904              	.LVL104:
 905              	.L81:
1498:../drivers/fsl_flash.c ****     }
 906              		.loc 1 1498 0
 907 002a 0420     		movs	r0, #4
 908              	.LVL105:
 909 002c 7047     		bx	lr
 910              	.LVL106:
 911              	.L82:
1502:../drivers/fsl_flash.c **** 
 912              		.loc 1 1502 0
 913 002e 0020     		movs	r0, #0
 914              	.LVL107:
1521:../drivers/fsl_flash.c **** 
 915              		.loc 1 1521 0
 916 0030 7047     		bx	lr
 917              	.L84:
 918 0032 00BF     		.align	2
 919              	.L83:
 920 0034 00000240 		.word	1073872896
 921 0038 04000240 		.word	1073872900
 922 003c 08000240 		.word	1073872904
 923              		.cfi_endproc
 924              	.LFE158:
 926              		.section	.text.FLASH_VerifyEraseAll,"ax",%progbits
 927              		.align	1
 928              		.global	FLASH_VerifyEraseAll
 929              		.syntax unified
 930              		.thumb
 931              		.thumb_func
 932              		.fpu fpv4-sp-d16
 934              	FLASH_VerifyEraseAll:
 935              	.LFB159:
1524:../drivers/fsl_flash.c ****     if (config == NULL)
 936              		.loc 1 1524 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              		@ link register save eliminated.
 941              	.LVL108:
1525:../drivers/fsl_flash.c ****     {
 942              		.loc 1 1525 0
 943 0000 40B1     		cbz	r0, .L86
1531:../drivers/fsl_flash.c **** 
 944              		.loc 1 1531 0
 945 0002 054B     		ldr	r3, .L87
 946 0004 43EA0141 		orr	r1, r3, r1, lsl #16
 947              	.LVL109:
 948 0008 03F58033 		add	r3, r3, #65536
 949 000c 0533     		adds	r3, r3, #5
 950 000e 1960     		str	r1, [r3]
1534:../drivers/fsl_flash.c **** }
 951              		.loc 1 1534 0
 952 0010 FFF7FEBF 		b	flash_command_sequence
 953              	.LVL110:
 954              	.L86:
1535:../drivers/fsl_flash.c **** 
 955              		.loc 1 1535 0
 956 0014 0420     		movs	r0, #4
 957              	.LVL111:
 958 0016 7047     		bx	lr
 959              	.L88:
 960              		.align	2
 961              	.L87:
 962 0018 FFFF0040 		.word	1073807359
 963              		.cfi_endproc
 964              	.LFE159:
 966              		.section	.text.FLASH_VerifyErase,"ax",%progbits
 967              		.align	1
 968              		.global	FLASH_VerifyErase
 969              		.syntax unified
 970              		.thumb
 971              		.thumb_func
 972              		.fpu fpv4-sp-d16
 974              	FLASH_VerifyErase:
 975              	.LFB160:
1538:../drivers/fsl_flash.c ****     /* Check arguments. */
 976              		.loc 1 1538 0
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 40
 979              		@ frame_needed = 0, uses_anonymous_args = 0
 980              	.LVL112:
 981 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 982              		.cfi_def_cfa_offset 36
 983              		.cfi_offset 4, -36
 984              		.cfi_offset 5, -32
 985              		.cfi_offset 6, -28
 986              		.cfi_offset 7, -24
 987              		.cfi_offset 8, -20
 988              		.cfi_offset 9, -16
 989              		.cfi_offset 10, -12
 990              		.cfi_offset 11, -8
 991              		.cfi_offset 14, -4
 992 0004 8BB0     		sub	sp, sp, #44
 993              		.cfi_def_cfa_offset 80
1538:../drivers/fsl_flash.c ****     /* Check arguments. */
 994              		.loc 1 1538 0
 995 0006 8246     		mov	r10, r0
 996 0008 0C46     		mov	r4, r1
 997 000a 1546     		mov	r5, r2
1546:../drivers/fsl_flash.c **** 
 998              		.loc 1 1546 0
 999 000c 02AA     		add	r2, sp, #8
 1000              	.LVL113:
1538:../drivers/fsl_flash.c ****     /* Check arguments. */
 1001              		.loc 1 1538 0
 1002 000e 1F46     		mov	r7, r3
1546:../drivers/fsl_flash.c **** 
 1003              		.loc 1 1546 0
 1004 0010 FFF7FEFF 		bl	flash_get_matched_operation_info
 1005              	.LVL114:
1548:../drivers/fsl_flash.c ****     if (returnCode)
 1006              		.loc 1 1548 0
 1007 0014 079B     		ldr	r3, [sp, #28]
 1008 0016 2A46     		mov	r2, r5
 1009 0018 2146     		mov	r1, r4
 1010 001a 5046     		mov	r0, r10
 1011 001c FFF7FEFF 		bl	flash_check_range
 1012              	.LVL115:
1549:../drivers/fsl_flash.c ****     {
 1013              		.loc 1 1549 0
 1014 0020 8146     		mov	r9, r0
 1015 0022 A0BB     		cbnz	r0, .L89
1554:../drivers/fsl_flash.c ****     start = flashOperationInfo.convertedAddress;
 1016              		.loc 1 1554 0
 1017 0024 02AA     		add	r2, sp, #8
 1018 0026 2146     		mov	r1, r4
 1019 0028 5046     		mov	r0, r10
 1020              	.LVL116:
 1021 002a FFF7FEFF 		bl	flash_get_matched_operation_info
 1022              	.LVL117:
1555:../drivers/fsl_flash.c ****     blockSize = flashOperationInfo.activeBlockSize;
 1023              		.loc 1 1555 0
 1024 002e 029C     		ldr	r4, [sp, #8]
 1025              	.LVL118:
1556:../drivers/fsl_flash.c **** 
 1026              		.loc 1 1556 0
 1027 0030 DDF810B0 		ldr	fp, [sp, #16]
 1028              	.LVL119:
1558:../drivers/fsl_flash.c ****     if (nextBlockStartAddress == start)
 1029              		.loc 1 1558 0
 1030 0034 6342     		negs	r3, r4
 1031 0036 CBF10002 		rsb	r2, fp, #0
 1032 003a 1340     		ands	r3, r3, r2
 1033 003c 5E42     		negs	r6, r3
 1034              	.LVL120:
1559:../drivers/fsl_flash.c ****     {
 1035              		.loc 1 1559 0
 1036 003e B442     		cmp	r4, r6
 1037 0040 01D1     		bne	.L91
 1038 0042 ABEB0306 		sub	r6, fp, r3
 1039              	.LVL121:
 1040              	.L91:
 1041              	.LBB47:
1579:../drivers/fsl_flash.c **** 
 1042              		.loc 1 1579 0
 1043 0046 3F02     		lsls	r7, r7, #8
 1044 0048 47F0FF07 		orr	r7, r7, #255
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1045              		.loc 1 1578 0
 1046 004c 134A     		ldr	r2, .L95
1579:../drivers/fsl_flash.c **** 
 1047              		.loc 1 1579 0
 1048 004e 1449     		ldr	r1, .L95+4
 1049 0050 1BE0     		b	.L92
 1050              	.LVL122:
 1051              	.L93:
1569:../drivers/fsl_flash.c ****         if (verifyLength > remainingBytes)
 1052              		.loc 1 1569 0
 1053 0052 A6EB0408 		sub	r8, r6, r4
 1054              	.LVL123:
 1055 0056 A845     		cmp	r8, r5
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1056              		.loc 1 1578 0
 1057 0058 24F07F40 		bic	r0, r4, #-16777216
1575:../drivers/fsl_flash.c **** 
 1058              		.loc 1 1575 0
 1059 005c 079B     		ldr	r3, [sp, #28]
 1060 005e 28BF     		it	cs
 1061 0060 A846     		movcs	r8, r5
 1062              	.LVL124:
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1063              		.loc 1 1578 0
 1064 0062 40F08070 		orr	r0, r0, #16777216
1575:../drivers/fsl_flash.c **** 
 1065              		.loc 1 1575 0
 1066 0066 B8FBF3F3 		udiv	r3, r8, r3
 1067              	.LVL125:
1579:../drivers/fsl_flash.c **** 
 1068              		.loc 1 1579 0
 1069 006a 47EA0343 		orr	r3, r7, r3, lsl #16
 1070              	.LVL126:
1578:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_2_1_1(numberOfPhrases, margin, 0xFFU);
 1071              		.loc 1 1578 0
 1072 006e 1060     		str	r0, [r2]
 1073              	.LVL127:
 1074 0070 0192     		str	r2, [sp, #4]
1582:../drivers/fsl_flash.c ****         if (returnCode)
 1075              		.loc 1 1582 0
 1076 0072 5046     		mov	r0, r10
1579:../drivers/fsl_flash.c **** 
 1077              		.loc 1 1579 0
 1078 0074 0B60     		str	r3, [r1]
 1079 0076 0091     		str	r1, [sp]
1582:../drivers/fsl_flash.c ****         if (returnCode)
 1080              		.loc 1 1582 0
 1081 0078 FFF7FEFF 		bl	flash_command_sequence
 1082              	.LVL128:
1583:../drivers/fsl_flash.c ****         {
 1083              		.loc 1 1583 0
 1084 007c 58B9     		cbnz	r0, .L94
 1085 007e DDE90012 		ldrd	r1, r2, [sp]
1588:../drivers/fsl_flash.c ****         start += verifyLength;
 1086              		.loc 1 1588 0
 1087 0082 A5EB0805 		sub	r5, r5, r8
 1088              	.LVL129:
1589:../drivers/fsl_flash.c ****         nextBlockStartAddress += blockSize;
 1089              		.loc 1 1589 0
 1090 0086 4444     		add	r4, r4, r8
 1091              	.LVL130:
1590:../drivers/fsl_flash.c ****     }
 1092              		.loc 1 1590 0
 1093 0088 5E44     		add	r6, r6, fp
 1094              	.LVL131:
 1095              	.L92:
 1096              	.LBE47:
1566:../drivers/fsl_flash.c ****     {
 1097              		.loc 1 1566 0
 1098 008a 002D     		cmp	r5, #0
 1099 008c E1D1     		bne	.L93
 1100              	.LVL132:
 1101              	.L89:
1594:../drivers/fsl_flash.c **** 
 1102              		.loc 1 1594 0
 1103 008e 4846     		mov	r0, r9
 1104 0090 0BB0     		add	sp, sp, #44
 1105              		.cfi_remember_state
 1106              		.cfi_def_cfa_offset 36
 1107              		@ sp needed
 1108 0092 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1109              	.LVL133:
 1110              	.L94:
 1111              		.cfi_restore_state
 1112              	.LBB48:
1582:../drivers/fsl_flash.c ****         if (returnCode)
 1113              		.loc 1 1582 0
 1114 0096 8146     		mov	r9, r0
 1115 0098 F9E7     		b	.L89
 1116              	.L96:
 1117 009a 00BF     		.align	2
 1118              	.L95:
 1119 009c 04000240 		.word	1073872900
 1120 00a0 08000240 		.word	1073872904
 1121              	.LBE48:
 1122              		.cfi_endproc
 1123              	.LFE160:
 1125              		.section	.text.FLASH_VerifyProgram,"ax",%progbits
 1126              		.align	1
 1127              		.global	FLASH_VerifyProgram
 1128              		.syntax unified
 1129              		.thumb
 1130              		.thumb_func
 1131              		.fpu fpv4-sp-d16
 1133              	FLASH_VerifyProgram:
 1134              	.LFB161:
1603:../drivers/fsl_flash.c ****     status_t returnCode;
 1135              		.loc 1 1603 0
 1136              		.cfi_startproc
 1137              		@ args = 12, pretend = 0, frame = 40
 1138              		@ frame_needed = 0, uses_anonymous_args = 0
 1139              	.LVL134:
 1140 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1141              		.cfi_def_cfa_offset 36
 1142              		.cfi_offset 4, -36
 1143              		.cfi_offset 5, -32
 1144              		.cfi_offset 6, -28
 1145              		.cfi_offset 7, -24
 1146              		.cfi_offset 8, -20
 1147              		.cfi_offset 9, -16
 1148              		.cfi_offset 10, -12
 1149              		.cfi_offset 11, -8
 1150              		.cfi_offset 14, -4
 1151 0004 8146     		mov	r9, r0
 1152 0006 8BB0     		sub	sp, sp, #44
 1153              		.cfi_def_cfa_offset 80
1603:../drivers/fsl_flash.c ****     status_t returnCode;
 1154              		.loc 1 1603 0
 1155 0008 0C46     		mov	r4, r1
 1156 000a 1646     		mov	r6, r2
1607:../drivers/fsl_flash.c ****     {
 1157              		.loc 1 1607 0
 1158 000c 9846     		mov	r8, r3
 1159 000e 002B     		cmp	r3, #0
 1160 0010 3CD0     		beq	.L103
1612:../drivers/fsl_flash.c **** 
 1161              		.loc 1 1612 0
 1162 0012 02AA     		add	r2, sp, #8
 1163              	.LVL135:
 1164 0014 FFF7FEFF 		bl	flash_get_matched_operation_info
 1165              	.LVL136:
1614:../drivers/fsl_flash.c ****     if (returnCode)
 1166              		.loc 1 1614 0
 1167 0018 2146     		mov	r1, r4
 1168 001a 099B     		ldr	r3, [sp, #36]
 1169 001c 3246     		mov	r2, r6
 1170 001e 4846     		mov	r0, r9
 1171 0020 FFF7FEFF 		bl	flash_check_range
 1172              	.LVL137:
1615:../drivers/fsl_flash.c ****     {
 1173              		.loc 1 1615 0
 1174 0024 0446     		mov	r4, r0
 1175              	.LVL138:
 1176 0026 58B9     		cbnz	r0, .L97
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1177              		.loc 1 1626 0
 1178 0028 9DF85050 		ldrb	r5, [sp, #80]	@ zero_extendqisi2
1620:../drivers/fsl_flash.c **** 
 1179              		.loc 1 1620 0
 1180 002c 029F     		ldr	r7, [sp, #8]
 1181              	.LVL139:
1625:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
 1182              		.loc 1 1625 0
 1183 002e DFF864A0 		ldr	r10, .L108+4
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1184              		.loc 1 1626 0
 1185 0032 DFF864B0 		ldr	fp, .L108+8
1627:../drivers/fsl_flash.c **** 
 1186              		.loc 1 1627 0
 1187 0036 1649     		ldr	r1, .L108
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1188              		.loc 1 1626 0
 1189 0038 2D06     		lsls	r5, r5, #24
 1190 003a 65F07F45 		orn	r5, r5, #-16777216
 1191              	.LVL140:
 1192              	.L99:
1622:../drivers/fsl_flash.c ****     {
 1193              		.loc 1 1622 0
 1194 003e 1EB9     		cbnz	r6, .L102
 1195              	.LVL141:
 1196              	.L97:
1652:../drivers/fsl_flash.c **** 
 1197              		.loc 1 1652 0
 1198 0040 2046     		mov	r0, r4
 1199 0042 0BB0     		add	sp, sp, #44
 1200              		.cfi_remember_state
 1201              		.cfi_def_cfa_offset 36
 1202              		@ sp needed
 1203 0044 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1204              	.LVL142:
 1205              	.L102:
 1206              		.cfi_restore_state
1625:../drivers/fsl_flash.c ****         kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(margin, 0xFFFFFFU);
 1207              		.loc 1 1625 0
 1208 0048 27F07F40 		bic	r0, r7, #-16777216
 1209 004c 40F00070 		orr	r0, r0, #33554432
 1210 0050 CAF80000 		str	r0, [r10]
1626:../drivers/fsl_flash.c ****         kFCCOBx[2] = *expectedData;
 1211              		.loc 1 1626 0
 1212 0054 CBF80050 		str	r5, [fp]
1627:../drivers/fsl_flash.c **** 
 1213              		.loc 1 1627 0
 1214 0058 D8F80000 		ldr	r0, [r8]
 1215 005c 0860     		str	r0, [r1]
1630:../drivers/fsl_flash.c **** 
 1216              		.loc 1 1630 0
 1217 005e 4846     		mov	r0, r9
1627:../drivers/fsl_flash.c **** 
 1218              		.loc 1 1627 0
 1219 0060 0191     		str	r1, [sp, #4]
1630:../drivers/fsl_flash.c **** 
 1220              		.loc 1 1630 0
 1221 0062 FFF7FEFF 		bl	flash_command_sequence
 1222              	.LVL143:
1633:../drivers/fsl_flash.c ****         {
 1223              		.loc 1 1633 0
 1224 0066 0199     		ldr	r1, [sp, #4]
 1225 0068 48B1     		cbz	r0, .L100
1635:../drivers/fsl_flash.c ****             {
 1226              		.loc 1 1635 0
 1227 006a 159B     		ldr	r3, [sp, #84]
 1228 006c 03B1     		cbz	r3, .L101
1637:../drivers/fsl_flash.c ****             }
 1229              		.loc 1 1637 0
 1230 006e 1F60     		str	r7, [r3]
 1231              	.L101:
1639:../drivers/fsl_flash.c ****             {
 1232              		.loc 1 1639 0
 1233 0070 169B     		ldr	r3, [sp, #88]
 1234 0072 13B1     		cbz	r3, .L104
1641:../drivers/fsl_flash.c ****             }
 1235              		.loc 1 1641 0
 1236 0074 169A     		ldr	r2, [sp, #88]
 1237 0076 0023     		movs	r3, #0
 1238 0078 1360     		str	r3, [r2]
 1239              	.L104:
1630:../drivers/fsl_flash.c **** 
 1240              		.loc 1 1630 0
 1241 007a 0446     		mov	r4, r0
 1242 007c E0E7     		b	.L97
 1243              	.L100:
1646:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
 1244              		.loc 1 1646 0
 1245 007e 0998     		ldr	r0, [sp, #36]
 1246              	.LVL144:
1647:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
 1247              		.loc 1 1647 0
 1248 0080 20F0030C 		bic	ip, r0, #3
1646:../drivers/fsl_flash.c ****         expectedData += flashOperationInfo.checkCmdAddressAligment / sizeof(*expectedData);
 1249              		.loc 1 1646 0
 1250 0084 361A     		subs	r6, r6, r0
 1251              	.LVL145:
1647:../drivers/fsl_flash.c ****         start += flashOperationInfo.checkCmdAddressAligment;
 1252              		.loc 1 1647 0
 1253 0086 E044     		add	r8, r8, ip
 1254              	.LVL146:
1648:../drivers/fsl_flash.c ****     }
 1255              		.loc 1 1648 0
 1256 0088 0744     		add	r7, r7, r0
 1257              	.LVL147:
 1258 008a D8E7     		b	.L99
 1259              	.LVL148:
 1260              	.L103:
1609:../drivers/fsl_flash.c ****     }
 1261              		.loc 1 1609 0
 1262 008c 0424     		movs	r4, #4
 1263 008e D7E7     		b	.L97
 1264              	.L109:
 1265              		.align	2
 1266              	.L108:
 1267 0090 0C000240 		.word	1073872908
 1268 0094 04000240 		.word	1073872900
 1269 0098 08000240 		.word	1073872904
 1270              		.cfi_endproc
 1271              	.LFE161:
 1273              		.section	.text.FLASH_VerifyEraseAllExecuteOnlySegments,"ax",%progbits
 1274              		.align	1
 1275              		.global	FLASH_VerifyEraseAllExecuteOnlySegments
 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1279              		.fpu fpv4-sp-d16
 1281              	FLASH_VerifyEraseAllExecuteOnlySegments:
 1282              	.LFB162:
1655:../drivers/fsl_flash.c ****     if (config == NULL)
 1283              		.loc 1 1655 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 0
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288              	.LVL149:
1656:../drivers/fsl_flash.c ****     {
 1289              		.loc 1 1656 0
 1290 0000 30B1     		cbz	r0, .L111
1662:../drivers/fsl_flash.c **** 
 1291              		.loc 1 1662 0
 1292 0002 044B     		ldr	r3, .L112
 1293 0004 43EA0141 		orr	r1, r3, r1, lsl #16
 1294              	.LVL150:
 1295 0008 034B     		ldr	r3, .L112+4
 1296 000a 1960     		str	r1, [r3]
1665:../drivers/fsl_flash.c **** }
 1297              		.loc 1 1665 0
 1298 000c FFF7FEBF 		b	flash_command_sequence
 1299              	.LVL151:
 1300              	.L111:
1666:../drivers/fsl_flash.c **** 
 1301              		.loc 1 1666 0
 1302 0010 0420     		movs	r0, #4
 1303              	.LVL152:
 1304 0012 7047     		bx	lr
 1305              	.L113:
 1306              		.align	2
 1307              	.L112:
 1308 0014 FFFF004A 		.word	1241579519
 1309 0018 04000240 		.word	1073872900
 1310              		.cfi_endproc
 1311              	.LFE162:
 1313              		.section	.text.FLASH_IsProtected,"ax",%progbits
 1314              		.align	1
 1315              		.global	FLASH_IsProtected
 1316              		.syntax unified
 1317              		.thumb
 1318              		.thumb_func
 1319              		.fpu fpv4-sp-d16
 1321              	FLASH_IsProtected:
 1322              	.LFB163:
1672:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
 1323              		.loc 1 1672 0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 176
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 1327              	.LVL153:
 1328 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1329              		.cfi_def_cfa_offset 32
 1330              		.cfi_offset 4, -32
 1331              		.cfi_offset 5, -28
 1332              		.cfi_offset 6, -24
 1333              		.cfi_offset 7, -20
 1334              		.cfi_offset 8, -16
 1335              		.cfi_offset 9, -12
 1336              		.cfi_offset 10, -8
 1337              		.cfi_offset 14, -4
 1338 0004 0746     		mov	r7, r0
 1339 0006 ACB0     		sub	sp, sp, #176
 1340              		.cfi_def_cfa_offset 208
1672:../drivers/fsl_flash.c ****     uint32_t endAddress;           /* end address for protection check */
 1341              		.loc 1 1672 0
 1342 0008 0C46     		mov	r4, r1
 1343 000a 1646     		mov	r6, r2
1691:../drivers/fsl_flash.c ****     {
 1344              		.loc 1 1691 0
 1345 000c 1D46     		mov	r5, r3
 1346 000e 002B     		cmp	r3, #0
 1347 0010 77D0     		beq	.L133
1697:../drivers/fsl_flash.c ****     if (returnCode)
 1348              		.loc 1 1697 0
 1349 0012 0823     		movs	r3, #8
 1350              	.LVL154:
 1351 0014 FFF7FEFF 		bl	flash_check_range
 1352              	.LVL155:
1698:../drivers/fsl_flash.c ****     {
 1353              		.loc 1 1698 0
 1354 0018 0028     		cmp	r0, #0
 1355 001a 39D1     		bne	.L114
 1356              	.LVL156:
 1357              	.LBB51:
 1358              	.LBB52:
3354:../drivers/fsl_flash.c ****                  (maxReadbleAddress <= kFLASH_ResourceRangeDflashIfrEnd))
3355:../drivers/fsl_flash.c ****         {
3356:../drivers/fsl_flash.c ****         }
3357:../drivers/fsl_flash.c ****         else
3358:../drivers/fsl_flash.c ****         {
3359:../drivers/fsl_flash.c ****             status = kStatus_FLASH_InvalidArgument;
3360:../drivers/fsl_flash.c ****         }
3361:../drivers/fsl_flash.c ****     }
3362:../drivers/fsl_flash.c ****     else
3363:../drivers/fsl_flash.c ****     {
3364:../drivers/fsl_flash.c ****         status = kStatus_FLASH_InvalidArgument;
3365:../drivers/fsl_flash.c ****     }
3366:../drivers/fsl_flash.c **** 
3367:../drivers/fsl_flash.c ****     return status;
3368:../drivers/fsl_flash.c **** }
3369:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD */
3370:../drivers/fsl_flash.c **** 
3371:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD) && FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD
3372:../drivers/fsl_flash.c **** /*! @brief Validates the gived swap control option.*/
3373:../drivers/fsl_flash.c **** static status_t flash_check_swap_control_option(flash_swap_control_option_t option)
3374:../drivers/fsl_flash.c **** {
3375:../drivers/fsl_flash.c ****     if ((option == kFLASH_SwapControlOptionIntializeSystem) || (option == kFLASH_SwapControlOptionS
3376:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionSetInCompleteState) || (option == kFLASH_SwapControlOpti
3377:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionDisableSystem))
3378:../drivers/fsl_flash.c ****     {
3379:../drivers/fsl_flash.c ****         return kStatus_FLASH_Success;
3380:../drivers/fsl_flash.c ****     }
3381:../drivers/fsl_flash.c **** 
3382:../drivers/fsl_flash.c ****     return kStatus_FLASH_InvalidArgument;
3383:../drivers/fsl_flash.c **** }
3384:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
3385:../drivers/fsl_flash.c **** 
3386:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP) && FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP
3387:../drivers/fsl_flash.c **** /*! @brief Validates the gived address to see if it is equal to swap indicator address in pflash sw
3388:../drivers/fsl_flash.c **** static status_t flash_validate_swap_indicator_address(flash_config_t *config, uint32_t address)
3389:../drivers/fsl_flash.c **** {
3390:../drivers/fsl_flash.c ****     flash_swap_ifr_field_data_t flashSwapIfrFieldData;
3391:../drivers/fsl_flash.c ****     uint32_t swapIndicatorAddress;
3392:../drivers/fsl_flash.c **** 
3393:../drivers/fsl_flash.c ****     status_t returnCode;
3394:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD) && FSL_FEATURE_FLASH_HAS_READ_RESOURCE_CMD
3395:../drivers/fsl_flash.c ****     returnCode =
3396:../drivers/fsl_flash.c ****         FLASH_ReadResource(config, kFLASH_ResourceRangePflashSwapIfrStart, flashSwapIfrFieldData.fl
3397:../drivers/fsl_flash.c ****                            sizeof(flashSwapIfrFieldData.flashSwapIfrData), kFLASH_ResourceOptionFla
3398:../drivers/fsl_flash.c **** 
3399:../drivers/fsl_flash.c ****     if (returnCode != kStatus_FLASH_Success)
3400:../drivers/fsl_flash.c ****     {
3401:../drivers/fsl_flash.c ****         return returnCode;
3402:../drivers/fsl_flash.c ****     }
3403:../drivers/fsl_flash.c **** #else
3404:../drivers/fsl_flash.c ****     {
3405:../drivers/fsl_flash.c ****         /* From RM, the actual info are stored in FCCOB6,7 */
3406:../drivers/fsl_flash.c ****         uint32_t returnValue[2];
3407:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapAddr, returnValue, 4);
3408:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3409:../drivers/fsl_flash.c ****         {
3410:../drivers/fsl_flash.c ****             return returnCode;
3411:../drivers/fsl_flash.c ****         }
3412:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapIndicatorAddress = (uint16_t)returnValue[0];
3413:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapEnable, returnValue, 4);
3414:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3415:../drivers/fsl_flash.c ****         {
3416:../drivers/fsl_flash.c ****             return returnCode;
3417:../drivers/fsl_flash.c ****         }
3418:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapEnableWord = (uint16_t)returnValue[0];
3419:../drivers/fsl_flash.c ****         returnCode = FLASH_ReadOnce(config, kFLASH_RecordIndexSwapDisable, returnValue, 4);
3420:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
3421:../drivers/fsl_flash.c ****         {
3422:../drivers/fsl_flash.c ****             return returnCode;
3423:../drivers/fsl_flash.c ****         }
3424:../drivers/fsl_flash.c ****         flashSwapIfrFieldData.flashSwapIfrField.swapDisableWord = (uint16_t)returnValue[0];
3425:../drivers/fsl_flash.c ****     }
3426:../drivers/fsl_flash.c **** #endif
3427:../drivers/fsl_flash.c **** 
3428:../drivers/fsl_flash.c ****     /* The high bits value of Swap Indicator Address is stored in Program Flash Swap IFR Field,
3429:../drivers/fsl_flash.c ****      * the low severval bit value of Swap Indicator Address is always 1'b0 */
3430:../drivers/fsl_flash.c ****     swapIndicatorAddress = (uint32_t)flashSwapIfrFieldData.flashSwapIfrField.swapIndicatorAddress *
3431:../drivers/fsl_flash.c ****                            FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT;
3432:../drivers/fsl_flash.c ****     if (address != swapIndicatorAddress)
3433:../drivers/fsl_flash.c ****     {
3434:../drivers/fsl_flash.c ****         return kStatus_FLASH_SwapIndicatorAddressError;
3435:../drivers/fsl_flash.c ****     }
3436:../drivers/fsl_flash.c **** 
3437:../drivers/fsl_flash.c ****     return returnCode;
3438:../drivers/fsl_flash.c **** }
3439:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
3440:../drivers/fsl_flash.c **** 
3441:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD) && FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FU
3442:../drivers/fsl_flash.c **** /*! @brief Validates the gived flexram function option.*/
3443:../drivers/fsl_flash.c **** static inline status_t flasn_check_flexram_function_option_range(flash_flexram_function_option_t op
3444:../drivers/fsl_flash.c **** {
3445:../drivers/fsl_flash.c ****     if ((option != kFLASH_FlexramFunctionOptionAvailableAsRam) &&
3446:../drivers/fsl_flash.c ****         (option != kFLASH_FlexramFunctionOptionAvailableForEeprom))
3447:../drivers/fsl_flash.c ****     {
3448:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3449:../drivers/fsl_flash.c ****     }
3450:../drivers/fsl_flash.c **** 
3451:../drivers/fsl_flash.c ****     return kStatus_FLASH_Success;
3452:../drivers/fsl_flash.c **** }
3453:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SET_FLEXRAM_FUNCTION_CMD */
3454:../drivers/fsl_flash.c **** 
3455:../drivers/fsl_flash.c **** /*! @brief Gets the flash protection information (region size, region count).*/
3456:../drivers/fsl_flash.c **** static status_t flash_get_protection_info(flash_config_t *config, flash_protection_config_t *info)
3457:../drivers/fsl_flash.c **** {
3458:../drivers/fsl_flash.c ****     uint32_t pflashTotalSize;
3459:../drivers/fsl_flash.c **** 
3460:../drivers/fsl_flash.c ****     if ((config == NULL) || (info == NULL))
 1359              		.loc 1 3460 0
 1360 001c 002F     		cmp	r7, #0
 1361 001e 70D0     		beq	.L133
3461:../drivers/fsl_flash.c ****     {
3462:../drivers/fsl_flash.c ****         return kStatus_FLASH_InvalidArgument;
3463:../drivers/fsl_flash.c ****     }
3464:../drivers/fsl_flash.c **** 
3465:../drivers/fsl_flash.c ****     /* Clean up info Structure*/
3466:../drivers/fsl_flash.c ****     memset(info, 0, sizeof(flash_protection_config_t));
3467:../drivers/fsl_flash.c **** 
3468:../drivers/fsl_flash.c **** /* Note: KW40 has a secondary flash, but it doesn't have independent protection register*/
3469:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && (!FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGI
3470:../drivers/fsl_flash.c ****     pflashTotalSize = MAIN_FLASH_FEATURE_PFLASH_BLOCK_COUNT * MAIN_FLASH_FEATURE_PFLASH_BLOCK_SIZE 
3471:../drivers/fsl_flash.c ****                       FSL_FEATURE_FLASH_PFLASH_1_BLOCK_COUNT * FSL_FEATURE_FLASH_PFLASH_1_BLOCK_SIZ
3472:../drivers/fsl_flash.c ****     info->regionBase = MAIN_FLASH_FEATURE_PFLASH_START_ADDRESS;
3473:../drivers/fsl_flash.c **** #else
3474:../drivers/fsl_flash.c ****     pflashTotalSize = config->PFlashTotalSize;
3475:../drivers/fsl_flash.c ****     info->regionBase = config->PFlashBlockBase;
 1362              		.loc 1 3475 0
 1363 0020 D7E90023 		ldrd	r2, r3, [r7]
 1364              	.LVL157:
3476:../drivers/fsl_flash.c **** #endif
3477:../drivers/fsl_flash.c **** 
3478:../drivers/fsl_flash.c **** #if FLASH_SSD_IS_SECONDARY_FLASH_ENABLED && FLASH_SSD_SECONDARY_FLASH_HAS_ITS_OWN_PROTECTION_REGIST
3479:../drivers/fsl_flash.c ****     if (config->FlashMemoryIndex == (uint8_t)kFLASH_MemoryIndexSecondaryFlash)
3480:../drivers/fsl_flash.c ****     {
3481:../drivers/fsl_flash.c ****         info->regionCount = SECONDARY_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT;
3482:../drivers/fsl_flash.c ****     }
3483:../drivers/fsl_flash.c ****     else
3484:../drivers/fsl_flash.c **** #endif
3485:../drivers/fsl_flash.c ****     {
3486:../drivers/fsl_flash.c ****         info->regionCount = MAIN_FLASH_FEATURE_PFLASH_PROTECTION_REGION_COUNT;
3487:../drivers/fsl_flash.c ****     }
3488:../drivers/fsl_flash.c **** 
3489:../drivers/fsl_flash.c ****     /* Calculate the size of the flash protection region
3490:../drivers/fsl_flash.c ****      * If the flash density is > 32KB, then protection region is 1/32 of total flash density
3491:../drivers/fsl_flash.c ****      * Else if flash density is < 32KB, then flash protection region is set to 1KB */
3492:../drivers/fsl_flash.c ****     if (pflashTotalSize > info->regionCount * 1024)
 1365              		.loc 1 3492 0
 1366 0024 B3F5004F 		cmp	r3, #32768
3493:../drivers/fsl_flash.c ****     {
3494:../drivers/fsl_flash.c ****         info->regionSize = (pflashTotalSize) / info->regionCount;
 1367              		.loc 1 3494 0
 1368 0028 8CBF     		ite	hi
 1369 002a 5B09     		lsrhi	r3, r3, #5
3495:../drivers/fsl_flash.c ****     }
3496:../drivers/fsl_flash.c ****     else
3497:../drivers/fsl_flash.c ****     {
3498:../drivers/fsl_flash.c ****         info->regionSize = 1024;
 1370              		.loc 1 3498 0
 1371 002c 4FF48063 		movls	r3, #1024
 1372 0030 0193     		str	r3, [sp, #4]
 1373              	.LVL158:
3486:../drivers/fsl_flash.c ****     }
 1374              		.loc 1 3486 0
 1375 0032 2021     		movs	r1, #32
 1376              	.LBE52:
 1377              	.LBE51:
1720:../drivers/fsl_flash.c ****         regionCounter++;
 1378              		.loc 1 1720 0
 1379 0034 DDF804E0 		ldr	lr, [sp, #4]
 1380              	.LBB54:
 1381              	.LBB53:
3475:../drivers/fsl_flash.c **** #endif
 1382              		.loc 1 3475 0
 1383 0038 0092     		str	r2, [sp]
3486:../drivers/fsl_flash.c ****     }
 1384              		.loc 1 3486 0
 1385 003a 0291     		str	r1, [sp, #8]
 1386              	.LBE53:
 1387              	.LBE54:
1714:../drivers/fsl_flash.c **** 
 1388              		.loc 1 1714 0
 1389 003c 0023     		movs	r3, #0
1719:../drivers/fsl_flash.c ****             flashProtectionInfo.regionBase + flashProtectionInfo.regionSize * regionCounter;
 1390              		.loc 1 1719 0
 1391 003e 0BAF     		add	r7, sp, #44
 1392              	.LVL159:
 1393              	.L118:
 1394 0040 47F82320 		str	r2, [r7, r3, lsl #2]
1721:../drivers/fsl_flash.c ****     }
 1395              		.loc 1 1721 0
 1396 0044 0133     		adds	r3, r3, #1
 1397              	.LVL160:
1717:../drivers/fsl_flash.c ****     {
 1398              		.loc 1 1717 0
 1399 0046 212B     		cmp	r3, #33
 1400 0048 7244     		add	r2, r2, lr
 1401 004a F9D1     		bne	.L118
1758:../drivers/fsl_flash.c ****             }
 1402              		.loc 1 1758 0
 1403 004c DFF8B890 		ldr	r9, .L138
1733:../drivers/fsl_flash.c ****     while (regionCounter < flashProtectionInfo.regionCount)
 1404              		.loc 1 1733 0
 1405 0050 0023     		movs	r3, #0
 1406              	.LVL161:
 1407 0052 0DF10C0C 		add	ip, sp, #12
 1408              	.L119:
 1409              	.LVL162:
1758:../drivers/fsl_flash.c ****             }
 1410              		.loc 1 1758 0
 1411 0056 99F81020 		ldrb	r2, [r9, #16]	@ zero_extendqisi2
 1412 005a 2CA9     		add	r1, sp, #176
 1413 005c 1944     		add	r1, r1, r3
 1414 005e 1A41     		asrs	r2, r2, r3
 1415 0060 02F00102 		and	r2, r2, #1
 1416 0064 01F8A42C 		strb	r2, [r1, #-164]
 1417 0068 5A1C     		adds	r2, r3, #1
 1418 006a A3F1170A 		sub	r10, r3, #23
 1419 006e 6244     		add	r2, r2, ip
 1420 0070 D91F     		subs	r1, r3, #7
 1421 0072 A3F10F08 		sub	r8, r3, #15
 1422              	.LVL163:
 1423              	.L121:
 1424 0076 A2EB0C03 		sub	r3, r2, ip
 1425              	.LVL164:
1734:../drivers/fsl_flash.c ****     {
 1426              		.loc 1 1734 0
 1427 007a 1F2B     		cmp	r3, #31
 1428 007c 0BD9     		bls	.L125
 1429 007e 2146     		mov	r1, r4
 1430 0080 0023     		movs	r3, #0
 1431              	.LVL165:
 1432 0082 1C46     		mov	r4, r3
 1433              	.LVL166:
 1434 0084 9846     		mov	r8, r3
1711:../drivers/fsl_flash.c **** 
 1435              		.loc 1 1711 0
 1436 0086 0E44     		add	r6, r6, r1
 1437              	.LVL167:
 1438              	.L126:
1817:../drivers/fsl_flash.c ****     {
 1439              		.loc 1 1817 0
 1440 0088 B142     		cmp	r1, r6
 1441 008a 21D3     		bcc	.L129
1841:../drivers/fsl_flash.c ****     {
 1442              		.loc 1 1841 0
 1443 008c A3BB     		cbnz	r3, .L130
 1444              	.LVL168:
 1445              	.L137:
1854:../drivers/fsl_flash.c ****     }
 1446              		.loc 1 1854 0
 1447 008e 2B70     		strb	r3, [r5]
 1448              	.LVL169:
 1449              	.L114:
1858:../drivers/fsl_flash.c **** 
 1450              		.loc 1 1858 0
 1451 0090 2CB0     		add	sp, sp, #176
 1452              		.cfi_remember_state
 1453              		.cfi_def_cfa_offset 32
 1454              		@ sp needed
 1455 0092 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1456              	.LVL170:
 1457              	.L125:
 1458              		.cfi_restore_state
1756:../drivers/fsl_flash.c ****             {
 1459              		.loc 1 1756 0
 1460 0096 072B     		cmp	r3, #7
 1461 0098 DDD9     		bls	.L119
1760:../drivers/fsl_flash.c ****             {
 1462              		.loc 1 1760 0
 1463 009a 0729     		cmp	r1, #7
 1464 009c 0CD8     		bhi	.L122
1762:../drivers/fsl_flash.c ****             }
 1465              		.loc 1 1762 0
 1466 009e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 1467              	.LVL171:
 1468 00a2 0B41     		asrs	r3, r3, r1
 1469              	.L136:
1780:../drivers/fsl_flash.c ****             }
 1470              		.loc 1 1780 0
 1471 00a4 03F00103 		and	r3, r3, #1
 1472 00a8 1370     		strb	r3, [r2]
 1473 00aa 0AF1010A 		add	r10, r10, #1
 1474 00ae 0132     		adds	r2, r2, #1
 1475              	.LVL172:
 1476 00b0 0131     		adds	r1, r1, #1
 1477 00b2 08F10108 		add	r8, r8, #1
 1478 00b6 DEE7     		b	.L121
 1479              	.LVL173:
 1480              	.L122:
1771:../drivers/fsl_flash.c ****             {
 1481              		.loc 1 1771 0
 1482 00b8 B8F1070F 		cmp	r8, #7
1773:../drivers/fsl_flash.c ****             }
 1483              		.loc 1 1773 0
 1484 00bc 95BF     		itete	ls
 1485 00be 99F81230 		ldrbls	r3, [r9, #18]	@ zero_extendqisi2
 1486              	.LVL174:
1780:../drivers/fsl_flash.c ****             }
 1487              		.loc 1 1780 0
 1488 00c2 99F81330 		ldrbhi	r3, [r9, #19]	@ zero_extendqisi2
1773:../drivers/fsl_flash.c ****             }
 1489              		.loc 1 1773 0
 1490 00c6 43FA08F3 		asrls	r3, r3, r8
1780:../drivers/fsl_flash.c ****             }
 1491              		.loc 1 1780 0
 1492 00ca 43FA0AF3 		asrhi	r3, r3, r10
 1493 00ce E9E7     		b	.L136
 1494              	.LVL175:
 1495              	.L129:
1823:../drivers/fsl_flash.c ****         {
 1496              		.loc 1 1823 0
 1497 00d0 57F82420 		ldr	r2, [r7, r4, lsl #2]
 1498 00d4 8A42     		cmp	r2, r1
 1499 00d6 04F10104 		add	r4, r4, #1
 1500              	.LVL176:
 1501 00da D5D8     		bhi	.L126
1823:../drivers/fsl_flash.c ****         {
 1502              		.loc 1 1823 0 is_stmt 0 discriminator 1
 1503 00dc 57F82420 		ldr	r2, [r7, r4, lsl #2]
 1504 00e0 8A42     		cmp	r2, r1
 1505 00e2 D1D9     		bls	.L126
1830:../drivers/fsl_flash.c ****             {
 1506              		.loc 1 1830 0 is_stmt 1
 1507 00e4 0CEB0402 		add	r2, ip, r4
1826:../drivers/fsl_flash.c **** 
 1508              		.loc 1 1826 0
 1509 00e8 08F10108 		add	r8, r8, #1
 1510              	.LVL177:
1830:../drivers/fsl_flash.c ****             {
 1511              		.loc 1 1830 0
 1512 00ec 12F8012C 		ldrb	r2, [r2, #-1]	@ zero_extendqisi2
 1513 00f0 02B9     		cbnz	r2, .L128
1833:../drivers/fsl_flash.c ****             }
 1514              		.loc 1 1833 0
 1515 00f2 0133     		adds	r3, r3, #1
 1516              	.LVL178:
 1517              	.L128:
1835:../drivers/fsl_flash.c ****         }
 1518              		.loc 1 1835 0
 1519 00f4 7144     		add	r1, r1, lr
 1520              	.LVL179:
 1521 00f6 C7E7     		b	.L126
 1522              	.LVL180:
 1523              	.L130:
1846:../drivers/fsl_flash.c ****     {
 1524              		.loc 1 1846 0
 1525 00f8 9845     		cmp	r8, r3
1848:../drivers/fsl_flash.c ****     }
 1526              		.loc 1 1848 0
 1527 00fa 0CBF     		ite	eq
 1528 00fc 0123     		moveq	r3, #1
 1529              	.LVL181:
1854:../drivers/fsl_flash.c ****     }
 1530              		.loc 1 1854 0
 1531 00fe 0223     		movne	r3, #2
 1532 0100 C5E7     		b	.L137
 1533              	.LVL182:
 1534              	.L133:
1693:../drivers/fsl_flash.c ****     }
 1535              		.loc 1 1693 0
 1536 0102 0420     		movs	r0, #4
 1537 0104 C4E7     		b	.L114
 1538              	.L139:
 1539 0106 00BF     		.align	2
 1540              	.L138:
 1541 0108 00000240 		.word	1073872896
 1542              		.cfi_endproc
 1543              	.LFE163:
 1545              		.section	.text.FLASH_IsExecuteOnly,"ax",%progbits
 1546              		.align	1
 1547              		.global	FLASH_IsExecuteOnly
 1548              		.syntax unified
 1549              		.thumb
 1550              		.thumb_func
 1551              		.fpu fpv4-sp-d16
 1553              	FLASH_IsExecuteOnly:
 1554              	.LFB164:
1864:../drivers/fsl_flash.c **** #if defined(FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL) && FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
 1555              		.loc 1 1864 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 0
 1558              		@ frame_needed = 0, uses_anonymous_args = 0
 1559              	.LVL183:
 1560 0000 10B5     		push	{r4, lr}
 1561              		.cfi_def_cfa_offset 8
 1562              		.cfi_offset 4, -8
 1563              		.cfi_offset 14, -4
1870:../drivers/fsl_flash.c ****     {
 1564              		.loc 1 1870 0
 1565 0002 1C46     		mov	r4, r3
 1566 0004 2BB1     		cbz	r3, .L142
1876:../drivers/fsl_flash.c ****     if (returnCode)
 1567              		.loc 1 1876 0
 1568 0006 0823     		movs	r3, #8
 1569              	.LVL184:
 1570 0008 FFF7FEFF 		bl	flash_check_range
 1571              	.LVL185:
1877:../drivers/fsl_flash.c ****     {
 1572              		.loc 1 1877 0
 1573 000c 00B9     		cbnz	r0, .L140
1978:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL */
 1574              		.loc 1 1978 0
 1575 000e 2070     		strb	r0, [r4]
 1576              	.LVL186:
 1577              	.L140:
1982:../drivers/fsl_flash.c **** 
 1578              		.loc 1 1982 0
 1579 0010 10BD     		pop	{r4, pc}
 1580              	.LVL187:
 1581              	.L142:
1872:../drivers/fsl_flash.c ****     }
 1582              		.loc 1 1872 0
 1583 0012 0420     		movs	r0, #4
 1584              	.LVL188:
 1585 0014 FCE7     		b	.L140
 1586              		.cfi_endproc
 1587              	.LFE164:
 1589              		.section	.text.FLASH_GetProperty,"ax",%progbits
 1590              		.align	1
 1591              		.global	FLASH_GetProperty
 1592              		.syntax unified
 1593              		.thumb
 1594              		.thumb_func
 1595              		.fpu fpv4-sp-d16
 1597              	FLASH_GetProperty:
 1598              	.LFB165:
1985:../drivers/fsl_flash.c ****     if ((config == NULL) || (value == NULL))
 1599              		.loc 1 1985 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603              		@ link register save eliminated.
 1604              	.LVL189:
1986:../drivers/fsl_flash.c ****     {
 1605              		.loc 1 1986 0
 1606 0000 18B3     		cbz	r0, .L157
1986:../drivers/fsl_flash.c ****     {
 1607              		.loc 1 1986 0 is_stmt 0 discriminator 1
 1608 0002 12B3     		cbz	r2, .L157
1991:../drivers/fsl_flash.c ****     {
 1609              		.loc 1 1991 0 is_stmt 1
 1610 0004 0929     		cmp	r1, #9
 1611 0006 22D8     		bhi	.L158
 1612 0008 DFE801F0 		tbb	[pc, r1]
 1613              	.L146:
 1614 000c 05       		.byte	(.L145-.L146)/2
 1615 000d 09       		.byte	(.L147-.L146)/2
 1616 000e 0B       		.byte	(.L148-.L146)/2
 1617 000f 10       		.byte	(.L149-.L146)/2
 1618 0010 12       		.byte	(.L150-.L146)/2
 1619 0011 14       		.byte	(.L151-.L146)/2
 1620 0012 17       		.byte	(.L152-.L146)/2
 1621 0013 19       		.byte	(.L153-.L146)/2
 1622 0014 1B       		.byte	(.L154-.L146)/2
 1623 0015 1D       		.byte	(.L155-.L146)/2
 1624              		.p2align 1
 1625              	.L145:
1994:../drivers/fsl_flash.c ****             break;
 1626              		.loc 1 1994 0
 1627 0016 C368     		ldr	r3, [r0, #12]
 1628              	.LVL190:
 1629              	.L159:
1998:../drivers/fsl_flash.c ****             break;
 1630              		.loc 1 1998 0
 1631 0018 1360     		str	r3, [r2]
2062:../drivers/fsl_flash.c **** }
 1632              		.loc 1 2062 0
 1633 001a 0020     		movs	r0, #0
 1634              	.LVL191:
1999:../drivers/fsl_flash.c **** 
 1635              		.loc 1 1999 0
 1636 001c 7047     		bx	lr
 1637              	.LVL192:
 1638              	.L147:
1998:../drivers/fsl_flash.c ****             break;
 1639              		.loc 1 1998 0
 1640 001e 4368     		ldr	r3, [r0, #4]
 1641 0020 FAE7     		b	.L159
 1642              	.L148:
2002:../drivers/fsl_flash.c ****             break;
 1643              		.loc 1 2002 0
 1644 0022 017A     		ldrb	r1, [r0, #8]	@ zero_extendqisi2
 1645              	.LVL193:
 1646 0024 4368     		ldr	r3, [r0, #4]
 1647 0026 B3FBF1F3 		udiv	r3, r3, r1
 1648 002a F5E7     		b	.L159
 1649              	.LVL194:
 1650              	.L149:
2006:../drivers/fsl_flash.c ****             break;
 1651              		.loc 1 2006 0
 1652 002c 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 1653 002e F3E7     		b	.L159
 1654              	.L150:
2010:../drivers/fsl_flash.c ****             break;
 1655              		.loc 1 2010 0
 1656 0030 0368     		ldr	r3, [r0]
 1657 0032 F1E7     		b	.L159
 1658              	.L151:
2015:../drivers/fsl_flash.c **** #else
 1659              		.loc 1 2015 0
 1660 0034 0020     		movs	r0, #0
 1661              	.LVL195:
 1662 0036 1060     		str	r0, [r2]
2019:../drivers/fsl_flash.c **** 
 1663              		.loc 1 2019 0
 1664 0038 7047     		bx	lr
 1665              	.LVL196:
 1666              	.L152:
2022:../drivers/fsl_flash.c ****             break;
 1667              		.loc 1 2022 0
 1668 003a 4369     		ldr	r3, [r0, #20]
 1669 003c ECE7     		b	.L159
 1670              	.L153:
2026:../drivers/fsl_flash.c ****             break;
 1671              		.loc 1 2026 0
 1672 003e 8369     		ldr	r3, [r0, #24]
 1673 0040 EAE7     		b	.L159
 1674              	.L154:
2030:../drivers/fsl_flash.c ****             break;
 1675              		.loc 1 2030 0
 1676 0042 036A     		ldr	r3, [r0, #32]
 1677 0044 E8E7     		b	.L159
 1678              	.L155:
2034:../drivers/fsl_flash.c ****             break;
 1679              		.loc 1 2034 0
 1680 0046 436A     		ldr	r3, [r0, #36]
 1681 0048 E6E7     		b	.L159
 1682              	.L157:
1988:../drivers/fsl_flash.c ****     }
 1683              		.loc 1 1988 0
 1684 004a 0420     		movs	r0, #4
 1685              	.LVL197:
 1686 004c 7047     		bx	lr
 1687              	.LVL198:
 1688              	.L158:
2059:../drivers/fsl_flash.c ****     }
 1689              		.loc 1 2059 0
 1690 004e 6A20     		movs	r0, #106
 1691              	.LVL199:
2063:../drivers/fsl_flash.c **** 
 1692              		.loc 1 2063 0
 1693 0050 7047     		bx	lr
 1694              		.cfi_endproc
 1695              	.LFE165:
 1697              		.section	.text.FLASH_SetProperty,"ax",%progbits
 1698              		.align	1
 1699              		.global	FLASH_SetProperty
 1700              		.syntax unified
 1701              		.thumb
 1702              		.thumb_func
 1703              		.fpu fpv4-sp-d16
 1705              	FLASH_SetProperty:
 1706              	.LFB166:
2066:../drivers/fsl_flash.c ****     status_t status = kStatus_FLASH_Success;
 1707              		.loc 1 2066 0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 0
 1710              		@ frame_needed = 0, uses_anonymous_args = 0
 1711              		@ link register save eliminated.
 1712              	.LVL200:
2069:../drivers/fsl_flash.c ****     {
 1713              		.loc 1 2069 0
 1714 0000 20B1     		cbz	r0, .L163
2074:../drivers/fsl_flash.c ****     {
 1715              		.loc 1 2074 0
 1716 0002 0929     		cmp	r1, #9
2105:../drivers/fsl_flash.c ****             break;
 1717              		.loc 1 2105 0
 1718 0004 8CBF     		ite	hi
 1719 0006 6A20     		movhi	r0, #106
 1720              	.LVL201:
 1721 0008 7620     		movls	r0, #118
 1722 000a 7047     		bx	lr
 1723              	.LVL202:
 1724              	.L163:
2071:../drivers/fsl_flash.c ****     }
 1725              		.loc 1 2071 0
 1726 000c 0420     		movs	r0, #4
 1727              	.LVL203:
2113:../drivers/fsl_flash.c **** 
 1728              		.loc 1 2113 0
 1729 000e 7047     		bx	lr
 1730              		.cfi_endproc
 1731              	.LFE166:
 1733              		.section	.text.FLASH_SwapControl,"ax",%progbits
 1734              		.align	1
 1735              		.global	FLASH_SwapControl
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1739              		.fpu fpv4-sp-d16
 1741              	FLASH_SwapControl:
 1742              	.LFB167:
2144:../drivers/fsl_flash.c ****     status_t returnCode;
 1743              		.loc 1 2144 0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              	.LVL204:
 1748 0000 10B5     		push	{r4, lr}
 1749              		.cfi_def_cfa_offset 8
 1750              		.cfi_offset 4, -8
 1751              		.cfi_offset 14, -4
2144:../drivers/fsl_flash.c ****     status_t returnCode;
 1752              		.loc 1 2144 0
 1753 0002 1C46     		mov	r4, r3
2147:../drivers/fsl_flash.c ****     {
 1754              		.loc 1 2147 0
 1755 0004 48B3     		cbz	r0, .L173
2147:../drivers/fsl_flash.c ****     {
 1756              		.loc 1 2147 0 is_stmt 0 discriminator 1
 1757 0006 44B3     		cbz	r4, .L173
2152:../drivers/fsl_flash.c ****     {
 1758              		.loc 1 2152 0 is_stmt 1
 1759 0008 11F00F0F 		tst	r1, #15
 1760 000c 21D1     		bne	.L169
2158:../drivers/fsl_flash.c ****         ((address >= kFLASH_ConfigAreaStart) && (address <= kFLASH_ConfigAreaEnd)))
 1761              		.loc 1 2158 0
 1762 000e 4368     		ldr	r3, [r0, #4]
 1763              	.LVL205:
 1764 0010 B1EB530F 		cmp	r1, r3, lsr #1
 1765 0014 1FD2     		bcs	.L171
2159:../drivers/fsl_flash.c ****     {
 1766              		.loc 1 2159 0 discriminator 1
 1767 0016 A1F58063 		sub	r3, r1, #1024
2158:../drivers/fsl_flash.c ****         ((address >= kFLASH_ConfigAreaStart) && (address <= kFLASH_ConfigAreaEnd)))
 1768              		.loc 1 2158 0 discriminator 1
 1769 001a 0F2B     		cmp	r3, #15
 1770 001c 1BD9     		bls	.L171
 1771              	.LVL206:
 1772              	.LBB59:
 1773              	.LBB60:
3375:../drivers/fsl_flash.c ****         (option == kFLASH_SwapControlOptionSetInCompleteState) || (option == kFLASH_SwapControlOpti
 1774              		.loc 1 3375 0
 1775 001e 102A     		cmp	r2, #16
 1776 0020 1BD8     		bhi	.L173
 1777 0022 0F4B     		ldr	r3, .L174
 1778 0024 D340     		lsrs	r3, r3, r2
 1779 0026 DB07     		lsls	r3, r3, #31
 1780 0028 17D5     		bpl	.L173
 1781              	.LVL207:
 1782              	.LBE60:
 1783              	.LBE59:
 1784              	.LBB61:
 1785              	.LBB62:
2171:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
 1786              		.loc 1 2171 0
 1787 002a 0E4B     		ldr	r3, .L174+4
 1788 002c 21F07F41 		bic	r1, r1, #-16777216
 1789              	.LVL208:
2172:../drivers/fsl_flash.c **** 
 1790              		.loc 1 2172 0
 1791 0030 1206     		lsls	r2, r2, #24
 1792              	.LVL209:
 1793 0032 62F07F42 		orn	r2, r2, #-16777216
2171:../drivers/fsl_flash.c ****     kFCCOBx[1] = BYTES_JOIN_TO_WORD_1_3(option, 0xFFFFFFU);
 1794              		.loc 1 2171 0
 1795 0036 41F08C41 		orr	r1, r1, #1174405120
 1796 003a 1960     		str	r1, [r3]
2172:../drivers/fsl_flash.c **** 
 1797              		.loc 1 2172 0
 1798 003c 5A60     		str	r2, [r3, #4]
2174:../drivers/fsl_flash.c **** 
 1799              		.loc 1 2174 0
 1800 003e FFF7FEFF 		bl	flash_command_sequence
 1801              	.LVL210:
2176:../drivers/fsl_flash.c ****     returnInfo->currentSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB6_REG;
 1802              		.loc 1 2176 0
 1803 0042 094B     		ldr	r3, .L174+8
 1804 0044 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 1805 0046 2270     		strb	r2, [r4]
2177:../drivers/fsl_flash.c ****     returnInfo->nextSwapBlockStatus = (flash_swap_block_status_t)FTFx_FCCOB7_REG;
 1806              		.loc 1 2177 0
 1807 0048 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 1808 004a 6270     		strb	r2, [r4, #1]
2178:../drivers/fsl_flash.c **** 
 1809              		.loc 1 2178 0
 1810 004c 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1811 004e A370     		strb	r3, [r4, #2]
 1812              	.LVL211:
 1813              	.L165:
 1814              	.LBE62:
 1815              	.LBE61:
2181:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_SWAP_CONTROL_CMD */
 1816              		.loc 1 2181 0
 1817 0050 10BD     		pop	{r4, pc}
 1818              	.LVL212:
 1819              	.L169:
2154:../drivers/fsl_flash.c ****     }
 1820              		.loc 1 2154 0
 1821 0052 6520     		movs	r0, #101
 1822              	.LVL213:
 1823 0054 FCE7     		b	.L165
 1824              	.LVL214:
 1825              	.L171:
2161:../drivers/fsl_flash.c ****     }
 1826              		.loc 1 2161 0
 1827 0056 7520     		movs	r0, #117
 1828              	.LVL215:
 1829 0058 FAE7     		b	.L165
 1830              	.LVL216:
 1831              	.L173:
2149:../drivers/fsl_flash.c ****     }
 1832              		.loc 1 2149 0
 1833 005a 0420     		movs	r0, #4
 1834              	.LVL217:
 1835 005c F8E7     		b	.L165
 1836              	.L175:
 1837 005e 00BF     		.align	2
 1838              	.L174:
 1839 0060 16010100 		.word	65814
 1840 0064 04000240 		.word	1073872900
 1841 0068 00000240 		.word	1073872896
 1842              		.cfi_endproc
 1843              	.LFE167:
 1845              		.section	.text.FLASH_PflashSetProtection,"ax",%progbits
 1846              		.align	1
 1847              		.global	FLASH_PflashSetProtection
 1848              		.syntax unified
 1849              		.thumb
 1850              		.thumb_func
 1851              		.fpu fpv4-sp-d16
 1853              	FLASH_PflashSetProtection:
 1854              	.LFB169:
2317:../drivers/fsl_flash.c ****     if (config == NULL)
 1855              		.loc 1 2317 0
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 0
 1858              		@ frame_needed = 0, uses_anonymous_args = 0
 1859              		@ link register save eliminated.
 1860              	.LVL218:
2318:../drivers/fsl_flash.c ****     {
 1861              		.loc 1 2318 0
 1862 0000 48B1     		cbz	r0, .L178
2341:../drivers/fsl_flash.c ****         if (protectStatus->valueLow32b.protl32b != *kFPROTL)
 1863              		.loc 1 2341 0
 1864 0002 064B     		ldr	r3, .L180
 1865 0004 0A68     		ldr	r2, [r1]
 1866 0006 1A60     		str	r2, [r3]
2342:../drivers/fsl_flash.c ****         {
 1867              		.loc 1 2342 0
 1868 0008 1B68     		ldr	r3, [r3]
 1869 000a 0868     		ldr	r0, [r1]
 1870              	.LVL219:
2356:../drivers/fsl_flash.c **** }
 1871              		.loc 1 2356 0
 1872 000c 9842     		cmp	r0, r3
 1873 000e 14BF     		ite	ne
 1874 0010 6920     		movne	r0, #105
 1875 0012 0020     		moveq	r0, #0
 1876 0014 7047     		bx	lr
 1877              	.LVL220:
 1878              	.L178:
2320:../drivers/fsl_flash.c ****     }
 1879              		.loc 1 2320 0
 1880 0016 0420     		movs	r0, #4
 1881              	.LVL221:
2357:../drivers/fsl_flash.c **** 
 1882              		.loc 1 2357 0
 1883 0018 7047     		bx	lr
 1884              	.L181:
 1885 001a 00BF     		.align	2
 1886              	.L180:
 1887 001c 10000240 		.word	1073872912
 1888              		.cfi_endproc
 1889              	.LFE169:
 1891              		.section	.text.FLASH_PflashGetProtection,"ax",%progbits
 1892              		.align	1
 1893              		.global	FLASH_PflashGetProtection
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu fpv4-sp-d16
 1899              	FLASH_PflashGetProtection:
 1900              	.LFB170:
2360:../drivers/fsl_flash.c ****     if ((config == NULL) || (protectStatus == NULL))
 1901              		.loc 1 2360 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 0
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906              	.LVL222:
2361:../drivers/fsl_flash.c ****     {
 1907              		.loc 1 2361 0
 1908 0000 28B1     		cbz	r0, .L185
2361:../drivers/fsl_flash.c ****     {
 1909              		.loc 1 2361 0 is_stmt 0 discriminator 1
 1910 0002 21B1     		cbz	r1, .L185
2375:../drivers/fsl_flash.c **** #if defined(FTFx_FPROT_HIGH_REG)
 1911              		.loc 1 2375 0 is_stmt 1
 1912 0004 034B     		ldr	r3, .L186
 1913 0006 1B68     		ldr	r3, [r3]
 1914 0008 0B60     		str	r3, [r1]
2381:../drivers/fsl_flash.c **** }
 1915              		.loc 1 2381 0
 1916 000a 0020     		movs	r0, #0
 1917              	.LVL223:
 1918 000c 7047     		bx	lr
 1919              	.LVL224:
 1920              	.L185:
2363:../drivers/fsl_flash.c ****     }
 1921              		.loc 1 2363 0
 1922 000e 0420     		movs	r0, #4
 1923              	.LVL225:
2382:../drivers/fsl_flash.c **** 
 1924              		.loc 1 2382 0
 1925 0010 7047     		bx	lr
 1926              	.L187:
 1927 0012 00BF     		.align	2
 1928              	.L186:
 1929 0014 10000240 		.word	1073872912
 1930              		.cfi_endproc
 1931              	.LFE170:
 1933              		.section	.text.FLASH_PflashSetPrefetchSpeculation,"ax",%progbits
 1934              		.align	1
 1935              		.global	FLASH_PflashSetPrefetchSpeculation
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu fpv4-sp-d16
 1941              	FLASH_PflashSetPrefetchSpeculation:
 1942              	.LFB171:
2471:../drivers/fsl_flash.c **** #if FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_MCM
 1943              		.loc 1 2471 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              		@ link register save eliminated.
 1948              	.LVL226:
 1949              	.LBB63:
2517:../drivers/fsl_flash.c ****         {
 1950              		.loc 1 2517 0
 1951 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1952 0002 0D4B     		ldr	r3, .L195
 1953 0004 82B9     		cbnz	r2, .L189
2519:../drivers/fsl_flash.c ****         }
 1954              		.loc 1 2519 0
 1955 0006 1A68     		ldr	r2, [r3]
 1956 0008 42F00202 		orr	r2, r2, #2
 1957              	.L193:
2523:../drivers/fsl_flash.c ****         }
 1958              		.loc 1 2523 0
 1959 000c 1A60     		str	r2, [r3]
2525:../drivers/fsl_flash.c ****         {
 1960              		.loc 1 2525 0
 1961 000e 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 1962 0010 72B9     		cbnz	r2, .L191
2527:../drivers/fsl_flash.c ****         }
 1963              		.loc 1 2527 0
 1964 0012 1A68     		ldr	r2, [r3]
 1965 0014 42F00402 		orr	r2, r2, #4
 1966              	.L194:
2531:../drivers/fsl_flash.c ****         }
 1967              		.loc 1 2531 0
 1968 0018 1A60     		str	r2, [r3]
2542:../drivers/fsl_flash.c **** #endif
 1969              		.loc 1 2542 0
 1970 001a 084A     		ldr	r2, .L195+4
 1971 001c 5368     		ldr	r3, [r2, #4]
 1972 001e 43F40023 		orr	r3, r3, #524288
 1973 0022 5360     		str	r3, [r2, #4]
 1974              	.LBE63:
2580:../drivers/fsl_flash.c **** 
 1975              		.loc 1 2580 0
 1976 0024 0020     		movs	r0, #0
 1977              	.LVL227:
 1978 0026 7047     		bx	lr
 1979              	.LVL228:
 1980              	.L189:
 1981              	.LBB64:
2523:../drivers/fsl_flash.c ****         }
 1982              		.loc 1 2523 0
 1983 0028 1A68     		ldr	r2, [r3]
 1984 002a 22F00202 		bic	r2, r2, #2
 1985 002e EDE7     		b	.L193
 1986              	.L191:
2531:../drivers/fsl_flash.c ****         }
 1987              		.loc 1 2531 0
 1988 0030 1A68     		ldr	r2, [r3]
 1989 0032 22F00402 		bic	r2, r2, #4
 1990 0036 EFE7     		b	.L194
 1991              	.L196:
 1992              		.align	2
 1993              	.L195:
 1994 0038 04F00140 		.word	1073868804
 1995 003c 00F00140 		.word	1073868800
 1996              	.LBE64:
 1997              		.cfi_endproc
 1998              	.LFE171:
 2000              		.section	.text.FLASH_PflashGetPrefetchSpeculation,"ax",%progbits
 2001              		.align	1
 2002              		.global	FLASH_PflashGetPrefetchSpeculation
 2003              		.syntax unified
 2004              		.thumb
 2005              		.thumb_func
 2006              		.fpu fpv4-sp-d16
 2008              	FLASH_PflashGetPrefetchSpeculation:
 2009              	.LFB172:
2583:../drivers/fsl_flash.c ****     memset(speculationStatus, 0, sizeof(flash_prefetch_speculation_status_t));
 2010              		.loc 1 2583 0
 2011              		.cfi_startproc
 2012              		@ args = 0, pretend = 0, frame = 0
 2013              		@ frame_needed = 0, uses_anonymous_args = 0
 2014              		@ link register save eliminated.
 2015              	.LVL229:
2587:../drivers/fsl_flash.c ****     speculationStatus->dataOption = kFLASH_prefetchSpeculationOptionEnable;
 2016              		.loc 1 2587 0
 2017 0000 0023     		movs	r3, #0
 2018 0002 0370     		strb	r3, [r0]
2588:../drivers/fsl_flash.c **** 
 2019              		.loc 1 2588 0
 2020 0004 4370     		strb	r3, [r0, #1]
 2021              	.LBB65:
2623:../drivers/fsl_flash.c ****         b0dpeMask = FMC_PFB0CR_B0DPE_MASK;
 2022              		.loc 1 2623 0
 2023 0006 064B     		ldr	r3, .L200
 2024 0008 5B68     		ldr	r3, [r3, #4]
 2025              	.LVL230:
2627:../drivers/fsl_flash.c ****         {
 2026              		.loc 1 2627 0
 2027 000a 5A07     		lsls	r2, r3, #29
2630:../drivers/fsl_flash.c ****         }
 2028              		.loc 1 2630 0
 2029 000c 5CBF     		itt	pl
 2030 000e 0122     		movpl	r2, #1
 2031 0010 4270     		strbpl	r2, [r0, #1]
2632:../drivers/fsl_flash.c ****         {
 2032              		.loc 1 2632 0
 2033 0012 9B07     		lsls	r3, r3, #30
 2034              	.LVL231:
2635:../drivers/fsl_flash.c ****         }
 2035              		.loc 1 2635 0
 2036 0014 5CBF     		itt	pl
 2037 0016 0123     		movpl	r3, #1
 2038 0018 0370     		strbpl	r3, [r0]
 2039              	.LBE65:
2665:../drivers/fsl_flash.c **** 
 2040              		.loc 1 2665 0
 2041 001a 0020     		movs	r0, #0
 2042              	.LVL232:
 2043 001c 7047     		bx	lr
 2044              	.L201:
 2045 001e 00BF     		.align	2
 2046              	.L200:
 2047 0020 00F00140 		.word	1073868800
 2048              		.cfi_endproc
 2049              	.LFE172:
 2051              		.section	.text.fmc_flash_cache_clear,"ax",%progbits
 2052              		.align	1
 2053              		.global	fmc_flash_cache_clear
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu fpv4-sp-d16
 2059              	fmc_flash_cache_clear:
 2060              	.LFB176:
2810:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2061              		.loc 1 2810 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 0
 2064              		@ frame_needed = 0, uses_anonymous_args = 0
 2065              		@ link register save eliminated.
 2066              	.LVL233:
2818:../drivers/fsl_flash.c **** #endif
 2067              		.loc 1 2818 0
 2068 0000 054B     		ldr	r3, .L203
 2069 0002 0648     		ldr	r0, .L203+4
2810:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2070              		.loc 1 2810 0
 2071 0004 10B4     		push	{r4}
 2072              		.cfi_def_cfa_offset 4
 2073              		.cfi_offset 4, -4
2818:../drivers/fsl_flash.c **** #endif
 2074              		.loc 1 2818 0
 2075 0006 1C68     		ldr	r4, [r3]
 2076 0008 1422     		movs	r2, #20
 2077 000a A446     		mov	ip, r4
 2078 000c 0F23     		movs	r3, #15
 2079 000e 4FF47001 		mov	r1, #15728640
2831:../drivers/fsl_flash.c **** #endif /* FLASH_CACHE_IS_CONTROLLED_BY_FMC */
 2080              		.loc 1 2831 0
 2081 0012 5DF8044B 		ldr	r4, [sp], #4
 2082              		.cfi_restore 4
 2083              		.cfi_def_cfa_offset 0
2818:../drivers/fsl_flash.c **** #endif
 2084              		.loc 1 2818 0
 2085 0016 6047     		bx	ip	@ indirect register sibling call
 2086              	.LVL234:
 2087              	.L204:
 2088              		.align	2
 2089              	.L203:
 2090 0018 00000000 		.word	.LANCHOR3
 2091 001c 04F00140 		.word	1073868804
 2092              		.cfi_endproc
 2093              	.LFE176:
 2095              		.section	.text.fmc_flash_prefetch_speculation_clear,"ax",%progbits
 2096              		.align	1
 2097              		.global	fmc_flash_prefetch_speculation_clear
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2101              		.fpu fpv4-sp-d16
 2103              	fmc_flash_prefetch_speculation_clear:
 2104              	.LFB177:
2893:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2105              		.loc 1 2893 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
 2109              		@ link register save eliminated.
 2110              	.LVL235:
2907:../drivers/fsl_flash.c **** #endif
 2111              		.loc 1 2907 0
 2112 0000 054B     		ldr	r3, .L206
 2113 0002 0648     		ldr	r0, .L206+4
2893:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2114              		.loc 1 2893 0
 2115 0004 10B4     		push	{r4}
 2116              		.cfi_def_cfa_offset 4
 2117              		.cfi_offset 4, -4
2907:../drivers/fsl_flash.c **** #endif
 2118              		.loc 1 2907 0
 2119 0006 1C68     		ldr	r4, [r3]
 2120 0008 1322     		movs	r2, #19
 2121 000a A446     		mov	ip, r4
 2122 000c 0123     		movs	r3, #1
 2123 000e 4FF40021 		mov	r1, #524288
2924:../drivers/fsl_flash.c **** #endif /* FLASH_PREFETCH_SPECULATION_IS_CONTROLLED_BY_FMC */
 2124              		.loc 1 2924 0
 2125 0012 5DF8044B 		ldr	r4, [sp], #4
 2126              		.cfi_restore 4
 2127              		.cfi_def_cfa_offset 0
2907:../drivers/fsl_flash.c **** #endif
 2128              		.loc 1 2907 0
 2129 0016 6047     		bx	ip	@ indirect register sibling call
 2130              	.LVL236:
 2131              	.L207:
 2132              		.align	2
 2133              	.L206:
 2134 0018 00000000 		.word	.LANCHOR3
 2135 001c 04F00140 		.word	1073868804
 2136              		.cfi_endproc
 2137              	.LFE177:
 2139              		.section	.text.flash_cache_clear_process,"ax",%progbits
 2140              		.align	1
 2141              		.syntax unified
 2142              		.thumb
 2143              		.thumb_func
 2144              		.fpu fpv4-sp-d16
 2146              	flash_cache_clear_process:
 2147              	.LFB179:
2943:../drivers/fsl_flash.c **** #if FLASH_DRIVER_IS_FLASH_RESIDENT
 2148              		.loc 1 2943 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 2152              	.LVL237:
 2153 0000 08B5     		push	{r3, lr}
 2154              		.cfi_def_cfa_offset 8
 2155              		.cfi_offset 3, -8
 2156              		.cfi_offset 14, -4
2945:../drivers/fsl_flash.c ****     if (kStatus_FLASH_Success != returnCode)
 2157              		.loc 1 2945 0
 2158 0002 FFF7FEFF 		bl	flash_check_execute_in_ram_function_info
 2159              	.LVL238:
2946:../drivers/fsl_flash.c ****     {
 2160              		.loc 1 2946 0
 2161 0006 38B9     		cbnz	r0, .L208
 2162              	.LVL239:
 2163              	.LBB68:
 2164              	.LBB69:
2955:../drivers/fsl_flash.c ****     {
 2165              		.loc 1 2955 0
 2166 0008 0129     		cmp	r1, #1
 2167 000a 05D1     		bne	.L208
2961:../drivers/fsl_flash.c **** #endif
 2168              		.loc 1 2961 0
 2169 000c FFF7FEFF 		bl	fmc_flash_cache_clear
 2170              	.LVL240:
 2171              	.LBE69:
 2172              	.LBE68:
2976:../drivers/fsl_flash.c **** 
 2173              		.loc 1 2976 0
 2174 0010 BDE80840 		pop	{r3, lr}
 2175              		.cfi_remember_state
 2176              		.cfi_restore 14
 2177              		.cfi_restore 3
 2178              		.cfi_def_cfa_offset 0
 2179              	.LBB71:
 2180              	.LBB70:
2967:../drivers/fsl_flash.c **** #endif
 2181              		.loc 1 2967 0
 2182 0014 FFF7FEBF 		b	fmc_flash_prefetch_speculation_clear
 2183              	.LVL241:
 2184              	.L208:
 2185              		.cfi_restore_state
 2186              	.LBE70:
 2187              	.LBE71:
2976:../drivers/fsl_flash.c **** 
 2188              		.loc 1 2976 0
 2189 0018 08BD     		pop	{r3, pc}
 2190              		.cfi_endproc
 2191              	.LFE179:
 2193              		.section	.text.flash_cache_clear,"ax",%progbits
 2194              		.align	1
 2195              		.global	flash_cache_clear
 2196              		.syntax unified
 2197              		.thumb
 2198              		.thumb_func
 2199              		.fpu fpv4-sp-d16
 2201              	flash_cache_clear:
 2202              	.LFB178:
2933:../drivers/fsl_flash.c ****     flash_cache_clear_process(config, kFLASH_CacheClearProcessPost);
 2203              		.loc 1 2933 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 0
 2206              		@ frame_needed = 0, uses_anonymous_args = 0
 2207              		@ link register save eliminated.
 2208              	.LVL242:
2934:../drivers/fsl_flash.c **** }
 2209              		.loc 1 2934 0
 2210 0000 0121     		movs	r1, #1
 2211 0002 FFF7FEBF 		b	flash_cache_clear_process
 2212              	.LVL243:
 2213              		.cfi_endproc
 2214              	.LFE178:
 2216              		.section	.text.FLASH_EraseAll,"ax",%progbits
 2217              		.align	1
 2218              		.global	FLASH_EraseAll
 2219              		.syntax unified
 2220              		.thumb
 2221              		.thumb_func
 2222              		.fpu fpv4-sp-d16
 2224              	FLASH_EraseAll:
 2225              	.LFB149:
 873:../drivers/fsl_flash.c ****     status_t returnCode;
 2226              		.loc 1 873 0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              	.LVL244:
 2231 0000 38B5     		push	{r3, r4, r5, lr}
 2232              		.cfi_def_cfa_offset 16
 2233              		.cfi_offset 3, -16
 2234              		.cfi_offset 4, -12
 2235              		.cfi_offset 5, -8
 2236              		.cfi_offset 14, -4
 876:../drivers/fsl_flash.c ****     {
 2237              		.loc 1 876 0
 2238 0002 0546     		mov	r5, r0
 2239 0004 90B1     		cbz	r0, .L213
 882:../drivers/fsl_flash.c **** 
 2240              		.loc 1 882 0
 2241 0006 0B4B     		ldr	r3, .L215
 2242 0008 6FF03B42 		mvn	r2, #-1157627904
 2243 000c 1A60     		str	r2, [r3]
 2244              	.LVL245:
 2245              	.LBB72:
 2246              	.LBB73:
3096:../drivers/fsl_flash.c ****     {
 2247              		.loc 1 3096 0
 2248 000e 0A4B     		ldr	r3, .L215+4
 2249 0010 9942     		cmp	r1, r3
 2250 0012 0DD1     		bne	.L214
 2251              	.LVL246:
 2252              	.LBE73:
 2253              	.LBE72:
 891:../drivers/fsl_flash.c **** 
 2254              		.loc 1 891 0
 2255 0014 0021     		movs	r1, #0
 2256              	.LVL247:
 2257 0016 FFF7FEFF 		bl	flash_cache_clear_process
 2258              	.LVL248:
 894:../drivers/fsl_flash.c **** 
 2259              		.loc 1 894 0
 2260 001a 2846     		mov	r0, r5
 2261 001c FFF7FEFF 		bl	flash_command_sequence
 2262              	.LVL249:
 2263 0020 0446     		mov	r4, r0
 2264              	.LVL250:
 896:../drivers/fsl_flash.c **** 
 2265              		.loc 1 896 0
 2266 0022 2846     		mov	r0, r5
 2267              	.LVL251:
 2268 0024 FFF7FEFF 		bl	flash_cache_clear
 2269              	.LVL252:
 2270              	.L211:
 908:../drivers/fsl_flash.c **** 
 2271              		.loc 1 908 0
 2272 0028 2046     		mov	r0, r4
 2273 002a 38BD     		pop	{r3, r4, r5, pc}
 2274              	.LVL253:
 2275              	.L213:
 878:../drivers/fsl_flash.c ****     }
 2276              		.loc 1 878 0
 2277 002c 0424     		movs	r4, #4
 2278 002e FBE7     		b	.L211
 2279              	.LVL254:
 2280              	.L214:
 2281              	.LBB75:
 2282              	.LBB74:
3098:../drivers/fsl_flash.c ****     }
 2283              		.loc 1 3098 0
 2284 0030 6B24     		movs	r4, #107
 2285 0032 F9E7     		b	.L211
 2286              	.L216:
 2287              		.align	2
 2288              	.L215:
 2289 0034 04000240 		.word	1073872900
 2290 0038 6B66656B 		.word	1801807467
 2291              	.LBE74:
 2292              	.LBE75:
 2293              		.cfi_endproc
 2294              	.LFE149:
 2296              		.section	.text.FLASH_Erase,"ax",%progbits
 2297              		.align	1
 2298              		.global	FLASH_Erase
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2302              		.fpu fpv4-sp-d16
 2304              	FLASH_Erase:
 2305              	.LFB150:
 911:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 2306              		.loc 1 911 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 32
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310              	.LVL255:
 2311 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2312              		.cfi_def_cfa_offset 28
 2313              		.cfi_offset 4, -28
 2314              		.cfi_offset 5, -24
 2315              		.cfi_offset 6, -20
 2316              		.cfi_offset 7, -16
 2317              		.cfi_offset 8, -12
 2318              		.cfi_offset 9, -8
 2319              		.cfi_offset 14, -4
 2320 0004 89B0     		sub	sp, sp, #36
 2321              		.cfi_def_cfa_offset 64
 911:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 2322              		.loc 1 911 0
 2323 0006 8046     		mov	r8, r0
 2324 0008 0E46     		mov	r6, r1
 2325 000a 1446     		mov	r4, r2
 918:../drivers/fsl_flash.c **** 
 2326              		.loc 1 918 0
 2327 000c 6A46     		mov	r2, sp
 2328              	.LVL256:
 911:../drivers/fsl_flash.c ****     uint32_t sectorSize;
 2329              		.loc 1 911 0
 2330 000e 1D46     		mov	r5, r3
 918:../drivers/fsl_flash.c **** 
 2331              		.loc 1 918 0
 2332 0010 FFF7FEFF 		bl	flash_get_matched_operation_info
 2333              	.LVL257:
 921:../drivers/fsl_flash.c ****     if (returnCode)
 2334              		.loc 1 921 0
 2335 0014 049B     		ldr	r3, [sp, #16]
 2336 0016 2246     		mov	r2, r4
 2337 0018 3146     		mov	r1, r6
 2338 001a 4046     		mov	r0, r8
 2339 001c FFF7FEFF 		bl	flash_check_range
 2340              	.LVL258:
 922:../drivers/fsl_flash.c ****     {
 2341              		.loc 1 922 0
 2342 0020 D8B9     		cbnz	r0, .L217
 2343              	.LVL259:
 2344              	.LBB76:
 2345              	.LBB77:
3096:../drivers/fsl_flash.c ****     {
 2346              		.loc 1 3096 0
 2347 0022 174B     		ldr	r3, .L227
 2348 0024 9D42     		cmp	r5, r3
 2349 0026 29D1     		bne	.L223
 2350              	.LVL260:
 2351              	.LBE77:
 2352              	.LBE76:
 935:../drivers/fsl_flash.c **** 
 2353              		.loc 1 935 0
 2354 0028 DDE90067 		ldrd	r6, r7, [sp]
 2355              	.LVL261:
 938:../drivers/fsl_flash.c **** 
 2356              		.loc 1 938 0
 2357 002c 751E     		subs	r5, r6, #1
 2358              	.LVL262:
 2359 002e 2544     		add	r5, r5, r4
 2360              	.LVL263:
 942:../drivers/fsl_flash.c ****     {
 2361              		.loc 1 942 0
 2362 0030 B5FBF7F3 		udiv	r3, r5, r7
 2363 0034 07FB1352 		mls	r2, r7, r3, r5
 2364 0038 12B1     		cbz	r2, .L219
 945:../drivers/fsl_flash.c ****     }
 2365              		.loc 1 945 0
 2366 003a 03FB0775 		mla	r5, r3, r7, r7
 2367              	.LVL264:
 2368 003e 013D     		subs	r5, r5, #1
 2369              	.LVL265:
 2370              	.L219:
 948:../drivers/fsl_flash.c **** 
 2371              		.loc 1 948 0
 2372 0040 0021     		movs	r1, #0
 2373 0042 4046     		mov	r0, r8
 2374 0044 FFF7FEFF 		bl	flash_cache_clear_process
 2375              	.LVL266:
 955:../drivers/fsl_flash.c **** 
 2376              		.loc 1 955 0
 2377 0048 DFF83890 		ldr	r9, .L227+4
 2378              	.LVL267:
 2379              	.L220:
 952:../drivers/fsl_flash.c ****     {
 2380              		.loc 1 952 0
 2381 004c AE42     		cmp	r6, r5
 2382 004e 07D9     		bls	.L222
 2383 0050 0024     		movs	r4, #0
 2384              	.LVL268:
 2385              	.L221:
 972:../drivers/fsl_flash.c **** 
 2386              		.loc 1 972 0
 2387 0052 4046     		mov	r0, r8
 2388 0054 FFF7FEFF 		bl	flash_cache_clear
 2389              	.LVL269:
 974:../drivers/fsl_flash.c **** }
 2390              		.loc 1 974 0
 2391 0058 2046     		mov	r0, r4
 2392              	.LVL270:
 2393              	.L217:
 975:../drivers/fsl_flash.c **** 
 2394              		.loc 1 975 0
 2395 005a 09B0     		add	sp, sp, #36
 2396              		.cfi_remember_state
 2397              		.cfi_def_cfa_offset 28
 2398              		@ sp needed
 2399 005c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2400              	.LVL271:
 2401              	.L222:
 2402              		.cfi_restore_state
 955:../drivers/fsl_flash.c **** 
 2403              		.loc 1 955 0
 2404 0060 26F07F43 		bic	r3, r6, #-16777216
 2405 0064 43F01063 		orr	r3, r3, #150994944
 2406 0068 C9F80030 		str	r3, [r9]
 958:../drivers/fsl_flash.c **** 
 2407              		.loc 1 958 0
 2408 006c 4046     		mov	r0, r8
 2409 006e FFF7FEFF 		bl	flash_command_sequence
 2410              	.LVL272:
 961:../drivers/fsl_flash.c ****         {
 2411              		.loc 1 961 0
 2412 0072 0446     		mov	r4, r0
 2413 0074 0028     		cmp	r0, #0
 2414 0076 ECD1     		bne	.L221
 968:../drivers/fsl_flash.c ****         }
 2415              		.loc 1 968 0
 2416 0078 3E44     		add	r6, r6, r7
 2417              	.LVL273:
 2418 007a E7E7     		b	.L220
 2419              	.LVL274:
 2420              	.L223:
 2421              	.LBB79:
 2422              	.LBB78:
3098:../drivers/fsl_flash.c ****     }
 2423              		.loc 1 3098 0
 2424 007c 6B20     		movs	r0, #107
 2425              	.LVL275:
 2426 007e ECE7     		b	.L217
 2427              	.L228:
 2428              		.align	2
 2429              	.L227:
 2430 0080 6B66656B 		.word	1801807467
 2431 0084 04000240 		.word	1073872900
 2432              	.LBE78:
 2433              	.LBE79:
 2434              		.cfi_endproc
 2435              	.LFE150:
 2437              		.section	.text.FLASH_Swap,"ax",%progbits
 2438              		.align	1
 2439              		.global	FLASH_Swap
 2440              		.syntax unified
 2441              		.thumb
 2442              		.thumb_func
 2443              		.fpu fpv4-sp-d16
 2445              	FLASH_Swap:
 2446              	.LFB168:
2186:../drivers/fsl_flash.c ****     flash_swap_state_config_t returnInfo;
 2447              		.loc 1 2186 0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 24
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 2451              	.LVL276:
 2452 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2453              		.cfi_def_cfa_offset 24
 2454              		.cfi_offset 4, -24
 2455              		.cfi_offset 5, -20
 2456              		.cfi_offset 6, -16
 2457              		.cfi_offset 7, -12
 2458              		.cfi_offset 8, -8
 2459              		.cfi_offset 14, -4
 2460 0004 88B0     		sub	sp, sp, #32
 2461              		.cfi_def_cfa_offset 56
2190:../drivers/fsl_flash.c **** 
 2462              		.loc 1 2190 0
 2463 0006 6FF07F43 		mvn	r3, #-16777216
2246:../drivers/fsl_flash.c ****                                              FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT, 
 2464              		.loc 1 2246 0
 2465 000a DFF8B480 		ldr	r8, .L250
2190:../drivers/fsl_flash.c **** 
 2466              		.loc 1 2190 0
 2467 000e ADF80C30 		strh	r3, [sp, #12]	@ movhi
2186:../drivers/fsl_flash.c ****     flash_swap_state_config_t returnInfo;
 2468              		.loc 1 2186 0
 2469 0012 0546     		mov	r5, r0
 2470 0014 0E46     		mov	r6, r1
 2471 0016 1746     		mov	r7, r2
2190:../drivers/fsl_flash.c **** 
 2472              		.loc 1 2190 0
 2473 0018 8DF80E30 		strb	r3, [sp, #14]
 2474              	.LVL277:
 2475              	.L248:
2194:../drivers/fsl_flash.c ****         if (returnCode != kStatus_FLASH_Success)
 2476              		.loc 1 2194 0
 2477 001c 03AB     		add	r3, sp, #12
 2478 001e 0822     		movs	r2, #8
 2479 0020 3146     		mov	r1, r6
 2480 0022 2846     		mov	r0, r5
 2481 0024 FFF7FEFF 		bl	FLASH_SwapControl
 2482              	.LVL278:
2195:../drivers/fsl_flash.c ****         {
 2483              		.loc 1 2195 0
 2484 0028 0446     		mov	r4, r0
 2485 002a B0B9     		cbnz	r0, .L229
2200:../drivers/fsl_flash.c ****         {
 2486              		.loc 1 2200 0
 2487 002c 012F     		cmp	r7, #1
 2488 002e 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 2489 0032 0AD1     		bne	.L231
2202:../drivers/fsl_flash.c ****             {
 2490              		.loc 1 2202 0
 2491 0034 052B     		cmp	r3, #5
 2492 0036 10D0     		beq	.L229
2206:../drivers/fsl_flash.c ****             {
 2493              		.loc 1 2206 0
 2494 0038 002B     		cmp	r3, #0
 2495 003a 3CD1     		bne	.L246
2210:../drivers/fsl_flash.c ****             }
 2496              		.loc 1 2210 0
 2497 003c 03AB     		add	r3, sp, #12
 2498 003e 1022     		movs	r2, #16
 2499              	.LVL279:
 2500              	.L249:
2251:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInCompleteSta
 2501              		.loc 1 2251 0
 2502 0040 3146     		mov	r1, r6
 2503 0042 2846     		mov	r0, r5
 2504 0044 FFF7FEFF 		bl	FLASH_SwapControl
 2505              	.LVL280:
2253:../drivers/fsl_flash.c ****                 case kFLASH_SwapStateComplete:
 2506              		.loc 1 2253 0
 2507 0048 2AE0     		b	.L233
 2508              	.L231:
2225:../drivers/fsl_flash.c ****             {
 2509              		.loc 1 2225 0
 2510 004a 052B     		cmp	r3, #5
 2511 004c 04D8     		bhi	.L234
 2512 004e DFE803F0 		tbb	[pc, r3]
 2513              	.L236:
 2514 0052 08       		.byte	(.L235-.L236)/2
 2515 0053 0B       		.byte	(.L237-.L236)/2
 2516 0054 1F       		.byte	(.L238-.L236)/2
 2517 0055 2F       		.byte	(.L239-.L236)/2
 2518 0056 28       		.byte	(.L240-.L236)/2
 2519 0057 32       		.byte	(.L246-.L236)/2
 2520              		.p2align 1
 2521              	.L234:
2262:../drivers/fsl_flash.c ****                     break;
 2522              		.loc 1 2262 0
 2523 0058 0424     		movs	r4, #4
 2524              	.LVL281:
 2525              	.L229:
2273:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PFLASH_BLOCK_SWAP */
 2526              		.loc 1 2273 0
 2527 005a 2046     		mov	r0, r4
 2528 005c 08B0     		add	sp, sp, #32
 2529              		.cfi_remember_state
 2530              		.cfi_def_cfa_offset 24
 2531              		@ sp needed
 2532 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2533              	.LVL282:
 2534              	.L235:
 2535              		.cfi_restore_state
2229:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionIntializeSystem,
 2536              		.loc 1 2229 0
 2537 0062 03AB     		add	r3, sp, #12
 2538 0064 0122     		movs	r2, #1
 2539 0066 EBE7     		b	.L249
 2540              	.L237:
 2541              	.LVL283:
 2542              	.LBB82:
 2543              	.LBB83:
3395:../drivers/fsl_flash.c ****         FLASH_ReadResource(config, kFLASH_ResourceRangePflashSwapIfrStart, flashSwapIfrFieldData.fl
 2544              		.loc 1 3395 0
 2545 0068 0023     		movs	r3, #0
 2546 006a 0093     		str	r3, [sp]
 2547 006c 04AA     		add	r2, sp, #16
 2548 006e 0823     		movs	r3, #8
 2549 0070 4FF48021 		mov	r1, #262144
 2550 0074 2846     		mov	r0, r5
 2551              	.LVL284:
 2552 0076 FFF7FEFF 		bl	FLASH_ReadResource
 2553              	.LVL285:
3399:../drivers/fsl_flash.c ****     {
 2554              		.loc 1 3399 0
 2555 007a F0B9     		cbnz	r0, .L247
 2556              	.LVL286:
3430:../drivers/fsl_flash.c ****                            FSL_FEATURE_FLASH_PFLASH_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT;
 2557              		.loc 1 3430 0
 2558 007c BDF81030 		ldrh	r3, [sp, #16]
3432:../drivers/fsl_flash.c ****     {
 2559              		.loc 1 3432 0
 2560 0080 B6EB031F 		cmp	r6, r3, lsl #4
 2561 0084 01D0     		beq	.L242
 2562              	.LVL287:
3434:../drivers/fsl_flash.c ****     }
 2563              		.loc 1 3434 0
 2564 0086 7524     		movs	r4, #117
 2565 0088 E7E7     		b	.L229
 2566              	.LVL288:
 2567              	.L242:
 2568              	.LBE83:
 2569              	.LBE82:
2239:../drivers/fsl_flash.c ****                             FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInUpdateS
 2570              		.loc 1 2239 0
 2571 008a 03AB     		add	r3, sp, #12
 2572 008c 0222     		movs	r2, #2
 2573 008e D7E7     		b	.L249
 2574              	.LVL289:
 2575              	.L238:
2246:../drivers/fsl_flash.c ****                                              FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT, 
 2576              		.loc 1 2246 0
 2577 0090 6968     		ldr	r1, [r5, #4]
 2578 0092 4346     		mov	r3, r8
 2579 0094 1022     		movs	r2, #16
 2580 0096 06EB5101 		add	r1, r6, r1, lsr #1
 2581 009a 2846     		mov	r0, r5
 2582              	.LVL290:
 2583 009c FFF7FEFF 		bl	FLASH_Erase
 2584              	.LVL291:
 2585              	.L233:
2266:../drivers/fsl_flash.c ****         {
 2586              		.loc 1 2266 0
 2587 00a0 58B9     		cbnz	r0, .L247
 2588              	.L240:
2270:../drivers/fsl_flash.c **** 
 2589              		.loc 1 2270 0
 2590 00a2 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 2591 00a6 042B     		cmp	r3, #4
 2592 00a8 B8D1     		bne	.L248
2270:../drivers/fsl_flash.c **** 
 2593              		.loc 1 2270 0 is_stmt 0 discriminator 1
 2594 00aa 002F     		cmp	r7, #0
 2595 00ac B6D1     		bne	.L248
 2596 00ae D4E7     		b	.L229
 2597              	.L239:
2251:../drivers/fsl_flash.c ****                         FLASH_SwapControl(config, address, kFLASH_SwapControlOptionSetInCompleteSta
 2598              		.loc 1 2251 0 is_stmt 1
 2599 00b0 03AB     		add	r3, sp, #12
 2600 00b2 0422     		movs	r2, #4
 2601 00b4 C4E7     		b	.L249
 2602              	.L246:
2259:../drivers/fsl_flash.c ****                     break;
 2603              		.loc 1 2259 0
 2604 00b6 7424     		movs	r4, #116
 2605 00b8 CFE7     		b	.L229
 2606              	.LVL292:
 2607              	.L247:
 2608 00ba 0446     		mov	r4, r0
 2609 00bc CDE7     		b	.L229
 2610              	.L251:
 2611 00be 00BF     		.align	2
 2612              	.L250:
 2613 00c0 6B66656B 		.word	1801807467
 2614              		.cfi_endproc
 2615              	.LFE168:
 2617              		.section	.text.FLASH_EraseAllExecuteOnlySegments,"ax",%progbits
 2618              		.align	1
 2619              		.global	FLASH_EraseAllExecuteOnlySegments
 2620              		.syntax unified
 2621              		.thumb
 2622              		.thumb_func
 2623              		.fpu fpv4-sp-d16
 2625              	FLASH_EraseAllExecuteOnlySegments:
 2626              	.LFB151:
1018:../drivers/fsl_flash.c ****     status_t returnCode;
 2627              		.loc 1 1018 0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 0
 2630              		@ frame_needed = 0, uses_anonymous_args = 0
 2631              	.LVL293:
 2632 0000 38B5     		push	{r3, r4, r5, lr}
 2633              		.cfi_def_cfa_offset 16
 2634              		.cfi_offset 3, -16
 2635              		.cfi_offset 4, -12
 2636              		.cfi_offset 5, -8
 2637              		.cfi_offset 14, -4
1021:../drivers/fsl_flash.c ****     {
 2638              		.loc 1 1021 0
 2639 0002 0546     		mov	r5, r0
 2640 0004 90B1     		cbz	r0, .L254
1028:../drivers/fsl_flash.c **** 
 2641              		.loc 1 1028 0
 2642 0006 0B4B     		ldr	r3, .L256
 2643 0008 6FF03442 		mvn	r2, #-1275068416
 2644 000c 1A60     		str	r2, [r3]
 2645              	.LVL294:
 2646              	.LBB84:
 2647              	.LBB85:
3096:../drivers/fsl_flash.c ****     {
 2648              		.loc 1 3096 0
 2649 000e 0A4B     		ldr	r3, .L256+4
 2650 0010 9942     		cmp	r1, r3
 2651 0012 0DD1     		bne	.L255
 2652              	.LVL295:
 2653              	.LBE85:
 2654              	.LBE84:
1037:../drivers/fsl_flash.c **** 
 2655              		.loc 1 1037 0
 2656 0014 0021     		movs	r1, #0
 2657              	.LVL296:
 2658 0016 FFF7FEFF 		bl	flash_cache_clear_process
 2659              	.LVL297:
1040:../drivers/fsl_flash.c **** 
 2660              		.loc 1 1040 0
 2661 001a 2846     		mov	r0, r5
 2662 001c FFF7FEFF 		bl	flash_command_sequence
 2663              	.LVL298:
 2664 0020 0446     		mov	r4, r0
 2665              	.LVL299:
1042:../drivers/fsl_flash.c **** 
 2666              		.loc 1 1042 0
 2667 0022 2846     		mov	r0, r5
 2668              	.LVL300:
 2669 0024 FFF7FEFF 		bl	flash_cache_clear
 2670              	.LVL301:
 2671              	.L252:
1045:../drivers/fsl_flash.c **** 
 2672              		.loc 1 1045 0
 2673 0028 2046     		mov	r0, r4
 2674 002a 38BD     		pop	{r3, r4, r5, pc}
 2675              	.LVL302:
 2676              	.L254:
1023:../drivers/fsl_flash.c ****     }
 2677              		.loc 1 1023 0
 2678 002c 0424     		movs	r4, #4
 2679 002e FBE7     		b	.L252
 2680              	.LVL303:
 2681              	.L255:
 2682              	.LBB87:
 2683              	.LBB86:
3098:../drivers/fsl_flash.c ****     }
 2684              		.loc 1 3098 0
 2685 0030 6B24     		movs	r4, #107
 2686 0032 F9E7     		b	.L252
 2687              	.L257:
 2688              		.align	2
 2689              	.L256:
 2690 0034 04000240 		.word	1073872900
 2691 0038 6B66656B 		.word	1801807467
 2692              	.LBE86:
 2693              	.LBE87:
 2694              		.cfi_endproc
 2695              	.LFE151:
 2697              		.section	.text.FLASH_Program,"ax",%progbits
 2698              		.align	1
 2699              		.global	FLASH_Program
 2700              		.syntax unified
 2701              		.thumb
 2702              		.thumb_func
 2703              		.fpu fpv4-sp-d16
 2705              	FLASH_Program:
 2706              	.LFB152:
1048:../drivers/fsl_flash.c ****     status_t returnCode;
 2707              		.loc 1 1048 0
 2708              		.cfi_startproc
 2709              		@ args = 0, pretend = 0, frame = 32
 2710              		@ frame_needed = 0, uses_anonymous_args = 0
 2711              	.LVL304:
 2712 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2713              		.cfi_def_cfa_offset 36
 2714              		.cfi_offset 4, -36
 2715              		.cfi_offset 5, -32
 2716              		.cfi_offset 6, -28
 2717              		.cfi_offset 7, -24
 2718              		.cfi_offset 8, -20
 2719              		.cfi_offset 9, -16
 2720              		.cfi_offset 10, -12
 2721              		.cfi_offset 11, -8
 2722              		.cfi_offset 14, -4
 2723 0004 0646     		mov	r6, r0
 2724 0006 89B0     		sub	sp, sp, #36
 2725              		.cfi_def_cfa_offset 72
1048:../drivers/fsl_flash.c ****     status_t returnCode;
 2726              		.loc 1 1048 0
 2727 0008 0F46     		mov	r7, r1
 2728 000a 1D46     		mov	r5, r3
1052:../drivers/fsl_flash.c ****     {
 2729              		.loc 1 1052 0
 2730 000c 1446     		mov	r4, r2
 2731 000e 002A     		cmp	r2, #0
 2732 0010 42D0     		beq	.L265
1057:../drivers/fsl_flash.c **** 
 2733              		.loc 1 1057 0
 2734 0012 6A46     		mov	r2, sp
 2735              	.LVL305:
 2736 0014 FFF7FEFF 		bl	flash_get_matched_operation_info
 2737              	.LVL306:
1060:../drivers/fsl_flash.c ****     if (returnCode)
 2738              		.loc 1 1060 0
 2739 0018 039B     		ldr	r3, [sp, #12]
 2740 001a 2A46     		mov	r2, r5
 2741 001c 3946     		mov	r1, r7
 2742 001e 3046     		mov	r0, r6
 2743 0020 FFF7FEFF 		bl	flash_check_range
 2744              	.LVL307:
1061:../drivers/fsl_flash.c ****     {
 2745              		.loc 1 1061 0
 2746 0024 80B9     		cbnz	r0, .L258
1068:../drivers/fsl_flash.c **** 
 2747              		.loc 1 1068 0
 2748 0026 0146     		mov	r1, r0
 2749 0028 3046     		mov	r0, r6
 2750              	.LVL308:
1066:../drivers/fsl_flash.c **** 
 2751              		.loc 1 1066 0
 2752 002a 009F     		ldr	r7, [sp]
 2753              	.LVL309:
1073:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
 2754              		.loc 1 1073 0
 2755 002c DFF86CA0 		ldr	r10, .L267
1080:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
 2756              		.loc 1 1080 0
 2757 0030 DFF86CB0 		ldr	fp, .L267+4
1081:../drivers/fsl_flash.c ****         }
 2758              		.loc 1 1081 0
 2759 0034 DFF86C80 		ldr	r8, .L267+8
1068:../drivers/fsl_flash.c **** 
 2760              		.loc 1 1068 0
 2761 0038 FFF7FEFF 		bl	flash_cache_clear_process
 2762              	.LVL310:
 2763              	.L260:
1070:../drivers/fsl_flash.c ****     {
 2764              		.loc 1 1070 0
 2765 003c 3DB9     		cbnz	r5, .L264
 2766 003e 2C46     		mov	r4, r5
 2767              	.LVL311:
 2768              	.L263:
1105:../drivers/fsl_flash.c **** 
 2769              		.loc 1 1105 0
 2770 0040 3046     		mov	r0, r6
 2771 0042 FFF7FEFF 		bl	flash_cache_clear
 2772              	.LVL312:
1107:../drivers/fsl_flash.c **** }
 2773              		.loc 1 1107 0
 2774 0046 2046     		mov	r0, r4
 2775              	.LVL313:
 2776              	.L258:
1108:../drivers/fsl_flash.c **** 
 2777              		.loc 1 1108 0
 2778 0048 09B0     		add	sp, sp, #36
 2779              		.cfi_remember_state
 2780              		.cfi_def_cfa_offset 36
 2781              		@ sp needed
 2782 004a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2783              	.LVL314:
 2784              	.L264:
 2785              		.cfi_restore_state
1073:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
 2786              		.loc 1 1073 0
 2787 004e 2368     		ldr	r3, [r4]
 2788 0050 CAF80030 		str	r3, [r10]
1074:../drivers/fsl_flash.c ****         {
 2789              		.loc 1 1074 0
 2790 0054 039B     		ldr	r3, [sp, #12]
 2791 0056 042B     		cmp	r3, #4
1073:../drivers/fsl_flash.c ****         if (4 == flashOperationInfo.blockWriteUnitSize)
 2792              		.loc 1 1073 0
 2793 0058 04F10409 		add	r9, r4, #4
 2794              	.LVL315:
1074:../drivers/fsl_flash.c ****         {
 2795              		.loc 1 1074 0
 2796 005c 10D1     		bne	.L261
1076:../drivers/fsl_flash.c ****         }
 2797              		.loc 1 1076 0
 2798 005e 27F07F43 		bic	r3, r7, #-16777216
 2799 0062 43F0C063 		orr	r3, r3, #100663296
 2800              	.L266:
1081:../drivers/fsl_flash.c ****         }
 2801              		.loc 1 1081 0
 2802 0066 C8F80030 		str	r3, [r8]
 2803              	.L262:
1088:../drivers/fsl_flash.c **** 
 2804              		.loc 1 1088 0
 2805 006a 3046     		mov	r0, r6
 2806 006c FFF7FEFF 		bl	flash_command_sequence
 2807              	.LVL316:
1091:../drivers/fsl_flash.c ****         {
 2808              		.loc 1 1091 0
 2809 0070 0446     		mov	r4, r0
 2810 0072 0028     		cmp	r0, #0
 2811 0074 E4D1     		bne	.L263
1098:../drivers/fsl_flash.c **** 
 2812              		.loc 1 1098 0
 2813 0076 039B     		ldr	r3, [sp, #12]
1101:../drivers/fsl_flash.c ****         }
 2814              		.loc 1 1101 0
 2815 0078 4C46     		mov	r4, r9
1098:../drivers/fsl_flash.c **** 
 2816              		.loc 1 1098 0
 2817 007a 1F44     		add	r7, r7, r3
 2818              	.LVL317:
1101:../drivers/fsl_flash.c ****         }
 2819              		.loc 1 1101 0
 2820 007c ED1A     		subs	r5, r5, r3
 2821              	.LVL318:
 2822 007e DDE7     		b	.L260
 2823              	.LVL319:
 2824              	.L261:
1078:../drivers/fsl_flash.c ****         {
 2825              		.loc 1 1078 0
 2826 0080 082B     		cmp	r3, #8
 2827 0082 F2D1     		bne	.L262
1080:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
 2828              		.loc 1 1080 0
 2829 0084 6368     		ldr	r3, [r4, #4]
 2830 0086 CBF80030 		str	r3, [fp]
1081:../drivers/fsl_flash.c ****         }
 2831              		.loc 1 1081 0
 2832 008a 27F07F43 		bic	r3, r7, #-16777216
1080:../drivers/fsl_flash.c ****             kFCCOBx[0] = BYTES_JOIN_TO_WORD_1_3(FTFx_PROGRAM_PHRASE, start);
 2833              		.loc 1 1080 0
 2834 008e 04F10809 		add	r9, r4, #8
 2835              	.LVL320:
1081:../drivers/fsl_flash.c ****         }
 2836              		.loc 1 1081 0
 2837 0092 43F0E063 		orr	r3, r3, #117440512
 2838 0096 E6E7     		b	.L266
 2839              	.LVL321:
 2840              	.L265:
1054:../drivers/fsl_flash.c ****     }
 2841              		.loc 1 1054 0
 2842 0098 0420     		movs	r0, #4
 2843              	.LVL322:
 2844 009a D5E7     		b	.L258
 2845              	.L268:
 2846              		.align	2
 2847              	.L267:
 2848 009c 08000240 		.word	1073872904
 2849 00a0 0C000240 		.word	1073872908
 2850 00a4 04000240 		.word	1073872900
 2851              		.cfi_endproc
 2852              	.LFE152:
 2854              		.section	.text.FLASH_ProgramOnce,"ax",%progbits
 2855              		.align	1
 2856              		.global	FLASH_ProgramOnce
 2857              		.syntax unified
 2858              		.thumb
 2859              		.thumb_func
 2860              		.fpu fpv4-sp-d16
 2862              	FLASH_ProgramOnce:
 2863              	.LFB153:
1111:../drivers/fsl_flash.c ****     status_t returnCode;
 2864              		.loc 1 1111 0
 2865              		.cfi_startproc
 2866              		@ args = 0, pretend = 0, frame = 0
 2867              		@ frame_needed = 0, uses_anonymous_args = 0
 2868              	.LVL323:
 2869 0000 38B5     		push	{r3, r4, r5, lr}
 2870              		.cfi_def_cfa_offset 16
 2871              		.cfi_offset 3, -16
 2872              		.cfi_offset 4, -12
 2873              		.cfi_offset 5, -8
 2874              		.cfi_offset 14, -4
1114:../drivers/fsl_flash.c ****     {
 2875              		.loc 1 1114 0
 2876 0002 0546     		mov	r5, r0
 2877 0004 C0B1     		cbz	r0, .L272
1114:../drivers/fsl_flash.c ****     {
 2878              		.loc 1 1114 0 is_stmt 0 discriminator 1
 2879 0006 BAB1     		cbz	r2, .L272
1120:../drivers/fsl_flash.c **** 
 2880              		.loc 1 1120 0 is_stmt 1
 2881 0008 0904     		lsls	r1, r1, #16
 2882              	.LVL324:
 2883 000a 0C4B     		ldr	r3, .L273
 2884              	.LVL325:
 2885 000c 01F47F01 		and	r1, r1, #16711680
 2886 0010 0B43     		orrs	r3, r3, r1
 2887 0012 0B49     		ldr	r1, .L273+4
 2888 0014 0B60     		str	r3, [r1]
1122:../drivers/fsl_flash.c **** 
 2889              		.loc 1 1122 0
 2890 0016 0B4B     		ldr	r3, .L273+8
 2891 0018 1168     		ldr	r1, [r2]
 2892 001a 1960     		str	r1, [r3]
1134:../drivers/fsl_flash.c ****     }
 2893              		.loc 1 1134 0
 2894 001c 5268     		ldr	r2, [r2, #4]
 2895              	.LVL326:
 2896 001e 5A60     		str	r2, [r3, #4]
1138:../drivers/fsl_flash.c **** 
 2897              		.loc 1 1138 0
 2898 0020 0021     		movs	r1, #0
 2899 0022 FFF7FEFF 		bl	flash_cache_clear_process
 2900              	.LVL327:
1141:../drivers/fsl_flash.c **** 
 2901              		.loc 1 1141 0
 2902 0026 2846     		mov	r0, r5
 2903 0028 FFF7FEFF 		bl	flash_command_sequence
 2904              	.LVL328:
 2905 002c 0446     		mov	r4, r0
 2906              	.LVL329:
1143:../drivers/fsl_flash.c **** 
 2907              		.loc 1 1143 0
 2908 002e 2846     		mov	r0, r5
 2909              	.LVL330:
 2910 0030 FFF7FEFF 		bl	flash_cache_clear
 2911              	.LVL331:
 2912              	.L269:
1146:../drivers/fsl_flash.c **** 
 2913              		.loc 1 1146 0
 2914 0034 2046     		mov	r0, r4
 2915 0036 38BD     		pop	{r3, r4, r5, pc}
 2916              	.LVL332:
 2917              	.L272:
1116:../drivers/fsl_flash.c ****     }
 2918              		.loc 1 1116 0
 2919 0038 0424     		movs	r4, #4
 2920 003a FBE7     		b	.L269
 2921              	.L274:
 2922              		.align	2
 2923              	.L273:
 2924 003c FFFF0043 		.word	1124139007
 2925 0040 04000240 		.word	1073872900
 2926 0044 08000240 		.word	1073872904
 2927              		.cfi_endproc
 2928              	.LFE153:
 2930              		.section	.text.FLASH_ProgramSection,"ax",%progbits
 2931              		.align	1
 2932              		.global	FLASH_ProgramSection
 2933              		.syntax unified
 2934              		.thumb
 2935              		.thumb_func
 2936              		.fpu fpv4-sp-d16
 2938              	FLASH_ProgramSection:
 2939              	.LFB154:
1150:../drivers/fsl_flash.c ****     status_t returnCode;
 2940              		.loc 1 1150 0
 2941              		.cfi_startproc
 2942              		@ args = 0, pretend = 0, frame = 40
 2943              		@ frame_needed = 0, uses_anonymous_args = 0
 2944              	.LVL333:
 2945 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2946              		.cfi_def_cfa_offset 36
 2947              		.cfi_offset 4, -36
 2948              		.cfi_offset 5, -32
 2949              		.cfi_offset 6, -28
 2950              		.cfi_offset 7, -24
 2951              		.cfi_offset 8, -20
 2952              		.cfi_offset 9, -16
 2953              		.cfi_offset 10, -12
 2954              		.cfi_offset 11, -8
 2955              		.cfi_offset 14, -4
 2956 0004 8BB0     		sub	sp, sp, #44
 2957              		.cfi_def_cfa_offset 80
1150:../drivers/fsl_flash.c ****     status_t returnCode;
 2958              		.loc 1 1150 0
 2959 0006 8146     		mov	r9, r0
 2960 0008 0C46     		mov	r4, r1
 2961 000a 1D46     		mov	r5, r3
1158:../drivers/fsl_flash.c ****     {
 2962              		.loc 1 1158 0
 2963 000c 0092     		str	r2, [sp]
 2964 000e 002A     		cmp	r2, #0
 2965 0010 5FD0     		beq	.L284
1163:../drivers/fsl_flash.c **** 
 2966              		.loc 1 1163 0
 2967 0012 02AA     		add	r2, sp, #8
 2968              	.LVL334:
 2969 0014 FFF7FEFF 		bl	flash_get_matched_operation_info
 2970              	.LVL335:
1166:../drivers/fsl_flash.c ****     if (returnCode)
 2971              		.loc 1 1166 0
 2972 0018 079B     		ldr	r3, [sp, #28]
 2973 001a 2A46     		mov	r2, r5
 2974 001c 2146     		mov	r1, r4
 2975 001e 4846     		mov	r0, r9
 2976 0020 FFF7FEFF 		bl	flash_check_range
 2977              	.LVL336:
1167:../drivers/fsl_flash.c ****     {
 2978              		.loc 1 1167 0
 2979 0024 8046     		mov	r8, r0
 2980 0026 0028     		cmp	r0, #0
 2981 0028 3DD1     		bne	.L275
1173:../drivers/fsl_flash.c **** 
 2982              		.loc 1 1173 0
 2983 002a DDE90263 		ldrd	r6, r3, [sp, #8]
1189:../drivers/fsl_flash.c **** 
 2984              		.loc 1 1189 0
 2985 002e 0146     		mov	r1, r0
 2986 0030 4846     		mov	r0, r9
 2987              	.LVL337:
1173:../drivers/fsl_flash.c **** 
 2988              		.loc 1 1173 0
 2989 0032 0193     		str	r3, [sp, #4]
 2990              	.LVL338:
1189:../drivers/fsl_flash.c **** 
 2991              		.loc 1 1189 0
 2992 0034 FFF7FEFF 		bl	flash_cache_clear_process
 2993              	.LVL339:
 2994              	.L277:
1191:../drivers/fsl_flash.c ****     {
 2995              		.loc 1 1191 0
 2996 0038 1DB9     		cbnz	r5, .L283
1255:../drivers/fsl_flash.c **** 
 2997              		.loc 1 1255 0
 2998 003a 4846     		mov	r0, r9
 2999 003c FFF7FEFF 		bl	flash_cache_clear
 3000              	.LVL340:
1269:../drivers/fsl_flash.c **** }
 3001              		.loc 1 1269 0
 3002 0040 31E0     		b	.L275
 3003              	.L283:
 3004              	.LBB88:
1194:../drivers/fsl_flash.c ****         uint32_t lengthTobeProgrammedOfCurrentSector;
 3005              		.loc 1 1194 0
 3006 0042 019A     		ldr	r2, [sp, #4]
 3007 0044 7342     		negs	r3, r6
 3008 0046 5242     		negs	r2, r2
 3009 0048 1340     		ands	r3, r3, r2
 3010 004a 5C42     		negs	r4, r3
 3011              	.LVL341:
1198:../drivers/fsl_flash.c ****         {
 3012              		.loc 1 1198 0
 3013 004c A642     		cmp	r6, r4
 3014 004e 04BF     		itt	eq
 3015 0050 019A     		ldreq	r2, [sp, #4]
 3016 0052 D41A     		subeq	r4, r2, r3
 3017              	.LVL342:
1203:../drivers/fsl_flash.c ****         {
 3018              		.loc 1 1203 0
 3019 0054 7319     		adds	r3, r6, r5
 3020 0056 A342     		cmp	r3, r4
 3021 0058 39D9     		bls	.L285
1205:../drivers/fsl_flash.c ****         }
 3022              		.loc 1 1205 0
 3023 005a A41B     		subs	r4, r4, r6
 3024              	.LVL343:
 3025              	.L279:
 3026 005c 4FF0000A 		mov	r10, #0
 3027 0060 28E0     		b	.L281
 3028              	.LVL344:
 3029              	.L282:
 3030 0062 B4F5806F 		cmp	r4, #1024
 3031 0066 A346     		mov	fp, r4
 3032 0068 28BF     		it	cs
 3033 006a 4FF4806B 		movcs	fp, #1024
 3034              	.LVL345:
 3035              	.LBB89:
1229:../drivers/fsl_flash.c ****             /* Set start address of the data to be programmed */
 3036              		.loc 1 1229 0
 3037 006e 5A46     		mov	r2, fp
 3038 0070 4FF0A050 		mov	r0, #335544320
 3039 0074 FFF7FEFF 		bl	memcpy
 3040              	.LVL346:
1231:../drivers/fsl_flash.c ****             /* Set program size in terms of FEATURE_FLASH_SECTION_CMD_ADDRESS_ALIGMENT */
 3041              		.loc 1 1231 0
 3042 0078 27F07F47 		bic	r7, r7, #-16777216
 3043 007c 164B     		ldr	r3, .L286
 3044 007e 47F03067 		orr	r7, r7, #184549376
 3045 0082 1F60     		str	r7, [r3]
 3046              	.LVL347:
1233:../drivers/fsl_flash.c **** 
 3047              		.loc 1 1233 0
 3048 0084 079A     		ldr	r2, [sp, #28]
 3049 0086 BBFBF2F1 		udiv	r1, fp, r2
 3050              	.LVL348:
1235:../drivers/fsl_flash.c **** 
 3051              		.loc 1 1235 0
 3052 008a 4FF6FF72 		movw	r2, #65535
 3053 008e 42EA0142 		orr	r2, r2, r1, lsl #16
 3054 0092 5A60     		str	r2, [r3, #4]
1238:../drivers/fsl_flash.c **** 
 3055              		.loc 1 1238 0
 3056 0094 4846     		mov	r0, r9
 3057 0096 FFF7FEFF 		bl	flash_command_sequence
 3058              	.LVL349:
1240:../drivers/fsl_flash.c ****             {
 3059              		.loc 1 1240 0
 3060 009a 0746     		mov	r7, r0
 3061 009c 38B1     		cbz	r0, .L280
1242:../drivers/fsl_flash.c ****                 return returnCode;
 3062              		.loc 1 1242 0
 3063 009e 4846     		mov	r0, r9
 3064              	.LVL350:
 3065 00a0 FFF7FEFF 		bl	flash_cache_clear
 3066              	.LVL351:
1238:../drivers/fsl_flash.c **** 
 3067              		.loc 1 1238 0
 3068 00a4 B846     		mov	r8, r7
 3069              	.LVL352:
 3070              	.L275:
 3071              	.LBE89:
 3072              	.LBE88:
1270:../drivers/fsl_flash.c **** #endif /* FSL_FEATURE_FLASH_HAS_PROGRAM_SECTION_CMD */
 3073              		.loc 1 1270 0
 3074 00a6 4046     		mov	r0, r8
 3075 00a8 0BB0     		add	sp, sp, #44
 3076              		.cfi_remember_state
 3077              		.cfi_def_cfa_offset 36
 3078              		@ sp needed
 3079 00aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3080              	.LVL353:
 3081              	.L280:
 3082              		.cfi_restore_state
 3083              	.LBB91:
 3084              	.LBB90:
1246:../drivers/fsl_flash.c ****             currentOffset += programSizeOfCurrentPass;
 3085              		.loc 1 1246 0
 3086 00ae A4EB0B04 		sub	r4, r4, fp
 3087              	.LVL354:
1247:../drivers/fsl_flash.c ****         }
 3088              		.loc 1 1247 0
 3089 00b2 DA44     		add	r10, r10, fp
 3090              	.LVL355:
 3091              	.L281:
 3092 00b4 009B     		ldr	r3, [sp]
 3093 00b6 2AF00301 		bic	r1, r10, #3
 3094 00ba 1944     		add	r1, r1, r3
 3095 00bc 06EB0A07 		add	r7, r6, r10
 3096              	.LBE90:
1213:../drivers/fsl_flash.c ****         {
 3097              		.loc 1 1213 0
 3098 00c0 002C     		cmp	r4, #0
 3099 00c2 CED1     		bne	.L282
 3100              	.LVL356:
1252:../drivers/fsl_flash.c ****     }
 3101              		.loc 1 1252 0
 3102 00c4 A5EB0A05 		sub	r5, r5, r10
 3103              	.LVL357:
 3104 00c8 0091     		str	r1, [sp]
 3105              	.LVL358:
 3106 00ca 3E46     		mov	r6, r7
 3107              	.LVL359:
 3108 00cc B4E7     		b	.L277
 3109              	.LVL360:
 3110              	.L285:
 3111 00ce 2C46     		mov	r4, r5
 3112              	.LVL361:
 3113 00d0 C4E7     		b	.L279
 3114              	.LVL362:
 3115              	.L284:
 3116              	.LBE91:
1160:../drivers/fsl_flash.c ****     }
 3117              		.loc 1 1160 0
 3118 00d2 4FF00408 		mov	r8, #4
 3119 00d6 E6E7     		b	.L275
 3120              	.L287:
 3121              		.align	2
 3122              	.L286:
 3123 00d8 04000240 		.word	1073872900
 3124              		.cfi_endproc
 3125              	.LFE154:
 3127              		.global	kPFlashDensities
 3128              		.global	kFPROTL
 3129              		.global	kFCCOBx
 3130              		.section	.bss.callFlashCommonBitOperation,"aw",%nobits
 3131              		.align	2
 3132              		.set	.LANCHOR3,. + 0
 3135              	callFlashCommonBitOperation:
 3136 0000 00000000 		.space	4
 3137              		.section	.bss.callFlashRunCommand,"aw",%nobits
 3138              		.align	2
 3139              		.set	.LANCHOR0,. + 0
 3142              	callFlashRunCommand:
 3143 0000 00000000 		.space	4
 3144              		.section	.bss.s_flashCommonBitOperation,"aw",%nobits
 3145              		.align	2
 3146              		.set	.LANCHOR7,. + 0
 3149              	s_flashCommonBitOperation:
 3150 0000 00000000 		.space	64
 3150      00000000 
 3150      00000000 
 3150      00000000 
 3150      00000000 
 3151              		.section	.bss.s_flashExecuteInRamFunctionInfo,"aw",%nobits
 3152              		.align	2
 3153              		.set	.LANCHOR5,. + 0
 3156              	s_flashExecuteInRamFunctionInfo:
 3157 0000 00000000 		.space	12
 3157      00000000 
 3157      00000000 
 3158              		.section	.bss.s_flashRunCommand,"aw",%nobits
 3159              		.align	2
 3160              		.set	.LANCHOR6,. + 0
 3163              	s_flashRunCommand:
 3164 0000 00000000 		.space	64
 3164      00000000 
 3164      00000000 
 3164      00000000 
 3164      00000000 
 3165              		.section	.rodata.kFCCOBx,"a",%progbits
 3166              		.align	2
 3169              	kFCCOBx:
 3170 0000 04000240 		.word	1073872900
 3171              		.section	.rodata.kFPROTL,"a",%progbits
 3172              		.align	2
 3175              	kFPROTL:
 3176 0000 10000240 		.word	1073872912
 3177              		.section	.rodata.kPFlashDensities,"a",%progbits
 3178              		.align	1
 3179              		.set	.LANCHOR4,. + 0
 3182              	kPFlashDensities:
 3183 0000 0800     		.short	8
 3184 0002 1000     		.short	16
 3185 0004 1800     		.short	24
 3186 0006 2000     		.short	32
 3187 0008 3000     		.short	48
 3188 000a 4000     		.short	64
 3189 000c 6000     		.short	96
 3190 000e 8000     		.short	128
 3191 0010 C000     		.short	192
 3192 0012 0001     		.short	256
 3193 0014 8001     		.short	384
 3194 0016 0002     		.short	512
 3195 0018 0003     		.short	768
 3196 001a 0004     		.short	1024
 3197 001c 0006     		.short	1536
 3198              		.section	.rodata.s_flashCommonBitOperationFunctionCode,"a",%progbits
 3199              		.align	1
 3200              		.set	.LANCHOR2,. + 0
 3203              	s_flashCommonBitOperationFunctionCode:
 3204 0000 10B5     		.short	-19184
 3205 0002 0029     		.short	10496
 3206 0004 05D0     		.short	-12283
 3207 0006 0468     		.short	26628
 3208 0008 8C43     		.short	17292
 3209 000a 9340     		.short	16531
 3210 000c 1940     		.short	16409
 3211 000e 2143     		.short	17185
 3212 0010 0160     		.short	24577
 3213 0012 BFF3     		.short	-3137
 3214 0014 6F8F     		.short	-28817
 3215 0016 BFF3     		.short	-3137
 3216 0018 4F8F     		.short	-28849
 3217 001a 10BD     		.short	-17136
 3218              		.section	.rodata.s_flashRunCommandFunctionCode,"a",%progbits
 3219              		.align	1
 3220              		.set	.LANCHOR1,. + 0
 3223              	s_flashRunCommandFunctionCode:
 3224 0000 8021     		.short	8576
 3225 0002 0170     		.short	28673
 3226 0004 0278     		.short	30722
 3227 0006 0A42     		.short	16906
 3228 0008 FCD0     		.short	-12036
 3229 000a 7047     		.short	18288
 3230              		.text
 3231              	.Letext0:
 3232              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 3233              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3234              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 3235              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 3236              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 3237              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 3238              		.file 8 "../CMSIS/core_cm4.h"
 3239              		.file 9 "../CMSIS/system_MK64F12.h"
 3240              		.file 10 "../CMSIS/MK64F12.h"
 3241              		.file 11 "../drivers/fsl_common.h"
 3242              		.file 12 "../drivers/fsl_clock.h"
 3243              		.file 13 "../drivers/fsl_flash.h"
 3244              		.file 14 "<built-in>"
