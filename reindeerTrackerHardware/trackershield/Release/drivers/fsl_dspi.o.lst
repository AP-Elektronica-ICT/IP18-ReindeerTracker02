   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_dspi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DSPI_CommonIRQHandler,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	DSPI_CommonIRQHandler:
  25              	.LFB201:
  26              		.file 1 "../drivers/fsl_dspi.c"
   1:../drivers/fsl_dspi.c **** /*
   2:../drivers/fsl_dspi.c ****  * The Clear BSD License
   3:../drivers/fsl_dspi.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_dspi.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_dspi.c ****  * All rights reserved.
   6:../drivers/fsl_dspi.c ****  *
   7:../drivers/fsl_dspi.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_dspi.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_dspi.c ****  * that the following conditions are met:
  10:../drivers/fsl_dspi.c ****  *
  11:../drivers/fsl_dspi.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_dspi.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_dspi.c ****  *
  14:../drivers/fsl_dspi.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_dspi.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_dspi.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_dspi.c ****  *
  18:../drivers/fsl_dspi.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_dspi.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_dspi.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_dspi.c ****  *
  22:../drivers/fsl_dspi.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_dspi.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_dspi.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_dspi.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_dspi.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_dspi.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_dspi.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_dspi.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_dspi.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_dspi.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_dspi.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_dspi.c ****  */
  34:../drivers/fsl_dspi.c **** 
  35:../drivers/fsl_dspi.c **** #include "fsl_dspi.h"
  36:../drivers/fsl_dspi.c **** 
  37:../drivers/fsl_dspi.c **** /*******************************************************************************
  38:../drivers/fsl_dspi.c ****  * Definitions
  39:../drivers/fsl_dspi.c ****  ******************************************************************************/
  40:../drivers/fsl_dspi.c **** /*! @brief Typedef for master interrupt handler. */
  41:../drivers/fsl_dspi.c **** typedef void (*dspi_master_isr_t)(SPI_Type *base, dspi_master_handle_t *handle);
  42:../drivers/fsl_dspi.c **** 
  43:../drivers/fsl_dspi.c **** /*! @brief Typedef for slave interrupt handler. */
  44:../drivers/fsl_dspi.c **** typedef void (*dspi_slave_isr_t)(SPI_Type *base, dspi_slave_handle_t *handle);
  45:../drivers/fsl_dspi.c **** 
  46:../drivers/fsl_dspi.c **** /*******************************************************************************
  47:../drivers/fsl_dspi.c ****  * Prototypes
  48:../drivers/fsl_dspi.c ****  ******************************************************************************/
  49:../drivers/fsl_dspi.c **** /*!
  50:../drivers/fsl_dspi.c ****  * @brief Get instance number for DSPI module.
  51:../drivers/fsl_dspi.c ****  *
  52:../drivers/fsl_dspi.c ****  * @param base DSPI peripheral base address.
  53:../drivers/fsl_dspi.c ****  */
  54:../drivers/fsl_dspi.c **** uint32_t DSPI_GetInstance(SPI_Type *base);
  55:../drivers/fsl_dspi.c **** 
  56:../drivers/fsl_dspi.c **** /*!
  57:../drivers/fsl_dspi.c ****  * @brief Configures the DSPI peripheral chip select polarity.
  58:../drivers/fsl_dspi.c ****  *
  59:../drivers/fsl_dspi.c ****  * This function  takes in the desired peripheral chip select (Pcs) and it's corresponding desired 
  60:../drivers/fsl_dspi.c ****  * configures the Pcs signal to operate with the desired characteristic.
  61:../drivers/fsl_dspi.c ****  *
  62:../drivers/fsl_dspi.c ****  * @param base DSPI peripheral address.
  63:../drivers/fsl_dspi.c ****  * @param pcs The particular peripheral chip select (parameter value is of type dspi_which_pcs_t) f
  64:../drivers/fsl_dspi.c ****  *            apply the active high or active low characteristic.
  65:../drivers/fsl_dspi.c ****  * @param activeLowOrHigh The setting for either "active high, inactive low (0)"  or "active low, i
  66:../drivers/fsl_dspi.c ****  *                        type dspi_pcs_polarity_config_t.
  67:../drivers/fsl_dspi.c ****  */
  68:../drivers/fsl_dspi.c **** static void DSPI_SetOnePcsPolarity(SPI_Type *base, dspi_which_pcs_t pcs, dspi_pcs_polarity_config_t
  69:../drivers/fsl_dspi.c **** 
  70:../drivers/fsl_dspi.c **** /*!
  71:../drivers/fsl_dspi.c ****  * @brief Master fill up the TX FIFO with data.
  72:../drivers/fsl_dspi.c ****  * This is not a public API.
  73:../drivers/fsl_dspi.c ****  */
  74:../drivers/fsl_dspi.c **** static void DSPI_MasterTransferFillUpTxFifo(SPI_Type *base, dspi_master_handle_t *handle);
  75:../drivers/fsl_dspi.c **** 
  76:../drivers/fsl_dspi.c **** /*!
  77:../drivers/fsl_dspi.c ****  * @brief Master finish up a transfer.
  78:../drivers/fsl_dspi.c ****  * It would call back if there is callback function and set the state to idle.
  79:../drivers/fsl_dspi.c ****  * This is not a public API.
  80:../drivers/fsl_dspi.c ****  */
  81:../drivers/fsl_dspi.c **** static void DSPI_MasterTransferComplete(SPI_Type *base, dspi_master_handle_t *handle);
  82:../drivers/fsl_dspi.c **** 
  83:../drivers/fsl_dspi.c **** /*!
  84:../drivers/fsl_dspi.c ****  * @brief Slave fill up the TX FIFO with data.
  85:../drivers/fsl_dspi.c ****  * This is not a public API.
  86:../drivers/fsl_dspi.c ****  */
  87:../drivers/fsl_dspi.c **** static void DSPI_SlaveTransferFillUpTxFifo(SPI_Type *base, dspi_slave_handle_t *handle);
  88:../drivers/fsl_dspi.c **** 
  89:../drivers/fsl_dspi.c **** /*!
  90:../drivers/fsl_dspi.c ****  * @brief Slave finish up a transfer.
  91:../drivers/fsl_dspi.c ****  * It would call back if there is callback function and set the state to idle.
  92:../drivers/fsl_dspi.c ****  * This is not a public API.
  93:../drivers/fsl_dspi.c ****  */
  94:../drivers/fsl_dspi.c **** static void DSPI_SlaveTransferComplete(SPI_Type *base, dspi_slave_handle_t *handle);
  95:../drivers/fsl_dspi.c **** 
  96:../drivers/fsl_dspi.c **** /*!
  97:../drivers/fsl_dspi.c ****  * @brief DSPI common interrupt handler.
  98:../drivers/fsl_dspi.c ****  *
  99:../drivers/fsl_dspi.c ****  * @param base DSPI peripheral address.
 100:../drivers/fsl_dspi.c ****  * @param handle pointer to g_dspiHandle which stores the transfer state.
 101:../drivers/fsl_dspi.c ****  */
 102:../drivers/fsl_dspi.c **** static void DSPI_CommonIRQHandler(SPI_Type *base, void *param);
 103:../drivers/fsl_dspi.c **** 
 104:../drivers/fsl_dspi.c **** /*!
 105:../drivers/fsl_dspi.c ****  * @brief Master prepare the transfer.
 106:../drivers/fsl_dspi.c ****  * Basically it set up dspi_master_handle .
 107:../drivers/fsl_dspi.c ****  * This is not a public API.
 108:../drivers/fsl_dspi.c ****  */
 109:../drivers/fsl_dspi.c **** static void DSPI_MasterTransferPrepare(SPI_Type *base, dspi_master_handle_t *handle, dspi_transfer_
 110:../drivers/fsl_dspi.c **** 
 111:../drivers/fsl_dspi.c **** /*******************************************************************************
 112:../drivers/fsl_dspi.c ****  * Variables
 113:../drivers/fsl_dspi.c ****  ******************************************************************************/
 114:../drivers/fsl_dspi.c **** 
 115:../drivers/fsl_dspi.c **** /* Defines constant value arrays for the baud rate pre-scalar and scalar divider values.*/
 116:../drivers/fsl_dspi.c **** static const uint32_t s_baudratePrescaler[] = {2, 3, 5, 7};
 117:../drivers/fsl_dspi.c **** static const uint32_t s_baudrateScaler[] = {2,   4,   6,    8,    16,   32,   64,    128,
 118:../drivers/fsl_dspi.c ****                                             256, 512, 1024, 2048, 4096, 8192, 16384, 32768};
 119:../drivers/fsl_dspi.c **** 
 120:../drivers/fsl_dspi.c **** static const uint32_t s_delayPrescaler[] = {1, 3, 5, 7};
 121:../drivers/fsl_dspi.c **** static const uint32_t s_delayScaler[] = {2,   4,    8,    16,   32,   64,    128,   256,
 122:../drivers/fsl_dspi.c ****                                          512, 1024, 2048, 4096, 8192, 16384, 32768, 65536};
 123:../drivers/fsl_dspi.c **** 
 124:../drivers/fsl_dspi.c **** /*! @brief Pointers to dspi bases for each instance. */
 125:../drivers/fsl_dspi.c **** static SPI_Type *const s_dspiBases[] = SPI_BASE_PTRS;
 126:../drivers/fsl_dspi.c **** 
 127:../drivers/fsl_dspi.c **** /*! @brief Pointers to dspi IRQ number for each instance. */
 128:../drivers/fsl_dspi.c **** static IRQn_Type const s_dspiIRQ[] = SPI_IRQS;
 129:../drivers/fsl_dspi.c **** 
 130:../drivers/fsl_dspi.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 131:../drivers/fsl_dspi.c **** /*! @brief Pointers to dspi clocks for each instance. */
 132:../drivers/fsl_dspi.c **** static clock_ip_name_t const s_dspiClock[] = DSPI_CLOCKS;
 133:../drivers/fsl_dspi.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 134:../drivers/fsl_dspi.c **** 
 135:../drivers/fsl_dspi.c **** /*! @brief Pointers to dspi handles for each instance. */
 136:../drivers/fsl_dspi.c **** static void *g_dspiHandle[ARRAY_SIZE(s_dspiBases)];
 137:../drivers/fsl_dspi.c **** 
 138:../drivers/fsl_dspi.c **** /*! @brief Pointer to master IRQ handler for each instance. */
 139:../drivers/fsl_dspi.c **** static dspi_master_isr_t s_dspiMasterIsr;
 140:../drivers/fsl_dspi.c **** 
 141:../drivers/fsl_dspi.c **** /*! @brief Pointer to slave IRQ handler for each instance. */
 142:../drivers/fsl_dspi.c **** static dspi_slave_isr_t s_dspiSlaveIsr;
 143:../drivers/fsl_dspi.c **** 
 144:../drivers/fsl_dspi.c **** /* @brief Dummy data for each instance. This data is used when user's tx buffer is NULL*/
 145:../drivers/fsl_dspi.c **** volatile uint8_t s_dummyData[ARRAY_SIZE(s_dspiBases)] = {0};
 146:../drivers/fsl_dspi.c **** /**************************************************************************************************
 147:../drivers/fsl_dspi.c **** * Code
 148:../drivers/fsl_dspi.c **** ***************************************************************************************************
 149:../drivers/fsl_dspi.c **** uint32_t DSPI_GetInstance(SPI_Type *base)
 150:../drivers/fsl_dspi.c **** {
 151:../drivers/fsl_dspi.c ****     uint32_t instance;
 152:../drivers/fsl_dspi.c **** 
 153:../drivers/fsl_dspi.c ****     /* Find the instance index from base address mappings. */
 154:../drivers/fsl_dspi.c ****     for (instance = 0; instance < ARRAY_SIZE(s_dspiBases); instance++)
 155:../drivers/fsl_dspi.c ****     {
 156:../drivers/fsl_dspi.c ****         if (s_dspiBases[instance] == base)
 157:../drivers/fsl_dspi.c ****         {
 158:../drivers/fsl_dspi.c ****             break;
 159:../drivers/fsl_dspi.c ****         }
 160:../drivers/fsl_dspi.c ****     }
 161:../drivers/fsl_dspi.c **** 
 162:../drivers/fsl_dspi.c ****     assert(instance < ARRAY_SIZE(s_dspiBases));
 163:../drivers/fsl_dspi.c **** 
 164:../drivers/fsl_dspi.c ****     return instance;
 165:../drivers/fsl_dspi.c **** }
 166:../drivers/fsl_dspi.c **** 
 167:../drivers/fsl_dspi.c **** void DSPI_SetDummyData(SPI_Type *base, uint8_t dummyData)
 168:../drivers/fsl_dspi.c **** {
 169:../drivers/fsl_dspi.c ****     uint32_t instance = DSPI_GetInstance(base);
 170:../drivers/fsl_dspi.c ****     s_dummyData[instance] = dummyData;
 171:../drivers/fsl_dspi.c **** }
 172:../drivers/fsl_dspi.c **** 
 173:../drivers/fsl_dspi.c **** void DSPI_MasterInit(SPI_Type *base, const dspi_master_config_t *masterConfig, uint32_t srcClock_Hz
 174:../drivers/fsl_dspi.c **** {
 175:../drivers/fsl_dspi.c ****     assert(masterConfig);
 176:../drivers/fsl_dspi.c **** 
 177:../drivers/fsl_dspi.c ****     uint32_t temp;
 178:../drivers/fsl_dspi.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 179:../drivers/fsl_dspi.c ****     /* enable DSPI clock */
 180:../drivers/fsl_dspi.c ****     CLOCK_EnableClock(s_dspiClock[DSPI_GetInstance(base)]);
 181:../drivers/fsl_dspi.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 182:../drivers/fsl_dspi.c **** 
 183:../drivers/fsl_dspi.c ****     DSPI_Enable(base, true);
 184:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
 185:../drivers/fsl_dspi.c **** 
 186:../drivers/fsl_dspi.c ****     DSPI_SetMasterSlaveMode(base, kDSPI_Master);
 187:../drivers/fsl_dspi.c **** 
 188:../drivers/fsl_dspi.c ****     temp = base->MCR & (~(SPI_MCR_CONT_SCKE_MASK | SPI_MCR_MTFE_MASK | SPI_MCR_ROOE_MASK | SPI_MCR_
 189:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 190:../drivers/fsl_dspi.c **** 
 191:../drivers/fsl_dspi.c ****     base->MCR = temp | SPI_MCR_CONT_SCKE(masterConfig->enableContinuousSCK) |
 192:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(masterConfig->enableModifiedTimingFormat) |
 193:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(masterConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(masterConfig->s
 194:../drivers/fsl_dspi.c ****                 SPI_MCR_DIS_TXF(false) | SPI_MCR_DIS_RXF(false);
 195:../drivers/fsl_dspi.c **** 
 196:../drivers/fsl_dspi.c ****     DSPI_SetOnePcsPolarity(base, masterConfig->whichPcs, masterConfig->pcsActiveHighOrLow);
 197:../drivers/fsl_dspi.c **** 
 198:../drivers/fsl_dspi.c ****     if (0 == DSPI_MasterSetBaudRate(base, masterConfig->whichCtar, masterConfig->ctarConfig.baudRat
 199:../drivers/fsl_dspi.c ****     {
 200:../drivers/fsl_dspi.c ****         assert(false);
 201:../drivers/fsl_dspi.c ****     }
 202:../drivers/fsl_dspi.c **** 
 203:../drivers/fsl_dspi.c ****     temp = base->CTAR[masterConfig->whichCtar] &
 204:../drivers/fsl_dspi.c ****            ~(SPI_CTAR_FMSZ_MASK | SPI_CTAR_CPOL_MASK | SPI_CTAR_CPHA_MASK | SPI_CTAR_LSBFE_MASK);
 205:../drivers/fsl_dspi.c **** 
 206:../drivers/fsl_dspi.c ****     base->CTAR[masterConfig->whichCtar] =
 207:../drivers/fsl_dspi.c ****         temp | SPI_CTAR_FMSZ(masterConfig->ctarConfig.bitsPerFrame - 1) | SPI_CTAR_CPOL(masterConfi
 208:../drivers/fsl_dspi.c ****         SPI_CTAR_CPHA(masterConfig->ctarConfig.cpha) | SPI_CTAR_LSBFE(masterConfig->ctarConfig.dire
 209:../drivers/fsl_dspi.c **** 
 210:../drivers/fsl_dspi.c ****     DSPI_MasterSetDelayTimes(base, masterConfig->whichCtar, kDSPI_PcsToSck, srcClock_Hz,
 211:../drivers/fsl_dspi.c ****                              masterConfig->ctarConfig.pcsToSckDelayInNanoSec);
 212:../drivers/fsl_dspi.c ****     DSPI_MasterSetDelayTimes(base, masterConfig->whichCtar, kDSPI_LastSckToPcs, srcClock_Hz,
 213:../drivers/fsl_dspi.c ****                              masterConfig->ctarConfig.lastSckToPcsDelayInNanoSec);
 214:../drivers/fsl_dspi.c ****     DSPI_MasterSetDelayTimes(base, masterConfig->whichCtar, kDSPI_BetweenTransfer, srcClock_Hz,
 215:../drivers/fsl_dspi.c ****                              masterConfig->ctarConfig.betweenTransferDelayInNanoSec);
 216:../drivers/fsl_dspi.c **** 
 217:../drivers/fsl_dspi.c ****     DSPI_SetDummyData(base, DSPI_DUMMY_DATA);
 218:../drivers/fsl_dspi.c ****     DSPI_StartTransfer(base);
 219:../drivers/fsl_dspi.c **** }
 220:../drivers/fsl_dspi.c **** 
 221:../drivers/fsl_dspi.c **** void DSPI_MasterGetDefaultConfig(dspi_master_config_t *masterConfig)
 222:../drivers/fsl_dspi.c **** {
 223:../drivers/fsl_dspi.c ****     assert(masterConfig);
 224:../drivers/fsl_dspi.c **** 
 225:../drivers/fsl_dspi.c ****     masterConfig->whichCtar = kDSPI_Ctar0;
 226:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.baudRate = 500000;
 227:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.bitsPerFrame = 8;
 228:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.cpol = kDSPI_ClockPolarityActiveHigh;
 229:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.cpha = kDSPI_ClockPhaseFirstEdge;
 230:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.direction = kDSPI_MsbFirst;
 231:../drivers/fsl_dspi.c **** 
 232:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.pcsToSckDelayInNanoSec = 1000;
 233:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.lastSckToPcsDelayInNanoSec = 1000;
 234:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.betweenTransferDelayInNanoSec = 1000;
 235:../drivers/fsl_dspi.c **** 
 236:../drivers/fsl_dspi.c ****     masterConfig->whichPcs = kDSPI_Pcs0;
 237:../drivers/fsl_dspi.c ****     masterConfig->pcsActiveHighOrLow = kDSPI_PcsActiveLow;
 238:../drivers/fsl_dspi.c **** 
 239:../drivers/fsl_dspi.c ****     masterConfig->enableContinuousSCK = false;
 240:../drivers/fsl_dspi.c ****     masterConfig->enableRxFifoOverWrite = false;
 241:../drivers/fsl_dspi.c ****     masterConfig->enableModifiedTimingFormat = false;
 242:../drivers/fsl_dspi.c ****     masterConfig->samplePoint = kDSPI_SckToSin0Clock;
 243:../drivers/fsl_dspi.c **** }
 244:../drivers/fsl_dspi.c **** 
 245:../drivers/fsl_dspi.c **** void DSPI_SlaveInit(SPI_Type *base, const dspi_slave_config_t *slaveConfig)
 246:../drivers/fsl_dspi.c **** {
 247:../drivers/fsl_dspi.c ****     assert(slaveConfig);
 248:../drivers/fsl_dspi.c **** 
 249:../drivers/fsl_dspi.c ****     uint32_t temp = 0;
 250:../drivers/fsl_dspi.c **** 
 251:../drivers/fsl_dspi.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 252:../drivers/fsl_dspi.c ****     /* enable DSPI clock */
 253:../drivers/fsl_dspi.c ****     CLOCK_EnableClock(s_dspiClock[DSPI_GetInstance(base)]);
 254:../drivers/fsl_dspi.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 255:../drivers/fsl_dspi.c **** 
 256:../drivers/fsl_dspi.c ****     DSPI_Enable(base, true);
 257:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
 258:../drivers/fsl_dspi.c **** 
 259:../drivers/fsl_dspi.c ****     DSPI_SetMasterSlaveMode(base, kDSPI_Slave);
 260:../drivers/fsl_dspi.c **** 
 261:../drivers/fsl_dspi.c ****     temp = base->MCR & (~(SPI_MCR_CONT_SCKE_MASK | SPI_MCR_MTFE_MASK | SPI_MCR_ROOE_MASK | SPI_MCR_
 262:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 263:../drivers/fsl_dspi.c **** 
 264:../drivers/fsl_dspi.c ****     base->MCR = temp | SPI_MCR_CONT_SCKE(slaveConfig->enableContinuousSCK) |
 265:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(slaveConfig->enableModifiedTimingFormat) |
 266:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(slaveConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(slaveConfig->sam
 267:../drivers/fsl_dspi.c ****                 SPI_MCR_DIS_TXF(false) | SPI_MCR_DIS_RXF(false);
 268:../drivers/fsl_dspi.c **** 
 269:../drivers/fsl_dspi.c ****     DSPI_SetOnePcsPolarity(base, kDSPI_Pcs0, kDSPI_PcsActiveLow);
 270:../drivers/fsl_dspi.c **** 
 271:../drivers/fsl_dspi.c ****     temp = base->CTAR[slaveConfig->whichCtar] &
 272:../drivers/fsl_dspi.c ****            ~(SPI_CTAR_FMSZ_MASK | SPI_CTAR_CPOL_MASK | SPI_CTAR_CPHA_MASK | SPI_CTAR_LSBFE_MASK);
 273:../drivers/fsl_dspi.c **** 
 274:../drivers/fsl_dspi.c ****     base->CTAR[slaveConfig->whichCtar] = temp | SPI_CTAR_SLAVE_FMSZ(slaveConfig->ctarConfig.bitsPer
 275:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPOL(slaveConfig->ctarConfig.cpol) |
 276:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPHA(slaveConfig->ctarConfig.cpha);
 277:../drivers/fsl_dspi.c **** 
 278:../drivers/fsl_dspi.c ****     DSPI_SetDummyData(base, DSPI_DUMMY_DATA);
 279:../drivers/fsl_dspi.c **** 
 280:../drivers/fsl_dspi.c ****     DSPI_StartTransfer(base);
 281:../drivers/fsl_dspi.c **** }
 282:../drivers/fsl_dspi.c **** 
 283:../drivers/fsl_dspi.c **** void DSPI_SlaveGetDefaultConfig(dspi_slave_config_t *slaveConfig)
 284:../drivers/fsl_dspi.c **** {
 285:../drivers/fsl_dspi.c ****     assert(slaveConfig);
 286:../drivers/fsl_dspi.c **** 
 287:../drivers/fsl_dspi.c ****     slaveConfig->whichCtar = kDSPI_Ctar0;
 288:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.bitsPerFrame = 8;
 289:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.cpol = kDSPI_ClockPolarityActiveHigh;
 290:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.cpha = kDSPI_ClockPhaseFirstEdge;
 291:../drivers/fsl_dspi.c **** 
 292:../drivers/fsl_dspi.c ****     slaveConfig->enableContinuousSCK = false;
 293:../drivers/fsl_dspi.c ****     slaveConfig->enableRxFifoOverWrite = false;
 294:../drivers/fsl_dspi.c ****     slaveConfig->enableModifiedTimingFormat = false;
 295:../drivers/fsl_dspi.c ****     slaveConfig->samplePoint = kDSPI_SckToSin0Clock;
 296:../drivers/fsl_dspi.c **** }
 297:../drivers/fsl_dspi.c **** 
 298:../drivers/fsl_dspi.c **** void DSPI_Deinit(SPI_Type *base)
 299:../drivers/fsl_dspi.c **** {
 300:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
 301:../drivers/fsl_dspi.c ****     DSPI_Enable(base, false);
 302:../drivers/fsl_dspi.c **** 
 303:../drivers/fsl_dspi.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 304:../drivers/fsl_dspi.c ****     /* disable DSPI clock */
 305:../drivers/fsl_dspi.c ****     CLOCK_DisableClock(s_dspiClock[DSPI_GetInstance(base)]);
 306:../drivers/fsl_dspi.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 307:../drivers/fsl_dspi.c **** }
 308:../drivers/fsl_dspi.c **** 
 309:../drivers/fsl_dspi.c **** static void DSPI_SetOnePcsPolarity(SPI_Type *base, dspi_which_pcs_t pcs, dspi_pcs_polarity_config_t
 310:../drivers/fsl_dspi.c **** {
 311:../drivers/fsl_dspi.c ****     uint32_t temp;
 312:../drivers/fsl_dspi.c **** 
 313:../drivers/fsl_dspi.c ****     temp = base->MCR;
 314:../drivers/fsl_dspi.c **** 
 315:../drivers/fsl_dspi.c ****     if (activeLowOrHigh == kDSPI_PcsActiveLow)
 316:../drivers/fsl_dspi.c ****     {
 317:../drivers/fsl_dspi.c ****         temp |= SPI_MCR_PCSIS(pcs);
 318:../drivers/fsl_dspi.c ****     }
 319:../drivers/fsl_dspi.c ****     else
 320:../drivers/fsl_dspi.c ****     {
 321:../drivers/fsl_dspi.c ****         temp &= ~SPI_MCR_PCSIS(pcs);
 322:../drivers/fsl_dspi.c ****     }
 323:../drivers/fsl_dspi.c **** 
 324:../drivers/fsl_dspi.c ****     base->MCR = temp;
 325:../drivers/fsl_dspi.c **** }
 326:../drivers/fsl_dspi.c **** 
 327:../drivers/fsl_dspi.c **** uint32_t DSPI_MasterSetBaudRate(SPI_Type *base,
 328:../drivers/fsl_dspi.c ****                                 dspi_ctar_selection_t whichCtar,
 329:../drivers/fsl_dspi.c ****                                 uint32_t baudRate_Bps,
 330:../drivers/fsl_dspi.c ****                                 uint32_t srcClock_Hz)
 331:../drivers/fsl_dspi.c **** {
 332:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0*/
 333:../drivers/fsl_dspi.c ****     if (!DSPI_IsMaster(base))
 334:../drivers/fsl_dspi.c ****     {
 335:../drivers/fsl_dspi.c ****         return 0;
 336:../drivers/fsl_dspi.c ****     }
 337:../drivers/fsl_dspi.c ****     uint32_t temp;
 338:../drivers/fsl_dspi.c ****     uint32_t prescaler, bestPrescaler;
 339:../drivers/fsl_dspi.c ****     uint32_t scaler, bestScaler;
 340:../drivers/fsl_dspi.c ****     uint32_t dbr, bestDbr;
 341:../drivers/fsl_dspi.c ****     uint32_t realBaudrate, bestBaudrate;
 342:../drivers/fsl_dspi.c ****     uint32_t diff, min_diff;
 343:../drivers/fsl_dspi.c ****     uint32_t baudrate = baudRate_Bps;
 344:../drivers/fsl_dspi.c **** 
 345:../drivers/fsl_dspi.c ****     /* find combination of prescaler and scaler resulting in baudrate closest to the requested valu
 346:../drivers/fsl_dspi.c ****     min_diff = 0xFFFFFFFFU;
 347:../drivers/fsl_dspi.c ****     bestPrescaler = 0;
 348:../drivers/fsl_dspi.c ****     bestScaler = 0;
 349:../drivers/fsl_dspi.c ****     bestDbr = 1;
 350:../drivers/fsl_dspi.c ****     bestBaudrate = 0; /* required to avoid compilation warning */
 351:../drivers/fsl_dspi.c **** 
 352:../drivers/fsl_dspi.c ****     /* In all for loops, if min_diff = 0, the exit for loop*/
 353:../drivers/fsl_dspi.c ****     for (prescaler = 0; (prescaler < 4) && min_diff; prescaler++)
 354:../drivers/fsl_dspi.c ****     {
 355:../drivers/fsl_dspi.c ****         for (scaler = 0; (scaler < 16) && min_diff; scaler++)
 356:../drivers/fsl_dspi.c ****         {
 357:../drivers/fsl_dspi.c ****             for (dbr = 1; (dbr < 3) && min_diff; dbr++)
 358:../drivers/fsl_dspi.c ****             {
 359:../drivers/fsl_dspi.c ****                 realBaudrate = ((srcClock_Hz * dbr) / (s_baudratePrescaler[prescaler] * (s_baudrate
 360:../drivers/fsl_dspi.c **** 
 361:../drivers/fsl_dspi.c ****                 /* calculate the baud rate difference based on the conditional statement that state
 362:../drivers/fsl_dspi.c ****                 * baud rate must not exceed the desired baud rate.
 363:../drivers/fsl_dspi.c ****                 */
 364:../drivers/fsl_dspi.c ****                 if (baudrate >= realBaudrate)
 365:../drivers/fsl_dspi.c ****                 {
 366:../drivers/fsl_dspi.c ****                     diff = baudrate - realBaudrate;
 367:../drivers/fsl_dspi.c ****                     if (min_diff > diff)
 368:../drivers/fsl_dspi.c ****                     {
 369:../drivers/fsl_dspi.c ****                         /* a better match found */
 370:../drivers/fsl_dspi.c ****                         min_diff = diff;
 371:../drivers/fsl_dspi.c ****                         bestPrescaler = prescaler;
 372:../drivers/fsl_dspi.c ****                         bestScaler = scaler;
 373:../drivers/fsl_dspi.c ****                         bestBaudrate = realBaudrate;
 374:../drivers/fsl_dspi.c ****                         bestDbr = dbr;
 375:../drivers/fsl_dspi.c ****                     }
 376:../drivers/fsl_dspi.c ****                 }
 377:../drivers/fsl_dspi.c ****             }
 378:../drivers/fsl_dspi.c ****         }
 379:../drivers/fsl_dspi.c ****     }
 380:../drivers/fsl_dspi.c **** 
 381:../drivers/fsl_dspi.c ****     /* write the best dbr, prescalar, and baud rate scalar to the CTAR */
 382:../drivers/fsl_dspi.c ****     temp = base->CTAR[whichCtar] & ~(SPI_CTAR_DBR_MASK | SPI_CTAR_PBR_MASK | SPI_CTAR_BR_MASK);
 383:../drivers/fsl_dspi.c **** 
 384:../drivers/fsl_dspi.c ****     base->CTAR[whichCtar] = temp | ((bestDbr - 1) << SPI_CTAR_DBR_SHIFT) | (bestPrescaler << SPI_CT
 385:../drivers/fsl_dspi.c ****                             (bestScaler << SPI_CTAR_BR_SHIFT);
 386:../drivers/fsl_dspi.c **** 
 387:../drivers/fsl_dspi.c ****     /* return the actual calculated baud rate */
 388:../drivers/fsl_dspi.c ****     return bestBaudrate;
 389:../drivers/fsl_dspi.c **** }
 390:../drivers/fsl_dspi.c **** 
 391:../drivers/fsl_dspi.c **** void DSPI_MasterSetDelayScaler(
 392:../drivers/fsl_dspi.c ****     SPI_Type *base, dspi_ctar_selection_t whichCtar, uint32_t prescaler, uint32_t scaler, dspi_dela
 393:../drivers/fsl_dspi.c **** {
 394:../drivers/fsl_dspi.c ****     /* these settings are only relevant in master mode */
 395:../drivers/fsl_dspi.c ****     if (DSPI_IsMaster(base))
 396:../drivers/fsl_dspi.c ****     {
 397:../drivers/fsl_dspi.c ****         switch (whichDelay)
 398:../drivers/fsl_dspi.c ****         {
 399:../drivers/fsl_dspi.c ****             case kDSPI_PcsToSck:
 400:../drivers/fsl_dspi.c ****                 base->CTAR[whichCtar] = (base->CTAR[whichCtar] & (~SPI_CTAR_PCSSCK_MASK) & (~SPI_CT
 401:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PCSSCK(prescaler) | SPI_CTAR_CSSCK(scaler);
 402:../drivers/fsl_dspi.c ****                 break;
 403:../drivers/fsl_dspi.c ****             case kDSPI_LastSckToPcs:
 404:../drivers/fsl_dspi.c ****                 base->CTAR[whichCtar] = (base->CTAR[whichCtar] & (~SPI_CTAR_PASC_MASK) & (~SPI_CTAR
 405:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PASC(prescaler) | SPI_CTAR_ASC(scaler);
 406:../drivers/fsl_dspi.c ****                 break;
 407:../drivers/fsl_dspi.c ****             case kDSPI_BetweenTransfer:
 408:../drivers/fsl_dspi.c ****                 base->CTAR[whichCtar] = (base->CTAR[whichCtar] & (~SPI_CTAR_PDT_MASK) & (~SPI_CTAR_
 409:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PDT(prescaler) | SPI_CTAR_DT(scaler);
 410:../drivers/fsl_dspi.c ****                 break;
 411:../drivers/fsl_dspi.c ****             default:
 412:../drivers/fsl_dspi.c ****                 break;
 413:../drivers/fsl_dspi.c ****         }
 414:../drivers/fsl_dspi.c ****     }
 415:../drivers/fsl_dspi.c **** }
 416:../drivers/fsl_dspi.c **** 
 417:../drivers/fsl_dspi.c **** uint32_t DSPI_MasterSetDelayTimes(SPI_Type *base,
 418:../drivers/fsl_dspi.c ****                                   dspi_ctar_selection_t whichCtar,
 419:../drivers/fsl_dspi.c ****                                   dspi_delay_type_t whichDelay,
 420:../drivers/fsl_dspi.c ****                                   uint32_t srcClock_Hz,
 421:../drivers/fsl_dspi.c ****                                   uint32_t delayTimeInNanoSec)
 422:../drivers/fsl_dspi.c **** {
 423:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0 */
 424:../drivers/fsl_dspi.c ****     if (!DSPI_IsMaster(base))
 425:../drivers/fsl_dspi.c ****     {
 426:../drivers/fsl_dspi.c ****         return 0;
 427:../drivers/fsl_dspi.c ****     }
 428:../drivers/fsl_dspi.c **** 
 429:../drivers/fsl_dspi.c ****     uint32_t prescaler, bestPrescaler;
 430:../drivers/fsl_dspi.c ****     uint32_t scaler, bestScaler;
 431:../drivers/fsl_dspi.c ****     uint32_t realDelay, bestDelay;
 432:../drivers/fsl_dspi.c ****     uint32_t diff, min_diff;
 433:../drivers/fsl_dspi.c ****     uint32_t initialDelayNanoSec;
 434:../drivers/fsl_dspi.c **** 
 435:../drivers/fsl_dspi.c ****     /* find combination of prescaler and scaler resulting in the delay closest to the
 436:../drivers/fsl_dspi.c ****     * requested value
 437:../drivers/fsl_dspi.c ****     */
 438:../drivers/fsl_dspi.c ****     min_diff = 0xFFFFFFFFU;
 439:../drivers/fsl_dspi.c ****     /* Initialize prescaler and scaler to their max values to generate the max delay */
 440:../drivers/fsl_dspi.c ****     bestPrescaler = 0x3;
 441:../drivers/fsl_dspi.c ****     bestScaler = 0xF;
 442:../drivers/fsl_dspi.c ****     bestDelay = (((1000000000U * 4) / srcClock_Hz) * s_delayPrescaler[bestPrescaler] * s_delayScale
 443:../drivers/fsl_dspi.c **** 
 444:../drivers/fsl_dspi.c ****     /* First calculate the initial, default delay */
 445:../drivers/fsl_dspi.c ****     initialDelayNanoSec = 1000000000U / srcClock_Hz * 2;
 446:../drivers/fsl_dspi.c **** 
 447:../drivers/fsl_dspi.c ****     /* If the initial, default delay is already greater than the desired delay, then
 448:../drivers/fsl_dspi.c ****     * set the delays to their initial value (0) and return the delay. In other words,
 449:../drivers/fsl_dspi.c ****     * there is no way to decrease the delay value further.
 450:../drivers/fsl_dspi.c ****     */
 451:../drivers/fsl_dspi.c ****     if (initialDelayNanoSec >= delayTimeInNanoSec)
 452:../drivers/fsl_dspi.c ****     {
 453:../drivers/fsl_dspi.c ****         DSPI_MasterSetDelayScaler(base, whichCtar, 0, 0, whichDelay);
 454:../drivers/fsl_dspi.c ****         return initialDelayNanoSec;
 455:../drivers/fsl_dspi.c ****     }
 456:../drivers/fsl_dspi.c **** 
 457:../drivers/fsl_dspi.c ****     /* In all for loops, if min_diff = 0, the exit for loop */
 458:../drivers/fsl_dspi.c ****     for (prescaler = 0; (prescaler < 4) && min_diff; prescaler++)
 459:../drivers/fsl_dspi.c ****     {
 460:../drivers/fsl_dspi.c ****         for (scaler = 0; (scaler < 16) && min_diff; scaler++)
 461:../drivers/fsl_dspi.c ****         {
 462:../drivers/fsl_dspi.c ****             realDelay = ((4000000000U / srcClock_Hz) * s_delayPrescaler[prescaler] * s_delayScaler[
 463:../drivers/fsl_dspi.c **** 
 464:../drivers/fsl_dspi.c ****             /* calculate the delay difference based on the conditional statement
 465:../drivers/fsl_dspi.c ****             * that states that the calculated delay must not be less then the desired delay
 466:../drivers/fsl_dspi.c ****             */
 467:../drivers/fsl_dspi.c ****             if (realDelay >= delayTimeInNanoSec)
 468:../drivers/fsl_dspi.c ****             {
 469:../drivers/fsl_dspi.c ****                 diff = realDelay - delayTimeInNanoSec;
 470:../drivers/fsl_dspi.c ****                 if (min_diff > diff)
 471:../drivers/fsl_dspi.c ****                 {
 472:../drivers/fsl_dspi.c ****                     /* a better match found */
 473:../drivers/fsl_dspi.c ****                     min_diff = diff;
 474:../drivers/fsl_dspi.c ****                     bestPrescaler = prescaler;
 475:../drivers/fsl_dspi.c ****                     bestScaler = scaler;
 476:../drivers/fsl_dspi.c ****                     bestDelay = realDelay;
 477:../drivers/fsl_dspi.c ****                 }
 478:../drivers/fsl_dspi.c ****             }
 479:../drivers/fsl_dspi.c ****         }
 480:../drivers/fsl_dspi.c ****     }
 481:../drivers/fsl_dspi.c **** 
 482:../drivers/fsl_dspi.c ****     /* write the best dbr, prescalar, and baud rate scalar to the CTAR */
 483:../drivers/fsl_dspi.c ****     DSPI_MasterSetDelayScaler(base, whichCtar, bestPrescaler, bestScaler, whichDelay);
 484:../drivers/fsl_dspi.c **** 
 485:../drivers/fsl_dspi.c ****     /* return the actual calculated baud rate */
 486:../drivers/fsl_dspi.c ****     return bestDelay;
 487:../drivers/fsl_dspi.c **** }
 488:../drivers/fsl_dspi.c **** 
 489:../drivers/fsl_dspi.c **** void DSPI_GetDefaultDataCommandConfig(dspi_command_data_config_t *command)
 490:../drivers/fsl_dspi.c **** {
 491:../drivers/fsl_dspi.c ****     assert(command);
 492:../drivers/fsl_dspi.c **** 
 493:../drivers/fsl_dspi.c ****     command->isPcsContinuous = false;
 494:../drivers/fsl_dspi.c ****     command->whichCtar = kDSPI_Ctar0;
 495:../drivers/fsl_dspi.c ****     command->whichPcs = kDSPI_Pcs0;
 496:../drivers/fsl_dspi.c ****     command->isEndOfQueue = false;
 497:../drivers/fsl_dspi.c ****     command->clearTransferCount = false;
 498:../drivers/fsl_dspi.c **** }
 499:../drivers/fsl_dspi.c **** 
 500:../drivers/fsl_dspi.c **** void DSPI_MasterWriteDataBlocking(SPI_Type *base, dspi_command_data_config_t *command, uint16_t dat
 501:../drivers/fsl_dspi.c **** {
 502:../drivers/fsl_dspi.c ****     assert(command);
 503:../drivers/fsl_dspi.c **** 
 504:../drivers/fsl_dspi.c ****     /* First, clear Transmit Complete Flag (TCF) */
 505:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxCompleteFlag);
 506:../drivers/fsl_dspi.c **** 
 507:../drivers/fsl_dspi.c ****     while (!(DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag))
 508:../drivers/fsl_dspi.c ****     {
 509:../drivers/fsl_dspi.c ****         DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 510:../drivers/fsl_dspi.c ****     }
 511:../drivers/fsl_dspi.c **** 
 512:../drivers/fsl_dspi.c ****     base->PUSHR = SPI_PUSHR_CONT(command->isPcsContinuous) | SPI_PUSHR_CTAS(command->whichCtar) |
 513:../drivers/fsl_dspi.c ****                   SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
 514:../drivers/fsl_dspi.c ****                   SPI_PUSHR_CTCNT(command->clearTransferCount) | SPI_PUSHR_TXDATA(data);
 515:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 516:../drivers/fsl_dspi.c **** 
 517:../drivers/fsl_dspi.c ****     /* Wait till TCF sets */
 518:../drivers/fsl_dspi.c ****     while (!(DSPI_GetStatusFlags(base) & kDSPI_TxCompleteFlag))
 519:../drivers/fsl_dspi.c ****     {
 520:../drivers/fsl_dspi.c ****     }
 521:../drivers/fsl_dspi.c **** }
 522:../drivers/fsl_dspi.c **** 
 523:../drivers/fsl_dspi.c **** void DSPI_MasterWriteCommandDataBlocking(SPI_Type *base, uint32_t data)
 524:../drivers/fsl_dspi.c **** {
 525:../drivers/fsl_dspi.c ****     /* First, clear Transmit Complete Flag (TCF) */
 526:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxCompleteFlag);
 527:../drivers/fsl_dspi.c **** 
 528:../drivers/fsl_dspi.c ****     while (!(DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag))
 529:../drivers/fsl_dspi.c ****     {
 530:../drivers/fsl_dspi.c ****         DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 531:../drivers/fsl_dspi.c ****     }
 532:../drivers/fsl_dspi.c **** 
 533:../drivers/fsl_dspi.c ****     base->PUSHR = data;
 534:../drivers/fsl_dspi.c **** 
 535:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 536:../drivers/fsl_dspi.c **** 
 537:../drivers/fsl_dspi.c ****     /* Wait till TCF sets */
 538:../drivers/fsl_dspi.c ****     while (!(DSPI_GetStatusFlags(base) & kDSPI_TxCompleteFlag))
 539:../drivers/fsl_dspi.c ****     {
 540:../drivers/fsl_dspi.c ****     }
 541:../drivers/fsl_dspi.c **** }
 542:../drivers/fsl_dspi.c **** 
 543:../drivers/fsl_dspi.c **** void DSPI_SlaveWriteDataBlocking(SPI_Type *base, uint32_t data)
 544:../drivers/fsl_dspi.c **** {
 545:../drivers/fsl_dspi.c ****     /* First, clear Transmit Complete Flag (TCF) */
 546:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxCompleteFlag);
 547:../drivers/fsl_dspi.c **** 
 548:../drivers/fsl_dspi.c ****     while (!(DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag))
 549:../drivers/fsl_dspi.c ****     {
 550:../drivers/fsl_dspi.c ****         DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 551:../drivers/fsl_dspi.c ****     }
 552:../drivers/fsl_dspi.c **** 
 553:../drivers/fsl_dspi.c ****     base->PUSHR_SLAVE = data;
 554:../drivers/fsl_dspi.c **** 
 555:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 556:../drivers/fsl_dspi.c **** 
 557:../drivers/fsl_dspi.c ****     /* Wait till TCF sets */
 558:../drivers/fsl_dspi.c ****     while (!(DSPI_GetStatusFlags(base) & kDSPI_TxCompleteFlag))
 559:../drivers/fsl_dspi.c ****     {
 560:../drivers/fsl_dspi.c ****     }
 561:../drivers/fsl_dspi.c **** }
 562:../drivers/fsl_dspi.c **** 
 563:../drivers/fsl_dspi.c **** void DSPI_EnableInterrupts(SPI_Type *base, uint32_t mask)
 564:../drivers/fsl_dspi.c **** {
 565:../drivers/fsl_dspi.c ****     if (mask & SPI_RSER_TFFF_RE_MASK)
 566:../drivers/fsl_dspi.c ****     {
 567:../drivers/fsl_dspi.c ****         base->RSER &= ~SPI_RSER_TFFF_DIRS_MASK;
 568:../drivers/fsl_dspi.c ****     }
 569:../drivers/fsl_dspi.c ****     if (mask & SPI_RSER_RFDF_RE_MASK)
 570:../drivers/fsl_dspi.c ****     {
 571:../drivers/fsl_dspi.c ****         base->RSER &= ~SPI_RSER_RFDF_DIRS_MASK;
 572:../drivers/fsl_dspi.c ****     }
 573:../drivers/fsl_dspi.c ****     base->RSER |= mask;
 574:../drivers/fsl_dspi.c **** }
 575:../drivers/fsl_dspi.c **** 
 576:../drivers/fsl_dspi.c **** /*Transactional APIs -- Master*/
 577:../drivers/fsl_dspi.c **** 
 578:../drivers/fsl_dspi.c **** void DSPI_MasterTransferCreateHandle(SPI_Type *base,
 579:../drivers/fsl_dspi.c ****                                      dspi_master_handle_t *handle,
 580:../drivers/fsl_dspi.c ****                                      dspi_master_transfer_callback_t callback,
 581:../drivers/fsl_dspi.c ****                                      void *userData)
 582:../drivers/fsl_dspi.c **** {
 583:../drivers/fsl_dspi.c ****     assert(handle);
 584:../drivers/fsl_dspi.c **** 
 585:../drivers/fsl_dspi.c ****     /* Zero the handle. */
 586:../drivers/fsl_dspi.c ****     memset(handle, 0, sizeof(*handle));
 587:../drivers/fsl_dspi.c **** 
 588:../drivers/fsl_dspi.c ****     g_dspiHandle[DSPI_GetInstance(base)] = handle;
 589:../drivers/fsl_dspi.c **** 
 590:../drivers/fsl_dspi.c ****     handle->callback = callback;
 591:../drivers/fsl_dspi.c ****     handle->userData = userData;
 592:../drivers/fsl_dspi.c **** }
 593:../drivers/fsl_dspi.c **** 
 594:../drivers/fsl_dspi.c **** status_t DSPI_MasterTransferBlocking(SPI_Type *base, dspi_transfer_t *transfer)
 595:../drivers/fsl_dspi.c **** {
 596:../drivers/fsl_dspi.c ****     assert(transfer);
 597:../drivers/fsl_dspi.c **** 
 598:../drivers/fsl_dspi.c ****     uint16_t wordToSend = 0;
 599:../drivers/fsl_dspi.c ****     uint16_t wordReceived = 0;
 600:../drivers/fsl_dspi.c ****     uint8_t dummyData = s_dummyData[DSPI_GetInstance(base)];
 601:../drivers/fsl_dspi.c ****     uint8_t bitsPerFrame;
 602:../drivers/fsl_dspi.c **** 
 603:../drivers/fsl_dspi.c ****     uint32_t command;
 604:../drivers/fsl_dspi.c ****     uint32_t lastCommand;
 605:../drivers/fsl_dspi.c **** 
 606:../drivers/fsl_dspi.c ****     uint8_t *txData;
 607:../drivers/fsl_dspi.c ****     uint8_t *rxData;
 608:../drivers/fsl_dspi.c ****     uint32_t remainingSendByteCount;
 609:../drivers/fsl_dspi.c ****     uint32_t remainingReceiveByteCount;
 610:../drivers/fsl_dspi.c **** 
 611:../drivers/fsl_dspi.c ****     uint32_t fifoSize;
 612:../drivers/fsl_dspi.c ****     dspi_command_data_config_t commandStruct;
 613:../drivers/fsl_dspi.c **** 
 614:../drivers/fsl_dspi.c ****     /* If the transfer count is zero, then return immediately.*/
 615:../drivers/fsl_dspi.c ****     if (transfer->dataSize == 0)
 616:../drivers/fsl_dspi.c ****     {
 617:../drivers/fsl_dspi.c ****         return kStatus_InvalidArgument;
 618:../drivers/fsl_dspi.c ****     }
 619:../drivers/fsl_dspi.c **** 
 620:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
 621:../drivers/fsl_dspi.c ****     DSPI_DisableInterrupts(base, kDSPI_AllInterruptEnable);
 622:../drivers/fsl_dspi.c ****     DSPI_FlushFifo(base, true, true);
 623:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_AllStatusFlag);
 624:../drivers/fsl_dspi.c **** 
 625:../drivers/fsl_dspi.c ****     /*Calculate the command and lastCommand*/
 626:../drivers/fsl_dspi.c ****     commandStruct.whichPcs =
 627:../drivers/fsl_dspi.c ****         (dspi_which_pcs_t)(1U << ((transfer->configFlags & DSPI_MASTER_PCS_MASK) >> DSPI_MASTER_PCS
 628:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 629:../drivers/fsl_dspi.c ****     commandStruct.clearTransferCount = false;
 630:../drivers/fsl_dspi.c ****     commandStruct.whichCtar =
 631:../drivers/fsl_dspi.c ****         (dspi_ctar_selection_t)((transfer->configFlags & DSPI_MASTER_CTAR_MASK) >> DSPI_MASTER_CTAR
 632:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterPcsContinuous);
 633:../drivers/fsl_dspi.c **** 
 634:../drivers/fsl_dspi.c ****     command = DSPI_MasterGetFormattedCommand(&(commandStruct));
 635:../drivers/fsl_dspi.c **** 
 636:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = true;
 637:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterActiveAfterTransfer)
 638:../drivers/fsl_dspi.c ****     lastCommand = DSPI_MasterGetFormattedCommand(&(commandStruct));
 639:../drivers/fsl_dspi.c **** 
 640:../drivers/fsl_dspi.c ****     /*Calculate the bitsPerFrame*/
 641:../drivers/fsl_dspi.c ****     bitsPerFrame = ((base->CTAR[commandStruct.whichCtar] & SPI_CTAR_FMSZ_MASK) >> SPI_CTAR_FMSZ_SHI
 642:../drivers/fsl_dspi.c **** 
 643:../drivers/fsl_dspi.c ****     txData = transfer->txData;
 644:../drivers/fsl_dspi.c ****     rxData = transfer->rxData;
 645:../drivers/fsl_dspi.c ****     remainingSendByteCount = transfer->dataSize;
 646:../drivers/fsl_dspi.c ****     remainingReceiveByteCount = transfer->dataSize;
 647:../drivers/fsl_dspi.c **** 
 648:../drivers/fsl_dspi.c ****     if ((base->MCR & SPI_MCR_DIS_RXF_MASK) || (base->MCR & SPI_MCR_DIS_TXF_MASK))
 649:../drivers/fsl_dspi.c ****     {
 650:../drivers/fsl_dspi.c ****         fifoSize = 1;
 651:../drivers/fsl_dspi.c ****     }
 652:../drivers/fsl_dspi.c ****     else
 653:../drivers/fsl_dspi.c ****     {
 654:../drivers/fsl_dspi.c ****         fifoSize = FSL_FEATURE_DSPI_FIFO_SIZEn(base);
 655:../drivers/fsl_dspi.c ****     }
 656:../drivers/fsl_dspi.c **** 
 657:../drivers/fsl_dspi.c ****     DSPI_StartTransfer(base);
 658:../drivers/fsl_dspi.c **** 
 659:../drivers/fsl_dspi.c ****     if (bitsPerFrame <= 8)
 660:../drivers/fsl_dspi.c ****     {
 661:../drivers/fsl_dspi.c ****         while (remainingSendByteCount > 0)
 662:../drivers/fsl_dspi.c ****         {
 663:../drivers/fsl_dspi.c ****             if (remainingSendByteCount == 1)
 664:../drivers/fsl_dspi.c ****             {
 665:../drivers/fsl_dspi.c ****                 while (!(DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag))
 666:../drivers/fsl_dspi.c ****                 {
 667:../drivers/fsl_dspi.c ****                     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 668:../drivers/fsl_dspi.c ****                 }
 669:../drivers/fsl_dspi.c **** 
 670:../drivers/fsl_dspi.c ****                 if (txData != NULL)
 671:../drivers/fsl_dspi.c ****                 {
 672:../drivers/fsl_dspi.c ****                     base->PUSHR = (*txData) | (lastCommand);
 673:../drivers/fsl_dspi.c ****                     txData++;
 674:../drivers/fsl_dspi.c ****                 }
 675:../drivers/fsl_dspi.c ****                 else
 676:../drivers/fsl_dspi.c ****                 {
 677:../drivers/fsl_dspi.c ****                     base->PUSHR = (lastCommand) | (dummyData);
 678:../drivers/fsl_dspi.c ****                 }
 679:../drivers/fsl_dspi.c ****                 DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 680:../drivers/fsl_dspi.c ****                 remainingSendByteCount--;
 681:../drivers/fsl_dspi.c **** 
 682:../drivers/fsl_dspi.c ****                 while (remainingReceiveByteCount > 0)
 683:../drivers/fsl_dspi.c ****                 {
 684:../drivers/fsl_dspi.c ****                     if (DSPI_GetStatusFlags(base) & kDSPI_RxFifoDrainRequestFlag)
 685:../drivers/fsl_dspi.c ****                     {
 686:../drivers/fsl_dspi.c ****                         if (rxData != NULL)
 687:../drivers/fsl_dspi.c ****                         {
 688:../drivers/fsl_dspi.c ****                             /* Read data from POPR*/
 689:../drivers/fsl_dspi.c ****                             *(rxData) = DSPI_ReadData(base);
 690:../drivers/fsl_dspi.c ****                             rxData++;
 691:../drivers/fsl_dspi.c ****                         }
 692:../drivers/fsl_dspi.c ****                         else
 693:../drivers/fsl_dspi.c ****                         {
 694:../drivers/fsl_dspi.c ****                             DSPI_ReadData(base);
 695:../drivers/fsl_dspi.c ****                         }
 696:../drivers/fsl_dspi.c ****                         remainingReceiveByteCount--;
 697:../drivers/fsl_dspi.c **** 
 698:../drivers/fsl_dspi.c ****                         DSPI_ClearStatusFlags(base, kDSPI_RxFifoDrainRequestFlag);
 699:../drivers/fsl_dspi.c ****                     }
 700:../drivers/fsl_dspi.c ****                 }
 701:../drivers/fsl_dspi.c ****             }
 702:../drivers/fsl_dspi.c ****             else
 703:../drivers/fsl_dspi.c ****             {
 704:../drivers/fsl_dspi.c ****                 /*Wait until Tx Fifo is not full*/
 705:../drivers/fsl_dspi.c ****                 while (!(DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag))
 706:../drivers/fsl_dspi.c ****                 {
 707:../drivers/fsl_dspi.c ****                     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 708:../drivers/fsl_dspi.c ****                 }
 709:../drivers/fsl_dspi.c ****                 if (txData != NULL)
 710:../drivers/fsl_dspi.c ****                 {
 711:../drivers/fsl_dspi.c ****                     base->PUSHR = command | (uint16_t)(*txData);
 712:../drivers/fsl_dspi.c ****                     txData++;
 713:../drivers/fsl_dspi.c ****                 }
 714:../drivers/fsl_dspi.c ****                 else
 715:../drivers/fsl_dspi.c ****                 {
 716:../drivers/fsl_dspi.c ****                     base->PUSHR = command | dummyData;
 717:../drivers/fsl_dspi.c ****                 }
 718:../drivers/fsl_dspi.c ****                 remainingSendByteCount--;
 719:../drivers/fsl_dspi.c **** 
 720:../drivers/fsl_dspi.c ****                 DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 721:../drivers/fsl_dspi.c **** 
 722:../drivers/fsl_dspi.c ****                 while ((remainingReceiveByteCount - remainingSendByteCount) >= fifoSize)
 723:../drivers/fsl_dspi.c ****                 {
 724:../drivers/fsl_dspi.c ****                     if (DSPI_GetStatusFlags(base) & kDSPI_RxFifoDrainRequestFlag)
 725:../drivers/fsl_dspi.c ****                     {
 726:../drivers/fsl_dspi.c ****                         if (rxData != NULL)
 727:../drivers/fsl_dspi.c ****                         {
 728:../drivers/fsl_dspi.c ****                             *(rxData) = DSPI_ReadData(base);
 729:../drivers/fsl_dspi.c ****                             rxData++;
 730:../drivers/fsl_dspi.c ****                         }
 731:../drivers/fsl_dspi.c ****                         else
 732:../drivers/fsl_dspi.c ****                         {
 733:../drivers/fsl_dspi.c ****                             DSPI_ReadData(base);
 734:../drivers/fsl_dspi.c ****                         }
 735:../drivers/fsl_dspi.c ****                         remainingReceiveByteCount--;
 736:../drivers/fsl_dspi.c **** 
 737:../drivers/fsl_dspi.c ****                         DSPI_ClearStatusFlags(base, kDSPI_RxFifoDrainRequestFlag);
 738:../drivers/fsl_dspi.c ****                     }
 739:../drivers/fsl_dspi.c ****                 }
 740:../drivers/fsl_dspi.c ****             }
 741:../drivers/fsl_dspi.c ****         }
 742:../drivers/fsl_dspi.c ****     }
 743:../drivers/fsl_dspi.c ****     else
 744:../drivers/fsl_dspi.c ****     {
 745:../drivers/fsl_dspi.c ****         while (remainingSendByteCount > 0)
 746:../drivers/fsl_dspi.c ****         {
 747:../drivers/fsl_dspi.c ****             if (remainingSendByteCount <= 2)
 748:../drivers/fsl_dspi.c ****             {
 749:../drivers/fsl_dspi.c ****                 while (!(DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag))
 750:../drivers/fsl_dspi.c ****                 {
 751:../drivers/fsl_dspi.c ****                     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 752:../drivers/fsl_dspi.c ****                 }
 753:../drivers/fsl_dspi.c **** 
 754:../drivers/fsl_dspi.c ****                 if (txData != NULL)
 755:../drivers/fsl_dspi.c ****                 {
 756:../drivers/fsl_dspi.c ****                     wordToSend = *(txData);
 757:../drivers/fsl_dspi.c ****                     ++txData;
 758:../drivers/fsl_dspi.c **** 
 759:../drivers/fsl_dspi.c ****                     if (remainingSendByteCount > 1)
 760:../drivers/fsl_dspi.c ****                     {
 761:../drivers/fsl_dspi.c ****                         wordToSend |= (unsigned)(*(txData)) << 8U;
 762:../drivers/fsl_dspi.c ****                         ++txData;
 763:../drivers/fsl_dspi.c ****                     }
 764:../drivers/fsl_dspi.c ****                 }
 765:../drivers/fsl_dspi.c ****                 else
 766:../drivers/fsl_dspi.c ****                 {
 767:../drivers/fsl_dspi.c ****                     wordToSend = dummyData;
 768:../drivers/fsl_dspi.c ****                 }
 769:../drivers/fsl_dspi.c **** 
 770:../drivers/fsl_dspi.c ****                 base->PUSHR = lastCommand | wordToSend;
 771:../drivers/fsl_dspi.c **** 
 772:../drivers/fsl_dspi.c ****                 DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 773:../drivers/fsl_dspi.c ****                 remainingSendByteCount = 0;
 774:../drivers/fsl_dspi.c **** 
 775:../drivers/fsl_dspi.c ****                 while (remainingReceiveByteCount > 0)
 776:../drivers/fsl_dspi.c ****                 {
 777:../drivers/fsl_dspi.c ****                     if (DSPI_GetStatusFlags(base) & kDSPI_RxFifoDrainRequestFlag)
 778:../drivers/fsl_dspi.c ****                     {
 779:../drivers/fsl_dspi.c ****                         wordReceived = DSPI_ReadData(base);
 780:../drivers/fsl_dspi.c **** 
 781:../drivers/fsl_dspi.c ****                         if (remainingReceiveByteCount != 1)
 782:../drivers/fsl_dspi.c ****                         {
 783:../drivers/fsl_dspi.c ****                             if (rxData != NULL)
 784:../drivers/fsl_dspi.c ****                             {
 785:../drivers/fsl_dspi.c ****                                 *(rxData) = wordReceived;
 786:../drivers/fsl_dspi.c ****                                 ++rxData;
 787:../drivers/fsl_dspi.c ****                                 *(rxData) = wordReceived >> 8;
 788:../drivers/fsl_dspi.c ****                                 ++rxData;
 789:../drivers/fsl_dspi.c ****                             }
 790:../drivers/fsl_dspi.c ****                             remainingReceiveByteCount -= 2;
 791:../drivers/fsl_dspi.c ****                         }
 792:../drivers/fsl_dspi.c ****                         else
 793:../drivers/fsl_dspi.c ****                         {
 794:../drivers/fsl_dspi.c ****                             if (rxData != NULL)
 795:../drivers/fsl_dspi.c ****                             {
 796:../drivers/fsl_dspi.c ****                                 *(rxData) = wordReceived;
 797:../drivers/fsl_dspi.c ****                                 ++rxData;
 798:../drivers/fsl_dspi.c ****                             }
 799:../drivers/fsl_dspi.c ****                             remainingReceiveByteCount--;
 800:../drivers/fsl_dspi.c ****                         }
 801:../drivers/fsl_dspi.c ****                         DSPI_ClearStatusFlags(base, kDSPI_RxFifoDrainRequestFlag);
 802:../drivers/fsl_dspi.c ****                     }
 803:../drivers/fsl_dspi.c ****                 }
 804:../drivers/fsl_dspi.c ****             }
 805:../drivers/fsl_dspi.c ****             else
 806:../drivers/fsl_dspi.c ****             {
 807:../drivers/fsl_dspi.c ****                 /*Wait until Tx Fifo is not full*/
 808:../drivers/fsl_dspi.c ****                 while (!(DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag))
 809:../drivers/fsl_dspi.c ****                 {
 810:../drivers/fsl_dspi.c ****                     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 811:../drivers/fsl_dspi.c ****                 }
 812:../drivers/fsl_dspi.c **** 
 813:../drivers/fsl_dspi.c ****                 if (txData != NULL)
 814:../drivers/fsl_dspi.c ****                 {
 815:../drivers/fsl_dspi.c ****                     wordToSend = *(txData);
 816:../drivers/fsl_dspi.c ****                     ++txData;
 817:../drivers/fsl_dspi.c ****                     wordToSend |= (unsigned)(*(txData)) << 8U;
 818:../drivers/fsl_dspi.c ****                     ++txData;
 819:../drivers/fsl_dspi.c ****                 }
 820:../drivers/fsl_dspi.c ****                 else
 821:../drivers/fsl_dspi.c ****                 {
 822:../drivers/fsl_dspi.c ****                     wordToSend = dummyData;
 823:../drivers/fsl_dspi.c ****                 }
 824:../drivers/fsl_dspi.c ****                 base->PUSHR = command | wordToSend;
 825:../drivers/fsl_dspi.c ****                 remainingSendByteCount -= 2;
 826:../drivers/fsl_dspi.c **** 
 827:../drivers/fsl_dspi.c ****                 DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 828:../drivers/fsl_dspi.c **** 
 829:../drivers/fsl_dspi.c ****                 while (((remainingReceiveByteCount - remainingSendByteCount) / 2) >= fifoSize)
 830:../drivers/fsl_dspi.c ****                 {
 831:../drivers/fsl_dspi.c ****                     if (DSPI_GetStatusFlags(base) & kDSPI_RxFifoDrainRequestFlag)
 832:../drivers/fsl_dspi.c ****                     {
 833:../drivers/fsl_dspi.c ****                         wordReceived = DSPI_ReadData(base);
 834:../drivers/fsl_dspi.c **** 
 835:../drivers/fsl_dspi.c ****                         if (rxData != NULL)
 836:../drivers/fsl_dspi.c ****                         {
 837:../drivers/fsl_dspi.c ****                             *rxData = wordReceived;
 838:../drivers/fsl_dspi.c ****                             ++rxData;
 839:../drivers/fsl_dspi.c ****                             *rxData = wordReceived >> 8;
 840:../drivers/fsl_dspi.c ****                             ++rxData;
 841:../drivers/fsl_dspi.c ****                         }
 842:../drivers/fsl_dspi.c ****                         remainingReceiveByteCount -= 2;
 843:../drivers/fsl_dspi.c **** 
 844:../drivers/fsl_dspi.c ****                         DSPI_ClearStatusFlags(base, kDSPI_RxFifoDrainRequestFlag);
 845:../drivers/fsl_dspi.c ****                     }
 846:../drivers/fsl_dspi.c ****                 }
 847:../drivers/fsl_dspi.c ****             }
 848:../drivers/fsl_dspi.c ****         }
 849:../drivers/fsl_dspi.c ****     }
 850:../drivers/fsl_dspi.c **** 
 851:../drivers/fsl_dspi.c ****     return kStatus_Success;
 852:../drivers/fsl_dspi.c **** }
 853:../drivers/fsl_dspi.c **** 
 854:../drivers/fsl_dspi.c **** static void DSPI_MasterTransferPrepare(SPI_Type *base, dspi_master_handle_t *handle, dspi_transfer_
 855:../drivers/fsl_dspi.c **** {
 856:../drivers/fsl_dspi.c ****     assert(handle);
 857:../drivers/fsl_dspi.c ****     assert(transfer);
 858:../drivers/fsl_dspi.c **** 
 859:../drivers/fsl_dspi.c ****     dspi_command_data_config_t commandStruct;
 860:../drivers/fsl_dspi.c **** 
 861:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
 862:../drivers/fsl_dspi.c ****     DSPI_FlushFifo(base, true, true);
 863:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_AllStatusFlag);
 864:../drivers/fsl_dspi.c **** 
 865:../drivers/fsl_dspi.c ****     commandStruct.whichPcs =
 866:../drivers/fsl_dspi.c ****         (dspi_which_pcs_t)(1U << ((transfer->configFlags & DSPI_MASTER_PCS_MASK) >> DSPI_MASTER_PCS
 867:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 868:../drivers/fsl_dspi.c ****     commandStruct.clearTransferCount = false;
 869:../drivers/fsl_dspi.c ****     commandStruct.whichCtar =
 870:../drivers/fsl_dspi.c ****         (dspi_ctar_selection_t)((transfer->configFlags & DSPI_MASTER_CTAR_MASK) >> DSPI_MASTER_CTAR
 871:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterPcsContinuous);
 872:../drivers/fsl_dspi.c ****     handle->command = DSPI_MasterGetFormattedCommand(&(commandStruct));
 873:../drivers/fsl_dspi.c **** 
 874:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = true;
 875:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterActiveAfterTransfer)
 876:../drivers/fsl_dspi.c ****     handle->lastCommand = DSPI_MasterGetFormattedCommand(&(commandStruct));
 877:../drivers/fsl_dspi.c **** 
 878:../drivers/fsl_dspi.c ****     handle->bitsPerFrame = ((base->CTAR[commandStruct.whichCtar] & SPI_CTAR_FMSZ_MASK) >> SPI_CTAR_
 879:../drivers/fsl_dspi.c **** 
 880:../drivers/fsl_dspi.c ****     if ((base->MCR & SPI_MCR_DIS_RXF_MASK) || (base->MCR & SPI_MCR_DIS_TXF_MASK))
 881:../drivers/fsl_dspi.c ****     {
 882:../drivers/fsl_dspi.c ****         handle->fifoSize = 1;
 883:../drivers/fsl_dspi.c ****     }
 884:../drivers/fsl_dspi.c ****     else
 885:../drivers/fsl_dspi.c ****     {
 886:../drivers/fsl_dspi.c ****         handle->fifoSize = FSL_FEATURE_DSPI_FIFO_SIZEn(base);
 887:../drivers/fsl_dspi.c ****     }
 888:../drivers/fsl_dspi.c ****     handle->txData = transfer->txData;
 889:../drivers/fsl_dspi.c ****     handle->rxData = transfer->rxData;
 890:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = transfer->dataSize;
 891:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = transfer->dataSize;
 892:../drivers/fsl_dspi.c ****     handle->totalByteCount = transfer->dataSize;
 893:../drivers/fsl_dspi.c **** }
 894:../drivers/fsl_dspi.c **** 
 895:../drivers/fsl_dspi.c **** status_t DSPI_MasterTransferNonBlocking(SPI_Type *base, dspi_master_handle_t *handle, dspi_transfer
 896:../drivers/fsl_dspi.c **** {
 897:../drivers/fsl_dspi.c ****     assert(handle);
 898:../drivers/fsl_dspi.c ****     assert(transfer);
 899:../drivers/fsl_dspi.c **** 
 900:../drivers/fsl_dspi.c ****     /* If the transfer count is zero, then return immediately.*/
 901:../drivers/fsl_dspi.c ****     if (transfer->dataSize == 0)
 902:../drivers/fsl_dspi.c ****     {
 903:../drivers/fsl_dspi.c ****         return kStatus_InvalidArgument;
 904:../drivers/fsl_dspi.c ****     }
 905:../drivers/fsl_dspi.c **** 
 906:../drivers/fsl_dspi.c ****     /* Check that we're not busy.*/
 907:../drivers/fsl_dspi.c ****     if (handle->state == kDSPI_Busy)
 908:../drivers/fsl_dspi.c ****     {
 909:../drivers/fsl_dspi.c ****         return kStatus_DSPI_Busy;
 910:../drivers/fsl_dspi.c ****     }
 911:../drivers/fsl_dspi.c **** 
 912:../drivers/fsl_dspi.c ****     handle->state = kDSPI_Busy;
 913:../drivers/fsl_dspi.c **** 
 914:../drivers/fsl_dspi.c ****     /* Disable the NVIC for DSPI peripheral. */
 915:../drivers/fsl_dspi.c ****     DisableIRQ(s_dspiIRQ[DSPI_GetInstance(base)]);
 916:../drivers/fsl_dspi.c **** 
 917:../drivers/fsl_dspi.c ****     DSPI_MasterTransferPrepare(base, handle, transfer);
 918:../drivers/fsl_dspi.c **** 
 919:../drivers/fsl_dspi.c ****     /* RX FIFO Drain request: RFDF_RE to enable RFDF interrupt
 920:../drivers/fsl_dspi.c ****     * Since SPI is a synchronous interface, we only need to enable the RX interrupt.
 921:../drivers/fsl_dspi.c ****     * The IRQ handler will get the status of RX and TX interrupt flags.
 922:../drivers/fsl_dspi.c ****     */
 923:../drivers/fsl_dspi.c ****     s_dspiMasterIsr = DSPI_MasterTransferHandleIRQ;
 924:../drivers/fsl_dspi.c **** 
 925:../drivers/fsl_dspi.c ****     DSPI_EnableInterrupts(base, kDSPI_RxFifoDrainRequestInterruptEnable);
 926:../drivers/fsl_dspi.c ****     DSPI_StartTransfer(base);
 927:../drivers/fsl_dspi.c **** 
 928:../drivers/fsl_dspi.c ****     /* Fill up the Tx FIFO to trigger the transfer. */
 929:../drivers/fsl_dspi.c ****     DSPI_MasterTransferFillUpTxFifo(base, handle);
 930:../drivers/fsl_dspi.c **** 
 931:../drivers/fsl_dspi.c ****     /* Enable the NVIC for DSPI peripheral. */
 932:../drivers/fsl_dspi.c ****     EnableIRQ(s_dspiIRQ[DSPI_GetInstance(base)]);
 933:../drivers/fsl_dspi.c **** 
 934:../drivers/fsl_dspi.c ****     return kStatus_Success;
 935:../drivers/fsl_dspi.c **** }
 936:../drivers/fsl_dspi.c **** 
 937:../drivers/fsl_dspi.c **** status_t DSPI_MasterHalfDuplexTransferBlocking(SPI_Type *base, dspi_half_duplex_transfer_t *xfer)
 938:../drivers/fsl_dspi.c **** {
 939:../drivers/fsl_dspi.c ****     assert(xfer);
 940:../drivers/fsl_dspi.c **** 
 941:../drivers/fsl_dspi.c ****     dspi_transfer_t tempXfer = {0};
 942:../drivers/fsl_dspi.c ****     status_t status;
 943:../drivers/fsl_dspi.c **** 
 944:../drivers/fsl_dspi.c ****     if (xfer->isTransmitFirst)
 945:../drivers/fsl_dspi.c ****     {
 946:../drivers/fsl_dspi.c ****         tempXfer.txData = xfer->txData;
 947:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
 948:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->txDataSize;
 949:../drivers/fsl_dspi.c ****     }
 950:../drivers/fsl_dspi.c ****     else
 951:../drivers/fsl_dspi.c ****     {
 952:../drivers/fsl_dspi.c ****         tempXfer.txData = NULL;
 953:../drivers/fsl_dspi.c ****         tempXfer.rxData = xfer->rxData;
 954:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
 955:../drivers/fsl_dspi.c ****     }
 956:../drivers/fsl_dspi.c ****     /* If the pcs pin keep assert between transmit and receive. */
 957:../drivers/fsl_dspi.c ****     if (xfer->isPcsAssertInTransfer)
 958:../drivers/fsl_dspi.c ****     {
 959:../drivers/fsl_dspi.c ****         tempXfer.configFlags = (xfer->configFlags) | kDSPI_MasterActiveAfterTransfer;
 960:../drivers/fsl_dspi.c ****     }
 961:../drivers/fsl_dspi.c ****     else
 962:../drivers/fsl_dspi.c ****     {
 963:../drivers/fsl_dspi.c ****         tempXfer.configFlags = (xfer->configFlags) & (uint32_t)(~kDSPI_MasterActiveAfterTransfer);
 964:../drivers/fsl_dspi.c ****     }
 965:../drivers/fsl_dspi.c **** 
 966:../drivers/fsl_dspi.c ****     status = DSPI_MasterTransferBlocking(base, &tempXfer);
 967:../drivers/fsl_dspi.c ****     if (status != kStatus_Success)
 968:../drivers/fsl_dspi.c ****     {
 969:../drivers/fsl_dspi.c ****         return status;
 970:../drivers/fsl_dspi.c ****     }
 971:../drivers/fsl_dspi.c **** 
 972:../drivers/fsl_dspi.c ****     if (xfer->isTransmitFirst)
 973:../drivers/fsl_dspi.c ****     {
 974:../drivers/fsl_dspi.c ****         tempXfer.txData = NULL;
 975:../drivers/fsl_dspi.c ****         tempXfer.rxData = xfer->rxData;
 976:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
 977:../drivers/fsl_dspi.c ****     }
 978:../drivers/fsl_dspi.c ****     else
 979:../drivers/fsl_dspi.c ****     {
 980:../drivers/fsl_dspi.c ****         tempXfer.txData = xfer->txData;
 981:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
 982:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->txDataSize;
 983:../drivers/fsl_dspi.c ****     }
 984:../drivers/fsl_dspi.c ****     tempXfer.configFlags = xfer->configFlags;
 985:../drivers/fsl_dspi.c **** 
 986:../drivers/fsl_dspi.c ****     /* DSPI transfer blocking. */
 987:../drivers/fsl_dspi.c ****     status = DSPI_MasterTransferBlocking(base, &tempXfer);
 988:../drivers/fsl_dspi.c **** 
 989:../drivers/fsl_dspi.c ****     return status;
 990:../drivers/fsl_dspi.c **** }
 991:../drivers/fsl_dspi.c **** 
 992:../drivers/fsl_dspi.c **** status_t DSPI_MasterHalfDuplexTransferNonBlocking(SPI_Type *base,
 993:../drivers/fsl_dspi.c ****                                                   dspi_master_handle_t *handle,
 994:../drivers/fsl_dspi.c ****                                                   dspi_half_duplex_transfer_t *xfer)
 995:../drivers/fsl_dspi.c **** {
 996:../drivers/fsl_dspi.c ****     assert(xfer);
 997:../drivers/fsl_dspi.c ****     assert(handle);
 998:../drivers/fsl_dspi.c ****     dspi_transfer_t tempXfer = {0};
 999:../drivers/fsl_dspi.c ****     status_t status;
1000:../drivers/fsl_dspi.c **** 
1001:../drivers/fsl_dspi.c ****     if (xfer->isTransmitFirst)
1002:../drivers/fsl_dspi.c ****     {
1003:../drivers/fsl_dspi.c ****         tempXfer.txData = xfer->txData;
1004:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
1005:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->txDataSize;
1006:../drivers/fsl_dspi.c ****     }
1007:../drivers/fsl_dspi.c ****     else
1008:../drivers/fsl_dspi.c ****     {
1009:../drivers/fsl_dspi.c ****         tempXfer.txData = NULL;
1010:../drivers/fsl_dspi.c ****         tempXfer.rxData = xfer->rxData;
1011:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
1012:../drivers/fsl_dspi.c ****     }
1013:../drivers/fsl_dspi.c ****     /* If the pcs pin keep assert between transmit and receive. */
1014:../drivers/fsl_dspi.c ****     if (xfer->isPcsAssertInTransfer)
1015:../drivers/fsl_dspi.c ****     {
1016:../drivers/fsl_dspi.c ****         tempXfer.configFlags = (xfer->configFlags) | kDSPI_MasterActiveAfterTransfer;
1017:../drivers/fsl_dspi.c ****     }
1018:../drivers/fsl_dspi.c ****     else
1019:../drivers/fsl_dspi.c ****     {
1020:../drivers/fsl_dspi.c ****         tempXfer.configFlags = (xfer->configFlags) & (uint32_t)(~kDSPI_MasterActiveAfterTransfer);
1021:../drivers/fsl_dspi.c ****     }
1022:../drivers/fsl_dspi.c **** 
1023:../drivers/fsl_dspi.c ****     status = DSPI_MasterTransferBlocking(base, &tempXfer);
1024:../drivers/fsl_dspi.c ****     if (status != kStatus_Success)
1025:../drivers/fsl_dspi.c ****     {
1026:../drivers/fsl_dspi.c ****         return status;
1027:../drivers/fsl_dspi.c ****     }
1028:../drivers/fsl_dspi.c **** 
1029:../drivers/fsl_dspi.c ****     if (xfer->isTransmitFirst)
1030:../drivers/fsl_dspi.c ****     {
1031:../drivers/fsl_dspi.c ****         tempXfer.txData = NULL;
1032:../drivers/fsl_dspi.c ****         tempXfer.rxData = xfer->rxData;
1033:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
1034:../drivers/fsl_dspi.c ****     }
1035:../drivers/fsl_dspi.c ****     else
1036:../drivers/fsl_dspi.c ****     {
1037:../drivers/fsl_dspi.c ****         tempXfer.txData = xfer->txData;
1038:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
1039:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->txDataSize;
1040:../drivers/fsl_dspi.c ****     }
1041:../drivers/fsl_dspi.c ****     tempXfer.configFlags = xfer->configFlags;
1042:../drivers/fsl_dspi.c **** 
1043:../drivers/fsl_dspi.c ****     status = DSPI_MasterTransferNonBlocking(base, handle, &tempXfer);
1044:../drivers/fsl_dspi.c **** 
1045:../drivers/fsl_dspi.c ****     return status;
1046:../drivers/fsl_dspi.c **** }
1047:../drivers/fsl_dspi.c **** 
1048:../drivers/fsl_dspi.c **** status_t DSPI_MasterTransferGetCount(SPI_Type *base, dspi_master_handle_t *handle, size_t *count)
1049:../drivers/fsl_dspi.c **** {
1050:../drivers/fsl_dspi.c ****     assert(handle);
1051:../drivers/fsl_dspi.c **** 
1052:../drivers/fsl_dspi.c ****     if (!count)
1053:../drivers/fsl_dspi.c ****     {
1054:../drivers/fsl_dspi.c ****         return kStatus_InvalidArgument;
1055:../drivers/fsl_dspi.c ****     }
1056:../drivers/fsl_dspi.c **** 
1057:../drivers/fsl_dspi.c ****     /* Catch when there is not an active transfer. */
1058:../drivers/fsl_dspi.c ****     if (handle->state != kDSPI_Busy)
1059:../drivers/fsl_dspi.c ****     {
1060:../drivers/fsl_dspi.c ****         *count = 0;
1061:../drivers/fsl_dspi.c ****         return kStatus_NoTransferInProgress;
1062:../drivers/fsl_dspi.c ****     }
1063:../drivers/fsl_dspi.c **** 
1064:../drivers/fsl_dspi.c ****     *count = handle->totalByteCount - handle->remainingReceiveByteCount;
1065:../drivers/fsl_dspi.c ****     return kStatus_Success;
1066:../drivers/fsl_dspi.c **** }
1067:../drivers/fsl_dspi.c **** 
1068:../drivers/fsl_dspi.c **** static void DSPI_MasterTransferComplete(SPI_Type *base, dspi_master_handle_t *handle)
1069:../drivers/fsl_dspi.c **** {
1070:../drivers/fsl_dspi.c ****     assert(handle);
1071:../drivers/fsl_dspi.c **** 
1072:../drivers/fsl_dspi.c ****     /* Disable interrupt requests*/
1073:../drivers/fsl_dspi.c ****     DSPI_DisableInterrupts(base, kDSPI_RxFifoDrainRequestInterruptEnable | kDSPI_TxFifoFillRequestI
1074:../drivers/fsl_dspi.c **** 
1075:../drivers/fsl_dspi.c ****     status_t status = 0;
1076:../drivers/fsl_dspi.c ****     if (handle->state == kDSPI_Error)
1077:../drivers/fsl_dspi.c ****     {
1078:../drivers/fsl_dspi.c ****         status = kStatus_DSPI_Error;
1079:../drivers/fsl_dspi.c ****     }
1080:../drivers/fsl_dspi.c ****     else
1081:../drivers/fsl_dspi.c ****     {
1082:../drivers/fsl_dspi.c ****         status = kStatus_Success;
1083:../drivers/fsl_dspi.c ****     }
1084:../drivers/fsl_dspi.c **** 
1085:../drivers/fsl_dspi.c ****     handle->state = kDSPI_Idle;
1086:../drivers/fsl_dspi.c **** 
1087:../drivers/fsl_dspi.c ****     if (handle->callback)
1088:../drivers/fsl_dspi.c ****     {
1089:../drivers/fsl_dspi.c ****         handle->callback(base, handle, status, handle->userData);
1090:../drivers/fsl_dspi.c ****     }
1091:../drivers/fsl_dspi.c **** }
1092:../drivers/fsl_dspi.c **** 
1093:../drivers/fsl_dspi.c **** static void DSPI_MasterTransferFillUpTxFifo(SPI_Type *base, dspi_master_handle_t *handle)
1094:../drivers/fsl_dspi.c **** {
1095:../drivers/fsl_dspi.c ****     assert(handle);
1096:../drivers/fsl_dspi.c **** 
1097:../drivers/fsl_dspi.c ****     uint16_t wordToSend = 0;
1098:../drivers/fsl_dspi.c ****     uint8_t dummyData = s_dummyData[DSPI_GetInstance(base)];
1099:../drivers/fsl_dspi.c **** 
1100:../drivers/fsl_dspi.c ****     /* If bits/frame is greater than one byte */
1101:../drivers/fsl_dspi.c ****     if (handle->bitsPerFrame > 8)
1102:../drivers/fsl_dspi.c ****     {
1103:../drivers/fsl_dspi.c ****         /* Fill the fifo until it is full or until the send word count is 0 or until the difference
1104:../drivers/fsl_dspi.c ****         * between the remainingReceiveByteCount and remainingSendByteCount equals the FIFO depth.
1105:../drivers/fsl_dspi.c ****         * The reason for checking the difference is to ensure we only send as much as the
1106:../drivers/fsl_dspi.c ****         * RX FIFO can receive.
1107:../drivers/fsl_dspi.c ****         * For this case where bitsPerFrame > 8, each entry in the FIFO contains 2 bytes of the
1108:../drivers/fsl_dspi.c ****         * send data, hence the difference between the remainingReceiveByteCount and
1109:../drivers/fsl_dspi.c ****         * remainingSendByteCount must be divided by 2 to convert this difference into a
1110:../drivers/fsl_dspi.c ****         * 16-bit (2 byte) value.
1111:../drivers/fsl_dspi.c ****         */
1112:../drivers/fsl_dspi.c ****         while ((DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag) &&
1113:../drivers/fsl_dspi.c ****                ((handle->remainingReceiveByteCount - handle->remainingSendByteCount) / 2 < handle->
1114:../drivers/fsl_dspi.c ****         {
1115:../drivers/fsl_dspi.c ****             if (handle->remainingSendByteCount <= 2)
1116:../drivers/fsl_dspi.c ****             {
1117:../drivers/fsl_dspi.c ****                 if (handle->txData)
1118:../drivers/fsl_dspi.c ****                 {
1119:../drivers/fsl_dspi.c ****                     if (handle->remainingSendByteCount == 1)
1120:../drivers/fsl_dspi.c ****                     {
1121:../drivers/fsl_dspi.c ****                         wordToSend = *(handle->txData);
1122:../drivers/fsl_dspi.c ****                     }
1123:../drivers/fsl_dspi.c ****                     else
1124:../drivers/fsl_dspi.c ****                     {
1125:../drivers/fsl_dspi.c ****                         wordToSend = *(handle->txData);
1126:../drivers/fsl_dspi.c ****                         ++handle->txData; /* increment to next data byte */
1127:../drivers/fsl_dspi.c ****                         wordToSend |= (unsigned)(*(handle->txData)) << 8U;
1128:../drivers/fsl_dspi.c ****                     }
1129:../drivers/fsl_dspi.c ****                 }
1130:../drivers/fsl_dspi.c ****                 else
1131:../drivers/fsl_dspi.c ****                 {
1132:../drivers/fsl_dspi.c ****                     wordToSend = dummyData;
1133:../drivers/fsl_dspi.c ****                 }
1134:../drivers/fsl_dspi.c ****                 handle->remainingSendByteCount = 0;
1135:../drivers/fsl_dspi.c ****                 base->PUSHR = handle->lastCommand | wordToSend;
1136:../drivers/fsl_dspi.c ****             }
1137:../drivers/fsl_dspi.c ****             /* For all words except the last word */
1138:../drivers/fsl_dspi.c ****             else
1139:../drivers/fsl_dspi.c ****             {
1140:../drivers/fsl_dspi.c ****                 if (handle->txData)
1141:../drivers/fsl_dspi.c ****                 {
1142:../drivers/fsl_dspi.c ****                     wordToSend = *(handle->txData);
1143:../drivers/fsl_dspi.c ****                     ++handle->txData; /* increment to next data byte */
1144:../drivers/fsl_dspi.c ****                     wordToSend |= (unsigned)(*(handle->txData)) << 8U;
1145:../drivers/fsl_dspi.c ****                     ++handle->txData; /* increment to next data byte */
1146:../drivers/fsl_dspi.c ****                 }
1147:../drivers/fsl_dspi.c ****                 else
1148:../drivers/fsl_dspi.c ****                 {
1149:../drivers/fsl_dspi.c ****                     wordToSend = dummyData;
1150:../drivers/fsl_dspi.c ****                 }
1151:../drivers/fsl_dspi.c ****                 handle->remainingSendByteCount -= 2; /* decrement remainingSendByteCount by 2 */
1152:../drivers/fsl_dspi.c ****                 base->PUSHR = handle->command | wordToSend;
1153:../drivers/fsl_dspi.c ****             }
1154:../drivers/fsl_dspi.c **** 
1155:../drivers/fsl_dspi.c ****             /* Try to clear the TFFF; if the TX FIFO is full this will clear */
1156:../drivers/fsl_dspi.c ****             DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
1157:../drivers/fsl_dspi.c **** 
1158:../drivers/fsl_dspi.c ****             /* exit loop if send count is zero, else update local variables for next loop.
1159:../drivers/fsl_dspi.c ****              * If this is the first time write to the PUSHR, write only once.
1160:../drivers/fsl_dspi.c ****              */
1161:../drivers/fsl_dspi.c ****             if ((handle->remainingSendByteCount == 0) || (handle->remainingSendByteCount == handle-
1162:../drivers/fsl_dspi.c ****             {
1163:../drivers/fsl_dspi.c ****                 break;
1164:../drivers/fsl_dspi.c ****             }
1165:../drivers/fsl_dspi.c ****         } /* End of TX FIFO fill while loop */
1166:../drivers/fsl_dspi.c ****     }
1167:../drivers/fsl_dspi.c ****     /* Optimized for bits/frame less than or equal to one byte. */
1168:../drivers/fsl_dspi.c ****     else
1169:../drivers/fsl_dspi.c ****     {
1170:../drivers/fsl_dspi.c ****         /* Fill the fifo until it is full or until the send word count is 0 or until the difference
1171:../drivers/fsl_dspi.c ****         * between the remainingReceiveByteCount and remainingSendByteCount equals the FIFO depth.
1172:../drivers/fsl_dspi.c ****         * The reason for checking the difference is to ensure we only send as much as the
1173:../drivers/fsl_dspi.c ****         * RX FIFO can receive.
1174:../drivers/fsl_dspi.c ****         */
1175:../drivers/fsl_dspi.c ****         while ((DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag) &&
1176:../drivers/fsl_dspi.c ****                ((handle->remainingReceiveByteCount - handle->remainingSendByteCount) < handle->fifo
1177:../drivers/fsl_dspi.c ****         {
1178:../drivers/fsl_dspi.c ****             if (handle->txData)
1179:../drivers/fsl_dspi.c ****             {
1180:../drivers/fsl_dspi.c ****                 wordToSend = *(handle->txData);
1181:../drivers/fsl_dspi.c ****                 ++handle->txData;
1182:../drivers/fsl_dspi.c ****             }
1183:../drivers/fsl_dspi.c ****             else
1184:../drivers/fsl_dspi.c ****             {
1185:../drivers/fsl_dspi.c ****                 wordToSend = dummyData;
1186:../drivers/fsl_dspi.c ****             }
1187:../drivers/fsl_dspi.c **** 
1188:../drivers/fsl_dspi.c ****             if (handle->remainingSendByteCount == 1)
1189:../drivers/fsl_dspi.c ****             {
1190:../drivers/fsl_dspi.c ****                 base->PUSHR = handle->lastCommand | wordToSend;
1191:../drivers/fsl_dspi.c ****             }
1192:../drivers/fsl_dspi.c ****             else
1193:../drivers/fsl_dspi.c ****             {
1194:../drivers/fsl_dspi.c ****                 base->PUSHR = handle->command | wordToSend;
1195:../drivers/fsl_dspi.c ****             }
1196:../drivers/fsl_dspi.c **** 
1197:../drivers/fsl_dspi.c ****             /* Try to clear the TFFF; if the TX FIFO is full this will clear */
1198:../drivers/fsl_dspi.c ****             DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
1199:../drivers/fsl_dspi.c **** 
1200:../drivers/fsl_dspi.c ****             --handle->remainingSendByteCount;
1201:../drivers/fsl_dspi.c **** 
1202:../drivers/fsl_dspi.c ****             /* exit loop if send count is zero, else update local variables for next loop
1203:../drivers/fsl_dspi.c ****              * If this is the first time write to the PUSHR, write only once.
1204:../drivers/fsl_dspi.c ****              */
1205:../drivers/fsl_dspi.c ****             if ((handle->remainingSendByteCount == 0) || (handle->remainingSendByteCount == handle-
1206:../drivers/fsl_dspi.c ****             {
1207:../drivers/fsl_dspi.c ****                 break;
1208:../drivers/fsl_dspi.c ****             }
1209:../drivers/fsl_dspi.c ****         }
1210:../drivers/fsl_dspi.c ****     }
1211:../drivers/fsl_dspi.c **** }
1212:../drivers/fsl_dspi.c **** 
1213:../drivers/fsl_dspi.c **** void DSPI_MasterTransferAbort(SPI_Type *base, dspi_master_handle_t *handle)
1214:../drivers/fsl_dspi.c **** {
1215:../drivers/fsl_dspi.c ****     assert(handle);
1216:../drivers/fsl_dspi.c **** 
1217:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
1218:../drivers/fsl_dspi.c **** 
1219:../drivers/fsl_dspi.c ****     /* Disable interrupt requests*/
1220:../drivers/fsl_dspi.c ****     DSPI_DisableInterrupts(base, kDSPI_RxFifoDrainRequestInterruptEnable | kDSPI_TxFifoFillRequestI
1221:../drivers/fsl_dspi.c **** 
1222:../drivers/fsl_dspi.c ****     handle->state = kDSPI_Idle;
1223:../drivers/fsl_dspi.c **** }
1224:../drivers/fsl_dspi.c **** 
1225:../drivers/fsl_dspi.c **** void DSPI_MasterTransferHandleIRQ(SPI_Type *base, dspi_master_handle_t *handle)
1226:../drivers/fsl_dspi.c **** {
1227:../drivers/fsl_dspi.c ****     assert(handle);
1228:../drivers/fsl_dspi.c **** 
1229:../drivers/fsl_dspi.c ****     /* RECEIVE IRQ handler: Check read buffer only if there are remaining bytes to read. */
1230:../drivers/fsl_dspi.c ****     if (handle->remainingReceiveByteCount)
1231:../drivers/fsl_dspi.c ****     {
1232:../drivers/fsl_dspi.c ****         /* Check read buffer.*/
1233:../drivers/fsl_dspi.c ****         uint16_t wordReceived; /* Maximum supported data bit length in master mode is 16-bits */
1234:../drivers/fsl_dspi.c **** 
1235:../drivers/fsl_dspi.c ****         /* If bits/frame is greater than one byte */
1236:../drivers/fsl_dspi.c ****         if (handle->bitsPerFrame > 8)
1237:../drivers/fsl_dspi.c ****         {
1238:../drivers/fsl_dspi.c ****             while (DSPI_GetStatusFlags(base) & kDSPI_RxFifoDrainRequestFlag)
1239:../drivers/fsl_dspi.c ****             {
1240:../drivers/fsl_dspi.c ****                 wordReceived = DSPI_ReadData(base);
1241:../drivers/fsl_dspi.c ****                 /* clear the rx fifo drain request, needed for non-DMA applications as this flag
1242:../drivers/fsl_dspi.c ****                 * will remain set even if the rx fifo is empty. By manually clearing this flag, it
1243:../drivers/fsl_dspi.c ****                 * either remain clear if no more data is in the fifo, or it will set if there is
1244:../drivers/fsl_dspi.c ****                 * more data in the fifo.
1245:../drivers/fsl_dspi.c ****                 */
1246:../drivers/fsl_dspi.c ****                 DSPI_ClearStatusFlags(base, kDSPI_RxFifoDrainRequestFlag);
1247:../drivers/fsl_dspi.c **** 
1248:../drivers/fsl_dspi.c ****                 /* Store read bytes into rx buffer only if a buffer pointer was provided */
1249:../drivers/fsl_dspi.c ****                 if (handle->rxData)
1250:../drivers/fsl_dspi.c ****                 {
1251:../drivers/fsl_dspi.c ****                     /* For the last word received, if there is an extra byte due to the odd transfe
1252:../drivers/fsl_dspi.c ****                     * byte count, only save the last byte and discard the upper byte
1253:../drivers/fsl_dspi.c ****                     */
1254:../drivers/fsl_dspi.c ****                     if (handle->remainingReceiveByteCount == 1)
1255:../drivers/fsl_dspi.c ****                     {
1256:../drivers/fsl_dspi.c ****                         *handle->rxData = wordReceived; /* Write first data byte */
1257:../drivers/fsl_dspi.c ****                         --handle->remainingReceiveByteCount;
1258:../drivers/fsl_dspi.c ****                     }
1259:../drivers/fsl_dspi.c ****                     else
1260:../drivers/fsl_dspi.c ****                     {
1261:../drivers/fsl_dspi.c ****                         *handle->rxData = wordReceived;      /* Write first data byte */
1262:../drivers/fsl_dspi.c ****                         ++handle->rxData;                    /* increment to next data byte */
1263:../drivers/fsl_dspi.c ****                         *handle->rxData = wordReceived >> 8; /* Write second data byte */
1264:../drivers/fsl_dspi.c ****                         ++handle->rxData;                    /* increment to next data byte */
1265:../drivers/fsl_dspi.c ****                         handle->remainingReceiveByteCount -= 2;
1266:../drivers/fsl_dspi.c ****                     }
1267:../drivers/fsl_dspi.c ****                 }
1268:../drivers/fsl_dspi.c ****                 else
1269:../drivers/fsl_dspi.c ****                 {
1270:../drivers/fsl_dspi.c ****                     if (handle->remainingReceiveByteCount == 1)
1271:../drivers/fsl_dspi.c ****                     {
1272:../drivers/fsl_dspi.c ****                         --handle->remainingReceiveByteCount;
1273:../drivers/fsl_dspi.c ****                     }
1274:../drivers/fsl_dspi.c ****                     else
1275:../drivers/fsl_dspi.c ****                     {
1276:../drivers/fsl_dspi.c ****                         handle->remainingReceiveByteCount -= 2;
1277:../drivers/fsl_dspi.c ****                     }
1278:../drivers/fsl_dspi.c ****                 }
1279:../drivers/fsl_dspi.c ****                 if (handle->remainingReceiveByteCount == 0)
1280:../drivers/fsl_dspi.c ****                 {
1281:../drivers/fsl_dspi.c ****                     break;
1282:../drivers/fsl_dspi.c ****                 }
1283:../drivers/fsl_dspi.c ****             } /* End of RX FIFO drain while loop */
1284:../drivers/fsl_dspi.c ****         }
1285:../drivers/fsl_dspi.c ****         /* Optimized for bits/frame less than or equal to one byte. */
1286:../drivers/fsl_dspi.c ****         else
1287:../drivers/fsl_dspi.c ****         {
1288:../drivers/fsl_dspi.c ****             while (DSPI_GetStatusFlags(base) & kDSPI_RxFifoDrainRequestFlag)
1289:../drivers/fsl_dspi.c ****             {
1290:../drivers/fsl_dspi.c ****                 wordReceived = DSPI_ReadData(base);
1291:../drivers/fsl_dspi.c ****                 /* clear the rx fifo drain request, needed for non-DMA applications as this flag
1292:../drivers/fsl_dspi.c ****                 * will remain set even if the rx fifo is empty. By manually clearing this flag, it
1293:../drivers/fsl_dspi.c ****                 * either remain clear if no more data is in the fifo, or it will set if there is
1294:../drivers/fsl_dspi.c ****                 * more data in the fifo.
1295:../drivers/fsl_dspi.c ****                 */
1296:../drivers/fsl_dspi.c ****                 DSPI_ClearStatusFlags(base, kDSPI_RxFifoDrainRequestFlag);
1297:../drivers/fsl_dspi.c **** 
1298:../drivers/fsl_dspi.c ****                 /* Store read bytes into rx buffer only if a buffer pointer was provided */
1299:../drivers/fsl_dspi.c ****                 if (handle->rxData)
1300:../drivers/fsl_dspi.c ****                 {
1301:../drivers/fsl_dspi.c ****                     *handle->rxData = wordReceived;
1302:../drivers/fsl_dspi.c ****                     ++handle->rxData;
1303:../drivers/fsl_dspi.c ****                 }
1304:../drivers/fsl_dspi.c **** 
1305:../drivers/fsl_dspi.c ****                 --handle->remainingReceiveByteCount;
1306:../drivers/fsl_dspi.c **** 
1307:../drivers/fsl_dspi.c ****                 if (handle->remainingReceiveByteCount == 0)
1308:../drivers/fsl_dspi.c ****                 {
1309:../drivers/fsl_dspi.c ****                     break;
1310:../drivers/fsl_dspi.c ****                 }
1311:../drivers/fsl_dspi.c ****             } /* End of RX FIFO drain while loop */
1312:../drivers/fsl_dspi.c ****         }
1313:../drivers/fsl_dspi.c ****     }
1314:../drivers/fsl_dspi.c **** 
1315:../drivers/fsl_dspi.c ****     /* Check write buffer. We always have to send a word in order to keep the transfer
1316:../drivers/fsl_dspi.c ****     * moving. So if the caller didn't provide a send buffer, we just send a zero.
1317:../drivers/fsl_dspi.c ****     */
1318:../drivers/fsl_dspi.c ****     if (handle->remainingSendByteCount)
1319:../drivers/fsl_dspi.c ****     {
1320:../drivers/fsl_dspi.c ****         DSPI_MasterTransferFillUpTxFifo(base, handle);
1321:../drivers/fsl_dspi.c ****     }
1322:../drivers/fsl_dspi.c **** 
1323:../drivers/fsl_dspi.c ****     /* Check if we're done with this transfer.*/
1324:../drivers/fsl_dspi.c ****     if ((handle->remainingSendByteCount == 0) && (handle->remainingReceiveByteCount == 0))
1325:../drivers/fsl_dspi.c ****     {
1326:../drivers/fsl_dspi.c ****         /* Complete the transfer and disable the interrupts */
1327:../drivers/fsl_dspi.c ****         DSPI_MasterTransferComplete(base, handle);
1328:../drivers/fsl_dspi.c ****     }
1329:../drivers/fsl_dspi.c **** }
1330:../drivers/fsl_dspi.c **** 
1331:../drivers/fsl_dspi.c **** /*Transactional APIs -- Slave*/
1332:../drivers/fsl_dspi.c **** void DSPI_SlaveTransferCreateHandle(SPI_Type *base,
1333:../drivers/fsl_dspi.c ****                                     dspi_slave_handle_t *handle,
1334:../drivers/fsl_dspi.c ****                                     dspi_slave_transfer_callback_t callback,
1335:../drivers/fsl_dspi.c ****                                     void *userData)
1336:../drivers/fsl_dspi.c **** {
1337:../drivers/fsl_dspi.c ****     assert(handle);
1338:../drivers/fsl_dspi.c **** 
1339:../drivers/fsl_dspi.c ****     /* Zero the handle. */
1340:../drivers/fsl_dspi.c ****     memset(handle, 0, sizeof(*handle));
1341:../drivers/fsl_dspi.c **** 
1342:../drivers/fsl_dspi.c ****     g_dspiHandle[DSPI_GetInstance(base)] = handle;
1343:../drivers/fsl_dspi.c **** 
1344:../drivers/fsl_dspi.c ****     handle->callback = callback;
1345:../drivers/fsl_dspi.c ****     handle->userData = userData;
1346:../drivers/fsl_dspi.c **** }
1347:../drivers/fsl_dspi.c **** 
1348:../drivers/fsl_dspi.c **** status_t DSPI_SlaveTransferNonBlocking(SPI_Type *base, dspi_slave_handle_t *handle, dspi_transfer_t
1349:../drivers/fsl_dspi.c **** {
1350:../drivers/fsl_dspi.c ****     assert(handle);
1351:../drivers/fsl_dspi.c ****     assert(transfer);
1352:../drivers/fsl_dspi.c **** 
1353:../drivers/fsl_dspi.c ****     /* If receive length is zero */
1354:../drivers/fsl_dspi.c ****     if (transfer->dataSize == 0)
1355:../drivers/fsl_dspi.c ****     {
1356:../drivers/fsl_dspi.c ****         return kStatus_InvalidArgument;
1357:../drivers/fsl_dspi.c ****     }
1358:../drivers/fsl_dspi.c **** 
1359:../drivers/fsl_dspi.c ****     /* If both send buffer and receive buffer is null */
1360:../drivers/fsl_dspi.c ****     if ((!(transfer->txData)) && (!(transfer->rxData)))
1361:../drivers/fsl_dspi.c ****     {
1362:../drivers/fsl_dspi.c ****         return kStatus_InvalidArgument;
1363:../drivers/fsl_dspi.c ****     }
1364:../drivers/fsl_dspi.c **** 
1365:../drivers/fsl_dspi.c ****     /* Check that we're not busy.*/
1366:../drivers/fsl_dspi.c ****     if (handle->state == kDSPI_Busy)
1367:../drivers/fsl_dspi.c ****     {
1368:../drivers/fsl_dspi.c ****         return kStatus_DSPI_Busy;
1369:../drivers/fsl_dspi.c ****     }
1370:../drivers/fsl_dspi.c ****     handle->state = kDSPI_Busy;
1371:../drivers/fsl_dspi.c **** 
1372:../drivers/fsl_dspi.c ****     /* Enable the NVIC for DSPI peripheral. */
1373:../drivers/fsl_dspi.c ****     EnableIRQ(s_dspiIRQ[DSPI_GetInstance(base)]);
1374:../drivers/fsl_dspi.c **** 
1375:../drivers/fsl_dspi.c ****     /* Store transfer information */
1376:../drivers/fsl_dspi.c ****     handle->txData = transfer->txData;
1377:../drivers/fsl_dspi.c ****     handle->rxData = transfer->rxData;
1378:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = transfer->dataSize;
1379:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = transfer->dataSize;
1380:../drivers/fsl_dspi.c ****     handle->totalByteCount = transfer->dataSize;
1381:../drivers/fsl_dspi.c **** 
1382:../drivers/fsl_dspi.c ****     handle->errorCount = 0;
1383:../drivers/fsl_dspi.c **** 
1384:../drivers/fsl_dspi.c ****     uint8_t whichCtar = (transfer->configFlags & DSPI_SLAVE_CTAR_MASK) >> DSPI_SLAVE_CTAR_SHIFT;
1385:../drivers/fsl_dspi.c ****     handle->bitsPerFrame =
1386:../drivers/fsl_dspi.c ****         (((base->CTAR_SLAVE[whichCtar]) & SPI_CTAR_SLAVE_FMSZ_MASK) >> SPI_CTAR_SLAVE_FMSZ_SHIFT) +
1387:../drivers/fsl_dspi.c **** 
1388:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
1389:../drivers/fsl_dspi.c **** 
1390:../drivers/fsl_dspi.c ****     DSPI_FlushFifo(base, true, true);
1391:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_AllStatusFlag);
1392:../drivers/fsl_dspi.c **** 
1393:../drivers/fsl_dspi.c ****     s_dspiSlaveIsr = DSPI_SlaveTransferHandleIRQ;
1394:../drivers/fsl_dspi.c **** 
1395:../drivers/fsl_dspi.c ****     /* Enable RX FIFO drain request, the slave only use this interrupt */
1396:../drivers/fsl_dspi.c ****     DSPI_EnableInterrupts(base, kDSPI_RxFifoDrainRequestInterruptEnable);
1397:../drivers/fsl_dspi.c **** 
1398:../drivers/fsl_dspi.c ****     if (handle->rxData)
1399:../drivers/fsl_dspi.c ****     {
1400:../drivers/fsl_dspi.c ****         /* RX FIFO overflow request enable */
1401:../drivers/fsl_dspi.c ****         DSPI_EnableInterrupts(base, kDSPI_RxFifoOverflowInterruptEnable);
1402:../drivers/fsl_dspi.c ****     }
1403:../drivers/fsl_dspi.c ****     if (handle->txData)
1404:../drivers/fsl_dspi.c ****     {
1405:../drivers/fsl_dspi.c ****         /* TX FIFO underflow request enable */
1406:../drivers/fsl_dspi.c ****         DSPI_EnableInterrupts(base, kDSPI_TxFifoUnderflowInterruptEnable);
1407:../drivers/fsl_dspi.c ****     }
1408:../drivers/fsl_dspi.c **** 
1409:../drivers/fsl_dspi.c ****     DSPI_StartTransfer(base);
1410:../drivers/fsl_dspi.c **** 
1411:../drivers/fsl_dspi.c ****     /* Prepare data to transmit */
1412:../drivers/fsl_dspi.c ****     DSPI_SlaveTransferFillUpTxFifo(base, handle);
1413:../drivers/fsl_dspi.c **** 
1414:../drivers/fsl_dspi.c ****     return kStatus_Success;
1415:../drivers/fsl_dspi.c **** }
1416:../drivers/fsl_dspi.c **** 
1417:../drivers/fsl_dspi.c **** status_t DSPI_SlaveTransferGetCount(SPI_Type *base, dspi_slave_handle_t *handle, size_t *count)
1418:../drivers/fsl_dspi.c **** {
1419:../drivers/fsl_dspi.c ****     assert(handle);
1420:../drivers/fsl_dspi.c **** 
1421:../drivers/fsl_dspi.c ****     if (!count)
1422:../drivers/fsl_dspi.c ****     {
1423:../drivers/fsl_dspi.c ****         return kStatus_InvalidArgument;
1424:../drivers/fsl_dspi.c ****     }
1425:../drivers/fsl_dspi.c **** 
1426:../drivers/fsl_dspi.c ****     /* Catch when there is not an active transfer. */
1427:../drivers/fsl_dspi.c ****     if (handle->state != kDSPI_Busy)
1428:../drivers/fsl_dspi.c ****     {
1429:../drivers/fsl_dspi.c ****         *count = 0;
1430:../drivers/fsl_dspi.c ****         return kStatus_NoTransferInProgress;
1431:../drivers/fsl_dspi.c ****     }
1432:../drivers/fsl_dspi.c **** 
1433:../drivers/fsl_dspi.c ****     *count = handle->totalByteCount - handle->remainingReceiveByteCount;
1434:../drivers/fsl_dspi.c ****     return kStatus_Success;
1435:../drivers/fsl_dspi.c **** }
1436:../drivers/fsl_dspi.c **** 
1437:../drivers/fsl_dspi.c **** static void DSPI_SlaveTransferFillUpTxFifo(SPI_Type *base, dspi_slave_handle_t *handle)
1438:../drivers/fsl_dspi.c **** {
1439:../drivers/fsl_dspi.c ****     assert(handle);
1440:../drivers/fsl_dspi.c **** 
1441:../drivers/fsl_dspi.c ****     uint16_t transmitData = 0;
1442:../drivers/fsl_dspi.c ****     uint8_t dummyPattern = s_dummyData[DSPI_GetInstance(base)];
1443:../drivers/fsl_dspi.c **** 
1444:../drivers/fsl_dspi.c ****     /* Service the transmitter, if transmit buffer provided, transmit the data,
1445:../drivers/fsl_dspi.c ****     * else transmit dummy pattern
1446:../drivers/fsl_dspi.c ****     */
1447:../drivers/fsl_dspi.c ****     while (DSPI_GetStatusFlags(base) & kDSPI_TxFifoFillRequestFlag)
1448:../drivers/fsl_dspi.c ****     {
1449:../drivers/fsl_dspi.c ****         /* Transmit data */
1450:../drivers/fsl_dspi.c ****         if (handle->remainingSendByteCount > 0)
1451:../drivers/fsl_dspi.c ****         {
1452:../drivers/fsl_dspi.c ****             /* Have data to transmit, update the transmit data and push to FIFO */
1453:../drivers/fsl_dspi.c ****             if (handle->bitsPerFrame <= 8)
1454:../drivers/fsl_dspi.c ****             {
1455:../drivers/fsl_dspi.c ****                 /* bits/frame is 1 byte */
1456:../drivers/fsl_dspi.c ****                 if (handle->txData)
1457:../drivers/fsl_dspi.c ****                 {
1458:../drivers/fsl_dspi.c ****                     /* Update transmit data and transmit pointer */
1459:../drivers/fsl_dspi.c ****                     transmitData = *handle->txData;
1460:../drivers/fsl_dspi.c ****                     handle->txData++;
1461:../drivers/fsl_dspi.c ****                 }
1462:../drivers/fsl_dspi.c ****                 else
1463:../drivers/fsl_dspi.c ****                 {
1464:../drivers/fsl_dspi.c ****                     transmitData = dummyPattern;
1465:../drivers/fsl_dspi.c ****                 }
1466:../drivers/fsl_dspi.c **** 
1467:../drivers/fsl_dspi.c ****                 /* Decrease remaining dataSize */
1468:../drivers/fsl_dspi.c ****                 --handle->remainingSendByteCount;
1469:../drivers/fsl_dspi.c ****             }
1470:../drivers/fsl_dspi.c ****             /* bits/frame is 2 bytes */
1471:../drivers/fsl_dspi.c ****             else
1472:../drivers/fsl_dspi.c ****             {
1473:../drivers/fsl_dspi.c ****                 /* With multibytes per frame transmission, the transmit frame contains data from
1474:../drivers/fsl_dspi.c ****                 * transmit buffer until sent dataSize matches user request. Other bytes will set to
1475:../drivers/fsl_dspi.c ****                 * dummy pattern value.
1476:../drivers/fsl_dspi.c ****                 */
1477:../drivers/fsl_dspi.c ****                 if (handle->txData)
1478:../drivers/fsl_dspi.c ****                 {
1479:../drivers/fsl_dspi.c ****                     /* Update first byte of transmit data and transmit pointer */
1480:../drivers/fsl_dspi.c ****                     transmitData = *handle->txData;
1481:../drivers/fsl_dspi.c ****                     handle->txData++;
1482:../drivers/fsl_dspi.c **** 
1483:../drivers/fsl_dspi.c ****                     if (handle->remainingSendByteCount == 1)
1484:../drivers/fsl_dspi.c ****                     {
1485:../drivers/fsl_dspi.c ****                         /* Decrease remaining dataSize */
1486:../drivers/fsl_dspi.c ****                         --handle->remainingSendByteCount;
1487:../drivers/fsl_dspi.c ****                         /* Update second byte of transmit data to second byte of dummy pattern */
1488:../drivers/fsl_dspi.c ****                         transmitData = transmitData | (uint16_t)(((uint16_t)dummyPattern) << 8);
1489:../drivers/fsl_dspi.c ****                     }
1490:../drivers/fsl_dspi.c ****                     else
1491:../drivers/fsl_dspi.c ****                     {
1492:../drivers/fsl_dspi.c ****                         /* Update second byte of transmit data and transmit pointer */
1493:../drivers/fsl_dspi.c ****                         transmitData = transmitData | (uint16_t)((uint16_t)(*handle->txData) << 8);
1494:../drivers/fsl_dspi.c ****                         handle->txData++;
1495:../drivers/fsl_dspi.c ****                         handle->remainingSendByteCount -= 2;
1496:../drivers/fsl_dspi.c ****                     }
1497:../drivers/fsl_dspi.c ****                 }
1498:../drivers/fsl_dspi.c ****                 else
1499:../drivers/fsl_dspi.c ****                 {
1500:../drivers/fsl_dspi.c ****                     if (handle->remainingSendByteCount == 1)
1501:../drivers/fsl_dspi.c ****                     {
1502:../drivers/fsl_dspi.c ****                         --handle->remainingSendByteCount;
1503:../drivers/fsl_dspi.c ****                     }
1504:../drivers/fsl_dspi.c ****                     else
1505:../drivers/fsl_dspi.c ****                     {
1506:../drivers/fsl_dspi.c ****                         handle->remainingSendByteCount -= 2;
1507:../drivers/fsl_dspi.c ****                     }
1508:../drivers/fsl_dspi.c ****                     transmitData = (uint16_t)((uint16_t)(dummyPattern) << 8) | dummyPattern;
1509:../drivers/fsl_dspi.c ****                 }
1510:../drivers/fsl_dspi.c ****             }
1511:../drivers/fsl_dspi.c ****         }
1512:../drivers/fsl_dspi.c ****         else
1513:../drivers/fsl_dspi.c ****         {
1514:../drivers/fsl_dspi.c ****             break;
1515:../drivers/fsl_dspi.c ****         }
1516:../drivers/fsl_dspi.c **** 
1517:../drivers/fsl_dspi.c ****         /* Write the data to the DSPI data register */
1518:../drivers/fsl_dspi.c ****         base->PUSHR_SLAVE = transmitData;
1519:../drivers/fsl_dspi.c **** 
1520:../drivers/fsl_dspi.c ****         /* Try to clear TFFF by writing a one to it; it will not clear if TX FIFO not full */
1521:../drivers/fsl_dspi.c ****         DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
1522:../drivers/fsl_dspi.c ****     }
1523:../drivers/fsl_dspi.c **** }
1524:../drivers/fsl_dspi.c **** 
1525:../drivers/fsl_dspi.c **** static void DSPI_SlaveTransferComplete(SPI_Type *base, dspi_slave_handle_t *handle)
1526:../drivers/fsl_dspi.c **** {
1527:../drivers/fsl_dspi.c ****     assert(handle);
1528:../drivers/fsl_dspi.c **** 
1529:../drivers/fsl_dspi.c ****     /* Disable interrupt requests */
1530:../drivers/fsl_dspi.c ****     DSPI_DisableInterrupts(base, kDSPI_TxFifoUnderflowInterruptEnable | kDSPI_TxFifoFillRequestInte
1531:../drivers/fsl_dspi.c ****                                      kDSPI_RxFifoOverflowInterruptEnable | kDSPI_RxFifoDrainRequest
1532:../drivers/fsl_dspi.c **** 
1533:../drivers/fsl_dspi.c ****     /* The transfer is complete. */
1534:../drivers/fsl_dspi.c ****     handle->txData = NULL;
1535:../drivers/fsl_dspi.c ****     handle->rxData = NULL;
1536:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = 0;
1537:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = 0;
1538:../drivers/fsl_dspi.c **** 
1539:../drivers/fsl_dspi.c ****     status_t status = 0;
1540:../drivers/fsl_dspi.c ****     if (handle->state == kDSPI_Error)
1541:../drivers/fsl_dspi.c ****     {
1542:../drivers/fsl_dspi.c ****         status = kStatus_DSPI_Error;
1543:../drivers/fsl_dspi.c ****     }
1544:../drivers/fsl_dspi.c ****     else
1545:../drivers/fsl_dspi.c ****     {
1546:../drivers/fsl_dspi.c ****         status = kStatus_Success;
1547:../drivers/fsl_dspi.c ****     }
1548:../drivers/fsl_dspi.c **** 
1549:../drivers/fsl_dspi.c ****     handle->state = kDSPI_Idle;
1550:../drivers/fsl_dspi.c **** 
1551:../drivers/fsl_dspi.c ****     if (handle->callback)
1552:../drivers/fsl_dspi.c ****     {
1553:../drivers/fsl_dspi.c ****         handle->callback(base, handle, status, handle->userData);
1554:../drivers/fsl_dspi.c ****     }
1555:../drivers/fsl_dspi.c **** }
1556:../drivers/fsl_dspi.c **** 
1557:../drivers/fsl_dspi.c **** void DSPI_SlaveTransferAbort(SPI_Type *base, dspi_slave_handle_t *handle)
1558:../drivers/fsl_dspi.c **** {
1559:../drivers/fsl_dspi.c ****     assert(handle);
1560:../drivers/fsl_dspi.c **** 
1561:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
1562:../drivers/fsl_dspi.c **** 
1563:../drivers/fsl_dspi.c ****     /* Disable interrupt requests */
1564:../drivers/fsl_dspi.c ****     DSPI_DisableInterrupts(base, kDSPI_TxFifoUnderflowInterruptEnable | kDSPI_TxFifoFillRequestInte
1565:../drivers/fsl_dspi.c ****                                      kDSPI_RxFifoOverflowInterruptEnable | kDSPI_RxFifoDrainRequest
1566:../drivers/fsl_dspi.c **** 
1567:../drivers/fsl_dspi.c ****     handle->state = kDSPI_Idle;
1568:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = 0;
1569:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = 0;
1570:../drivers/fsl_dspi.c **** }
1571:../drivers/fsl_dspi.c **** 
1572:../drivers/fsl_dspi.c **** void DSPI_SlaveTransferHandleIRQ(SPI_Type *base, dspi_slave_handle_t *handle)
1573:../drivers/fsl_dspi.c **** {
1574:../drivers/fsl_dspi.c ****     assert(handle);
1575:../drivers/fsl_dspi.c **** 
1576:../drivers/fsl_dspi.c ****     uint8_t dummyPattern = s_dummyData[DSPI_GetInstance(base)];
1577:../drivers/fsl_dspi.c ****     uint32_t dataReceived;
1578:../drivers/fsl_dspi.c ****     uint32_t dataSend = 0;
1579:../drivers/fsl_dspi.c **** 
1580:../drivers/fsl_dspi.c ****     /* Because SPI protocol is synchronous, the number of bytes that that slave received from the
1581:../drivers/fsl_dspi.c ****     * master is the actual number of bytes that the slave transmitted to the master. So we only
1582:../drivers/fsl_dspi.c ****     * monitor the received dataSize to know when the transfer is complete.
1583:../drivers/fsl_dspi.c ****     */
1584:../drivers/fsl_dspi.c ****     if (handle->remainingReceiveByteCount > 0)
1585:../drivers/fsl_dspi.c ****     {
1586:../drivers/fsl_dspi.c ****         while (DSPI_GetStatusFlags(base) & kDSPI_RxFifoDrainRequestFlag)
1587:../drivers/fsl_dspi.c ****         {
1588:../drivers/fsl_dspi.c ****             /* Have received data in the buffer. */
1589:../drivers/fsl_dspi.c ****             dataReceived = base->POPR;
1590:../drivers/fsl_dspi.c ****             /*Clear the rx fifo drain request, needed for non-DMA applications as this flag
1591:../drivers/fsl_dspi.c ****             * will remain set even if the rx fifo is empty. By manually clearing this flag, it
1592:../drivers/fsl_dspi.c ****             * either remain clear if no more data is in the fifo, or it will set if there is
1593:../drivers/fsl_dspi.c ****             * more data in the fifo.
1594:../drivers/fsl_dspi.c ****             */
1595:../drivers/fsl_dspi.c ****             DSPI_ClearStatusFlags(base, kDSPI_RxFifoDrainRequestFlag);
1596:../drivers/fsl_dspi.c **** 
1597:../drivers/fsl_dspi.c ****             /* If bits/frame is one byte */
1598:../drivers/fsl_dspi.c ****             if (handle->bitsPerFrame <= 8)
1599:../drivers/fsl_dspi.c ****             {
1600:../drivers/fsl_dspi.c ****                 if (handle->rxData)
1601:../drivers/fsl_dspi.c ****                 {
1602:../drivers/fsl_dspi.c ****                     /* Receive buffer is not null, store data into it */
1603:../drivers/fsl_dspi.c ****                     *handle->rxData = dataReceived;
1604:../drivers/fsl_dspi.c ****                     ++handle->rxData;
1605:../drivers/fsl_dspi.c ****                 }
1606:../drivers/fsl_dspi.c ****                 /* Descrease remaining receive byte count */
1607:../drivers/fsl_dspi.c ****                 --handle->remainingReceiveByteCount;
1608:../drivers/fsl_dspi.c **** 
1609:../drivers/fsl_dspi.c ****                 if (handle->remainingSendByteCount > 0)
1610:../drivers/fsl_dspi.c ****                 {
1611:../drivers/fsl_dspi.c ****                     if (handle->txData)
1612:../drivers/fsl_dspi.c ****                     {
1613:../drivers/fsl_dspi.c ****                         dataSend = *handle->txData;
1614:../drivers/fsl_dspi.c ****                         ++handle->txData;
1615:../drivers/fsl_dspi.c ****                     }
1616:../drivers/fsl_dspi.c ****                     else
1617:../drivers/fsl_dspi.c ****                     {
1618:../drivers/fsl_dspi.c ****                         dataSend = dummyPattern;
1619:../drivers/fsl_dspi.c ****                     }
1620:../drivers/fsl_dspi.c **** 
1621:../drivers/fsl_dspi.c ****                     --handle->remainingSendByteCount;
1622:../drivers/fsl_dspi.c ****                     /* Write the data to the DSPI data register */
1623:../drivers/fsl_dspi.c ****                     base->PUSHR_SLAVE = dataSend;
1624:../drivers/fsl_dspi.c ****                 }
1625:../drivers/fsl_dspi.c ****             }
1626:../drivers/fsl_dspi.c ****             else /* If bits/frame is 2 bytes */
1627:../drivers/fsl_dspi.c ****             {
1628:../drivers/fsl_dspi.c ****                 /* With multibytes frame receiving, we only receive till the received dataSize
1629:../drivers/fsl_dspi.c ****                 * matches user request. Other bytes will be ignored.
1630:../drivers/fsl_dspi.c ****                 */
1631:../drivers/fsl_dspi.c ****                 if (handle->rxData)
1632:../drivers/fsl_dspi.c ****                 {
1633:../drivers/fsl_dspi.c ****                     /* Receive buffer is not null, store first byte into it */
1634:../drivers/fsl_dspi.c ****                     *handle->rxData = dataReceived;
1635:../drivers/fsl_dspi.c ****                     ++handle->rxData;
1636:../drivers/fsl_dspi.c **** 
1637:../drivers/fsl_dspi.c ****                     if (handle->remainingReceiveByteCount == 1)
1638:../drivers/fsl_dspi.c ****                     {
1639:../drivers/fsl_dspi.c ****                         /* Decrease remaining receive byte count */
1640:../drivers/fsl_dspi.c ****                         --handle->remainingReceiveByteCount;
1641:../drivers/fsl_dspi.c ****                     }
1642:../drivers/fsl_dspi.c ****                     else
1643:../drivers/fsl_dspi.c ****                     {
1644:../drivers/fsl_dspi.c ****                         /* Receive buffer is not null, store second byte into it */
1645:../drivers/fsl_dspi.c ****                         *handle->rxData = dataReceived >> 8;
1646:../drivers/fsl_dspi.c ****                         ++handle->rxData;
1647:../drivers/fsl_dspi.c ****                         handle->remainingReceiveByteCount -= 2;
1648:../drivers/fsl_dspi.c ****                     }
1649:../drivers/fsl_dspi.c ****                 }
1650:../drivers/fsl_dspi.c ****                 /* If no handle->rxData*/
1651:../drivers/fsl_dspi.c ****                 else
1652:../drivers/fsl_dspi.c ****                 {
1653:../drivers/fsl_dspi.c ****                     if (handle->remainingReceiveByteCount == 1)
1654:../drivers/fsl_dspi.c ****                     {
1655:../drivers/fsl_dspi.c ****                         /* Decrease remaining receive byte count */
1656:../drivers/fsl_dspi.c ****                         --handle->remainingReceiveByteCount;
1657:../drivers/fsl_dspi.c ****                     }
1658:../drivers/fsl_dspi.c ****                     else
1659:../drivers/fsl_dspi.c ****                     {
1660:../drivers/fsl_dspi.c ****                         handle->remainingReceiveByteCount -= 2;
1661:../drivers/fsl_dspi.c ****                     }
1662:../drivers/fsl_dspi.c ****                 }
1663:../drivers/fsl_dspi.c **** 
1664:../drivers/fsl_dspi.c ****                 if (handle->remainingSendByteCount > 0)
1665:../drivers/fsl_dspi.c ****                 {
1666:../drivers/fsl_dspi.c ****                     if (handle->txData)
1667:../drivers/fsl_dspi.c ****                     {
1668:../drivers/fsl_dspi.c ****                         dataSend = *handle->txData;
1669:../drivers/fsl_dspi.c ****                         ++handle->txData;
1670:../drivers/fsl_dspi.c **** 
1671:../drivers/fsl_dspi.c ****                         if (handle->remainingSendByteCount == 1)
1672:../drivers/fsl_dspi.c ****                         {
1673:../drivers/fsl_dspi.c ****                             --handle->remainingSendByteCount;
1674:../drivers/fsl_dspi.c ****                             dataSend |= (uint16_t)((uint16_t)(dummyPattern) << 8);
1675:../drivers/fsl_dspi.c ****                         }
1676:../drivers/fsl_dspi.c ****                         else
1677:../drivers/fsl_dspi.c ****                         {
1678:../drivers/fsl_dspi.c ****                             dataSend |= (uint32_t)(*handle->txData) << 8;
1679:../drivers/fsl_dspi.c ****                             ++handle->txData;
1680:../drivers/fsl_dspi.c ****                             handle->remainingSendByteCount -= 2;
1681:../drivers/fsl_dspi.c ****                         }
1682:../drivers/fsl_dspi.c ****                     }
1683:../drivers/fsl_dspi.c ****                     /* If no handle->txData*/
1684:../drivers/fsl_dspi.c ****                     else
1685:../drivers/fsl_dspi.c ****                     {
1686:../drivers/fsl_dspi.c ****                         if (handle->remainingSendByteCount == 1)
1687:../drivers/fsl_dspi.c ****                         {
1688:../drivers/fsl_dspi.c ****                             --handle->remainingSendByteCount;
1689:../drivers/fsl_dspi.c ****                         }
1690:../drivers/fsl_dspi.c ****                         else
1691:../drivers/fsl_dspi.c ****                         {
1692:../drivers/fsl_dspi.c ****                             handle->remainingSendByteCount -= 2;
1693:../drivers/fsl_dspi.c ****                         }
1694:../drivers/fsl_dspi.c ****                         dataSend = (uint16_t)((uint16_t)(dummyPattern) << 8) | dummyPattern;
1695:../drivers/fsl_dspi.c ****                     }
1696:../drivers/fsl_dspi.c ****                     /* Write the data to the DSPI data register */
1697:../drivers/fsl_dspi.c ****                     base->PUSHR_SLAVE = dataSend;
1698:../drivers/fsl_dspi.c ****                 }
1699:../drivers/fsl_dspi.c ****             }
1700:../drivers/fsl_dspi.c ****             /* Try to clear TFFF by writing a one to it; it will not clear if TX FIFO not full */
1701:../drivers/fsl_dspi.c ****             DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
1702:../drivers/fsl_dspi.c **** 
1703:../drivers/fsl_dspi.c ****             if (handle->remainingReceiveByteCount == 0)
1704:../drivers/fsl_dspi.c ****             {
1705:../drivers/fsl_dspi.c ****                 break;
1706:../drivers/fsl_dspi.c ****             }
1707:../drivers/fsl_dspi.c ****         }
1708:../drivers/fsl_dspi.c ****     }
1709:../drivers/fsl_dspi.c ****     /* Check if remaining receive byte count matches user request */
1710:../drivers/fsl_dspi.c ****     if ((handle->remainingReceiveByteCount == 0) || (handle->state == kDSPI_Error))
1711:../drivers/fsl_dspi.c ****     {
1712:../drivers/fsl_dspi.c ****         /* Other cases, stop the transfer. */
1713:../drivers/fsl_dspi.c ****         DSPI_SlaveTransferComplete(base, handle);
1714:../drivers/fsl_dspi.c ****         return;
1715:../drivers/fsl_dspi.c ****     }
1716:../drivers/fsl_dspi.c **** 
1717:../drivers/fsl_dspi.c ****     /* Catch tx fifo underflow conditions, service only if tx under flow interrupt enabled */
1718:../drivers/fsl_dspi.c ****     if ((DSPI_GetStatusFlags(base) & kDSPI_TxFifoUnderflowFlag) && (base->RSER & SPI_RSER_TFUF_RE_M
1719:../drivers/fsl_dspi.c ****     {
1720:../drivers/fsl_dspi.c ****         DSPI_ClearStatusFlags(base, kDSPI_TxFifoUnderflowFlag);
1721:../drivers/fsl_dspi.c ****         /* Change state to error and clear flag */
1722:../drivers/fsl_dspi.c ****         if (handle->txData)
1723:../drivers/fsl_dspi.c ****         {
1724:../drivers/fsl_dspi.c ****             handle->state = kDSPI_Error;
1725:../drivers/fsl_dspi.c ****         }
1726:../drivers/fsl_dspi.c ****         handle->errorCount++;
1727:../drivers/fsl_dspi.c ****     }
1728:../drivers/fsl_dspi.c ****     /* Catch rx fifo overflow conditions, service only if rx over flow interrupt enabled */
1729:../drivers/fsl_dspi.c ****     if ((DSPI_GetStatusFlags(base) & kDSPI_RxFifoOverflowFlag) && (base->RSER & SPI_RSER_RFOF_RE_MA
1730:../drivers/fsl_dspi.c ****     {
1731:../drivers/fsl_dspi.c ****         DSPI_ClearStatusFlags(base, kDSPI_RxFifoOverflowFlag);
1732:../drivers/fsl_dspi.c ****         /* Change state to error and clear flag */
1733:../drivers/fsl_dspi.c ****         if (handle->txData)
1734:../drivers/fsl_dspi.c ****         {
1735:../drivers/fsl_dspi.c ****             handle->state = kDSPI_Error;
1736:../drivers/fsl_dspi.c ****         }
1737:../drivers/fsl_dspi.c ****         handle->errorCount++;
1738:../drivers/fsl_dspi.c ****     }
1739:../drivers/fsl_dspi.c **** }
1740:../drivers/fsl_dspi.c **** 
1741:../drivers/fsl_dspi.c **** static void DSPI_CommonIRQHandler(SPI_Type *base, void *param)
1742:../drivers/fsl_dspi.c **** {
  27              		.loc 1 1742 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  36              	.LBB207:
  37              	.LBB208:
  38              		.file 2 "../drivers/fsl_dspi.h"
   1:../drivers/fsl_dspi.h **** /*
   2:../drivers/fsl_dspi.h ****  * The Clear BSD License
   3:../drivers/fsl_dspi.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_dspi.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_dspi.h ****  * All rights reserved.
   6:../drivers/fsl_dspi.h ****  *
   7:../drivers/fsl_dspi.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_dspi.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_dspi.h ****  * that the following conditions are met:
  10:../drivers/fsl_dspi.h ****  *
  11:../drivers/fsl_dspi.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_dspi.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_dspi.h ****  *
  14:../drivers/fsl_dspi.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_dspi.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_dspi.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_dspi.h ****  *
  18:../drivers/fsl_dspi.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_dspi.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_dspi.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_dspi.h ****  *
  22:../drivers/fsl_dspi.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_dspi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_dspi.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_dspi.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_dspi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_dspi.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_dspi.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_dspi.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_dspi.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_dspi.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_dspi.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_dspi.h ****  */
  34:../drivers/fsl_dspi.h **** #ifndef _FSL_DSPI_H_
  35:../drivers/fsl_dspi.h **** #define _FSL_DSPI_H_
  36:../drivers/fsl_dspi.h **** 
  37:../drivers/fsl_dspi.h **** #include "fsl_common.h"
  38:../drivers/fsl_dspi.h **** 
  39:../drivers/fsl_dspi.h **** /*!
  40:../drivers/fsl_dspi.h ****  * @addtogroup dspi_driver
  41:../drivers/fsl_dspi.h ****  * @{
  42:../drivers/fsl_dspi.h ****  */
  43:../drivers/fsl_dspi.h **** 
  44:../drivers/fsl_dspi.h **** /**************************************************************************************************
  45:../drivers/fsl_dspi.h ****  * Definitions
  46:../drivers/fsl_dspi.h ****  **************************************************************************************************
  47:../drivers/fsl_dspi.h **** 
  48:../drivers/fsl_dspi.h **** /*! @name Driver version */
  49:../drivers/fsl_dspi.h **** /*@{*/
  50:../drivers/fsl_dspi.h **** /*! @brief DSPI driver version 2.2.0. */
  51:../drivers/fsl_dspi.h **** #define FSL_DSPI_DRIVER_VERSION (MAKE_VERSION(2, 2, 0))
  52:../drivers/fsl_dspi.h **** /*@}*/
  53:../drivers/fsl_dspi.h **** 
  54:../drivers/fsl_dspi.h **** #ifndef DSPI_DUMMY_DATA
  55:../drivers/fsl_dspi.h **** /*! @brief DSPI dummy data if there is no Tx data.*/
  56:../drivers/fsl_dspi.h **** #define DSPI_DUMMY_DATA (0x00U) /*!< Dummy data used for Tx if there is no txData. */
  57:../drivers/fsl_dspi.h **** #endif
  58:../drivers/fsl_dspi.h **** 
  59:../drivers/fsl_dspi.h **** /*! @brief Status for the DSPI driver.*/
  60:../drivers/fsl_dspi.h **** enum _dspi_status
  61:../drivers/fsl_dspi.h **** {
  62:../drivers/fsl_dspi.h ****     kStatus_DSPI_Busy = MAKE_STATUS(kStatusGroup_DSPI, 0),      /*!< DSPI transfer is busy.*/
  63:../drivers/fsl_dspi.h ****     kStatus_DSPI_Error = MAKE_STATUS(kStatusGroup_DSPI, 1),     /*!< DSPI driver error. */
  64:../drivers/fsl_dspi.h ****     kStatus_DSPI_Idle = MAKE_STATUS(kStatusGroup_DSPI, 2),      /*!< DSPI is idle.*/
  65:../drivers/fsl_dspi.h ****     kStatus_DSPI_OutOfRange = MAKE_STATUS(kStatusGroup_DSPI, 3) /*!< DSPI transfer out of range. */
  66:../drivers/fsl_dspi.h **** };
  67:../drivers/fsl_dspi.h **** 
  68:../drivers/fsl_dspi.h **** /*! @brief DSPI status flags in SPIx_SR register.*/
  69:../drivers/fsl_dspi.h **** enum _dspi_flags
  70:../drivers/fsl_dspi.h **** {
  71:../drivers/fsl_dspi.h ****     kDSPI_TxCompleteFlag = SPI_SR_TCF_MASK,          /*!< Transfer Complete Flag. */
  72:../drivers/fsl_dspi.h ****     kDSPI_EndOfQueueFlag = SPI_SR_EOQF_MASK,         /*!< End of Queue Flag.*/
  73:../drivers/fsl_dspi.h ****     kDSPI_TxFifoUnderflowFlag = SPI_SR_TFUF_MASK,    /*!< Transmit FIFO Underflow Flag.*/
  74:../drivers/fsl_dspi.h ****     kDSPI_TxFifoFillRequestFlag = SPI_SR_TFFF_MASK,  /*!< Transmit FIFO Fill Flag.*/
  75:../drivers/fsl_dspi.h ****     kDSPI_RxFifoOverflowFlag = SPI_SR_RFOF_MASK,     /*!< Receive FIFO Overflow Flag.*/
  76:../drivers/fsl_dspi.h ****     kDSPI_RxFifoDrainRequestFlag = SPI_SR_RFDF_MASK, /*!< Receive FIFO Drain Flag.*/
  77:../drivers/fsl_dspi.h ****     kDSPI_TxAndRxStatusFlag = SPI_SR_TXRXS_MASK,     /*!< The module is in Stopped/Running state.*/
  78:../drivers/fsl_dspi.h ****     kDSPI_AllStatusFlag = SPI_SR_TCF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TFUF_MASK | SPI_SR_TFFF_MASK 
  79:../drivers/fsl_dspi.h ****                           SPI_SR_RFDF_MASK | SPI_SR_TXRXS_MASK /*!< All statuses above.*/
  80:../drivers/fsl_dspi.h **** };
  81:../drivers/fsl_dspi.h **** 
  82:../drivers/fsl_dspi.h **** /*! @brief DSPI interrupt source.*/
  83:../drivers/fsl_dspi.h **** enum _dspi_interrupt_enable
  84:../drivers/fsl_dspi.h **** {
  85:../drivers/fsl_dspi.h ****     kDSPI_TxCompleteInterruptEnable = SPI_RSER_TCF_RE_MASK,          /*!< TCF  interrupt enable.*/
  86:../drivers/fsl_dspi.h ****     kDSPI_EndOfQueueInterruptEnable = SPI_RSER_EOQF_RE_MASK,         /*!< EOQF interrupt enable.*/
  87:../drivers/fsl_dspi.h ****     kDSPI_TxFifoUnderflowInterruptEnable = SPI_RSER_TFUF_RE_MASK,    /*!< TFUF interrupt enable.*/
  88:../drivers/fsl_dspi.h ****     kDSPI_TxFifoFillRequestInterruptEnable = SPI_RSER_TFFF_RE_MASK,  /*!< TFFF interrupt enable, DM
  89:../drivers/fsl_dspi.h ****     kDSPI_RxFifoOverflowInterruptEnable = SPI_RSER_RFOF_RE_MASK,     /*!< RFOF interrupt enable.*/
  90:../drivers/fsl_dspi.h ****     kDSPI_RxFifoDrainRequestInterruptEnable = SPI_RSER_RFDF_RE_MASK, /*!< RFDF interrupt enable, DM
  91:../drivers/fsl_dspi.h ****     kDSPI_AllInterruptEnable = SPI_RSER_TCF_RE_MASK | SPI_RSER_EOQF_RE_MASK | SPI_RSER_TFUF_RE_MASK
  92:../drivers/fsl_dspi.h ****                                SPI_RSER_TFFF_RE_MASK | SPI_RSER_RFOF_RE_MASK | SPI_RSER_RFDF_RE_MAS
  93:../drivers/fsl_dspi.h ****     /*!< All above interrupts enable.*/
  94:../drivers/fsl_dspi.h **** };
  95:../drivers/fsl_dspi.h **** 
  96:../drivers/fsl_dspi.h **** /*! @brief DSPI DMA source.*/
  97:../drivers/fsl_dspi.h **** enum _dspi_dma_enable
  98:../drivers/fsl_dspi.h **** {
  99:../drivers/fsl_dspi.h ****     kDSPI_TxDmaEnable = (SPI_RSER_TFFF_RE_MASK | SPI_RSER_TFFF_DIRS_MASK), /*!< TFFF flag generates
 100:../drivers/fsl_dspi.h ****                                                                                 No Tx interrupt req
 101:../drivers/fsl_dspi.h ****     kDSPI_RxDmaEnable = (SPI_RSER_RFDF_RE_MASK | SPI_RSER_RFDF_DIRS_MASK)  /*!< RFDF flag generates
 102:../drivers/fsl_dspi.h ****                                                                                 No Rx interrupt req
 103:../drivers/fsl_dspi.h **** };
 104:../drivers/fsl_dspi.h **** 
 105:../drivers/fsl_dspi.h **** /*! @brief DSPI master or slave mode configuration.*/
 106:../drivers/fsl_dspi.h **** typedef enum _dspi_master_slave_mode
 107:../drivers/fsl_dspi.h **** {
 108:../drivers/fsl_dspi.h ****     kDSPI_Master = 1U, /*!< DSPI peripheral operates in master mode.*/
 109:../drivers/fsl_dspi.h ****     kDSPI_Slave = 0U   /*!< DSPI peripheral operates in slave mode.*/
 110:../drivers/fsl_dspi.h **** } dspi_master_slave_mode_t;
 111:../drivers/fsl_dspi.h **** 
 112:../drivers/fsl_dspi.h **** /*!
 113:../drivers/fsl_dspi.h ****  * @brief DSPI Sample Point: Controls when the DSPI master samples SIN in the Modified Transfer For
 114:../drivers/fsl_dspi.h ****  * valid
 115:../drivers/fsl_dspi.h ****  * only when the CPHA bit in the CTAR register is 0.
 116:../drivers/fsl_dspi.h ****  */
 117:../drivers/fsl_dspi.h **** typedef enum _dspi_master_sample_point
 118:../drivers/fsl_dspi.h **** {
 119:../drivers/fsl_dspi.h ****     kDSPI_SckToSin0Clock = 0U, /*!< 0 system clocks between SCK edge and SIN sample.*/
 120:../drivers/fsl_dspi.h ****     kDSPI_SckToSin1Clock = 1U, /*!< 1 system clock  between SCK edge and SIN sample.*/
 121:../drivers/fsl_dspi.h ****     kDSPI_SckToSin2Clock = 2U  /*!< 2 system clocks between SCK edge and SIN sample.*/
 122:../drivers/fsl_dspi.h **** } dspi_master_sample_point_t;
 123:../drivers/fsl_dspi.h **** 
 124:../drivers/fsl_dspi.h **** /*! @brief DSPI Peripheral Chip Select (Pcs) configuration (which Pcs to configure).*/
 125:../drivers/fsl_dspi.h **** typedef enum _dspi_which_pcs_config
 126:../drivers/fsl_dspi.h **** {
 127:../drivers/fsl_dspi.h ****     kDSPI_Pcs0 = 1U << 0, /*!< Pcs[0] */
 128:../drivers/fsl_dspi.h ****     kDSPI_Pcs1 = 1U << 1, /*!< Pcs[1] */
 129:../drivers/fsl_dspi.h ****     kDSPI_Pcs2 = 1U << 2, /*!< Pcs[2] */
 130:../drivers/fsl_dspi.h ****     kDSPI_Pcs3 = 1U << 3, /*!< Pcs[3] */
 131:../drivers/fsl_dspi.h ****     kDSPI_Pcs4 = 1U << 4, /*!< Pcs[4] */
 132:../drivers/fsl_dspi.h ****     kDSPI_Pcs5 = 1U << 5  /*!< Pcs[5] */
 133:../drivers/fsl_dspi.h **** } dspi_which_pcs_t;
 134:../drivers/fsl_dspi.h **** 
 135:../drivers/fsl_dspi.h **** /*! @brief DSPI Peripheral Chip Select (Pcs) Polarity configuration.*/
 136:../drivers/fsl_dspi.h **** typedef enum _dspi_pcs_polarity_config
 137:../drivers/fsl_dspi.h **** {
 138:../drivers/fsl_dspi.h ****     kDSPI_PcsActiveHigh = 0U, /*!< Pcs Active High (idles low). */
 139:../drivers/fsl_dspi.h ****     kDSPI_PcsActiveLow = 1U   /*!< Pcs Active Low (idles high). */
 140:../drivers/fsl_dspi.h **** } dspi_pcs_polarity_config_t;
 141:../drivers/fsl_dspi.h **** 
 142:../drivers/fsl_dspi.h **** /*! @brief DSPI Peripheral Chip Select (Pcs) Polarity.*/
 143:../drivers/fsl_dspi.h **** enum _dspi_pcs_polarity
 144:../drivers/fsl_dspi.h **** {
 145:../drivers/fsl_dspi.h ****     kDSPI_Pcs0ActiveLow = 1U << 0, /*!< Pcs0 Active Low (idles high). */
 146:../drivers/fsl_dspi.h ****     kDSPI_Pcs1ActiveLow = 1U << 1, /*!< Pcs1 Active Low (idles high). */
 147:../drivers/fsl_dspi.h ****     kDSPI_Pcs2ActiveLow = 1U << 2, /*!< Pcs2 Active Low (idles high). */
 148:../drivers/fsl_dspi.h ****     kDSPI_Pcs3ActiveLow = 1U << 3, /*!< Pcs3 Active Low (idles high). */
 149:../drivers/fsl_dspi.h ****     kDSPI_Pcs4ActiveLow = 1U << 4, /*!< Pcs4 Active Low (idles high). */
 150:../drivers/fsl_dspi.h ****     kDSPI_Pcs5ActiveLow = 1U << 5, /*!< Pcs5 Active Low (idles high). */
 151:../drivers/fsl_dspi.h ****     kDSPI_PcsAllActiveLow = 0xFFU  /*!< Pcs0 to Pcs5 Active Low (idles high). */
 152:../drivers/fsl_dspi.h **** };
 153:../drivers/fsl_dspi.h **** 
 154:../drivers/fsl_dspi.h **** /*! @brief DSPI clock polarity configuration for a given CTAR.*/
 155:../drivers/fsl_dspi.h **** typedef enum _dspi_clock_polarity
 156:../drivers/fsl_dspi.h **** {
 157:../drivers/fsl_dspi.h ****     kDSPI_ClockPolarityActiveHigh = 0U, /*!< CPOL=0. Active-high DSPI clock (idles low).*/
 158:../drivers/fsl_dspi.h ****     kDSPI_ClockPolarityActiveLow = 1U   /*!< CPOL=1. Active-low DSPI clock (idles high).*/
 159:../drivers/fsl_dspi.h **** } dspi_clock_polarity_t;
 160:../drivers/fsl_dspi.h **** 
 161:../drivers/fsl_dspi.h **** /*! @brief DSPI clock phase configuration for a given CTAR.*/
 162:../drivers/fsl_dspi.h **** typedef enum _dspi_clock_phase
 163:../drivers/fsl_dspi.h **** {
 164:../drivers/fsl_dspi.h ****     kDSPI_ClockPhaseFirstEdge = 0U, /*!< CPHA=0. Data is captured on the leading edge of the SCK an
 165:../drivers/fsl_dspi.h ****                                          following edge.*/
 166:../drivers/fsl_dspi.h ****     kDSPI_ClockPhaseSecondEdge = 1U /*!< CPHA=1. Data is changed on the leading edge of the SCK and
 167:../drivers/fsl_dspi.h ****                                         following edge.*/
 168:../drivers/fsl_dspi.h **** } dspi_clock_phase_t;
 169:../drivers/fsl_dspi.h **** 
 170:../drivers/fsl_dspi.h **** /*! @brief DSPI data shifter direction options for a given CTAR.*/
 171:../drivers/fsl_dspi.h **** typedef enum _dspi_shift_direction
 172:../drivers/fsl_dspi.h **** {
 173:../drivers/fsl_dspi.h ****     kDSPI_MsbFirst = 0U, /*!< Data transfers start with most significant bit.*/
 174:../drivers/fsl_dspi.h ****     kDSPI_LsbFirst = 1U  /*!< Data transfers start with least significant bit.
 175:../drivers/fsl_dspi.h ****                               Shifting out of LSB is not supported for slave */
 176:../drivers/fsl_dspi.h **** } dspi_shift_direction_t;
 177:../drivers/fsl_dspi.h **** 
 178:../drivers/fsl_dspi.h **** /*! @brief DSPI delay type selection.*/
 179:../drivers/fsl_dspi.h **** typedef enum _dspi_delay_type
 180:../drivers/fsl_dspi.h **** {
 181:../drivers/fsl_dspi.h ****     kDSPI_PcsToSck = 1U,  /*!< Pcs-to-SCK delay. */
 182:../drivers/fsl_dspi.h ****     kDSPI_LastSckToPcs,   /*!< The last SCK edge to Pcs delay. */
 183:../drivers/fsl_dspi.h ****     kDSPI_BetweenTransfer /*!< Delay between transfers. */
 184:../drivers/fsl_dspi.h **** } dspi_delay_type_t;
 185:../drivers/fsl_dspi.h **** 
 186:../drivers/fsl_dspi.h **** /*! @brief DSPI Clock and Transfer Attributes Register (CTAR) selection.*/
 187:../drivers/fsl_dspi.h **** typedef enum _dspi_ctar_selection
 188:../drivers/fsl_dspi.h **** {
 189:../drivers/fsl_dspi.h ****     kDSPI_Ctar0 = 0U, /*!< CTAR0 selection option for master or slave mode; note that CTAR0 and CTA
 190:../drivers/fsl_dspi.h ****                          same register address. */
 191:../drivers/fsl_dspi.h ****     kDSPI_Ctar1 = 1U, /*!< CTAR1 selection option for master mode only. */
 192:../drivers/fsl_dspi.h ****     kDSPI_Ctar2 = 2U, /*!< CTAR2 selection option for master mode only; note that some devices do n
 193:../drivers/fsl_dspi.h ****     kDSPI_Ctar3 = 3U, /*!< CTAR3 selection option for master mode only; note that some devices do n
 194:../drivers/fsl_dspi.h ****     kDSPI_Ctar4 = 4U, /*!< CTAR4 selection option for master mode only; note that some devices do n
 195:../drivers/fsl_dspi.h ****     kDSPI_Ctar5 = 5U, /*!< CTAR5 selection option for master mode only; note that some devices do n
 196:../drivers/fsl_dspi.h ****     kDSPI_Ctar6 = 6U, /*!< CTAR6 selection option for master mode only; note that some devices do n
 197:../drivers/fsl_dspi.h ****     kDSPI_Ctar7 = 7U  /*!< CTAR7 selection option for master mode only; note that some devices do n
 198:../drivers/fsl_dspi.h **** } dspi_ctar_selection_t;
 199:../drivers/fsl_dspi.h **** 
 200:../drivers/fsl_dspi.h **** #define DSPI_MASTER_CTAR_SHIFT (0U)   /*!< DSPI master CTAR shift macro; used internally. */
 201:../drivers/fsl_dspi.h **** #define DSPI_MASTER_CTAR_MASK (0x0FU) /*!< DSPI master CTAR mask macro; used internally. */
 202:../drivers/fsl_dspi.h **** #define DSPI_MASTER_PCS_SHIFT (4U)    /*!< DSPI master PCS shift macro; used internally. */
 203:../drivers/fsl_dspi.h **** #define DSPI_MASTER_PCS_MASK (0xF0U)  /*!< DSPI master PCS mask macro; used internally. */
 204:../drivers/fsl_dspi.h **** /*! @brief Use this enumeration for the DSPI master transfer configFlags. */
 205:../drivers/fsl_dspi.h **** enum _dspi_transfer_config_flag_for_master
 206:../drivers/fsl_dspi.h **** {
 207:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar0 = 0U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR0 setting. 
 208:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar1 = 1U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR1 setting. 
 209:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar2 = 2U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR2 setting. 
 210:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar3 = 3U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR3 setting. 
 211:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar4 = 4U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR4 setting. 
 212:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar5 = 5U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR5 setting. 
 213:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar6 = 6U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR6 setting. 
 214:../drivers/fsl_dspi.h ****     kDSPI_MasterCtar7 = 7U << DSPI_MASTER_CTAR_SHIFT, /*!< DSPI master transfer use CTAR7 setting. 
 215:../drivers/fsl_dspi.h **** 
 216:../drivers/fsl_dspi.h ****     kDSPI_MasterPcs0 = 0U << DSPI_MASTER_PCS_SHIFT, /*!< DSPI master transfer use PCS0 signal. */
 217:../drivers/fsl_dspi.h ****     kDSPI_MasterPcs1 = 1U << DSPI_MASTER_PCS_SHIFT, /*!< DSPI master transfer use PCS1 signal. */
 218:../drivers/fsl_dspi.h ****     kDSPI_MasterPcs2 = 2U << DSPI_MASTER_PCS_SHIFT, /*!< DSPI master transfer use PCS2 signal.*/
 219:../drivers/fsl_dspi.h ****     kDSPI_MasterPcs3 = 3U << DSPI_MASTER_PCS_SHIFT, /*!< DSPI master transfer use PCS3 signal. */
 220:../drivers/fsl_dspi.h ****     kDSPI_MasterPcs4 = 4U << DSPI_MASTER_PCS_SHIFT, /*!< DSPI master transfer use PCS4 signal. */
 221:../drivers/fsl_dspi.h ****     kDSPI_MasterPcs5 = 5U << DSPI_MASTER_PCS_SHIFT, /*!< DSPI master transfer use PCS5 signal. */
 222:../drivers/fsl_dspi.h **** 
 223:../drivers/fsl_dspi.h ****     kDSPI_MasterPcsContinuous = 1U << 20, /*!< Indicates whether the PCS signal is continuous. */
 224:../drivers/fsl_dspi.h ****     kDSPI_MasterActiveAfterTransfer =
 225:../drivers/fsl_dspi.h ****         1U << 21, /*!< Indicates whether the PCS signal is active after the last frame transfer.*/
 226:../drivers/fsl_dspi.h **** };
 227:../drivers/fsl_dspi.h **** 
 228:../drivers/fsl_dspi.h **** #define DSPI_SLAVE_CTAR_SHIFT (0U)   /*!< DSPI slave CTAR shift macro; used internally. */
 229:../drivers/fsl_dspi.h **** #define DSPI_SLAVE_CTAR_MASK (0x07U) /*!< DSPI slave CTAR mask macro; used internally. */
 230:../drivers/fsl_dspi.h **** /*! @brief Use this enumeration for the DSPI slave transfer configFlags. */
 231:../drivers/fsl_dspi.h **** enum _dspi_transfer_config_flag_for_slave
 232:../drivers/fsl_dspi.h **** {
 233:../drivers/fsl_dspi.h ****     kDSPI_SlaveCtar0 = 0U << DSPI_SLAVE_CTAR_SHIFT, /*!< DSPI slave transfer use CTAR0 setting. */
 234:../drivers/fsl_dspi.h ****                                                     /*!< DSPI slave can only use PCS0. */
 235:../drivers/fsl_dspi.h **** };
 236:../drivers/fsl_dspi.h **** 
 237:../drivers/fsl_dspi.h **** /*! @brief DSPI transfer state, which is used for DSPI transactional API state machine. */
 238:../drivers/fsl_dspi.h **** enum _dspi_transfer_state
 239:../drivers/fsl_dspi.h **** {
 240:../drivers/fsl_dspi.h ****     kDSPI_Idle = 0x0U, /*!< Nothing in the transmitter/receiver. */
 241:../drivers/fsl_dspi.h ****     kDSPI_Busy,        /*!< Transfer queue is not finished. */
 242:../drivers/fsl_dspi.h ****     kDSPI_Error        /*!< Transfer error. */
 243:../drivers/fsl_dspi.h **** };
 244:../drivers/fsl_dspi.h **** 
 245:../drivers/fsl_dspi.h **** /*! @brief DSPI master command date configuration used for the SPIx_PUSHR.*/
 246:../drivers/fsl_dspi.h **** typedef struct _dspi_command_data_config
 247:../drivers/fsl_dspi.h **** {
 248:../drivers/fsl_dspi.h ****     bool isPcsContinuous; /*!< Option to enable the continuous assertion of the chip select between
 249:../drivers/fsl_dspi.h ****     dspi_ctar_selection_t whichCtar; /*!< The desired Clock and Transfer Attributes
 250:../drivers/fsl_dspi.h ****                                           Register (CTAR) to use for CTAS.*/
 251:../drivers/fsl_dspi.h ****     dspi_which_pcs_t whichPcs;       /*!< The desired PCS signal to use for the data transfer.*/
 252:../drivers/fsl_dspi.h ****     bool isEndOfQueue;               /*!< Signals that the current transfer is the last in the queu
 253:../drivers/fsl_dspi.h ****     bool clearTransferCount;         /*!< Clears the SPI Transfer Counter (SPI_TCNT) before transmi
 254:../drivers/fsl_dspi.h **** } dspi_command_data_config_t;
 255:../drivers/fsl_dspi.h **** 
 256:../drivers/fsl_dspi.h **** /*! @brief DSPI master ctar configuration structure.*/
 257:../drivers/fsl_dspi.h **** typedef struct _dspi_master_ctar_config
 258:../drivers/fsl_dspi.h **** {
 259:../drivers/fsl_dspi.h ****     uint32_t baudRate;                /*!< Baud Rate for DSPI. */
 260:../drivers/fsl_dspi.h ****     uint32_t bitsPerFrame;            /*!< Bits per frame, minimum 4, maximum 16.*/
 261:../drivers/fsl_dspi.h ****     dspi_clock_polarity_t cpol;       /*!< Clock polarity. */
 262:../drivers/fsl_dspi.h ****     dspi_clock_phase_t cpha;          /*!< Clock phase. */
 263:../drivers/fsl_dspi.h ****     dspi_shift_direction_t direction; /*!< MSB or LSB data shift direction. */
 264:../drivers/fsl_dspi.h **** 
 265:../drivers/fsl_dspi.h ****     uint32_t pcsToSckDelayInNanoSec;     /*!< PCS to SCK delay time in nanoseconds; setting to 0 se
 266:../drivers/fsl_dspi.h ****                                             delay. It also sets the boundary value if out of range.
 267:../drivers/fsl_dspi.h ****     uint32_t lastSckToPcsDelayInNanoSec; /*!< The last SCK to PCS delay time in nanoseconds; settin
 268:../drivers/fsl_dspi.h ****                                             minimum delay. It also sets the boundary value if out o
 269:../drivers/fsl_dspi.h **** 
 270:../drivers/fsl_dspi.h ****     uint32_t betweenTransferDelayInNanoSec; /*!< After the SCK delay time in nanoseconds; setting t
 271:../drivers/fsl_dspi.h ****                                              delay. It also sets the boundary value if out of range
 272:../drivers/fsl_dspi.h **** } dspi_master_ctar_config_t;
 273:../drivers/fsl_dspi.h **** 
 274:../drivers/fsl_dspi.h **** /*! @brief DSPI master configuration structure.*/
 275:../drivers/fsl_dspi.h **** typedef struct _dspi_master_config
 276:../drivers/fsl_dspi.h **** {
 277:../drivers/fsl_dspi.h ****     dspi_ctar_selection_t whichCtar;      /*!< The desired CTAR to use. */
 278:../drivers/fsl_dspi.h ****     dspi_master_ctar_config_t ctarConfig; /*!< Set the ctarConfig to the desired CTAR. */
 279:../drivers/fsl_dspi.h **** 
 280:../drivers/fsl_dspi.h ****     dspi_which_pcs_t whichPcs;                     /*!< The desired Peripheral Chip Select (pcs). *
 281:../drivers/fsl_dspi.h ****     dspi_pcs_polarity_config_t pcsActiveHighOrLow; /*!< The desired PCS active high or low. */
 282:../drivers/fsl_dspi.h **** 
 283:../drivers/fsl_dspi.h ****     bool enableContinuousSCK;   /*!< CONT_SCKE, continuous SCK enable. Note that the continuous SCK
 284:../drivers/fsl_dspi.h ****                                      supported for CPHA = 1.*/
 285:../drivers/fsl_dspi.h ****     bool enableRxFifoOverWrite; /*!< ROOE, receive FIFO overflow overwrite enable. If ROOE = 0, the
 286:../drivers/fsl_dspi.h ****                                      data is ignored and the data from the transfer that generated 
 287:../drivers/fsl_dspi.h ****                                      is also ignored. If ROOE = 1, the incoming data is shifted to 
 288:../drivers/fsl_dspi.h ****                                      shift register. */
 289:../drivers/fsl_dspi.h **** 
 290:../drivers/fsl_dspi.h ****     bool enableModifiedTimingFormat;        /*!< Enables a modified transfer format to be used if t
 291:../drivers/fsl_dspi.h ****     dspi_master_sample_point_t samplePoint; /*!< Controls when the module master samples SIN in the
 292:../drivers/fsl_dspi.h ****                                                  Format. It's valid only when CPHA=0. */
 293:../drivers/fsl_dspi.h **** } dspi_master_config_t;
 294:../drivers/fsl_dspi.h **** 
 295:../drivers/fsl_dspi.h **** /*! @brief DSPI slave ctar configuration structure.*/
 296:../drivers/fsl_dspi.h **** typedef struct _dspi_slave_ctar_config
 297:../drivers/fsl_dspi.h **** {
 298:../drivers/fsl_dspi.h ****     uint32_t bitsPerFrame;      /*!< Bits per frame, minimum 4, maximum 16.*/
 299:../drivers/fsl_dspi.h ****     dspi_clock_polarity_t cpol; /*!< Clock polarity. */
 300:../drivers/fsl_dspi.h ****     dspi_clock_phase_t cpha;    /*!< Clock phase. */
 301:../drivers/fsl_dspi.h ****                                 /*!< Slave only supports MSB and does not support LSB.*/
 302:../drivers/fsl_dspi.h **** } dspi_slave_ctar_config_t;
 303:../drivers/fsl_dspi.h **** 
 304:../drivers/fsl_dspi.h **** /*! @brief DSPI slave configuration structure.*/
 305:../drivers/fsl_dspi.h **** typedef struct _dspi_slave_config
 306:../drivers/fsl_dspi.h **** {
 307:../drivers/fsl_dspi.h ****     dspi_ctar_selection_t whichCtar;     /*!< The desired CTAR to use. */
 308:../drivers/fsl_dspi.h ****     dspi_slave_ctar_config_t ctarConfig; /*!< Set the ctarConfig to the desired CTAR. */
 309:../drivers/fsl_dspi.h **** 
 310:../drivers/fsl_dspi.h ****     bool enableContinuousSCK;               /*!< CONT_SCKE, continuous SCK enable. Note that the co
 311:../drivers/fsl_dspi.h ****                                                  supported for CPHA = 1.*/
 312:../drivers/fsl_dspi.h ****     bool enableRxFifoOverWrite;             /*!< ROOE, receive FIFO overflow overwrite enable. If R
 313:../drivers/fsl_dspi.h ****                                                  data is ignored and the data from the transfer tha
 314:../drivers/fsl_dspi.h ****                                                  is also ignored. If ROOE = 1, the incoming data is
 315:../drivers/fsl_dspi.h ****                                                  shift register. */
 316:../drivers/fsl_dspi.h ****     bool enableModifiedTimingFormat;        /*!< Enables a modified transfer format to be used if t
 317:../drivers/fsl_dspi.h ****     dspi_master_sample_point_t samplePoint; /*!< Controls when the module master samples SIN in the
 318:../drivers/fsl_dspi.h ****                                                Format. It's valid only when CPHA=0. */
 319:../drivers/fsl_dspi.h **** } dspi_slave_config_t;
 320:../drivers/fsl_dspi.h **** 
 321:../drivers/fsl_dspi.h **** /*!
 322:../drivers/fsl_dspi.h **** * @brief Forward declaration of the _dspi_master_handle typedefs.
 323:../drivers/fsl_dspi.h **** */
 324:../drivers/fsl_dspi.h **** typedef struct _dspi_master_handle dspi_master_handle_t;
 325:../drivers/fsl_dspi.h **** 
 326:../drivers/fsl_dspi.h **** /*!
 327:../drivers/fsl_dspi.h **** * @brief Forward declaration of the _dspi_slave_handle typedefs.
 328:../drivers/fsl_dspi.h **** */
 329:../drivers/fsl_dspi.h **** typedef struct _dspi_slave_handle dspi_slave_handle_t;
 330:../drivers/fsl_dspi.h **** 
 331:../drivers/fsl_dspi.h **** /*!
 332:../drivers/fsl_dspi.h ****  * @brief Completion callback function pointer type.
 333:../drivers/fsl_dspi.h ****  *
 334:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 335:../drivers/fsl_dspi.h ****  * @param handle Pointer to the handle for the DSPI master.
 336:../drivers/fsl_dspi.h ****  * @param status Success or error code describing whether the transfer completed.
 337:../drivers/fsl_dspi.h ****  * @param userData Arbitrary pointer-dataSized value passed from the application.
 338:../drivers/fsl_dspi.h ****  */
 339:../drivers/fsl_dspi.h **** typedef void (*dspi_master_transfer_callback_t)(SPI_Type *base,
 340:../drivers/fsl_dspi.h ****                                                 dspi_master_handle_t *handle,
 341:../drivers/fsl_dspi.h ****                                                 status_t status,
 342:../drivers/fsl_dspi.h ****                                                 void *userData);
 343:../drivers/fsl_dspi.h **** /*!
 344:../drivers/fsl_dspi.h ****  * @brief Completion callback function pointer type.
 345:../drivers/fsl_dspi.h ****  *
 346:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 347:../drivers/fsl_dspi.h ****  * @param handle Pointer to the handle for the DSPI slave.
 348:../drivers/fsl_dspi.h ****  * @param status Success or error code describing whether the transfer completed.
 349:../drivers/fsl_dspi.h ****  * @param userData Arbitrary pointer-dataSized value passed from the application.
 350:../drivers/fsl_dspi.h ****  */
 351:../drivers/fsl_dspi.h **** typedef void (*dspi_slave_transfer_callback_t)(SPI_Type *base,
 352:../drivers/fsl_dspi.h ****                                                dspi_slave_handle_t *handle,
 353:../drivers/fsl_dspi.h ****                                                status_t status,
 354:../drivers/fsl_dspi.h ****                                                void *userData);
 355:../drivers/fsl_dspi.h **** 
 356:../drivers/fsl_dspi.h **** /*! @brief DSPI master/slave transfer structure.*/
 357:../drivers/fsl_dspi.h **** typedef struct _dspi_transfer
 358:../drivers/fsl_dspi.h **** {
 359:../drivers/fsl_dspi.h ****     uint8_t *txData;          /*!< Send buffer. */
 360:../drivers/fsl_dspi.h ****     uint8_t *rxData;          /*!< Receive buffer. */
 361:../drivers/fsl_dspi.h ****     volatile size_t dataSize; /*!< Transfer bytes. */
 362:../drivers/fsl_dspi.h **** 
 363:../drivers/fsl_dspi.h ****     uint32_t
 364:../drivers/fsl_dspi.h ****         configFlags; /*!< Transfer transfer configuration flags; set from _dspi_transfer_config_fla
 365:../drivers/fsl_dspi.h ****                         transfer is used for master or _dspi_transfer_config_flag_for_slave enumera
 366:../drivers/fsl_dspi.h ****                         is used for slave.*/
 367:../drivers/fsl_dspi.h **** } dspi_transfer_t;
 368:../drivers/fsl_dspi.h **** 
 369:../drivers/fsl_dspi.h **** /*! @brief DSPI half-duplex(master) transfer structure */
 370:../drivers/fsl_dspi.h **** typedef struct _dspi_half_duplex_transfer
 371:../drivers/fsl_dspi.h **** {
 372:../drivers/fsl_dspi.h ****     uint8_t *txData;            /*!< Send buffer */
 373:../drivers/fsl_dspi.h ****     uint8_t *rxData;            /*!< Receive buffer */
 374:../drivers/fsl_dspi.h ****     size_t txDataSize;          /*!< Transfer bytes for transmit */
 375:../drivers/fsl_dspi.h ****     size_t rxDataSize;          /*!< Transfer bytes */
 376:../drivers/fsl_dspi.h ****     uint32_t configFlags;       /*!< Transfer configuration flags; set from _dspi_transfer_config_f
 377:../drivers/fsl_dspi.h ****     bool isPcsAssertInTransfer; /*!< If Pcs pin keep assert between transmit and receive. true for 
 378:../drivers/fsl_dspi.h ****                                    deassert. */
 379:../drivers/fsl_dspi.h ****     bool isTransmitFirst;       /*!< True for transmit first and false for receive first. */
 380:../drivers/fsl_dspi.h **** } dspi_half_duplex_transfer_t;
 381:../drivers/fsl_dspi.h **** 
 382:../drivers/fsl_dspi.h **** /*! @brief DSPI master transfer handle structure used for transactional API. */
 383:../drivers/fsl_dspi.h **** struct _dspi_master_handle
 384:../drivers/fsl_dspi.h **** {
 385:../drivers/fsl_dspi.h ****     uint32_t bitsPerFrame;         /*!< The desired number of bits per frame. */
 386:../drivers/fsl_dspi.h ****     volatile uint32_t command;     /*!< The desired data command. */
 387:../drivers/fsl_dspi.h ****     volatile uint32_t lastCommand; /*!< The desired last data command. */
 388:../drivers/fsl_dspi.h **** 
 389:../drivers/fsl_dspi.h ****     uint8_t fifoSize; /*!< FIFO dataSize. */
 390:../drivers/fsl_dspi.h **** 
 391:../drivers/fsl_dspi.h ****     volatile bool
 392:../drivers/fsl_dspi.h ****         isPcsActiveAfterTransfer;   /*!< Indicates whether the PCS signal is active after the last 
 393:../drivers/fsl_dspi.h ****     volatile bool isThereExtraByte; /*!< Indicates whether there are extra bytes.*/
 394:../drivers/fsl_dspi.h **** 
 395:../drivers/fsl_dspi.h ****     uint8_t *volatile txData;                  /*!< Send buffer. */
 396:../drivers/fsl_dspi.h ****     uint8_t *volatile rxData;                  /*!< Receive buffer. */
 397:../drivers/fsl_dspi.h ****     volatile size_t remainingSendByteCount;    /*!< A number of bytes remaining to send.*/
 398:../drivers/fsl_dspi.h ****     volatile size_t remainingReceiveByteCount; /*!< A number of bytes remaining to receive.*/
 399:../drivers/fsl_dspi.h ****     size_t totalByteCount;                     /*!< A number of transfer bytes*/
 400:../drivers/fsl_dspi.h **** 
 401:../drivers/fsl_dspi.h ****     volatile uint8_t state; /*!< DSPI transfer state, see _dspi_transfer_state.*/
 402:../drivers/fsl_dspi.h **** 
 403:../drivers/fsl_dspi.h ****     dspi_master_transfer_callback_t callback; /*!< Completion callback. */
 404:../drivers/fsl_dspi.h ****     void *userData;                           /*!< Callback user data. */
 405:../drivers/fsl_dspi.h **** };
 406:../drivers/fsl_dspi.h **** 
 407:../drivers/fsl_dspi.h **** /*! @brief DSPI slave transfer handle structure used for the transactional API. */
 408:../drivers/fsl_dspi.h **** struct _dspi_slave_handle
 409:../drivers/fsl_dspi.h **** {
 410:../drivers/fsl_dspi.h ****     uint32_t bitsPerFrame;          /*!< The desired number of bits per frame. */
 411:../drivers/fsl_dspi.h ****     volatile bool isThereExtraByte; /*!< Indicates whether there are extra bytes.*/
 412:../drivers/fsl_dspi.h **** 
 413:../drivers/fsl_dspi.h ****     uint8_t *volatile txData;                  /*!< Send buffer. */
 414:../drivers/fsl_dspi.h ****     uint8_t *volatile rxData;                  /*!< Receive buffer. */
 415:../drivers/fsl_dspi.h ****     volatile size_t remainingSendByteCount;    /*!< A number of bytes remaining to send.*/
 416:../drivers/fsl_dspi.h ****     volatile size_t remainingReceiveByteCount; /*!< A number of bytes remaining to receive.*/
 417:../drivers/fsl_dspi.h ****     size_t totalByteCount;                     /*!< A number of transfer bytes*/
 418:../drivers/fsl_dspi.h **** 
 419:../drivers/fsl_dspi.h ****     volatile uint8_t state; /*!< DSPI transfer state.*/
 420:../drivers/fsl_dspi.h **** 
 421:../drivers/fsl_dspi.h ****     volatile uint32_t errorCount; /*!< Error count for slave transfer.*/
 422:../drivers/fsl_dspi.h **** 
 423:../drivers/fsl_dspi.h ****     dspi_slave_transfer_callback_t callback; /*!< Completion callback. */
 424:../drivers/fsl_dspi.h ****     void *userData;                          /*!< Callback user data. */
 425:../drivers/fsl_dspi.h **** };
 426:../drivers/fsl_dspi.h **** 
 427:../drivers/fsl_dspi.h **** /**************************************************************************************************
 428:../drivers/fsl_dspi.h ****  * API
 429:../drivers/fsl_dspi.h ****  **************************************************************************************************
 430:../drivers/fsl_dspi.h **** #if defined(__cplusplus)
 431:../drivers/fsl_dspi.h **** extern "C" {
 432:../drivers/fsl_dspi.h **** #endif /*_cplusplus*/
 433:../drivers/fsl_dspi.h **** 
 434:../drivers/fsl_dspi.h **** /*!
 435:../drivers/fsl_dspi.h ****  * @name Initialization and deinitialization
 436:../drivers/fsl_dspi.h ****  * @{
 437:../drivers/fsl_dspi.h ****  */
 438:../drivers/fsl_dspi.h **** 
 439:../drivers/fsl_dspi.h **** /*!
 440:../drivers/fsl_dspi.h ****  * @brief Initializes the DSPI master.
 441:../drivers/fsl_dspi.h ****  *
 442:../drivers/fsl_dspi.h ****  * This function initializes the DSPI master configuration. This is an example use case.
 443:../drivers/fsl_dspi.h ****  *  @code
 444:../drivers/fsl_dspi.h ****  *   dspi_master_config_t  masterConfig;
 445:../drivers/fsl_dspi.h ****  *   masterConfig.whichCtar                                = kDSPI_Ctar0;
 446:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.baudRate                      = 500000000U;
 447:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.bitsPerFrame                  = 8;
 448:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.cpol                          = kDSPI_ClockPolarityActiveHigh;
 449:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.cpha                          = kDSPI_ClockPhaseFirstEdge;
 450:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.direction                     = kDSPI_MsbFirst;
 451:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.pcsToSckDelayInNanoSec        = 1000000000U / masterConfig.ctarConfig.
 452:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.lastSckToPcsDelayInNanoSec    = 1000000000U / masterConfig.ctarConfig.
 453:../drivers/fsl_dspi.h ****  *   masterConfig.ctarConfig.betweenTransferDelayInNanoSec = 1000000000U / masterConfig.ctarConfig.
 454:../drivers/fsl_dspi.h ****  *   masterConfig.whichPcs                                 = kDSPI_Pcs0;
 455:../drivers/fsl_dspi.h ****  *   masterConfig.pcsActiveHighOrLow                       = kDSPI_PcsActiveLow;
 456:../drivers/fsl_dspi.h ****  *   masterConfig.enableContinuousSCK                      = false;
 457:../drivers/fsl_dspi.h ****  *   masterConfig.enableRxFifoOverWrite                    = false;
 458:../drivers/fsl_dspi.h ****  *   masterConfig.enableModifiedTimingFormat               = false;
 459:../drivers/fsl_dspi.h ****  *   masterConfig.samplePoint                              = kDSPI_SckToSin0Clock;
 460:../drivers/fsl_dspi.h ****  *   DSPI_MasterInit(base, &masterConfig, srcClock_Hz);
 461:../drivers/fsl_dspi.h ****  *  @endcode
 462:../drivers/fsl_dspi.h ****  *
 463:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 464:../drivers/fsl_dspi.h ****  * @param masterConfig Pointer to the structure dspi_master_config_t.
 465:../drivers/fsl_dspi.h ****  * @param srcClock_Hz Module source input clock in Hertz.
 466:../drivers/fsl_dspi.h ****  */
 467:../drivers/fsl_dspi.h **** void DSPI_MasterInit(SPI_Type *base, const dspi_master_config_t *masterConfig, uint32_t srcClock_Hz
 468:../drivers/fsl_dspi.h **** 
 469:../drivers/fsl_dspi.h **** /*!
 470:../drivers/fsl_dspi.h ****  * @brief Sets the dspi_master_config_t structure to default values.
 471:../drivers/fsl_dspi.h ****  *
 472:../drivers/fsl_dspi.h ****  * The purpose of this API is to get the configuration structure initialized for the DSPI_MasterIni
 473:../drivers/fsl_dspi.h ****  * Users may use the initialized structure unchanged in the DSPI_MasterInit() or modify the structu
 474:../drivers/fsl_dspi.h ****  * before calling the DSPI_MasterInit().
 475:../drivers/fsl_dspi.h ****  * Example:
 476:../drivers/fsl_dspi.h ****  * @code
 477:../drivers/fsl_dspi.h ****  *  dspi_master_config_t  masterConfig;
 478:../drivers/fsl_dspi.h ****  *  DSPI_MasterGetDefaultConfig(&masterConfig);
 479:../drivers/fsl_dspi.h ****  * @endcode
 480:../drivers/fsl_dspi.h ****  * @param masterConfig pointer to dspi_master_config_t structure
 481:../drivers/fsl_dspi.h ****  */
 482:../drivers/fsl_dspi.h **** void DSPI_MasterGetDefaultConfig(dspi_master_config_t *masterConfig);
 483:../drivers/fsl_dspi.h **** 
 484:../drivers/fsl_dspi.h **** /*!
 485:../drivers/fsl_dspi.h ****  * @brief DSPI slave configuration.
 486:../drivers/fsl_dspi.h ****  *
 487:../drivers/fsl_dspi.h ****  * This function initializes the DSPI slave configuration. This is an example use case.
 488:../drivers/fsl_dspi.h ****  *  @code
 489:../drivers/fsl_dspi.h ****  *   dspi_slave_config_t  slaveConfig;
 490:../drivers/fsl_dspi.h ****  *  slaveConfig->whichCtar                  = kDSPI_Ctar0;
 491:../drivers/fsl_dspi.h ****  *  slaveConfig->ctarConfig.bitsPerFrame    = 8;
 492:../drivers/fsl_dspi.h ****  *  slaveConfig->ctarConfig.cpol            = kDSPI_ClockPolarityActiveHigh;
 493:../drivers/fsl_dspi.h ****  *  slaveConfig->ctarConfig.cpha            = kDSPI_ClockPhaseFirstEdge;
 494:../drivers/fsl_dspi.h ****  *  slaveConfig->enableContinuousSCK        = false;
 495:../drivers/fsl_dspi.h ****  *  slaveConfig->enableRxFifoOverWrite      = false;
 496:../drivers/fsl_dspi.h ****  *  slaveConfig->enableModifiedTimingFormat = false;
 497:../drivers/fsl_dspi.h ****  *  slaveConfig->samplePoint                = kDSPI_SckToSin0Clock;
 498:../drivers/fsl_dspi.h ****  *   DSPI_SlaveInit(base, &slaveConfig);
 499:../drivers/fsl_dspi.h ****  *  @endcode
 500:../drivers/fsl_dspi.h ****  *
 501:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 502:../drivers/fsl_dspi.h ****  * @param slaveConfig Pointer to the structure dspi_master_config_t.
 503:../drivers/fsl_dspi.h ****  */
 504:../drivers/fsl_dspi.h **** void DSPI_SlaveInit(SPI_Type *base, const dspi_slave_config_t *slaveConfig);
 505:../drivers/fsl_dspi.h **** 
 506:../drivers/fsl_dspi.h **** /*!
 507:../drivers/fsl_dspi.h ****  * @brief Sets the dspi_slave_config_t structure to a default value.
 508:../drivers/fsl_dspi.h ****  *
 509:../drivers/fsl_dspi.h ****  * The purpose of this API is to get the configuration structure initialized for the DSPI_SlaveInit
 510:../drivers/fsl_dspi.h ****  * Users may use the initialized structure unchanged in the DSPI_SlaveInit() or modify the structur
 511:../drivers/fsl_dspi.h ****  * before calling the DSPI_SlaveInit().
 512:../drivers/fsl_dspi.h ****  * This is an example.
 513:../drivers/fsl_dspi.h ****  * @code
 514:../drivers/fsl_dspi.h ****  *  dspi_slave_config_t  slaveConfig;
 515:../drivers/fsl_dspi.h ****  *  DSPI_SlaveGetDefaultConfig(&slaveConfig);
 516:../drivers/fsl_dspi.h ****  * @endcode
 517:../drivers/fsl_dspi.h ****  * @param slaveConfig Pointer to the dspi_slave_config_t structure.
 518:../drivers/fsl_dspi.h ****  */
 519:../drivers/fsl_dspi.h **** void DSPI_SlaveGetDefaultConfig(dspi_slave_config_t *slaveConfig);
 520:../drivers/fsl_dspi.h **** 
 521:../drivers/fsl_dspi.h **** /*!
 522:../drivers/fsl_dspi.h ****  * @brief De-initializes the DSPI peripheral. Call this API to disable the DSPI clock.
 523:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 524:../drivers/fsl_dspi.h ****  */
 525:../drivers/fsl_dspi.h **** void DSPI_Deinit(SPI_Type *base);
 526:../drivers/fsl_dspi.h **** 
 527:../drivers/fsl_dspi.h **** /*!
 528:../drivers/fsl_dspi.h ****  * @brief Enables the DSPI peripheral and sets the MCR MDIS to 0.
 529:../drivers/fsl_dspi.h ****  *
 530:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 531:../drivers/fsl_dspi.h ****  * @param enable Pass true to enable module, false to disable module.
 532:../drivers/fsl_dspi.h ****  */
 533:../drivers/fsl_dspi.h **** static inline void DSPI_Enable(SPI_Type *base, bool enable)
 534:../drivers/fsl_dspi.h **** {
 535:../drivers/fsl_dspi.h ****     if (enable)
 536:../drivers/fsl_dspi.h ****     {
 537:../drivers/fsl_dspi.h ****         base->MCR &= ~SPI_MCR_MDIS_MASK;
 538:../drivers/fsl_dspi.h ****     }
 539:../drivers/fsl_dspi.h ****     else
 540:../drivers/fsl_dspi.h ****     {
 541:../drivers/fsl_dspi.h ****         base->MCR |= SPI_MCR_MDIS_MASK;
 542:../drivers/fsl_dspi.h ****     }
 543:../drivers/fsl_dspi.h **** }
 544:../drivers/fsl_dspi.h **** 
 545:../drivers/fsl_dspi.h **** /*!
 546:../drivers/fsl_dspi.h ****  *@}
 547:../drivers/fsl_dspi.h **** */
 548:../drivers/fsl_dspi.h **** 
 549:../drivers/fsl_dspi.h **** /*!
 550:../drivers/fsl_dspi.h ****  * @name Status
 551:../drivers/fsl_dspi.h ****  * @{
 552:../drivers/fsl_dspi.h ****  */
 553:../drivers/fsl_dspi.h **** 
 554:../drivers/fsl_dspi.h **** /*!
 555:../drivers/fsl_dspi.h ****  * @brief Gets the DSPI status flag state.
 556:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 557:../drivers/fsl_dspi.h ****  * @return DSPI status (in SR register).
 558:../drivers/fsl_dspi.h ****  */
 559:../drivers/fsl_dspi.h **** static inline uint32_t DSPI_GetStatusFlags(SPI_Type *base)
 560:../drivers/fsl_dspi.h **** {
 561:../drivers/fsl_dspi.h ****     return (base->SR);
 562:../drivers/fsl_dspi.h **** }
 563:../drivers/fsl_dspi.h **** 
 564:../drivers/fsl_dspi.h **** /*!
 565:../drivers/fsl_dspi.h ****  * @brief Clears the DSPI status flag.
 566:../drivers/fsl_dspi.h ****  *
 567:../drivers/fsl_dspi.h ****  * This function  clears the desired status bit by using a write-1-to-clear. The user passes in the
 568:../drivers/fsl_dspi.h ****  * desired status bit to clear.  The list of status bits is defined in the dspi_status_and_interrup
 569:../drivers/fsl_dspi.h ****  * function uses these bit positions in its algorithm to clear the desired flag state.
 570:../drivers/fsl_dspi.h ****  * This is an example.
 571:../drivers/fsl_dspi.h ****  * @code
 572:../drivers/fsl_dspi.h ****  *  DSPI_ClearStatusFlags(base, kDSPI_TxCompleteFlag|kDSPI_EndOfQueueFlag);
 573:../drivers/fsl_dspi.h ****  * @endcode
 574:../drivers/fsl_dspi.h ****  *
 575:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 576:../drivers/fsl_dspi.h ****  * @param statusFlags The status flag used from the type dspi_flags.
 577:../drivers/fsl_dspi.h ****  */
 578:../drivers/fsl_dspi.h **** static inline void DSPI_ClearStatusFlags(SPI_Type *base, uint32_t statusFlags)
 579:../drivers/fsl_dspi.h **** {
 580:../drivers/fsl_dspi.h ****     base->SR = statusFlags; /*!< The status flags are cleared by writing 1 (w1c).*/
 581:../drivers/fsl_dspi.h **** }
 582:../drivers/fsl_dspi.h **** 
 583:../drivers/fsl_dspi.h **** /*!
 584:../drivers/fsl_dspi.h ****  *@}
 585:../drivers/fsl_dspi.h **** */
 586:../drivers/fsl_dspi.h **** 
 587:../drivers/fsl_dspi.h **** /*!
 588:../drivers/fsl_dspi.h ****  * @name Interrupts
 589:../drivers/fsl_dspi.h ****  * @{
 590:../drivers/fsl_dspi.h ****  */
 591:../drivers/fsl_dspi.h **** 
 592:../drivers/fsl_dspi.h **** /*!
 593:../drivers/fsl_dspi.h ****  * @brief Enables the DSPI interrupts.
 594:../drivers/fsl_dspi.h ****  *
 595:../drivers/fsl_dspi.h ****  * This function configures the various interrupt masks of the DSPI.  The parameters are a base and
 596:../drivers/fsl_dspi.h ****  * Note, for Tx Fill and Rx FIFO drain requests, enable the interrupt request and disable the DMA r
 597:../drivers/fsl_dspi.h ****  *       Do not use this API(write to RSER register) while DSPI is in running state.
 598:../drivers/fsl_dspi.h ****  *
 599:../drivers/fsl_dspi.h ****  * @code
 600:../drivers/fsl_dspi.h ****  *  DSPI_EnableInterrupts(base, kDSPI_TxCompleteInterruptEnable | kDSPI_EndOfQueueInterruptEnable )
 601:../drivers/fsl_dspi.h ****  * @endcode
 602:../drivers/fsl_dspi.h ****  *
 603:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 604:../drivers/fsl_dspi.h ****  * @param mask The interrupt mask; use the enum _dspi_interrupt_enable.
 605:../drivers/fsl_dspi.h ****  */
 606:../drivers/fsl_dspi.h **** void DSPI_EnableInterrupts(SPI_Type *base, uint32_t mask);
 607:../drivers/fsl_dspi.h **** 
 608:../drivers/fsl_dspi.h **** /*!
 609:../drivers/fsl_dspi.h ****  * @brief Disables the DSPI interrupts.
 610:../drivers/fsl_dspi.h ****  *
 611:../drivers/fsl_dspi.h ****  * @code
 612:../drivers/fsl_dspi.h ****  *  DSPI_DisableInterrupts(base, kDSPI_TxCompleteInterruptEnable | kDSPI_EndOfQueueInterruptEnable 
 613:../drivers/fsl_dspi.h ****  * @endcode
 614:../drivers/fsl_dspi.h ****  *
 615:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 616:../drivers/fsl_dspi.h ****  * @param mask The interrupt mask; use the enum _dspi_interrupt_enable.
 617:../drivers/fsl_dspi.h ****  */
 618:../drivers/fsl_dspi.h **** static inline void DSPI_DisableInterrupts(SPI_Type *base, uint32_t mask)
 619:../drivers/fsl_dspi.h **** {
 620:../drivers/fsl_dspi.h ****     base->RSER &= ~mask;
 621:../drivers/fsl_dspi.h **** }
 622:../drivers/fsl_dspi.h **** 
 623:../drivers/fsl_dspi.h **** /*!
 624:../drivers/fsl_dspi.h ****  *@}
 625:../drivers/fsl_dspi.h **** */
 626:../drivers/fsl_dspi.h **** 
 627:../drivers/fsl_dspi.h **** /*!
 628:../drivers/fsl_dspi.h ****  * @name DMA Control
 629:../drivers/fsl_dspi.h ****  * @{
 630:../drivers/fsl_dspi.h ****  */
 631:../drivers/fsl_dspi.h **** 
 632:../drivers/fsl_dspi.h **** /*!
 633:../drivers/fsl_dspi.h ****  * @brief Enables the DSPI DMA request.
 634:../drivers/fsl_dspi.h ****  *
 635:../drivers/fsl_dspi.h ****  * This function configures the Rx and Tx DMA mask of the DSPI.  The parameters are a base and a DM
 636:../drivers/fsl_dspi.h ****  * @code
 637:../drivers/fsl_dspi.h ****  *  DSPI_EnableDMA(base, kDSPI_TxDmaEnable | kDSPI_RxDmaEnable);
 638:../drivers/fsl_dspi.h ****  * @endcode
 639:../drivers/fsl_dspi.h ****  *
 640:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 641:../drivers/fsl_dspi.h ****  * @param mask The interrupt mask; use the enum dspi_dma_enable.
 642:../drivers/fsl_dspi.h ****  */
 643:../drivers/fsl_dspi.h **** static inline void DSPI_EnableDMA(SPI_Type *base, uint32_t mask)
 644:../drivers/fsl_dspi.h **** {
 645:../drivers/fsl_dspi.h ****     base->RSER |= mask;
 646:../drivers/fsl_dspi.h **** }
 647:../drivers/fsl_dspi.h **** 
 648:../drivers/fsl_dspi.h **** /*!
 649:../drivers/fsl_dspi.h ****  * @brief Disables the DSPI DMA request.
 650:../drivers/fsl_dspi.h ****  *
 651:../drivers/fsl_dspi.h ****  * This function configures the Rx and Tx DMA mask of the DSPI.  The parameters are a base and a DM
 652:../drivers/fsl_dspi.h ****  * @code
 653:../drivers/fsl_dspi.h ****  *  SPI_DisableDMA(base, kDSPI_TxDmaEnable | kDSPI_RxDmaEnable);
 654:../drivers/fsl_dspi.h ****  * @endcode
 655:../drivers/fsl_dspi.h ****  *
 656:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 657:../drivers/fsl_dspi.h ****  * @param mask The interrupt mask; use the enum dspi_dma_enable.
 658:../drivers/fsl_dspi.h ****  */
 659:../drivers/fsl_dspi.h **** static inline void DSPI_DisableDMA(SPI_Type *base, uint32_t mask)
 660:../drivers/fsl_dspi.h **** {
 661:../drivers/fsl_dspi.h ****     base->RSER &= ~mask;
 662:../drivers/fsl_dspi.h **** }
 663:../drivers/fsl_dspi.h **** 
 664:../drivers/fsl_dspi.h **** /*!
 665:../drivers/fsl_dspi.h ****  * @brief Gets the DSPI master PUSHR data register address for the DMA operation.
 666:../drivers/fsl_dspi.h ****  *
 667:../drivers/fsl_dspi.h ****  * This function gets the DSPI master PUSHR data register address because this value is needed for 
 668:../drivers/fsl_dspi.h ****  *
 669:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 670:../drivers/fsl_dspi.h ****  * @return The DSPI master PUSHR data register address.
 671:../drivers/fsl_dspi.h ****  */
 672:../drivers/fsl_dspi.h **** static inline uint32_t DSPI_MasterGetTxRegisterAddress(SPI_Type *base)
 673:../drivers/fsl_dspi.h **** {
 674:../drivers/fsl_dspi.h ****     return (uint32_t) & (base->PUSHR);
 675:../drivers/fsl_dspi.h **** }
 676:../drivers/fsl_dspi.h **** 
 677:../drivers/fsl_dspi.h **** /*!
 678:../drivers/fsl_dspi.h ****  * @brief Gets the DSPI slave PUSHR data register address for the DMA operation.
 679:../drivers/fsl_dspi.h ****  *
 680:../drivers/fsl_dspi.h ****  * This function gets the DSPI slave PUSHR data register address as this value is needed for the DM
 681:../drivers/fsl_dspi.h ****  *
 682:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 683:../drivers/fsl_dspi.h ****  * @return The DSPI slave PUSHR data register address.
 684:../drivers/fsl_dspi.h ****  */
 685:../drivers/fsl_dspi.h **** static inline uint32_t DSPI_SlaveGetTxRegisterAddress(SPI_Type *base)
 686:../drivers/fsl_dspi.h **** {
 687:../drivers/fsl_dspi.h ****     return (uint32_t) & (base->PUSHR_SLAVE);
 688:../drivers/fsl_dspi.h **** }
 689:../drivers/fsl_dspi.h **** 
 690:../drivers/fsl_dspi.h **** /*!
 691:../drivers/fsl_dspi.h ****  * @brief Gets the DSPI POPR data register address for the DMA operation.
 692:../drivers/fsl_dspi.h ****  *
 693:../drivers/fsl_dspi.h ****  * This function gets the DSPI POPR data register address as this value is needed for the DMA opera
 694:../drivers/fsl_dspi.h ****  *
 695:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 696:../drivers/fsl_dspi.h ****  * @return The DSPI POPR data register address.
 697:../drivers/fsl_dspi.h ****  */
 698:../drivers/fsl_dspi.h **** static inline uint32_t DSPI_GetRxRegisterAddress(SPI_Type *base)
 699:../drivers/fsl_dspi.h **** {
 700:../drivers/fsl_dspi.h ****     return (uint32_t) & (base->POPR);
 701:../drivers/fsl_dspi.h **** }
 702:../drivers/fsl_dspi.h **** 
 703:../drivers/fsl_dspi.h **** /*!
 704:../drivers/fsl_dspi.h ****  *@}
 705:../drivers/fsl_dspi.h **** */
 706:../drivers/fsl_dspi.h **** 
 707:../drivers/fsl_dspi.h **** /*!
 708:../drivers/fsl_dspi.h ****  * @name Bus Operations
 709:../drivers/fsl_dspi.h ****  * @{
 710:../drivers/fsl_dspi.h ****  */
 711:../drivers/fsl_dspi.h **** 
 712:../drivers/fsl_dspi.h **** /*!
 713:../drivers/fsl_dspi.h ****  * @brief Configures the DSPI for master or slave.
 714:../drivers/fsl_dspi.h ****  *
 715:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 716:../drivers/fsl_dspi.h ****  * @param mode Mode setting (master or slave) of type dspi_master_slave_mode_t.
 717:../drivers/fsl_dspi.h ****  */
 718:../drivers/fsl_dspi.h **** static inline void DSPI_SetMasterSlaveMode(SPI_Type *base, dspi_master_slave_mode_t mode)
 719:../drivers/fsl_dspi.h **** {
 720:../drivers/fsl_dspi.h ****     base->MCR = (base->MCR & (~SPI_MCR_MSTR_MASK)) | SPI_MCR_MSTR(mode);
 721:../drivers/fsl_dspi.h **** }
 722:../drivers/fsl_dspi.h **** 
 723:../drivers/fsl_dspi.h **** /*!
 724:../drivers/fsl_dspi.h ****  * @brief Returns whether the DSPI module is in master mode.
 725:../drivers/fsl_dspi.h ****  *
 726:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 727:../drivers/fsl_dspi.h ****  * @return Returns true if the module is in master mode or false if the module is in slave mode.
 728:../drivers/fsl_dspi.h ****  */
 729:../drivers/fsl_dspi.h **** static inline bool DSPI_IsMaster(SPI_Type *base)
 730:../drivers/fsl_dspi.h **** {
 731:../drivers/fsl_dspi.h ****     return (bool)((base->MCR) & SPI_MCR_MSTR_MASK);
  39              		.loc 2 731 0
  40 0002 0368     		ldr	r3, [r0]
  41              	.LVL1:
  42              	.LBE208:
  43              	.LBE207:
1743:../drivers/fsl_dspi.c ****     if (DSPI_IsMaster(base))
  44              		.loc 1 1743 0
  45 0004 002B     		cmp	r3, #0
1744:../drivers/fsl_dspi.c ****     {
1745:../drivers/fsl_dspi.c ****         s_dspiMasterIsr(base, (dspi_master_handle_t *)param);
  46              		.loc 1 1745 0
  47 0006 B4BF     		ite	lt
  48 0008 034B     		ldrlt	r3, .L5
1746:../drivers/fsl_dspi.c ****     }
1747:../drivers/fsl_dspi.c ****     else
1748:../drivers/fsl_dspi.c ****     {
1749:../drivers/fsl_dspi.c ****         s_dspiSlaveIsr(base, (dspi_slave_handle_t *)param);
  49              		.loc 1 1749 0
  50 000a 044B     		ldrge	r3, .L5+4
  51 000c 1B68     		ldr	r3, [r3]
  52 000e 9847     		blx	r3
  53              	.LVL2:
  54              	.LBB209:
  55              	.LBB210:
  56              		.file 3 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  57              		.loc 3 833 0
  58              		.syntax unified
  59              	@ 833 "../CMSIS/cmsis_gcc.h" 1
  60 0010 BFF34F8F 		dsb 0xF
  61              	@ 0 "" 2
  62              		.thumb
  63              		.syntax unified
  64 0014 08BD     		pop	{r3, pc}
  65              	.L6:
  66 0016 00BF     		.align	2
  67              	.L5:
  68 0018 00000000 		.word	.LANCHOR0
  69 001c 00000000 		.word	.LANCHOR1
  70              	.LBE210:
  71              	.LBE209:
  72              		.cfi_endproc
  73              	.LFE201:
  75              		.section	.text.DSPI_MasterGetFormattedCommand.constprop.4,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu fpv4-sp-d16
  82              	DSPI_MasterGetFormattedCommand.constprop.4:
  83              	.LFB211:
 732:../drivers/fsl_dspi.h **** }
 733:../drivers/fsl_dspi.h **** /*!
 734:../drivers/fsl_dspi.h ****  * @brief Starts the DSPI transfers and clears HALT bit in MCR.
 735:../drivers/fsl_dspi.h ****  *
 736:../drivers/fsl_dspi.h ****  * This function sets the module to start data transfer in either master or slave mode.
 737:../drivers/fsl_dspi.h ****  *
 738:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 739:../drivers/fsl_dspi.h ****  */
 740:../drivers/fsl_dspi.h **** static inline void DSPI_StartTransfer(SPI_Type *base)
 741:../drivers/fsl_dspi.h **** {
 742:../drivers/fsl_dspi.h ****     base->MCR &= ~SPI_MCR_HALT_MASK;
 743:../drivers/fsl_dspi.h **** }
 744:../drivers/fsl_dspi.h **** /*!
 745:../drivers/fsl_dspi.h ****  * @brief Stops DSPI transfers and sets the HALT bit in MCR.
 746:../drivers/fsl_dspi.h ****  *
 747:../drivers/fsl_dspi.h ****  * This function stops data transfers in either master or slave modes.
 748:../drivers/fsl_dspi.h ****  *
 749:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 750:../drivers/fsl_dspi.h ****  */
 751:../drivers/fsl_dspi.h **** static inline void DSPI_StopTransfer(SPI_Type *base)
 752:../drivers/fsl_dspi.h **** {
 753:../drivers/fsl_dspi.h ****     base->MCR |= SPI_MCR_HALT_MASK;
 754:../drivers/fsl_dspi.h **** }
 755:../drivers/fsl_dspi.h **** 
 756:../drivers/fsl_dspi.h **** /*!
 757:../drivers/fsl_dspi.h ****  * @brief Enables or disables the DSPI FIFOs.
 758:../drivers/fsl_dspi.h ****  *
 759:../drivers/fsl_dspi.h ****  * This function  allows the caller to disable/enable the Tx and Rx FIFOs independently.
 760:../drivers/fsl_dspi.h ****  * Note that to disable, pass in a logic 0 (false) for the particular FIFO configuration.  To enabl
 761:../drivers/fsl_dspi.h ****  * pass in a logic 1 (true).
 762:../drivers/fsl_dspi.h ****  *
 763:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 764:../drivers/fsl_dspi.h ****  * @param enableTxFifo Disables (false) the TX FIFO; Otherwise, enables (true) the TX FIFO
 765:../drivers/fsl_dspi.h ****  * @param enableRxFifo Disables (false) the RX FIFO; Otherwise, enables (true) the RX FIFO
 766:../drivers/fsl_dspi.h ****  */
 767:../drivers/fsl_dspi.h **** static inline void DSPI_SetFifoEnable(SPI_Type *base, bool enableTxFifo, bool enableRxFifo)
 768:../drivers/fsl_dspi.h **** {
 769:../drivers/fsl_dspi.h ****     base->MCR = (base->MCR & (~(SPI_MCR_DIS_RXF_MASK | SPI_MCR_DIS_TXF_MASK))) | SPI_MCR_DIS_TXF(!e
 770:../drivers/fsl_dspi.h ****                 SPI_MCR_DIS_RXF(!enableRxFifo);
 771:../drivers/fsl_dspi.h **** }
 772:../drivers/fsl_dspi.h **** 
 773:../drivers/fsl_dspi.h **** /*!
 774:../drivers/fsl_dspi.h ****  * @brief Flushes the DSPI FIFOs.
 775:../drivers/fsl_dspi.h ****  *
 776:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 777:../drivers/fsl_dspi.h ****  * @param flushTxFifo Flushes (true) the Tx FIFO; Otherwise, does not flush (false) the Tx FIFO
 778:../drivers/fsl_dspi.h ****  * @param flushRxFifo Flushes (true) the Rx FIFO; Otherwise, does not flush (false) the Rx FIFO
 779:../drivers/fsl_dspi.h ****  */
 780:../drivers/fsl_dspi.h **** static inline void DSPI_FlushFifo(SPI_Type *base, bool flushTxFifo, bool flushRxFifo)
 781:../drivers/fsl_dspi.h **** {
 782:../drivers/fsl_dspi.h ****     base->MCR = (base->MCR & (~(SPI_MCR_CLR_TXF_MASK | SPI_MCR_CLR_RXF_MASK))) | SPI_MCR_CLR_TXF(fl
 783:../drivers/fsl_dspi.h ****                 SPI_MCR_CLR_RXF(flushRxFifo);
 784:../drivers/fsl_dspi.h **** }
 785:../drivers/fsl_dspi.h **** 
 786:../drivers/fsl_dspi.h **** /*!
 787:../drivers/fsl_dspi.h ****  * @brief Configures the DSPI peripheral chip select polarity simultaneously.
 788:../drivers/fsl_dspi.h ****  * For example, PCS0 and PCS1 are set to active low and other PCS is set to active high. Note that 
 789:../drivers/fsl_dspi.h ****  * PCSs is specific to the device.
 790:../drivers/fsl_dspi.h ****  * @code
 791:../drivers/fsl_dspi.h ****  *  DSPI_SetAllPcsPolarity(base, kDSPI_Pcs0ActiveLow | kDSPI_Pcs1ActiveLow);
 792:../drivers/fsl_dspi.h ****    @endcode
 793:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 794:../drivers/fsl_dspi.h ****  * @param mask The PCS polarity mask; use the enum _dspi_pcs_polarity.
 795:../drivers/fsl_dspi.h ****  */
 796:../drivers/fsl_dspi.h **** static inline void DSPI_SetAllPcsPolarity(SPI_Type *base, uint32_t mask)
 797:../drivers/fsl_dspi.h **** {
 798:../drivers/fsl_dspi.h ****     base->MCR = (base->MCR & ~SPI_MCR_PCSIS_MASK) | SPI_MCR_PCSIS(mask);
 799:../drivers/fsl_dspi.h **** }
 800:../drivers/fsl_dspi.h **** 
 801:../drivers/fsl_dspi.h **** /*!
 802:../drivers/fsl_dspi.h ****  * @brief Sets the DSPI baud rate in bits per second.
 803:../drivers/fsl_dspi.h ****  *
 804:../drivers/fsl_dspi.h ****  * This function  takes in the desired baudRate_Bps (baud rate) and calculates the nearest possible
 805:../drivers/fsl_dspi.h ****  * exceeding the desired baud rate, and returns the calculated baud rate in bits-per-second. It req
 806:../drivers/fsl_dspi.h ****  * caller also provide the frequency of the module source clock (in Hertz).
 807:../drivers/fsl_dspi.h ****  *
 808:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 809:../drivers/fsl_dspi.h ****  * @param whichCtar The desired Clock and Transfer Attributes Register (CTAR) of the type dspi_ctar
 810:../drivers/fsl_dspi.h ****  * @param baudRate_Bps The desired baud rate in bits per second
 811:../drivers/fsl_dspi.h ****  * @param srcClock_Hz Module source input clock in Hertz
 812:../drivers/fsl_dspi.h ****  * @return The actual calculated baud rate
 813:../drivers/fsl_dspi.h ****  */
 814:../drivers/fsl_dspi.h **** uint32_t DSPI_MasterSetBaudRate(SPI_Type *base,
 815:../drivers/fsl_dspi.h ****                                 dspi_ctar_selection_t whichCtar,
 816:../drivers/fsl_dspi.h ****                                 uint32_t baudRate_Bps,
 817:../drivers/fsl_dspi.h ****                                 uint32_t srcClock_Hz);
 818:../drivers/fsl_dspi.h **** 
 819:../drivers/fsl_dspi.h **** /*!
 820:../drivers/fsl_dspi.h ****  * @brief Manually configures the delay prescaler and scaler for a particular CTAR.
 821:../drivers/fsl_dspi.h ****  *
 822:../drivers/fsl_dspi.h ****  * This function configures the PCS to SCK delay pre-scalar (PcsSCK) and scalar (CSSCK), after SCK 
 823:../drivers/fsl_dspi.h ****  * (PASC) and scalar (ASC), and the delay after transfer pre-scalar (PDT) and scalar (DT).
 824:../drivers/fsl_dspi.h ****  *
 825:../drivers/fsl_dspi.h ****  * These delay names are available in the type dspi_delay_type_t.
 826:../drivers/fsl_dspi.h ****  *
 827:../drivers/fsl_dspi.h ****  * The user passes the delay to the configuration along with the prescaler and scaler value.
 828:../drivers/fsl_dspi.h ****  * This allows the user to directly set the prescaler/scaler values if pre-calculated or
 829:../drivers/fsl_dspi.h ****  * to manually increment either value.
 830:../drivers/fsl_dspi.h ****  *
 831:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 832:../drivers/fsl_dspi.h ****  * @param whichCtar The desired Clock and Transfer Attributes Register (CTAR) of type dspi_ctar_sel
 833:../drivers/fsl_dspi.h ****  * @param prescaler The prescaler delay value (can be an integer 0, 1, 2, or 3).
 834:../drivers/fsl_dspi.h ****  * @param scaler The scaler delay value (can be any integer between 0 to 15).
 835:../drivers/fsl_dspi.h ****  * @param whichDelay The desired delay to configure; must be of type dspi_delay_type_t
 836:../drivers/fsl_dspi.h ****  */
 837:../drivers/fsl_dspi.h **** void DSPI_MasterSetDelayScaler(
 838:../drivers/fsl_dspi.h ****     SPI_Type *base, dspi_ctar_selection_t whichCtar, uint32_t prescaler, uint32_t scaler, dspi_dela
 839:../drivers/fsl_dspi.h **** 
 840:../drivers/fsl_dspi.h **** /*!
 841:../drivers/fsl_dspi.h ****  * @brief Calculates the delay prescaler and scaler based on the desired delay input in nanoseconds
 842:../drivers/fsl_dspi.h ****  *
 843:../drivers/fsl_dspi.h ****  * This function calculates the values for the following.
 844:../drivers/fsl_dspi.h ****  * PCS to SCK delay pre-scalar (PCSSCK) and scalar (CSSCK), or
 845:../drivers/fsl_dspi.h ****  * After SCK delay pre-scalar (PASC) and scalar (ASC), or
 846:../drivers/fsl_dspi.h ****  * Delay after transfer pre-scalar (PDT) and scalar (DT).
 847:../drivers/fsl_dspi.h ****  *
 848:../drivers/fsl_dspi.h ****  * These delay names are available in the type dspi_delay_type_t.
 849:../drivers/fsl_dspi.h ****  *
 850:../drivers/fsl_dspi.h ****  * The user passes which delay to configure along with the desired delay value in nanoseconds.  The
 851:../drivers/fsl_dspi.h ****  * calculates the values needed for the prescaler and scaler. Note that returning the calculated de
 852:../drivers/fsl_dspi.h ****  * delay match may not be possible. In this case, the closest match is calculated without going bel
 853:../drivers/fsl_dspi.h ****  * delay value input.
 854:../drivers/fsl_dspi.h ****  * It is possible to input a very large delay value that exceeds the capability of the part, in whi
 855:../drivers/fsl_dspi.h ****  * supported delay is returned. The higher-level peripheral driver alerts the user of an out of ran
 856:../drivers/fsl_dspi.h ****  * input.
 857:../drivers/fsl_dspi.h ****  *
 858:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 859:../drivers/fsl_dspi.h ****  * @param whichCtar The desired Clock and Transfer Attributes Register (CTAR) of type dspi_ctar_sel
 860:../drivers/fsl_dspi.h ****  * @param whichDelay The desired delay to configure, must be of type dspi_delay_type_t
 861:../drivers/fsl_dspi.h ****  * @param srcClock_Hz Module source input clock in Hertz
 862:../drivers/fsl_dspi.h ****  * @param delayTimeInNanoSec The desired delay value in nanoseconds.
 863:../drivers/fsl_dspi.h ****  * @return The actual calculated delay value.
 864:../drivers/fsl_dspi.h ****  */
 865:../drivers/fsl_dspi.h **** uint32_t DSPI_MasterSetDelayTimes(SPI_Type *base,
 866:../drivers/fsl_dspi.h ****                                   dspi_ctar_selection_t whichCtar,
 867:../drivers/fsl_dspi.h ****                                   dspi_delay_type_t whichDelay,
 868:../drivers/fsl_dspi.h ****                                   uint32_t srcClock_Hz,
 869:../drivers/fsl_dspi.h ****                                   uint32_t delayTimeInNanoSec);
 870:../drivers/fsl_dspi.h **** 
 871:../drivers/fsl_dspi.h **** /*!
 872:../drivers/fsl_dspi.h ****  * @brief Writes data into the data buffer for master mode.
 873:../drivers/fsl_dspi.h ****  *
 874:../drivers/fsl_dspi.h ****  * In master mode, the 16-bit data is appended to the 16-bit command info. The command portion
 875:../drivers/fsl_dspi.h ****  * provides characteristics of the data, such as the optional continuous chip select
 876:../drivers/fsl_dspi.h ****  * operation between transfers, the desired Clock and Transfer Attributes register to use for the
 877:../drivers/fsl_dspi.h ****  * associated SPI frame, the desired PCS signal to use for the data transfer, whether the current
 878:../drivers/fsl_dspi.h ****  * transfer is the last in the queue, and whether to clear the transfer count (normally needed when
 879:../drivers/fsl_dspi.h ****  * sending the first frame of a data packet). This is an example.
 880:../drivers/fsl_dspi.h ****  * @code
 881:../drivers/fsl_dspi.h ****  *  dspi_command_data_config_t commandConfig;
 882:../drivers/fsl_dspi.h ****  *  commandConfig.isPcsContinuous = true;
 883:../drivers/fsl_dspi.h ****  *  commandConfig.whichCtar = kDSPICtar0;
 884:../drivers/fsl_dspi.h ****  *  commandConfig.whichPcs = kDSPIPcs0;
 885:../drivers/fsl_dspi.h ****  *  commandConfig.clearTransferCount = false;
 886:../drivers/fsl_dspi.h ****  *  commandConfig.isEndOfQueue = false;
 887:../drivers/fsl_dspi.h ****  *  DSPI_MasterWriteData(base, &commandConfig, dataWord);
 888:../drivers/fsl_dspi.h ****    @endcode
 889:../drivers/fsl_dspi.h ****  *
 890:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 891:../drivers/fsl_dspi.h ****  * @param command Pointer to the command structure.
 892:../drivers/fsl_dspi.h ****  * @param data The data word to be sent.
 893:../drivers/fsl_dspi.h ****  */
 894:../drivers/fsl_dspi.h **** static inline void DSPI_MasterWriteData(SPI_Type *base, dspi_command_data_config_t *command, uint16
 895:../drivers/fsl_dspi.h **** {
 896:../drivers/fsl_dspi.h ****     base->PUSHR = SPI_PUSHR_CONT(command->isPcsContinuous) | SPI_PUSHR_CTAS(command->whichCtar) |
 897:../drivers/fsl_dspi.h ****                   SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
 898:../drivers/fsl_dspi.h ****                   SPI_PUSHR_CTCNT(command->clearTransferCount) | SPI_PUSHR_TXDATA(data);
 899:../drivers/fsl_dspi.h **** }
 900:../drivers/fsl_dspi.h **** 
 901:../drivers/fsl_dspi.h **** /*!
 902:../drivers/fsl_dspi.h ****  * @brief Sets the dspi_command_data_config_t structure to default values.
 903:../drivers/fsl_dspi.h ****  *
 904:../drivers/fsl_dspi.h ****  * The purpose of this API is to get the configuration structure initialized for use in the DSPI_Ma
 905:../drivers/fsl_dspi.h ****  * Users may use the initialized structure unchanged in the DSPI_MasterWrite_xx() or modify the str
 906:../drivers/fsl_dspi.h ****  * before calling the DSPI_MasterWrite_xx().
 907:../drivers/fsl_dspi.h ****  * This is an example.
 908:../drivers/fsl_dspi.h ****  * @code
 909:../drivers/fsl_dspi.h ****  *  dspi_command_data_config_t  command;
 910:../drivers/fsl_dspi.h ****  *  DSPI_GetDefaultDataCommandConfig(&command);
 911:../drivers/fsl_dspi.h ****  * @endcode
 912:../drivers/fsl_dspi.h ****  * @param command Pointer to the dspi_command_data_config_t structure.
 913:../drivers/fsl_dspi.h ****  */
 914:../drivers/fsl_dspi.h **** void DSPI_GetDefaultDataCommandConfig(dspi_command_data_config_t *command);
 915:../drivers/fsl_dspi.h **** 
 916:../drivers/fsl_dspi.h **** /*!
 917:../drivers/fsl_dspi.h ****  * @brief Writes data into the data buffer master mode and waits till complete to return.
 918:../drivers/fsl_dspi.h ****  *
 919:../drivers/fsl_dspi.h ****  * In master mode, the 16-bit data is appended to the 16-bit command info. The command portion
 920:../drivers/fsl_dspi.h ****  * provides characteristics of the data, such as the optional continuous chip select
 921:../drivers/fsl_dspi.h ****  * operation between transfers, the desired Clock and Transfer Attributes register to use for the
 922:../drivers/fsl_dspi.h ****  * associated SPI frame, the desired PCS signal to use for the data transfer, whether the current
 923:../drivers/fsl_dspi.h ****  * transfer is the last in the queue, and whether to clear the transfer count (normally needed when
 924:../drivers/fsl_dspi.h ****  * sending the first frame of a data packet). This is an example.
 925:../drivers/fsl_dspi.h ****  * @code
 926:../drivers/fsl_dspi.h ****  *  dspi_command_config_t commandConfig;
 927:../drivers/fsl_dspi.h ****  *  commandConfig.isPcsContinuous = true;
 928:../drivers/fsl_dspi.h ****  *  commandConfig.whichCtar = kDSPICtar0;
 929:../drivers/fsl_dspi.h ****  *  commandConfig.whichPcs = kDSPIPcs1;
 930:../drivers/fsl_dspi.h ****  *  commandConfig.clearTransferCount = false;
 931:../drivers/fsl_dspi.h ****  *  commandConfig.isEndOfQueue = false;
 932:../drivers/fsl_dspi.h ****  *  DSPI_MasterWriteDataBlocking(base, &commandConfig, dataWord);
 933:../drivers/fsl_dspi.h ****  * @endcode
 934:../drivers/fsl_dspi.h ****  *
 935:../drivers/fsl_dspi.h ****  * Note that this function does not return until after the transmit is complete. Also note that the
 936:../drivers/fsl_dspi.h ****  * enabled and running to transmit data (MCR[MDIS] & [HALT] = 0). Because the SPI is a synchronous 
 937:../drivers/fsl_dspi.h ****  * the received data is available when the transmit completes.
 938:../drivers/fsl_dspi.h ****  *
 939:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
 940:../drivers/fsl_dspi.h ****  * @param command Pointer to the command structure.
 941:../drivers/fsl_dspi.h ****  * @param data The data word to be sent.
 942:../drivers/fsl_dspi.h ****  */
 943:../drivers/fsl_dspi.h **** void DSPI_MasterWriteDataBlocking(SPI_Type *base, dspi_command_data_config_t *command, uint16_t dat
 944:../drivers/fsl_dspi.h **** 
 945:../drivers/fsl_dspi.h **** /*!
 946:../drivers/fsl_dspi.h ****  * @brief Returns the DSPI command word formatted to the PUSHR data register bit field.
 947:../drivers/fsl_dspi.h ****  *
 948:../drivers/fsl_dspi.h ****  * This function allows the caller to pass in the data command structure and returns the command wo
 949:../drivers/fsl_dspi.h ****  * according to the DSPI PUSHR register bit field placement. The user can then "OR" the returned co
 950:../drivers/fsl_dspi.h ****  * desired data to send and use the function DSPI_HAL_WriteCommandDataMastermode or
 951:../drivers/fsl_dspi.h ****  * DSPI_HAL_WriteCommandDataMastermodeBlocking to write the entire 32-bit command data word to the 
 952:../drivers/fsl_dspi.h ****  * improve performance in cases where the command structure is constant. For example, the user call
 953:../drivers/fsl_dspi.h ****  * before starting a transfer to generate the command word. When they are ready to transmit the dat
 954:../drivers/fsl_dspi.h ****  * this formatted command word with the desired data to transmit. This process increases transmit p
 955:../drivers/fsl_dspi.h ****  * compared to calling send functions, such as DSPI_HAL_WriteDataMastermode,  which format the comm
 956:../drivers/fsl_dspi.h ****  * data word is to be sent.
 957:../drivers/fsl_dspi.h ****  *
 958:../drivers/fsl_dspi.h ****  * @param command Pointer to the command structure.
 959:../drivers/fsl_dspi.h ****  * @return The command word formatted to the PUSHR data register bit field.
 960:../drivers/fsl_dspi.h ****  */
 961:../drivers/fsl_dspi.h **** static inline uint32_t DSPI_MasterGetFormattedCommand(dspi_command_data_config_t *command)
  84              		.loc 2 961 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL3:
 962:../drivers/fsl_dspi.h **** {
 963:../drivers/fsl_dspi.h ****     /* Format the 16-bit command word according to the PUSHR data register bit field*/
 964:../drivers/fsl_dspi.h ****     return (uint32_t)(SPI_PUSHR_CONT(command->isPcsContinuous) | SPI_PUSHR_CTAS(command->whichCtar)
  90              		.loc 2 964 0
  91 0000 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 965:../drivers/fsl_dspi.h ****                       SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
  92              		.loc 2 965 0
  93 0002 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 964:../drivers/fsl_dspi.h ****                       SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
  94              		.loc 2 964 0
  95 0004 1B07     		lsls	r3, r3, #28
  96              		.loc 2 965 0
  97 0006 1204     		lsls	r2, r2, #16
  98 0008 02F47C12 		and	r2, r2, #4128768
 964:../drivers/fsl_dspi.h ****                       SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
  99              		.loc 2 964 0
 100 000c 03F0E043 		and	r3, r3, #1879048192
 101 0010 1343     		orrs	r3, r3, r2
 102 0012 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 103              		.loc 2 965 0
 104 0014 C078     		ldrb	r0, [r0, #3]	@ zero_extendqisi2
 105              	.LVL4:
 106 0016 C006     		lsls	r0, r0, #27
 964:../drivers/fsl_dspi.h ****                       SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
 107              		.loc 2 964 0
 108 0018 43EAC273 		orr	r3, r3, r2, lsl #31
 109              		.loc 2 965 0
 110 001c 00F00060 		and	r0, r0, #134217728
 966:../drivers/fsl_dspi.h ****                       SPI_PUSHR_CTCNT(command->clearTransferCount));
 967:../drivers/fsl_dspi.h **** }
 111              		.loc 2 967 0
 112 0020 1843     		orrs	r0, r0, r3
 113 0022 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE211:
 117              		.section	.text.DSPI_GetInstance,"ax",%progbits
 118              		.align	1
 119              		.global	DSPI_GetInstance
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	DSPI_GetInstance:
 126              	.LFB167:
 150:../drivers/fsl_dspi.c ****     uint32_t instance;
 127              		.loc 1 150 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132              	.LVL5:
 156:../drivers/fsl_dspi.c ****         {
 133              		.loc 1 156 0
 134 0000 084B     		ldr	r3, .L13
 135 0002 9842     		cmp	r0, r3
 136 0004 0AD0     		beq	.L10
 137              	.LVL6:
 138 0006 03F58053 		add	r3, r3, #4096
 139 000a 9842     		cmp	r0, r3
 140 000c 08D0     		beq	.L11
 141              	.LVL7:
 154:../drivers/fsl_dspi.c ****     {
 142              		.loc 1 154 0
 143 000e 03F5FE23 		add	r3, r3, #520192
 144 0012 9842     		cmp	r0, r3
 145 0014 0CBF     		ite	eq
 146 0016 0220     		moveq	r0, #2
 147 0018 0320     		movne	r0, #3
 148              	.LVL8:
 149 001a 7047     		bx	lr
 150              	.LVL9:
 151              	.L10:
 152 001c 0020     		movs	r0, #0
 153              	.LVL10:
 154 001e 7047     		bx	lr
 155              	.LVL11:
 156              	.L11:
 157 0020 0120     		movs	r0, #1
 158              	.LVL12:
 165:../drivers/fsl_dspi.c **** 
 159              		.loc 1 165 0
 160 0022 7047     		bx	lr
 161              	.L14:
 162              		.align	2
 163              	.L13:
 164 0024 00C00240 		.word	1073922048
 165              		.cfi_endproc
 166              	.LFE167:
 168              		.section	.text.DSPI_MasterTransferFillUpTxFifo,"ax",%progbits
 169              		.align	1
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	DSPI_MasterTransferFillUpTxFifo:
 176              	.LFB191:
1094:../drivers/fsl_dspi.c ****     assert(handle);
 177              		.loc 1 1094 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              	.LVL13:
 182 0000 70B5     		push	{r4, r5, r6, lr}
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 4, -16
 185              		.cfi_offset 5, -12
 186              		.cfi_offset 6, -8
 187              		.cfi_offset 14, -4
1094:../drivers/fsl_dspi.c ****     assert(handle);
 188              		.loc 1 1094 0
 189 0002 0246     		mov	r2, r0
1098:../drivers/fsl_dspi.c **** 
 190              		.loc 1 1098 0
 191 0004 FFF7FEFF 		bl	DSPI_GetInstance
 192              	.LVL14:
 193 0008 3A4B     		ldr	r3, .L45
 194 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
1101:../drivers/fsl_dspi.c ****     {
 195              		.loc 1 1101 0
 196 000c 0868     		ldr	r0, [r1]
 197 000e 0828     		cmp	r0, #8
1098:../drivers/fsl_dspi.c **** 
 198              		.loc 1 1098 0
 199 0010 DBB2     		uxtb	r3, r3
 200              	.LVL15:
1101:../drivers/fsl_dspi.c ****     {
 201              		.loc 1 1101 0
 202 0012 5DD8     		bhi	.L16
1185:../drivers/fsl_dspi.c ****             }
 203              		.loc 1 1185 0
 204 0014 98B2     		uxth	r0, r3
 205              	.LBB211:
 206              	.LBB212:
 580:../drivers/fsl_dspi.h **** }
 207              		.loc 2 580 0
 208 0016 4FF00075 		mov	r5, #33554432
 209              	.LVL16:
 210              	.L17:
 211              	.LBE212:
 212              	.LBE211:
 213              	.LBB214:
 214              	.LBB215:
 561:../drivers/fsl_dspi.h **** }
 215              		.loc 2 561 0
 216 001a D36A     		ldr	r3, [r2, #44]
 217              	.LVL17:
 218              	.LBE215:
 219              	.LBE214:
1175:../drivers/fsl_dspi.c ****                ((handle->remainingReceiveByteCount - handle->remainingSendByteCount) < handle->fifo
 220              		.loc 1 1175 0
 221 001c 9B01     		lsls	r3, r3, #6
 222 001e 1FD5     		bpl	.L15
1176:../drivers/fsl_dspi.c ****         {
 223              		.loc 1 1176 0 discriminator 1
 224 0020 CB69     		ldr	r3, [r1, #28]
 225 0022 8C69     		ldr	r4, [r1, #24]
 226 0024 1B1B     		subs	r3, r3, r4
 227 0026 0C7B     		ldrb	r4, [r1, #12]	@ zero_extendqisi2
1175:../drivers/fsl_dspi.c ****                ((handle->remainingReceiveByteCount - handle->remainingSendByteCount) < handle->fifo
 228              		.loc 1 1175 0 discriminator 1
 229 0028 A342     		cmp	r3, r4
 230 002a 19D2     		bcs	.L15
1178:../drivers/fsl_dspi.c ****             {
 231              		.loc 1 1178 0
 232 002c 0B69     		ldr	r3, [r1, #16]
 233 002e 002B     		cmp	r3, #0
 234 0030 5DD0     		beq	.L28
1180:../drivers/fsl_dspi.c ****                 ++handle->txData;
 235              		.loc 1 1180 0
 236 0032 0B69     		ldr	r3, [r1, #16]
1181:../drivers/fsl_dspi.c ****             }
 237              		.loc 1 1181 0
 238 0034 0C69     		ldr	r4, [r1, #16]
1180:../drivers/fsl_dspi.c ****                 ++handle->txData;
 239              		.loc 1 1180 0
 240 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 241              	.LVL18:
1181:../drivers/fsl_dspi.c ****             }
 242              		.loc 1 1181 0
 243 0038 0134     		adds	r4, r4, #1
 244 003a 0C61     		str	r4, [r1, #16]
 245              	.LVL19:
 246              	.L29:
1188:../drivers/fsl_dspi.c ****             {
 247              		.loc 1 1188 0
 248 003c 8C69     		ldr	r4, [r1, #24]
 249 003e 012C     		cmp	r4, #1
1190:../drivers/fsl_dspi.c ****             }
 250              		.loc 1 1190 0
 251 0040 0CBF     		ite	eq
 252 0042 8C68     		ldreq	r4, [r1, #8]
1194:../drivers/fsl_dspi.c ****             }
 253              		.loc 1 1194 0
 254 0044 4C68     		ldrne	r4, [r1, #4]
 255 0046 2343     		orrs	r3, r3, r4
 256              	.LVL20:
 257 0048 5363     		str	r3, [r2, #52]
 258              	.LVL21:
 259              	.LBB216:
 260              	.LBB213:
 580:../drivers/fsl_dspi.h **** }
 261              		.loc 2 580 0
 262 004a D562     		str	r5, [r2, #44]
 263              	.LVL22:
 264              	.LBE213:
 265              	.LBE216:
1200:../drivers/fsl_dspi.c **** 
 266              		.loc 1 1200 0
 267 004c 8B69     		ldr	r3, [r1, #24]
 268 004e 013B     		subs	r3, r3, #1
 269 0050 8B61     		str	r3, [r1, #24]
1205:../drivers/fsl_dspi.c ****             {
 270              		.loc 1 1205 0
 271 0052 8B69     		ldr	r3, [r1, #24]
 272 0054 23B1     		cbz	r3, .L15
1205:../drivers/fsl_dspi.c ****             {
 273              		.loc 1 1205 0 is_stmt 0 discriminator 1
 274 0056 0B6A     		ldr	r3, [r1, #32]
 275 0058 8C69     		ldr	r4, [r1, #24]
 276 005a 013B     		subs	r3, r3, #1
 277 005c 9C42     		cmp	r4, r3
 278 005e DCD1     		bne	.L17
 279              	.L15:
 280 0060 70BD     		pop	{r4, r5, r6, pc}
 281              	.L27:
1115:../drivers/fsl_dspi.c ****             {
 282              		.loc 1 1115 0 is_stmt 1
 283 0062 8869     		ldr	r0, [r1, #24]
 284 0064 0228     		cmp	r0, #2
1117:../drivers/fsl_dspi.c ****                 {
 285              		.loc 1 1117 0
 286 0066 0869     		ldr	r0, [r1, #16]
1115:../drivers/fsl_dspi.c ****             {
 287              		.loc 1 1115 0
 288 0068 1ED8     		bhi	.L18
1117:../drivers/fsl_dspi.c ****                 {
 289              		.loc 1 1117 0
 290 006a D8B1     		cbz	r0, .L19
1119:../drivers/fsl_dspi.c ****                     {
 291              		.loc 1 1119 0
 292 006c 8869     		ldr	r0, [r1, #24]
 293 006e 0128     		cmp	r0, #1
1121:../drivers/fsl_dspi.c ****                     }
 294              		.loc 1 1121 0
 295 0070 0869     		ldr	r0, [r1, #16]
1126:../drivers/fsl_dspi.c ****                         wordToSend |= (unsigned)(*(handle->txData)) << 8U;
 296              		.loc 1 1126 0
 297 0072 18BF     		it	ne
 298 0074 0E69     		ldrne	r6, [r1, #16]
1121:../drivers/fsl_dspi.c ****                     }
 299              		.loc 1 1121 0
 300 0076 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 301              	.LVL23:
1126:../drivers/fsl_dspi.c ****                         wordToSend |= (unsigned)(*(handle->txData)) << 8U;
 302              		.loc 1 1126 0
 303 0078 1FBF     		itttt	ne
 304 007a 0136     		addne	r6, r6, #1
 305 007c 0E61     		strne	r6, [r1, #16]
1127:../drivers/fsl_dspi.c ****                     }
 306              		.loc 1 1127 0
 307 007e 0E69     		ldrne	r6, [r1, #16]
 308 0080 3678     		ldrbne	r6, [r6]	@ zero_extendqisi2
 309 0082 18BF     		it	ne
 310 0084 40EA0620 		orrne	r0, r0, r6, lsl #8
 311              	.LVL24:
 312              	.L21:
1134:../drivers/fsl_dspi.c ****                 base->PUSHR = handle->lastCommand | wordToSend;
 313              		.loc 1 1134 0
 314 0088 8C61     		str	r4, [r1, #24]
1135:../drivers/fsl_dspi.c ****             }
 315              		.loc 1 1135 0
 316 008a 8E68     		ldr	r6, [r1, #8]
 317              	.L43:
1152:../drivers/fsl_dspi.c ****             }
 318              		.loc 1 1152 0
 319 008c 3043     		orrs	r0, r0, r6
 320              	.LVL25:
 321 008e 5063     		str	r0, [r2, #52]
 322              	.LVL26:
 323              	.LBB217:
 324              	.LBB218:
 580:../drivers/fsl_dspi.h **** }
 325              		.loc 2 580 0
 326 0090 D562     		str	r5, [r2, #44]
 327              	.LVL27:
 328              	.LBE218:
 329              	.LBE217:
1161:../drivers/fsl_dspi.c ****             {
 330              		.loc 1 1161 0
 331 0092 8869     		ldr	r0, [r1, #24]
 332 0094 0028     		cmp	r0, #0
 333 0096 E3D0     		beq	.L15
1161:../drivers/fsl_dspi.c ****             {
 334              		.loc 1 1161 0 is_stmt 0 discriminator 1
 335 0098 086A     		ldr	r0, [r1, #32]
 336 009a 8E69     		ldr	r6, [r1, #24]
 337 009c 0238     		subs	r0, r0, #2
 338 009e 8642     		cmp	r6, r0
 339 00a0 1AD1     		bne	.L42
 340 00a2 70BD     		pop	{r4, r5, r6, pc}
 341              	.L19:
1132:../drivers/fsl_dspi.c ****                 }
 342              		.loc 1 1132 0 is_stmt 1
 343 00a4 1846     		mov	r0, r3
 344              	.LVL28:
 345 00a6 EFE7     		b	.L21
 346              	.LVL29:
 347              	.L18:
1140:../drivers/fsl_dspi.c ****                 {
 348              		.loc 1 1140 0
 349 00a8 80B1     		cbz	r0, .L23
1142:../drivers/fsl_dspi.c ****                     ++handle->txData; /* increment to next data byte */
 350              		.loc 1 1142 0
 351 00aa 0869     		ldr	r0, [r1, #16]
1143:../drivers/fsl_dspi.c ****                     wordToSend |= (unsigned)(*(handle->txData)) << 8U;
 352              		.loc 1 1143 0
 353 00ac 0E69     		ldr	r6, [r1, #16]
1142:../drivers/fsl_dspi.c ****                     ++handle->txData; /* increment to next data byte */
 354              		.loc 1 1142 0
 355 00ae 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 356              	.LVL30:
1143:../drivers/fsl_dspi.c ****                     wordToSend |= (unsigned)(*(handle->txData)) << 8U;
 357              		.loc 1 1143 0
 358 00b0 0136     		adds	r6, r6, #1
 359 00b2 0E61     		str	r6, [r1, #16]
1144:../drivers/fsl_dspi.c ****                     ++handle->txData; /* increment to next data byte */
 360              		.loc 1 1144 0
 361 00b4 0E69     		ldr	r6, [r1, #16]
 362 00b6 3678     		ldrb	r6, [r6]	@ zero_extendqisi2
 363 00b8 40EA0620 		orr	r0, r0, r6, lsl #8
 364              	.LVL31:
1145:../drivers/fsl_dspi.c ****                 }
 365              		.loc 1 1145 0
 366 00bc 0E69     		ldr	r6, [r1, #16]
 367 00be 0136     		adds	r6, r6, #1
 368 00c0 0E61     		str	r6, [r1, #16]
 369              	.LVL32:
 370              	.L24:
1151:../drivers/fsl_dspi.c ****                 base->PUSHR = handle->command | wordToSend;
 371              		.loc 1 1151 0
 372 00c2 8E69     		ldr	r6, [r1, #24]
 373 00c4 023E     		subs	r6, r6, #2
 374 00c6 8E61     		str	r6, [r1, #24]
1152:../drivers/fsl_dspi.c ****             }
 375              		.loc 1 1152 0
 376 00c8 4E68     		ldr	r6, [r1, #4]
 377 00ca DFE7     		b	.L43
 378              	.LVL33:
 379              	.L23:
1149:../drivers/fsl_dspi.c ****                 }
 380              		.loc 1 1149 0
 381 00cc 1846     		mov	r0, r3
 382              	.LVL34:
 383 00ce F8E7     		b	.L24
 384              	.LVL35:
 385              	.L16:
 386 00d0 9BB2     		uxth	r3, r3
 387              	.LVL36:
1134:../drivers/fsl_dspi.c ****                 base->PUSHR = handle->lastCommand | wordToSend;
 388              		.loc 1 1134 0
 389 00d2 0024     		movs	r4, #0
 390              	.LBB220:
 391              	.LBB219:
 580:../drivers/fsl_dspi.h **** }
 392              		.loc 2 580 0
 393 00d4 4FF00075 		mov	r5, #33554432
 394              	.LVL37:
 395              	.L42:
 396              	.LBE219:
 397              	.LBE220:
 398              	.LBB221:
 399              	.LBB222:
 561:../drivers/fsl_dspi.h **** }
 400              		.loc 2 561 0
 401 00d8 D06A     		ldr	r0, [r2, #44]
 402              	.LVL38:
 403              	.LBE222:
 404              	.LBE221:
1112:../drivers/fsl_dspi.c ****                ((handle->remainingReceiveByteCount - handle->remainingSendByteCount) / 2 < handle->
 405              		.loc 1 1112 0
 406 00da 8001     		lsls	r0, r0, #6
 407 00dc C0D5     		bpl	.L15
1113:../drivers/fsl_dspi.c ****         {
 408              		.loc 1 1113 0 discriminator 1
 409 00de C869     		ldr	r0, [r1, #28]
 410 00e0 8E69     		ldr	r6, [r1, #24]
 411 00e2 801B     		subs	r0, r0, r6
 412 00e4 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
1112:../drivers/fsl_dspi.c ****                ((handle->remainingReceiveByteCount - handle->remainingSendByteCount) / 2 < handle->
 413              		.loc 1 1112 0 discriminator 1
 414 00e6 B6EB500F 		cmp	r6, r0, lsr #1
 415 00ea BAD8     		bhi	.L27
 416 00ec 70BD     		pop	{r4, r5, r6, pc}
 417              	.L28:
1185:../drivers/fsl_dspi.c ****             }
 418              		.loc 1 1185 0
 419 00ee 0346     		mov	r3, r0
 420              	.LVL39:
 421 00f0 A4E7     		b	.L29
 422              	.L46:
 423 00f2 00BF     		.align	2
 424              	.L45:
 425 00f4 00000000 		.word	.LANCHOR2
 426              		.cfi_endproc
 427              	.LFE191:
 429              		.section	.text.DSPI_MasterTransferHandleIRQ,"ax",%progbits
 430              		.align	1
 431              		.global	DSPI_MasterTransferHandleIRQ
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv4-sp-d16
 437              	DSPI_MasterTransferHandleIRQ:
 438              	.LFB193:
1226:../drivers/fsl_dspi.c ****     assert(handle);
 439              		.loc 1 1226 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              	.LVL40:
1230:../drivers/fsl_dspi.c ****     {
 444              		.loc 1 1230 0
 445 0000 CB69     		ldr	r3, [r1, #28]
1226:../drivers/fsl_dspi.c ****     assert(handle);
 446              		.loc 1 1226 0
 447 0002 70B5     		push	{r4, r5, r6, lr}
 448              		.cfi_def_cfa_offset 16
 449              		.cfi_offset 4, -16
 450              		.cfi_offset 5, -12
 451              		.cfi_offset 6, -8
 452              		.cfi_offset 14, -4
1226:../drivers/fsl_dspi.c ****     assert(handle);
 453              		.loc 1 1226 0
 454 0004 0546     		mov	r5, r0
 455 0006 0C46     		mov	r4, r1
1230:../drivers/fsl_dspi.c ****     {
 456              		.loc 1 1230 0
 457 0008 23BB     		cbnz	r3, .L48
 458              	.LVL41:
 459              	.L57:
1318:../drivers/fsl_dspi.c ****     {
 460              		.loc 1 1318 0
 461 000a A369     		ldr	r3, [r4, #24]
 462 000c 1BB1     		cbz	r3, .L50
1320:../drivers/fsl_dspi.c ****     }
 463              		.loc 1 1320 0
 464 000e 2146     		mov	r1, r4
 465 0010 2846     		mov	r0, r5
 466              	.LVL42:
 467 0012 FFF7FEFF 		bl	DSPI_MasterTransferFillUpTxFifo
 468              	.LVL43:
 469              	.L50:
1324:../drivers/fsl_dspi.c ****     {
 470              		.loc 1 1324 0
 471 0016 A369     		ldr	r3, [r4, #24]
 472 0018 002B     		cmp	r3, #0
 473 001a 5BD1     		bne	.L47
1324:../drivers/fsl_dspi.c ****     {
 474              		.loc 1 1324 0 is_stmt 0 discriminator 1
 475 001c E169     		ldr	r1, [r4, #28]
 476 001e 0029     		cmp	r1, #0
 477 0020 58D1     		bne	.L47
 478              	.LVL44:
 479              	.LBB240:
 480              	.LBB241:
 481              	.LBB242:
 482              	.LBB243:
 620:../drivers/fsl_dspi.h **** }
 483              		.loc 2 620 0 is_stmt 1
 484 0022 2B6B     		ldr	r3, [r5, #48]
 485              	.LBE243:
 486              	.LBE242:
1087:../drivers/fsl_dspi.c ****     {
 487              		.loc 1 1087 0
 488 0024 A66A     		ldr	r6, [r4, #40]
 489              	.LBB245:
 490              	.LBB244:
 620:../drivers/fsl_dspi.h **** }
 491              		.loc 2 620 0
 492 0026 23F00073 		bic	r3, r3, #33554432
 493 002a 23F40033 		bic	r3, r3, #131072
 494 002e 2B63     		str	r3, [r5, #48]
 495              	.LVL45:
 496              	.LBE244:
 497              	.LBE245:
1076:../drivers/fsl_dspi.c ****     {
 498              		.loc 1 1076 0
 499 0030 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
1085:../drivers/fsl_dspi.c **** 
 500              		.loc 1 1085 0
 501 0034 84F82410 		strb	r1, [r4, #36]
1082:../drivers/fsl_dspi.c ****     }
 502              		.loc 1 1082 0
 503 0038 022B     		cmp	r3, #2
 504 003a 40F25922 		movw	r2, #601
 505 003e 18BF     		it	ne
 506 0040 0022     		movne	r2, #0
 507              	.LVL46:
1087:../drivers/fsl_dspi.c ****     {
 508              		.loc 1 1087 0
 509 0042 002E     		cmp	r6, #0
 510 0044 46D0     		beq	.L47
1089:../drivers/fsl_dspi.c ****     }
 511              		.loc 1 1089 0
 512 0046 E36A     		ldr	r3, [r4, #44]
 513 0048 2146     		mov	r1, r4
 514 004a 2846     		mov	r0, r5
 515 004c B446     		mov	ip, r6
 516              	.LBE241:
 517              	.LBE240:
1329:../drivers/fsl_dspi.c **** 
 518              		.loc 1 1329 0
 519 004e BDE87040 		pop	{r4, r5, r6, lr}
 520              		.cfi_remember_state
 521              		.cfi_restore 14
 522              		.cfi_restore 6
 523              		.cfi_restore 5
 524              		.cfi_restore 4
 525              		.cfi_def_cfa_offset 0
 526              	.LVL47:
 527              	.LBB247:
 528              	.LBB246:
1089:../drivers/fsl_dspi.c ****     }
 529              		.loc 1 1089 0
 530 0052 6047     		bx	ip	@ indirect register sibling call
 531              	.LVL48:
 532              	.L48:
 533              		.cfi_restore_state
 534              	.LBE246:
 535              	.LBE247:
 536              	.LBB248:
1236:../drivers/fsl_dspi.c ****         {
 537              		.loc 1 1236 0
 538 0054 0B68     		ldr	r3, [r1]
 539 0056 082B     		cmp	r3, #8
 540 0058 39D8     		bhi	.L51
 541              	.LBB249:
 542              	.LBB250:
 580:../drivers/fsl_dspi.h **** }
 543              		.loc 2 580 0
 544 005a 4FF40032 		mov	r2, #131072
 545              	.LVL49:
 546              	.L52:
 547              	.LBE250:
 548              	.LBE249:
 549              	.LBB252:
 550              	.LBB253:
 561:../drivers/fsl_dspi.h **** }
 551              		.loc 2 561 0
 552 005e EB6A     		ldr	r3, [r5, #44]
 553              	.LVL50:
 554              	.LBE253:
 555              	.LBE252:
1288:../drivers/fsl_dspi.c ****             {
 556              		.loc 1 1288 0
 557 0060 9B03     		lsls	r3, r3, #14
 558 0062 D2D5     		bpl	.L57
 559              	.LVL51:
 560              	.LBB254:
 561              	.LBB255:
 968:../drivers/fsl_dspi.h **** 
 969:../drivers/fsl_dspi.h **** /*!
 970:../drivers/fsl_dspi.h ****  * @brief Writes a 32-bit data word (16-bit command appended with 16-bit data) into the data
 971:../drivers/fsl_dspi.h ****  *        buffer master mode and waits till complete to return.
 972:../drivers/fsl_dspi.h ****  *
 973:../drivers/fsl_dspi.h ****  * In this function, the user must append the 16-bit data to the 16-bit command information and the
 974:../drivers/fsl_dspi.h **** * 32-bit word
 975:../drivers/fsl_dspi.h ****  * as the data to send.
 976:../drivers/fsl_dspi.h ****  * The command portion provides characteristics of the data, such as the optional continuous chip s
 977:../drivers/fsl_dspi.h ****  * between transfers, the desired Clock and Transfer Attributes register to use for the associated 
 978:../drivers/fsl_dspi.h **** * desired PCS
 979:../drivers/fsl_dspi.h ****  * signal to use for the data transfer, whether the current transfer is the last in the queue, and 
 980:../drivers/fsl_dspi.h ****  * transfer count (normally needed when sending the first frame of a data packet). The user is resp
 981:../drivers/fsl_dspi.h ****  * appending this command with the data to send. This is an example:
 982:../drivers/fsl_dspi.h ****  * @code
 983:../drivers/fsl_dspi.h ****  *  dataWord = <16-bit command> | <16-bit data>;
 984:../drivers/fsl_dspi.h ****  *  DSPI_MasterWriteCommandDataBlocking(base, dataWord);
 985:../drivers/fsl_dspi.h ****  * @endcode
 986:../drivers/fsl_dspi.h ****  *
 987:../drivers/fsl_dspi.h ****  * Note that this function does not return until after the transmit is complete. Also note that the
 988:../drivers/fsl_dspi.h ****  * enabled and running to transmit data (MCR[MDIS] & [HALT] = 0).
 989:../drivers/fsl_dspi.h ****  * Because the SPI is a synchronous protocol, the received data is available when the transmit comp
 990:../drivers/fsl_dspi.h ****  *
 991:../drivers/fsl_dspi.h ****  *  For a blocking polling transfer, see methods below.
 992:../drivers/fsl_dspi.h ****  *  Option 1:
 993:../drivers/fsl_dspi.h **** *   uint32_t command_to_send = DSPI_MasterGetFormattedCommand(&command);
 994:../drivers/fsl_dspi.h **** *   uint32_t data0 = command_to_send | data_need_to_send_0;
 995:../drivers/fsl_dspi.h **** *   uint32_t data1 = command_to_send | data_need_to_send_1;
 996:../drivers/fsl_dspi.h **** *   uint32_t data2 = command_to_send | data_need_to_send_2;
 997:../drivers/fsl_dspi.h **** *
 998:../drivers/fsl_dspi.h **** *   DSPI_MasterWriteCommandDataBlocking(base,data0);
 999:../drivers/fsl_dspi.h **** *   DSPI_MasterWriteCommandDataBlocking(base,data1);
1000:../drivers/fsl_dspi.h **** *   DSPI_MasterWriteCommandDataBlocking(base,data2);
1001:../drivers/fsl_dspi.h **** *
1002:../drivers/fsl_dspi.h **** *  Option 2:
1003:../drivers/fsl_dspi.h **** *   DSPI_MasterWriteDataBlocking(base,&command,data_need_to_send_0);
1004:../drivers/fsl_dspi.h **** *   DSPI_MasterWriteDataBlocking(base,&command,data_need_to_send_1);
1005:../drivers/fsl_dspi.h **** *   DSPI_MasterWriteDataBlocking(base,&command,data_need_to_send_2);
1006:../drivers/fsl_dspi.h **** *
1007:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
1008:../drivers/fsl_dspi.h ****  * @param data The data word (command and data combined) to be sent.
1009:../drivers/fsl_dspi.h ****  */
1010:../drivers/fsl_dspi.h **** void DSPI_MasterWriteCommandDataBlocking(SPI_Type *base, uint32_t data);
1011:../drivers/fsl_dspi.h **** 
1012:../drivers/fsl_dspi.h **** /*!
1013:../drivers/fsl_dspi.h ****  * @brief Writes data into the data buffer in slave mode.
1014:../drivers/fsl_dspi.h ****  *
1015:../drivers/fsl_dspi.h ****  * In slave mode, up to 16-bit words may be written.
1016:../drivers/fsl_dspi.h ****  *
1017:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
1018:../drivers/fsl_dspi.h ****  * @param data The data to send.
1019:../drivers/fsl_dspi.h ****  */
1020:../drivers/fsl_dspi.h **** static inline void DSPI_SlaveWriteData(SPI_Type *base, uint32_t data)
1021:../drivers/fsl_dspi.h **** {
1022:../drivers/fsl_dspi.h ****     base->PUSHR_SLAVE = data;
1023:../drivers/fsl_dspi.h **** }
1024:../drivers/fsl_dspi.h **** 
1025:../drivers/fsl_dspi.h **** /*!
1026:../drivers/fsl_dspi.h ****  * @brief Writes data into the data buffer in slave mode, waits till data was transmitted, and retu
1027:../drivers/fsl_dspi.h ****  *
1028:../drivers/fsl_dspi.h ****  * In slave mode, up to 16-bit words may be written. The function first clears the transmit complet
1029:../drivers/fsl_dspi.h ****  * into data register, and finally waits until the data is transmitted.
1030:../drivers/fsl_dspi.h ****  *
1031:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
1032:../drivers/fsl_dspi.h ****  * @param data The data to send.
1033:../drivers/fsl_dspi.h ****  */
1034:../drivers/fsl_dspi.h **** void DSPI_SlaveWriteDataBlocking(SPI_Type *base, uint32_t data);
1035:../drivers/fsl_dspi.h **** 
1036:../drivers/fsl_dspi.h **** /*!
1037:../drivers/fsl_dspi.h ****  * @brief Reads data from the data buffer.
1038:../drivers/fsl_dspi.h ****  *
1039:../drivers/fsl_dspi.h ****  * @param base DSPI peripheral address.
1040:../drivers/fsl_dspi.h ****  * @return The data from the read data buffer.
1041:../drivers/fsl_dspi.h ****  */
1042:../drivers/fsl_dspi.h **** static inline uint32_t DSPI_ReadData(SPI_Type *base)
1043:../drivers/fsl_dspi.h **** {
1044:../drivers/fsl_dspi.h ****     return (base->POPR);
 562              		.loc 2 1044 0
 563 0064 A96B     		ldr	r1, [r5, #56]
 564              	.LVL52:
 565              	.LBE255:
 566              	.LBE254:
 567              	.LBB256:
 568              	.LBB251:
 580:../drivers/fsl_dspi.h **** }
 569              		.loc 2 580 0
 570 0066 EA62     		str	r2, [r5, #44]
 571              	.LVL53:
 572              	.LBE251:
 573              	.LBE256:
1299:../drivers/fsl_dspi.c ****                 {
 574              		.loc 1 1299 0
 575 0068 6369     		ldr	r3, [r4, #20]
 576 006a 23B1     		cbz	r3, .L59
1301:../drivers/fsl_dspi.c ****                     ++handle->rxData;
 577              		.loc 1 1301 0
 578 006c 6369     		ldr	r3, [r4, #20]
 579 006e 1970     		strb	r1, [r3]
1302:../drivers/fsl_dspi.c ****                 }
 580              		.loc 1 1302 0
 581 0070 6369     		ldr	r3, [r4, #20]
 582 0072 0133     		adds	r3, r3, #1
 583 0074 6361     		str	r3, [r4, #20]
 584              	.L59:
1305:../drivers/fsl_dspi.c **** 
 585              		.loc 1 1305 0
 586 0076 E369     		ldr	r3, [r4, #28]
 587 0078 013B     		subs	r3, r3, #1
 588 007a E361     		str	r3, [r4, #28]
1307:../drivers/fsl_dspi.c ****                 {
 589              		.loc 1 1307 0
 590 007c E369     		ldr	r3, [r4, #28]
 591 007e 002B     		cmp	r3, #0
 592 0080 EDD1     		bne	.L52
 593 0082 C2E7     		b	.L57
 594              	.LVL54:
 595              	.L58:
 596              	.LBB257:
 597              	.LBB258:
 598              		.loc 2 1044 0
 599 0084 AB6B     		ldr	r3, [r5, #56]
 600              	.LVL55:
 601              	.LBE258:
 602              	.LBE257:
 603              	.LBB259:
 604              	.LBB260:
 580:../drivers/fsl_dspi.h **** }
 605              		.loc 2 580 0
 606 0086 E962     		str	r1, [r5, #44]
 607              	.LVL56:
 608              	.LBE260:
 609              	.LBE259:
1249:../drivers/fsl_dspi.c ****                 {
 610              		.loc 1 1249 0
 611 0088 6269     		ldr	r2, [r4, #20]
 612 008a DAB1     		cbz	r2, .L53
1254:../drivers/fsl_dspi.c ****                     {
 613              		.loc 1 1254 0
 614 008c E269     		ldr	r2, [r4, #28]
 615 008e 012A     		cmp	r2, #1
1256:../drivers/fsl_dspi.c ****                         --handle->remainingReceiveByteCount;
 616              		.loc 1 1256 0
 617 0090 6269     		ldr	r2, [r4, #20]
 618 0092 1370     		strb	r3, [r2]
1254:../drivers/fsl_dspi.c ****                     {
 619              		.loc 1 1254 0
 620 0094 09D1     		bne	.L54
1257:../drivers/fsl_dspi.c ****                     }
 621              		.loc 1 1257 0
 622 0096 E369     		ldr	r3, [r4, #28]
 623              	.LVL57:
 624              	.L80:
1272:../drivers/fsl_dspi.c ****                     }
 625              		.loc 1 1272 0
 626 0098 013B     		subs	r3, r3, #1
 627              	.L79:
1276:../drivers/fsl_dspi.c ****                     }
 628              		.loc 1 1276 0
 629 009a E361     		str	r3, [r4, #28]
1279:../drivers/fsl_dspi.c ****                 {
 630              		.loc 1 1279 0
 631 009c E369     		ldr	r3, [r4, #28]
 632 009e 002B     		cmp	r3, #0
 633 00a0 B3D0     		beq	.L57
 634              	.L78:
 635              	.LVL58:
 636              	.LBB262:
 637              	.LBB263:
 561:../drivers/fsl_dspi.h **** }
 638              		.loc 2 561 0
 639 00a2 EB6A     		ldr	r3, [r5, #44]
 640              	.LVL59:
 641              	.LBE263:
 642              	.LBE262:
1238:../drivers/fsl_dspi.c ****             {
 643              		.loc 1 1238 0
 644 00a4 9A03     		lsls	r2, r3, #14
 645 00a6 EDD4     		bmi	.L58
 646 00a8 AFE7     		b	.L57
 647              	.LVL60:
 648              	.L54:
1262:../drivers/fsl_dspi.c ****                         *handle->rxData = wordReceived >> 8; /* Write second data byte */
 649              		.loc 1 1262 0
 650 00aa 6269     		ldr	r2, [r4, #20]
 651 00ac 0132     		adds	r2, r2, #1
 652 00ae 6261     		str	r2, [r4, #20]
1263:../drivers/fsl_dspi.c ****                         ++handle->rxData;                    /* increment to next data byte */
 653              		.loc 1 1263 0
 654 00b0 6269     		ldr	r2, [r4, #20]
 655 00b2 C3F30723 		ubfx	r3, r3, #8, #8
 656              	.LVL61:
 657 00b6 1370     		strb	r3, [r2]
1264:../drivers/fsl_dspi.c ****                         handle->remainingReceiveByteCount -= 2;
 658              		.loc 1 1264 0
 659 00b8 6369     		ldr	r3, [r4, #20]
 660 00ba 0133     		adds	r3, r3, #1
 661 00bc 6361     		str	r3, [r4, #20]
1265:../drivers/fsl_dspi.c ****                     }
 662              		.loc 1 1265 0
 663 00be E369     		ldr	r3, [r4, #28]
 664              	.L56:
1276:../drivers/fsl_dspi.c ****                     }
 665              		.loc 1 1276 0
 666 00c0 023B     		subs	r3, r3, #2
 667 00c2 EAE7     		b	.L79
 668              	.LVL62:
 669              	.L53:
1270:../drivers/fsl_dspi.c ****                     {
 670              		.loc 1 1270 0
 671 00c4 E369     		ldr	r3, [r4, #28]
 672              	.LVL63:
 673 00c6 012B     		cmp	r3, #1
1272:../drivers/fsl_dspi.c ****                     }
 674              		.loc 1 1272 0
 675 00c8 E369     		ldr	r3, [r4, #28]
1270:../drivers/fsl_dspi.c ****                     {
 676              		.loc 1 1270 0
 677 00ca F9D1     		bne	.L56
 678 00cc E4E7     		b	.L80
 679              	.LVL64:
 680              	.L51:
 681              	.LBB264:
 682              	.LBB261:
 580:../drivers/fsl_dspi.h **** }
 683              		.loc 2 580 0
 684 00ce 4FF40031 		mov	r1, #131072
 685              	.LVL65:
 686 00d2 E6E7     		b	.L78
 687              	.LVL66:
 688              	.L47:
 689 00d4 70BD     		pop	{r4, r5, r6, pc}
 690              	.LBE261:
 691              	.LBE264:
 692              	.LBE248:
 693              		.cfi_endproc
 694              	.LFE193:
 696              		.section	.text.DSPI_SlaveTransferHandleIRQ,"ax",%progbits
 697              		.align	1
 698              		.global	DSPI_SlaveTransferHandleIRQ
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu fpv4-sp-d16
 704              	DSPI_SlaveTransferHandleIRQ:
 705              	.LFB200:
1573:../drivers/fsl_dspi.c ****     assert(handle);
 706              		.loc 1 1573 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              	.LVL67:
 711 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 712              		.cfi_def_cfa_offset 24
 713              		.cfi_offset 4, -24
 714              		.cfi_offset 5, -20
 715              		.cfi_offset 6, -16
 716              		.cfi_offset 7, -12
 717              		.cfi_offset 8, -8
 718              		.cfi_offset 14, -4
1573:../drivers/fsl_dspi.c ****     assert(handle);
 719              		.loc 1 1573 0
 720 0004 0446     		mov	r4, r0
1576:../drivers/fsl_dspi.c ****     uint32_t dataReceived;
 721              		.loc 1 1576 0
 722 0006 FFF7FEFF 		bl	DSPI_GetInstance
 723              	.LVL68:
 724 000a 5D4B     		ldr	r3, .L147
 725 000c 1A5C     		ldrb	r2, [r3, r0]	@ zero_extendqisi2
1584:../drivers/fsl_dspi.c ****     {
 726              		.loc 1 1584 0
 727 000e 4B69     		ldr	r3, [r1, #20]
1576:../drivers/fsl_dspi.c ****     uint32_t dataReceived;
 728              		.loc 1 1576 0
 729 0010 D2B2     		uxtb	r2, r2
 730              	.LVL69:
1584:../drivers/fsl_dspi.c ****     {
 731              		.loc 1 1584 0
 732 0012 FBB9     		cbnz	r3, .L82
 733              	.LVL70:
 734              	.L102:
1710:../drivers/fsl_dspi.c ****     {
 735              		.loc 1 1710 0
 736 0014 4B69     		ldr	r3, [r1, #20]
 737 0016 002B     		cmp	r3, #0
 738 0018 40F08C80 		bne	.L143
 739              	.L83:
 740              	.LVL71:
 741              	.LBB283:
 742              	.LBB284:
 743              	.LBB285:
 744              	.LBB286:
 620:../drivers/fsl_dspi.h **** }
 745              		.loc 2 620 0
 746 001c 236B     		ldr	r3, [r4, #48]
 747              	.LBE286:
 748              	.LBE285:
1551:../drivers/fsl_dspi.c ****     {
 749              		.loc 1 1551 0
 750 001e 4D6A     		ldr	r5, [r1, #36]
 751              	.LBB288:
 752              	.LBB287:
 620:../drivers/fsl_dspi.h **** }
 753              		.loc 2 620 0
 754 0020 23F02063 		bic	r3, r3, #167772160
 755 0024 23F42023 		bic	r3, r3, #655360
 756 0028 2363     		str	r3, [r4, #48]
 757              	.LVL72:
 758              	.LBE287:
 759              	.LBE288:
1534:../drivers/fsl_dspi.c ****     handle->rxData = NULL;
 760              		.loc 1 1534 0
 761 002a 0023     		movs	r3, #0
 762 002c 8B60     		str	r3, [r1, #8]
1535:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = 0;
 763              		.loc 1 1535 0
 764 002e CB60     		str	r3, [r1, #12]
1536:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = 0;
 765              		.loc 1 1536 0
 766 0030 4B61     		str	r3, [r1, #20]
1537:../drivers/fsl_dspi.c **** 
 767              		.loc 1 1537 0
 768 0032 0B61     		str	r3, [r1, #16]
 769              	.LVL73:
1540:../drivers/fsl_dspi.c ****     {
 770              		.loc 1 1540 0
 771 0034 0A7F     		ldrb	r2, [r1, #28]	@ zero_extendqisi2
 772              	.LVL74:
1549:../drivers/fsl_dspi.c **** 
 773              		.loc 1 1549 0
 774 0036 0B77     		strb	r3, [r1, #28]
1546:../drivers/fsl_dspi.c ****     }
 775              		.loc 1 1546 0
 776 0038 022A     		cmp	r2, #2
 777 003a 40F25922 		movw	r2, #601
 778 003e 18BF     		it	ne
 779 0040 1A46     		movne	r2, r3
 780              	.LVL75:
1551:../drivers/fsl_dspi.c ****     {
 781              		.loc 1 1551 0
 782 0042 002D     		cmp	r5, #0
 783 0044 00F09A80 		beq	.L81
1553:../drivers/fsl_dspi.c ****     }
 784              		.loc 1 1553 0
 785 0048 2046     		mov	r0, r4
 786 004a AC46     		mov	ip, r5
 787 004c 8B6A     		ldr	r3, [r1, #40]
 788              	.LBE284:
 789              	.LBE283:
1739:../drivers/fsl_dspi.c **** 
 790              		.loc 1 1739 0
 791 004e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 792              		.cfi_remember_state
 793              		.cfi_restore 14
 794              		.cfi_restore 8
 795              		.cfi_restore 7
 796              		.cfi_restore 6
 797              		.cfi_restore 5
 798              		.cfi_restore 4
 799              		.cfi_def_cfa_offset 0
 800              	.LVL76:
 801              	.LBB290:
 802              	.LBB289:
1553:../drivers/fsl_dspi.c ****     }
 803              		.loc 1 1553 0
 804 0052 6047     		bx	ip	@ indirect register sibling call
 805              	.LVL77:
 806              	.L82:
 807              		.cfi_restore_state
 808              	.LBE289:
 809              	.LBE290:
1694:../drivers/fsl_dspi.c ****                     }
 810              		.loc 1 1694 0
 811 0054 1002     		lsls	r0, r2, #8
 812 0056 40EA0205 		orr	r5, r0, r2
 813              	.LBB291:
 814              	.LBB292:
 580:../drivers/fsl_dspi.h **** }
 815              		.loc 2 580 0
 816 005a 4FF40036 		mov	r6, #131072
 817              	.LBE292:
 818              	.LBE291:
 819              	.LBB294:
 820              	.LBB295:
 821 005e 4FF0007E 		mov	lr, #33554432
 822              	.LVL78:
 823              	.L85:
 824              	.LBE295:
 825              	.LBE294:
 826              	.LBB297:
 827              	.LBB298:
 561:../drivers/fsl_dspi.h **** }
 828              		.loc 2 561 0
 829 0062 E36A     		ldr	r3, [r4, #44]
 830              	.LVL79:
 831              	.LBE298:
 832              	.LBE297:
1586:../drivers/fsl_dspi.c ****         {
 833              		.loc 1 1586 0
 834 0064 9F03     		lsls	r7, r3, #14
 835 0066 D5D5     		bpl	.L102
1598:../drivers/fsl_dspi.c ****             {
 836              		.loc 1 1598 0
 837 0068 0F68     		ldr	r7, [r1]
1589:../drivers/fsl_dspi.c ****             /*Clear the rx fifo drain request, needed for non-DMA applications as this flag
 838              		.loc 1 1589 0
 839 006a A36B     		ldr	r3, [r4, #56]
 840              	.LVL80:
 841              	.LBB299:
 842              	.LBB293:
 580:../drivers/fsl_dspi.h **** }
 843              		.loc 2 580 0
 844 006c E662     		str	r6, [r4, #44]
 845              	.LVL81:
 846              	.LBE293:
 847              	.LBE299:
1598:../drivers/fsl_dspi.c ****             {
 848              		.loc 1 1598 0
 849 006e 082F     		cmp	r7, #8
1600:../drivers/fsl_dspi.c ****                 {
 850              		.loc 1 1600 0
 851 0070 CF68     		ldr	r7, [r1, #12]
1598:../drivers/fsl_dspi.c ****             {
 852              		.loc 1 1598 0
 853 0072 1DD8     		bhi	.L86
1600:../drivers/fsl_dspi.c ****                 {
 854              		.loc 1 1600 0
 855 0074 27B1     		cbz	r7, .L87
1603:../drivers/fsl_dspi.c ****                     ++handle->rxData;
 856              		.loc 1 1603 0
 857 0076 CF68     		ldr	r7, [r1, #12]
 858 0078 3B70     		strb	r3, [r7]
1604:../drivers/fsl_dspi.c ****                 }
 859              		.loc 1 1604 0
 860 007a CB68     		ldr	r3, [r1, #12]
 861              	.LVL82:
 862 007c 0133     		adds	r3, r3, #1
 863 007e CB60     		str	r3, [r1, #12]
 864              	.L87:
1607:../drivers/fsl_dspi.c **** 
 865              		.loc 1 1607 0
 866 0080 4B69     		ldr	r3, [r1, #20]
 867 0082 013B     		subs	r3, r3, #1
 868 0084 4B61     		str	r3, [r1, #20]
1609:../drivers/fsl_dspi.c ****                 {
 869              		.loc 1 1609 0
 870 0086 0B69     		ldr	r3, [r1, #16]
 871 0088 53B1     		cbz	r3, .L89
1611:../drivers/fsl_dspi.c ****                     {
 872              		.loc 1 1611 0
 873 008a 8B68     		ldr	r3, [r1, #8]
 874 008c 73B1     		cbz	r3, .L90
1613:../drivers/fsl_dspi.c ****                         ++handle->txData;
 875              		.loc 1 1613 0
 876 008e 8B68     		ldr	r3, [r1, #8]
 877 0090 1F78     		ldrb	r7, [r3]	@ zero_extendqisi2
 878              	.LVL83:
1614:../drivers/fsl_dspi.c ****                     }
 879              		.loc 1 1614 0
 880 0092 8B68     		ldr	r3, [r1, #8]
 881 0094 0133     		adds	r3, r3, #1
 882 0096 8B60     		str	r3, [r1, #8]
 883              	.LVL84:
 884              	.L91:
1621:../drivers/fsl_dspi.c ****                     /* Write the data to the DSPI data register */
 885              		.loc 1 1621 0
 886 0098 0B69     		ldr	r3, [r1, #16]
 887 009a 013B     		subs	r3, r3, #1
 888 009c 0B61     		str	r3, [r1, #16]
1623:../drivers/fsl_dspi.c ****                 }
 889              		.loc 1 1623 0
 890 009e 6763     		str	r7, [r4, #52]
 891              	.LVL85:
 892              	.L89:
 893              	.LBB300:
 894              	.LBB296:
 580:../drivers/fsl_dspi.h **** }
 895              		.loc 2 580 0
 896 00a0 C4F82CE0 		str	lr, [r4, #44]
 897              	.LVL86:
 898              	.LBE296:
 899              	.LBE300:
1703:../drivers/fsl_dspi.c ****             {
 900              		.loc 1 1703 0
 901 00a4 4B69     		ldr	r3, [r1, #20]
 902 00a6 002B     		cmp	r3, #0
 903 00a8 DBD1     		bne	.L85
 904 00aa B3E7     		b	.L102
 905              	.L90:
1618:../drivers/fsl_dspi.c ****                     }
 906              		.loc 1 1618 0
 907 00ac 1746     		mov	r7, r2
 908 00ae F3E7     		b	.L91
 909              	.LVL87:
 910              	.L86:
1631:../drivers/fsl_dspi.c ****                 {
 911              		.loc 1 1631 0
 912 00b0 37B3     		cbz	r7, .L92
1634:../drivers/fsl_dspi.c ****                     ++handle->rxData;
 913              		.loc 1 1634 0
 914 00b2 CF68     		ldr	r7, [r1, #12]
 915 00b4 3B70     		strb	r3, [r7]
1635:../drivers/fsl_dspi.c **** 
 916              		.loc 1 1635 0
 917 00b6 CF68     		ldr	r7, [r1, #12]
 918 00b8 0137     		adds	r7, r7, #1
 919 00ba CF60     		str	r7, [r1, #12]
1637:../drivers/fsl_dspi.c ****                     {
 920              		.loc 1 1637 0
 921 00bc 4F69     		ldr	r7, [r1, #20]
 922 00be 012F     		cmp	r7, #1
 923 00c0 15D1     		bne	.L93
1640:../drivers/fsl_dspi.c ****                     }
 924              		.loc 1 1640 0
 925 00c2 4B69     		ldr	r3, [r1, #20]
 926              	.LVL88:
 927              	.L146:
1656:../drivers/fsl_dspi.c ****                     }
 928              		.loc 1 1656 0
 929 00c4 013B     		subs	r3, r3, #1
 930              	.L144:
1660:../drivers/fsl_dspi.c ****                     }
 931              		.loc 1 1660 0
 932 00c6 4B61     		str	r3, [r1, #20]
1664:../drivers/fsl_dspi.c ****                 {
 933              		.loc 1 1664 0
 934 00c8 0B69     		ldr	r3, [r1, #16]
 935 00ca 002B     		cmp	r3, #0
 936 00cc E8D0     		beq	.L89
1666:../drivers/fsl_dspi.c ****                     {
 937              		.loc 1 1666 0
 938 00ce 8B68     		ldr	r3, [r1, #8]
 939 00d0 33B3     		cbz	r3, .L97
1668:../drivers/fsl_dspi.c ****                         ++handle->txData;
 940              		.loc 1 1668 0
 941 00d2 8B68     		ldr	r3, [r1, #8]
1669:../drivers/fsl_dspi.c **** 
 942              		.loc 1 1669 0
 943 00d4 8F68     		ldr	r7, [r1, #8]
1668:../drivers/fsl_dspi.c ****                         ++handle->txData;
 944              		.loc 1 1668 0
 945 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 946              	.LVL89:
1669:../drivers/fsl_dspi.c **** 
 947              		.loc 1 1669 0
 948 00d8 0137     		adds	r7, r7, #1
 949 00da 8F60     		str	r7, [r1, #8]
1671:../drivers/fsl_dspi.c ****                         {
 950              		.loc 1 1671 0
 951 00dc 0F69     		ldr	r7, [r1, #16]
 952 00de 012F     		cmp	r7, #1
 953 00e0 13D1     		bne	.L98
1673:../drivers/fsl_dspi.c ****                             dataSend |= (uint16_t)((uint16_t)(dummyPattern) << 8);
 954              		.loc 1 1673 0
 955 00e2 0F69     		ldr	r7, [r1, #16]
 956 00e4 013F     		subs	r7, r7, #1
 957 00e6 0F61     		str	r7, [r1, #16]
1674:../drivers/fsl_dspi.c ****                         }
 958              		.loc 1 1674 0
 959 00e8 0343     		orrs	r3, r3, r0
 960              	.LVL90:
 961              	.L99:
1697:../drivers/fsl_dspi.c ****                 }
 962              		.loc 1 1697 0
 963 00ea 6363     		str	r3, [r4, #52]
 964 00ec D8E7     		b	.L89
 965              	.LVL91:
 966              	.L93:
1645:../drivers/fsl_dspi.c ****                         ++handle->rxData;
 967              		.loc 1 1645 0
 968 00ee CF68     		ldr	r7, [r1, #12]
 969 00f0 1B0A     		lsrs	r3, r3, #8
 970              	.LVL92:
 971 00f2 3B70     		strb	r3, [r7]
1646:../drivers/fsl_dspi.c ****                         handle->remainingReceiveByteCount -= 2;
 972              		.loc 1 1646 0
 973 00f4 CB68     		ldr	r3, [r1, #12]
 974 00f6 0133     		adds	r3, r3, #1
 975 00f8 CB60     		str	r3, [r1, #12]
1647:../drivers/fsl_dspi.c ****                     }
 976              		.loc 1 1647 0
 977 00fa 4B69     		ldr	r3, [r1, #20]
 978              	.L95:
1660:../drivers/fsl_dspi.c ****                     }
 979              		.loc 1 1660 0
 980 00fc 023B     		subs	r3, r3, #2
 981 00fe E2E7     		b	.L144
 982              	.LVL93:
 983              	.L92:
1653:../drivers/fsl_dspi.c ****                     {
 984              		.loc 1 1653 0
 985 0100 4B69     		ldr	r3, [r1, #20]
 986              	.LVL94:
 987 0102 012B     		cmp	r3, #1
1656:../drivers/fsl_dspi.c ****                     }
 988              		.loc 1 1656 0
 989 0104 4B69     		ldr	r3, [r1, #20]
1653:../drivers/fsl_dspi.c ****                     {
 990              		.loc 1 1653 0
 991 0106 F9D1     		bne	.L95
 992 0108 DCE7     		b	.L146
 993              	.LVL95:
 994              	.L98:
1678:../drivers/fsl_dspi.c ****                             ++handle->txData;
 995              		.loc 1 1678 0
 996 010a 8F68     		ldr	r7, [r1, #8]
 997 010c 3F78     		ldrb	r7, [r7]	@ zero_extendqisi2
 998 010e 43EA0723 		orr	r3, r3, r7, lsl #8
 999              	.LVL96:
1679:../drivers/fsl_dspi.c ****                             handle->remainingSendByteCount -= 2;
 1000              		.loc 1 1679 0
 1001 0112 8F68     		ldr	r7, [r1, #8]
 1002 0114 0137     		adds	r7, r7, #1
 1003 0116 8F60     		str	r7, [r1, #8]
1680:../drivers/fsl_dspi.c ****                         }
 1004              		.loc 1 1680 0
 1005 0118 0F69     		ldr	r7, [r1, #16]
 1006 011a 023F     		subs	r7, r7, #2
 1007 011c 0F61     		str	r7, [r1, #16]
 1008 011e E4E7     		b	.L99
 1009              	.LVL97:
 1010              	.L97:
1686:../drivers/fsl_dspi.c ****                         {
 1011              		.loc 1 1686 0
 1012 0120 0B69     		ldr	r3, [r1, #16]
 1013 0122 012B     		cmp	r3, #1
1688:../drivers/fsl_dspi.c ****                         }
 1014              		.loc 1 1688 0
 1015 0124 0B69     		ldr	r3, [r1, #16]
 1016 0126 0CBF     		ite	eq
 1017 0128 03F1FF33 		addeq	r3, r3, #-1
1692:../drivers/fsl_dspi.c ****                         }
 1018              		.loc 1 1692 0
 1019 012c 023B     		subne	r3, r3, #2
 1020 012e 0B61     		str	r3, [r1, #16]
 1021              	.LVL98:
1694:../drivers/fsl_dspi.c ****                     }
 1022              		.loc 1 1694 0
 1023 0130 2B46     		mov	r3, r5
 1024 0132 DAE7     		b	.L99
 1025              	.LVL99:
 1026              	.L143:
1710:../drivers/fsl_dspi.c ****     {
 1027              		.loc 1 1710 0 discriminator 1
 1028 0134 0B7F     		ldrb	r3, [r1, #28]	@ zero_extendqisi2
 1029 0136 022B     		cmp	r3, #2
 1030 0138 3FF470AF 		beq	.L83
 1031              	.LVL100:
 1032              	.LBB301:
 1033              	.LBB302:
 561:../drivers/fsl_dspi.h **** }
 1034              		.loc 2 561 0
 1035 013c E36A     		ldr	r3, [r4, #44]
 1036              	.LVL101:
 1037              	.LBE302:
 1038              	.LBE301:
1718:../drivers/fsl_dspi.c ****     {
 1039              		.loc 1 1718 0
 1040 013e 1D01     		lsls	r5, r3, #4
 1041 0140 0CD5     		bpl	.L108
1718:../drivers/fsl_dspi.c ****     {
 1042              		.loc 1 1718 0 is_stmt 0 discriminator 1
 1043 0142 236B     		ldr	r3, [r4, #48]
 1044 0144 1801     		lsls	r0, r3, #4
 1045 0146 09D5     		bpl	.L108
 1046              	.LVL102:
 1047              	.LBB303:
 1048              	.LBB304:
 580:../drivers/fsl_dspi.h **** }
 1049              		.loc 2 580 0 is_stmt 1
 1050 0148 4FF00063 		mov	r3, #134217728
 1051 014c E362     		str	r3, [r4, #44]
 1052              	.LVL103:
 1053              	.LBE304:
 1054              	.LBE303:
1722:../drivers/fsl_dspi.c ****         {
 1055              		.loc 1 1722 0
 1056 014e 8B68     		ldr	r3, [r1, #8]
 1057 0150 0BB1     		cbz	r3, .L109
1724:../drivers/fsl_dspi.c ****         }
 1058              		.loc 1 1724 0
 1059 0152 0223     		movs	r3, #2
 1060 0154 0B77     		strb	r3, [r1, #28]
 1061              	.L109:
1726:../drivers/fsl_dspi.c ****     }
 1062              		.loc 1 1726 0
 1063 0156 0B6A     		ldr	r3, [r1, #32]
 1064 0158 0133     		adds	r3, r3, #1
 1065 015a 0B62     		str	r3, [r1, #32]
 1066              	.L108:
 1067              	.LVL104:
 1068              	.LBB305:
 1069              	.LBB306:
 561:../drivers/fsl_dspi.h **** }
 1070              		.loc 2 561 0
 1071 015c E36A     		ldr	r3, [r4, #44]
 1072              	.LVL105:
 1073              	.LBE306:
 1074              	.LBE305:
1729:../drivers/fsl_dspi.c ****     {
 1075              		.loc 1 1729 0
 1076 015e 1A03     		lsls	r2, r3, #12
 1077              	.LVL106:
 1078 0160 0CD5     		bpl	.L81
1729:../drivers/fsl_dspi.c ****     {
 1079              		.loc 1 1729 0 is_stmt 0 discriminator 1
 1080 0162 236B     		ldr	r3, [r4, #48]
 1081 0164 1B03     		lsls	r3, r3, #12
 1082 0166 09D5     		bpl	.L81
 1083              	.LVL107:
 1084              	.LBB307:
 1085              	.LBB308:
 580:../drivers/fsl_dspi.h **** }
 1086              		.loc 2 580 0 is_stmt 1
 1087 0168 4FF40023 		mov	r3, #524288
 1088 016c E362     		str	r3, [r4, #44]
 1089              	.LVL108:
 1090              	.LBE308:
 1091              	.LBE307:
1733:../drivers/fsl_dspi.c ****         {
 1092              		.loc 1 1733 0
 1093 016e 8B68     		ldr	r3, [r1, #8]
 1094 0170 0BB1     		cbz	r3, .L111
1735:../drivers/fsl_dspi.c ****         }
 1095              		.loc 1 1735 0
 1096 0172 0223     		movs	r3, #2
 1097 0174 0B77     		strb	r3, [r1, #28]
 1098              	.L111:
1737:../drivers/fsl_dspi.c ****     }
 1099              		.loc 1 1737 0
 1100 0176 0B6A     		ldr	r3, [r1, #32]
 1101 0178 0133     		adds	r3, r3, #1
 1102 017a 0B62     		str	r3, [r1, #32]
 1103              	.L81:
 1104 017c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1105              	.LVL109:
 1106              	.L148:
 1107              		.align	2
 1108              	.L147:
 1109 0180 00000000 		.word	.LANCHOR2
 1110              		.cfi_endproc
 1111              	.LFE200:
 1113              		.section	.text.DSPI_SetDummyData,"ax",%progbits
 1114              		.align	1
 1115              		.global	DSPI_SetDummyData
 1116              		.syntax unified
 1117              		.thumb
 1118              		.thumb_func
 1119              		.fpu fpv4-sp-d16
 1121              	DSPI_SetDummyData:
 1122              	.LFB168:
 168:../drivers/fsl_dspi.c ****     uint32_t instance = DSPI_GetInstance(base);
 1123              		.loc 1 168 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              	.LVL110:
 1128 0000 08B5     		push	{r3, lr}
 1129              		.cfi_def_cfa_offset 8
 1130              		.cfi_offset 3, -8
 1131              		.cfi_offset 14, -4
 169:../drivers/fsl_dspi.c ****     s_dummyData[instance] = dummyData;
 1132              		.loc 1 169 0
 1133 0002 FFF7FEFF 		bl	DSPI_GetInstance
 1134              	.LVL111:
 170:../drivers/fsl_dspi.c **** }
 1135              		.loc 1 170 0
 1136 0006 014B     		ldr	r3, .L150
 1137 0008 1954     		strb	r1, [r3, r0]
 1138 000a 08BD     		pop	{r3, pc}
 1139              	.L151:
 1140              		.align	2
 1141              	.L150:
 1142 000c 00000000 		.word	.LANCHOR2
 1143              		.cfi_endproc
 1144              	.LFE168:
 1146              		.section	.text.DSPI_MasterGetDefaultConfig,"ax",%progbits
 1147              		.align	1
 1148              		.global	DSPI_MasterGetDefaultConfig
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1152              		.fpu fpv4-sp-d16
 1154              	DSPI_MasterGetDefaultConfig:
 1155              	.LFB170:
 222:../drivers/fsl_dspi.c ****     assert(masterConfig);
 1156              		.loc 1 222 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
 1161              	.LVL112:
 226:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.bitsPerFrame = 8;
 1162              		.loc 1 226 0
 1163 0000 0B4A     		ldr	r2, .L153
 1164 0002 4260     		str	r2, [r0, #4]
 227:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.cpol = kDSPI_ClockPolarityActiveHigh;
 1165              		.loc 1 227 0
 1166 0004 0822     		movs	r2, #8
 1167 0006 8260     		str	r2, [r0, #8]
 232:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.lastSckToPcsDelayInNanoSec = 1000;
 1168              		.loc 1 232 0
 1169 0008 4FF47A72 		mov	r2, #1000
 225:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.baudRate = 500000;
 1170              		.loc 1 225 0
 1171 000c 0023     		movs	r3, #0
 232:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.lastSckToPcsDelayInNanoSec = 1000;
 1172              		.loc 1 232 0
 1173 000e 0261     		str	r2, [r0, #16]
 233:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.betweenTransferDelayInNanoSec = 1000;
 1174              		.loc 1 233 0
 1175 0010 4261     		str	r2, [r0, #20]
 234:../drivers/fsl_dspi.c **** 
 1176              		.loc 1 234 0
 1177 0012 8261     		str	r2, [r0, #24]
 236:../drivers/fsl_dspi.c ****     masterConfig->pcsActiveHighOrLow = kDSPI_PcsActiveLow;
 1178              		.loc 1 236 0
 1179 0014 0122     		movs	r2, #1
 225:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.baudRate = 500000;
 1180              		.loc 1 225 0
 1181 0016 0370     		strb	r3, [r0]
 228:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.cpha = kDSPI_ClockPhaseFirstEdge;
 1182              		.loc 1 228 0
 1183 0018 0373     		strb	r3, [r0, #12]
 229:../drivers/fsl_dspi.c ****     masterConfig->ctarConfig.direction = kDSPI_MsbFirst;
 1184              		.loc 1 229 0
 1185 001a 4373     		strb	r3, [r0, #13]
 230:../drivers/fsl_dspi.c **** 
 1186              		.loc 1 230 0
 1187 001c 8373     		strb	r3, [r0, #14]
 236:../drivers/fsl_dspi.c ****     masterConfig->pcsActiveHighOrLow = kDSPI_PcsActiveLow;
 1188              		.loc 1 236 0
 1189 001e 0277     		strb	r2, [r0, #28]
 237:../drivers/fsl_dspi.c **** 
 1190              		.loc 1 237 0
 1191 0020 4277     		strb	r2, [r0, #29]
 239:../drivers/fsl_dspi.c ****     masterConfig->enableRxFifoOverWrite = false;
 1192              		.loc 1 239 0
 1193 0022 8377     		strb	r3, [r0, #30]
 240:../drivers/fsl_dspi.c ****     masterConfig->enableModifiedTimingFormat = false;
 1194              		.loc 1 240 0
 1195 0024 C377     		strb	r3, [r0, #31]
 241:../drivers/fsl_dspi.c ****     masterConfig->samplePoint = kDSPI_SckToSin0Clock;
 1196              		.loc 1 241 0
 1197 0026 80F82030 		strb	r3, [r0, #32]
 242:../drivers/fsl_dspi.c **** }
 1198              		.loc 1 242 0
 1199 002a 80F82130 		strb	r3, [r0, #33]
 1200 002e 7047     		bx	lr
 1201              	.L154:
 1202              		.align	2
 1203              	.L153:
 1204 0030 20A10700 		.word	500000
 1205              		.cfi_endproc
 1206              	.LFE170:
 1208              		.section	.text.DSPI_SlaveInit,"ax",%progbits
 1209              		.align	1
 1210              		.global	DSPI_SlaveInit
 1211              		.syntax unified
 1212              		.thumb
 1213              		.thumb_func
 1214              		.fpu fpv4-sp-d16
 1216              	DSPI_SlaveInit:
 1217              	.LFB171:
 246:../drivers/fsl_dspi.c ****     assert(slaveConfig);
 1218              		.loc 1 246 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              	.LVL113:
 1223 0000 38B5     		push	{r3, r4, r5, lr}
 1224              		.cfi_def_cfa_offset 16
 1225              		.cfi_offset 3, -16
 1226              		.cfi_offset 4, -12
 1227              		.cfi_offset 5, -8
 1228              		.cfi_offset 14, -4
 246:../drivers/fsl_dspi.c ****     assert(slaveConfig);
 1229              		.loc 1 246 0
 1230 0002 0246     		mov	r2, r0
 253:../drivers/fsl_dspi.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 1231              		.loc 1 253 0
 1232 0004 FFF7FEFF 		bl	DSPI_GetInstance
 1233              	.LVL114:
 1234 0008 2A4B     		ldr	r3, .L156
 1235 000a 53F82040 		ldr	r4, [r3, r0, lsl #2]
 1236              	.LVL115:
 1237              	.LBB321:
 1238              	.LBB322:
 1239              		.file 4 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 1240              		.loc 4 694 0
 1241 000e 230C     		lsrs	r3, r4, #16
 1242 0010 03F18043 		add	r3, r3, #1073741824
 1243 0014 03F58E23 		add	r3, r3, #290816
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 1244              		.loc 4 695 0
 1245 0018 A4B2     		uxth	r4, r4
 1246              	.LVL116:
 1247 001a 1D68     		ldr	r5, [r3]
 1248 001c 0120     		movs	r0, #1
 1249              	.LVL117:
 1250 001e A040     		lsls	r0, r0, r4
 1251 0020 2843     		orrs	r0, r0, r5
 1252 0022 1860     		str	r0, [r3]
 1253              	.LVL118:
 1254              	.LBE322:
 1255              	.LBE321:
 1256              	.LBB323:
 1257              	.LBB324:
 537:../drivers/fsl_dspi.h ****     }
 1258              		.loc 2 537 0
 1259 0024 1368     		ldr	r3, [r2]
 1260              	.LBE324:
 1261              	.LBE323:
 265:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(slaveConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(slaveConfig->sam
 1262              		.loc 1 265 0
 1263 0026 8C7B     		ldrb	r4, [r1, #14]	@ zero_extendqisi2
 1264              	.LBB326:
 1265              	.LBB325:
 537:../drivers/fsl_dspi.h ****     }
 1266              		.loc 2 537 0
 1267 0028 23F48043 		bic	r3, r3, #16384
 1268 002c 1360     		str	r3, [r2]
 1269              	.LVL119:
 1270              	.LBE325:
 1271              	.LBE326:
 1272              	.LBB327:
 1273              	.LBB328:
 753:../drivers/fsl_dspi.h **** }
 1274              		.loc 2 753 0
 1275 002e 1368     		ldr	r3, [r2]
 1276 0030 43F00103 		orr	r3, r3, #1
 1277 0034 1360     		str	r3, [r2]
 1278              	.LVL120:
 1279              	.LBE328:
 1280              	.LBE327:
 1281              	.LBB329:
 1282              	.LBB330:
 720:../drivers/fsl_dspi.h **** }
 1283              		.loc 2 720 0
 1284 0036 1368     		ldr	r3, [r2]
 1285 0038 23F00043 		bic	r3, r3, #-2147483648
 1286 003c 1360     		str	r3, [r2]
 1287              	.LVL121:
 1288              	.LBE330:
 1289              	.LBE329:
 264:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(slaveConfig->enableModifiedTimingFormat) |
 1290              		.loc 1 264 0
 1291 003e 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 261:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 1292              		.loc 1 261 0
 1293 0040 1068     		ldr	r0, [r2]
 1294              	.LVL122:
 264:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(slaveConfig->enableModifiedTimingFormat) |
 1295              		.loc 1 264 0
 1296 0042 9B07     		lsls	r3, r3, #30
 265:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(slaveConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(slaveConfig->sam
 1297              		.loc 1 265 0
 1298 0044 A406     		lsls	r4, r4, #26
 1299 0046 04F08064 		and	r4, r4, #67108864
 264:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(slaveConfig->enableModifiedTimingFormat) |
 1300              		.loc 1 264 0
 1301 004a 03F08043 		and	r3, r3, #1073741824
 261:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 1302              		.loc 1 261 0
 1303 004e 20F08A40 		bic	r0, r0, #1157627904
 1304              	.LVL123:
 264:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(slaveConfig->enableModifiedTimingFormat) |
 1305              		.loc 1 264 0
 1306 0052 2343     		orrs	r3, r3, r4
 261:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 1307              		.loc 1 261 0
 1308 0054 20F44C50 		bic	r0, r0, #13056
 264:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(slaveConfig->enableModifiedTimingFormat) |
 1309              		.loc 1 264 0
 1310 0058 0343     		orrs	r3, r3, r0
 266:../drivers/fsl_dspi.c ****                 SPI_MCR_DIS_TXF(false) | SPI_MCR_DIS_RXF(false);
 1311              		.loc 1 266 0
 1312 005a 487B     		ldrb	r0, [r1, #13]	@ zero_extendqisi2
 1313 005c 0006     		lsls	r0, r0, #24
 1314 005e 00F08070 		and	r0, r0, #16777216
 265:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(slaveConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(slaveConfig->sam
 1315              		.loc 1 265 0
 1316 0062 0343     		orrs	r3, r3, r0
 266:../drivers/fsl_dspi.c ****                 SPI_MCR_DIS_TXF(false) | SPI_MCR_DIS_RXF(false);
 1317              		.loc 1 266 0
 1318 0064 C87B     		ldrb	r0, [r1, #15]	@ zero_extendqisi2
 1319 0066 0002     		lsls	r0, r0, #8
 1320 0068 00F44070 		and	r0, r0, #768
 267:../drivers/fsl_dspi.c **** 
 1321              		.loc 1 267 0
 1322 006c 0343     		orrs	r3, r3, r0
 264:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(slaveConfig->enableModifiedTimingFormat) |
 1323              		.loc 1 264 0
 1324 006e 1360     		str	r3, [r2]
 1325              	.LVL124:
 1326              	.LBB331:
 1327              	.LBB332:
 313:../drivers/fsl_dspi.c **** 
 1328              		.loc 1 313 0
 1329 0070 1368     		ldr	r3, [r2]
 1330              	.LVL125:
 1331 0072 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 317:../drivers/fsl_dspi.c ****     }
 1332              		.loc 1 317 0
 1333 0074 43F48033 		orr	r3, r3, #65536
 1334              	.LVL126:
 1335 0078 02EB8000 		add	r0, r2, r0, lsl #2
 324:../drivers/fsl_dspi.c **** }
 1336              		.loc 1 324 0
 1337 007c 1360     		str	r3, [r2]
 1338              	.LVL127:
 1339              	.LBE332:
 1340              	.LBE331:
 275:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPHA(slaveConfig->ctarConfig.cpha);
 1341              		.loc 1 275 0
 1342 007e 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 271:../drivers/fsl_dspi.c ****            ~(SPI_CTAR_FMSZ_MASK | SPI_CTAR_CPOL_MASK | SPI_CTAR_CPHA_MASK | SPI_CTAR_LSBFE_MASK);
 1343              		.loc 1 271 0
 1344 0080 C468     		ldr	r4, [r0, #12]
 1345              	.LVL128:
 275:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPHA(slaveConfig->ctarConfig.cpha);
 1346              		.loc 1 275 0
 1347 0082 9B06     		lsls	r3, r3, #26
 271:../drivers/fsl_dspi.c ****            ~(SPI_CTAR_FMSZ_MASK | SPI_CTAR_CPOL_MASK | SPI_CTAR_CPHA_MASK | SPI_CTAR_LSBFE_MASK);
 1348              		.loc 1 271 0
 1349 0084 24F0FE44 		bic	r4, r4, #2130706432
 1350              	.LVL129:
 275:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPHA(slaveConfig->ctarConfig.cpha);
 1351              		.loc 1 275 0
 1352 0088 03F08063 		and	r3, r3, #67108864
 274:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPOL(slaveConfig->ctarConfig.cpol) |
 1353              		.loc 1 274 0
 1354 008c 2343     		orrs	r3, r3, r4
 1355 008e 4C68     		ldr	r4, [r1, #4]
 1356              	.LVL130:
 276:../drivers/fsl_dspi.c **** 
 1357              		.loc 1 276 0
 1358 0090 497A     		ldrb	r1, [r1, #9]	@ zero_extendqisi2
 1359              	.LVL131:
 274:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPOL(slaveConfig->ctarConfig.cpol) |
 1360              		.loc 1 274 0
 1361 0092 013C     		subs	r4, r4, #1
 276:../drivers/fsl_dspi.c **** 
 1362              		.loc 1 276 0
 1363 0094 4906     		lsls	r1, r1, #25
 1364 0096 01F00071 		and	r1, r1, #33554432
 274:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPOL(slaveConfig->ctarConfig.cpol) |
 1365              		.loc 1 274 0
 1366 009a 43EAC463 		orr	r3, r3, r4, lsl #27
 275:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPHA(slaveConfig->ctarConfig.cpha);
 1367              		.loc 1 275 0
 1368 009e 0B43     		orrs	r3, r3, r1
 274:../drivers/fsl_dspi.c ****                                          SPI_CTAR_SLAVE_CPOL(slaveConfig->ctarConfig.cpol) |
 1369              		.loc 1 274 0
 1370 00a0 C360     		str	r3, [r0, #12]
 278:../drivers/fsl_dspi.c **** 
 1371              		.loc 1 278 0
 1372 00a2 0021     		movs	r1, #0
 1373 00a4 1046     		mov	r0, r2
 1374 00a6 FFF7FEFF 		bl	DSPI_SetDummyData
 1375              	.LVL132:
 1376              	.LBB333:
 1377              	.LBB334:
 742:../drivers/fsl_dspi.h **** }
 1378              		.loc 2 742 0
 1379 00aa 1368     		ldr	r3, [r2]
 1380 00ac 23F00103 		bic	r3, r3, #1
 1381 00b0 1360     		str	r3, [r2]
 1382              	.LVL133:
 1383 00b2 38BD     		pop	{r3, r4, r5, pc}
 1384              	.L157:
 1385              		.align	2
 1386              	.L156:
 1387 00b4 00000000 		.word	.LANCHOR3
 1388              	.LBE334:
 1389              	.LBE333:
 1390              		.cfi_endproc
 1391              	.LFE171:
 1393              		.section	.text.DSPI_SlaveGetDefaultConfig,"ax",%progbits
 1394              		.align	1
 1395              		.global	DSPI_SlaveGetDefaultConfig
 1396              		.syntax unified
 1397              		.thumb
 1398              		.thumb_func
 1399              		.fpu fpv4-sp-d16
 1401              	DSPI_SlaveGetDefaultConfig:
 1402              	.LFB172:
 284:../drivers/fsl_dspi.c ****     assert(slaveConfig);
 1403              		.loc 1 284 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              		@ link register save eliminated.
 1408              	.LVL134:
 287:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.bitsPerFrame = 8;
 1409              		.loc 1 287 0
 1410 0000 0023     		movs	r3, #0
 288:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.cpol = kDSPI_ClockPolarityActiveHigh;
 1411              		.loc 1 288 0
 1412 0002 0822     		movs	r2, #8
 287:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.bitsPerFrame = 8;
 1413              		.loc 1 287 0
 1414 0004 0370     		strb	r3, [r0]
 288:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.cpol = kDSPI_ClockPolarityActiveHigh;
 1415              		.loc 1 288 0
 1416 0006 4260     		str	r2, [r0, #4]
 289:../drivers/fsl_dspi.c ****     slaveConfig->ctarConfig.cpha = kDSPI_ClockPhaseFirstEdge;
 1417              		.loc 1 289 0
 1418 0008 0372     		strb	r3, [r0, #8]
 290:../drivers/fsl_dspi.c **** 
 1419              		.loc 1 290 0
 1420 000a 4372     		strb	r3, [r0, #9]
 292:../drivers/fsl_dspi.c ****     slaveConfig->enableRxFifoOverWrite = false;
 1421              		.loc 1 292 0
 1422 000c 0373     		strb	r3, [r0, #12]
 293:../drivers/fsl_dspi.c ****     slaveConfig->enableModifiedTimingFormat = false;
 1423              		.loc 1 293 0
 1424 000e 4373     		strb	r3, [r0, #13]
 294:../drivers/fsl_dspi.c ****     slaveConfig->samplePoint = kDSPI_SckToSin0Clock;
 1425              		.loc 1 294 0
 1426 0010 8373     		strb	r3, [r0, #14]
 295:../drivers/fsl_dspi.c **** }
 1427              		.loc 1 295 0
 1428 0012 C373     		strb	r3, [r0, #15]
 1429 0014 7047     		bx	lr
 1430              		.cfi_endproc
 1431              	.LFE172:
 1433              		.section	.text.DSPI_Deinit,"ax",%progbits
 1434              		.align	1
 1435              		.global	DSPI_Deinit
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1439              		.fpu fpv4-sp-d16
 1441              	DSPI_Deinit:
 1442              	.LFB173:
 299:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
 1443              		.loc 1 299 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447              	.LVL135:
 1448              	.LBB341:
 1449              	.LBB342:
 753:../drivers/fsl_dspi.h **** }
 1450              		.loc 2 753 0
 1451 0000 0268     		ldr	r2, [r0]
 1452 0002 42F00102 		orr	r2, r2, #1
 1453              	.LBE342:
 1454              	.LBE341:
 299:../drivers/fsl_dspi.c ****     DSPI_StopTransfer(base);
 1455              		.loc 1 299 0
 1456 0006 08B5     		push	{r3, lr}
 1457              		.cfi_def_cfa_offset 8
 1458              		.cfi_offset 3, -8
 1459              		.cfi_offset 14, -4
 1460              	.LBB344:
 1461              	.LBB343:
 753:../drivers/fsl_dspi.h **** }
 1462              		.loc 2 753 0
 1463 0008 0260     		str	r2, [r0]
 1464              	.LVL136:
 1465              	.LBE343:
 1466              	.LBE344:
 1467              	.LBB345:
 1468              	.LBB346:
 541:../drivers/fsl_dspi.h ****     }
 1469              		.loc 2 541 0
 1470 000a 0268     		ldr	r2, [r0]
 1471 000c 42F48042 		orr	r2, r2, #16384
 1472 0010 0260     		str	r2, [r0]
 1473              	.LVL137:
 1474              	.LBE346:
 1475              	.LBE345:
 305:../drivers/fsl_dspi.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 1476              		.loc 1 305 0
 1477 0012 FFF7FEFF 		bl	DSPI_GetInstance
 1478              	.LVL138:
 1479 0016 084B     		ldr	r3, .L160
 1480 0018 53F82020 		ldr	r2, [r3, r0, lsl #2]
 1481              	.LVL139:
 1482              	.LBB347:
 1483              	.LBB348:
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 1484              		.loc 4 705 0
 1485 001c 130C     		lsrs	r3, r2, #16
 1486 001e 03F18043 		add	r3, r3, #1073741824
 1487 0022 03F58E23 		add	r3, r3, #290816
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 1488              		.loc 4 706 0
 1489 0026 92B2     		uxth	r2, r2
 1490              	.LVL140:
 1491 0028 1968     		ldr	r1, [r3]
 1492 002a 0120     		movs	r0, #1
 1493              	.LVL141:
 1494 002c 00FA02F2 		lsl	r2, r0, r2
 1495 0030 21EA0202 		bic	r2, r1, r2
 1496 0034 1A60     		str	r2, [r3]
 1497 0036 08BD     		pop	{r3, pc}
 1498              	.L161:
 1499              		.align	2
 1500              	.L160:
 1501 0038 00000000 		.word	.LANCHOR3
 1502              	.LBE348:
 1503              	.LBE347:
 1504              		.cfi_endproc
 1505              	.LFE173:
 1507              		.section	.text.DSPI_MasterSetBaudRate,"ax",%progbits
 1508              		.align	1
 1509              		.global	DSPI_MasterSetBaudRate
 1510              		.syntax unified
 1511              		.thumb
 1512              		.thumb_func
 1513              		.fpu fpv4-sp-d16
 1515              	DSPI_MasterSetBaudRate:
 1516              	.LFB175:
 331:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0*/
 1517              		.loc 1 331 0
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 16
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521              	.LVL142:
 1522 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1523              		.cfi_def_cfa_offset 36
 1524              		.cfi_offset 4, -36
 1525              		.cfi_offset 5, -32
 1526              		.cfi_offset 6, -28
 1527              		.cfi_offset 7, -24
 1528              		.cfi_offset 8, -20
 1529              		.cfi_offset 9, -16
 1530              		.cfi_offset 10, -12
 1531              		.cfi_offset 11, -8
 1532              		.cfi_offset 14, -4
 1533 0004 85B0     		sub	sp, sp, #20
 1534              		.cfi_def_cfa_offset 56
 331:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0*/
 1535              		.loc 1 331 0
 1536 0006 0391     		str	r1, [sp, #12]
 1537              	.LBB355:
 1538              	.LBB356:
 731:../drivers/fsl_dspi.h **** }
 1539              		.loc 2 731 0
 1540 0008 0168     		ldr	r1, [r0]
 1541              	.LVL143:
 1542              	.LBE356:
 1543              	.LBE355:
 331:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0*/
 1544              		.loc 1 331 0
 1545 000a 0093     		str	r3, [sp]
 333:../drivers/fsl_dspi.c ****     {
 1546              		.loc 1 333 0
 1547 000c 0029     		cmp	r1, #0
 1548 000e 53DA     		bge	.L175
 1549              	.LBB357:
 1550              	.LBB358:
 359:../drivers/fsl_dspi.c **** 
 1551              		.loc 1 359 0
 1552 0010 009B     		ldr	r3, [sp]
 1553 0012 DFF8B0A0 		ldr	r10, .L179+8
 1554 0016 0024     		movs	r4, #0
 1555 0018 5B00     		lsls	r3, r3, #1
 1556              	.LVL144:
 1557 001a 0193     		str	r3, [sp, #4]
 1558 001c A046     		mov	r8, r4
 1559 001e A446     		mov	ip, r4
 1560 0020 4FF0010E 		mov	lr, #1
 1561 0024 4FF0FF35 		mov	r5, #-1
 1562 0028 2646     		mov	r6, r4
 1563              	.L173:
 1564              	.LVL145:
 1565 002a 244B     		ldr	r3, .L179
 1566 002c 53F82630 		ldr	r3, [r3, r6, lsl #2]
 1567 0030 0293     		str	r3, [sp, #8]
 1568 0032 0027     		movs	r7, #0
 1569              	.LVL146:
 1570              	.L171:
 1571 0034 029B     		ldr	r3, [sp, #8]
 1572 0036 5AF82710 		ldr	r1, [r10, r7, lsl #2]
 1573 003a 5943     		muls	r1, r3, r1
 1574 003c 009B     		ldr	r3, [sp]
 1575 003e B3FBF1F9 		udiv	r9, r3, r1
 1576              	.LVL147:
 364:../drivers/fsl_dspi.c ****                 {
 1577              		.loc 1 364 0
 1578 0042 4A45     		cmp	r2, r9
 1579 0044 09D3     		bcc	.L167
 366:../drivers/fsl_dspi.c ****                     if (min_diff > diff)
 1580              		.loc 1 366 0
 1581 0046 A2EB090B 		sub	fp, r2, r9
 1582              	.LVL148:
 367:../drivers/fsl_dspi.c ****                     {
 1583              		.loc 1 367 0
 1584 004a 5D45     		cmp	r5, fp
 1585 004c 05D9     		bls	.L167
 1586 004e 5D46     		mov	r5, fp
 1587              	.LVL149:
 1588 0050 4C46     		mov	r4, r9
 1589 0052 B846     		mov	r8, r7
 1590 0054 B446     		mov	ip, r6
 1591 0056 4FF0010E 		mov	lr, #1
 1592              	.LVL150:
 1593              	.L167:
 357:../drivers/fsl_dspi.c ****             {
 1594              		.loc 1 357 0
 1595 005a 75B1     		cbz	r5, .L166
 359:../drivers/fsl_dspi.c **** 
 1596              		.loc 1 359 0
 1597 005c 019B     		ldr	r3, [sp, #4]
 1598 005e B3FBF1F1 		udiv	r1, r3, r1
 1599              	.LVL151:
 364:../drivers/fsl_dspi.c ****                 {
 1600              		.loc 1 364 0
 1601 0062 8A42     		cmp	r2, r1
 1602 0064 09D3     		bcc	.L166
 366:../drivers/fsl_dspi.c ****                     if (min_diff > diff)
 1603              		.loc 1 366 0
 1604 0066 A2EB0109 		sub	r9, r2, r1
 1605              	.LVL152:
 367:../drivers/fsl_dspi.c ****                     {
 1606              		.loc 1 367 0
 1607 006a A945     		cmp	r9, r5
 1608 006c 05D2     		bcs	.L166
 1609 006e 4D46     		mov	r5, r9
 1610              	.LVL153:
 1611 0070 0C46     		mov	r4, r1
 1612 0072 B846     		mov	r8, r7
 1613 0074 B446     		mov	ip, r6
 357:../drivers/fsl_dspi.c ****             {
 1614              		.loc 1 357 0
 1615 0076 4FF0020E 		mov	lr, #2
 1616              	.LVL154:
 1617              	.L166:
 355:../drivers/fsl_dspi.c ****         {
 1618              		.loc 1 355 0
 1619 007a 0137     		adds	r7, r7, #1
 1620              	.LVL155:
 1621 007c 102F     		cmp	r7, #16
 1622 007e 15D1     		bne	.L169
 1623              	.L170:
 353:../drivers/fsl_dspi.c ****     {
 1624              		.loc 1 353 0
 1625 0080 0136     		adds	r6, r6, #1
 1626              	.LVL156:
 1627 0082 042E     		cmp	r6, #4
 1628 0084 15D1     		bne	.L172
 1629              	.L174:
 1630 0086 039B     		ldr	r3, [sp, #12]
 1631 0088 00EB8300 		add	r0, r0, r3, lsl #2
 1632              	.LVL157:
 382:../drivers/fsl_dspi.c **** 
 1633              		.loc 1 382 0
 1634 008c 0C4B     		ldr	r3, .L179+4
 1635 008e C268     		ldr	r2, [r0, #12]
 1636              	.LVL158:
 1637 0090 1340     		ands	r3, r3, r2
 1638              	.LVL159:
 384:../drivers/fsl_dspi.c ****                             (bestScaler << SPI_CTAR_BR_SHIFT);
 1639              		.loc 1 384 0
 1640 0092 43EA0803 		orr	r3, r3, r8
 1641              	.LVL160:
 1642 0096 43EA0C4C 		orr	ip, r3, ip, lsl #16
 1643 009a 0EF1FF3E 		add	lr, lr, #-1
 1644 009e 4CEACE73 		orr	r3, ip, lr, lsl #31
 1645 00a2 C360     		str	r3, [r0, #12]
 1646              	.LVL161:
 1647              	.L162:
 1648              	.LBE358:
 1649              	.LBE357:
 389:../drivers/fsl_dspi.c **** 
 1650              		.loc 1 389 0
 1651 00a4 2046     		mov	r0, r4
 1652 00a6 05B0     		add	sp, sp, #20
 1653              		.cfi_remember_state
 1654              		.cfi_def_cfa_offset 36
 1655              	.LVL162:
 1656              		@ sp needed
 1657 00a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1658              	.LVL163:
 1659              	.L169:
 1660              		.cfi_restore_state
 1661              	.LBB360:
 1662              	.LBB359:
 355:../drivers/fsl_dspi.c ****         {
 1663              		.loc 1 355 0
 1664 00ac 002D     		cmp	r5, #0
 1665 00ae C1D1     		bne	.L171
 1666 00b0 E6E7     		b	.L170
 1667              	.L172:
 353:../drivers/fsl_dspi.c ****     {
 1668              		.loc 1 353 0
 1669 00b2 002D     		cmp	r5, #0
 1670 00b4 B9D1     		bne	.L173
 1671 00b6 E6E7     		b	.L174
 1672              	.LVL164:
 1673              	.L175:
 1674              	.LBE359:
 1675              	.LBE360:
 335:../drivers/fsl_dspi.c ****     }
 1676              		.loc 1 335 0
 1677 00b8 0024     		movs	r4, #0
 1678 00ba F3E7     		b	.L162
 1679              	.L180:
 1680              		.align	2
 1681              	.L179:
 1682 00bc 00000000 		.word	.LANCHOR5
 1683 00c0 F0FFFC7F 		.word	2147287024
 1684 00c4 00000000 		.word	.LANCHOR4
 1685              		.cfi_endproc
 1686              	.LFE175:
 1688              		.section	.text.DSPI_MasterSetDelayScaler,"ax",%progbits
 1689              		.align	1
 1690              		.global	DSPI_MasterSetDelayScaler
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1694              		.fpu fpv4-sp-d16
 1696              	DSPI_MasterSetDelayScaler:
 1697              	.LFB176:
 393:../drivers/fsl_dspi.c ****     /* these settings are only relevant in master mode */
 1698              		.loc 1 393 0
 1699              		.cfi_startproc
 1700              		@ args = 4, pretend = 0, frame = 0
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 1702              	.LVL165:
 1703 0000 30B5     		push	{r4, r5, lr}
 1704              		.cfi_def_cfa_offset 12
 1705              		.cfi_offset 4, -12
 1706              		.cfi_offset 5, -8
 1707              		.cfi_offset 14, -4
 1708              	.LBB367:
 1709              	.LBB368:
 731:../drivers/fsl_dspi.h **** }
 1710              		.loc 2 731 0
 1711 0002 0568     		ldr	r5, [r0]
 1712              	.LVL166:
 1713              	.LBE368:
 1714              	.LBE367:
 393:../drivers/fsl_dspi.c ****     /* these settings are only relevant in master mode */
 1715              		.loc 1 393 0
 1716 0004 9DF80C40 		ldrb	r4, [sp, #12]	@ zero_extendqisi2
 395:../drivers/fsl_dspi.c ****     {
 1717              		.loc 1 395 0
 1718 0008 002D     		cmp	r5, #0
 1719 000a 14DA     		bge	.L181
 397:../drivers/fsl_dspi.c ****         {
 1720              		.loc 1 397 0
 1721 000c 022C     		cmp	r4, #2
 1722 000e 13D0     		beq	.L183
 1723 0010 032C     		cmp	r4, #3
 1724 0012 20D0     		beq	.L184
 1725 0014 012C     		cmp	r4, #1
 1726 0016 0ED1     		bne	.L181
 1727              	.LVL167:
 1728 0018 00EB8100 		add	r0, r0, r1, lsl #2
 1729              	.LVL168:
 1730              	.LBB369:
 1731              	.LBB370:
 401:../drivers/fsl_dspi.c ****                 break;
 1732              		.loc 1 401 0
 1733 001c 9205     		lsls	r2, r2, #22
 1734              	.LVL169:
 400:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PCSSCK(prescaler) | SPI_CTAR_CSSCK(scaler);
 1735              		.loc 1 400 0
 1736 001e C168     		ldr	r1, [r0, #12]
 1737              	.LVL170:
 401:../drivers/fsl_dspi.c ****                 break;
 1738              		.loc 1 401 0
 1739 0020 1B03     		lsls	r3, r3, #12
 1740              	.LVL171:
 1741 0022 9BB2     		uxth	r3, r3
 1742 0024 02F44002 		and	r2, r2, #12582912
 1743 0028 1A43     		orrs	r2, r2, r3
 400:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PCSSCK(prescaler) | SPI_CTAR_CSSCK(scaler);
 1744              		.loc 1 400 0
 1745 002a 21F44003 		bic	r3, r1, #12582912
 1746 002e 23F47043 		bic	r3, r3, #61440
 1747              	.LVL172:
 1748              	.L186:
 1749              	.LBE370:
 1750              	.LBE369:
 409:../drivers/fsl_dspi.c ****                 break;
 1751              		.loc 1 409 0
 1752 0032 1A43     		orrs	r2, r2, r3
 408:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PDT(prescaler) | SPI_CTAR_DT(scaler);
 1753              		.loc 1 408 0
 1754 0034 C260     		str	r2, [r0, #12]
 1755              	.L181:
 1756 0036 30BD     		pop	{r4, r5, pc}
 1757              	.LVL173:
 1758              	.L183:
 1759 0038 00EB8100 		add	r0, r0, r1, lsl #2
 1760              	.LVL174:
 405:../drivers/fsl_dspi.c ****                 break;
 1761              		.loc 1 405 0
 1762 003c 1205     		lsls	r2, r2, #20
 1763              	.LVL175:
 404:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PASC(prescaler) | SPI_CTAR_ASC(scaler);
 1764              		.loc 1 404 0
 1765 003e C168     		ldr	r1, [r0, #12]
 1766              	.LVL176:
 405:../drivers/fsl_dspi.c ****                 break;
 1767              		.loc 1 405 0
 1768 0040 1B02     		lsls	r3, r3, #8
 1769              	.LVL177:
 1770 0042 03F47063 		and	r3, r3, #3840
 1771 0046 02F44012 		and	r2, r2, #3145728
 1772 004a 1A43     		orrs	r2, r2, r3
 404:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PASC(prescaler) | SPI_CTAR_ASC(scaler);
 1773              		.loc 1 404 0
 1774 004c 21F44013 		bic	r3, r1, #3145728
 1775 0050 23F47063 		bic	r3, r3, #3840
 1776 0054 EDE7     		b	.L186
 1777              	.LVL178:
 1778              	.L184:
 1779 0056 00EB8100 		add	r0, r0, r1, lsl #2
 1780              	.LVL179:
 409:../drivers/fsl_dspi.c ****                 break;
 1781              		.loc 1 409 0
 1782 005a 9204     		lsls	r2, r2, #18
 1783              	.LVL180:
 408:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PDT(prescaler) | SPI_CTAR_DT(scaler);
 1784              		.loc 1 408 0
 1785 005c C168     		ldr	r1, [r0, #12]
 1786              	.LVL181:
 409:../drivers/fsl_dspi.c ****                 break;
 1787              		.loc 1 409 0
 1788 005e 1B01     		lsls	r3, r3, #4
 1789              	.LVL182:
 1790 0060 DBB2     		uxtb	r3, r3
 1791 0062 02F44022 		and	r2, r2, #786432
 1792 0066 1A43     		orrs	r2, r2, r3
 408:../drivers/fsl_dspi.c ****                                         SPI_CTAR_PDT(prescaler) | SPI_CTAR_DT(scaler);
 1793              		.loc 1 408 0
 1794 0068 21F44023 		bic	r3, r1, #786432
 1795 006c 23F0F003 		bic	r3, r3, #240
 1796 0070 DFE7     		b	.L186
 1797              		.cfi_endproc
 1798              	.LFE176:
 1800              		.section	.text.DSPI_MasterSetDelayTimes,"ax",%progbits
 1801              		.align	1
 1802              		.global	DSPI_MasterSetDelayTimes
 1803              		.syntax unified
 1804              		.thumb
 1805              		.thumb_func
 1806              		.fpu fpv4-sp-d16
 1808              	DSPI_MasterSetDelayTimes:
 1809              	.LFB177:
 422:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0 */
 1810              		.loc 1 422 0
 1811              		.cfi_startproc
 1812              		@ args = 4, pretend = 0, frame = 8
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
 1814              	.LVL183:
 1815 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1816              		.cfi_def_cfa_offset 36
 1817              		.cfi_offset 4, -36
 1818              		.cfi_offset 5, -32
 1819              		.cfi_offset 6, -28
 1820              		.cfi_offset 7, -24
 1821              		.cfi_offset 8, -20
 1822              		.cfi_offset 9, -16
 1823              		.cfi_offset 10, -12
 1824              		.cfi_offset 11, -8
 1825              		.cfi_offset 14, -4
 1826 0004 9446     		mov	ip, r2
 1827              	.LBB377:
 1828              	.LBB378:
 731:../drivers/fsl_dspi.h **** }
 1829              		.loc 2 731 0
 1830 0006 0268     		ldr	r2, [r0]
 1831              	.LVL184:
 1832              	.LBE378:
 1833              	.LBE377:
 424:../drivers/fsl_dspi.c ****     {
 1834              		.loc 1 424 0
 1835 0008 002A     		cmp	r2, #0
 422:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0 */
 1836              		.loc 1 422 0
 1837 000a 85B0     		sub	sp, sp, #20
 1838              		.cfi_def_cfa_offset 56
 422:../drivers/fsl_dspi.c ****     /* for master mode configuration, if slave mode detected, return 0 */
 1839              		.loc 1 422 0
 1840 000c 0746     		mov	r7, r0
 1841 000e 8E46     		mov	lr, r1
 424:../drivers/fsl_dspi.c ****     {
 1842              		.loc 1 424 0
 1843 0010 4FDA     		bge	.L197
 1844              	.LVL185:
 1845              	.LBB379:
 1846              	.LBB380:
 442:../drivers/fsl_dspi.c **** 
 1847              		.loc 1 442 0
 1848 0012 294E     		ldr	r6, .L201
 445:../drivers/fsl_dspi.c **** 
 1849              		.loc 1 445 0
 1850 0014 294C     		ldr	r4, .L201+4
 442:../drivers/fsl_dspi.c **** 
 1851              		.loc 1 442 0
 1852 0016 B6FBF3F6 		udiv	r6, r6, r3
 445:../drivers/fsl_dspi.c **** 
 1853              		.loc 1 445 0
 1854 001a B4FBF3F4 		udiv	r4, r4, r3
 451:../drivers/fsl_dspi.c ****     {
 1855              		.loc 1 451 0
 1856 001e 0E9B     		ldr	r3, [sp, #56]
 1857              	.LVL186:
 442:../drivers/fsl_dspi.c **** 
 1858              		.loc 1 442 0
 1859 0020 4FF4E022 		mov	r2, #458752
 445:../drivers/fsl_dspi.c **** 
 1860              		.loc 1 445 0
 1861 0024 6400     		lsls	r4, r4, #1
 442:../drivers/fsl_dspi.c **** 
 1862              		.loc 1 442 0
 1863 0026 7243     		muls	r2, r6, r2
 451:../drivers/fsl_dspi.c ****     {
 1864              		.loc 1 451 0
 1865 0028 A342     		cmp	r3, r4
 442:../drivers/fsl_dspi.c **** 
 1866              		.loc 1 442 0
 1867 002a 4FEA9202 		lsr	r2, r2, #2
 1868              	.LVL187:
 451:../drivers/fsl_dspi.c ****     {
 1869              		.loc 1 451 0
 1870 002e 09D8     		bhi	.L189
 453:../drivers/fsl_dspi.c ****         return initialDelayNanoSec;
 1871              		.loc 1 453 0
 1872 0030 0023     		movs	r3, #0
 1873 0032 CDF800C0 		str	ip, [sp]
 1874 0036 1A46     		mov	r2, r3
 1875              	.LVL188:
 1876              	.L200:
 483:../drivers/fsl_dspi.c **** 
 1877              		.loc 1 483 0
 1878 0038 FFF7FEFF 		bl	DSPI_MasterSetDelayScaler
 1879              	.LVL189:
 1880              	.L187:
 1881              	.LBE380:
 1882              	.LBE379:
 487:../drivers/fsl_dspi.c **** 
 1883              		.loc 1 487 0
 1884 003c 2046     		mov	r0, r4
 1885 003e 05B0     		add	sp, sp, #20
 1886              		.cfi_remember_state
 1887              		.cfi_def_cfa_offset 36
 1888              		@ sp needed
 1889 0040 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1890              	.LVL190:
 1891              	.L189:
 1892              		.cfi_restore_state
 1893              	.LBB382:
 1894              	.LBB381:
 451:../drivers/fsl_dspi.c ****     {
 1895              		.loc 1 451 0
 1896 0044 0F23     		movs	r3, #15
 1897              	.LVL191:
 462:../drivers/fsl_dspi.c **** 
 1898              		.loc 1 462 0
 1899 0046 DFF87890 		ldr	r9, .L201+8
 1900 004a DFF87880 		ldr	r8, .L201+12
 451:../drivers/fsl_dspi.c ****     {
 1901              		.loc 1 451 0
 1902 004e 0293     		str	r3, [sp, #8]
 1903 0050 1446     		mov	r4, r2
 1904              	.LVL192:
 1905 0052 4FF0FF35 		mov	r5, #-1
 1906 0056 0322     		movs	r2, #3
 1907              	.LVL193:
 1908 0058 0020     		movs	r0, #0
 1909              	.LVL194:
 1910              	.L195:
 462:../drivers/fsl_dspi.c **** 
 1911              		.loc 1 462 0
 1912 005a 59F82010 		ldr	r1, [r9, r0, lsl #2]
 1913 005e 01FB06F3 		mul	r3, r1, r6
 1914 0062 0393     		str	r3, [sp, #12]
 1915 0064 4FF0000A 		mov	r10, #0
 1916              	.LVL195:
 1917              	.L193:
 1918 0068 039B     		ldr	r3, [sp, #12]
 1919 006a 58F82A10 		ldr	r1, [r8, r10, lsl #2]
 1920 006e 5943     		muls	r1, r3, r1
 467:../drivers/fsl_dspi.c ****             {
 1921              		.loc 1 467 0
 1922 0070 0E9B     		ldr	r3, [sp, #56]
 462:../drivers/fsl_dspi.c **** 
 1923              		.loc 1 462 0
 1924 0072 8908     		lsrs	r1, r1, #2
 1925              	.LVL196:
 467:../drivers/fsl_dspi.c ****             {
 1926              		.loc 1 467 0
 1927 0074 8B42     		cmp	r3, r1
 1928 0076 08D8     		bhi	.L190
 469:../drivers/fsl_dspi.c ****                 if (min_diff > diff)
 1929              		.loc 1 469 0
 1930 0078 A1EB030B 		sub	fp, r1, r3
 1931              	.LVL197:
 470:../drivers/fsl_dspi.c ****                 {
 1932              		.loc 1 470 0
 1933 007c AB45     		cmp	fp, r5
 1934 007e 3FBF     		itttt	cc
 1935 0080 5D46     		movcc	r5, fp
 1936              	.LVL198:
 1937 0082 0C46     		movcc	r4, r1
 1938 0084 CDF808A0 		strcc	r10, [sp, #8]
 1939 0088 0246     		movcc	r2, r0
 1940              	.LVL199:
 1941              	.L190:
 460:../drivers/fsl_dspi.c ****         {
 1942              		.loc 1 460 0
 1943 008a 0AF1010A 		add	r10, r10, #1
 1944              	.LVL200:
 1945 008e BAF1100F 		cmp	r10, #16
 1946 0092 08D1     		bne	.L191
 1947              	.L192:
 458:../drivers/fsl_dspi.c ****     {
 1948              		.loc 1 458 0
 1949 0094 0130     		adds	r0, r0, #1
 1950              	.LVL201:
 1951 0096 0428     		cmp	r0, #4
 1952 0098 08D1     		bne	.L194
 1953              	.L196:
 483:../drivers/fsl_dspi.c **** 
 1954              		.loc 1 483 0
 1955 009a CDF800C0 		str	ip, [sp]
 1956 009e 029B     		ldr	r3, [sp, #8]
 1957 00a0 7146     		mov	r1, lr
 1958              	.LVL202:
 1959 00a2 3846     		mov	r0, r7
 1960              	.LVL203:
 1961 00a4 C8E7     		b	.L200
 1962              	.LVL204:
 1963              	.L191:
 460:../drivers/fsl_dspi.c ****         {
 1964              		.loc 1 460 0
 1965 00a6 002D     		cmp	r5, #0
 1966 00a8 DED1     		bne	.L193
 1967 00aa F3E7     		b	.L192
 1968              	.L194:
 458:../drivers/fsl_dspi.c ****     {
 1969              		.loc 1 458 0
 1970 00ac 002D     		cmp	r5, #0
 1971 00ae D4D1     		bne	.L195
 1972 00b0 F3E7     		b	.L196
 1973              	.LVL205:
 1974              	.L197:
 1975              	.LBE381:
 1976              	.LBE382:
 426:../drivers/fsl_dspi.c ****     }
 1977              		.loc 1 426 0
 1978 00b2 0024     		movs	r4, #0
 1979 00b4 C2E7     		b	.L187
 1980              	.L202:
 1981 00b6 00BF     		.align	2
 1982              	.L201:
 1983 00b8 00286BEE 		.word	-294967296
 1984 00bc 00CA9A3B 		.word	1000000000
 1985 00c0 00000000 		.word	.LANCHOR7
 1986 00c4 00000000 		.word	.LANCHOR6
 1987              		.cfi_endproc
 1988              	.LFE177:
 1990              		.section	.text.DSPI_MasterInit,"ax",%progbits
 1991              		.align	1
 1992              		.global	DSPI_MasterInit
 1993              		.syntax unified
 1994              		.thumb
 1995              		.thumb_func
 1996              		.fpu fpv4-sp-d16
 1998              	DSPI_MasterInit:
 1999              	.LFB169:
 174:../drivers/fsl_dspi.c ****     assert(masterConfig);
 2000              		.loc 1 174 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 0
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              	.LVL206:
 2005 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 2006              		.cfi_def_cfa_offset 24
 2007              		.cfi_offset 4, -16
 2008              		.cfi_offset 5, -12
 2009              		.cfi_offset 6, -8
 2010              		.cfi_offset 14, -4
 174:../drivers/fsl_dspi.c ****     assert(masterConfig);
 2011              		.loc 1 174 0
 2012 0002 0D46     		mov	r5, r1
 2013 0004 0446     		mov	r4, r0
 2014 0006 1646     		mov	r6, r2
 180:../drivers/fsl_dspi.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 2015              		.loc 1 180 0
 2016 0008 FFF7FEFF 		bl	DSPI_GetInstance
 2017              	.LVL207:
 2018 000c 424B     		ldr	r3, .L206
 2019 000e 53F82010 		ldr	r1, [r3, r0, lsl #2]
 2020              	.LVL208:
 2021              	.LBB395:
 2022              	.LBB396:
 694:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 2023              		.loc 4 694 0
 2024 0012 0B0C     		lsrs	r3, r1, #16
 2025 0014 03F18043 		add	r3, r3, #1073741824
 2026 0018 03F58E23 		add	r3, r3, #290816
 695:../drivers/fsl_clock.h **** }
 2027              		.loc 4 695 0
 2028 001c 89B2     		uxth	r1, r1
 2029              	.LVL209:
 2030 001e 1868     		ldr	r0, [r3]
 2031              	.LVL210:
 2032 0020 0122     		movs	r2, #1
 2033              	.LVL211:
 2034 0022 8A40     		lsls	r2, r2, r1
 2035 0024 0243     		orrs	r2, r2, r0
 2036 0026 1A60     		str	r2, [r3]
 2037              	.LVL212:
 2038              	.LBE396:
 2039              	.LBE395:
 2040              	.LBB397:
 2041              	.LBB398:
 537:../drivers/fsl_dspi.h ****     }
 2042              		.loc 2 537 0
 2043 0028 2368     		ldr	r3, [r4]
 2044              	.LBE398:
 2045              	.LBE397:
 192:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(masterConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(masterConfig->s
 2046              		.loc 1 192 0
 2047 002a 95F82010 		ldrb	r1, [r5, #32]	@ zero_extendqisi2
 2048              	.LBB400:
 2049              	.LBB399:
 537:../drivers/fsl_dspi.h ****     }
 2050              		.loc 2 537 0
 2051 002e 23F48043 		bic	r3, r3, #16384
 2052 0032 2360     		str	r3, [r4]
 2053              	.LVL213:
 2054              	.LBE399:
 2055              	.LBE400:
 2056              	.LBB401:
 2057              	.LBB402:
 753:../drivers/fsl_dspi.h **** }
 2058              		.loc 2 753 0
 2059 0034 2368     		ldr	r3, [r4]
 2060 0036 43F00103 		orr	r3, r3, #1
 2061 003a 2360     		str	r3, [r4]
 2062              	.LVL214:
 2063              	.LBE402:
 2064              	.LBE401:
 2065              	.LBB403:
 2066              	.LBB404:
 720:../drivers/fsl_dspi.h **** }
 2067              		.loc 2 720 0
 2068 003c 2368     		ldr	r3, [r4]
 2069 003e 43F00043 		orr	r3, r3, #-2147483648
 2070 0042 2360     		str	r3, [r4]
 2071              	.LVL215:
 2072              	.LBE404:
 2073              	.LBE403:
 191:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(masterConfig->enableModifiedTimingFormat) |
 2074              		.loc 1 191 0
 2075 0044 AB7F     		ldrb	r3, [r5, #30]	@ zero_extendqisi2
 188:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 2076              		.loc 1 188 0
 2077 0046 2268     		ldr	r2, [r4]
 2078              	.LVL216:
 191:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(masterConfig->enableModifiedTimingFormat) |
 2079              		.loc 1 191 0
 2080 0048 9B07     		lsls	r3, r3, #30
 192:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(masterConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(masterConfig->s
 2081              		.loc 1 192 0
 2082 004a 8906     		lsls	r1, r1, #26
 2083 004c 01F08061 		and	r1, r1, #67108864
 191:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(masterConfig->enableModifiedTimingFormat) |
 2084              		.loc 1 191 0
 2085 0050 03F08043 		and	r3, r3, #1073741824
 188:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 2086              		.loc 1 188 0
 2087 0054 22F08A42 		bic	r2, r2, #1157627904
 2088              	.LVL217:
 191:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(masterConfig->enableModifiedTimingFormat) |
 2089              		.loc 1 191 0
 2090 0058 0B43     		orrs	r3, r3, r1
 188:../drivers/fsl_dspi.c ****                           SPI_MCR_DIS_TXF_MASK | SPI_MCR_DIS_RXF_MASK));
 2091              		.loc 1 188 0
 2092 005a 22F44C52 		bic	r2, r2, #13056
 191:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(masterConfig->enableModifiedTimingFormat) |
 2093              		.loc 1 191 0
 2094 005e 1343     		orrs	r3, r3, r2
 193:../drivers/fsl_dspi.c ****                 SPI_MCR_DIS_TXF(false) | SPI_MCR_DIS_RXF(false);
 2095              		.loc 1 193 0
 2096 0060 EA7F     		ldrb	r2, [r5, #31]	@ zero_extendqisi2
 2097 0062 1206     		lsls	r2, r2, #24
 2098 0064 02F08072 		and	r2, r2, #16777216
 192:../drivers/fsl_dspi.c ****                 SPI_MCR_ROOE(masterConfig->enableRxFifoOverWrite) | SPI_MCR_SMPL_PT(masterConfig->s
 2099              		.loc 1 192 0
 2100 0068 1343     		orrs	r3, r3, r2
 193:../drivers/fsl_dspi.c ****                 SPI_MCR_DIS_TXF(false) | SPI_MCR_DIS_RXF(false);
 2101              		.loc 1 193 0
 2102 006a 95F82120 		ldrb	r2, [r5, #33]	@ zero_extendqisi2
 2103 006e 1202     		lsls	r2, r2, #8
 2104 0070 02F44072 		and	r2, r2, #768
 194:../drivers/fsl_dspi.c **** 
 2105              		.loc 1 194 0
 2106 0074 1343     		orrs	r3, r3, r2
 191:../drivers/fsl_dspi.c ****                 SPI_MCR_MTFE(masterConfig->enableModifiedTimingFormat) |
 2107              		.loc 1 191 0
 2108 0076 2360     		str	r3, [r4]
 196:../drivers/fsl_dspi.c **** 
 2109              		.loc 1 196 0
 2110 0078 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 2111              	.LVL218:
 2112              	.LBB405:
 2113              	.LBB406:
 315:../drivers/fsl_dspi.c ****     {
 2114              		.loc 1 315 0
 2115 007a 6B7F     		ldrb	r3, [r5, #29]	@ zero_extendqisi2
 313:../drivers/fsl_dspi.c **** 
 2116              		.loc 1 313 0
 2117 007c 2168     		ldr	r1, [r4]
 2118              	.LVL219:
 315:../drivers/fsl_dspi.c ****     {
 2119              		.loc 1 315 0
 2120 007e 012B     		cmp	r3, #1
 2121 0080 4FEA0243 		lsl	r3, r2, #16
 317:../drivers/fsl_dspi.c ****     }
 2122              		.loc 1 317 0
 2123 0084 03F47C13 		and	r3, r3, #4128768
 2124 0088 0CBF     		ite	eq
 2125 008a 0B43     		orreq	r3, r3, r1
 2126              	.LVL220:
 321:../drivers/fsl_dspi.c ****     }
 2127              		.loc 1 321 0
 2128 008c 21EA0303 		bicne	r3, r1, r3
 2129              	.LVL221:
 324:../drivers/fsl_dspi.c **** }
 2130              		.loc 1 324 0
 2131 0090 2360     		str	r3, [r4]
 2132              	.LVL222:
 2133              	.LBE406:
 2134              	.LBE405:
 198:../drivers/fsl_dspi.c ****     {
 2135              		.loc 1 198 0
 2136 0092 6A68     		ldr	r2, [r5, #4]
 2137 0094 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 2138 0096 3346     		mov	r3, r6
 2139 0098 2046     		mov	r0, r4
 2140 009a FFF7FEFF 		bl	DSPI_MasterSetBaudRate
 2141              	.LVL223:
 203:../drivers/fsl_dspi.c ****            ~(SPI_CTAR_FMSZ_MASK | SPI_CTAR_CPOL_MASK | SPI_CTAR_CPHA_MASK | SPI_CTAR_LSBFE_MASK);
 2142              		.loc 1 203 0
 2143 009e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 207:../drivers/fsl_dspi.c ****         SPI_CTAR_CPHA(masterConfig->ctarConfig.cpha) | SPI_CTAR_LSBFE(masterConfig->ctarConfig.dire
 2144              		.loc 1 207 0
 2145 00a0 AB68     		ldr	r3, [r5, #8]
 2146 00a2 04EB8100 		add	r0, r4, r1, lsl #2
 2147 00a6 013B     		subs	r3, r3, #1
 203:../drivers/fsl_dspi.c ****            ~(SPI_CTAR_FMSZ_MASK | SPI_CTAR_CPOL_MASK | SPI_CTAR_CPHA_MASK | SPI_CTAR_LSBFE_MASK);
 2148              		.loc 1 203 0
 2149 00a8 C268     		ldr	r2, [r0, #12]
 2150              	.LVL224:
 207:../drivers/fsl_dspi.c ****         SPI_CTAR_CPHA(masterConfig->ctarConfig.cpha) | SPI_CTAR_LSBFE(masterConfig->ctarConfig.dire
 2151              		.loc 1 207 0
 2152 00aa DB06     		lsls	r3, r3, #27
 203:../drivers/fsl_dspi.c ****            ~(SPI_CTAR_FMSZ_MASK | SPI_CTAR_CPOL_MASK | SPI_CTAR_CPHA_MASK | SPI_CTAR_LSBFE_MASK);
 2153              		.loc 1 203 0
 2154 00ac 22F0FE42 		bic	r2, r2, #2130706432
 2155              	.LVL225:
 207:../drivers/fsl_dspi.c ****         SPI_CTAR_CPHA(masterConfig->ctarConfig.cpha) | SPI_CTAR_LSBFE(masterConfig->ctarConfig.dire
 2156              		.loc 1 207 0
 2157 00b0 03F0F043 		and	r3, r3, #2013265920
 2158 00b4 1343     		orrs	r3, r3, r2
 2159 00b6 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 2160              	.LVL226:
 2161 00b8 9206     		lsls	r2, r2, #26
 2162 00ba 02F08062 		and	r2, r2, #67108864
 2163 00be 1343     		orrs	r3, r3, r2
 208:../drivers/fsl_dspi.c **** 
 2164              		.loc 1 208 0
 2165 00c0 6A7B     		ldrb	r2, [r5, #13]	@ zero_extendqisi2
 2166 00c2 5206     		lsls	r2, r2, #25
 2167 00c4 02F00072 		and	r2, r2, #33554432
 207:../drivers/fsl_dspi.c ****         SPI_CTAR_CPHA(masterConfig->ctarConfig.cpha) | SPI_CTAR_LSBFE(masterConfig->ctarConfig.dire
 2168              		.loc 1 207 0
 2169 00c8 1343     		orrs	r3, r3, r2
 208:../drivers/fsl_dspi.c **** 
 2170              		.loc 1 208 0
 2171 00ca AA7B     		ldrb	r2, [r5, #14]	@ zero_extendqisi2
 2172 00cc 1206     		lsls	r2, r2, #24
 2173 00ce 02F08072 		and	r2, r2, #16777216
 2174 00d2 1343     		orrs	r3, r3, r2
 206:../drivers/fsl_dspi.c ****         temp | SPI_CTAR_FMSZ(masterConfig->ctarConfig.bitsPerFrame - 1) | SPI_CTAR_CPOL(masterConfi
 2175              		.loc 1 206 0
 2176 00d4 C360     		str	r3, [r0, #12]
 210:../drivers/fsl_dspi.c ****                              masterConfig->ctarConfig.pcsToSckDelayInNanoSec);
 2177              		.loc 1 210 0
 2178 00d6 2B69     		ldr	r3, [r5, #16]
 2179 00d8 0093     		str	r3, [sp]
 2180 00da 0122     		movs	r2, #1
 2181 00dc 3346     		mov	r3, r6
 2182 00de 2046     		mov	r0, r4
 2183 00e0 FFF7FEFF 		bl	DSPI_MasterSetDelayTimes
 2184              	.LVL227:
 212:../drivers/fsl_dspi.c ****                              masterConfig->ctarConfig.lastSckToPcsDelayInNanoSec);
 2185              		.loc 1 212 0
 2186 00e4 6B69     		ldr	r3, [r5, #20]
 2187 00e6 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 2188 00e8 0093     		str	r3, [sp]
 2189 00ea 0222     		movs	r2, #2
 2190 00ec 3346     		mov	r3, r6
 2191 00ee 2046     		mov	r0, r4
 2192 00f0 FFF7FEFF 		bl	DSPI_MasterSetDelayTimes
 2193              	.LVL228:
 214:../drivers/fsl_dspi.c ****                              masterConfig->ctarConfig.betweenTransferDelayInNanoSec);
 2194              		.loc 1 214 0
 2195 00f4 AB69     		ldr	r3, [r5, #24]
 2196 00f6 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 2197 00f8 0093     		str	r3, [sp]
 2198 00fa 0322     		movs	r2, #3
 2199 00fc 3346     		mov	r3, r6
 2200 00fe 2046     		mov	r0, r4
 2201 0100 FFF7FEFF 		bl	DSPI_MasterSetDelayTimes
 2202              	.LVL229:
 217:../drivers/fsl_dspi.c ****     DSPI_StartTransfer(base);
 2203              		.loc 1 217 0
 2204 0104 0021     		movs	r1, #0
 2205 0106 2046     		mov	r0, r4
 2206 0108 FFF7FEFF 		bl	DSPI_SetDummyData
 2207              	.LVL230:
 2208              	.LBB407:
 2209              	.LBB408:
 742:../drivers/fsl_dspi.h **** }
 2210              		.loc 2 742 0
 2211 010c 2368     		ldr	r3, [r4]
 2212 010e 23F00103 		bic	r3, r3, #1
 2213 0112 2360     		str	r3, [r4]
 2214              	.LVL231:
 2215              	.LBE408:
 2216              	.LBE407:
 219:../drivers/fsl_dspi.c **** 
 2217              		.loc 1 219 0
 2218 0114 02B0     		add	sp, sp, #8
 2219              		.cfi_def_cfa_offset 16
 2220              		@ sp needed
 2221 0116 70BD     		pop	{r4, r5, r6, pc}
 2222              	.LVL232:
 2223              	.L207:
 2224              		.align	2
 2225              	.L206:
 2226 0118 00000000 		.word	.LANCHOR3
 2227              		.cfi_endproc
 2228              	.LFE169:
 2230              		.section	.text.DSPI_GetDefaultDataCommandConfig,"ax",%progbits
 2231              		.align	1
 2232              		.global	DSPI_GetDefaultDataCommandConfig
 2233              		.syntax unified
 2234              		.thumb
 2235              		.thumb_func
 2236              		.fpu fpv4-sp-d16
 2238              	DSPI_GetDefaultDataCommandConfig:
 2239              	.LFB178:
 490:../drivers/fsl_dspi.c ****     assert(command);
 2240              		.loc 1 490 0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 0
 2243              		@ frame_needed = 0, uses_anonymous_args = 0
 2244              		@ link register save eliminated.
 2245              	.LVL233:
 493:../drivers/fsl_dspi.c ****     command->whichCtar = kDSPI_Ctar0;
 2246              		.loc 1 493 0
 2247 0000 0023     		movs	r3, #0
 495:../drivers/fsl_dspi.c ****     command->isEndOfQueue = false;
 2248              		.loc 1 495 0
 2249 0002 0122     		movs	r2, #1
 493:../drivers/fsl_dspi.c ****     command->whichCtar = kDSPI_Ctar0;
 2250              		.loc 1 493 0
 2251 0004 0370     		strb	r3, [r0]
 494:../drivers/fsl_dspi.c ****     command->whichPcs = kDSPI_Pcs0;
 2252              		.loc 1 494 0
 2253 0006 4370     		strb	r3, [r0, #1]
 495:../drivers/fsl_dspi.c ****     command->isEndOfQueue = false;
 2254              		.loc 1 495 0
 2255 0008 8270     		strb	r2, [r0, #2]
 496:../drivers/fsl_dspi.c ****     command->clearTransferCount = false;
 2256              		.loc 1 496 0
 2257 000a C370     		strb	r3, [r0, #3]
 497:../drivers/fsl_dspi.c **** }
 2258              		.loc 1 497 0
 2259 000c 0371     		strb	r3, [r0, #4]
 2260 000e 7047     		bx	lr
 2261              		.cfi_endproc
 2262              	.LFE178:
 2264              		.section	.text.DSPI_MasterWriteDataBlocking,"ax",%progbits
 2265              		.align	1
 2266              		.global	DSPI_MasterWriteDataBlocking
 2267              		.syntax unified
 2268              		.thumb
 2269              		.thumb_func
 2270              		.fpu fpv4-sp-d16
 2272              	DSPI_MasterWriteDataBlocking:
 2273              	.LFB179:
 501:../drivers/fsl_dspi.c ****     assert(command);
 2274              		.loc 1 501 0
 2275              		.cfi_startproc
 2276              		@ args = 0, pretend = 0, frame = 0
 2277              		@ frame_needed = 0, uses_anonymous_args = 0
 2278              	.LVL234:
 2279              	.LBB409:
 2280              	.LBB410:
 580:../drivers/fsl_dspi.h **** }
 2281              		.loc 2 580 0
 2282 0000 4FF00043 		mov	r3, #-2147483648
 2283              	.LBE410:
 2284              	.LBE409:
 501:../drivers/fsl_dspi.c ****     assert(command);
 2285              		.loc 1 501 0
 2286 0004 10B5     		push	{r4, lr}
 2287              		.cfi_def_cfa_offset 8
 2288              		.cfi_offset 4, -8
 2289              		.cfi_offset 14, -4
 2290              	.LBB412:
 2291              	.LBB411:
 580:../drivers/fsl_dspi.h **** }
 2292              		.loc 2 580 0
 2293 0006 C362     		str	r3, [r0, #44]
 2294              	.LBE411:
 2295              	.LBE412:
 2296              	.LBB413:
 2297              	.LBB414:
 2298 0008 4FF00074 		mov	r4, #33554432
 2299              	.L210:
 2300              	.LVL235:
 2301              	.LBE414:
 2302              	.LBE413:
 2303              	.LBB416:
 2304              	.LBB417:
 561:../drivers/fsl_dspi.h **** }
 2305              		.loc 2 561 0
 2306 000c C36A     		ldr	r3, [r0, #44]
 2307              	.LVL236:
 2308              	.LBE417:
 2309              	.LBE416:
 507:../drivers/fsl_dspi.c ****     {
 2310              		.loc 1 507 0
 2311 000e 9B01     		lsls	r3, r3, #6
 2312 0010 1ED5     		bpl	.L211
 512:../drivers/fsl_dspi.c ****                   SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
 2313              		.loc 1 512 0
 2314 0012 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 514:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 2315              		.loc 1 514 0
 2316 0014 42EAC373 		orr	r3, r2, r3, lsl #31
 512:../drivers/fsl_dspi.c ****                   SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
 2317              		.loc 1 512 0
 2318 0018 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 2319              	.LVL237:
 2320 001a 1207     		lsls	r2, r2, #28
 2321 001c 02F0E042 		and	r2, r2, #1879048192
 514:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 2322              		.loc 1 514 0
 2323 0020 1343     		orrs	r3, r3, r2
 513:../drivers/fsl_dspi.c ****                   SPI_PUSHR_CTCNT(command->clearTransferCount) | SPI_PUSHR_TXDATA(data);
 2324              		.loc 1 513 0
 2325 0022 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 2326 0024 1204     		lsls	r2, r2, #16
 2327 0026 02F47C12 		and	r2, r2, #4128768
 514:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 2328              		.loc 1 514 0
 2329 002a 1343     		orrs	r3, r3, r2
 513:../drivers/fsl_dspi.c ****                   SPI_PUSHR_CTCNT(command->clearTransferCount) | SPI_PUSHR_TXDATA(data);
 2330              		.loc 1 513 0
 2331 002c CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 2332 002e D206     		lsls	r2, r2, #27
 2333 0030 02F00062 		and	r2, r2, #134217728
 514:../drivers/fsl_dspi.c ****     DSPI_ClearStatusFlags(base, kDSPI_TxFifoFillRequestFlag);
 2334              		.loc 1 514 0
 2335 0034 1343     		orrs	r3, r3, r2
 2336 0036 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 2337 0038 9206     		lsls	r2, r2, #26
 2338 003a 02F08062 		and	r2, r2, #67108864
 2339 003e 1343     		orrs	r3, r3, r2
 512:../drivers/fsl_dspi.c ****                   SPI_PUSHR_PCS(command->whichPcs) | SPI_PUSHR_EOQ(command->isEndOfQueue) |
 2340              		.loc 1 512 0
 2341 0040 4363     		str	r3, [r0, #52]
 2342              	.LVL238:
 2343              	.LBB418:
 2344              	.LBB419:
 580:../drivers/fsl_dspi.h **** }
 2345              		.loc 2 580 0
 2346 0042 4FF00073 		mov	r3, #33554432
 2347 0046 C362     		str	r3, [r0, #44]
 2348              	.L212:
 2349              	.LVL239:
 2350              	.LBE419:
 2351              	.LBE418:
 2352              	.LBB420:
 2353              	.LBB421:
 561:../drivers/fsl_dspi.h **** }
 2354              		.loc 2 561 0 discriminator 1
 2355 0048 C36A     		ldr	r3, [r0, #44]
 2356              	.LVL240:
 2357              	.LBE421:
 2358              	.LBE420:
 518:../drivers/fsl_dspi.c ****     {
 2359              		.loc 1 518 0 discriminator 1
 2360 004a 002B     		cmp	r3, #0
 2361 004c FCDA     		bge	.L212
 521:../drivers/fsl_dspi.c **** 
 2362              		.loc 1 521 0
 2363 004e 10BD     		pop	{r4, pc}
 2364              	.LVL241:
 2365              	.L211:
 2366              	.LBB422:
 2367              	.LBB415:
 580:../drivers/fsl_dspi.h **** }
 2368              		.loc 2 580 0
 2369 0050 C462     		str	r4, [r0, #44]
 2370 0052 DBE7     		b	.L210
 2371              	.LBE415:
 2372              	.LBE422:
 2373              		.cfi_endproc
 2374              	.LFE179:
 2376              		.section	.text.DSPI_SlaveWriteDataBlocking,"ax",%progbits
 2377              		.align	1
 2378              		.global	DSPI_SlaveWriteDataBlocking
 2379              		.syntax unified
 2380              		.thumb
 2381              		.thumb_func
 2382              		.fpu fpv4-sp-d16
 2384              	DSPI_SlaveWriteDataBlocking:
 2385              	.LFB181:
 544:../drivers/fsl_dspi.c ****     /* First, clear Transmit Complete Flag (TCF) */
 2386              		.loc 1 544 0
 2387              		.cfi_startproc
 2388              		@ args = 0, pretend = 0, frame = 0
 2389              		@ frame_needed = 0, uses_anonymous_args = 0
 2390              		@ link register save eliminated.
 2391              	.LVL242:
 2392              	.LBB423:
 2393              	.LBB424:
 580:../drivers/fsl_dspi.h **** }
 2394              		.loc 2 580 0
 2395 0000 4FF00043 		mov	r3, #-2147483648
 2396 0004 C362     		str	r3, [r0, #44]
 2397 0006 4FF00073 		mov	r3, #33554432
 2398              	.L215:
 2399              	.LVL243:
 2400              	.LBE424:
 2401              	.LBE423:
 2402              	.LBB425:
 2403              	.LBB426:
 561:../drivers/fsl_dspi.h **** }
 2404              		.loc 2 561 0
 2405 000a C26A     		ldr	r2, [r0, #44]
 2406              	.LVL244:
 2407              	.LBE426:
 2408              	.LBE425:
 548:../drivers/fsl_dspi.c ****     {
 2409              		.loc 1 548 0
 2410 000c 9201     		lsls	r2, r2, #6
 2411 000e 05D5     		bpl	.L216
 553:../drivers/fsl_dspi.c **** 
 2412              		.loc 1 553 0
 2413 0010 4163     		str	r1, [r0, #52]
 2414              	.LVL245:
 2415              	.LBB427:
 2416              	.LBB428:
 580:../drivers/fsl_dspi.h **** }
 2417              		.loc 2 580 0
 2418 0012 C362     		str	r3, [r0, #44]
 2419              	.L217:
 2420              	.LVL246:
 2421              	.LBE428:
 2422              	.LBE427:
 2423              	.LBB429:
 2424              	.LBB430:
 561:../drivers/fsl_dspi.h **** }
 2425              		.loc 2 561 0 discriminator 1
 2426 0014 C36A     		ldr	r3, [r0, #44]
 2427              	.LVL247:
 2428              	.LBE430:
 2429              	.LBE429:
 558:../drivers/fsl_dspi.c ****     {
 2430              		.loc 1 558 0 discriminator 1
 2431 0016 002B     		cmp	r3, #0
 2432 0018 FCDA     		bge	.L217
 561:../drivers/fsl_dspi.c **** 
 2433              		.loc 1 561 0
 2434 001a 7047     		bx	lr
 2435              	.LVL248:
 2436              	.L216:
 2437              	.LBB431:
 2438              	.LBB432:
 580:../drivers/fsl_dspi.h **** }
 2439              		.loc 2 580 0
 2440 001c C362     		str	r3, [r0, #44]
 2441 001e F4E7     		b	.L215
 2442              	.LBE432:
 2443              	.LBE431:
 2444              		.cfi_endproc
 2445              	.LFE181:
 2447              		.section	.text.DSPI_MasterWriteCommandDataBlocking,"ax",%progbits
 2448              		.align	1
 2449              		.global	DSPI_MasterWriteCommandDataBlocking
 2450              		.syntax unified
 2451              		.thumb
 2452              		.thumb_func
 2453              		.fpu fpv4-sp-d16
 2455              	DSPI_MasterWriteCommandDataBlocking:
 2456              	.LFB210:
 2457              		.cfi_startproc
 2458              		@ args = 0, pretend = 0, frame = 0
 2459              		@ frame_needed = 0, uses_anonymous_args = 0
 2460              		@ link register save eliminated.
 2461 0000 FFF7FEBF 		b	DSPI_SlaveWriteDataBlocking
 2462              		.cfi_endproc
 2463              	.LFE210:
 2465              		.section	.text.DSPI_EnableInterrupts,"ax",%progbits
 2466              		.align	1
 2467              		.global	DSPI_EnableInterrupts
 2468              		.syntax unified
 2469              		.thumb
 2470              		.thumb_func
 2471              		.fpu fpv4-sp-d16
 2473              	DSPI_EnableInterrupts:
 2474              	.LFB182:
 564:../drivers/fsl_dspi.c ****     if (mask & SPI_RSER_TFFF_RE_MASK)
 2475              		.loc 1 564 0
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 0
 2478              		@ frame_needed = 0, uses_anonymous_args = 0
 2479              		@ link register save eliminated.
 2480              	.LVL249:
 565:../drivers/fsl_dspi.c ****     {
 2481              		.loc 1 565 0
 2482 0000 8A01     		lsls	r2, r1, #6
 567:../drivers/fsl_dspi.c ****     }
 2483              		.loc 1 567 0
 2484 0002 42BF     		ittt	mi
 2485 0004 036B     		ldrmi	r3, [r0, #48]
 2486 0006 23F08073 		bicmi	r3, r3, #16777216
 2487 000a 0363     		strmi	r3, [r0, #48]
 569:../drivers/fsl_dspi.c ****     {
 2488              		.loc 1 569 0
 2489 000c 8B03     		lsls	r3, r1, #14
 571:../drivers/fsl_dspi.c ****     }
 2490              		.loc 1 571 0
 2491 000e 42BF     		ittt	mi
 2492 0010 036B     		ldrmi	r3, [r0, #48]
 2493 0012 23F48033 		bicmi	r3, r3, #65536
 2494 0016 0363     		strmi	r3, [r0, #48]
 573:../drivers/fsl_dspi.c **** }
 2495              		.loc 1 573 0
 2496 0018 036B     		ldr	r3, [r0, #48]
 2497 001a 1943     		orrs	r1, r1, r3
 2498              	.LVL250:
 2499 001c 0163     		str	r1, [r0, #48]
 2500 001e 7047     		bx	lr
 2501              		.cfi_endproc
 2502              	.LFE182:
 2504              		.section	.text.DSPI_MasterTransferCreateHandle,"ax",%progbits
 2505              		.align	1
 2506              		.global	DSPI_MasterTransferCreateHandle
 2507              		.syntax unified
 2508              		.thumb
 2509              		.thumb_func
 2510              		.fpu fpv4-sp-d16
 2512              	DSPI_MasterTransferCreateHandle:
 2513              	.LFB183:
 582:../drivers/fsl_dspi.c ****     assert(handle);
 2514              		.loc 1 582 0
 2515              		.cfi_startproc
 2516              		@ args = 0, pretend = 0, frame = 0
 2517              		@ frame_needed = 0, uses_anonymous_args = 0
 2518              	.LVL251:
 2519 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2520              		.cfi_def_cfa_offset 24
 2521              		.cfi_offset 3, -24
 2522              		.cfi_offset 4, -20
 2523              		.cfi_offset 5, -16
 2524              		.cfi_offset 6, -12
 2525              		.cfi_offset 7, -8
 2526              		.cfi_offset 14, -4
 582:../drivers/fsl_dspi.c ****     assert(handle);
 2527              		.loc 1 582 0
 2528 0002 0C46     		mov	r4, r1
 2529 0004 0746     		mov	r7, r0
 2530 0006 1646     		mov	r6, r2
 586:../drivers/fsl_dspi.c **** 
 2531              		.loc 1 586 0
 2532 0008 0021     		movs	r1, #0
 2533              	.LVL252:
 2534 000a 3022     		movs	r2, #48
 2535              	.LVL253:
 2536 000c 2046     		mov	r0, r4
 2537              	.LVL254:
 582:../drivers/fsl_dspi.c ****     assert(handle);
 2538              		.loc 1 582 0
 2539 000e 1D46     		mov	r5, r3
 586:../drivers/fsl_dspi.c **** 
 2540              		.loc 1 586 0
 2541 0010 FFF7FEFF 		bl	memset
 2542              	.LVL255:
 588:../drivers/fsl_dspi.c **** 
 2543              		.loc 1 588 0
 2544 0014 3846     		mov	r0, r7
 2545 0016 FFF7FEFF 		bl	DSPI_GetInstance
 2546              	.LVL256:
 2547 001a 034B     		ldr	r3, .L230
 590:../drivers/fsl_dspi.c ****     handle->userData = userData;
 2548              		.loc 1 590 0
 2549 001c A662     		str	r6, [r4, #40]
 588:../drivers/fsl_dspi.c **** 
 2550              		.loc 1 588 0
 2551 001e 43F82040 		str	r4, [r3, r0, lsl #2]
 591:../drivers/fsl_dspi.c **** }
 2552              		.loc 1 591 0
 2553 0022 E562     		str	r5, [r4, #44]
 2554 0024 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2555              	.LVL257:
 2556              	.L231:
 2557 0026 00BF     		.align	2
 2558              	.L230:
 2559 0028 00000000 		.word	.LANCHOR8
 2560              		.cfi_endproc
 2561              	.LFE183:
 2563              		.section	.text.DSPI_MasterTransferBlocking,"ax",%progbits
 2564              		.align	1
 2565              		.global	DSPI_MasterTransferBlocking
 2566              		.syntax unified
 2567              		.thumb
 2568              		.thumb_func
 2569              		.fpu fpv4-sp-d16
 2571              	DSPI_MasterTransferBlocking:
 2572              	.LFB184:
 595:../drivers/fsl_dspi.c ****     assert(transfer);
 2573              		.loc 1 595 0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 16
 2576              		@ frame_needed = 0, uses_anonymous_args = 0
 2577              	.LVL258:
 2578 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2579              		.cfi_def_cfa_offset 36
 2580              		.cfi_offset 4, -36
 2581              		.cfi_offset 5, -32
 2582              		.cfi_offset 6, -28
 2583              		.cfi_offset 7, -24
 2584              		.cfi_offset 8, -20
 2585              		.cfi_offset 9, -16
 2586              		.cfi_offset 10, -12
 2587              		.cfi_offset 11, -8
 2588              		.cfi_offset 14, -4
 2589 0004 85B0     		sub	sp, sp, #20
 2590              		.cfi_def_cfa_offset 56
 595:../drivers/fsl_dspi.c ****     assert(transfer);
 2591              		.loc 1 595 0
 2592 0006 0446     		mov	r4, r0
 2593 0008 0E46     		mov	r6, r1
 600:../drivers/fsl_dspi.c ****     uint8_t bitsPerFrame;
 2594              		.loc 1 600 0
 2595 000a FFF7FEFF 		bl	DSPI_GetInstance
 2596              	.LVL259:
 2597 000e 9B4B     		ldr	r3, .L303
 2598 0010 1F5C     		ldrb	r7, [r3, r0]	@ zero_extendqisi2
 615:../drivers/fsl_dspi.c ****     {
 2599              		.loc 1 615 0
 2600 0012 8B68     		ldr	r3, [r1, #8]
 600:../drivers/fsl_dspi.c ****     uint8_t bitsPerFrame;
 2601              		.loc 1 600 0
 2602 0014 FFB2     		uxtb	r7, r7
 2603              	.LVL260:
 615:../drivers/fsl_dspi.c ****     {
 2604              		.loc 1 615 0
 2605 0016 002B     		cmp	r3, #0
 2606 0018 00F02D81 		beq	.L280
 2607              	.LVL261:
 2608              	.LBB433:
 2609              	.LBB434:
 753:../drivers/fsl_dspi.h **** }
 2610              		.loc 2 753 0
 2611 001c 2368     		ldr	r3, [r4]
 2612              	.LBE434:
 2613              	.LBE433:
 627:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 2614              		.loc 1 627 0
 2615 001e D1F80C90 		ldr	r9, [r1, #12]
 2616              	.LBB436:
 2617              	.LBB435:
 753:../drivers/fsl_dspi.h **** }
 2618              		.loc 2 753 0
 2619 0022 43F00103 		orr	r3, r3, #1
 2620 0026 2360     		str	r3, [r4]
 2621              	.LVL262:
 2622              	.LBE435:
 2623              	.LBE436:
 2624              	.LBB437:
 2625              	.LBB438:
 620:../drivers/fsl_dspi.h **** }
 2626              		.loc 2 620 0
 2627 0028 236B     		ldr	r3, [r4, #48]
 2628 002a 23F01A43 		bic	r3, r3, #-1711276032
 2629 002e 23F42023 		bic	r3, r3, #655360
 2630 0032 2363     		str	r3, [r4, #48]
 2631              	.LVL263:
 2632              	.LBE438:
 2633              	.LBE437:
 2634              	.LBB439:
 2635              	.LBB440:
 782:../drivers/fsl_dspi.h ****                 SPI_MCR_CLR_RXF(flushRxFifo);
 2636              		.loc 2 782 0
 2637 0034 2368     		ldr	r3, [r4]
 2638 0036 43F44063 		orr	r3, r3, #3072
 2639 003a 2360     		str	r3, [r4]
 2640              	.LVL264:
 2641              	.LBE440:
 2642              	.LBE439:
 2643              	.LBB441:
 2644              	.LBB442:
 580:../drivers/fsl_dspi.h **** }
 2645              		.loc 2 580 0
 2646 003c 904B     		ldr	r3, .L303+4
 2647 003e E362     		str	r3, [r4, #44]
 2648              	.LVL265:
 2649              	.LBE442:
 2650              	.LBE441:
 627:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 2651              		.loc 1 627 0
 2652 0040 0121     		movs	r1, #1
 2653              	.LVL266:
 2654 0042 C9F30313 		ubfx	r3, r9, #4, #4
 2655 0046 01FA03F3 		lsl	r3, r1, r3
 632:../drivers/fsl_dspi.c **** 
 2656              		.loc 1 632 0
 2657 004a 0DF1100A 		add	r10, sp, #16
 627:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 2658              		.loc 1 627 0
 2659 004e 8DF80A30 		strb	r3, [sp, #10]
 628:../drivers/fsl_dspi.c ****     commandStruct.clearTransferCount = false;
 2660              		.loc 1 628 0
 2661 0052 0023     		movs	r3, #0
 2662 0054 8DF80B30 		strb	r3, [sp, #11]
 629:../drivers/fsl_dspi.c ****     commandStruct.whichCtar =
 2663              		.loc 1 629 0
 2664 0058 8DF80C30 		strb	r3, [sp, #12]
 632:../drivers/fsl_dspi.c **** 
 2665              		.loc 1 632 0
 2666 005c C9F30053 		ubfx	r3, r9, #20, #1
 2667 0060 0AF8083D 		strb	r3, [r10, #-8]!
 631:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterPcsContinuous);
 2668              		.loc 1 631 0
 2669 0064 09F00F05 		and	r5, r9, #15
 634:../drivers/fsl_dspi.c **** 
 2670              		.loc 1 634 0
 2671 0068 5046     		mov	r0, r10
 630:../drivers/fsl_dspi.c ****         (dspi_ctar_selection_t)((transfer->configFlags & DSPI_MASTER_CTAR_MASK) >> DSPI_MASTER_CTAR
 2672              		.loc 1 630 0
 2673 006a 8DF80950 		strb	r5, [sp, #9]
 634:../drivers/fsl_dspi.c **** 
 2674              		.loc 1 634 0
 2675 006e FFF7FEFF 		bl	DSPI_MasterGetFormattedCommand.constprop.4
 2676              	.LVL267:
 637:../drivers/fsl_dspi.c ****     lastCommand = DSPI_MasterGetFormattedCommand(&(commandStruct));
 2677              		.loc 1 637 0
 2678 0072 C9F34059 		ubfx	r9, r9, #21, #1
 634:../drivers/fsl_dspi.c **** 
 2679              		.loc 1 634 0
 2680 0076 8046     		mov	r8, r0
 2681              	.LVL268:
 638:../drivers/fsl_dspi.c **** 
 2682              		.loc 1 638 0
 2683 0078 5046     		mov	r0, r10
 2684              	.LVL269:
 636:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterActiveAfterTransfer)
 2685              		.loc 1 636 0
 2686 007a 8DF80B10 		strb	r1, [sp, #11]
 637:../drivers/fsl_dspi.c ****     lastCommand = DSPI_MasterGetFormattedCommand(&(commandStruct));
 2687              		.loc 1 637 0
 2688 007e 8DF80890 		strb	r9, [sp, #8]
 641:../drivers/fsl_dspi.c **** 
 2689              		.loc 1 641 0
 2690 0082 0235     		adds	r5, r5, #2
 638:../drivers/fsl_dspi.c **** 
 2691              		.loc 1 638 0
 2692 0084 FFF7FEFF 		bl	DSPI_MasterGetFormattedCommand.constprop.4
 2693              	.LVL270:
 641:../drivers/fsl_dspi.c **** 
 2694              		.loc 1 641 0
 2695 0088 04EB8505 		add	r5, r4, r5, lsl #2
 638:../drivers/fsl_dspi.c **** 
 2696              		.loc 1 638 0
 2697 008c 8446     		mov	ip, r0
 2698              	.LVL271:
 644:../drivers/fsl_dspi.c ****     remainingSendByteCount = transfer->dataSize;
 2699              		.loc 1 644 0
 2700 008e 7368     		ldr	r3, [r6, #4]
 641:../drivers/fsl_dspi.c **** 
 2701              		.loc 1 641 0
 2702 0090 6868     		ldr	r0, [r5, #4]
 2703              	.LVL272:
 645:../drivers/fsl_dspi.c ****     remainingReceiveByteCount = transfer->dataSize;
 2704              		.loc 1 645 0
 2705 0092 B268     		ldr	r2, [r6, #8]
 643:../drivers/fsl_dspi.c ****     rxData = transfer->rxData;
 2706              		.loc 1 643 0
 2707 0094 3568     		ldr	r5, [r6]
 646:../drivers/fsl_dspi.c **** 
 2708              		.loc 1 646 0
 2709 0096 B668     		ldr	r6, [r6, #8]
 2710              	.LVL273:
 648:../drivers/fsl_dspi.c ****     {
 2711              		.loc 1 648 0
 2712 0098 D4F800E0 		ldr	lr, [r4]
 641:../drivers/fsl_dspi.c **** 
 2713              		.loc 1 641 0
 2714 009c C0F3C360 		ubfx	r0, r0, #27, #4
 648:../drivers/fsl_dspi.c ****     {
 2715              		.loc 1 648 0
 2716 00a0 1EF4805F 		tst	lr, #4096
 641:../drivers/fsl_dspi.c **** 
 2717              		.loc 1 641 0
 2718 00a4 00F10100 		add	r0, r0, #1
 2719              	.LVL274:
 648:../drivers/fsl_dspi.c ****     {
 2720              		.loc 1 648 0
 2721 00a8 12D1     		bne	.L234
 648:../drivers/fsl_dspi.c ****     {
 2722              		.loc 1 648 0 is_stmt 0 discriminator 1
 2723 00aa D4F800E0 		ldr	lr, [r4]
 2724 00ae 1EF4005F 		tst	lr, #8192
 2725 00b2 0DD1     		bne	.L234
 654:../drivers/fsl_dspi.c ****     }
 2726              		.loc 1 654 0 is_stmt 1
 2727 00b4 DFF8D0E1 		ldr	lr, .L303+12
 2728 00b8 7445     		cmp	r4, lr
 2729 00ba 47D0     		beq	.L283
 654:../drivers/fsl_dspi.c ****     }
 2730              		.loc 1 654 0 is_stmt 0 discriminator 1
 2731 00bc 0EF5805E 		add	lr, lr, #4096
 2732 00c0 7445     		cmp	r4, lr
 2733 00c2 05D0     		beq	.L234
 654:../drivers/fsl_dspi.c ****     }
 2734              		.loc 1 654 0 discriminator 3
 2735 00c4 6F49     		ldr	r1, .L303+8
 2736 00c6 8C42     		cmp	r4, r1
 2737 00c8 14BF     		ite	ne
 2738 00ca 4FF0FF31 		movne	r1, #-1
 2739 00ce 0121     		moveq	r1, #1
 2740              	.L234:
 2741              	.LVL275:
 2742              	.LBB443:
 2743              	.LBB444:
 742:../drivers/fsl_dspi.h **** }
 2744              		.loc 2 742 0 is_stmt 1
 2745 00d0 D4F800E0 		ldr	lr, [r4]
 2746              	.LBE444:
 2747              	.LBE443:
 659:../drivers/fsl_dspi.c ****     {
 2748              		.loc 1 659 0
 2749 00d4 0828     		cmp	r0, #8
 2750              	.LBB446:
 2751              	.LBB445:
 742:../drivers/fsl_dspi.h **** }
 2752              		.loc 2 742 0
 2753 00d6 2EF0010E 		bic	lr, lr, #1
 2754 00da C4F800E0 		str	lr, [r4]
 2755              	.LVL276:
 2756              	.LBE445:
 2757              	.LBE446:
 659:../drivers/fsl_dspi.c ****     {
 2758              		.loc 1 659 0
 2759 00de 37D9     		bls	.L235
 2760              	.LBB447:
 2761              	.LBB448:
 580:../drivers/fsl_dspi.h **** }
 2762              		.loc 2 580 0
 2763 00e0 4FF0007E 		mov	lr, #33554432
 2764              	.LBE448:
 2765              	.LBE447:
 2766              	.LBB450:
 2767              	.LBB451:
 2768 00e4 4FF40039 		mov	r9, #131072
 2769              	.LBE451:
 2770              	.LBE450:
 767:../drivers/fsl_dspi.c ****                 }
 2771              		.loc 1 767 0
 2772 00e8 BFB2     		uxth	r7, r7
 2773              	.LVL277:
 2774              	.L236:
 745:../drivers/fsl_dspi.c ****         {
 2775              		.loc 1 745 0
 2776 00ea CAB3     		cbz	r2, .L279
 747:../drivers/fsl_dspi.c ****             {
 2777              		.loc 1 747 0
 2778 00ec 022A     		cmp	r2, #2
 2779 00ee 40F28F80 		bls	.L302
 2780              	.L259:
 2781              	.LVL278:
 2782              	.LBB453:
 2783              	.LBB454:
 561:../drivers/fsl_dspi.h **** }
 2784              		.loc 2 561 0
 2785 00f2 E06A     		ldr	r0, [r4, #44]
 2786              	.LVL279:
 2787              	.LBE454:
 2788              	.LBE453:
 808:../drivers/fsl_dspi.c ****                 {
 2789              		.loc 1 808 0
 2790 00f4 8001     		lsls	r0, r0, #6
 2791 00f6 40F1B980 		bpl	.L271
 813:../drivers/fsl_dspi.c ****                 {
 2792              		.loc 1 813 0
 2793 00fa 002D     		cmp	r5, #0
 2794 00fc 00F0B980 		beq	.L272
 817:../drivers/fsl_dspi.c ****                     ++txData;
 2795              		.loc 1 817 0
 2796 0100 35F8020B 		ldrh	r0, [r5], #2	@ unaligned
 2797              	.LVL280:
 2798              	.L273:
 824:../drivers/fsl_dspi.c ****                 remainingSendByteCount -= 2;
 2799              		.loc 1 824 0
 2800 0104 40EA0800 		orr	r0, r0, r8
 2801              	.LVL281:
 2802 0108 6063     		str	r0, [r4, #52]
 825:../drivers/fsl_dspi.c **** 
 2803              		.loc 1 825 0
 2804 010a 901E     		subs	r0, r2, #2
 2805              	.LVL282:
 2806              	.LBB455:
 2807              	.LBB456:
 580:../drivers/fsl_dspi.h **** }
 2808              		.loc 2 580 0
 2809 010c C4F82CE0 		str	lr, [r4, #44]
 2810              	.LBE456:
 2811              	.LBE455:
 829:../drivers/fsl_dspi.c ****                 {
 2812              		.loc 1 829 0
 2813 0110 C2F10202 		rsb	r2, r2, #2
 2814              	.L274:
 2815 0114 02EB060A 		add	r10, r2, r6
 2816 0118 4FEA5A0A 		lsr	r10, r10, #1
 2817              	.LVL283:
 2818              	.L275:
 2819 011c 5145     		cmp	r1, r10
 2820 011e 00F28A80 		bhi	.L270
 2821              	.LVL284:
 2822              	.LBB457:
 2823              	.LBB458:
 561:../drivers/fsl_dspi.h **** }
 2824              		.loc 2 561 0
 2825 0122 D4F82CB0 		ldr	fp, [r4, #44]
 2826              	.LVL285:
 2827              	.LBE458:
 2828              	.LBE457:
 831:../drivers/fsl_dspi.c ****                     {
 2829              		.loc 1 831 0
 2830 0126 1BF4003F 		tst	fp, #131072
 2831 012a F7D0     		beq	.L275
 2832              	.LVL286:
 2833              	.LBB459:
 2834              	.LBB460:
 2835              		.loc 2 1044 0
 2836 012c D4F838B0 		ldr	fp, [r4, #56]
 2837              	.LVL287:
 2838              	.LBE460:
 2839              	.LBE459:
 833:../drivers/fsl_dspi.c **** 
 2840              		.loc 1 833 0
 2841 0130 1FFA8BFA 		uxth	r10, fp
 2842              	.LVL288:
 835:../drivers/fsl_dspi.c ****                         {
 2843              		.loc 1 835 0
 2844 0134 33B1     		cbz	r3, .L276
 839:../drivers/fsl_dspi.c ****                             ++rxData;
 2845              		.loc 1 839 0
 2846 0136 4FEA1A2A 		lsr	r10, r10, #8
 2847              	.LVL289:
 837:../drivers/fsl_dspi.c ****                             ++rxData;
 2848              		.loc 1 837 0
 2849 013a 83F800B0 		strb	fp, [r3]
 2850              	.LVL290:
 839:../drivers/fsl_dspi.c ****                             ++rxData;
 2851              		.loc 1 839 0
 2852 013e 83F801A0 		strb	r10, [r3, #1]
 840:../drivers/fsl_dspi.c ****                         }
 2853              		.loc 1 840 0
 2854 0142 0233     		adds	r3, r3, #2
 2855              	.LVL291:
 2856              	.L276:
 842:../drivers/fsl_dspi.c **** 
 2857              		.loc 1 842 0
 2858 0144 023E     		subs	r6, r6, #2
 2859              	.LVL292:
 2860              	.LBB461:
 2861              	.LBB462:
 580:../drivers/fsl_dspi.h **** }
 2862              		.loc 2 580 0
 2863 0146 C4F82C90 		str	r9, [r4, #44]
 2864 014a E3E7     		b	.L274
 2865              	.LVL293:
 2866              	.L283:
 2867              	.LBE462:
 2868              	.LBE461:
 654:../drivers/fsl_dspi.c ****     }
 2869              		.loc 1 654 0
 2870 014c 0421     		movs	r1, #4
 2871 014e BFE7     		b	.L234
 2872              	.LVL294:
 2873              	.L235:
 716:../drivers/fsl_dspi.c ****                 }
 2874              		.loc 1 716 0
 2875 0150 47EA0800 		orr	r0, r7, r8
 2876              	.LVL295:
 2877              	.LBB463:
 2878              	.LBB464:
 580:../drivers/fsl_dspi.h **** }
 2879              		.loc 2 580 0
 2880 0154 4FF40039 		mov	r9, #131072
 2881              	.LBE464:
 2882              	.LBE463:
 716:../drivers/fsl_dspi.c ****                 }
 2883              		.loc 1 716 0
 2884 0158 0190     		str	r0, [sp, #4]
 677:../drivers/fsl_dspi.c ****                 }
 2885              		.loc 1 677 0
 2886 015a 47EA0C07 		orr	r7, r7, ip
 2887              	.LVL296:
 2888              	.L237:
 661:../drivers/fsl_dspi.c ****         {
 2889              		.loc 1 661 0
 2890 015e 1AB9     		cbnz	r2, .L257
 2891              	.LVL297:
 2892              	.L279:
 851:../drivers/fsl_dspi.c **** }
 2893              		.loc 1 851 0
 2894 0160 0020     		movs	r0, #0
 2895              	.LVL298:
 2896              	.L232:
 852:../drivers/fsl_dspi.c **** 
 2897              		.loc 1 852 0
 2898 0162 05B0     		add	sp, sp, #20
 2899              		.cfi_remember_state
 2900              		.cfi_def_cfa_offset 36
 2901              		@ sp needed
 2902 0164 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2903              	.LVL299:
 2904              	.L257:
 2905              		.cfi_restore_state
 663:../drivers/fsl_dspi.c ****             {
 2906              		.loc 1 663 0
 2907 0168 012A     		cmp	r2, #1
 2908 016a 27D1     		bne	.L239
 2909              	.LVL300:
 2910              	.L238:
 2911              	.LBB466:
 2912              	.LBB467:
 561:../drivers/fsl_dspi.h **** }
 2913              		.loc 2 561 0
 2914 016c E26A     		ldr	r2, [r4, #44]
 2915              	.LVL301:
 2916              	.LBE467:
 2917              	.LBE466:
 665:../drivers/fsl_dspi.c ****                 {
 2918              		.loc 1 665 0
 2919 016e 9201     		lsls	r2, r2, #6
 2920 0170 0FD5     		bpl	.L240
 670:../drivers/fsl_dspi.c ****                 {
 2921              		.loc 1 670 0
 2922 0172 95B1     		cbz	r5, .L241
 672:../drivers/fsl_dspi.c ****                     txData++;
 2923              		.loc 1 672 0
 2924 0174 15F8012B 		ldrb	r2, [r5], #1	@ zero_extendqisi2
 2925              	.LVL302:
 2926 0178 42EA0C02 		orr	r2, r2, ip
 2927 017c 6263     		str	r2, [r4, #52]
 2928              	.LVL303:
 2929              	.L242:
 2930              	.LBB468:
 2931              	.LBB469:
 580:../drivers/fsl_dspi.h **** }
 2932              		.loc 2 580 0
 2933 017e 4FF00072 		mov	r2, #33554432
 2934 0182 E262     		str	r2, [r4, #44]
 2935              	.LVL304:
 2936              	.LBE469:
 2937              	.LBE468:
 682:../drivers/fsl_dspi.c ****                 {
 2938              		.loc 1 682 0
 2939 0184 B646     		mov	lr, r6
 2940              	.LVL305:
 2941              	.L244:
 2942 0186 BEF1000F 		cmp	lr, #0
 2943 018a 08D1     		bne	.L247
 2944 018c 7646     		mov	r6, lr
 2945              	.LVL306:
 2946              	.L248:
 2947 018e 7246     		mov	r2, lr
 2948 0190 E5E7     		b	.L237
 2949              	.LVL307:
 2950              	.L240:
 2951              	.LBB470:
 2952              	.LBB471:
 580:../drivers/fsl_dspi.h **** }
 2953              		.loc 2 580 0
 2954 0192 4FF00072 		mov	r2, #33554432
 2955 0196 E262     		str	r2, [r4, #44]
 2956 0198 E8E7     		b	.L238
 2957              	.LVL308:
 2958              	.L241:
 2959              	.LBE471:
 2960              	.LBE470:
 677:../drivers/fsl_dspi.c ****                 }
 2961              		.loc 1 677 0
 2962 019a 6763     		str	r7, [r4, #52]
 2963 019c EFE7     		b	.L242
 2964              	.LVL309:
 2965              	.L247:
 2966              	.LBB472:
 2967              	.LBB473:
 561:../drivers/fsl_dspi.h **** }
 2968              		.loc 2 561 0
 2969 019e E26A     		ldr	r2, [r4, #44]
 2970              	.LVL310:
 2971              	.LBE473:
 2972              	.LBE472:
 684:../drivers/fsl_dspi.c ****                     {
 2973              		.loc 1 684 0
 2974 01a0 9603     		lsls	r6, r2, #14
 2975 01a2 F0D5     		bpl	.L244
 2976              	.LBB474:
 2977              	.LBB475:
 2978              		.loc 2 1044 0
 2979 01a4 A26B     		ldr	r2, [r4, #56]
 2980              	.LBE475:
 2981              	.LBE474:
 686:../drivers/fsl_dspi.c ****                         {
 2982              		.loc 1 686 0
 2983 01a6 0BB1     		cbz	r3, .L246
 2984              	.LVL311:
 689:../drivers/fsl_dspi.c ****                             rxData++;
 2985              		.loc 1 689 0
 2986 01a8 03F8012B 		strb	r2, [r3], #1
 2987              	.LVL312:
 2988              	.L246:
 696:../drivers/fsl_dspi.c **** 
 2989              		.loc 1 696 0
 2990 01ac 0EF1FF3E 		add	lr, lr, #-1
 2991              	.LVL313:
 2992              	.LBB476:
 2993              	.LBB477:
 580:../drivers/fsl_dspi.h **** }
 2994              		.loc 2 580 0
 2995 01b0 C4F82C90 		str	r9, [r4, #44]
 2996 01b4 E7E7     		b	.L244
 2997              	.LVL314:
 2998              	.L249:
 2999              	.LBE477:
 3000              	.LBE476:
 3001              	.LBB478:
 3002              	.LBB479:
 3003 01b6 4FF00070 		mov	r0, #33554432
 3004 01ba E062     		str	r0, [r4, #44]
 3005              	.LVL315:
 3006              	.L239:
 3007              	.LBE479:
 3008              	.LBE478:
 3009              	.LBB480:
 3010              	.LBB481:
 561:../drivers/fsl_dspi.h **** }
 3011              		.loc 2 561 0
 3012 01bc D4F82CE0 		ldr	lr, [r4, #44]
 3013              	.LVL316:
 3014              	.LBE481:
 3015              	.LBE480:
 705:../drivers/fsl_dspi.c ****                 {
 3016              		.loc 1 705 0
 3017 01c0 1EF0007F 		tst	lr, #33554432
 3018 01c4 F7D0     		beq	.L249
 709:../drivers/fsl_dspi.c ****                 {
 3019              		.loc 1 709 0
 3020 01c6 F5B1     		cbz	r5, .L250
 711:../drivers/fsl_dspi.c ****                     txData++;
 3021              		.loc 1 711 0
 3022 01c8 15F801EB 		ldrb	lr, [r5], #1	@ zero_extendqisi2
 3023              	.LVL317:
 3024 01cc 4EEA080E 		orr	lr, lr, r8
 3025 01d0 C4F834E0 		str	lr, [r4, #52]
 3026              	.LVL318:
 3027              	.L251:
 3028              	.LBB482:
 3029              	.LBB483:
 580:../drivers/fsl_dspi.h **** }
 3030              		.loc 2 580 0
 3031 01d4 4FF00070 		mov	r0, #33554432
 3032              	.LBE483:
 3033              	.LBE482:
 718:../drivers/fsl_dspi.c **** 
 3034              		.loc 1 718 0
 3035 01d8 02F1FF3E 		add	lr, r2, #-1
 3036              	.LVL319:
 3037              	.LBB485:
 3038              	.LBB484:
 580:../drivers/fsl_dspi.h **** }
 3039              		.loc 2 580 0
 3040 01dc E062     		str	r0, [r4, #44]
 3041              	.LBE484:
 3042              	.LBE485:
 722:../drivers/fsl_dspi.c ****                 {
 3043              		.loc 1 722 0
 3044 01de C2F10102 		rsb	r2, r2, #1
 3045              	.L252:
 3046 01e2 02EB060A 		add	r10, r2, r6
 3047              	.LVL320:
 3048              	.L253:
 3049 01e6 5145     		cmp	r1, r10
 3050 01e8 D1D8     		bhi	.L248
 3051              	.LVL321:
 3052              	.LBB486:
 3053              	.LBB487:
 561:../drivers/fsl_dspi.h **** }
 3054              		.loc 2 561 0
 3055 01ea D4F82CB0 		ldr	fp, [r4, #44]
 3056              	.LVL322:
 3057              	.LBE487:
 3058              	.LBE486:
 724:../drivers/fsl_dspi.c ****                     {
 3059              		.loc 1 724 0
 3060 01ee 1BF4003F 		tst	fp, #131072
 3061 01f2 F8D0     		beq	.L253
 3062              	.LBB488:
 3063              	.LBB489:
 3064              		.loc 2 1044 0
 3065 01f4 D4F838A0 		ldr	r10, [r4, #56]
 3066              	.LBE489:
 3067              	.LBE488:
 726:../drivers/fsl_dspi.c ****                         {
 3068              		.loc 1 726 0
 3069 01f8 0BB1     		cbz	r3, .L255
 3070              	.LVL323:
 728:../drivers/fsl_dspi.c ****                             rxData++;
 3071              		.loc 1 728 0
 3072 01fa 03F801AB 		strb	r10, [r3], #1
 3073              	.LVL324:
 3074              	.L255:
 735:../drivers/fsl_dspi.c **** 
 3075              		.loc 1 735 0
 3076 01fe 013E     		subs	r6, r6, #1
 3077              	.LVL325:
 3078              	.LBB490:
 3079              	.LBB465:
 580:../drivers/fsl_dspi.h **** }
 3080              		.loc 2 580 0
 3081 0200 C4F82C90 		str	r9, [r4, #44]
 3082 0204 EDE7     		b	.L252
 3083              	.LVL326:
 3084              	.L250:
 3085              	.LBE465:
 3086              	.LBE490:
 716:../drivers/fsl_dspi.c ****                 }
 3087              		.loc 1 716 0
 3088 0206 0198     		ldr	r0, [sp, #4]
 3089 0208 6063     		str	r0, [r4, #52]
 3090 020a E3E7     		b	.L251
 3091              	.LVL327:
 3092              	.L260:
 3093              	.LBB491:
 3094              	.LBB449:
 580:../drivers/fsl_dspi.h **** }
 3095              		.loc 2 580 0
 3096 020c C4F82CE0 		str	lr, [r4, #44]
 3097              	.LVL328:
 3098              	.L302:
 3099              	.LBE449:
 3100              	.LBE491:
 3101              	.LBB492:
 3102              	.LBB493:
 561:../drivers/fsl_dspi.h **** }
 3103              		.loc 2 561 0
 3104 0210 E06A     		ldr	r0, [r4, #44]
 3105              	.LVL329:
 3106              	.LBE493:
 3107              	.LBE492:
 749:../drivers/fsl_dspi.c ****                 {
 3108              		.loc 1 749 0
 3109 0212 8001     		lsls	r0, r0, #6
 3110 0214 FAD5     		bpl	.L260
 754:../drivers/fsl_dspi.c ****                 {
 3111              		.loc 1 754 0
 3112 0216 85B1     		cbz	r5, .L261
 756:../drivers/fsl_dspi.c ****                     ++txData;
 3113              		.loc 1 756 0
 3114 0218 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 3115              	.LVL330:
 759:../drivers/fsl_dspi.c ****                     {
 3116              		.loc 1 759 0
 3117 021a 022A     		cmp	r2, #2
 761:../drivers/fsl_dspi.c ****                         ++txData;
 3118              		.loc 1 761 0
 3119 021c 0EBF     		itee	eq
 3120 021e 35F8022B 		ldrheq	r2, [r5], #2	@ unaligned
 3121              	.LVL331:
 756:../drivers/fsl_dspi.c ****                     ++txData;
 3122              		.loc 1 756 0
 3123 0222 82B2     		uxthne	r2, r0
 757:../drivers/fsl_dspi.c **** 
 3124              		.loc 1 757 0
 3125 0224 0135     		addne	r5, r5, #1
 3126              	.LVL332:
 3127              	.L263:
 770:../drivers/fsl_dspi.c **** 
 3128              		.loc 1 770 0
 3129 0226 42EA0C02 		orr	r2, r2, ip
 3130              	.LVL333:
 3131 022a 6263     		str	r2, [r4, #52]
 3132              	.LVL334:
 775:../drivers/fsl_dspi.c ****                 {
 3133              		.loc 1 775 0
 3134 022c 3046     		mov	r0, r6
 3135              	.LBB494:
 3136              	.LBB495:
 580:../drivers/fsl_dspi.h **** }
 3137              		.loc 2 580 0
 3138 022e C4F82CE0 		str	lr, [r4, #44]
 3139              	.LVL335:
 3140              	.L265:
 3141              	.LBE495:
 3142              	.LBE494:
 775:../drivers/fsl_dspi.c ****                 {
 3143              		.loc 1 775 0
 3144 0232 20B9     		cbnz	r0, .L269
 3145 0234 0646     		mov	r6, r0
 3146              	.LVL336:
 3147              	.L270:
 3148 0236 0246     		mov	r2, r0
 3149 0238 57E7     		b	.L236
 3150              	.LVL337:
 3151              	.L261:
 767:../drivers/fsl_dspi.c ****                 }
 3152              		.loc 1 767 0
 3153 023a 3A46     		mov	r2, r7
 3154              	.LVL338:
 3155 023c F3E7     		b	.L263
 3156              	.LVL339:
 3157              	.L269:
 3158              	.LBB496:
 3159              	.LBB497:
 561:../drivers/fsl_dspi.h **** }
 3160              		.loc 2 561 0
 3161 023e E26A     		ldr	r2, [r4, #44]
 3162              	.LVL340:
 3163              	.LBE497:
 3164              	.LBE496:
 777:../drivers/fsl_dspi.c ****                     {
 3165              		.loc 1 777 0
 3166 0240 9603     		lsls	r6, r2, #14
 3167 0242 F6D5     		bpl	.L265
 3168              	.LVL341:
 781:../drivers/fsl_dspi.c ****                         {
 3169              		.loc 1 781 0
 3170 0244 0128     		cmp	r0, #1
 3171              	.LBB498:
 3172              	.LBB499:
 3173              		.loc 2 1044 0
 3174 0246 A26B     		ldr	r2, [r4, #56]
 3175              	.LVL342:
 3176              	.LBE499:
 3177              	.LBE498:
 781:../drivers/fsl_dspi.c ****                         {
 3178              		.loc 1 781 0
 3179 0248 09D0     		beq	.L266
 783:../drivers/fsl_dspi.c ****                             {
 3180              		.loc 1 783 0
 3181 024a 23B1     		cbz	r3, .L267
 785:../drivers/fsl_dspi.c ****                                 ++rxData;
 3182              		.loc 1 785 0
 3183 024c 1A70     		strb	r2, [r3]
 3184              	.LVL343:
 787:../drivers/fsl_dspi.c ****                                 ++rxData;
 3185              		.loc 1 787 0
 3186 024e C2F30722 		ubfx	r2, r2, #8, #8
 3187              	.LVL344:
 3188 0252 5A70     		strb	r2, [r3, #1]
 788:../drivers/fsl_dspi.c ****                             }
 3189              		.loc 1 788 0
 3190 0254 0233     		adds	r3, r3, #2
 3191              	.LVL345:
 3192              	.L267:
 790:../drivers/fsl_dspi.c ****                         }
 3193              		.loc 1 790 0
 3194 0256 0238     		subs	r0, r0, #2
 3195              	.LVL346:
 3196              	.L268:
 3197              	.LBB500:
 3198              	.LBB452:
 580:../drivers/fsl_dspi.h **** }
 3199              		.loc 2 580 0
 3200 0258 C4F82C90 		str	r9, [r4, #44]
 3201 025c E9E7     		b	.L265
 3202              	.LVL347:
 3203              	.L266:
 3204              	.LBE452:
 3205              	.LBE500:
 794:../drivers/fsl_dspi.c ****                             {
 3206              		.loc 1 794 0
 3207 025e 1BB1     		cbz	r3, .L286
 796:../drivers/fsl_dspi.c ****                                 ++rxData;
 3208              		.loc 1 796 0
 3209 0260 03F8012B 		strb	r2, [r3], #1
 3210              	.LVL348:
 799:../drivers/fsl_dspi.c ****                         }
 3211              		.loc 1 799 0
 3212 0264 0020     		movs	r0, #0
 3213              	.LVL349:
 3214 0266 F7E7     		b	.L268
 3215              	.LVL350:
 3216              	.L286:
 3217 0268 1846     		mov	r0, r3
 3218              	.LVL351:
 3219 026a F5E7     		b	.L268
 3220              	.LVL352:
 3221              	.L271:
 3222              	.LBB501:
 3223              	.LBB502:
 580:../drivers/fsl_dspi.h **** }
 3224              		.loc 2 580 0
 3225 026c C4F82CE0 		str	lr, [r4, #44]
 3226 0270 3FE7     		b	.L259
 3227              	.LVL353:
 3228              	.L272:
 3229              	.LBE502:
 3230              	.LBE501:
 822:../drivers/fsl_dspi.c ****                 }
 3231              		.loc 1 822 0
 3232 0272 3846     		mov	r0, r7
 3233              	.LVL354:
 3234 0274 46E7     		b	.L273
 3235              	.LVL355:
 3236              	.L280:
 617:../drivers/fsl_dspi.c ****     }
 3237              		.loc 1 617 0
 3238 0276 0420     		movs	r0, #4
 3239 0278 73E7     		b	.L232
 3240              	.L304:
 3241 027a 00BF     		.align	2
 3242              	.L303:
 3243 027c 00000000 		.word	.LANCHOR2
 3244 0280 00000ADA 		.word	-636878848
 3245 0284 00C00A40 		.word	1074446336
 3246 0288 00C00240 		.word	1073922048
 3247              		.cfi_endproc
 3248              	.LFE184:
 3250              		.section	.text.DSPI_MasterTransferNonBlocking,"ax",%progbits
 3251              		.align	1
 3252              		.global	DSPI_MasterTransferNonBlocking
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu fpv4-sp-d16
 3258              	DSPI_MasterTransferNonBlocking:
 3259              	.LFB186:
 896:../drivers/fsl_dspi.c ****     assert(handle);
 3260              		.loc 1 896 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 8
 3263              		@ frame_needed = 0, uses_anonymous_args = 0
 3264              	.LVL356:
 901:../drivers/fsl_dspi.c ****     {
 3265              		.loc 1 901 0
 3266 0000 9368     		ldr	r3, [r2, #8]
 896:../drivers/fsl_dspi.c ****     assert(handle);
 3267              		.loc 1 896 0
 3268 0002 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 3269              		.cfi_def_cfa_offset 40
 3270              		.cfi_offset 4, -32
 3271              		.cfi_offset 5, -28
 3272              		.cfi_offset 6, -24
 3273              		.cfi_offset 7, -20
 3274              		.cfi_offset 8, -16
 3275              		.cfi_offset 9, -12
 3276              		.cfi_offset 10, -8
 3277              		.cfi_offset 14, -4
 896:../drivers/fsl_dspi.c ****     assert(handle);
 3278              		.loc 1 896 0
 3279 0006 0446     		mov	r4, r0
 3280 0008 0D46     		mov	r5, r1
 3281 000a 1746     		mov	r7, r2
 901:../drivers/fsl_dspi.c ****     {
 3282              		.loc 1 901 0
 3283 000c 002B     		cmp	r3, #0
 3284 000e 00F09380 		beq	.L312
 907:../drivers/fsl_dspi.c ****     {
 3285              		.loc 1 907 0
 3286 0012 91F82430 		ldrb	r3, [r1, #36]	@ zero_extendqisi2
 3287 0016 012B     		cmp	r3, #1
 3288 0018 00F09280 		beq	.L313
 3289              	.LVL357:
 3290              	.LBB527:
 3291              	.LBB528:
 912:../drivers/fsl_dspi.c **** 
 3292              		.loc 1 912 0
 3293 001c 0122     		movs	r2, #1
 3294              	.LVL358:
 3295 001e 81F82420 		strb	r2, [r1, #36]
 915:../drivers/fsl_dspi.c **** 
 3296              		.loc 1 915 0
 3297 0022 FFF7FEFF 		bl	DSPI_GetInstance
 3298              	.LVL359:
 3299 0026 484B     		ldr	r3, .L318
 3300 0028 1E56     		ldrsb	r6, [r3, r0]
 3301              	.LVL360:
 3302              	.LBB529:
 3303              	.LBB530:
 3304              	.LBB531:
 3305              		.file 5 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1677:../CMSIS/core_cm4.h ****   }
1678:../CMSIS/core_cm4.h **** }
1679:../CMSIS/core_cm4.h **** 
1680:../CMSIS/core_cm4.h **** 
1681:../CMSIS/core_cm4.h **** /**
1682:../CMSIS/core_cm4.h ****   \brief   Get Interrupt Enable status
1683:../CMSIS/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1684:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1685:../CMSIS/core_cm4.h ****   \return             0  Interrupt is not enabled.
1686:../CMSIS/core_cm4.h ****   \return             1  Interrupt is enabled.
1687:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1688:../CMSIS/core_cm4.h ****  */
1689:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1690:../CMSIS/core_cm4.h **** {
1691:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1692:../CMSIS/core_cm4.h ****   {
1693:../CMSIS/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1694:../CMSIS/core_cm4.h ****   }
1695:../CMSIS/core_cm4.h ****   else
1696:../CMSIS/core_cm4.h ****   {
1697:../CMSIS/core_cm4.h ****     return(0U);
1698:../CMSIS/core_cm4.h ****   }
1699:../CMSIS/core_cm4.h **** }
1700:../CMSIS/core_cm4.h **** 
1701:../CMSIS/core_cm4.h **** 
1702:../CMSIS/core_cm4.h **** /**
1703:../CMSIS/core_cm4.h ****   \brief   Disable Interrupt
1704:../CMSIS/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1705:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1706:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1707:../CMSIS/core_cm4.h ****  */
1708:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1709:../CMSIS/core_cm4.h **** {
1710:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
 3306              		.loc 5 1710 0
 3307 002a 002E     		cmp	r6, #0
 3308 002c 0BDB     		blt	.L307
1711:../CMSIS/core_cm4.h ****   {
1712:../CMSIS/core_cm4.h ****     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 3309              		.loc 5 1712 0
 3310 002e 06F01F01 		and	r1, r6, #31
 3311              	.LVL361:
 3312 0032 7309     		lsrs	r3, r6, #5
 3313 0034 8A40     		lsls	r2, r2, r1
 3314 0036 2033     		adds	r3, r3, #32
 3315 0038 4449     		ldr	r1, .L318+4
 3316 003a 41F82320 		str	r2, [r1, r3, lsl #2]
 3317              	.LBB532:
 3318              	.LBB533:
 3319              		.loc 3 833 0
 3320              		.syntax unified
 3321              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3322 003e BFF34F8F 		dsb 0xF
 3323              	@ 0 "" 2
 3324              		.thumb
 3325              		.syntax unified
 3326              	.LBE533:
 3327              	.LBE532:
 3328              	.LBB534:
 3329              	.LBB535:
 822:../CMSIS/cmsis_gcc.h **** }
 3330              		.loc 3 822 0
 3331              		.syntax unified
 3332              	@ 822 "../CMSIS/cmsis_gcc.h" 1
 3333 0042 BFF36F8F 		isb 0xF
 3334              	@ 0 "" 2
 3335              		.thumb
 3336              		.syntax unified
 3337              	.L307:
 3338              	.LVL362:
 3339              	.LBE535:
 3340              	.LBE534:
 3341              	.LBE531:
 3342              	.LBE530:
 3343              	.LBE529:
 3344              	.LBB536:
 3345              	.LBB537:
 3346              	.LBB538:
 3347              	.LBB539:
 753:../drivers/fsl_dspi.h **** }
 3348              		.loc 2 753 0
 3349 0046 2368     		ldr	r3, [r4]
 3350              	.LBE539:
 3351              	.LBE538:
 866:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 3352              		.loc 1 866 0
 3353 0048 D7F80C90 		ldr	r9, [r7, #12]
 3354              	.LBB541:
 3355              	.LBB540:
 753:../drivers/fsl_dspi.h **** }
 3356              		.loc 2 753 0
 3357 004c 43F00103 		orr	r3, r3, #1
 3358 0050 2360     		str	r3, [r4]
 3359              	.LVL363:
 3360              	.LBE540:
 3361              	.LBE541:
 3362              	.LBB542:
 3363              	.LBB543:
 782:../drivers/fsl_dspi.h ****                 SPI_MCR_CLR_RXF(flushRxFifo);
 3364              		.loc 2 782 0
 3365 0052 2368     		ldr	r3, [r4]
 3366 0054 43F44063 		orr	r3, r3, #3072
 3367 0058 2360     		str	r3, [r4]
 3368              	.LVL364:
 3369              	.LBE543:
 3370              	.LBE542:
 3371              	.LBB544:
 3372              	.LBB545:
 580:../drivers/fsl_dspi.h **** }
 3373              		.loc 2 580 0
 3374 005a 3D4B     		ldr	r3, .L318+8
 3375 005c E362     		str	r3, [r4, #44]
 3376              	.LVL365:
 3377              	.LBE545:
 3378              	.LBE544:
 866:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 3379              		.loc 1 866 0
 3380 005e 0121     		movs	r1, #1
 3381 0060 C9F30313 		ubfx	r3, r9, #4, #4
 3382 0064 01FA03F3 		lsl	r3, r1, r3
 871:../drivers/fsl_dspi.c ****     handle->command = DSPI_MasterGetFormattedCommand(&(commandStruct));
 3383              		.loc 1 871 0
 3384 0068 0DF1080A 		add	r10, sp, #8
 866:../drivers/fsl_dspi.c ****     commandStruct.isEndOfQueue = false;
 3385              		.loc 1 866 0
 3386 006c 8DF80230 		strb	r3, [sp, #2]
 867:../drivers/fsl_dspi.c ****     commandStruct.clearTransferCount = false;
 3387              		.loc 1 867 0
 3388 0070 0023     		movs	r3, #0
 3389 0072 8DF80330 		strb	r3, [sp, #3]
 868:../drivers/fsl_dspi.c ****     commandStruct.whichCtar =
 3390              		.loc 1 868 0
 3391 0076 8DF80430 		strb	r3, [sp, #4]
 871:../drivers/fsl_dspi.c ****     handle->command = DSPI_MasterGetFormattedCommand(&(commandStruct));
 3392              		.loc 1 871 0
 3393 007a C9F30053 		ubfx	r3, r9, #20, #1
 3394 007e 0AF8083D 		strb	r3, [r10, #-8]!
 870:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterPcsContinuous);
 3395              		.loc 1 870 0
 3396 0082 09F00F08 		and	r8, r9, #15
 872:../drivers/fsl_dspi.c **** 
 3397              		.loc 1 872 0
 3398 0086 5046     		mov	r0, r10
 869:../drivers/fsl_dspi.c ****         (dspi_ctar_selection_t)((transfer->configFlags & DSPI_MASTER_CTAR_MASK) >> DSPI_MASTER_CTAR
 3399              		.loc 1 869 0
 3400 0088 8DF80180 		strb	r8, [sp, #1]
 872:../drivers/fsl_dspi.c **** 
 3401              		.loc 1 872 0
 3402 008c FFF7FEFF 		bl	DSPI_MasterGetFormattedCommand.constprop.4
 3403              	.LVL366:
 875:../drivers/fsl_dspi.c ****     handle->lastCommand = DSPI_MasterGetFormattedCommand(&(commandStruct));
 3404              		.loc 1 875 0
 3405 0090 C9F34059 		ubfx	r9, r9, #21, #1
 872:../drivers/fsl_dspi.c **** 
 3406              		.loc 1 872 0
 3407 0094 6860     		str	r0, [r5, #4]
 876:../drivers/fsl_dspi.c **** 
 3408              		.loc 1 876 0
 3409 0096 5046     		mov	r0, r10
 874:../drivers/fsl_dspi.c ****     commandStruct.isPcsContinuous = (bool)(transfer->configFlags & kDSPI_MasterActiveAfterTransfer)
 3410              		.loc 1 874 0
 3411 0098 8DF80310 		strb	r1, [sp, #3]
 875:../drivers/fsl_dspi.c ****     handle->lastCommand = DSPI_MasterGetFormattedCommand(&(commandStruct));
 3412              		.loc 1 875 0
 3413 009c 8DF80090 		strb	r9, [sp]
 876:../drivers/fsl_dspi.c **** 
 3414              		.loc 1 876 0
 3415 00a0 FFF7FEFF 		bl	DSPI_MasterGetFormattedCommand.constprop.4
 3416              	.LVL367:
 878:../drivers/fsl_dspi.c **** 
 3417              		.loc 1 878 0
 3418 00a4 08F10208 		add	r8, r8, #2
 3419 00a8 04EB8808 		add	r8, r4, r8, lsl #2
 876:../drivers/fsl_dspi.c **** 
 3420              		.loc 1 876 0
 3421 00ac A860     		str	r0, [r5, #8]
 878:../drivers/fsl_dspi.c **** 
 3422              		.loc 1 878 0
 3423 00ae D8F80430 		ldr	r3, [r8, #4]
 3424 00b2 C3F3C363 		ubfx	r3, r3, #27, #4
 3425 00b6 0133     		adds	r3, r3, #1
 3426 00b8 2B60     		str	r3, [r5]
 880:../drivers/fsl_dspi.c ****     {
 3427              		.loc 1 880 0
 3428 00ba 2368     		ldr	r3, [r4]
 3429 00bc DA04     		lsls	r2, r3, #19
 3430 00be 02D4     		bmi	.L308
 3431 00c0 2368     		ldr	r3, [r4]
 3432 00c2 9B04     		lsls	r3, r3, #18
 3433 00c4 28D5     		bpl	.L309
 3434              	.L308:
 882:../drivers/fsl_dspi.c ****     }
 3435              		.loc 1 882 0
 3436 00c6 0123     		movs	r3, #1
 3437 00c8 2B73     		strb	r3, [r5, #12]
 3438              	.L310:
 888:../drivers/fsl_dspi.c ****     handle->rxData = transfer->rxData;
 3439              		.loc 1 888 0
 3440 00ca 3B68     		ldr	r3, [r7]
 3441 00cc 2B61     		str	r3, [r5, #16]
 889:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = transfer->dataSize;
 3442              		.loc 1 889 0
 3443 00ce 7B68     		ldr	r3, [r7, #4]
 3444 00d0 6B61     		str	r3, [r5, #20]
 890:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = transfer->dataSize;
 3445              		.loc 1 890 0
 3446 00d2 BB68     		ldr	r3, [r7, #8]
 3447 00d4 AB61     		str	r3, [r5, #24]
 891:../drivers/fsl_dspi.c ****     handle->totalByteCount = transfer->dataSize;
 3448              		.loc 1 891 0
 3449 00d6 BB68     		ldr	r3, [r7, #8]
 3450 00d8 EB61     		str	r3, [r5, #28]
 892:../drivers/fsl_dspi.c **** }
 3451              		.loc 1 892 0
 3452 00da BB68     		ldr	r3, [r7, #8]
 3453 00dc 2B62     		str	r3, [r5, #32]
 3454              	.LVL368:
 3455              	.LBE537:
 3456              	.LBE536:
 923:../drivers/fsl_dspi.c **** 
 3457              		.loc 1 923 0
 3458 00de 1D4B     		ldr	r3, .L318+12
 3459 00e0 1D4A     		ldr	r2, .L318+16
 3460 00e2 1A60     		str	r2, [r3]
 925:../drivers/fsl_dspi.c ****     DSPI_StartTransfer(base);
 3461              		.loc 1 925 0
 3462 00e4 4FF40031 		mov	r1, #131072
 3463 00e8 2046     		mov	r0, r4
 3464 00ea FFF7FEFF 		bl	DSPI_EnableInterrupts
 3465              	.LVL369:
 3466              	.LBB547:
 3467              	.LBB548:
 742:../drivers/fsl_dspi.h **** }
 3468              		.loc 2 742 0
 3469 00ee 2368     		ldr	r3, [r4]
 3470 00f0 23F00103 		bic	r3, r3, #1
 3471 00f4 2360     		str	r3, [r4]
 3472              	.LVL370:
 3473              	.LBE548:
 3474              	.LBE547:
 929:../drivers/fsl_dspi.c **** 
 3475              		.loc 1 929 0
 3476 00f6 2946     		mov	r1, r5
 3477 00f8 2046     		mov	r0, r4
 3478 00fa FFF7FEFF 		bl	DSPI_MasterTransferFillUpTxFifo
 3479              	.LVL371:
 3480              	.LBB549:
 3481              	.LBB550:
 3482              	.LBB551:
1674:../CMSIS/core_cm4.h ****   {
 3483              		.loc 5 1674 0
 3484 00fe 002E     		cmp	r6, #0
 3485 0100 08DB     		blt	.L317
 3486              	.LVL372:
1676:../CMSIS/core_cm4.h ****   }
 3487              		.loc 5 1676 0
 3488 0102 7209     		lsrs	r2, r6, #5
 3489 0104 0123     		movs	r3, #1
 3490 0106 06F01F06 		and	r6, r6, #31
 3491              	.LVL373:
 3492 010a 03FA06F6 		lsl	r6, r3, r6
 3493 010e 0F4B     		ldr	r3, .L318+4
 3494 0110 43F82260 		str	r6, [r3, r2, lsl #2]
 3495              	.L317:
1674:../CMSIS/core_cm4.h ****   {
 3496              		.loc 5 1674 0
 3497 0114 0020     		movs	r0, #0
 3498 0116 10E0     		b	.L305
 3499              	.LVL374:
 3500              	.L309:
 3501              	.LBE551:
 3502              	.LBE550:
 3503              	.LBE549:
 3504              	.LBB552:
 3505              	.LBB546:
 886:../drivers/fsl_dspi.c ****     }
 3506              		.loc 1 886 0
 3507 0118 104B     		ldr	r3, .L318+20
 3508 011a 9C42     		cmp	r4, r3
 3509 011c 0AD0     		beq	.L314
 3510 011e 03F58053 		add	r3, r3, #4096
 3511 0122 9C42     		cmp	r4, r3
 3512 0124 04D0     		beq	.L311
 3513 0126 0E49     		ldr	r1, .L318+24
 3514 0128 8C42     		cmp	r4, r1
 3515 012a 14BF     		ite	ne
 3516 012c FF21     		movne	r1, #255
 3517 012e 0121     		moveq	r1, #1
 3518              	.L311:
 3519 0130 2973     		strb	r1, [r5, #12]
 3520 0132 CAE7     		b	.L310
 3521              	.L314:
 3522 0134 0421     		movs	r1, #4
 3523 0136 FBE7     		b	.L311
 3524              	.LVL375:
 3525              	.L312:
 3526              	.LBE546:
 3527              	.LBE552:
 3528              	.LBE528:
 3529              	.LBE527:
 903:../drivers/fsl_dspi.c ****     }
 3530              		.loc 1 903 0
 3531 0138 0420     		movs	r0, #4
 3532              	.LVL376:
 3533              	.L305:
 935:../drivers/fsl_dspi.c **** 
 3534              		.loc 1 935 0
 3535 013a 02B0     		add	sp, sp, #8
 3536              		.cfi_remember_state
 3537              		.cfi_def_cfa_offset 32
 3538              		@ sp needed
 3539 013c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3540              	.LVL377:
 3541              	.L313:
 3542              		.cfi_restore_state
 909:../drivers/fsl_dspi.c ****     }
 3543              		.loc 1 909 0
 3544 0140 4FF41670 		mov	r0, #600
 3545              	.LVL378:
 3546 0144 F9E7     		b	.L305
 3547              	.L319:
 3548 0146 00BF     		.align	2
 3549              	.L318:
 3550 0148 00000000 		.word	.LANCHOR9
 3551 014c 00E100E0 		.word	-536813312
 3552 0150 00000ADA 		.word	-636878848
 3553 0154 00000000 		.word	.LANCHOR0
 3554 0158 00000000 		.word	DSPI_MasterTransferHandleIRQ
 3555 015c 00C00240 		.word	1073922048
 3556 0160 00C00A40 		.word	1074446336
 3557              		.cfi_endproc
 3558              	.LFE186:
 3560              		.section	.text.DSPI_MasterHalfDuplexTransferBlocking,"ax",%progbits
 3561              		.align	1
 3562              		.global	DSPI_MasterHalfDuplexTransferBlocking
 3563              		.syntax unified
 3564              		.thumb
 3565              		.thumb_func
 3566              		.fpu fpv4-sp-d16
 3568              	DSPI_MasterHalfDuplexTransferBlocking:
 3569              	.LFB187:
 938:../drivers/fsl_dspi.c ****     assert(xfer);
 3570              		.loc 1 938 0
 3571              		.cfi_startproc
 3572              		@ args = 0, pretend = 0, frame = 16
 3573              		@ frame_needed = 0, uses_anonymous_args = 0
 3574              	.LVL379:
 3575 0000 30B5     		push	{r4, r5, lr}
 3576              		.cfi_def_cfa_offset 12
 3577              		.cfi_offset 4, -12
 3578              		.cfi_offset 5, -8
 3579              		.cfi_offset 14, -4
 3580 0002 0C46     		mov	r4, r1
 3581 0004 85B0     		sub	sp, sp, #20
 3582              		.cfi_def_cfa_offset 32
 938:../drivers/fsl_dspi.c ****     assert(xfer);
 3583              		.loc 1 938 0
 3584 0006 0546     		mov	r5, r0
 941:../drivers/fsl_dspi.c ****     status_t status;
 3585              		.loc 1 941 0
 3586 0008 1022     		movs	r2, #16
 3587 000a 0021     		movs	r1, #0
 3588              	.LVL380:
 3589 000c 6846     		mov	r0, sp
 3590              	.LVL381:
 3591 000e FFF7FEFF 		bl	memset
 3592              	.LVL382:
 944:../drivers/fsl_dspi.c ****     {
 3593              		.loc 1 944 0
 3594 0012 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 3595 0014 EBB1     		cbz	r3, .L321
 946:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
 3596              		.loc 1 946 0
 3597 0016 2368     		ldr	r3, [r4]
 3598 0018 0093     		str	r3, [sp]
 948:../drivers/fsl_dspi.c ****     }
 3599              		.loc 1 948 0
 3600 001a A368     		ldr	r3, [r4, #8]
 3601              	.L328:
 957:../drivers/fsl_dspi.c ****     {
 3602              		.loc 1 957 0
 3603 001c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 954:../drivers/fsl_dspi.c ****     }
 3604              		.loc 1 954 0
 3605 001e 0293     		str	r3, [sp, #8]
 3606 0020 2369     		ldr	r3, [r4, #16]
 957:../drivers/fsl_dspi.c ****     {
 3607              		.loc 1 957 0
 3608 0022 D2B1     		cbz	r2, .L323
 959:../drivers/fsl_dspi.c ****     }
 3609              		.loc 1 959 0
 3610 0024 43F40013 		orr	r3, r3, #2097152
 3611              	.L329:
 966:../drivers/fsl_dspi.c ****     if (status != kStatus_Success)
 3612              		.loc 1 966 0
 3613 0028 6946     		mov	r1, sp
 3614 002a 2846     		mov	r0, r5
 963:../drivers/fsl_dspi.c ****     }
 3615              		.loc 1 963 0
 3616 002c 0393     		str	r3, [sp, #12]
 966:../drivers/fsl_dspi.c ****     if (status != kStatus_Success)
 3617              		.loc 1 966 0
 3618 002e FFF7FEFF 		bl	DSPI_MasterTransferBlocking
 3619              	.LVL383:
 967:../drivers/fsl_dspi.c ****     {
 3620              		.loc 1 967 0
 3621 0032 60B9     		cbnz	r0, .L320
 972:../drivers/fsl_dspi.c ****     {
 3622              		.loc 1 972 0
 3623 0034 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 3624 0036 9BB1     		cbz	r3, .L326
 975:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
 3625              		.loc 1 975 0
 3626 0038 6368     		ldr	r3, [r4, #4]
 3627 003a 0193     		str	r3, [sp, #4]
 976:../drivers/fsl_dspi.c ****     }
 3628              		.loc 1 976 0
 3629 003c E368     		ldr	r3, [r4, #12]
 974:../drivers/fsl_dspi.c ****         tempXfer.rxData = xfer->rxData;
 3630              		.loc 1 974 0
 3631 003e 0090     		str	r0, [sp]
 3632              	.L330:
 982:../drivers/fsl_dspi.c ****     }
 3633              		.loc 1 982 0
 3634 0040 0293     		str	r3, [sp, #8]
 987:../drivers/fsl_dspi.c **** 
 3635              		.loc 1 987 0
 3636 0042 6946     		mov	r1, sp
 984:../drivers/fsl_dspi.c **** 
 3637              		.loc 1 984 0
 3638 0044 2369     		ldr	r3, [r4, #16]
 3639 0046 0393     		str	r3, [sp, #12]
 987:../drivers/fsl_dspi.c **** 
 3640              		.loc 1 987 0
 3641 0048 2846     		mov	r0, r5
 3642              	.LVL384:
 3643 004a FFF7FEFF 		bl	DSPI_MasterTransferBlocking
 3644              	.LVL385:
 3645              	.L320:
 990:../drivers/fsl_dspi.c **** 
 3646              		.loc 1 990 0
 3647 004e 05B0     		add	sp, sp, #20
 3648              		.cfi_remember_state
 3649              		.cfi_def_cfa_offset 12
 3650              		@ sp needed
 3651 0050 30BD     		pop	{r4, r5, pc}
 3652              	.LVL386:
 3653              	.L321:
 3654              		.cfi_restore_state
 953:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
 3655              		.loc 1 953 0
 3656 0052 6368     		ldr	r3, [r4, #4]
 3657 0054 0193     		str	r3, [sp, #4]
 954:../drivers/fsl_dspi.c ****     }
 3658              		.loc 1 954 0
 3659 0056 E368     		ldr	r3, [r4, #12]
 3660 0058 E0E7     		b	.L328
 3661              	.L323:
 963:../drivers/fsl_dspi.c ****     }
 3662              		.loc 1 963 0
 3663 005a 23F40013 		bic	r3, r3, #2097152
 3664 005e E3E7     		b	.L329
 3665              	.LVL387:
 3666              	.L326:
 980:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
 3667              		.loc 1 980 0
 3668 0060 2268     		ldr	r2, [r4]
 981:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->txDataSize;
 3669              		.loc 1 981 0
 3670 0062 8DE80C00 		stm	sp, {r2, r3}
 982:../drivers/fsl_dspi.c ****     }
 3671              		.loc 1 982 0
 3672 0066 A368     		ldr	r3, [r4, #8]
 3673 0068 EAE7     		b	.L330
 3674              		.cfi_endproc
 3675              	.LFE187:
 3677              		.section	.text.DSPI_MasterHalfDuplexTransferNonBlocking,"ax",%progbits
 3678              		.align	1
 3679              		.global	DSPI_MasterHalfDuplexTransferNonBlocking
 3680              		.syntax unified
 3681              		.thumb
 3682              		.thumb_func
 3683              		.fpu fpv4-sp-d16
 3685              	DSPI_MasterHalfDuplexTransferNonBlocking:
 3686              	.LFB188:
 995:../drivers/fsl_dspi.c ****     assert(xfer);
 3687              		.loc 1 995 0
 3688              		.cfi_startproc
 3689              		@ args = 0, pretend = 0, frame = 16
 3690              		@ frame_needed = 0, uses_anonymous_args = 0
 3691              	.LVL388:
 3692 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 3693              		.cfi_def_cfa_offset 32
 3694              		.cfi_offset 4, -16
 3695              		.cfi_offset 5, -12
 3696              		.cfi_offset 6, -8
 3697              		.cfi_offset 14, -4
 995:../drivers/fsl_dspi.c ****     assert(xfer);
 3698              		.loc 1 995 0
 3699 0002 1446     		mov	r4, r2
 3700 0004 0546     		mov	r5, r0
 3701 0006 0E46     		mov	r6, r1
 998:../drivers/fsl_dspi.c ****     status_t status;
 3702              		.loc 1 998 0
 3703 0008 1022     		movs	r2, #16
 3704              	.LVL389:
 3705 000a 0021     		movs	r1, #0
 3706              	.LVL390:
 3707 000c 6846     		mov	r0, sp
 3708              	.LVL391:
 3709 000e FFF7FEFF 		bl	memset
 3710              	.LVL392:
1001:../drivers/fsl_dspi.c ****     {
 3711              		.loc 1 1001 0
 3712 0012 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 3713 0014 F3B1     		cbz	r3, .L332
1003:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
 3714              		.loc 1 1003 0
 3715 0016 2368     		ldr	r3, [r4]
 3716 0018 0093     		str	r3, [sp]
1005:../drivers/fsl_dspi.c ****     }
 3717              		.loc 1 1005 0
 3718 001a A368     		ldr	r3, [r4, #8]
 3719              	.L339:
1014:../drivers/fsl_dspi.c ****     {
 3720              		.loc 1 1014 0
 3721 001c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
1011:../drivers/fsl_dspi.c ****     }
 3722              		.loc 1 1011 0
 3723 001e 0293     		str	r3, [sp, #8]
 3724 0020 2369     		ldr	r3, [r4, #16]
1014:../drivers/fsl_dspi.c ****     {
 3725              		.loc 1 1014 0
 3726 0022 DAB1     		cbz	r2, .L334
1016:../drivers/fsl_dspi.c ****     }
 3727              		.loc 1 1016 0
 3728 0024 43F40013 		orr	r3, r3, #2097152
 3729              	.L340:
1023:../drivers/fsl_dspi.c ****     if (status != kStatus_Success)
 3730              		.loc 1 1023 0
 3731 0028 6946     		mov	r1, sp
 3732 002a 2846     		mov	r0, r5
1020:../drivers/fsl_dspi.c ****     }
 3733              		.loc 1 1020 0
 3734 002c 0393     		str	r3, [sp, #12]
1023:../drivers/fsl_dspi.c ****     if (status != kStatus_Success)
 3735              		.loc 1 1023 0
 3736 002e FFF7FEFF 		bl	DSPI_MasterTransferBlocking
 3737              	.LVL393:
1024:../drivers/fsl_dspi.c ****     {
 3738              		.loc 1 1024 0
 3739 0032 68B9     		cbnz	r0, .L331
1029:../drivers/fsl_dspi.c ****     {
 3740              		.loc 1 1029 0
 3741 0034 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 3742 0036 A3B1     		cbz	r3, .L337
1032:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
 3743              		.loc 1 1032 0
 3744 0038 6368     		ldr	r3, [r4, #4]
 3745 003a 0193     		str	r3, [sp, #4]
1033:../drivers/fsl_dspi.c ****     }
 3746              		.loc 1 1033 0
 3747 003c E368     		ldr	r3, [r4, #12]
1031:../drivers/fsl_dspi.c ****         tempXfer.rxData = xfer->rxData;
 3748              		.loc 1 1031 0
 3749 003e 0090     		str	r0, [sp]
 3750              	.L341:
1039:../drivers/fsl_dspi.c ****     }
 3751              		.loc 1 1039 0
 3752 0040 0293     		str	r3, [sp, #8]
1043:../drivers/fsl_dspi.c **** 
 3753              		.loc 1 1043 0
 3754 0042 6A46     		mov	r2, sp
1041:../drivers/fsl_dspi.c **** 
 3755              		.loc 1 1041 0
 3756 0044 2369     		ldr	r3, [r4, #16]
 3757 0046 0393     		str	r3, [sp, #12]
1043:../drivers/fsl_dspi.c **** 
 3758              		.loc 1 1043 0
 3759 0048 3146     		mov	r1, r6
 3760 004a 2846     		mov	r0, r5
 3761              	.LVL394:
 3762 004c FFF7FEFF 		bl	DSPI_MasterTransferNonBlocking
 3763              	.LVL395:
 3764              	.L331:
1046:../drivers/fsl_dspi.c **** 
 3765              		.loc 1 1046 0
 3766 0050 04B0     		add	sp, sp, #16
 3767              		.cfi_remember_state
 3768              		.cfi_def_cfa_offset 16
 3769              		@ sp needed
 3770 0052 70BD     		pop	{r4, r5, r6, pc}
 3771              	.LVL396:
 3772              	.L332:
 3773              		.cfi_restore_state
1010:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->rxDataSize;
 3774              		.loc 1 1010 0
 3775 0054 6368     		ldr	r3, [r4, #4]
 3776 0056 0193     		str	r3, [sp, #4]
1011:../drivers/fsl_dspi.c ****     }
 3777              		.loc 1 1011 0
 3778 0058 E368     		ldr	r3, [r4, #12]
 3779 005a DFE7     		b	.L339
 3780              	.L334:
1020:../drivers/fsl_dspi.c ****     }
 3781              		.loc 1 1020 0
 3782 005c 23F40013 		bic	r3, r3, #2097152
 3783 0060 E2E7     		b	.L340
 3784              	.LVL397:
 3785              	.L337:
1037:../drivers/fsl_dspi.c ****         tempXfer.rxData = NULL;
 3786              		.loc 1 1037 0
 3787 0062 2268     		ldr	r2, [r4]
1038:../drivers/fsl_dspi.c ****         tempXfer.dataSize = xfer->txDataSize;
 3788              		.loc 1 1038 0
 3789 0064 8DE80C00 		stm	sp, {r2, r3}
1039:../drivers/fsl_dspi.c ****     }
 3790              		.loc 1 1039 0
 3791 0068 A368     		ldr	r3, [r4, #8]
 3792 006a E9E7     		b	.L341
 3793              		.cfi_endproc
 3794              	.LFE188:
 3796              		.section	.text.DSPI_MasterTransferGetCount,"ax",%progbits
 3797              		.align	1
 3798              		.global	DSPI_MasterTransferGetCount
 3799              		.syntax unified
 3800              		.thumb
 3801              		.thumb_func
 3802              		.fpu fpv4-sp-d16
 3804              	DSPI_MasterTransferGetCount:
 3805              	.LFB189:
1049:../drivers/fsl_dspi.c ****     assert(handle);
 3806              		.loc 1 1049 0
 3807              		.cfi_startproc
 3808              		@ args = 0, pretend = 0, frame = 0
 3809              		@ frame_needed = 0, uses_anonymous_args = 0
 3810              		@ link register save eliminated.
 3811              	.LVL398:
1052:../drivers/fsl_dspi.c ****     {
 3812              		.loc 1 1052 0
 3813 0000 6AB1     		cbz	r2, .L345
1058:../drivers/fsl_dspi.c ****     {
 3814              		.loc 1 1058 0
 3815 0002 91F82430 		ldrb	r3, [r1, #36]	@ zero_extendqisi2
 3816 0006 012B     		cmp	r3, #1
1064:../drivers/fsl_dspi.c ****     return kStatus_Success;
 3817              		.loc 1 1064 0
 3818 0008 0BBF     		itete	eq
 3819 000a 0B6A     		ldreq	r3, [r1, #32]
1061:../drivers/fsl_dspi.c ****     }
 3820              		.loc 1 1061 0
 3821 000c 0620     		movne	r0, #6
 3822              	.LVL399:
1064:../drivers/fsl_dspi.c ****     return kStatus_Success;
 3823              		.loc 1 1064 0
 3824 000e C869     		ldreq	r0, [r1, #28]
1060:../drivers/fsl_dspi.c ****         return kStatus_NoTransferInProgress;
 3825              		.loc 1 1060 0
 3826 0010 0023     		movne	r3, #0
1064:../drivers/fsl_dspi.c ****     return kStatus_Success;
 3827              		.loc 1 1064 0
 3828 0012 09BF     		itett	eq
 3829 0014 1B1A     		subeq	r3, r3, r0
1060:../drivers/fsl_dspi.c ****         return kStatus_NoTransferInProgress;
 3830              		.loc 1 1060 0
 3831 0016 1360     		strne	r3, [r2]
1064:../drivers/fsl_dspi.c ****     return kStatus_Success;
 3832              		.loc 1 1064 0
 3833 0018 1360     		streq	r3, [r2]
1065:../drivers/fsl_dspi.c **** }
 3834              		.loc 1 1065 0
 3835 001a 0020     		moveq	r0, #0
 3836 001c 7047     		bx	lr
 3837              	.LVL400:
 3838              	.L345:
1054:../drivers/fsl_dspi.c ****     }
 3839              		.loc 1 1054 0
 3840 001e 0420     		movs	r0, #4
 3841              	.LVL401:
1066:../drivers/fsl_dspi.c **** 
 3842              		.loc 1 1066 0
 3843 0020 7047     		bx	lr
 3844              		.cfi_endproc
 3845              	.LFE189:
 3847              		.section	.text.DSPI_MasterTransferAbort,"ax",%progbits
 3848              		.align	1
 3849              		.global	DSPI_MasterTransferAbort
 3850              		.syntax unified
 3851              		.thumb
 3852              		.thumb_func
 3853              		.fpu fpv4-sp-d16
 3855              	DSPI_MasterTransferAbort:
 3856              	.LFB192:
1214:../drivers/fsl_dspi.c ****     assert(handle);
 3857              		.loc 1 1214 0
 3858              		.cfi_startproc
 3859              		@ args = 0, pretend = 0, frame = 0
 3860              		@ frame_needed = 0, uses_anonymous_args = 0
 3861              		@ link register save eliminated.
 3862              	.LVL402:
 3863              	.LBB553:
 3864              	.LBB554:
 753:../drivers/fsl_dspi.h **** }
 3865              		.loc 2 753 0
 3866 0000 0368     		ldr	r3, [r0]
 3867 0002 43F00103 		orr	r3, r3, #1
 3868 0006 0360     		str	r3, [r0]
 3869              	.LVL403:
 3870              	.LBE554:
 3871              	.LBE553:
 3872              	.LBB555:
 3873              	.LBB556:
 620:../drivers/fsl_dspi.h **** }
 3874              		.loc 2 620 0
 3875 0008 036B     		ldr	r3, [r0, #48]
 3876 000a 23F00073 		bic	r3, r3, #33554432
 3877 000e 23F40033 		bic	r3, r3, #131072
 3878 0012 0363     		str	r3, [r0, #48]
 3879              	.LVL404:
 3880              	.LBE556:
 3881              	.LBE555:
1222:../drivers/fsl_dspi.c **** }
 3882              		.loc 1 1222 0
 3883 0014 0023     		movs	r3, #0
 3884 0016 81F82430 		strb	r3, [r1, #36]
 3885 001a 7047     		bx	lr
 3886              		.cfi_endproc
 3887              	.LFE192:
 3889              		.section	.text.DSPI_SlaveTransferCreateHandle,"ax",%progbits
 3890              		.align	1
 3891              		.global	DSPI_SlaveTransferCreateHandle
 3892              		.syntax unified
 3893              		.thumb
 3894              		.thumb_func
 3895              		.fpu fpv4-sp-d16
 3897              	DSPI_SlaveTransferCreateHandle:
 3898              	.LFB194:
1336:../drivers/fsl_dspi.c ****     assert(handle);
 3899              		.loc 1 1336 0
 3900              		.cfi_startproc
 3901              		@ args = 0, pretend = 0, frame = 0
 3902              		@ frame_needed = 0, uses_anonymous_args = 0
 3903              	.LVL405:
 3904 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3905              		.cfi_def_cfa_offset 24
 3906              		.cfi_offset 3, -24
 3907              		.cfi_offset 4, -20
 3908              		.cfi_offset 5, -16
 3909              		.cfi_offset 6, -12
 3910              		.cfi_offset 7, -8
 3911              		.cfi_offset 14, -4
1336:../drivers/fsl_dspi.c ****     assert(handle);
 3912              		.loc 1 1336 0
 3913 0002 0C46     		mov	r4, r1
 3914 0004 0746     		mov	r7, r0
 3915 0006 1646     		mov	r6, r2
1340:../drivers/fsl_dspi.c **** 
 3916              		.loc 1 1340 0
 3917 0008 0021     		movs	r1, #0
 3918              	.LVL406:
 3919 000a 2C22     		movs	r2, #44
 3920              	.LVL407:
 3921 000c 2046     		mov	r0, r4
 3922              	.LVL408:
1336:../drivers/fsl_dspi.c ****     assert(handle);
 3923              		.loc 1 1336 0
 3924 000e 1D46     		mov	r5, r3
1340:../drivers/fsl_dspi.c **** 
 3925              		.loc 1 1340 0
 3926 0010 FFF7FEFF 		bl	memset
 3927              	.LVL409:
1342:../drivers/fsl_dspi.c **** 
 3928              		.loc 1 1342 0
 3929 0014 3846     		mov	r0, r7
 3930 0016 FFF7FEFF 		bl	DSPI_GetInstance
 3931              	.LVL410:
 3932 001a 034B     		ldr	r3, .L348
1344:../drivers/fsl_dspi.c ****     handle->userData = userData;
 3933              		.loc 1 1344 0
 3934 001c 6662     		str	r6, [r4, #36]
1342:../drivers/fsl_dspi.c **** 
 3935              		.loc 1 1342 0
 3936 001e 43F82040 		str	r4, [r3, r0, lsl #2]
1345:../drivers/fsl_dspi.c **** }
 3937              		.loc 1 1345 0
 3938 0022 A562     		str	r5, [r4, #40]
 3939 0024 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3940              	.LVL411:
 3941              	.L349:
 3942 0026 00BF     		.align	2
 3943              	.L348:
 3944 0028 00000000 		.word	.LANCHOR8
 3945              		.cfi_endproc
 3946              	.LFE194:
 3948              		.section	.text.DSPI_SlaveTransferNonBlocking,"ax",%progbits
 3949              		.align	1
 3950              		.global	DSPI_SlaveTransferNonBlocking
 3951              		.syntax unified
 3952              		.thumb
 3953              		.thumb_func
 3954              		.fpu fpv4-sp-d16
 3956              	DSPI_SlaveTransferNonBlocking:
 3957              	.LFB195:
1349:../drivers/fsl_dspi.c ****     assert(handle);
 3958              		.loc 1 1349 0
 3959              		.cfi_startproc
 3960              		@ args = 0, pretend = 0, frame = 0
 3961              		@ frame_needed = 0, uses_anonymous_args = 0
 3962              	.LVL412:
 3963 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3964              		.cfi_def_cfa_offset 24
 3965              		.cfi_offset 3, -24
 3966              		.cfi_offset 4, -20
 3967              		.cfi_offset 5, -16
 3968              		.cfi_offset 6, -12
 3969              		.cfi_offset 7, -8
 3970              		.cfi_offset 14, -4
1354:../drivers/fsl_dspi.c ****     {
 3971              		.loc 1 1354 0
 3972 0002 9368     		ldr	r3, [r2, #8]
1349:../drivers/fsl_dspi.c ****     assert(handle);
 3973              		.loc 1 1349 0
 3974 0004 0546     		mov	r5, r0
 3975 0006 0C46     		mov	r4, r1
1354:../drivers/fsl_dspi.c ****     {
 3976              		.loc 1 1354 0
 3977 0008 002B     		cmp	r3, #0
 3978 000a 00F09880 		beq	.L366
1360:../drivers/fsl_dspi.c ****     {
 3979              		.loc 1 1360 0
 3980 000e 1768     		ldr	r7, [r2]
 3981 0010 1FB9     		cbnz	r7, .L352
1360:../drivers/fsl_dspi.c ****     {
 3982              		.loc 1 1360 0 is_stmt 0 discriminator 1
 3983 0012 5368     		ldr	r3, [r2, #4]
 3984 0014 002B     		cmp	r3, #0
 3985 0016 00F09280 		beq	.L366
 3986              	.L352:
1366:../drivers/fsl_dspi.c ****     {
 3987              		.loc 1 1366 0 is_stmt 1
 3988 001a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 3989 001c 012B     		cmp	r3, #1
 3990 001e 00F09080 		beq	.L367
1370:../drivers/fsl_dspi.c **** 
 3991              		.loc 1 1370 0
 3992 0022 0121     		movs	r1, #1
 3993              	.LVL413:
 3994 0024 2177     		strb	r1, [r4, #28]
1373:../drivers/fsl_dspi.c **** 
 3995              		.loc 1 1373 0
 3996 0026 2846     		mov	r0, r5
 3997              	.LVL414:
 3998 0028 FFF7FEFF 		bl	DSPI_GetInstance
 3999              	.LVL415:
 4000 002c 464B     		ldr	r3, .L378
 4001 002e 1B56     		ldrsb	r3, [r3, r0]
 4002              	.LVL416:
 4003              	.LBB575:
 4004              	.LBB576:
 4005              	.LBB577:
1674:../CMSIS/core_cm4.h ****   {
 4006              		.loc 5 1674 0
 4007 0030 002B     		cmp	r3, #0
 4008              	.LBE577:
 4009              	.LBE576:
 4010              	.LBE575:
1373:../drivers/fsl_dspi.c **** 
 4011              		.loc 1 1373 0
 4012 0032 0646     		mov	r6, r0
 4013              	.LBB580:
 4014              	.LBB579:
 4015              	.LBB578:
1674:../CMSIS/core_cm4.h ****   {
 4016              		.loc 5 1674 0
 4017 0034 07DB     		blt	.L353
1676:../CMSIS/core_cm4.h ****   }
 4018              		.loc 5 1676 0
 4019 0036 5809     		lsrs	r0, r3, #5
 4020 0038 03F01F03 		and	r3, r3, #31
 4021              	.LVL417:
 4022 003c 01FA03F3 		lsl	r3, r1, r3
 4023 0040 4249     		ldr	r1, .L378+4
 4024 0042 41F82030 		str	r3, [r1, r0, lsl #2]
 4025              	.L353:
 4026              	.LVL418:
 4027              	.LBE578:
 4028              	.LBE579:
 4029              	.LBE580:
1377:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = transfer->dataSize;
 4030              		.loc 1 1377 0
 4031 0046 5368     		ldr	r3, [r2, #4]
1376:../drivers/fsl_dspi.c ****     handle->rxData = transfer->rxData;
 4032              		.loc 1 1376 0
 4033 0048 A760     		str	r7, [r4, #8]
1377:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = transfer->dataSize;
 4034              		.loc 1 1377 0
 4035 004a E360     		str	r3, [r4, #12]
1378:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = transfer->dataSize;
 4036              		.loc 1 1378 0
 4037 004c 9368     		ldr	r3, [r2, #8]
 4038 004e 2361     		str	r3, [r4, #16]
1379:../drivers/fsl_dspi.c ****     handle->totalByteCount = transfer->dataSize;
 4039              		.loc 1 1379 0
 4040 0050 9368     		ldr	r3, [r2, #8]
 4041 0052 6361     		str	r3, [r4, #20]
1380:../drivers/fsl_dspi.c **** 
 4042              		.loc 1 1380 0
 4043 0054 9368     		ldr	r3, [r2, #8]
 4044 0056 A361     		str	r3, [r4, #24]
1382:../drivers/fsl_dspi.c **** 
 4045              		.loc 1 1382 0
 4046 0058 0023     		movs	r3, #0
 4047 005a 2362     		str	r3, [r4, #32]
 4048              	.LVL419:
1384:../drivers/fsl_dspi.c ****     handle->bitsPerFrame =
 4049              		.loc 1 1384 0
 4050 005c D368     		ldr	r3, [r2, #12]
1393:../drivers/fsl_dspi.c **** 
 4051              		.loc 1 1393 0
 4052 005e 3C4A     		ldr	r2, .L378+8
 4053              	.LVL420:
1386:../drivers/fsl_dspi.c **** 
 4054              		.loc 1 1386 0
 4055 0060 03F00703 		and	r3, r3, #7
 4056 0064 0233     		adds	r3, r3, #2
 4057 0066 05EB8303 		add	r3, r5, r3, lsl #2
1396:../drivers/fsl_dspi.c **** 
 4058              		.loc 1 1396 0
 4059 006a 4FF40031 		mov	r1, #131072
1386:../drivers/fsl_dspi.c **** 
 4060              		.loc 1 1386 0
 4061 006e 5B68     		ldr	r3, [r3, #4]
 4062 0070 DB0E     		lsrs	r3, r3, #27
 4063 0072 0133     		adds	r3, r3, #1
1385:../drivers/fsl_dspi.c ****         (((base->CTAR_SLAVE[whichCtar]) & SPI_CTAR_SLAVE_FMSZ_MASK) >> SPI_CTAR_SLAVE_FMSZ_SHIFT) +
 4064              		.loc 1 1385 0
 4065 0074 2360     		str	r3, [r4]
 4066              	.LVL421:
 4067              	.LBB581:
 4068              	.LBB582:
 753:../drivers/fsl_dspi.h **** }
 4069              		.loc 2 753 0
 4070 0076 2B68     		ldr	r3, [r5]
 4071 0078 43F00103 		orr	r3, r3, #1
 4072 007c 2B60     		str	r3, [r5]
 4073              	.LVL422:
 4074              	.LBE582:
 4075              	.LBE581:
 4076              	.LBB583:
 4077              	.LBB584:
 782:../drivers/fsl_dspi.h ****                 SPI_MCR_CLR_RXF(flushRxFifo);
 4078              		.loc 2 782 0
 4079 007e 2B68     		ldr	r3, [r5]
 4080 0080 43F44063 		orr	r3, r3, #3072
 4081 0084 2B60     		str	r3, [r5]
 4082              	.LVL423:
 4083              	.LBE584:
 4084              	.LBE583:
 4085              	.LBB585:
 4086              	.LBB586:
 580:../drivers/fsl_dspi.h **** }
 4087              		.loc 2 580 0
 4088 0086 334B     		ldr	r3, .L378+12
 4089 0088 EB62     		str	r3, [r5, #44]
 4090              	.LVL424:
 4091              	.LBE586:
 4092              	.LBE585:
1393:../drivers/fsl_dspi.c **** 
 4093              		.loc 1 1393 0
 4094 008a 334B     		ldr	r3, .L378+16
1396:../drivers/fsl_dspi.c **** 
 4095              		.loc 1 1396 0
 4096 008c 2846     		mov	r0, r5
1393:../drivers/fsl_dspi.c **** 
 4097              		.loc 1 1393 0
 4098 008e 1A60     		str	r2, [r3]
1396:../drivers/fsl_dspi.c **** 
 4099              		.loc 1 1396 0
 4100 0090 FFF7FEFF 		bl	DSPI_EnableInterrupts
 4101              	.LVL425:
1398:../drivers/fsl_dspi.c ****     {
 4102              		.loc 1 1398 0
 4103 0094 E368     		ldr	r3, [r4, #12]
 4104 0096 23B1     		cbz	r3, .L354
 4105              	.LVL426:
1401:../drivers/fsl_dspi.c ****     }
 4106              		.loc 1 1401 0
 4107 0098 4FF40021 		mov	r1, #524288
 4108 009c 2846     		mov	r0, r5
 4109              	.LVL427:
 4110 009e FFF7FEFF 		bl	DSPI_EnableInterrupts
 4111              	.LVL428:
 4112              	.L354:
1403:../drivers/fsl_dspi.c ****     {
 4113              		.loc 1 1403 0
 4114 00a2 A368     		ldr	r3, [r4, #8]
 4115 00a4 23B1     		cbz	r3, .L355
1406:../drivers/fsl_dspi.c ****     }
 4116              		.loc 1 1406 0
 4117 00a6 4FF00061 		mov	r1, #134217728
 4118 00aa 2846     		mov	r0, r5
 4119              	.LVL429:
 4120 00ac FFF7FEFF 		bl	DSPI_EnableInterrupts
 4121              	.LVL430:
 4122              	.L355:
 4123              	.LBB587:
 4124              	.LBB588:
 742:../drivers/fsl_dspi.h **** }
 4125              		.loc 2 742 0
 4126 00b0 2B68     		ldr	r3, [r5]
 4127 00b2 23F00103 		bic	r3, r3, #1
 4128 00b6 2B60     		str	r3, [r5]
 4129              	.LVL431:
 4130              	.LBE588:
 4131              	.LBE587:
 4132              	.LBB589:
 4133              	.LBB590:
1442:../drivers/fsl_dspi.c **** 
 4134              		.loc 1 1442 0
 4135 00b8 284B     		ldr	r3, .L378+20
 4136 00ba 9A5D     		ldrb	r2, [r3, r6]	@ zero_extendqisi2
 4137              	.LVL432:
1508:../drivers/fsl_dspi.c ****                 }
 4138              		.loc 1 1508 0
 4139 00bc 1102     		lsls	r1, r2, #8
 4140 00be 42EA0106 		orr	r6, r2, r1
 4141              	.LVL433:
 4142              	.LBB591:
 4143              	.LBB592:
 580:../drivers/fsl_dspi.h **** }
 4144              		.loc 2 580 0
 4145 00c2 4FF00077 		mov	r7, #33554432
 4146              	.LVL434:
 4147              	.L356:
 4148              	.LBE592:
 4149              	.LBE591:
 4150              	.LBB594:
 4151              	.LBB595:
 561:../drivers/fsl_dspi.h **** }
 4152              		.loc 2 561 0
 4153 00c6 E86A     		ldr	r0, [r5, #44]
 4154              	.LVL435:
 4155              	.LBE595:
 4156              	.LBE594:
1447:../drivers/fsl_dspi.c ****     {
 4157              		.loc 1 1447 0
 4158 00c8 10F00070 		ands	r0, r0, #33554432
 4159 00cc 00D1     		bne	.L364
 4160 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4161              	.LVL436:
 4162              	.L364:
1450:../drivers/fsl_dspi.c ****         {
 4163              		.loc 1 1450 0
 4164 00d0 2069     		ldr	r0, [r4, #16]
 4165 00d2 0028     		cmp	r0, #0
 4166 00d4 37D0     		beq	.L350
1453:../drivers/fsl_dspi.c ****             {
 4167              		.loc 1 1453 0
 4168 00d6 2368     		ldr	r3, [r4]
 4169 00d8 082B     		cmp	r3, #8
1456:../drivers/fsl_dspi.c ****                 {
 4170              		.loc 1 1456 0
 4171 00da A368     		ldr	r3, [r4, #8]
1453:../drivers/fsl_dspi.c ****             {
 4172              		.loc 1 1453 0
 4173 00dc 0BD8     		bhi	.L357
1456:../drivers/fsl_dspi.c ****                 {
 4174              		.loc 1 1456 0
 4175 00de 43B1     		cbz	r3, .L369
1459:../drivers/fsl_dspi.c ****                     handle->txData++;
 4176              		.loc 1 1459 0
 4177 00e0 A368     		ldr	r3, [r4, #8]
1460:../drivers/fsl_dspi.c ****                 }
 4178              		.loc 1 1460 0
 4179 00e2 A068     		ldr	r0, [r4, #8]
1459:../drivers/fsl_dspi.c ****                     handle->txData++;
 4180              		.loc 1 1459 0
 4181 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4182              	.LVL437:
1460:../drivers/fsl_dspi.c ****                 }
 4183              		.loc 1 1460 0
 4184 00e6 0130     		adds	r0, r0, #1
 4185 00e8 A060     		str	r0, [r4, #8]
 4186              	.LVL438:
 4187              	.L358:
1468:../drivers/fsl_dspi.c ****             }
 4188              		.loc 1 1468 0
 4189 00ea 2069     		ldr	r0, [r4, #16]
 4190 00ec 0138     		subs	r0, r0, #1
 4191              	.L377:
1495:../drivers/fsl_dspi.c ****                     }
 4192              		.loc 1 1495 0
 4193 00ee 2061     		str	r0, [r4, #16]
 4194 00f0 0EE0     		b	.L359
 4195              	.LVL439:
 4196              	.L369:
1464:../drivers/fsl_dspi.c ****                 }
 4197              		.loc 1 1464 0
 4198 00f2 1346     		mov	r3, r2
 4199 00f4 F9E7     		b	.L358
 4200              	.L357:
1477:../drivers/fsl_dspi.c ****                 {
 4201              		.loc 1 1477 0
 4202 00f6 C3B1     		cbz	r3, .L360
1480:../drivers/fsl_dspi.c ****                     handle->txData++;
 4203              		.loc 1 1480 0
 4204 00f8 A368     		ldr	r3, [r4, #8]
1481:../drivers/fsl_dspi.c **** 
 4205              		.loc 1 1481 0
 4206 00fa A068     		ldr	r0, [r4, #8]
1480:../drivers/fsl_dspi.c ****                     handle->txData++;
 4207              		.loc 1 1480 0
 4208 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4209              	.LVL440:
1481:../drivers/fsl_dspi.c **** 
 4210              		.loc 1 1481 0
 4211 00fe 0130     		adds	r0, r0, #1
 4212 0100 A060     		str	r0, [r4, #8]
1483:../drivers/fsl_dspi.c ****                     {
 4213              		.loc 1 1483 0
 4214 0102 2069     		ldr	r0, [r4, #16]
 4215 0104 0128     		cmp	r0, #1
 4216 0106 06D1     		bne	.L361
1486:../drivers/fsl_dspi.c ****                         /* Update second byte of transmit data to second byte of dummy pattern */
 4217              		.loc 1 1486 0
 4218 0108 2069     		ldr	r0, [r4, #16]
 4219 010a 0138     		subs	r0, r0, #1
 4220 010c 2061     		str	r0, [r4, #16]
1488:../drivers/fsl_dspi.c ****                     }
 4221              		.loc 1 1488 0
 4222 010e 0B43     		orrs	r3, r3, r1
 4223              	.LVL441:
 4224              	.L359:
1518:../drivers/fsl_dspi.c **** 
 4225              		.loc 1 1518 0
 4226 0110 6B63     		str	r3, [r5, #52]
 4227              	.LVL442:
 4228              	.LBB596:
 4229              	.LBB593:
 580:../drivers/fsl_dspi.h **** }
 4230              		.loc 2 580 0
 4231 0112 EF62     		str	r7, [r5, #44]
 4232 0114 D7E7     		b	.L356
 4233              	.LVL443:
 4234              	.L361:
 4235              	.LBE593:
 4236              	.LBE596:
1493:../drivers/fsl_dspi.c ****                         handle->txData++;
 4237              		.loc 1 1493 0
 4238 0116 A068     		ldr	r0, [r4, #8]
 4239 0118 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4240 011a 43EA0023 		orr	r3, r3, r0, lsl #8
 4241              	.LVL444:
1494:../drivers/fsl_dspi.c ****                         handle->remainingSendByteCount -= 2;
 4242              		.loc 1 1494 0
 4243 011e A068     		ldr	r0, [r4, #8]
 4244 0120 0130     		adds	r0, r0, #1
 4245 0122 A060     		str	r0, [r4, #8]
1495:../drivers/fsl_dspi.c ****                     }
 4246              		.loc 1 1495 0
 4247 0124 2069     		ldr	r0, [r4, #16]
 4248 0126 0238     		subs	r0, r0, #2
 4249 0128 E1E7     		b	.L377
 4250              	.LVL445:
 4251              	.L360:
1500:../drivers/fsl_dspi.c ****                     {
 4252              		.loc 1 1500 0
 4253 012a 2369     		ldr	r3, [r4, #16]
 4254 012c 012B     		cmp	r3, #1
1502:../drivers/fsl_dspi.c ****                     }
 4255              		.loc 1 1502 0
 4256 012e 2369     		ldr	r3, [r4, #16]
 4257 0130 0CBF     		ite	eq
 4258 0132 03F1FF33 		addeq	r3, r3, #-1
1506:../drivers/fsl_dspi.c ****                     }
 4259              		.loc 1 1506 0
 4260 0136 023B     		subne	r3, r3, #2
 4261 0138 2361     		str	r3, [r4, #16]
1508:../drivers/fsl_dspi.c ****                 }
 4262              		.loc 1 1508 0
 4263 013a 3346     		mov	r3, r6
 4264 013c E8E7     		b	.L359
 4265              	.LVL446:
 4266              	.L366:
 4267              	.LBE590:
 4268              	.LBE589:
1356:../drivers/fsl_dspi.c ****     }
 4269              		.loc 1 1356 0
 4270 013e 0420     		movs	r0, #4
 4271              	.LVL447:
 4272 0140 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4273              	.LVL448:
 4274              	.L367:
1368:../drivers/fsl_dspi.c ****     }
 4275              		.loc 1 1368 0
 4276 0142 4FF41670 		mov	r0, #600
 4277              	.LVL449:
 4278              	.L350:
1415:../drivers/fsl_dspi.c **** 
 4279              		.loc 1 1415 0
 4280 0146 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4281              	.LVL450:
 4282              	.L379:
 4283              		.align	2
 4284              	.L378:
 4285 0148 00000000 		.word	.LANCHOR9
 4286 014c 00E100E0 		.word	-536813312
 4287 0150 00000000 		.word	DSPI_SlaveTransferHandleIRQ
 4288 0154 00000ADA 		.word	-636878848
 4289 0158 00000000 		.word	.LANCHOR1
 4290 015c 00000000 		.word	.LANCHOR2
 4291              		.cfi_endproc
 4292              	.LFE195:
 4294              		.section	.text.DSPI_SlaveTransferGetCount,"ax",%progbits
 4295              		.align	1
 4296              		.global	DSPI_SlaveTransferGetCount
 4297              		.syntax unified
 4298              		.thumb
 4299              		.thumb_func
 4300              		.fpu fpv4-sp-d16
 4302              	DSPI_SlaveTransferGetCount:
 4303              	.LFB196:
1418:../drivers/fsl_dspi.c ****     assert(handle);
 4304              		.loc 1 1418 0
 4305              		.cfi_startproc
 4306              		@ args = 0, pretend = 0, frame = 0
 4307              		@ frame_needed = 0, uses_anonymous_args = 0
 4308              		@ link register save eliminated.
 4309              	.LVL451:
1421:../drivers/fsl_dspi.c ****     {
 4310              		.loc 1 1421 0
 4311 0000 62B1     		cbz	r2, .L383
1427:../drivers/fsl_dspi.c ****     {
 4312              		.loc 1 1427 0
 4313 0002 0B7F     		ldrb	r3, [r1, #28]	@ zero_extendqisi2
 4314 0004 012B     		cmp	r3, #1
1433:../drivers/fsl_dspi.c ****     return kStatus_Success;
 4315              		.loc 1 1433 0
 4316 0006 0BBF     		itete	eq
 4317 0008 8B69     		ldreq	r3, [r1, #24]
1430:../drivers/fsl_dspi.c ****     }
 4318              		.loc 1 1430 0
 4319 000a 0620     		movne	r0, #6
 4320              	.LVL452:
1433:../drivers/fsl_dspi.c ****     return kStatus_Success;
 4321              		.loc 1 1433 0
 4322 000c 4869     		ldreq	r0, [r1, #20]
1429:../drivers/fsl_dspi.c ****         return kStatus_NoTransferInProgress;
 4323              		.loc 1 1429 0
 4324 000e 0023     		movne	r3, #0
1433:../drivers/fsl_dspi.c ****     return kStatus_Success;
 4325              		.loc 1 1433 0
 4326 0010 09BF     		itett	eq
 4327 0012 1B1A     		subeq	r3, r3, r0
1429:../drivers/fsl_dspi.c ****         return kStatus_NoTransferInProgress;
 4328              		.loc 1 1429 0
 4329 0014 1360     		strne	r3, [r2]
1433:../drivers/fsl_dspi.c ****     return kStatus_Success;
 4330              		.loc 1 1433 0
 4331 0016 1360     		streq	r3, [r2]
1434:../drivers/fsl_dspi.c **** }
 4332              		.loc 1 1434 0
 4333 0018 0020     		moveq	r0, #0
 4334 001a 7047     		bx	lr
 4335              	.LVL453:
 4336              	.L383:
1423:../drivers/fsl_dspi.c ****     }
 4337              		.loc 1 1423 0
 4338 001c 0420     		movs	r0, #4
 4339              	.LVL454:
1435:../drivers/fsl_dspi.c **** 
 4340              		.loc 1 1435 0
 4341 001e 7047     		bx	lr
 4342              		.cfi_endproc
 4343              	.LFE196:
 4345              		.section	.text.DSPI_SlaveTransferAbort,"ax",%progbits
 4346              		.align	1
 4347              		.global	DSPI_SlaveTransferAbort
 4348              		.syntax unified
 4349              		.thumb
 4350              		.thumb_func
 4351              		.fpu fpv4-sp-d16
 4353              	DSPI_SlaveTransferAbort:
 4354              	.LFB199:
1558:../drivers/fsl_dspi.c ****     assert(handle);
 4355              		.loc 1 1558 0
 4356              		.cfi_startproc
 4357              		@ args = 0, pretend = 0, frame = 0
 4358              		@ frame_needed = 0, uses_anonymous_args = 0
 4359              		@ link register save eliminated.
 4360              	.LVL455:
 4361              	.LBB597:
 4362              	.LBB598:
 753:../drivers/fsl_dspi.h **** }
 4363              		.loc 2 753 0
 4364 0000 0368     		ldr	r3, [r0]
 4365 0002 43F00103 		orr	r3, r3, #1
 4366 0006 0360     		str	r3, [r0]
 4367              	.LVL456:
 4368              	.LBE598:
 4369              	.LBE597:
 4370              	.LBB599:
 4371              	.LBB600:
 620:../drivers/fsl_dspi.h **** }
 4372              		.loc 2 620 0
 4373 0008 036B     		ldr	r3, [r0, #48]
 4374 000a 23F02063 		bic	r3, r3, #167772160
 4375 000e 23F42023 		bic	r3, r3, #655360
 4376 0012 0363     		str	r3, [r0, #48]
 4377              	.LVL457:
 4378              	.LBE600:
 4379              	.LBE599:
1567:../drivers/fsl_dspi.c ****     handle->remainingSendByteCount = 0;
 4380              		.loc 1 1567 0
 4381 0014 0023     		movs	r3, #0
 4382 0016 0B77     		strb	r3, [r1, #28]
1568:../drivers/fsl_dspi.c ****     handle->remainingReceiveByteCount = 0;
 4383              		.loc 1 1568 0
 4384 0018 0B61     		str	r3, [r1, #16]
1569:../drivers/fsl_dspi.c **** }
 4385              		.loc 1 1569 0
 4386 001a 4B61     		str	r3, [r1, #20]
 4387 001c 7047     		bx	lr
 4388              		.cfi_endproc
 4389              	.LFE199:
 4391              		.section	.text.SPI0_DriverIRQHandler,"ax",%progbits
 4392              		.align	1
 4393              		.global	SPI0_DriverIRQHandler
 4394              		.syntax unified
 4395              		.thumb
 4396              		.thumb_func
 4397              		.fpu fpv4-sp-d16
 4399              	SPI0_DriverIRQHandler:
 4400              	.LFB202:
1750:../drivers/fsl_dspi.c ****     }
1751:../drivers/fsl_dspi.c **** /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1752:../drivers/fsl_dspi.c ****   exception return operation might vector to incorrect interrupt */
1753:../drivers/fsl_dspi.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1754:../drivers/fsl_dspi.c ****     __DSB();
1755:../drivers/fsl_dspi.c **** #endif
1756:../drivers/fsl_dspi.c **** }
1757:../drivers/fsl_dspi.c **** 
1758:../drivers/fsl_dspi.c **** #if defined(SPI0)
1759:../drivers/fsl_dspi.c **** void SPI0_DriverIRQHandler(void)
1760:../drivers/fsl_dspi.c **** {
 4401              		.loc 1 1760 0
 4402              		.cfi_startproc
 4403              		@ args = 0, pretend = 0, frame = 0
 4404              		@ frame_needed = 0, uses_anonymous_args = 0
 4405              		@ link register save eliminated.
1761:../drivers/fsl_dspi.c ****     assert(g_dspiHandle[0]);
1762:../drivers/fsl_dspi.c ****     DSPI_CommonIRQHandler(SPI0, g_dspiHandle[0]);
 4406              		.loc 1 1762 0
 4407 0000 024B     		ldr	r3, .L386
 4408 0002 0348     		ldr	r0, .L386+4
 4409 0004 1968     		ldr	r1, [r3]
 4410 0006 FFF7FEBF 		b	DSPI_CommonIRQHandler
 4411              	.LVL458:
 4412              	.L387:
 4413 000a 00BF     		.align	2
 4414              	.L386:
 4415 000c 00000000 		.word	.LANCHOR8
 4416 0010 00C00240 		.word	1073922048
 4417              		.cfi_endproc
 4418              	.LFE202:
 4420              		.section	.text.SPI1_DriverIRQHandler,"ax",%progbits
 4421              		.align	1
 4422              		.global	SPI1_DriverIRQHandler
 4423              		.syntax unified
 4424              		.thumb
 4425              		.thumb_func
 4426              		.fpu fpv4-sp-d16
 4428              	SPI1_DriverIRQHandler:
 4429              	.LFB203:
1763:../drivers/fsl_dspi.c **** }
1764:../drivers/fsl_dspi.c **** #endif
1765:../drivers/fsl_dspi.c **** 
1766:../drivers/fsl_dspi.c **** #if defined(SPI1)
1767:../drivers/fsl_dspi.c **** void SPI1_DriverIRQHandler(void)
1768:../drivers/fsl_dspi.c **** {
 4430              		.loc 1 1768 0
 4431              		.cfi_startproc
 4432              		@ args = 0, pretend = 0, frame = 0
 4433              		@ frame_needed = 0, uses_anonymous_args = 0
 4434              		@ link register save eliminated.
1769:../drivers/fsl_dspi.c ****     assert(g_dspiHandle[1]);
1770:../drivers/fsl_dspi.c ****     DSPI_CommonIRQHandler(SPI1, g_dspiHandle[1]);
 4435              		.loc 1 1770 0
 4436 0000 024B     		ldr	r3, .L389
 4437 0002 0348     		ldr	r0, .L389+4
 4438 0004 5968     		ldr	r1, [r3, #4]
 4439 0006 FFF7FEBF 		b	DSPI_CommonIRQHandler
 4440              	.LVL459:
 4441              	.L390:
 4442 000a 00BF     		.align	2
 4443              	.L389:
 4444 000c 00000000 		.word	.LANCHOR8
 4445 0010 00D00240 		.word	1073926144
 4446              		.cfi_endproc
 4447              	.LFE203:
 4449              		.section	.text.SPI2_DriverIRQHandler,"ax",%progbits
 4450              		.align	1
 4451              		.global	SPI2_DriverIRQHandler
 4452              		.syntax unified
 4453              		.thumb
 4454              		.thumb_func
 4455              		.fpu fpv4-sp-d16
 4457              	SPI2_DriverIRQHandler:
 4458              	.LFB204:
1771:../drivers/fsl_dspi.c **** }
1772:../drivers/fsl_dspi.c **** #endif
1773:../drivers/fsl_dspi.c **** 
1774:../drivers/fsl_dspi.c **** #if defined(SPI2)
1775:../drivers/fsl_dspi.c **** void SPI2_DriverIRQHandler(void)
1776:../drivers/fsl_dspi.c **** {
 4459              		.loc 1 1776 0
 4460              		.cfi_startproc
 4461              		@ args = 0, pretend = 0, frame = 0
 4462              		@ frame_needed = 0, uses_anonymous_args = 0
 4463              		@ link register save eliminated.
1777:../drivers/fsl_dspi.c ****     assert(g_dspiHandle[2]);
1778:../drivers/fsl_dspi.c ****     DSPI_CommonIRQHandler(SPI2, g_dspiHandle[2]);
 4464              		.loc 1 1778 0
 4465 0000 024B     		ldr	r3, .L392
 4466 0002 0348     		ldr	r0, .L392+4
 4467 0004 9968     		ldr	r1, [r3, #8]
 4468 0006 FFF7FEBF 		b	DSPI_CommonIRQHandler
 4469              	.LVL460:
 4470              	.L393:
 4471 000a 00BF     		.align	2
 4472              	.L392:
 4473 000c 00000000 		.word	.LANCHOR8
 4474 0010 00C00A40 		.word	1074446336
 4475              		.cfi_endproc
 4476              	.LFE204:
 4478              		.global	s_dummyData
 4479              		.section	.bss.g_dspiHandle,"aw",%nobits
 4480              		.align	2
 4481              		.set	.LANCHOR8,. + 0
 4484              	g_dspiHandle:
 4485 0000 00000000 		.space	12
 4485      00000000 
 4485      00000000 
 4486              		.section	.bss.s_dspiMasterIsr,"aw",%nobits
 4487              		.align	2
 4488              		.set	.LANCHOR0,. + 0
 4491              	s_dspiMasterIsr:
 4492 0000 00000000 		.space	4
 4493              		.section	.bss.s_dspiSlaveIsr,"aw",%nobits
 4494              		.align	2
 4495              		.set	.LANCHOR1,. + 0
 4498              	s_dspiSlaveIsr:
 4499 0000 00000000 		.space	4
 4500              		.section	.bss.s_dummyData,"aw",%nobits
 4501              		.set	.LANCHOR2,. + 0
 4504              	s_dummyData:
 4505 0000 000000   		.space	3
 4506              		.section	.rodata.s_baudratePrescaler,"a",%progbits
 4507              		.align	2
 4508              		.set	.LANCHOR5,. + 0
 4511              	s_baudratePrescaler:
 4512 0000 02000000 		.word	2
 4513 0004 03000000 		.word	3
 4514 0008 05000000 		.word	5
 4515 000c 07000000 		.word	7
 4516              		.section	.rodata.s_baudrateScaler,"a",%progbits
 4517              		.align	2
 4518              		.set	.LANCHOR4,. + 0
 4521              	s_baudrateScaler:
 4522 0000 02000000 		.word	2
 4523 0004 04000000 		.word	4
 4524 0008 06000000 		.word	6
 4525 000c 08000000 		.word	8
 4526 0010 10000000 		.word	16
 4527 0014 20000000 		.word	32
 4528 0018 40000000 		.word	64
 4529 001c 80000000 		.word	128
 4530 0020 00010000 		.word	256
 4531 0024 00020000 		.word	512
 4532 0028 00040000 		.word	1024
 4533 002c 00080000 		.word	2048
 4534 0030 00100000 		.word	4096
 4535 0034 00200000 		.word	8192
 4536 0038 00400000 		.word	16384
 4537 003c 00800000 		.word	32768
 4538              		.section	.rodata.s_delayPrescaler,"a",%progbits
 4539              		.align	2
 4540              		.set	.LANCHOR7,. + 0
 4543              	s_delayPrescaler:
 4544 0000 01000000 		.word	1
 4545 0004 03000000 		.word	3
 4546 0008 05000000 		.word	5
 4547 000c 07000000 		.word	7
 4548              		.section	.rodata.s_delayScaler,"a",%progbits
 4549              		.align	2
 4550              		.set	.LANCHOR6,. + 0
 4553              	s_delayScaler:
 4554 0000 02000000 		.word	2
 4555 0004 04000000 		.word	4
 4556 0008 08000000 		.word	8
 4557 000c 10000000 		.word	16
 4558 0010 20000000 		.word	32
 4559 0014 40000000 		.word	64
 4560 0018 80000000 		.word	128
 4561 001c 00010000 		.word	256
 4562 0020 00020000 		.word	512
 4563 0024 00040000 		.word	1024
 4564 0028 00080000 		.word	2048
 4565 002c 00100000 		.word	4096
 4566 0030 00200000 		.word	8192
 4567 0034 00400000 		.word	16384
 4568 0038 00800000 		.word	32768
 4569 003c 00000100 		.word	65536
 4570              		.section	.rodata.s_dspiClock,"a",%progbits
 4571              		.align	2
 4572              		.set	.LANCHOR3,. + 0
 4575              	s_dspiClock:
 4576 0000 0C003C10 		.word	272367628
 4577 0004 0D003C10 		.word	272367629
 4578 0008 0C003010 		.word	271581196
 4579              		.section	.rodata.s_dspiIRQ,"a",%progbits
 4580              		.set	.LANCHOR9,. + 0
 4583              	s_dspiIRQ:
 4584 0000 1A       		.byte	26
 4585 0001 1B       		.byte	27
 4586 0002 41       		.byte	65
 4587              		.text
 4588              	.Letext0:
 4589              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 4590              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 4591              		.file 8 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 4592              		.file 9 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 4593              		.file 10 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 4594              		.file 11 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 4595              		.file 12 "../CMSIS/MK64F12.h"
 4596              		.file 13 "../CMSIS/system_MK64F12.h"
 4597              		.file 14 "../drivers/fsl_common.h"
