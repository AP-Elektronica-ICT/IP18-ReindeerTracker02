   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.UART_GetInstance,"ax",%progbits
  18              		.align	1
  19              		.global	UART_GetInstance
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	UART_GetInstance:
  26              	.LFB154:
  27              		.file 1 "../drivers/fsl_uart.c"
   1:../drivers/fsl_uart.c **** /*
   2:../drivers/fsl_uart.c ****  * The Clear BSD License
   3:../drivers/fsl_uart.c ****  * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_uart.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_uart.c ****  * All rights reserved.
   6:../drivers/fsl_uart.c ****  *
   7:../drivers/fsl_uart.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_uart.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_uart.c ****  * that the following conditions are met:
  10:../drivers/fsl_uart.c ****  *
  11:../drivers/fsl_uart.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_uart.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_uart.c ****  *
  14:../drivers/fsl_uart.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_uart.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_uart.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_uart.c ****  *
  18:../drivers/fsl_uart.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_uart.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_uart.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_uart.c ****  *
  22:../drivers/fsl_uart.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_uart.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_uart.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_uart.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_uart.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_uart.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_uart.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_uart.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_uart.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_uart.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_uart.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_uart.c ****  */
  34:../drivers/fsl_uart.c **** 
  35:../drivers/fsl_uart.c **** #include "fsl_uart.h"
  36:../drivers/fsl_uart.c **** 
  37:../drivers/fsl_uart.c **** /*******************************************************************************
  38:../drivers/fsl_uart.c ****  * Definitions
  39:../drivers/fsl_uart.c ****  ******************************************************************************/
  40:../drivers/fsl_uart.c **** 
  41:../drivers/fsl_uart.c **** /* UART transfer state. */
  42:../drivers/fsl_uart.c **** enum _uart_tansfer_states
  43:../drivers/fsl_uart.c **** {
  44:../drivers/fsl_uart.c ****     kUART_TxIdle,         /* TX idle. */
  45:../drivers/fsl_uart.c ****     kUART_TxBusy,         /* TX busy. */
  46:../drivers/fsl_uart.c ****     kUART_RxIdle,         /* RX idle. */
  47:../drivers/fsl_uart.c ****     kUART_RxBusy,         /* RX busy. */
  48:../drivers/fsl_uart.c ****     kUART_RxFramingError, /* Rx framing error */
  49:../drivers/fsl_uart.c ****     kUART_RxParityError   /* Rx parity error */
  50:../drivers/fsl_uart.c **** };
  51:../drivers/fsl_uart.c **** 
  52:../drivers/fsl_uart.c **** /* Typedef for interrupt handler. */
  53:../drivers/fsl_uart.c **** typedef void (*uart_isr_t)(UART_Type *base, uart_handle_t *handle);
  54:../drivers/fsl_uart.c **** 
  55:../drivers/fsl_uart.c **** /*******************************************************************************
  56:../drivers/fsl_uart.c ****  * Prototypes
  57:../drivers/fsl_uart.c ****  ******************************************************************************/
  58:../drivers/fsl_uart.c **** 
  59:../drivers/fsl_uart.c **** /*!
  60:../drivers/fsl_uart.c ****  * @brief Get the UART instance from peripheral base address.
  61:../drivers/fsl_uart.c ****  *
  62:../drivers/fsl_uart.c ****  * @param base UART peripheral base address.
  63:../drivers/fsl_uart.c ****  * @return UART instance.
  64:../drivers/fsl_uart.c ****  */
  65:../drivers/fsl_uart.c **** uint32_t UART_GetInstance(UART_Type *base);
  66:../drivers/fsl_uart.c **** 
  67:../drivers/fsl_uart.c **** /*!
  68:../drivers/fsl_uart.c ****  * @brief Check whether the RX ring buffer is full.
  69:../drivers/fsl_uart.c ****  *
  70:../drivers/fsl_uart.c ****  * @param handle UART handle pointer.
  71:../drivers/fsl_uart.c ****  * @retval true  RX ring buffer is full.
  72:../drivers/fsl_uart.c ****  * @retval false RX ring buffer is not full.
  73:../drivers/fsl_uart.c ****  */
  74:../drivers/fsl_uart.c **** static bool UART_TransferIsRxRingBufferFull(uart_handle_t *handle);
  75:../drivers/fsl_uart.c **** 
  76:../drivers/fsl_uart.c **** /*!
  77:../drivers/fsl_uart.c ****  * @brief Read RX register using non-blocking method.
  78:../drivers/fsl_uart.c ****  *
  79:../drivers/fsl_uart.c ****  * This function reads data from the TX register directly, upper layer must make
  80:../drivers/fsl_uart.c ****  * sure the RX register is full or TX FIFO has data before calling this function.
  81:../drivers/fsl_uart.c ****  *
  82:../drivers/fsl_uart.c ****  * @param base UART peripheral base address.
  83:../drivers/fsl_uart.c ****  * @param data Start addresss of the buffer to store the received data.
  84:../drivers/fsl_uart.c ****  * @param length Size of the buffer.
  85:../drivers/fsl_uart.c ****  */
  86:../drivers/fsl_uart.c **** static void UART_ReadNonBlocking(UART_Type *base, uint8_t *data, size_t length);
  87:../drivers/fsl_uart.c **** 
  88:../drivers/fsl_uart.c **** /*!
  89:../drivers/fsl_uart.c ****  * @brief Write to TX register using non-blocking method.
  90:../drivers/fsl_uart.c ****  *
  91:../drivers/fsl_uart.c ****  * This function writes data to the TX register directly, upper layer must make
  92:../drivers/fsl_uart.c ****  * sure the TX register is empty or TX FIFO has empty room before calling this function.
  93:../drivers/fsl_uart.c ****  *
  94:../drivers/fsl_uart.c ****  * @note This function does not check whether all the data has been sent out to bus,
  95:../drivers/fsl_uart.c ****  * so before disable TX, check kUART_TransmissionCompleteFlag to ensure the TX is
  96:../drivers/fsl_uart.c ****  * finished.
  97:../drivers/fsl_uart.c ****  *
  98:../drivers/fsl_uart.c ****  * @param base UART peripheral base address.
  99:../drivers/fsl_uart.c ****  * @param data Start addresss of the data to write.
 100:../drivers/fsl_uart.c ****  * @param length Size of the buffer to be sent.
 101:../drivers/fsl_uart.c ****  */
 102:../drivers/fsl_uart.c **** static void UART_WriteNonBlocking(UART_Type *base, const uint8_t *data, size_t length);
 103:../drivers/fsl_uart.c **** 
 104:../drivers/fsl_uart.c **** /*******************************************************************************
 105:../drivers/fsl_uart.c ****  * Variables
 106:../drivers/fsl_uart.c ****  ******************************************************************************/
 107:../drivers/fsl_uart.c **** /* Array of UART handle. */
 108:../drivers/fsl_uart.c **** #if (defined(UART5))
 109:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 6
 110:../drivers/fsl_uart.c **** #else /* UART5 */
 111:../drivers/fsl_uart.c **** #if (defined(UART4))
 112:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 5
 113:../drivers/fsl_uart.c **** #else /* UART4 */
 114:../drivers/fsl_uart.c **** #if (defined(UART3))
 115:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 4
 116:../drivers/fsl_uart.c **** #else /* UART3 */
 117:../drivers/fsl_uart.c **** #if (defined(UART2))
 118:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 3
 119:../drivers/fsl_uart.c **** #else /* UART2 */
 120:../drivers/fsl_uart.c **** #if (defined(UART1))
 121:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 2
 122:../drivers/fsl_uart.c **** #else /* UART1 */
 123:../drivers/fsl_uart.c **** #if (defined(UART0))
 124:../drivers/fsl_uart.c **** #define UART_HANDLE_ARRAY_SIZE 1
 125:../drivers/fsl_uart.c **** #else /* UART0 */
 126:../drivers/fsl_uart.c **** #error No UART instance.
 127:../drivers/fsl_uart.c **** #endif /* UART 0 */
 128:../drivers/fsl_uart.c **** #endif /* UART 1 */
 129:../drivers/fsl_uart.c **** #endif /* UART 2 */
 130:../drivers/fsl_uart.c **** #endif /* UART 3 */
 131:../drivers/fsl_uart.c **** #endif /* UART 4 */
 132:../drivers/fsl_uart.c **** #endif /* UART 5 */
 133:../drivers/fsl_uart.c **** static uart_handle_t *s_uartHandle[UART_HANDLE_ARRAY_SIZE];
 134:../drivers/fsl_uart.c **** /* Array of UART peripheral base address. */
 135:../drivers/fsl_uart.c **** static UART_Type *const s_uartBases[] = UART_BASE_PTRS;
 136:../drivers/fsl_uart.c **** 
 137:../drivers/fsl_uart.c **** /* Array of UART IRQ number. */
 138:../drivers/fsl_uart.c **** static const IRQn_Type s_uartIRQ[] = UART_RX_TX_IRQS;
 139:../drivers/fsl_uart.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 140:../drivers/fsl_uart.c **** /* Array of UART clock name. */
 141:../drivers/fsl_uart.c **** static const clock_ip_name_t s_uartClock[] = UART_CLOCKS;
 142:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 143:../drivers/fsl_uart.c **** 
 144:../drivers/fsl_uart.c **** /* UART ISR for transactional APIs. */
 145:../drivers/fsl_uart.c **** static uart_isr_t s_uartIsr;
 146:../drivers/fsl_uart.c **** 
 147:../drivers/fsl_uart.c **** /*******************************************************************************
 148:../drivers/fsl_uart.c ****  * Code
 149:../drivers/fsl_uart.c ****  ******************************************************************************/
 150:../drivers/fsl_uart.c **** 
 151:../drivers/fsl_uart.c **** uint32_t UART_GetInstance(UART_Type *base)
 152:../drivers/fsl_uart.c **** {
  28              		.loc 1 152 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 153:../drivers/fsl_uart.c ****     uint32_t instance;
 154:../drivers/fsl_uart.c ****     uint32_t uartArrayCount = (sizeof(s_uartBases) / sizeof(s_uartBases[0]));
 155:../drivers/fsl_uart.c **** 
 156:../drivers/fsl_uart.c ****     /* Find the instance index from base address mappings. */
 157:../drivers/fsl_uart.c ****     for (instance = 0; instance < uartArrayCount; instance++)
 158:../drivers/fsl_uart.c ****     {
 159:../drivers/fsl_uart.c ****         if (s_uartBases[instance] == base)
  34              		.loc 1 159 0
  35 0000 114B     		ldr	r3, .L10
  36 0002 9842     		cmp	r0, r3
  37 0004 16D0     		beq	.L4
  38              	.LVL1:
  39 0006 03F58053 		add	r3, r3, #4096
  40 000a 9842     		cmp	r0, r3
  41 000c 14D0     		beq	.L5
  42              	.LVL2:
  43 000e 03F58053 		add	r3, r3, #4096
  44 0012 9842     		cmp	r0, r3
  45 0014 12D0     		beq	.L6
  46              	.LVL3:
  47 0016 03F58053 		add	r3, r3, #4096
  48 001a 9842     		cmp	r0, r3
  49 001c 10D0     		beq	.L7
  50              	.LVL4:
  51 001e 03F5FA23 		add	r3, r3, #512000
  52 0022 9842     		cmp	r0, r3
  53 0024 0ED0     		beq	.L8
  54              	.LVL5:
 157:../drivers/fsl_uart.c ****     {
  55              		.loc 1 157 0
  56 0026 03F58053 		add	r3, r3, #4096
  57 002a 9842     		cmp	r0, r3
  58 002c 14BF     		ite	ne
  59 002e 0620     		movne	r0, #6
  60 0030 0520     		moveq	r0, #5
  61              	.LVL6:
  62 0032 7047     		bx	lr
  63              	.LVL7:
  64              	.L4:
  65 0034 0020     		movs	r0, #0
  66              	.LVL8:
  67 0036 7047     		bx	lr
  68              	.LVL9:
  69              	.L5:
  70 0038 0120     		movs	r0, #1
  71              	.LVL10:
  72 003a 7047     		bx	lr
  73              	.LVL11:
  74              	.L6:
  75 003c 0220     		movs	r0, #2
  76              	.LVL12:
  77 003e 7047     		bx	lr
  78              	.LVL13:
  79              	.L7:
  80 0040 0320     		movs	r0, #3
  81              	.LVL14:
  82 0042 7047     		bx	lr
  83              	.LVL15:
  84              	.L8:
  85 0044 0420     		movs	r0, #4
  86              	.LVL16:
 160:../drivers/fsl_uart.c ****         {
 161:../drivers/fsl_uart.c ****             break;
 162:../drivers/fsl_uart.c ****         }
 163:../drivers/fsl_uart.c ****     }
 164:../drivers/fsl_uart.c **** 
 165:../drivers/fsl_uart.c ****     assert(instance < uartArrayCount);
 166:../drivers/fsl_uart.c **** 
 167:../drivers/fsl_uart.c ****     return instance;
 168:../drivers/fsl_uart.c **** }
  87              		.loc 1 168 0
  88 0046 7047     		bx	lr
  89              	.L11:
  90              		.align	2
  91              	.L10:
  92 0048 00A00640 		.word	1074176000
  93              		.cfi_endproc
  94              	.LFE154:
  96              		.section	.text.UART_TransferGetRxRingBufferLength,"ax",%progbits
  97              		.align	1
  98              		.global	UART_TransferGetRxRingBufferLength
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	UART_TransferGetRxRingBufferLength:
 105              	.LFB155:
 169:../drivers/fsl_uart.c **** 
 170:../drivers/fsl_uart.c **** size_t UART_TransferGetRxRingBufferLength(uart_handle_t *handle)
 171:../drivers/fsl_uart.c **** {
 106              		.loc 1 171 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111              	.LVL17:
 172:../drivers/fsl_uart.c ****     assert(handle);
 173:../drivers/fsl_uart.c **** 
 174:../drivers/fsl_uart.c ****     size_t size;
 175:../drivers/fsl_uart.c **** 
 176:../drivers/fsl_uart.c ****     if (handle->rxRingBufferTail > handle->rxRingBufferHead)
 112              		.loc 1 176 0
 113 0000 438C     		ldrh	r3, [r0, #34]
 114 0002 028C     		ldrh	r2, [r0, #32]
 115 0004 9A42     		cmp	r2, r3
 116              	.LVL18:
 117              	.LBB28:
 118              	.LBB29:
 177:../drivers/fsl_uart.c ****     {
 178:../drivers/fsl_uart.c ****         size = (size_t)(handle->rxRingBufferHead + handle->rxRingBufferSize - handle->rxRingBufferT
 119              		.loc 1 178 0
 120 0006 3DBF     		ittte	cc
 121 0008 028C     		ldrhcc	r2, [r0, #32]
 122 000a 438C     		ldrhcc	r3, [r0, #34]
 123 000c C069     		ldrcc	r0, [r0, #28]
 124              	.LVL19:
 125              	.LBE29:
 126              	.LBE28:
 179:../drivers/fsl_uart.c ****     }
 180:../drivers/fsl_uart.c ****     else
 181:../drivers/fsl_uart.c ****     {
 182:../drivers/fsl_uart.c ****         size = (size_t)(handle->rxRingBufferHead - handle->rxRingBufferTail);
 127              		.loc 1 182 0
 128 000e 038C     		ldrhcs	r3, [r0, #32]
 129              	.LBB31:
 130              	.LBB30:
 178:../drivers/fsl_uart.c ****     }
 131              		.loc 1 178 0
 132 0010 39BF     		ittee	cc
 133 0012 8018     		addcc	r0, r0, r2
 134 0014 C01A     		subcc	r0, r0, r3
 135              	.LVL20:
 136              	.LBE30:
 137              	.LBE31:
 138              		.loc 1 182 0
 139 0016 408C     		ldrhcs	r0, [r0, #34]
 140 0018 181A     		subcs	r0, r3, r0
 141              	.LVL21:
 183:../drivers/fsl_uart.c ****     }
 184:../drivers/fsl_uart.c **** 
 185:../drivers/fsl_uart.c ****     return size;
 186:../drivers/fsl_uart.c **** }
 142              		.loc 1 186 0
 143 001a 7047     		bx	lr
 144              		.cfi_endproc
 145              	.LFE155:
 147              		.section	.text.UART_Init,"ax",%progbits
 148              		.align	1
 149              		.global	UART_Init
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu fpv4-sp-d16
 155              	UART_Init:
 156              	.LFB157:
 187:../drivers/fsl_uart.c **** 
 188:../drivers/fsl_uart.c **** static bool UART_TransferIsRxRingBufferFull(uart_handle_t *handle)
 189:../drivers/fsl_uart.c **** {
 190:../drivers/fsl_uart.c ****     assert(handle);
 191:../drivers/fsl_uart.c **** 
 192:../drivers/fsl_uart.c ****     bool full;
 193:../drivers/fsl_uart.c **** 
 194:../drivers/fsl_uart.c ****     if (UART_TransferGetRxRingBufferLength(handle) == (handle->rxRingBufferSize - 1U))
 195:../drivers/fsl_uart.c ****     {
 196:../drivers/fsl_uart.c ****         full = true;
 197:../drivers/fsl_uart.c ****     }
 198:../drivers/fsl_uart.c ****     else
 199:../drivers/fsl_uart.c ****     {
 200:../drivers/fsl_uart.c ****         full = false;
 201:../drivers/fsl_uart.c ****     }
 202:../drivers/fsl_uart.c **** 
 203:../drivers/fsl_uart.c ****     return full;
 204:../drivers/fsl_uart.c **** }
 205:../drivers/fsl_uart.c **** 
 206:../drivers/fsl_uart.c **** status_t UART_Init(UART_Type *base, const uart_config_t *config, uint32_t srcClock_Hz)
 207:../drivers/fsl_uart.c **** {
 157              		.loc 1 207 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              	.LVL22:
 162 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 163              		.cfi_def_cfa_offset 24
 164              		.cfi_offset 3, -24
 165              		.cfi_offset 4, -20
 166              		.cfi_offset 5, -16
 167              		.cfi_offset 6, -12
 168              		.cfi_offset 7, -8
 169              		.cfi_offset 14, -4
 208:../drivers/fsl_uart.c ****     assert(config);
 209:../drivers/fsl_uart.c ****     assert(config->baudRate_Bps);
 210:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 211:../drivers/fsl_uart.c ****     assert(FSL_FEATURE_UART_FIFO_SIZEn(base) >= config->txFifoWatermark);
 212:../drivers/fsl_uart.c ****     assert(FSL_FEATURE_UART_FIFO_SIZEn(base) >= config->rxFifoWatermark);
 213:../drivers/fsl_uart.c **** #endif
 214:../drivers/fsl_uart.c **** 
 215:../drivers/fsl_uart.c ****     uint16_t sbr = 0;
 216:../drivers/fsl_uart.c ****     uint8_t temp = 0;
 217:../drivers/fsl_uart.c ****     uint32_t baudDiff = 0;
 218:../drivers/fsl_uart.c **** 
 219:../drivers/fsl_uart.c ****     /* Calculate the baud rate modulo divisor, sbr*/
 220:../drivers/fsl_uart.c ****     sbr = srcClock_Hz / (config->baudRate_Bps * 16);
 170              		.loc 1 220 0
 171 0002 0B68     		ldr	r3, [r1]
 172 0004 1D01     		lsls	r5, r3, #4
 173 0006 B2FBF5F5 		udiv	r5, r2, r5
 174 000a ADB2     		uxth	r5, r5
 175              	.LVL23:
 221:../drivers/fsl_uart.c ****     /* set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate */
 222:../drivers/fsl_uart.c ****     if (sbr == 0)
 223:../drivers/fsl_uart.c ****     {
 224:../drivers/fsl_uart.c ****         sbr = 1;
 176              		.loc 1 224 0
 177 000c 002D     		cmp	r5, #0
 178 000e 08BF     		it	eq
 179 0010 0125     		moveq	r5, #1
 180              	.LVL24:
 207:../drivers/fsl_uart.c ****     assert(config);
 181              		.loc 1 207 0
 182 0012 0446     		mov	r4, r0
 225:../drivers/fsl_uart.c ****     }
 226:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 227:../drivers/fsl_uart.c ****     /* Determine if a fractional divider is needed to fine tune closer to the
 228:../drivers/fsl_uart.c ****      * desired baud, each value of brfa is in 1/32 increments,
 229:../drivers/fsl_uart.c ****      * hence the multiply-by-32. */
 230:../drivers/fsl_uart.c ****     uint32_t tempBaud = 0;
 231:../drivers/fsl_uart.c **** 
 232:../drivers/fsl_uart.c ****     uint16_t brfa = (2 * srcClock_Hz / (config->baudRate_Bps)) - 32 * sbr;
 183              		.loc 1 232 0
 184 0014 6801     		lsls	r0, r5, #5
 185              	.LVL25:
 186 0016 5200     		lsls	r2, r2, #1
 187              	.LVL26:
 188 0018 B2FBF3F6 		udiv	r6, r2, r3
 189 001c 361A     		subs	r6, r6, r0
 190 001e B6B2     		uxth	r6, r6
 191              	.LVL27:
 233:../drivers/fsl_uart.c **** 
 234:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values and BRFA */
 235:../drivers/fsl_uart.c ****     tempBaud = (srcClock_Hz * 2 / ((sbr * 32 + brfa)));
 192              		.loc 1 235 0
 193 0020 3044     		add	r0, r0, r6
 194 0022 B2FBF0F2 		udiv	r2, r2, r0
 195              	.LVL28:
 236:../drivers/fsl_uart.c ****     baudDiff =
 237:../drivers/fsl_uart.c ****         (tempBaud > config->baudRate_Bps) ? (tempBaud - config->baudRate_Bps) : (config->baudRate_B
 196              		.loc 1 237 0
 197 0026 9342     		cmp	r3, r2
 198 0028 34BF     		ite	cc
 199 002a D21A     		subcc	r2, r2, r3
 200              	.LVL29:
 201 002c 9A1A     		subcs	r2, r3, r2
 202              	.LVL30:
 238:../drivers/fsl_uart.c **** 
 239:../drivers/fsl_uart.c **** #else
 240:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values */
 241:../drivers/fsl_uart.c ****     baudDiff = (srcClock_Hz / (sbr * 16)) - config->baudRate_Bps;
 242:../drivers/fsl_uart.c **** 
 243:../drivers/fsl_uart.c ****     /* Select the better value between sbr and (sbr + 1) */
 244:../drivers/fsl_uart.c ****     if (baudDiff > (config->baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)))))
 245:../drivers/fsl_uart.c ****     {
 246:../drivers/fsl_uart.c ****         baudDiff = config->baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)));
 247:../drivers/fsl_uart.c ****         sbr++;
 248:../drivers/fsl_uart.c ****     }
 249:../drivers/fsl_uart.c **** #endif
 250:../drivers/fsl_uart.c **** 
 251:../drivers/fsl_uart.c ****     /* next, check to see if actual baud rate is within 3% of desired baud rate
 252:../drivers/fsl_uart.c ****      * based on the calculate SBR value */
 253:../drivers/fsl_uart.c ****     if (baudDiff > ((config->baudRate_Bps / 100) * 3))
 203              		.loc 1 253 0
 204 002e 6420     		movs	r0, #100
 205              	.LVL31:
 206 0030 B3FBF0F3 		udiv	r3, r3, r0
 207 0034 03EB4303 		add	r3, r3, r3, lsl #1
 208 0038 9342     		cmp	r3, r2
 209 003a 60D3     		bcc	.L25
 254:../drivers/fsl_uart.c ****     {
 255:../drivers/fsl_uart.c ****         /* Unacceptable baud rate difference of more than 3%*/
 256:../drivers/fsl_uart.c ****         return kStatus_UART_BaudrateNotSupport;
 257:../drivers/fsl_uart.c ****     }
 258:../drivers/fsl_uart.c **** 
 259:../drivers/fsl_uart.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 260:../drivers/fsl_uart.c ****     /* Enable uart clock */
 261:../drivers/fsl_uart.c ****     CLOCK_EnableClock(s_uartClock[UART_GetInstance(base)]);
 210              		.loc 1 261 0
 211 003c 2046     		mov	r0, r4
 212 003e FFF7FEFF 		bl	UART_GetInstance
 213              	.LVL32:
 214 0042 304B     		ldr	r3, .L41
 215 0044 53F82000 		ldr	r0, [r3, r0, lsl #2]
 216              	.LVL33:
 217              	.LBB34:
 218              	.LBB35:
 219              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 220              		.loc 2 694 0
 221 0048 030C     		lsrs	r3, r0, #16
 222 004a 03F18043 		add	r3, r3, #1073741824
 223 004e 03F58E23 		add	r3, r3, #290816
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 224              		.loc 2 695 0
 225 0052 80B2     		uxth	r0, r0
 226              	.LVL34:
 227 0054 1F68     		ldr	r7, [r3]
 228 0056 0122     		movs	r2, #1
 229              	.LVL35:
 230 0058 8240     		lsls	r2, r2, r0
 231 005a 3A43     		orrs	r2, r2, r7
 232 005c 1A60     		str	r2, [r3]
 233              	.LBE35:
 234              	.LBE34:
 262:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 263:../drivers/fsl_uart.c **** 
 264:../drivers/fsl_uart.c ****     /* Disable UART TX RX before setting. */
 265:../drivers/fsl_uart.c ****     base->C2 &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
 235              		.loc 1 265 0
 236 005e E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 237 0060 03F0F303 		and	r3, r3, #243
 238 0064 E370     		strb	r3, [r4, #3]
 266:../drivers/fsl_uart.c **** 
 267:../drivers/fsl_uart.c ****     /* Write the sbr value to the BDH and BDL registers*/
 268:../drivers/fsl_uart.c ****     base->BDH = (base->BDH & ~UART_BDH_SBR_MASK) | (uint8_t)(sbr >> 8);
 239              		.loc 1 268 0
 240 0066 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 241 0068 03F0E003 		and	r3, r3, #224
 242 006c 43EA1523 		orr	r3, r3, r5, lsr #8
 243 0070 DBB2     		uxtb	r3, r3
 269:../drivers/fsl_uart.c ****     base->BDL = (uint8_t)sbr;
 244              		.loc 1 269 0
 245 0072 EDB2     		uxtb	r5, r5
 246              	.LVL36:
 268:../drivers/fsl_uart.c ****     base->BDL = (uint8_t)sbr;
 247              		.loc 1 268 0
 248 0074 2370     		strb	r3, [r4]
 249              		.loc 1 269 0
 250 0076 6570     		strb	r5, [r4, #1]
 270:../drivers/fsl_uart.c **** 
 271:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 272:../drivers/fsl_uart.c ****     /* Write the brfa value to the register*/
 273:../drivers/fsl_uart.c ****     base->C4 = (base->C4 & ~UART_C4_BRFA_MASK) | (brfa & UART_C4_BRFA_MASK);
 251              		.loc 1 273 0
 252 0078 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 253 007a 06F01F06 		and	r6, r6, #31
 254              	.LVL37:
 255 007e 03F0E003 		and	r3, r3, #224
 256 0082 1E43     		orrs	r6, r6, r3
 257 0084 A672     		strb	r6, [r4, #10]
 274:../drivers/fsl_uart.c **** #endif
 275:../drivers/fsl_uart.c **** 
 276:../drivers/fsl_uart.c ****     /* Set bit count/parity mode/idle type. */
 277:../drivers/fsl_uart.c ****     temp = base->C1 & ~(UART_C1_PE_MASK | UART_C1_PT_MASK | UART_C1_M_MASK | UART_C1_ILT_MASK);
 278:../drivers/fsl_uart.c **** 
 279:../drivers/fsl_uart.c ****     temp |= UART_C1_ILT(config->idleType);
 258              		.loc 1 279 0
 259 0086 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 277:../drivers/fsl_uart.c **** 
 260              		.loc 1 277 0
 261 0088 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 262              		.loc 1 279 0
 263 008a 9200     		lsls	r2, r2, #2
 264 008c 02F00402 		and	r2, r2, #4
 277:../drivers/fsl_uart.c **** 
 265              		.loc 1 277 0
 266 0090 03F0E803 		and	r3, r3, #232
 267              	.LVL38:
 268              		.loc 1 279 0
 269 0094 1343     		orrs	r3, r3, r2
 270              	.LVL39:
 280:../drivers/fsl_uart.c **** 
 281:../drivers/fsl_uart.c ****     if (kUART_ParityDisabled != config->parityMode)
 271              		.loc 1 281 0
 272 0096 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 273 0098 12B1     		cbz	r2, .L20
 282:../drivers/fsl_uart.c ****     {
 283:../drivers/fsl_uart.c ****         temp |= (UART_C1_M_MASK | (uint8_t)config->parityMode);
 274              		.loc 1 283 0
 275 009a 42F01002 		orr	r2, r2, #16
 276 009e 1343     		orrs	r3, r3, r2
 277              	.LVL40:
 278              	.L20:
 284:../drivers/fsl_uart.c ****     }
 285:../drivers/fsl_uart.c **** 
 286:../drivers/fsl_uart.c ****     base->C1 = temp;
 279              		.loc 1 286 0
 280 00a0 A370     		strb	r3, [r4, #2]
 287:../drivers/fsl_uart.c **** 
 288:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_S
 289:../drivers/fsl_uart.c ****     /* Set stop bit per char */
 290:../drivers/fsl_uart.c ****     base->BDH = (base->BDH & ~UART_BDH_SBNS_MASK) | UART_BDH_SBNS((uint8_t)config->stopBitCount);
 281              		.loc 1 290 0
 282 00a2 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 283              	.LVL41:
 284 00a4 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 285 00a6 5B01     		lsls	r3, r3, #5
 286 00a8 03F02003 		and	r3, r3, #32
 287 00ac 02F0DF02 		and	r2, r2, #223
 288 00b0 1343     		orrs	r3, r3, r2
 289 00b2 2370     		strb	r3, [r4]
 290              	.LVL42:
 291:../drivers/fsl_uart.c **** #endif
 292:../drivers/fsl_uart.c **** 
 293:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 294:../drivers/fsl_uart.c ****     /* Set tx/rx FIFO watermark
 295:../drivers/fsl_uart.c ****        Note:
 296:../drivers/fsl_uart.c ****        Take care of the RX FIFO, RX interrupt request only assert when received bytes
 297:../drivers/fsl_uart.c ****        equal or more than RX water mark, there is potential issue if RX water
 298:../drivers/fsl_uart.c ****        mark larger than 1.
 299:../drivers/fsl_uart.c ****        For example, if RX FIFO water mark is 2, upper layer needs 5 bytes and
 300:../drivers/fsl_uart.c ****        5 bytes are received. the last byte will be saved in FIFO but not trigger
 301:../drivers/fsl_uart.c ****        RX interrupt because the water mark is 2.
 302:../drivers/fsl_uart.c ****      */
 303:../drivers/fsl_uart.c ****     base->TWFIFO = config->txFifoWatermark;
 291              		.loc 1 303 0
 292 00b4 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 293 00b6 E374     		strb	r3, [r4, #19]
 304:../drivers/fsl_uart.c ****     base->RWFIFO = config->rxFifoWatermark;
 294              		.loc 1 304 0
 295 00b8 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 296 00ba 6375     		strb	r3, [r4, #21]
 305:../drivers/fsl_uart.c **** 
 306:../drivers/fsl_uart.c ****     /* Enable tx/rx FIFO */
 307:../drivers/fsl_uart.c ****     base->PFIFO |= (UART_PFIFO_TXFE_MASK | UART_PFIFO_RXFE_MASK);
 297              		.loc 1 307 0
 298 00bc 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 299 00be 43F08803 		orr	r3, r3, #136
 300 00c2 2374     		strb	r3, [r4, #16]
 308:../drivers/fsl_uart.c **** 
 309:../drivers/fsl_uart.c ****     /* Flush FIFO */
 310:../drivers/fsl_uart.c ****     base->CFIFO |= (UART_CFIFO_TXFLUSH_MASK | UART_CFIFO_RXFLUSH_MASK);
 301              		.loc 1 310 0
 302 00c4 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 303 00c6 43F0C003 		orr	r3, r3, #192
 304 00ca 6374     		strb	r3, [r4, #17]
 311:../drivers/fsl_uart.c **** #endif
 312:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_MODEM_SUPPORT) && FSL_FEATURE_UART_HAS_MODEM_SUPPORT
 313:../drivers/fsl_uart.c ****     if (config->enableRxRTS)
 305              		.loc 1 313 0
 306 00cc 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 307 00ce 1BB1     		cbz	r3, .L21
 314:../drivers/fsl_uart.c ****     {
 315:../drivers/fsl_uart.c ****         /* Enable receiver RTS(request-to-send) function. */
 316:../drivers/fsl_uart.c ****         base->MODEM |= UART_MODEM_RXRTSE_MASK;
 308              		.loc 1 316 0
 309 00d0 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 310 00d2 43F00803 		orr	r3, r3, #8
 311 00d6 6373     		strb	r3, [r4, #13]
 312              	.L21:
 317:../drivers/fsl_uart.c ****     }
 318:../drivers/fsl_uart.c ****     if (config->enableTxCTS)
 313              		.loc 1 318 0
 314 00d8 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 315 00da 1BB1     		cbz	r3, .L22
 319:../drivers/fsl_uart.c ****     {
 320:../drivers/fsl_uart.c ****         /* Enable transmiter CTS(clear-to-send) function. */
 321:../drivers/fsl_uart.c ****         base->MODEM |= UART_MODEM_TXCTSE_MASK;
 316              		.loc 1 321 0
 317 00dc 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 318 00de 43F00103 		orr	r3, r3, #1
 319 00e2 6373     		strb	r3, [r4, #13]
 320              	.L22:
 322:../drivers/fsl_uart.c ****     }
 323:../drivers/fsl_uart.c **** #endif
 324:../drivers/fsl_uart.c **** 
 325:../drivers/fsl_uart.c ****     /* Enable TX/RX base on configure structure. */
 326:../drivers/fsl_uart.c ****     temp = base->C2;
 321              		.loc 1 326 0
 322 00e4 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 327:../drivers/fsl_uart.c **** 
 328:../drivers/fsl_uart.c ****     if (config->enableTx)
 323              		.loc 1 328 0
 324 00e6 CA7A     		ldrb	r2, [r1, #11]	@ zero_extendqisi2
 326:../drivers/fsl_uart.c **** 
 325              		.loc 1 326 0
 326 00e8 DBB2     		uxtb	r3, r3
 327              	.LVL43:
 328              		.loc 1 328 0
 329 00ea 0AB1     		cbz	r2, .L23
 329:../drivers/fsl_uart.c ****     {
 330:../drivers/fsl_uart.c ****         temp |= UART_C2_TE_MASK;
 330              		.loc 1 330 0
 331 00ec 43F00803 		orr	r3, r3, #8
 332              	.LVL44:
 333              	.L23:
 331:../drivers/fsl_uart.c ****     }
 332:../drivers/fsl_uart.c **** 
 333:../drivers/fsl_uart.c ****     if (config->enableRx)
 334              		.loc 1 333 0
 335 00f0 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 336 00f2 0AB1     		cbz	r2, .L24
 334:../drivers/fsl_uart.c ****     {
 335:../drivers/fsl_uart.c ****         temp |= UART_C2_RE_MASK;
 337              		.loc 1 335 0
 338 00f4 43F00403 		orr	r3, r3, #4
 339              	.LVL45:
 340              	.L24:
 336:../drivers/fsl_uart.c ****     }
 337:../drivers/fsl_uart.c **** 
 338:../drivers/fsl_uart.c ****     base->C2 = temp;
 341              		.loc 1 338 0
 342 00f8 E370     		strb	r3, [r4, #3]
 339:../drivers/fsl_uart.c **** 
 340:../drivers/fsl_uart.c ****     return kStatus_Success;
 343              		.loc 1 340 0
 344 00fa 0020     		movs	r0, #0
 345              	.LVL46:
 346              	.L15:
 341:../drivers/fsl_uart.c **** }
 347              		.loc 1 341 0
 348 00fc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 349              	.LVL47:
 350              	.L25:
 256:../drivers/fsl_uart.c ****     }
 351              		.loc 1 256 0
 352 00fe 40F2F530 		movw	r0, #1013
 353 0102 FBE7     		b	.L15
 354              	.L42:
 355              		.align	2
 356              	.L41:
 357 0104 00000000 		.word	.LANCHOR0
 358              		.cfi_endproc
 359              	.LFE157:
 361              		.section	.text.UART_Deinit,"ax",%progbits
 362              		.align	1
 363              		.global	UART_Deinit
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu fpv4-sp-d16
 369              	UART_Deinit:
 370              	.LFB158:
 342:../drivers/fsl_uart.c **** 
 343:../drivers/fsl_uart.c **** void UART_Deinit(UART_Type *base)
 344:../drivers/fsl_uart.c **** {
 371              		.loc 1 344 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL48:
 376 0000 08B5     		push	{r3, lr}
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 3, -8
 379              		.cfi_offset 14, -4
 380              	.L44:
 345:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 346:../drivers/fsl_uart.c ****     /* Wait tx FIFO send out*/
 347:../drivers/fsl_uart.c ****     while (0 != base->TCFIFO)
 381              		.loc 1 347 0 discriminator 1
 382 0002 037D     		ldrb	r3, [r0, #20]	@ zero_extendqisi2
 383 0004 002B     		cmp	r3, #0
 384 0006 FCD1     		bne	.L44
 385              	.L45:
 348:../drivers/fsl_uart.c ****     {
 349:../drivers/fsl_uart.c ****     }
 350:../drivers/fsl_uart.c **** #endif
 351:../drivers/fsl_uart.c ****     /* Wait last char shoft out */
 352:../drivers/fsl_uart.c ****     while (0 == (base->S1 & UART_S1_TC_MASK))
 386              		.loc 1 352 0 discriminator 1
 387 0008 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 388 000a 5B06     		lsls	r3, r3, #25
 389 000c FCD5     		bpl	.L45
 353:../drivers/fsl_uart.c ****     {
 354:../drivers/fsl_uart.c ****     }
 355:../drivers/fsl_uart.c **** 
 356:../drivers/fsl_uart.c ****     /* Disable the module. */
 357:../drivers/fsl_uart.c ****     base->C2 = 0;
 390              		.loc 1 357 0
 391 000e 0023     		movs	r3, #0
 392 0010 C370     		strb	r3, [r0, #3]
 358:../drivers/fsl_uart.c **** 
 359:../drivers/fsl_uart.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 360:../drivers/fsl_uart.c ****     /* Disable uart clock */
 361:../drivers/fsl_uart.c ****     CLOCK_DisableClock(s_uartClock[UART_GetInstance(base)]);
 393              		.loc 1 361 0
 394 0012 FFF7FEFF 		bl	UART_GetInstance
 395              	.LVL49:
 396 0016 084B     		ldr	r3, .L49
 397 0018 53F82020 		ldr	r2, [r3, r0, lsl #2]
 398              	.LVL50:
 399              	.LBB38:
 400              	.LBB39:
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 401              		.loc 2 705 0
 402 001c 130C     		lsrs	r3, r2, #16
 403 001e 03F18043 		add	r3, r3, #1073741824
 404 0022 03F58E23 		add	r3, r3, #290816
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 405              		.loc 2 706 0
 406 0026 92B2     		uxth	r2, r2
 407              	.LVL51:
 408 0028 1968     		ldr	r1, [r3]
 409 002a 0120     		movs	r0, #1
 410              	.LVL52:
 411 002c 00FA02F2 		lsl	r2, r0, r2
 412 0030 21EA0202 		bic	r2, r1, r2
 413 0034 1A60     		str	r2, [r3]
 414              	.LBE39:
 415              	.LBE38:
 362:../drivers/fsl_uart.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 363:../drivers/fsl_uart.c **** }
 416              		.loc 1 363 0
 417 0036 08BD     		pop	{r3, pc}
 418              	.L50:
 419              		.align	2
 420              	.L49:
 421 0038 00000000 		.word	.LANCHOR0
 422              		.cfi_endproc
 423              	.LFE158:
 425              		.section	.text.UART_GetDefaultConfig,"ax",%progbits
 426              		.align	1
 427              		.global	UART_GetDefaultConfig
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	UART_GetDefaultConfig:
 434              	.LFB159:
 364:../drivers/fsl_uart.c **** 
 365:../drivers/fsl_uart.c **** void UART_GetDefaultConfig(uart_config_t *config)
 366:../drivers/fsl_uart.c **** {
 435              		.loc 1 366 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440              	.LVL53:
 367:../drivers/fsl_uart.c ****     assert(config);
 368:../drivers/fsl_uart.c **** 
 369:../drivers/fsl_uart.c ****     config->baudRate_Bps = 115200U;
 441              		.loc 1 369 0
 442 0000 4FF4E133 		mov	r3, #115200
 443 0004 0360     		str	r3, [r0]
 370:../drivers/fsl_uart.c ****     config->parityMode = kUART_ParityDisabled;
 371:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_S
 372:../drivers/fsl_uart.c ****     config->stopBitCount = kUART_OneStopBit;
 373:../drivers/fsl_uart.c **** #endif
 374:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 375:../drivers/fsl_uart.c ****     config->txFifoWatermark = 0;
 444              		.loc 1 375 0
 445 0006 4FF48072 		mov	r2, #256
 370:../drivers/fsl_uart.c ****     config->parityMode = kUART_ParityDisabled;
 446              		.loc 1 370 0
 447 000a 0023     		movs	r3, #0
 448 000c 0371     		strb	r3, [r0, #4]
 372:../drivers/fsl_uart.c **** #endif
 449              		.loc 1 372 0
 450 000e 4371     		strb	r3, [r0, #5]
 451              		.loc 1 375 0
 452 0010 C280     		strh	r2, [r0, #6]	@ movhi
 376:../drivers/fsl_uart.c ****     config->rxFifoWatermark = 1;
 377:../drivers/fsl_uart.c **** #endif
 378:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_MODEM_SUPPORT) && FSL_FEATURE_UART_HAS_MODEM_SUPPORT
 379:../drivers/fsl_uart.c ****     config->enableRxRTS = false;
 453              		.loc 1 379 0
 454 0012 0372     		strb	r3, [r0, #8]
 380:../drivers/fsl_uart.c ****     config->enableTxCTS = false;
 455              		.loc 1 380 0
 456 0014 4372     		strb	r3, [r0, #9]
 381:../drivers/fsl_uart.c **** #endif
 382:../drivers/fsl_uart.c ****     config->idleType = kUART_IdleTypeStartBit;
 457              		.loc 1 382 0
 458 0016 8372     		strb	r3, [r0, #10]
 383:../drivers/fsl_uart.c ****     config->enableTx = false;
 459              		.loc 1 383 0
 460 0018 C372     		strb	r3, [r0, #11]
 384:../drivers/fsl_uart.c ****     config->enableRx = false;
 461              		.loc 1 384 0
 462 001a 0373     		strb	r3, [r0, #12]
 385:../drivers/fsl_uart.c **** }
 463              		.loc 1 385 0
 464 001c 7047     		bx	lr
 465              		.cfi_endproc
 466              	.LFE159:
 468              		.section	.text.UART_SetBaudRate,"ax",%progbits
 469              		.align	1
 470              		.global	UART_SetBaudRate
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	UART_SetBaudRate:
 477              	.LFB160:
 386:../drivers/fsl_uart.c **** 
 387:../drivers/fsl_uart.c **** status_t UART_SetBaudRate(UART_Type *base, uint32_t baudRate_Bps, uint32_t srcClock_Hz)
 388:../drivers/fsl_uart.c **** {
 478              		.loc 1 388 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              	.LVL54:
 389:../drivers/fsl_uart.c ****     assert(baudRate_Bps);
 390:../drivers/fsl_uart.c **** 
 391:../drivers/fsl_uart.c ****     uint16_t sbr = 0;
 392:../drivers/fsl_uart.c ****     uint32_t baudDiff = 0;
 393:../drivers/fsl_uart.c ****     uint8_t oldCtrl;
 394:../drivers/fsl_uart.c **** 
 395:../drivers/fsl_uart.c ****     /* Calculate the baud rate modulo divisor, sbr*/
 396:../drivers/fsl_uart.c ****     sbr = srcClock_Hz / (baudRate_Bps * 16);
 483              		.loc 1 396 0
 484 0000 0B01     		lsls	r3, r1, #4
 485 0002 B2FBF3F3 		udiv	r3, r2, r3
 486 0006 9BB2     		uxth	r3, r3
 487              	.LVL55:
 397:../drivers/fsl_uart.c ****     /* set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate */
 398:../drivers/fsl_uart.c ****     if (sbr == 0)
 488              		.loc 1 398 0
 489 0008 002B     		cmp	r3, #0
 399:../drivers/fsl_uart.c ****     {
 400:../drivers/fsl_uart.c ****         sbr = 1;
 490              		.loc 1 400 0
 491 000a 08BF     		it	eq
 492 000c 0123     		moveq	r3, #1
 493              	.LVL56:
 388:../drivers/fsl_uart.c ****     assert(baudRate_Bps);
 494              		.loc 1 388 0
 495 000e 30B5     		push	{r4, r5, lr}
 496              		.cfi_def_cfa_offset 12
 497              		.cfi_offset 4, -12
 498              		.cfi_offset 5, -8
 499              		.cfi_offset 14, -4
 401:../drivers/fsl_uart.c ****     }
 402:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 403:../drivers/fsl_uart.c ****     /* Determine if a fractional divider is needed to fine tune closer to the
 404:../drivers/fsl_uart.c ****      * desired baud, each value of brfa is in 1/32 increments,
 405:../drivers/fsl_uart.c ****      * hence the multiply-by-32. */
 406:../drivers/fsl_uart.c ****     uint32_t tempBaud = 0;
 407:../drivers/fsl_uart.c **** 
 408:../drivers/fsl_uart.c ****     uint16_t brfa = (2 * srcClock_Hz / (baudRate_Bps)) - 32 * sbr;
 500              		.loc 1 408 0
 501 0010 5D01     		lsls	r5, r3, #5
 502 0012 5200     		lsls	r2, r2, #1
 503              	.LVL57:
 504 0014 B2FBF1F4 		udiv	r4, r2, r1
 505 0018 641B     		subs	r4, r4, r5
 506 001a A4B2     		uxth	r4, r4
 507              	.LVL58:
 409:../drivers/fsl_uart.c **** 
 410:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values and BRFA */
 411:../drivers/fsl_uart.c ****     tempBaud = (srcClock_Hz * 2 / ((sbr * 32 + brfa)));
 508              		.loc 1 411 0
 509 001c 2544     		add	r5, r5, r4
 510 001e B2FBF5F2 		udiv	r2, r2, r5
 511              	.LVL59:
 412:../drivers/fsl_uart.c ****     baudDiff = (tempBaud > baudRate_Bps) ? (tempBaud - baudRate_Bps) : (baudRate_Bps - tempBaud);
 512              		.loc 1 412 0
 513 0022 9142     		cmp	r1, r2
 514 0024 34BF     		ite	cc
 515 0026 521A     		subcc	r2, r2, r1
 516              	.LVL60:
 517 0028 8A1A     		subcs	r2, r1, r2
 518              	.LVL61:
 413:../drivers/fsl_uart.c **** #else
 414:../drivers/fsl_uart.c ****     /* Calculate the baud rate based on the temporary SBR values */
 415:../drivers/fsl_uart.c ****     baudDiff = (srcClock_Hz / (sbr * 16)) - baudRate_Bps;
 416:../drivers/fsl_uart.c **** 
 417:../drivers/fsl_uart.c ****     /* Select the better value between sbr and (sbr + 1) */
 418:../drivers/fsl_uart.c ****     if (baudDiff > (baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)))))
 419:../drivers/fsl_uart.c ****     {
 420:../drivers/fsl_uart.c ****         baudDiff = baudRate_Bps - (srcClock_Hz / (16 * (sbr + 1)));
 421:../drivers/fsl_uart.c ****         sbr++;
 422:../drivers/fsl_uart.c ****     }
 423:../drivers/fsl_uart.c **** #endif
 424:../drivers/fsl_uart.c **** 
 425:../drivers/fsl_uart.c ****     /* next, check to see if actual baud rate is within 3% of desired baud rate
 426:../drivers/fsl_uart.c ****      * based on the calculate SBR value */
 427:../drivers/fsl_uart.c ****     if (baudDiff < ((baudRate_Bps / 100) * 3))
 519              		.loc 1 427 0
 520 002a 6425     		movs	r5, #100
 521              	.LVL62:
 522 002c B1FBF5F1 		udiv	r1, r1, r5
 523              	.LVL63:
 524 0030 01EB4101 		add	r1, r1, r1, lsl #1
 525 0034 9142     		cmp	r1, r2
 526 0036 18D9     		bls	.L57
 428:../drivers/fsl_uart.c ****     {
 429:../drivers/fsl_uart.c ****         /* Store C2 before disable Tx and Rx */
 430:../drivers/fsl_uart.c ****         oldCtrl = base->C2;
 527              		.loc 1 430 0
 528 0038 C178     		ldrb	r1, [r0, #3]	@ zero_extendqisi2
 431:../drivers/fsl_uart.c **** 
 432:../drivers/fsl_uart.c ****         /* Disable UART TX RX before setting. */
 433:../drivers/fsl_uart.c ****         base->C2 &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
 529              		.loc 1 433 0
 530 003a C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 531              	.LVL64:
 532 003c 02F0F302 		and	r2, r2, #243
 533 0040 C270     		strb	r2, [r0, #3]
 434:../drivers/fsl_uart.c **** 
 435:../drivers/fsl_uart.c ****         /* Write the sbr value to the BDH and BDL registers*/
 436:../drivers/fsl_uart.c ****         base->BDH = (base->BDH & ~UART_BDH_SBR_MASK) | (uint8_t)(sbr >> 8);
 534              		.loc 1 436 0
 535 0042 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 536 0044 02F0E002 		and	r2, r2, #224
 537 0048 42EA1322 		orr	r2, r2, r3, lsr #8
 538 004c D2B2     		uxtb	r2, r2
 437:../drivers/fsl_uart.c ****         base->BDL = (uint8_t)sbr;
 539              		.loc 1 437 0
 540 004e DBB2     		uxtb	r3, r3
 541              	.LVL65:
 436:../drivers/fsl_uart.c ****         base->BDL = (uint8_t)sbr;
 542              		.loc 1 436 0
 543 0050 0270     		strb	r2, [r0]
 544              		.loc 1 437 0
 545 0052 4370     		strb	r3, [r0, #1]
 438:../drivers/fsl_uart.c **** 
 439:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT) && FSL_FEATURE_UART_HAS_BAUD_RATE_F
 440:../drivers/fsl_uart.c ****         /* Write the brfa value to the register*/
 441:../drivers/fsl_uart.c ****         base->C4 = (base->C4 & ~UART_C4_BRFA_MASK) | (brfa & UART_C4_BRFA_MASK);
 546              		.loc 1 441 0
 547 0054 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 548 0056 04F01F04 		and	r4, r4, #31
 549              	.LVL66:
 550 005a 03F0E003 		and	r3, r3, #224
 430:../drivers/fsl_uart.c **** 
 551              		.loc 1 430 0
 552 005e C9B2     		uxtb	r1, r1
 553              	.LVL67:
 554              		.loc 1 441 0
 555 0060 1C43     		orrs	r4, r4, r3
 556 0062 8472     		strb	r4, [r0, #10]
 442:../drivers/fsl_uart.c **** #endif
 443:../drivers/fsl_uart.c ****         /* Restore C2. */
 444:../drivers/fsl_uart.c ****         base->C2 = oldCtrl;
 557              		.loc 1 444 0
 558 0064 C170     		strb	r1, [r0, #3]
 445:../drivers/fsl_uart.c **** 
 446:../drivers/fsl_uart.c ****         return kStatus_Success;
 559              		.loc 1 446 0
 560 0066 0020     		movs	r0, #0
 561              	.LVL68:
 562              	.L52:
 447:../drivers/fsl_uart.c ****     }
 448:../drivers/fsl_uart.c ****     else
 449:../drivers/fsl_uart.c ****     {
 450:../drivers/fsl_uart.c ****         /* Unacceptable baud rate difference of more than 3%*/
 451:../drivers/fsl_uart.c ****         return kStatus_UART_BaudrateNotSupport;
 452:../drivers/fsl_uart.c ****     }
 453:../drivers/fsl_uart.c **** }
 563              		.loc 1 453 0
 564 0068 30BD     		pop	{r4, r5, pc}
 565              	.LVL69:
 566              	.L57:
 451:../drivers/fsl_uart.c ****     }
 567              		.loc 1 451 0
 568 006a 40F2F530 		movw	r0, #1013
 569              	.LVL70:
 570 006e FBE7     		b	.L52
 571              		.cfi_endproc
 572              	.LFE160:
 574              		.section	.text.UART_EnableInterrupts,"ax",%progbits
 575              		.align	1
 576              		.global	UART_EnableInterrupts
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	UART_EnableInterrupts:
 583              	.LFB161:
 454:../drivers/fsl_uart.c **** 
 455:../drivers/fsl_uart.c **** void UART_EnableInterrupts(UART_Type *base, uint32_t mask)
 456:../drivers/fsl_uart.c **** {
 584              		.loc 1 456 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589              	.LVL71:
 457:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 590              		.loc 1 457 0
 591 0000 21F07841 		bic	r1, r1, #-134217728
 592              	.LVL72:
 593 0004 21F47001 		bic	r1, r1, #15728640
 458:../drivers/fsl_uart.c **** 
 459:../drivers/fsl_uart.c ****     /* The interrupt mask is combined by control bits from several register: ((CFIFO<<24) | (C3<<16
 460:../drivers/fsl_uart.c ****      */
 461:../drivers/fsl_uart.c ****     base->BDH |= mask;
 594              		.loc 1 461 0
 595 0008 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 457:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 596              		.loc 1 457 0
 597 000a 21F47361 		bic	r1, r1, #3888
 598 000e 21F00F01 		bic	r1, r1, #15
 599              	.LVL73:
 600              		.loc 1 461 0
 601 0012 0B43     		orrs	r3, r3, r1
 602 0014 DBB2     		uxtb	r3, r3
 603 0016 0370     		strb	r3, [r0]
 462:../drivers/fsl_uart.c ****     base->C2 |= (mask >> 8);
 604              		.loc 1 462 0
 605 0018 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 606 001a 43EA1123 		orr	r3, r3, r1, lsr #8
 607 001e DBB2     		uxtb	r3, r3
 608 0020 C370     		strb	r3, [r0, #3]
 463:../drivers/fsl_uart.c ****     base->C3 |= (mask >> 16);
 609              		.loc 1 463 0
 610 0022 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 611 0024 43EA1143 		orr	r3, r3, r1, lsr #16
 612 0028 DBB2     		uxtb	r3, r3
 613 002a 8371     		strb	r3, [r0, #6]
 464:../drivers/fsl_uart.c **** 
 465:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 466:../drivers/fsl_uart.c ****     base->CFIFO |= (mask >> 24);
 614              		.loc 1 466 0
 615 002c 437C     		ldrb	r3, [r0, #17]	@ zero_extendqisi2
 616 002e 43EA1161 		orr	r1, r3, r1, lsr #24
 617              	.LVL74:
 618 0032 4174     		strb	r1, [r0, #17]
 467:../drivers/fsl_uart.c **** #endif
 468:../drivers/fsl_uart.c **** }
 619              		.loc 1 468 0
 620 0034 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE161:
 624              		.section	.text.UART_DisableInterrupts,"ax",%progbits
 625              		.align	1
 626              		.global	UART_DisableInterrupts
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 630              		.fpu fpv4-sp-d16
 632              	UART_DisableInterrupts:
 633              	.LFB162:
 469:../drivers/fsl_uart.c **** 
 470:../drivers/fsl_uart.c **** void UART_DisableInterrupts(UART_Type *base, uint32_t mask)
 471:../drivers/fsl_uart.c **** {
 634              		.loc 1 471 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              		@ link register save eliminated.
 639              	.LVL75:
 472:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 640              		.loc 1 472 0
 641 0000 21F07841 		bic	r1, r1, #-134217728
 642              	.LVL76:
 643 0004 21F47001 		bic	r1, r1, #15728640
 473:../drivers/fsl_uart.c **** 
 474:../drivers/fsl_uart.c ****     /* The interrupt mask is combined by control bits from several register: ((CFIFO<<24) | (C3<<16
 475:../drivers/fsl_uart.c ****      */
 476:../drivers/fsl_uart.c ****     base->BDH &= ~mask;
 644              		.loc 1 476 0
 645 0008 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 472:../drivers/fsl_uart.c ****     mask &= kUART_AllInterruptsEnable;
 646              		.loc 1 472 0
 647 000a 21F47361 		bic	r1, r1, #3888
 648 000e 21F00F01 		bic	r1, r1, #15
 649              	.LVL77:
 650              		.loc 1 476 0
 651 0012 23EA0103 		bic	r3, r3, r1
 652 0016 0370     		strb	r3, [r0]
 477:../drivers/fsl_uart.c ****     base->C2 &= ~(mask >> 8);
 653              		.loc 1 477 0
 654 0018 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 655 001a 23EA1123 		bic	r3, r3, r1, lsr #8
 656 001e C370     		strb	r3, [r0, #3]
 478:../drivers/fsl_uart.c ****     base->C3 &= ~(mask >> 16);
 657              		.loc 1 478 0
 658 0020 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 659 0022 23EA1143 		bic	r3, r3, r1, lsr #16
 660 0026 8371     		strb	r3, [r0, #6]
 479:../drivers/fsl_uart.c **** 
 480:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 481:../drivers/fsl_uart.c ****     base->CFIFO &= ~(mask >> 24);
 661              		.loc 1 481 0
 662 0028 437C     		ldrb	r3, [r0, #17]	@ zero_extendqisi2
 663 002a 23EA1161 		bic	r1, r3, r1, lsr #24
 664              	.LVL78:
 665 002e 4174     		strb	r1, [r0, #17]
 482:../drivers/fsl_uart.c **** #endif
 483:../drivers/fsl_uart.c **** }
 666              		.loc 1 483 0
 667 0030 7047     		bx	lr
 668              		.cfi_endproc
 669              	.LFE162:
 671              		.section	.text.UART_TransferHandleIRQ,"ax",%progbits
 672              		.align	1
 673              		.global	UART_TransferHandleIRQ
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu fpv4-sp-d16
 679              	UART_TransferHandleIRQ:
 680              	.LFB179:
 484:../drivers/fsl_uart.c **** 
 485:../drivers/fsl_uart.c **** uint32_t UART_GetEnabledInterrupts(UART_Type *base)
 486:../drivers/fsl_uart.c **** {
 487:../drivers/fsl_uart.c ****     uint32_t temp;
 488:../drivers/fsl_uart.c **** 
 489:../drivers/fsl_uart.c ****     temp = base->BDH | ((uint32_t)(base->C2) << 8) | ((uint32_t)(base->C3) << 16);
 490:../drivers/fsl_uart.c **** 
 491:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 492:../drivers/fsl_uart.c ****     temp |= ((uint32_t)(base->CFIFO) << 24);
 493:../drivers/fsl_uart.c **** #endif
 494:../drivers/fsl_uart.c **** 
 495:../drivers/fsl_uart.c ****     return temp & kUART_AllInterruptsEnable;
 496:../drivers/fsl_uart.c **** }
 497:../drivers/fsl_uart.c **** 
 498:../drivers/fsl_uart.c **** uint32_t UART_GetStatusFlags(UART_Type *base)
 499:../drivers/fsl_uart.c **** {
 500:../drivers/fsl_uart.c ****     uint32_t status_flag;
 501:../drivers/fsl_uart.c **** 
 502:../drivers/fsl_uart.c ****     status_flag = base->S1 | ((uint32_t)(base->S2) << 8);
 503:../drivers/fsl_uart.c **** 
 504:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS) && FSL_FEATURE_UART_HAS_EXTENDED_DAT
 505:../drivers/fsl_uart.c ****     status_flag |= ((uint32_t)(base->ED) << 16);
 506:../drivers/fsl_uart.c **** #endif
 507:../drivers/fsl_uart.c **** 
 508:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 509:../drivers/fsl_uart.c ****     status_flag |= ((uint32_t)(base->SFIFO) << 24);
 510:../drivers/fsl_uart.c **** #endif
 511:../drivers/fsl_uart.c **** 
 512:../drivers/fsl_uart.c ****     return status_flag;
 513:../drivers/fsl_uart.c **** }
 514:../drivers/fsl_uart.c **** 
 515:../drivers/fsl_uart.c **** status_t UART_ClearStatusFlags(UART_Type *base, uint32_t mask)
 516:../drivers/fsl_uart.c **** {
 517:../drivers/fsl_uart.c ****     uint8_t reg = base->S2;
 518:../drivers/fsl_uart.c ****     status_t status;
 519:../drivers/fsl_uart.c **** 
 520:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_LIN_BREAK_DETECT) && FSL_FEATURE_UART_HAS_LIN_BREAK_DETECT
 521:../drivers/fsl_uart.c ****     reg &= ~(UART_S2_RXEDGIF_MASK | UART_S2_LBKDIF_MASK);
 522:../drivers/fsl_uart.c **** #else
 523:../drivers/fsl_uart.c ****     reg &= ~UART_S2_RXEDGIF_MASK;
 524:../drivers/fsl_uart.c **** #endif
 525:../drivers/fsl_uart.c **** 
 526:../drivers/fsl_uart.c ****     base->S2 = reg | (uint8_t)(mask >> 8);
 527:../drivers/fsl_uart.c **** 
 528:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 529:../drivers/fsl_uart.c ****     base->SFIFO = (uint8_t)(mask >> 24);
 530:../drivers/fsl_uart.c **** #endif
 531:../drivers/fsl_uart.c **** 
 532:../drivers/fsl_uart.c ****     if (mask & (kUART_IdleLineFlag | kUART_NoiseErrorFlag | kUART_FramingErrorFlag | kUART_ParityEr
 533:../drivers/fsl_uart.c ****     {
 534:../drivers/fsl_uart.c ****         /* Read base->D to clear the flags. */
 535:../drivers/fsl_uart.c ****         (void)base->S1;
 536:../drivers/fsl_uart.c ****         (void)base->D;
 537:../drivers/fsl_uart.c ****     }
 538:../drivers/fsl_uart.c **** 
 539:../drivers/fsl_uart.c ****     if (mask & kUART_RxOverrunFlag)
 540:../drivers/fsl_uart.c ****     {
 541:../drivers/fsl_uart.c ****         /* Read base->D to clear the flags and Flush all data in FIFO. */
 542:../drivers/fsl_uart.c ****         (void)base->S1;
 543:../drivers/fsl_uart.c ****         (void)base->D;
 544:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 545:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
 546:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
 547:../drivers/fsl_uart.c **** #endif
 548:../drivers/fsl_uart.c ****     }
 549:../drivers/fsl_uart.c **** 
 550:../drivers/fsl_uart.c ****     /* If some flags still pending. */
 551:../drivers/fsl_uart.c ****     if (mask & UART_GetStatusFlags(base))
 552:../drivers/fsl_uart.c ****     {
 553:../drivers/fsl_uart.c ****         /* Some flags can only clear or set by the hardware itself, these flags are: kUART_TxDataRe
 554:../drivers/fsl_uart.c ****         kUART_TransmissionCompleteFlag, kUART_RxDataRegFullFlag, kUART_RxActiveFlag, kUART_NoiseErr
 555:../drivers/fsl_uart.c ****         kUART_ParityErrorInRxDataRegFlag, kUART_TxFifoEmptyFlag, kUART_RxFifoEmptyFlag. */
 556:../drivers/fsl_uart.c ****         status = kStatus_UART_FlagCannotClearManually;
 557:../drivers/fsl_uart.c ****     }
 558:../drivers/fsl_uart.c ****     else
 559:../drivers/fsl_uart.c ****     {
 560:../drivers/fsl_uart.c ****         status = kStatus_Success;
 561:../drivers/fsl_uart.c ****     }
 562:../drivers/fsl_uart.c **** 
 563:../drivers/fsl_uart.c ****     return status;
 564:../drivers/fsl_uart.c **** }
 565:../drivers/fsl_uart.c **** 
 566:../drivers/fsl_uart.c **** void UART_WriteBlocking(UART_Type *base, const uint8_t *data, size_t length)
 567:../drivers/fsl_uart.c **** {
 568:../drivers/fsl_uart.c ****     /* This API can only ensure that the data is written into the data buffer but can't
 569:../drivers/fsl_uart.c ****     ensure all data in the data buffer are sent into the transmit shift buffer. */
 570:../drivers/fsl_uart.c ****     while (length--)
 571:../drivers/fsl_uart.c ****     {
 572:../drivers/fsl_uart.c ****         while (!(base->S1 & UART_S1_TDRE_MASK))
 573:../drivers/fsl_uart.c ****         {
 574:../drivers/fsl_uart.c ****         }
 575:../drivers/fsl_uart.c ****         base->D = *(data++);
 576:../drivers/fsl_uart.c ****     }
 577:../drivers/fsl_uart.c **** }
 578:../drivers/fsl_uart.c **** 
 579:../drivers/fsl_uart.c **** static void UART_WriteNonBlocking(UART_Type *base, const uint8_t *data, size_t length)
 580:../drivers/fsl_uart.c **** {
 581:../drivers/fsl_uart.c ****     assert(data);
 582:../drivers/fsl_uart.c **** 
 583:../drivers/fsl_uart.c ****     size_t i;
 584:../drivers/fsl_uart.c **** 
 585:../drivers/fsl_uart.c ****     /* The Non Blocking write data API assume user have ensured there is enough space in
 586:../drivers/fsl_uart.c ****     peripheral to write. */
 587:../drivers/fsl_uart.c ****     for (i = 0; i < length; i++)
 588:../drivers/fsl_uart.c ****     {
 589:../drivers/fsl_uart.c ****         base->D = data[i];
 590:../drivers/fsl_uart.c ****     }
 591:../drivers/fsl_uart.c **** }
 592:../drivers/fsl_uart.c **** 
 593:../drivers/fsl_uart.c **** status_t UART_ReadBlocking(UART_Type *base, uint8_t *data, size_t length)
 594:../drivers/fsl_uart.c **** {
 595:../drivers/fsl_uart.c ****     assert(data);
 596:../drivers/fsl_uart.c **** 
 597:../drivers/fsl_uart.c ****     uint32_t statusFlag;
 598:../drivers/fsl_uart.c **** 
 599:../drivers/fsl_uart.c ****     while (length--)
 600:../drivers/fsl_uart.c ****     {
 601:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 602:../drivers/fsl_uart.c ****         while (!base->RCFIFO)
 603:../drivers/fsl_uart.c **** #else
 604:../drivers/fsl_uart.c ****         while (!(base->S1 & UART_S1_RDRF_MASK))
 605:../drivers/fsl_uart.c **** #endif
 606:../drivers/fsl_uart.c ****         {
 607:../drivers/fsl_uart.c ****             statusFlag = UART_GetStatusFlags(base);
 608:../drivers/fsl_uart.c **** 
 609:../drivers/fsl_uart.c ****             if (statusFlag & kUART_RxOverrunFlag)
 610:../drivers/fsl_uart.c ****             {
 611:../drivers/fsl_uart.c ****                 return kStatus_UART_RxHardwareOverrun;
 612:../drivers/fsl_uart.c ****             }
 613:../drivers/fsl_uart.c **** 
 614:../drivers/fsl_uart.c ****             if (statusFlag & kUART_NoiseErrorFlag)
 615:../drivers/fsl_uart.c ****             {
 616:../drivers/fsl_uart.c ****                 return kStatus_UART_NoiseError;
 617:../drivers/fsl_uart.c ****             }
 618:../drivers/fsl_uart.c **** 
 619:../drivers/fsl_uart.c ****             if (statusFlag & kUART_FramingErrorFlag)
 620:../drivers/fsl_uart.c ****             {
 621:../drivers/fsl_uart.c ****                 return kStatus_UART_FramingError;
 622:../drivers/fsl_uart.c ****             }
 623:../drivers/fsl_uart.c **** 
 624:../drivers/fsl_uart.c ****             if (statusFlag & kUART_ParityErrorFlag)
 625:../drivers/fsl_uart.c ****             {
 626:../drivers/fsl_uart.c ****                 return kStatus_UART_ParityError;
 627:../drivers/fsl_uart.c ****             }
 628:../drivers/fsl_uart.c ****         }
 629:../drivers/fsl_uart.c ****         *(data++) = base->D;
 630:../drivers/fsl_uart.c ****     }
 631:../drivers/fsl_uart.c **** 
 632:../drivers/fsl_uart.c ****     return kStatus_Success;
 633:../drivers/fsl_uart.c **** }
 634:../drivers/fsl_uart.c **** 
 635:../drivers/fsl_uart.c **** static void UART_ReadNonBlocking(UART_Type *base, uint8_t *data, size_t length)
 636:../drivers/fsl_uart.c **** {
 637:../drivers/fsl_uart.c ****     assert(data);
 638:../drivers/fsl_uart.c **** 
 639:../drivers/fsl_uart.c ****     size_t i;
 640:../drivers/fsl_uart.c **** 
 641:../drivers/fsl_uart.c ****     /* The Non Blocking read data API assume user have ensured there is enough space in
 642:../drivers/fsl_uart.c ****     peripheral to write. */
 643:../drivers/fsl_uart.c ****     for (i = 0; i < length; i++)
 644:../drivers/fsl_uart.c ****     {
 645:../drivers/fsl_uart.c ****         data[i] = base->D;
 646:../drivers/fsl_uart.c ****     }
 647:../drivers/fsl_uart.c **** }
 648:../drivers/fsl_uart.c **** 
 649:../drivers/fsl_uart.c **** void UART_TransferCreateHandle(UART_Type *base,
 650:../drivers/fsl_uart.c ****                                uart_handle_t *handle,
 651:../drivers/fsl_uart.c ****                                uart_transfer_callback_t callback,
 652:../drivers/fsl_uart.c ****                                void *userData)
 653:../drivers/fsl_uart.c **** {
 654:../drivers/fsl_uart.c ****     assert(handle);
 655:../drivers/fsl_uart.c **** 
 656:../drivers/fsl_uart.c ****     uint32_t instance;
 657:../drivers/fsl_uart.c **** 
 658:../drivers/fsl_uart.c ****     /* Zero the handle. */
 659:../drivers/fsl_uart.c ****     memset(handle, 0, sizeof(*handle));
 660:../drivers/fsl_uart.c **** 
 661:../drivers/fsl_uart.c ****     /* Set the TX/RX state. */
 662:../drivers/fsl_uart.c ****     handle->rxState = kUART_RxIdle;
 663:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 664:../drivers/fsl_uart.c **** 
 665:../drivers/fsl_uart.c ****     /* Set the callback and user data. */
 666:../drivers/fsl_uart.c ****     handle->callback = callback;
 667:../drivers/fsl_uart.c ****     handle->userData = userData;
 668:../drivers/fsl_uart.c **** 
 669:../drivers/fsl_uart.c ****     /* Get instance from peripheral base address. */
 670:../drivers/fsl_uart.c ****     instance = UART_GetInstance(base);
 671:../drivers/fsl_uart.c **** 
 672:../drivers/fsl_uart.c ****     /* Save the handle in global variables to support the double weak mechanism. */
 673:../drivers/fsl_uart.c ****     s_uartHandle[instance] = handle;
 674:../drivers/fsl_uart.c **** 
 675:../drivers/fsl_uart.c ****     s_uartIsr = UART_TransferHandleIRQ;
 676:../drivers/fsl_uart.c ****     /* Enable interrupt in NVIC. */
 677:../drivers/fsl_uart.c ****     EnableIRQ(s_uartIRQ[instance]);
 678:../drivers/fsl_uart.c **** }
 679:../drivers/fsl_uart.c **** 
 680:../drivers/fsl_uart.c **** void UART_TransferStartRingBuffer(UART_Type *base, uart_handle_t *handle, uint8_t *ringBuffer, size
 681:../drivers/fsl_uart.c **** {
 682:../drivers/fsl_uart.c ****     assert(handle);
 683:../drivers/fsl_uart.c ****     assert(ringBuffer);
 684:../drivers/fsl_uart.c **** 
 685:../drivers/fsl_uart.c ****     /* Setup the ringbuffer address */
 686:../drivers/fsl_uart.c ****     handle->rxRingBuffer = ringBuffer;
 687:../drivers/fsl_uart.c ****     handle->rxRingBufferSize = ringBufferSize;
 688:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 689:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 690:../drivers/fsl_uart.c **** 
 691:../drivers/fsl_uart.c ****     /* Enable the interrupt to accept the data when user need the ring buffer. */
 692:../drivers/fsl_uart.c ****     UART_EnableInterrupts(
 693:../drivers/fsl_uart.c ****         base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptEnable | kUART_FramingEr
 694:../drivers/fsl_uart.c ****     /* Enable parity error interrupt when parity mode is enable*/
 695:../drivers/fsl_uart.c ****     if (UART_C1_PE_MASK & base->C1)
 696:../drivers/fsl_uart.c ****     {
 697:../drivers/fsl_uart.c ****         UART_EnableInterrupts(base, kUART_ParityErrorInterruptEnable);
 698:../drivers/fsl_uart.c ****     }
 699:../drivers/fsl_uart.c **** }
 700:../drivers/fsl_uart.c **** 
 701:../drivers/fsl_uart.c **** void UART_TransferStopRingBuffer(UART_Type *base, uart_handle_t *handle)
 702:../drivers/fsl_uart.c **** {
 703:../drivers/fsl_uart.c ****     assert(handle);
 704:../drivers/fsl_uart.c **** 
 705:../drivers/fsl_uart.c ****     if (handle->rxState == kUART_RxIdle)
 706:../drivers/fsl_uart.c ****     {
 707:../drivers/fsl_uart.c ****         UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptE
 708:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable);
 709:../drivers/fsl_uart.c ****         /* Disable parity error interrupt when parity mode is enable*/
 710:../drivers/fsl_uart.c ****         if (UART_C1_PE_MASK & base->C1)
 711:../drivers/fsl_uart.c ****         {
 712:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
 713:../drivers/fsl_uart.c ****         }
 714:../drivers/fsl_uart.c ****     }
 715:../drivers/fsl_uart.c **** 
 716:../drivers/fsl_uart.c ****     handle->rxRingBuffer = NULL;
 717:../drivers/fsl_uart.c ****     handle->rxRingBufferSize = 0U;
 718:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 719:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 720:../drivers/fsl_uart.c **** }
 721:../drivers/fsl_uart.c **** 
 722:../drivers/fsl_uart.c **** status_t UART_TransferSendNonBlocking(UART_Type *base, uart_handle_t *handle, uart_transfer_t *xfer
 723:../drivers/fsl_uart.c **** {
 724:../drivers/fsl_uart.c ****     assert(handle);
 725:../drivers/fsl_uart.c ****     assert(xfer);
 726:../drivers/fsl_uart.c ****     assert(xfer->dataSize);
 727:../drivers/fsl_uart.c ****     assert(xfer->data);
 728:../drivers/fsl_uart.c **** 
 729:../drivers/fsl_uart.c ****     status_t status;
 730:../drivers/fsl_uart.c **** 
 731:../drivers/fsl_uart.c ****     /* Return error if current TX busy. */
 732:../drivers/fsl_uart.c ****     if (kUART_TxBusy == handle->txState)
 733:../drivers/fsl_uart.c ****     {
 734:../drivers/fsl_uart.c ****         status = kStatus_UART_TxBusy;
 735:../drivers/fsl_uart.c ****     }
 736:../drivers/fsl_uart.c ****     else
 737:../drivers/fsl_uart.c ****     {
 738:../drivers/fsl_uart.c ****         handle->txData = xfer->data;
 739:../drivers/fsl_uart.c ****         handle->txDataSize = xfer->dataSize;
 740:../drivers/fsl_uart.c ****         handle->txDataSizeAll = xfer->dataSize;
 741:../drivers/fsl_uart.c ****         handle->txState = kUART_TxBusy;
 742:../drivers/fsl_uart.c **** 
 743:../drivers/fsl_uart.c ****         /* Enable transmiter interrupt. */
 744:../drivers/fsl_uart.c ****         UART_EnableInterrupts(base, kUART_TxDataRegEmptyInterruptEnable);
 745:../drivers/fsl_uart.c **** 
 746:../drivers/fsl_uart.c ****         status = kStatus_Success;
 747:../drivers/fsl_uart.c ****     }
 748:../drivers/fsl_uart.c **** 
 749:../drivers/fsl_uart.c ****     return status;
 750:../drivers/fsl_uart.c **** }
 751:../drivers/fsl_uart.c **** 
 752:../drivers/fsl_uart.c **** void UART_TransferAbortSend(UART_Type *base, uart_handle_t *handle)
 753:../drivers/fsl_uart.c **** {
 754:../drivers/fsl_uart.c ****     assert(handle);
 755:../drivers/fsl_uart.c **** 
 756:../drivers/fsl_uart.c ****     UART_DisableInterrupts(base, kUART_TxDataRegEmptyInterruptEnable | kUART_TransmissionCompleteIn
 757:../drivers/fsl_uart.c **** 
 758:../drivers/fsl_uart.c ****     handle->txDataSize = 0;
 759:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 760:../drivers/fsl_uart.c **** }
 761:../drivers/fsl_uart.c **** 
 762:../drivers/fsl_uart.c **** status_t UART_TransferGetSendCount(UART_Type *base, uart_handle_t *handle, uint32_t *count)
 763:../drivers/fsl_uart.c **** {
 764:../drivers/fsl_uart.c ****     assert(handle);
 765:../drivers/fsl_uart.c ****     assert(count);
 766:../drivers/fsl_uart.c **** 
 767:../drivers/fsl_uart.c ****     if (kUART_TxIdle == handle->txState)
 768:../drivers/fsl_uart.c ****     {
 769:../drivers/fsl_uart.c ****         return kStatus_NoTransferInProgress;
 770:../drivers/fsl_uart.c ****     }
 771:../drivers/fsl_uart.c **** 
 772:../drivers/fsl_uart.c ****     *count = handle->txDataSizeAll - handle->txDataSize;
 773:../drivers/fsl_uart.c **** 
 774:../drivers/fsl_uart.c ****     return kStatus_Success;
 775:../drivers/fsl_uart.c **** }
 776:../drivers/fsl_uart.c **** 
 777:../drivers/fsl_uart.c **** status_t UART_TransferReceiveNonBlocking(UART_Type *base,
 778:../drivers/fsl_uart.c ****                                          uart_handle_t *handle,
 779:../drivers/fsl_uart.c ****                                          uart_transfer_t *xfer,
 780:../drivers/fsl_uart.c ****                                          size_t *receivedBytes)
 781:../drivers/fsl_uart.c **** {
 782:../drivers/fsl_uart.c ****     assert(handle);
 783:../drivers/fsl_uart.c ****     assert(xfer);
 784:../drivers/fsl_uart.c ****     assert(xfer->data);
 785:../drivers/fsl_uart.c ****     assert(xfer->dataSize);
 786:../drivers/fsl_uart.c **** 
 787:../drivers/fsl_uart.c ****     uint32_t i;
 788:../drivers/fsl_uart.c ****     status_t status;
 789:../drivers/fsl_uart.c ****     /* How many bytes to copy from ring buffer to user memory. */
 790:../drivers/fsl_uart.c ****     size_t bytesToCopy = 0U;
 791:../drivers/fsl_uart.c ****     /* How many bytes to receive. */
 792:../drivers/fsl_uart.c ****     size_t bytesToReceive;
 793:../drivers/fsl_uart.c ****     /* How many bytes currently have received. */
 794:../drivers/fsl_uart.c ****     size_t bytesCurrentReceived;
 795:../drivers/fsl_uart.c **** 
 796:../drivers/fsl_uart.c ****     /* How to get data:
 797:../drivers/fsl_uart.c ****        1. If RX ring buffer is not enabled, then save xfer->data and xfer->dataSize
 798:../drivers/fsl_uart.c ****           to uart handle, enable interrupt to store received data to xfer->data. When
 799:../drivers/fsl_uart.c ****           all data received, trigger callback.
 800:../drivers/fsl_uart.c ****        2. If RX ring buffer is enabled and not empty, get data from ring buffer first.
 801:../drivers/fsl_uart.c ****           If there are enough data in ring buffer, copy them to xfer->data and return.
 802:../drivers/fsl_uart.c ****           If there are not enough data in ring buffer, copy all of them to xfer->data,
 803:../drivers/fsl_uart.c ****           save the xfer->data remained empty space to uart handle, receive data
 804:../drivers/fsl_uart.c ****           to this empty space and trigger callback when finished. */
 805:../drivers/fsl_uart.c **** 
 806:../drivers/fsl_uart.c ****     if (kUART_RxBusy == handle->rxState)
 807:../drivers/fsl_uart.c ****     {
 808:../drivers/fsl_uart.c ****         status = kStatus_UART_RxBusy;
 809:../drivers/fsl_uart.c ****     }
 810:../drivers/fsl_uart.c ****     else
 811:../drivers/fsl_uart.c ****     {
 812:../drivers/fsl_uart.c ****         bytesToReceive = xfer->dataSize;
 813:../drivers/fsl_uart.c ****         bytesCurrentReceived = 0U;
 814:../drivers/fsl_uart.c **** 
 815:../drivers/fsl_uart.c ****         /* If RX ring buffer is used. */
 816:../drivers/fsl_uart.c ****         if (handle->rxRingBuffer)
 817:../drivers/fsl_uart.c ****         {
 818:../drivers/fsl_uart.c ****             /* Disable UART RX IRQ, protect ring buffer. */
 819:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable);
 820:../drivers/fsl_uart.c **** 
 821:../drivers/fsl_uart.c ****             /* How many bytes in RX ring buffer currently. */
 822:../drivers/fsl_uart.c ****             bytesToCopy = UART_TransferGetRxRingBufferLength(handle);
 823:../drivers/fsl_uart.c **** 
 824:../drivers/fsl_uart.c ****             if (bytesToCopy)
 825:../drivers/fsl_uart.c ****             {
 826:../drivers/fsl_uart.c ****                 bytesToCopy = MIN(bytesToReceive, bytesToCopy);
 827:../drivers/fsl_uart.c **** 
 828:../drivers/fsl_uart.c ****                 bytesToReceive -= bytesToCopy;
 829:../drivers/fsl_uart.c **** 
 830:../drivers/fsl_uart.c ****                 /* Copy data from ring buffer to user memory. */
 831:../drivers/fsl_uart.c ****                 for (i = 0U; i < bytesToCopy; i++)
 832:../drivers/fsl_uart.c ****                 {
 833:../drivers/fsl_uart.c ****                     xfer->data[bytesCurrentReceived++] = handle->rxRingBuffer[handle->rxRingBufferT
 834:../drivers/fsl_uart.c **** 
 835:../drivers/fsl_uart.c ****                     /* Wrap to 0. Not use modulo (%) because it might be large and slow. */
 836:../drivers/fsl_uart.c ****                     if (handle->rxRingBufferTail + 1U == handle->rxRingBufferSize)
 837:../drivers/fsl_uart.c ****                     {
 838:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail = 0U;
 839:../drivers/fsl_uart.c ****                     }
 840:../drivers/fsl_uart.c ****                     else
 841:../drivers/fsl_uart.c ****                     {
 842:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail++;
 843:../drivers/fsl_uart.c ****                     }
 844:../drivers/fsl_uart.c ****                 }
 845:../drivers/fsl_uart.c ****             }
 846:../drivers/fsl_uart.c **** 
 847:../drivers/fsl_uart.c ****             /* If ring buffer does not have enough data, still need to read more data. */
 848:../drivers/fsl_uart.c ****             if (bytesToReceive)
 849:../drivers/fsl_uart.c ****             {
 850:../drivers/fsl_uart.c ****                 /* No data in ring buffer, save the request to UART handle. */
 851:../drivers/fsl_uart.c ****                 handle->rxData = xfer->data + bytesCurrentReceived;
 852:../drivers/fsl_uart.c ****                 handle->rxDataSize = bytesToReceive;
 853:../drivers/fsl_uart.c ****                 handle->rxDataSizeAll = bytesToReceive;
 854:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxBusy;
 855:../drivers/fsl_uart.c ****             }
 856:../drivers/fsl_uart.c **** 
 857:../drivers/fsl_uart.c ****             /* Enable UART RX IRQ if previously enabled. */
 858:../drivers/fsl_uart.c ****             UART_EnableInterrupts(base, kUART_RxDataRegFullInterruptEnable);
 859:../drivers/fsl_uart.c **** 
 860:../drivers/fsl_uart.c ****             /* Call user callback since all data are received. */
 861:../drivers/fsl_uart.c ****             if (0 == bytesToReceive)
 862:../drivers/fsl_uart.c ****             {
 863:../drivers/fsl_uart.c ****                 if (handle->callback)
 864:../drivers/fsl_uart.c ****                 {
 865:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_RxIdle, handle->userData);
 866:../drivers/fsl_uart.c ****                 }
 867:../drivers/fsl_uart.c ****             }
 868:../drivers/fsl_uart.c ****         }
 869:../drivers/fsl_uart.c ****         /* Ring buffer not used. */
 870:../drivers/fsl_uart.c ****         else
 871:../drivers/fsl_uart.c ****         {
 872:../drivers/fsl_uart.c ****             handle->rxData = xfer->data + bytesCurrentReceived;
 873:../drivers/fsl_uart.c ****             handle->rxDataSize = bytesToReceive;
 874:../drivers/fsl_uart.c ****             handle->rxDataSizeAll = bytesToReceive;
 875:../drivers/fsl_uart.c ****             handle->rxState = kUART_RxBusy;
 876:../drivers/fsl_uart.c **** 
 877:../drivers/fsl_uart.c ****             /* Enable RX/Rx overrun/framing error/idle line interrupt. */
 878:../drivers/fsl_uart.c ****             UART_EnableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterru
 879:../drivers/fsl_uart.c ****                                             kUART_FramingErrorInterruptEnable | kUART_IdleLineInter
 880:../drivers/fsl_uart.c ****             /* Enable parity error interrupt when parity mode is enable*/
 881:../drivers/fsl_uart.c ****             if (UART_C1_PE_MASK & base->C1)
 882:../drivers/fsl_uart.c ****             {
 883:../drivers/fsl_uart.c ****                 UART_EnableInterrupts(base, kUART_ParityErrorInterruptEnable);
 884:../drivers/fsl_uart.c ****             }
 885:../drivers/fsl_uart.c ****         }
 886:../drivers/fsl_uart.c **** 
 887:../drivers/fsl_uart.c ****         /* Return the how many bytes have read. */
 888:../drivers/fsl_uart.c ****         if (receivedBytes)
 889:../drivers/fsl_uart.c ****         {
 890:../drivers/fsl_uart.c ****             *receivedBytes = bytesCurrentReceived;
 891:../drivers/fsl_uart.c ****         }
 892:../drivers/fsl_uart.c **** 
 893:../drivers/fsl_uart.c ****         status = kStatus_Success;
 894:../drivers/fsl_uart.c ****     }
 895:../drivers/fsl_uart.c **** 
 896:../drivers/fsl_uart.c ****     return status;
 897:../drivers/fsl_uart.c **** }
 898:../drivers/fsl_uart.c **** 
 899:../drivers/fsl_uart.c **** void UART_TransferAbortReceive(UART_Type *base, uart_handle_t *handle)
 900:../drivers/fsl_uart.c **** {
 901:../drivers/fsl_uart.c ****     assert(handle);
 902:../drivers/fsl_uart.c **** 
 903:../drivers/fsl_uart.c ****     /* Only abort the receive to handle->rxData, the RX ring buffer is still working. */
 904:../drivers/fsl_uart.c ****     if (!handle->rxRingBuffer)
 905:../drivers/fsl_uart.c ****     {
 906:../drivers/fsl_uart.c ****         /* Disable RX interrupt. */
 907:../drivers/fsl_uart.c ****         UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptE
 908:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable | kUART_IdleLineInterrup
 909:../drivers/fsl_uart.c ****         /* Disable parity error interrupt when parity mode is enable*/
 910:../drivers/fsl_uart.c ****         if (UART_C1_PE_MASK & base->C1)
 911:../drivers/fsl_uart.c ****         {
 912:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
 913:../drivers/fsl_uart.c ****         }
 914:../drivers/fsl_uart.c ****     }
 915:../drivers/fsl_uart.c **** 
 916:../drivers/fsl_uart.c ****     handle->rxDataSize = 0U;
 917:../drivers/fsl_uart.c ****     handle->rxState = kUART_RxIdle;
 918:../drivers/fsl_uart.c **** }
 919:../drivers/fsl_uart.c **** 
 920:../drivers/fsl_uart.c **** status_t UART_TransferGetReceiveCount(UART_Type *base, uart_handle_t *handle, uint32_t *count)
 921:../drivers/fsl_uart.c **** {
 922:../drivers/fsl_uart.c ****     assert(handle);
 923:../drivers/fsl_uart.c ****     assert(count);
 924:../drivers/fsl_uart.c **** 
 925:../drivers/fsl_uart.c ****     if (kUART_RxIdle == handle->rxState)
 926:../drivers/fsl_uart.c ****     {
 927:../drivers/fsl_uart.c ****         return kStatus_NoTransferInProgress;
 928:../drivers/fsl_uart.c ****     }
 929:../drivers/fsl_uart.c **** 
 930:../drivers/fsl_uart.c ****     if (!count)
 931:../drivers/fsl_uart.c ****     {
 932:../drivers/fsl_uart.c ****         return kStatus_InvalidArgument;
 933:../drivers/fsl_uart.c ****     }
 934:../drivers/fsl_uart.c **** 
 935:../drivers/fsl_uart.c ****     *count = handle->rxDataSizeAll - handle->rxDataSize;
 936:../drivers/fsl_uart.c **** 
 937:../drivers/fsl_uart.c ****     return kStatus_Success;
 938:../drivers/fsl_uart.c **** }
 939:../drivers/fsl_uart.c **** 
 940:../drivers/fsl_uart.c **** void UART_TransferHandleIRQ(UART_Type *base, uart_handle_t *handle)
 941:../drivers/fsl_uart.c **** {
 681              		.loc 1 941 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              	.LVL79:
 686 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 687              		.cfi_def_cfa_offset 24
 688              		.cfi_offset 4, -24
 689              		.cfi_offset 5, -20
 690              		.cfi_offset 6, -16
 691              		.cfi_offset 7, -12
 692              		.cfi_offset 8, -8
 693              		.cfi_offset 14, -4
 942:../drivers/fsl_uart.c ****     assert(handle);
 943:../drivers/fsl_uart.c **** 
 944:../drivers/fsl_uart.c ****     uint8_t count;
 945:../drivers/fsl_uart.c ****     uint8_t tempCount;
 946:../drivers/fsl_uart.c **** 
 947:../drivers/fsl_uart.c ****     /* If RX framing error */
 948:../drivers/fsl_uart.c ****     if (UART_S1_FE_MASK & base->S1)
 694              		.loc 1 948 0
 695 0004 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 696 0006 9A07     		lsls	r2, r3, #30
 941:../drivers/fsl_uart.c ****     assert(handle);
 697              		.loc 1 941 0
 698 0008 0546     		mov	r5, r0
 699 000a 0C46     		mov	r4, r1
 700              		.loc 1 948 0
 701 000c 00F18C80 		bmi	.L61
 702              	.LVL80:
 703              	.L62:
 949:../drivers/fsl_uart.c ****     {
 950:../drivers/fsl_uart.c ****         /* Read base->D to clear framing error flag, otherwise the RX does not work. */
 951:../drivers/fsl_uart.c ****         while (base->S1 & UART_S1_RDRF_MASK)
 952:../drivers/fsl_uart.c ****         {
 953:../drivers/fsl_uart.c ****             (void)base->D;
 954:../drivers/fsl_uart.c ****         }
 955:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 956:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
 957:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
 958:../drivers/fsl_uart.c **** #endif
 959:../drivers/fsl_uart.c **** 
 960:../drivers/fsl_uart.c ****         handle->rxState = kUART_RxFramingError;
 961:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 962:../drivers/fsl_uart.c ****         /* Trigger callback. */
 963:../drivers/fsl_uart.c ****         if (handle->callback)
 964:../drivers/fsl_uart.c ****         {
 965:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_FramingError, handle->userData);
 966:../drivers/fsl_uart.c ****         }
 967:../drivers/fsl_uart.c ****     }
 968:../drivers/fsl_uart.c **** 
 969:../drivers/fsl_uart.c ****     /* If RX parity error */
 970:../drivers/fsl_uart.c ****     if (UART_S1_PF_MASK & base->S1)
 704              		.loc 1 970 0
 705 0010 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 706 0012 DB07     		lsls	r3, r3, #31
 707 0014 00F1A080 		bmi	.L65
 708              	.L66:
 971:../drivers/fsl_uart.c ****     {
 972:../drivers/fsl_uart.c ****         /* Read base->D to clear parity error flag, otherwise the RX does not work. */
 973:../drivers/fsl_uart.c ****         while (base->S1 & UART_S1_RDRF_MASK)
 974:../drivers/fsl_uart.c ****         {
 975:../drivers/fsl_uart.c ****             (void)base->D;
 976:../drivers/fsl_uart.c ****         }
 977:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 978:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
 979:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
 980:../drivers/fsl_uart.c **** #endif
 981:../drivers/fsl_uart.c **** 
 982:../drivers/fsl_uart.c ****         handle->rxState = kUART_RxParityError;
 983:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 984:../drivers/fsl_uart.c ****         /* Trigger callback. */
 985:../drivers/fsl_uart.c ****         if (handle->callback)
 986:../drivers/fsl_uart.c ****         {
 987:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_ParityError, handle->userData);
 988:../drivers/fsl_uart.c ****         }
 989:../drivers/fsl_uart.c ****     }
 990:../drivers/fsl_uart.c **** 
 991:../drivers/fsl_uart.c ****     /* If RX overrun. */
 992:../drivers/fsl_uart.c ****     if (UART_S1_OR_MASK & base->S1)
 709              		.loc 1 992 0
 710 0018 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 711 001a 1F07     		lsls	r7, r3, #28
 712 001c 00F1B480 		bmi	.L69
 713              	.L70:
 993:../drivers/fsl_uart.c ****     {
 994:../drivers/fsl_uart.c ****         /* Read base->D to clear overrun flag, otherwise the RX does not work. */
 995:../drivers/fsl_uart.c ****         while (base->S1 & UART_S1_RDRF_MASK)
 996:../drivers/fsl_uart.c ****         {
 997:../drivers/fsl_uart.c ****             (void)base->D;
 998:../drivers/fsl_uart.c ****         }
 999:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1000:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
1001:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
1002:../drivers/fsl_uart.c **** #endif
1003:../drivers/fsl_uart.c ****         /* Trigger callback. */
1004:../drivers/fsl_uart.c ****         if (handle->callback)
1005:../drivers/fsl_uart.c ****         {
1006:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_RxHardwareOverrun, handle->userData);
1007:../drivers/fsl_uart.c ****         }
1008:../drivers/fsl_uart.c ****     }
1009:../drivers/fsl_uart.c **** 
1010:../drivers/fsl_uart.c ****     /* If IDLE line was detected. */
1011:../drivers/fsl_uart.c ****     if ((UART_S1_IDLE_MASK & base->S1) && (UART_C2_ILIE_MASK & base->C2))
 714              		.loc 1 1011 0
 715 0020 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 716 0022 D806     		lsls	r0, r3, #27
 717 0024 23D5     		bpl	.L74
 718              		.loc 1 1011 0 is_stmt 0 discriminator 1
 719 0026 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 720 0028 D906     		lsls	r1, r3, #27
 721 002a 20D5     		bpl	.L74
1012:../drivers/fsl_uart.c ****     {
1013:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1014:../drivers/fsl_uart.c ****         /* If still some data in the FIFO, read out these data to user data buffer. */
1015:../drivers/fsl_uart.c ****         count = base->RCFIFO;
 722              		.loc 1 1015 0 is_stmt 1
 723 002c AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
1016:../drivers/fsl_uart.c ****         /* If handle->rxDataSize is not 0, first save data to handle->rxData. */
1017:../drivers/fsl_uart.c ****         while ((count) && (handle->rxDataSize))
1018:../drivers/fsl_uart.c ****         {
1019:../drivers/fsl_uart.c ****             tempCount = MIN(handle->rxDataSize, count);
1020:../drivers/fsl_uart.c **** 
1021:../drivers/fsl_uart.c ****             /* Using non block API to read the data from the registers. */
1022:../drivers/fsl_uart.c ****             UART_ReadNonBlocking(base, handle->rxData, tempCount);
1023:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
1024:../drivers/fsl_uart.c ****             handle->rxDataSize -= tempCount;
1025:../drivers/fsl_uart.c ****             count -= tempCount;
1026:../drivers/fsl_uart.c **** 
1027:../drivers/fsl_uart.c ****             /* If all the data required for upper layer is ready, trigger callback. */
1028:../drivers/fsl_uart.c ****             if (!handle->rxDataSize)
1029:../drivers/fsl_uart.c ****             {
1030:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxIdle;
 724              		.loc 1 1030 0
 725 002e 0227     		movs	r7, #2
1015:../drivers/fsl_uart.c ****         /* If handle->rxDataSize is not 0, first save data to handle->rxData. */
 726              		.loc 1 1015 0
 727 0030 DEB2     		uxtb	r6, r3
 728              	.LVL81:
 729              	.L76:
1017:../drivers/fsl_uart.c ****         {
 730              		.loc 1 1017 0
 731 0032 1EB1     		cbz	r6, .L172
1017:../drivers/fsl_uart.c ****         {
 732              		.loc 1 1017 0 is_stmt 0 discriminator 1
 733 0034 2369     		ldr	r3, [r4, #16]
 734 0036 002B     		cmp	r3, #0
 735 0038 40F0B880 		bne	.L85
 736              	.L172:
1031:../drivers/fsl_uart.c **** 
1032:../drivers/fsl_uart.c ****                 /* Disable RX interrupt/overrun interrupt/fram error/idle line detected interrupt *
1033:../drivers/fsl_uart.c ****                 UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunIn
1034:../drivers/fsl_uart.c ****                                                  kUART_FramingErrorInterruptEnable);
1035:../drivers/fsl_uart.c **** 
1036:../drivers/fsl_uart.c ****                 /* Disable parity error interrupt when parity mode is enable*/
1037:../drivers/fsl_uart.c ****                 if (UART_C1_PE_MASK & base->C1)
1038:../drivers/fsl_uart.c ****                 {
1039:../drivers/fsl_uart.c ****                     UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
1040:../drivers/fsl_uart.c ****                 }
1041:../drivers/fsl_uart.c **** 
1042:../drivers/fsl_uart.c ****                 if (handle->callback)
1043:../drivers/fsl_uart.c ****                 {
1044:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_RxIdle, handle->userData);
1045:../drivers/fsl_uart.c ****                 }
1046:../drivers/fsl_uart.c ****             }
1047:../drivers/fsl_uart.c ****         }
1048:../drivers/fsl_uart.c **** #endif
1049:../drivers/fsl_uart.c ****         /* To clear IDLE, read UART status S1 with IDLE set and then read D.*/
1050:../drivers/fsl_uart.c ****         while (UART_S1_IDLE_MASK & base->S1)
 737              		.loc 1 1050 0 is_stmt 1
 738 003c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 739 003e DB06     		lsls	r3, r3, #27
 740 0040 00F1EB80 		bmi	.L86
1051:../drivers/fsl_uart.c ****         {
1052:../drivers/fsl_uart.c ****             (void)base->D;
1053:../drivers/fsl_uart.c ****         }
1054:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1055:../drivers/fsl_uart.c ****         /* Flush FIFO date, otherwise FIFO pointer will be in unknown state. */
1056:../drivers/fsl_uart.c ****         base->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
 741              		.loc 1 1056 0
 742 0044 6B7C     		ldrb	r3, [r5, #17]	@ zero_extendqisi2
 743 0046 43F04003 		orr	r3, r3, #64
 744 004a 6B74     		strb	r3, [r5, #17]
1057:../drivers/fsl_uart.c **** #endif
1058:../drivers/fsl_uart.c ****         /* If rxDataSize is 0, disable idle line interrupt.*/
1059:../drivers/fsl_uart.c ****         if (!(handle->rxDataSize))
 745              		.loc 1 1059 0
 746 004c 2369     		ldr	r3, [r4, #16]
 747 004e 23B9     		cbnz	r3, .L87
1060:../drivers/fsl_uart.c ****         {
1061:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_IdleLineInterruptEnable);
 748              		.loc 1 1061 0
 749 0050 4FF48051 		mov	r1, #4096
 750 0054 2846     		mov	r0, r5
 751 0056 FFF7FEFF 		bl	UART_DisableInterrupts
 752              	.LVL82:
 753              	.L87:
1062:../drivers/fsl_uart.c ****         }
1063:../drivers/fsl_uart.c ****         /* If callback is not NULL and rxDataSize is not 0. */
1064:../drivers/fsl_uart.c ****         if ((handle->callback) && (handle->rxDataSize))
 754              		.loc 1 1064 0
 755 005a 666A     		ldr	r6, [r4, #36]
 756              	.LVL83:
 757 005c 3EB1     		cbz	r6, .L74
 758              		.loc 1 1064 0 is_stmt 0 discriminator 1
 759 005e 2369     		ldr	r3, [r4, #16]
 760 0060 2BB1     		cbz	r3, .L74
1065:../drivers/fsl_uart.c ****         {
1066:../drivers/fsl_uart.c ****             handle->callback(base, handle, kStatus_UART_IdleLineDetected, handle->userData);
 761              		.loc 1 1066 0 is_stmt 1
 762 0062 A36A     		ldr	r3, [r4, #40]
 763 0064 40F2F632 		movw	r2, #1014
 764 0068 2146     		mov	r1, r4
 765 006a 2846     		mov	r0, r5
 766 006c B047     		blx	r6
 767              	.LVL84:
 768              	.L74:
1067:../drivers/fsl_uart.c ****         }
1068:../drivers/fsl_uart.c ****     }
1069:../drivers/fsl_uart.c ****     /* Receive data register full */
1070:../drivers/fsl_uart.c ****     if ((UART_S1_RDRF_MASK & base->S1) && (UART_C2_RIE_MASK & base->C2))
 769              		.loc 1 1070 0
 770 006e 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 771 0070 9F06     		lsls	r7, r3, #26
 772 0072 14D5     		bpl	.L89
 773              		.loc 1 1070 0 is_stmt 0 discriminator 1
 774 0074 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 775 0076 9E06     		lsls	r6, r3, #26
 776 0078 11D5     		bpl	.L89
1071:../drivers/fsl_uart.c ****     {
1072:../drivers/fsl_uart.c **** /* Get the size that can be stored into buffer for this interrupt. */
1073:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1074:../drivers/fsl_uart.c ****         count = base->RCFIFO;
 777              		.loc 1 1074 0 is_stmt 1
 778 007a AE7D     		ldrb	r6, [r5, #22]	@ zero_extendqisi2
1075:../drivers/fsl_uart.c **** #else
1076:../drivers/fsl_uart.c ****         count = 1;
1077:../drivers/fsl_uart.c **** #endif
1078:../drivers/fsl_uart.c **** 
1079:../drivers/fsl_uart.c ****         /* If handle->rxDataSize is not 0, first save data to handle->rxData. */
1080:../drivers/fsl_uart.c ****         while ((count) && (handle->rxDataSize))
1081:../drivers/fsl_uart.c ****         {
1082:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1083:../drivers/fsl_uart.c ****             tempCount = MIN(handle->rxDataSize, count);
1084:../drivers/fsl_uart.c **** #else
1085:../drivers/fsl_uart.c ****             tempCount = 1;
1086:../drivers/fsl_uart.c **** #endif
1087:../drivers/fsl_uart.c **** 
1088:../drivers/fsl_uart.c ****             /* Using non block API to read the data from the registers. */
1089:../drivers/fsl_uart.c ****             UART_ReadNonBlocking(base, handle->rxData, tempCount);
1090:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
1091:../drivers/fsl_uart.c ****             handle->rxDataSize -= tempCount;
1092:../drivers/fsl_uart.c ****             count -= tempCount;
1093:../drivers/fsl_uart.c **** 
1094:../drivers/fsl_uart.c ****             /* If all the data required for upper layer is ready, trigger callback. */
1095:../drivers/fsl_uart.c ****             if (!handle->rxDataSize)
1096:../drivers/fsl_uart.c ****             {
1097:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxIdle;
 779              		.loc 1 1097 0
 780 007c 0227     		movs	r7, #2
1074:../drivers/fsl_uart.c **** #else
 781              		.loc 1 1074 0
 782 007e F6B2     		uxtb	r6, r6
 783              	.LVL85:
 784              	.L91:
1080:../drivers/fsl_uart.c ****         {
 785              		.loc 1 1080 0
 786 0080 1EB1     		cbz	r6, .L98
1080:../drivers/fsl_uart.c ****         {
 787              		.loc 1 1080 0 is_stmt 0 discriminator 1
 788 0082 2369     		ldr	r3, [r4, #16]
 789 0084 002B     		cmp	r3, #0
 790 0086 40F0CA80 		bne	.L99
 791              	.L98:
1098:../drivers/fsl_uart.c **** 
1099:../drivers/fsl_uart.c ****                 if (handle->callback)
1100:../drivers/fsl_uart.c ****                 {
1101:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_RxIdle, handle->userData);
1102:../drivers/fsl_uart.c ****                 }
1103:../drivers/fsl_uart.c ****             }
1104:../drivers/fsl_uart.c ****         }
1105:../drivers/fsl_uart.c **** 
1106:../drivers/fsl_uart.c ****         /* If use RX ring buffer, receive data to ring buffer. */
1107:../drivers/fsl_uart.c ****         if (handle->rxRingBuffer)
 792              		.loc 1 1107 0 is_stmt 1
 793 008a A369     		ldr	r3, [r4, #24]
 794 008c 002B     		cmp	r3, #0
 795 008e 00F02581 		beq	.L192
1108:../drivers/fsl_uart.c ****         {
1109:../drivers/fsl_uart.c ****             while (count--)
1110:../drivers/fsl_uart.c ****             {
1111:../drivers/fsl_uart.c ****                 /* If RX ring buffer is full, trigger callback to notify over run. */
1112:../drivers/fsl_uart.c ****                 if (UART_TransferIsRxRingBufferFull(handle))
1113:../drivers/fsl_uart.c ****                 {
1114:../drivers/fsl_uart.c ****                     if (handle->callback)
1115:../drivers/fsl_uart.c ****                     {
1116:../drivers/fsl_uart.c ****                         handle->callback(base, handle, kStatus_UART_RxRingBufferOverrun, handle->us
1117:../drivers/fsl_uart.c ****                     }
1118:../drivers/fsl_uart.c ****                 }
1119:../drivers/fsl_uart.c **** 
1120:../drivers/fsl_uart.c ****                 /* If ring buffer is still full after callback function, the oldest data is overrid
1121:../drivers/fsl_uart.c ****                 if (UART_TransferIsRxRingBufferFull(handle))
1122:../drivers/fsl_uart.c ****                 {
1123:../drivers/fsl_uart.c ****                     /* Increase handle->rxRingBufferTail to make room for new data. */
1124:../drivers/fsl_uart.c ****                     if (handle->rxRingBufferTail + 1U == handle->rxRingBufferSize)
1125:../drivers/fsl_uart.c ****                     {
1126:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail = 0U;
 796              		.loc 1 1126 0
 797 0092 0027     		movs	r7, #0
 798              	.L100:
1109:../drivers/fsl_uart.c ****             {
 799              		.loc 1 1109 0
 800 0094 013E     		subs	r6, r6, #1
 801              	.LVL86:
 802 0096 F6B2     		uxtb	r6, r6
 803              	.LVL87:
 804 0098 FF2E     		cmp	r6, #255
 805 009a 40F0EB80 		bne	.L107
 806              	.LVL88:
 807              	.L89:
1127:../drivers/fsl_uart.c ****                     }
1128:../drivers/fsl_uart.c ****                     else
1129:../drivers/fsl_uart.c ****                     {
1130:../drivers/fsl_uart.c ****                         handle->rxRingBufferTail++;
1131:../drivers/fsl_uart.c ****                     }
1132:../drivers/fsl_uart.c ****                 }
1133:../drivers/fsl_uart.c **** 
1134:../drivers/fsl_uart.c ****                 /* Read data. */
1135:../drivers/fsl_uart.c ****                 handle->rxRingBuffer[handle->rxRingBufferHead] = base->D;
1136:../drivers/fsl_uart.c **** 
1137:../drivers/fsl_uart.c ****                 /* Increase handle->rxRingBufferHead. */
1138:../drivers/fsl_uart.c ****                 if (handle->rxRingBufferHead + 1U == handle->rxRingBufferSize)
1139:../drivers/fsl_uart.c ****                 {
1140:../drivers/fsl_uart.c ****                     handle->rxRingBufferHead = 0U;
1141:../drivers/fsl_uart.c ****                 }
1142:../drivers/fsl_uart.c ****                 else
1143:../drivers/fsl_uart.c ****                 {
1144:../drivers/fsl_uart.c ****                     handle->rxRingBufferHead++;
1145:../drivers/fsl_uart.c ****                 }
1146:../drivers/fsl_uart.c ****             }
1147:../drivers/fsl_uart.c ****         }
1148:../drivers/fsl_uart.c **** 
1149:../drivers/fsl_uart.c ****         else if (!handle->rxDataSize)
1150:../drivers/fsl_uart.c ****         {
1151:../drivers/fsl_uart.c ****             /* Disable RX interrupt/overrun interrupt/fram error/idle line detected interrupt */
1152:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterr
1153:../drivers/fsl_uart.c ****                                              kUART_FramingErrorInterruptEnable);
1154:../drivers/fsl_uart.c **** 
1155:../drivers/fsl_uart.c ****             /* Disable parity error interrupt when parity mode is enable*/
1156:../drivers/fsl_uart.c ****             if (UART_C1_PE_MASK & base->C1)
1157:../drivers/fsl_uart.c ****             {
1158:../drivers/fsl_uart.c ****                 UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
1159:../drivers/fsl_uart.c ****             }
1160:../drivers/fsl_uart.c ****         }
1161:../drivers/fsl_uart.c ****         else
1162:../drivers/fsl_uart.c ****         {
1163:../drivers/fsl_uart.c ****         }
1164:../drivers/fsl_uart.c ****     }
1165:../drivers/fsl_uart.c **** 
1166:../drivers/fsl_uart.c ****     /* If framing error or parity error happened, stop the RX interrupt when ues no ring buffer */
1167:../drivers/fsl_uart.c ****     if (((handle->rxState == kUART_RxFramingError) || (handle->rxState == kUART_RxParityError)) &&
 808              		.loc 1 1167 0
 809 009e 94F82D30 		ldrb	r3, [r4, #45]	@ zero_extendqisi2
 810 00a2 042B     		cmp	r3, #4
 811 00a4 03D0     		beq	.L108
 812              		.loc 1 1167 0 is_stmt 0 discriminator 2
 813 00a6 94F82D30 		ldrb	r3, [r4, #45]	@ zero_extendqisi2
 814 00aa 052B     		cmp	r3, #5
 815 00ac 0DD1     		bne	.L109
 816              	.L108:
 817              		.loc 1 1167 0 discriminator 3
 818 00ae A369     		ldr	r3, [r4, #24]
 819 00b0 5BB9     		cbnz	r3, .L109
1168:../drivers/fsl_uart.c ****         (!handle->rxRingBuffer))
1169:../drivers/fsl_uart.c ****     {
1170:../drivers/fsl_uart.c ****         UART_DisableInterrupts(base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptE
 820              		.loc 1 1170 0 is_stmt 1
 821 00b2 4FF42321 		mov	r1, #667648
 822 00b6 2846     		mov	r0, r5
 823 00b8 FFF7FEFF 		bl	UART_DisableInterrupts
 824              	.LVL89:
1171:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable | kUART_IdleLineInterrup
1172:../drivers/fsl_uart.c **** 
1173:../drivers/fsl_uart.c ****         /* Disable parity error interrupt when parity mode is enable*/
1174:../drivers/fsl_uart.c ****         if (UART_C1_PE_MASK & base->C1)
 825              		.loc 1 1174 0
 826 00bc AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 827 00be 9907     		lsls	r1, r3, #30
 828 00c0 03D5     		bpl	.L109
 829              	.LVL90:
1175:../drivers/fsl_uart.c ****         {
1176:../drivers/fsl_uart.c ****             UART_DisableInterrupts(base, kUART_ParityErrorInterruptEnable);
 830              		.loc 1 1176 0
 831 00c2 4FF48031 		mov	r1, #65536
 832 00c6 FFF7FEFF 		bl	UART_DisableInterrupts
 833              	.LVL91:
 834              	.L109:
1177:../drivers/fsl_uart.c ****         }
1178:../drivers/fsl_uart.c ****     }
1179:../drivers/fsl_uart.c **** 
1180:../drivers/fsl_uart.c ****     /* Send data register empty and the interrupt is enabled. */
1181:../drivers/fsl_uart.c ****     if ((base->S1 & UART_S1_TDRE_MASK) && (base->C2 & UART_C2_TIE_MASK))
 835              		.loc 1 1181 0
 836 00ca 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 837 00cc 1A06     		lsls	r2, r3, #24
 838 00ce 28D5     		bpl	.L60
 839              		.loc 1 1181 0 is_stmt 0 discriminator 1
 840 00d0 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 841 00d2 1B06     		lsls	r3, r3, #24
 842 00d4 25D5     		bpl	.L60
1182:../drivers/fsl_uart.c ****     {
1183:../drivers/fsl_uart.c **** /* Get the bytes that available at this moment. */
1184:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1185:../drivers/fsl_uart.c ****         count = FSL_FEATURE_UART_FIFO_SIZEn(base) - base->TCFIFO;
 843              		.loc 1 1185 0 is_stmt 1
 844 00d6 A34B     		ldr	r3, .L193
 845 00d8 9D42     		cmp	r5, r3
 846 00da 00F01281 		beq	.L125
 847              		.loc 1 1185 0 is_stmt 0 discriminator 1
 848 00de 03F58053 		add	r3, r3, #4096
 849 00e2 9D42     		cmp	r5, r3
 850 00e4 00F00D81 		beq	.L125
 851              		.loc 1 1185 0 discriminator 3
 852 00e8 03F58053 		add	r3, r3, #4096
 853 00ec 9D42     		cmp	r5, r3
 854 00ee 00F00A81 		beq	.L128
 855              		.loc 1 1185 0 discriminator 5
 856 00f2 03F58053 		add	r3, r3, #4096
 857 00f6 9D42     		cmp	r5, r3
 858 00f8 00F00581 		beq	.L128
 859              		.loc 1 1185 0 discriminator 7
 860 00fc 03F5FA23 		add	r3, r3, #512000
 861 0100 9D42     		cmp	r5, r3
 862 0102 00F00081 		beq	.L128
 863              		.loc 1 1185 0 discriminator 9
 864 0106 03F58053 		add	r3, r3, #4096
 865 010a 9D42     		cmp	r5, r3
 866 010c 14BF     		ite	ne
 867 010e FF23     		movne	r3, #255
 868 0110 0123     		moveq	r3, #1
 869              	.L113:
 870              		.loc 1 1185 0 discriminator 24
 871 0112 2E7D     		ldrb	r6, [r5, #20]	@ zero_extendqisi2
 872 0114 9B1B     		subs	r3, r3, r6
 873 0116 DEB2     		uxtb	r6, r3
 874              	.LVL92:
 875              	.L114:
1186:../drivers/fsl_uart.c **** #else
1187:../drivers/fsl_uart.c ****         count = 1;
1188:../drivers/fsl_uart.c **** #endif
1189:../drivers/fsl_uart.c **** 
1190:../drivers/fsl_uart.c ****         while ((count) && (handle->txDataSize))
 876              		.loc 1 1190 0 is_stmt 1
 877 0118 1EB1     		cbz	r6, .L60
 878              		.loc 1 1190 0 is_stmt 0 discriminator 1
 879 011a 6368     		ldr	r3, [r4, #4]
 880 011c 002B     		cmp	r3, #0
 881 011e 40F0F480 		bne	.L121
 882              	.LVL93:
 883              	.L60:
1191:../drivers/fsl_uart.c ****         {
1192:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
1193:../drivers/fsl_uart.c ****             tempCount = MIN(handle->txDataSize, count);
1194:../drivers/fsl_uart.c **** #else
1195:../drivers/fsl_uart.c ****             tempCount = 1;
1196:../drivers/fsl_uart.c **** #endif
1197:../drivers/fsl_uart.c **** 
1198:../drivers/fsl_uart.c ****             /* Using non block API to write the data to the registers. */
1199:../drivers/fsl_uart.c ****             UART_WriteNonBlocking(base, handle->txData, tempCount);
1200:../drivers/fsl_uart.c ****             handle->txData += tempCount;
1201:../drivers/fsl_uart.c ****             handle->txDataSize -= tempCount;
1202:../drivers/fsl_uart.c ****             count -= tempCount;
1203:../drivers/fsl_uart.c **** 
1204:../drivers/fsl_uart.c ****             /* If all the data are written to data register, TX finished. */
1205:../drivers/fsl_uart.c ****             if (!handle->txDataSize)
1206:../drivers/fsl_uart.c ****             {
1207:../drivers/fsl_uart.c ****                 handle->txState = kUART_TxIdle;
1208:../drivers/fsl_uart.c **** 
1209:../drivers/fsl_uart.c ****                 /* Disable TX register empty interrupt. */
1210:../drivers/fsl_uart.c ****                 base->C2 = (base->C2 & ~UART_C2_TIE_MASK);
1211:../drivers/fsl_uart.c **** 
1212:../drivers/fsl_uart.c ****                 /* Trigger callback. */
1213:../drivers/fsl_uart.c ****                 if (handle->callback)
1214:../drivers/fsl_uart.c ****                 {
1215:../drivers/fsl_uart.c ****                     handle->callback(base, handle, kStatus_UART_TxIdle, handle->userData);
1216:../drivers/fsl_uart.c ****                 }
1217:../drivers/fsl_uart.c ****             }
1218:../drivers/fsl_uart.c ****         }
1219:../drivers/fsl_uart.c ****     }
1220:../drivers/fsl_uart.c **** }
 884              		.loc 1 1220 0 is_stmt 1
 885 0122 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 886              	.LVL94:
 887              	.L63:
 953:../drivers/fsl_uart.c ****         }
 888              		.loc 1 953 0
 889 0126 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 890              	.L61:
 951:../drivers/fsl_uart.c ****         {
 891              		.loc 1 951 0
 892 0128 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 893 012a 13F02003 		ands	r3, r3, #32
 894 012e FAD1     		bne	.L63
 957:../drivers/fsl_uart.c **** #endif
 895              		.loc 1 957 0
 896 0130 6A7C     		ldrb	r2, [r5, #17]	@ zero_extendqisi2
 897 0132 42F04002 		orr	r2, r2, #64
 898 0136 6A74     		strb	r2, [r5, #17]
 963:../drivers/fsl_uart.c ****         {
 899              		.loc 1 963 0
 900 0138 666A     		ldr	r6, [r4, #36]
 960:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 901              		.loc 1 960 0
 902 013a 0422     		movs	r2, #4
 903 013c 84F82D20 		strb	r2, [r4, #45]
 961:../drivers/fsl_uart.c ****         /* Trigger callback. */
 904              		.loc 1 961 0
 905 0140 2361     		str	r3, [r4, #16]
 963:../drivers/fsl_uart.c ****         {
 906              		.loc 1 963 0
 907 0142 002E     		cmp	r6, #0
 908 0144 3FF464AF 		beq	.L62
 965:../drivers/fsl_uart.c ****         }
 909              		.loc 1 965 0
 910 0148 A36A     		ldr	r3, [r4, #40]
 911 014a 40F2F332 		movw	r2, #1011
 912 014e 2146     		mov	r1, r4
 913              	.LVL95:
 914 0150 2846     		mov	r0, r5
 915              	.LVL96:
 916 0152 B047     		blx	r6
 917              	.LVL97:
 918 0154 5CE7     		b	.L62
 919              	.L67:
 975:../drivers/fsl_uart.c ****         }
 920              		.loc 1 975 0
 921 0156 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 922              	.L65:
 973:../drivers/fsl_uart.c ****         {
 923              		.loc 1 973 0
 924 0158 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 925 015a 13F02003 		ands	r3, r3, #32
 926 015e FAD1     		bne	.L67
 979:../drivers/fsl_uart.c **** #endif
 927              		.loc 1 979 0
 928 0160 6A7C     		ldrb	r2, [r5, #17]	@ zero_extendqisi2
 929 0162 42F04002 		orr	r2, r2, #64
 930 0166 6A74     		strb	r2, [r5, #17]
 985:../drivers/fsl_uart.c ****         {
 931              		.loc 1 985 0
 932 0168 666A     		ldr	r6, [r4, #36]
 982:../drivers/fsl_uart.c ****         handle->rxDataSize = 0U;
 933              		.loc 1 982 0
 934 016a 0522     		movs	r2, #5
 935 016c 84F82D20 		strb	r2, [r4, #45]
 983:../drivers/fsl_uart.c ****         /* Trigger callback. */
 936              		.loc 1 983 0
 937 0170 2361     		str	r3, [r4, #16]
 985:../drivers/fsl_uart.c ****         {
 938              		.loc 1 985 0
 939 0172 002E     		cmp	r6, #0
 940 0174 3FF450AF 		beq	.L66
 987:../drivers/fsl_uart.c ****         }
 941              		.loc 1 987 0
 942 0178 A36A     		ldr	r3, [r4, #40]
 943 017a 4FF47D72 		mov	r2, #1012
 944 017e 2146     		mov	r1, r4
 945 0180 2846     		mov	r0, r5
 946 0182 B047     		blx	r6
 947              	.LVL98:
 948 0184 48E7     		b	.L66
 949              	.L71:
 997:../drivers/fsl_uart.c ****         }
 950              		.loc 1 997 0
 951 0186 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 952              	.L69:
 995:../drivers/fsl_uart.c ****         {
 953              		.loc 1 995 0
 954 0188 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 955 018a 9E06     		lsls	r6, r3, #26
 956 018c FBD4     		bmi	.L71
1001:../drivers/fsl_uart.c **** #endif
 957              		.loc 1 1001 0
 958 018e 6B7C     		ldrb	r3, [r5, #17]	@ zero_extendqisi2
 959 0190 43F04003 		orr	r3, r3, #64
 960 0194 6B74     		strb	r3, [r5, #17]
1004:../drivers/fsl_uart.c ****         {
 961              		.loc 1 1004 0
 962 0196 666A     		ldr	r6, [r4, #36]
 963 0198 002E     		cmp	r6, #0
 964 019a 3FF441AF 		beq	.L70
1006:../drivers/fsl_uart.c ****         }
 965              		.loc 1 1006 0
 966 019e A36A     		ldr	r3, [r4, #40]
 967 01a0 40F2F132 		movw	r2, #1009
 968 01a4 2146     		mov	r1, r4
 969 01a6 2846     		mov	r0, r5
 970 01a8 B047     		blx	r6
 971              	.LVL99:
 972 01aa 39E7     		b	.L70
 973              	.LVL100:
 974              	.L85:
1019:../drivers/fsl_uart.c **** 
 975              		.loc 1 1019 0
 976 01ac 2369     		ldr	r3, [r4, #16]
 977 01ae B342     		cmp	r3, r6
 978 01b0 38BF     		it	cc
 979 01b2 2369     		ldrcc	r3, [r4, #16]
1022:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
 980              		.loc 1 1022 0
 981 01b4 E168     		ldr	r1, [r4, #12]
1019:../drivers/fsl_uart.c **** 
 982              		.loc 1 1019 0
 983 01b6 34BF     		ite	cc
 984 01b8 DBB2     		uxtbcc	r3, r3
 985 01ba 3346     		movcs	r3, r6
 986              	.LVL101:
1022:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
 987              		.loc 1 1022 0
 988 01bc 0A46     		mov	r2, r1
 989              	.LVL102:
 990              	.L78:
 991              	.LBB50:
 992              	.LBB51:
 643:../drivers/fsl_uart.c ****     {
 993              		.loc 1 643 0
 994 01be 501A     		subs	r0, r2, r1
 995 01c0 8342     		cmp	r3, r0
 996 01c2 26D8     		bhi	.L79
 997              	.LVL103:
 998              	.LBE51:
 999              	.LBE50:
1023:../drivers/fsl_uart.c ****             handle->rxDataSize -= tempCount;
 1000              		.loc 1 1023 0 discriminator 4
 1001 01c4 E268     		ldr	r2, [r4, #12]
 1002 01c6 1A44     		add	r2, r2, r3
 1003 01c8 E260     		str	r2, [r4, #12]
1024:../drivers/fsl_uart.c ****             count -= tempCount;
 1004              		.loc 1 1024 0 discriminator 4
 1005 01ca 2269     		ldr	r2, [r4, #16]
 1006 01cc D21A     		subs	r2, r2, r3
 1007 01ce 2261     		str	r2, [r4, #16]
1025:../drivers/fsl_uart.c **** 
 1008              		.loc 1 1025 0 discriminator 4
 1009 01d0 F31A     		subs	r3, r6, r3
 1010              	.LVL104:
 1011 01d2 DEB2     		uxtb	r6, r3
 1012              	.LVL105:
1028:../drivers/fsl_uart.c ****             {
 1013              		.loc 1 1028 0 discriminator 4
 1014 01d4 2369     		ldr	r3, [r4, #16]
 1015 01d6 002B     		cmp	r3, #0
 1016 01d8 7FF42BAF 		bne	.L76
1030:../drivers/fsl_uart.c **** 
 1017              		.loc 1 1030 0
 1018 01dc 84F82D70 		strb	r7, [r4, #45]
1033:../drivers/fsl_uart.c ****                                                  kUART_FramingErrorInterruptEnable);
 1019              		.loc 1 1033 0
 1020 01e0 4FF42221 		mov	r1, #663552
 1021 01e4 2846     		mov	r0, r5
 1022 01e6 FFF7FEFF 		bl	UART_DisableInterrupts
 1023              	.LVL106:
1037:../drivers/fsl_uart.c ****                 {
 1024              		.loc 1 1037 0
 1025 01ea AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1026 01ec 9A07     		lsls	r2, r3, #30
 1027 01ee 03D5     		bpl	.L82
 1028              	.LVL107:
1039:../drivers/fsl_uart.c ****                 }
 1029              		.loc 1 1039 0
 1030 01f0 4FF48031 		mov	r1, #65536
 1031 01f4 FFF7FEFF 		bl	UART_DisableInterrupts
 1032              	.LVL108:
 1033              	.L82:
1042:../drivers/fsl_uart.c ****                 {
 1034              		.loc 1 1042 0
 1035 01f8 D4F82480 		ldr	r8, [r4, #36]
 1036 01fc B8F1000F 		cmp	r8, #0
 1037 0200 3FF417AF 		beq	.L76
1044:../drivers/fsl_uart.c ****                 }
 1038              		.loc 1 1044 0
 1039 0204 A36A     		ldr	r3, [r4, #40]
 1040 0206 40F2EB32 		movw	r2, #1003
 1041 020a 2146     		mov	r1, r4
 1042 020c 2846     		mov	r0, r5
 1043              	.LVL109:
 1044 020e C047     		blx	r8
 1045              	.LVL110:
 1046 0210 0FE7     		b	.L76
 1047              	.LVL111:
 1048              	.L79:
 1049              	.LBB53:
 1050              	.LBB52:
 645:../drivers/fsl_uart.c ****     }
 1051              		.loc 1 645 0
 1052 0212 E879     		ldrb	r0, [r5, #7]	@ zero_extendqisi2
 1053 0214 02F8010B 		strb	r0, [r2], #1
 1054 0218 D1E7     		b	.L78
 1055              	.LVL112:
 1056              	.L86:
 1057              	.LBE52:
 1058              	.LBE53:
1052:../drivers/fsl_uart.c ****         }
 1059              		.loc 1 1052 0
 1060 021a EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 1061 021c 0EE7     		b	.L172
 1062              	.L99:
1083:../drivers/fsl_uart.c **** #else
 1063              		.loc 1 1083 0
 1064 021e 2369     		ldr	r3, [r4, #16]
 1065 0220 B342     		cmp	r3, r6
 1066 0222 38BF     		it	cc
 1067 0224 2369     		ldrcc	r3, [r4, #16]
1089:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
 1068              		.loc 1 1089 0
 1069 0226 E168     		ldr	r1, [r4, #12]
1083:../drivers/fsl_uart.c **** #else
 1070              		.loc 1 1083 0
 1071 0228 34BF     		ite	cc
 1072 022a DBB2     		uxtbcc	r3, r3
 1073 022c 3346     		movcs	r3, r6
 1074              	.LVL113:
1089:../drivers/fsl_uart.c ****             handle->rxData += tempCount;
 1075              		.loc 1 1089 0
 1076 022e 0A46     		mov	r2, r1
 1077              	.LVL114:
 1078              	.L93:
 1079              	.LBB54:
 1080              	.LBB55:
 643:../drivers/fsl_uart.c ****     {
 1081              		.loc 1 643 0
 1082 0230 501A     		subs	r0, r2, r1
 1083 0232 8342     		cmp	r3, r0
 1084 0234 1AD8     		bhi	.L94
 1085              	.LVL115:
 1086              	.LBE55:
 1087              	.LBE54:
1090:../drivers/fsl_uart.c ****             handle->rxDataSize -= tempCount;
 1088              		.loc 1 1090 0 discriminator 4
 1089 0236 E268     		ldr	r2, [r4, #12]
 1090 0238 1A44     		add	r2, r2, r3
 1091 023a E260     		str	r2, [r4, #12]
1091:../drivers/fsl_uart.c ****             count -= tempCount;
 1092              		.loc 1 1091 0 discriminator 4
 1093 023c 2269     		ldr	r2, [r4, #16]
 1094 023e D21A     		subs	r2, r2, r3
 1095 0240 2261     		str	r2, [r4, #16]
1092:../drivers/fsl_uart.c **** 
 1096              		.loc 1 1092 0 discriminator 4
 1097 0242 F61A     		subs	r6, r6, r3
 1098              	.LVL116:
1095:../drivers/fsl_uart.c ****             {
 1099              		.loc 1 1095 0 discriminator 4
 1100 0244 2369     		ldr	r3, [r4, #16]
 1101              	.LVL117:
1092:../drivers/fsl_uart.c **** 
 1102              		.loc 1 1092 0 discriminator 4
 1103 0246 F6B2     		uxtb	r6, r6
 1104              	.LVL118:
1095:../drivers/fsl_uart.c ****             {
 1105              		.loc 1 1095 0 discriminator 4
 1106 0248 002B     		cmp	r3, #0
 1107 024a 7FF419AF 		bne	.L91
1099:../drivers/fsl_uart.c ****                 {
 1108              		.loc 1 1099 0
 1109 024e D4F82480 		ldr	r8, [r4, #36]
1097:../drivers/fsl_uart.c **** 
 1110              		.loc 1 1097 0
 1111 0252 84F82D70 		strb	r7, [r4, #45]
1099:../drivers/fsl_uart.c ****                 {
 1112              		.loc 1 1099 0
 1113 0256 B8F1000F 		cmp	r8, #0
 1114 025a 3FF411AF 		beq	.L91
1101:../drivers/fsl_uart.c ****                 }
 1115              		.loc 1 1101 0
 1116 025e A36A     		ldr	r3, [r4, #40]
 1117 0260 40F2EB32 		movw	r2, #1003
 1118 0264 2146     		mov	r1, r4
 1119 0266 2846     		mov	r0, r5
 1120 0268 C047     		blx	r8
 1121              	.LVL119:
 1122 026a 09E7     		b	.L91
 1123              	.LVL120:
 1124              	.L94:
 1125              	.LBB57:
 1126              	.LBB56:
 645:../drivers/fsl_uart.c ****     }
 1127              		.loc 1 645 0
 1128 026c E879     		ldrb	r0, [r5, #7]	@ zero_extendqisi2
 1129 026e 02F8010B 		strb	r0, [r2], #1
 1130 0272 DDE7     		b	.L93
 1131              	.LVL121:
 1132              	.L107:
 1133              	.LBE56:
 1134              	.LBE57:
 1135              	.LBB58:
 1136              	.LBB59:
 194:../drivers/fsl_uart.c ****     {
 1137              		.loc 1 194 0
 1138 0274 2046     		mov	r0, r4
 1139 0276 FFF7FEFF 		bl	UART_TransferGetRxRingBufferLength
 1140              	.LVL122:
 1141 027a E369     		ldr	r3, [r4, #28]
 1142 027c 013B     		subs	r3, r3, #1
 1143 027e 9842     		cmp	r0, r3
 1144 0280 0AD1     		bne	.L102
 1145              	.LVL123:
 1146              	.LBE59:
 1147              	.LBE58:
1114:../drivers/fsl_uart.c ****                     {
 1148              		.loc 1 1114 0
 1149 0282 D4F82480 		ldr	r8, [r4, #36]
 1150 0286 B8F1000F 		cmp	r8, #0
 1151 028a 05D0     		beq	.L102
1116:../drivers/fsl_uart.c ****                     }
 1152              		.loc 1 1116 0
 1153 028c A36A     		ldr	r3, [r4, #40]
 1154 028e 4FF47C72 		mov	r2, #1008
 1155 0292 2146     		mov	r1, r4
 1156 0294 2846     		mov	r0, r5
 1157 0296 C047     		blx	r8
 1158              	.LVL124:
 1159              	.L102:
 1160              	.LBB60:
 1161              	.LBB61:
 194:../drivers/fsl_uart.c ****     {
 1162              		.loc 1 194 0
 1163 0298 2046     		mov	r0, r4
 1164 029a FFF7FEFF 		bl	UART_TransferGetRxRingBufferLength
 1165              	.LVL125:
 1166 029e E269     		ldr	r2, [r4, #28]
 1167 02a0 531E     		subs	r3, r2, #1
 1168 02a2 9842     		cmp	r0, r3
 1169 02a4 09D1     		bne	.L103
 1170              	.LVL126:
 1171              	.LBE61:
 1172              	.LBE60:
1124:../drivers/fsl_uart.c ****                     {
 1173              		.loc 1 1124 0
 1174 02a6 638C     		ldrh	r3, [r4, #34]
 1175 02a8 0133     		adds	r3, r3, #1
 1176 02aa 9342     		cmp	r3, r2
1130:../drivers/fsl_uart.c ****                     }
 1177              		.loc 1 1130 0
 1178 02ac 17BF     		itett	ne
 1179 02ae 638C     		ldrhne	r3, [r4, #34]
1126:../drivers/fsl_uart.c ****                     }
 1180              		.loc 1 1126 0
 1181 02b0 6784     		strheq	r7, [r4, #34]	@ movhi
1130:../drivers/fsl_uart.c ****                     }
 1182              		.loc 1 1130 0
 1183 02b2 0133     		addne	r3, r3, #1
 1184 02b4 9BB2     		uxthne	r3, r3
 1185 02b6 18BF     		it	ne
 1186 02b8 6384     		strhne	r3, [r4, #34]	@ movhi
 1187              	.L103:
1135:../drivers/fsl_uart.c **** 
 1188              		.loc 1 1135 0
 1189 02ba 238C     		ldrh	r3, [r4, #32]
 1190 02bc A269     		ldr	r2, [r4, #24]
 1191 02be E979     		ldrb	r1, [r5, #7]	@ zero_extendqisi2
 1192 02c0 9BB2     		uxth	r3, r3
 1193 02c2 D154     		strb	r1, [r2, r3]
1138:../drivers/fsl_uart.c ****                 {
 1194              		.loc 1 1138 0
 1195 02c4 238C     		ldrh	r3, [r4, #32]
 1196 02c6 E269     		ldr	r2, [r4, #28]
 1197 02c8 0133     		adds	r3, r3, #1
 1198 02ca 9342     		cmp	r3, r2
1144:../drivers/fsl_uart.c ****                 }
 1199              		.loc 1 1144 0
 1200 02cc 17BF     		itett	ne
 1201 02ce 238C     		ldrhne	r3, [r4, #32]
1140:../drivers/fsl_uart.c ****                 }
 1202              		.loc 1 1140 0
 1203 02d0 2784     		strheq	r7, [r4, #32]	@ movhi
1144:../drivers/fsl_uart.c ****                 }
 1204              		.loc 1 1144 0
 1205 02d2 0133     		addne	r3, r3, #1
 1206 02d4 9BB2     		uxthne	r3, r3
 1207 02d6 18BF     		it	ne
 1208 02d8 2384     		strhne	r3, [r4, #32]	@ movhi
 1209 02da DBE6     		b	.L100
 1210              	.L192:
1149:../drivers/fsl_uart.c ****         {
 1211              		.loc 1 1149 0
 1212 02dc 2369     		ldr	r3, [r4, #16]
 1213 02de 002B     		cmp	r3, #0
 1214 02e0 7FF4DDAE 		bne	.L89
1152:../drivers/fsl_uart.c ****                                              kUART_FramingErrorInterruptEnable);
 1215              		.loc 1 1152 0
 1216 02e4 2846     		mov	r0, r5
 1217 02e6 4FF42221 		mov	r1, #663552
 1218 02ea FFF7FEFF 		bl	UART_DisableInterrupts
 1219              	.LVL127:
1156:../drivers/fsl_uart.c ****             {
 1220              		.loc 1 1156 0
 1221 02ee AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1222 02f0 9807     		lsls	r0, r3, #30
 1223 02f2 7FF5D4AE 		bpl	.L89
1158:../drivers/fsl_uart.c ****             }
 1224              		.loc 1 1158 0
 1225 02f6 4FF48031 		mov	r1, #65536
 1226 02fa 2846     		mov	r0, r5
 1227 02fc FFF7FEFF 		bl	UART_DisableInterrupts
 1228              	.LVL128:
 1229 0300 CDE6     		b	.L89
 1230              	.LVL129:
 1231              	.L125:
1185:../drivers/fsl_uart.c **** #else
 1232              		.loc 1 1185 0
 1233 0302 0823     		movs	r3, #8
 1234 0304 05E7     		b	.L113
 1235              	.L128:
 1236 0306 0123     		movs	r3, #1
 1237 0308 03E7     		b	.L113
 1238              	.LVL130:
 1239              	.L121:
1193:../drivers/fsl_uart.c **** #else
 1240              		.loc 1 1193 0
 1241 030a 6368     		ldr	r3, [r4, #4]
 1242 030c B342     		cmp	r3, r6
 1243 030e 38BF     		it	cc
 1244 0310 6368     		ldrcc	r3, [r4, #4]
1199:../drivers/fsl_uart.c ****             handle->txData += tempCount;
 1245              		.loc 1 1199 0
 1246 0312 2168     		ldr	r1, [r4]
1193:../drivers/fsl_uart.c **** #else
 1247              		.loc 1 1193 0
 1248 0314 34BF     		ite	cc
 1249 0316 DBB2     		uxtbcc	r3, r3
 1250 0318 3346     		movcs	r3, r6
 1251              	.LVL131:
1199:../drivers/fsl_uart.c ****             handle->txData += tempCount;
 1252              		.loc 1 1199 0
 1253 031a 0A46     		mov	r2, r1
 1254              	.LVL132:
 1255              	.L116:
 1256              	.LBB62:
 1257              	.LBB63:
 587:../drivers/fsl_uart.c ****     {
 1258              		.loc 1 587 0
 1259 031c 501A     		subs	r0, r2, r1
 1260 031e 8342     		cmp	r3, r0
 1261 0320 1CD8     		bhi	.L117
 1262              	.LVL133:
 1263              	.LBE63:
 1264              	.LBE62:
1200:../drivers/fsl_uart.c ****             handle->txDataSize -= tempCount;
 1265              		.loc 1 1200 0 discriminator 4
 1266 0322 2268     		ldr	r2, [r4]
 1267 0324 1A44     		add	r2, r2, r3
 1268 0326 2260     		str	r2, [r4]
1201:../drivers/fsl_uart.c ****             count -= tempCount;
 1269              		.loc 1 1201 0 discriminator 4
 1270 0328 6268     		ldr	r2, [r4, #4]
 1271 032a D21A     		subs	r2, r2, r3
 1272 032c 6260     		str	r2, [r4, #4]
1202:../drivers/fsl_uart.c **** 
 1273              		.loc 1 1202 0 discriminator 4
 1274 032e F61A     		subs	r6, r6, r3
 1275              	.LVL134:
1205:../drivers/fsl_uart.c ****             {
 1276              		.loc 1 1205 0 discriminator 4
 1277 0330 6368     		ldr	r3, [r4, #4]
 1278              	.LVL135:
1202:../drivers/fsl_uart.c **** 
 1279              		.loc 1 1202 0 discriminator 4
 1280 0332 F6B2     		uxtb	r6, r6
 1281              	.LVL136:
1205:../drivers/fsl_uart.c ****             {
 1282              		.loc 1 1205 0 discriminator 4
 1283 0334 002B     		cmp	r3, #0
 1284 0336 7FF4EFAE 		bne	.L114
1207:../drivers/fsl_uart.c **** 
 1285              		.loc 1 1207 0
 1286 033a 84F82C30 		strb	r3, [r4, #44]
1210:../drivers/fsl_uart.c **** 
 1287              		.loc 1 1210 0
 1288 033e EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 1289 0340 03F07F03 		and	r3, r3, #127
 1290 0344 EB70     		strb	r3, [r5, #3]
1213:../drivers/fsl_uart.c ****                 {
 1291              		.loc 1 1213 0
 1292 0346 676A     		ldr	r7, [r4, #36]
 1293 0348 002F     		cmp	r7, #0
 1294 034a 3FF4E5AE 		beq	.L114
1215:../drivers/fsl_uart.c ****                 }
 1295              		.loc 1 1215 0
 1296 034e A36A     		ldr	r3, [r4, #40]
 1297 0350 40F2EA32 		movw	r2, #1002
 1298 0354 2146     		mov	r1, r4
 1299 0356 2846     		mov	r0, r5
 1300 0358 B847     		blx	r7
 1301              	.LVL137:
 1302 035a DDE6     		b	.L114
 1303              	.LVL138:
 1304              	.L117:
 1305              	.LBB65:
 1306              	.LBB64:
 589:../drivers/fsl_uart.c ****     }
 1307              		.loc 1 589 0
 1308 035c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 1309 0360 E871     		strb	r0, [r5, #7]
 1310 0362 DBE7     		b	.L116
 1311              	.L194:
 1312              		.align	2
 1313              	.L193:
 1314 0364 00A00640 		.word	1074176000
 1315              	.LBE64:
 1316              	.LBE65:
 1317              		.cfi_endproc
 1318              	.LFE179:
 1320              		.section	.text.UART_GetEnabledInterrupts,"ax",%progbits
 1321              		.align	1
 1322              		.global	UART_GetEnabledInterrupts
 1323              		.syntax unified
 1324              		.thumb
 1325              		.thumb_func
 1326              		.fpu fpv4-sp-d16
 1328              	UART_GetEnabledInterrupts:
 1329              	.LFB163:
 486:../drivers/fsl_uart.c ****     uint32_t temp;
 1330              		.loc 1 486 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              		@ link register save eliminated.
 1335              	.LVL139:
 489:../drivers/fsl_uart.c **** 
 1336              		.loc 1 489 0
 1337 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1338 0002 C178     		ldrb	r1, [r0, #3]	@ zero_extendqisi2
 1339 0004 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 492:../drivers/fsl_uart.c **** #endif
 1340              		.loc 1 492 0
 1341 0006 407C     		ldrb	r0, [r0, #17]	@ zero_extendqisi2
 1342              	.LVL140:
 489:../drivers/fsl_uart.c **** 
 1343              		.loc 1 489 0
 1344 0008 1B04     		lsls	r3, r3, #16
 1345 000a 43EA0123 		orr	r3, r3, r1, lsl #8
 1346 000e 1343     		orrs	r3, r3, r2
 1347              	.LVL141:
 492:../drivers/fsl_uart.c **** #endif
 1348              		.loc 1 492 0
 1349 0010 43EA0060 		orr	r0, r3, r0, lsl #24
 1350              	.LVL142:
 496:../drivers/fsl_uart.c **** 
 1351              		.loc 1 496 0
 1352 0014 20F07840 		bic	r0, r0, #-134217728
 1353              	.LVL143:
 1354 0018 20F47000 		bic	r0, r0, #15728640
 1355 001c 20F47360 		bic	r0, r0, #3888
 1356 0020 20F00F00 		bic	r0, r0, #15
 1357 0024 7047     		bx	lr
 1358              		.cfi_endproc
 1359              	.LFE163:
 1361              		.section	.text.UART_GetStatusFlags,"ax",%progbits
 1362              		.align	1
 1363              		.global	UART_GetStatusFlags
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1367              		.fpu fpv4-sp-d16
 1369              	UART_GetStatusFlags:
 1370              	.LFB164:
 499:../drivers/fsl_uart.c ****     uint32_t status_flag;
 1371              		.loc 1 499 0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 1376              	.LVL144:
 502:../drivers/fsl_uart.c **** 
 1377              		.loc 1 502 0
 1378 0000 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 1379 0002 4179     		ldrb	r1, [r0, #5]	@ zero_extendqisi2
 1380              	.LVL145:
 505:../drivers/fsl_uart.c **** #endif
 1381              		.loc 1 505 0
 1382 0004 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 509:../drivers/fsl_uart.c **** #endif
 1383              		.loc 1 509 0
 1384 0006 807C     		ldrb	r0, [r0, #18]	@ zero_extendqisi2
 1385              	.LVL146:
 505:../drivers/fsl_uart.c **** #endif
 1386              		.loc 1 505 0
 1387 0008 1B04     		lsls	r3, r3, #16
 1388 000a 43EA0123 		orr	r3, r3, r1, lsl #8
 1389 000e 1343     		orrs	r3, r3, r2
 1390              	.LVL147:
 513:../drivers/fsl_uart.c **** 
 1391              		.loc 1 513 0
 1392 0010 43EA0060 		orr	r0, r3, r0, lsl #24
 1393              	.LVL148:
 1394 0014 7047     		bx	lr
 1395              		.cfi_endproc
 1396              	.LFE164:
 1398              		.section	.text.UART_ClearStatusFlags,"ax",%progbits
 1399              		.align	1
 1400              		.global	UART_ClearStatusFlags
 1401              		.syntax unified
 1402              		.thumb
 1403              		.thumb_func
 1404              		.fpu fpv4-sp-d16
 1406              	UART_ClearStatusFlags:
 1407              	.LFB165:
 516:../drivers/fsl_uart.c ****     uint8_t reg = base->S2;
 1408              		.loc 1 516 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412              	.LVL149:
 1413 0000 10B5     		push	{r4, lr}
 1414              		.cfi_def_cfa_offset 8
 1415              		.cfi_offset 4, -8
 1416              		.cfi_offset 14, -4
 517:../drivers/fsl_uart.c ****     status_t status;
 1417              		.loc 1 517 0
 1418 0002 4379     		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 1419              	.LVL150:
 521:../drivers/fsl_uart.c **** #else
 1420              		.loc 1 521 0
 1421 0004 03F03F03 		and	r3, r3, #63
 1422              	.LVL151:
 526:../drivers/fsl_uart.c **** 
 1423              		.loc 1 526 0
 1424 0008 43EA1123 		orr	r3, r3, r1, lsr #8
 1425 000c DBB2     		uxtb	r3, r3
 1426 000e 4371     		strb	r3, [r0, #5]
 529:../drivers/fsl_uart.c **** #endif
 1427              		.loc 1 529 0
 1428 0010 0B0E     		lsrs	r3, r1, #24
 1429 0012 8374     		strb	r3, [r0, #18]
 532:../drivers/fsl_uart.c ****     {
 1430              		.loc 1 532 0
 1431 0014 11F0170F 		tst	r1, #23
 535:../drivers/fsl_uart.c ****         (void)base->D;
 1432              		.loc 1 535 0
 1433 0018 1CBF     		itt	ne
 1434 001a 0379     		ldrbne	r3, [r0, #4]	@ zero_extendqisi2
 536:../drivers/fsl_uart.c ****     }
 1435              		.loc 1 536 0
 1436 001c C379     		ldrbne	r3, [r0, #7]	@ zero_extendqisi2
 539:../drivers/fsl_uart.c ****     {
 1437              		.loc 1 539 0
 1438 001e 0B07     		lsls	r3, r1, #28
 516:../drivers/fsl_uart.c ****     uint8_t reg = base->S2;
 1439              		.loc 1 516 0
 1440 0020 0C46     		mov	r4, r1
 539:../drivers/fsl_uart.c ****     {
 1441              		.loc 1 539 0
 1442 0022 05D5     		bpl	.L199
 542:../drivers/fsl_uart.c ****         (void)base->D;
 1443              		.loc 1 542 0
 1444 0024 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 543:../drivers/fsl_uart.c **** #if defined(FSL_FEATURE_UART_HAS_FIFO) && FSL_FEATURE_UART_HAS_FIFO
 1445              		.loc 1 543 0
 1446 0026 C379     		ldrb	r3, [r0, #7]	@ zero_extendqisi2
 546:../drivers/fsl_uart.c **** #endif
 1447              		.loc 1 546 0
 1448 0028 437C     		ldrb	r3, [r0, #17]	@ zero_extendqisi2
 1449 002a 43F04003 		orr	r3, r3, #64
 1450 002e 4374     		strb	r3, [r0, #17]
 1451              	.L199:
 551:../drivers/fsl_uart.c ****     {
 1452              		.loc 1 551 0
 1453 0030 FFF7FEFF 		bl	UART_GetStatusFlags
 1454              	.LVL152:
 560:../drivers/fsl_uart.c ****     }
 1455              		.loc 1 560 0
 1456 0034 2042     		tst	r0, r4
 564:../drivers/fsl_uart.c **** 
 1457              		.loc 1 564 0
 1458 0036 40F2EE30 		movw	r0, #1006
 1459 003a 08BF     		it	eq
 1460 003c 0020     		moveq	r0, #0
 1461 003e 10BD     		pop	{r4, pc}
 1462              		.cfi_endproc
 1463              	.LFE165:
 1465              		.section	.text.UART_WriteBlocking,"ax",%progbits
 1466              		.align	1
 1467              		.global	UART_WriteBlocking
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	UART_WriteBlocking:
 1474              	.LFB166:
 567:../drivers/fsl_uart.c ****     /* This API can only ensure that the data is written into the data buffer but can't
 1475              		.loc 1 567 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              		@ link register save eliminated.
 1480              	.LVL153:
 1481 0000 0A44     		add	r2, r2, r1
 1482              	.LVL154:
 1483              	.L209:
 570:../drivers/fsl_uart.c ****     {
 1484              		.loc 1 570 0
 1485 0002 9142     		cmp	r1, r2
 1486 0004 00D1     		bne	.L210
 577:../drivers/fsl_uart.c **** 
 1487              		.loc 1 577 0
 1488 0006 7047     		bx	lr
 1489              	.L210:
 572:../drivers/fsl_uart.c ****         {
 1490              		.loc 1 572 0 discriminator 1
 1491 0008 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 1492 000a 1B06     		lsls	r3, r3, #24
 1493 000c FCD5     		bpl	.L210
 575:../drivers/fsl_uart.c ****     }
 1494              		.loc 1 575 0
 1495 000e 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 1496              	.LVL155:
 1497 0012 C371     		strb	r3, [r0, #7]
 1498 0014 F5E7     		b	.L209
 1499              		.cfi_endproc
 1500              	.LFE166:
 1502              		.section	.text.UART_ReadBlocking,"ax",%progbits
 1503              		.align	1
 1504              		.global	UART_ReadBlocking
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu fpv4-sp-d16
 1510              	UART_ReadBlocking:
 1511              	.LFB168:
 594:../drivers/fsl_uart.c ****     assert(data);
 1512              		.loc 1 594 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516              	.LVL156:
 1517 0000 70B5     		push	{r4, r5, r6, lr}
 1518              		.cfi_def_cfa_offset 16
 1519              		.cfi_offset 4, -16
 1520              		.cfi_offset 5, -12
 1521              		.cfi_offset 6, -8
 1522              		.cfi_offset 14, -4
 594:../drivers/fsl_uart.c ****     assert(data);
 1523              		.loc 1 594 0
 1524 0002 0546     		mov	r5, r0
 1525 0004 0C46     		mov	r4, r1
 1526 0006 8E18     		adds	r6, r1, r2
 1527              	.LVL157:
 1528              	.L214:
 599:../drivers/fsl_uart.c ****     {
 1529              		.loc 1 599 0
 1530 0008 B442     		cmp	r4, r6
 1531 000a 0CD1     		bne	.L217
 632:../drivers/fsl_uart.c **** }
 1532              		.loc 1 632 0
 1533 000c 0020     		movs	r0, #0
 1534              	.L213:
 633:../drivers/fsl_uart.c **** 
 1535              		.loc 1 633 0
 1536 000e 70BD     		pop	{r4, r5, r6, pc}
 1537              	.LVL158:
 1538              	.L216:
 607:../drivers/fsl_uart.c **** 
 1539              		.loc 1 607 0
 1540 0010 2846     		mov	r0, r5
 1541 0012 FFF7FEFF 		bl	UART_GetStatusFlags
 1542              	.LVL159:
 609:../drivers/fsl_uart.c ****             {
 1543              		.loc 1 609 0
 1544 0016 0307     		lsls	r3, r0, #28
 1545 0018 0CD4     		bmi	.L218
 614:../drivers/fsl_uart.c ****             {
 1546              		.loc 1 614 0
 1547 001a 4107     		lsls	r1, r0, #29
 1548 001c 0DD4     		bmi	.L219
 619:../drivers/fsl_uart.c ****             {
 1549              		.loc 1 619 0
 1550 001e 8207     		lsls	r2, r0, #30
 1551 0020 0ED4     		bmi	.L220
 624:../drivers/fsl_uart.c ****             {
 1552              		.loc 1 624 0
 1553 0022 C307     		lsls	r3, r0, #31
 1554 0024 0FD4     		bmi	.L221
 1555              	.LVL160:
 1556              	.L217:
 602:../drivers/fsl_uart.c **** #else
 1557              		.loc 1 602 0
 1558 0026 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 1559 0028 002B     		cmp	r3, #0
 1560 002a F1D0     		beq	.L216
 629:../drivers/fsl_uart.c ****     }
 1561              		.loc 1 629 0
 1562 002c EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 1563 002e 04F8013B 		strb	r3, [r4], #1
 1564              	.LVL161:
 1565 0032 E9E7     		b	.L214
 1566              	.LVL162:
 1567              	.L218:
 611:../drivers/fsl_uart.c ****             }
 1568              		.loc 1 611 0
 1569 0034 40F2F130 		movw	r0, #1009
 1570              	.LVL163:
 1571 0038 E9E7     		b	.L213
 1572              	.LVL164:
 1573              	.L219:
 616:../drivers/fsl_uart.c ****             }
 1574              		.loc 1 616 0
 1575 003a 40F2F230 		movw	r0, #1010
 1576              	.LVL165:
 1577 003e E6E7     		b	.L213
 1578              	.LVL166:
 1579              	.L220:
 621:../drivers/fsl_uart.c ****             }
 1580              		.loc 1 621 0
 1581 0040 40F2F330 		movw	r0, #1011
 1582              	.LVL167:
 1583 0044 E3E7     		b	.L213
 1584              	.LVL168:
 1585              	.L221:
 626:../drivers/fsl_uart.c ****             }
 1586              		.loc 1 626 0
 1587 0046 4FF47D70 		mov	r0, #1012
 1588              	.LVL169:
 1589 004a E0E7     		b	.L213
 1590              		.cfi_endproc
 1591              	.LFE168:
 1593              		.section	.text.UART_TransferCreateHandle,"ax",%progbits
 1594              		.align	1
 1595              		.global	UART_TransferCreateHandle
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1599              		.fpu fpv4-sp-d16
 1601              	UART_TransferCreateHandle:
 1602              	.LFB170:
 653:../drivers/fsl_uart.c ****     assert(handle);
 1603              		.loc 1 653 0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
 1607              	.LVL170:
 1608 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1609              		.cfi_def_cfa_offset 24
 1610              		.cfi_offset 3, -24
 1611              		.cfi_offset 4, -20
 1612              		.cfi_offset 5, -16
 1613              		.cfi_offset 6, -12
 1614              		.cfi_offset 7, -8
 1615              		.cfi_offset 14, -4
 653:../drivers/fsl_uart.c ****     assert(handle);
 1616              		.loc 1 653 0
 1617 0002 0C46     		mov	r4, r1
 1618 0004 0546     		mov	r5, r0
 1619 0006 1746     		mov	r7, r2
 659:../drivers/fsl_uart.c **** 
 1620              		.loc 1 659 0
 1621 0008 0021     		movs	r1, #0
 1622              	.LVL171:
 1623 000a 3022     		movs	r2, #48
 1624              	.LVL172:
 1625 000c 2046     		mov	r0, r4
 1626              	.LVL173:
 653:../drivers/fsl_uart.c ****     assert(handle);
 1627              		.loc 1 653 0
 1628 000e 1E46     		mov	r6, r3
 659:../drivers/fsl_uart.c **** 
 1629              		.loc 1 659 0
 1630 0010 FFF7FEFF 		bl	memset
 1631              	.LVL174:
 662:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 1632              		.loc 1 662 0
 1633 0014 0223     		movs	r3, #2
 1634 0016 84F82D30 		strb	r3, [r4, #45]
 663:../drivers/fsl_uart.c **** 
 1635              		.loc 1 663 0
 1636 001a 0023     		movs	r3, #0
 1637 001c 84F82C30 		strb	r3, [r4, #44]
 667:../drivers/fsl_uart.c **** 
 1638              		.loc 1 667 0
 1639 0020 C4E90976 		strd	r7, r6, [r4, #36]
 670:../drivers/fsl_uart.c **** 
 1640              		.loc 1 670 0
 1641 0024 2846     		mov	r0, r5
 1642 0026 FFF7FEFF 		bl	UART_GetInstance
 1643              	.LVL175:
 673:../drivers/fsl_uart.c **** 
 1644              		.loc 1 673 0
 1645 002a 0A4B     		ldr	r3, .L225
 675:../drivers/fsl_uart.c ****     /* Enable interrupt in NVIC. */
 1646              		.loc 1 675 0
 1647 002c 0A4A     		ldr	r2, .L225+4
 673:../drivers/fsl_uart.c **** 
 1648              		.loc 1 673 0
 1649 002e 43F82040 		str	r4, [r3, r0, lsl #2]
 675:../drivers/fsl_uart.c ****     /* Enable interrupt in NVIC. */
 1650              		.loc 1 675 0
 1651 0032 0A4B     		ldr	r3, .L225+8
 1652 0034 1A60     		str	r2, [r3]
 677:../drivers/fsl_uart.c **** }
 1653              		.loc 1 677 0
 1654 0036 0A4B     		ldr	r3, .L225+12
 1655 0038 1B56     		ldrsb	r3, [r3, r0]
 1656              	.LVL176:
 1657              	.LBB70:
 1658              	.LBB71:
 1659              	.LBB72:
 1660              		.file 3 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
 1661              		.loc 3 1674 0
 1662 003a 002B     		cmp	r3, #0
 1663 003c 08DB     		blt	.L223
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 1664              		.loc 3 1676 0
 1665 003e 5909     		lsrs	r1, r3, #5
 1666 0040 0122     		movs	r2, #1
 1667 0042 03F01F03 		and	r3, r3, #31
 1668              	.LVL177:
 1669 0046 02FA03F3 		lsl	r3, r2, r3
 1670 004a 064A     		ldr	r2, .L225+16
 1671 004c 42F82130 		str	r3, [r2, r1, lsl #2]
 1672              	.LVL178:
 1673              	.L223:
 1674              	.LBE72:
 1675              	.LBE71:
 1676              	.LBE70:
 678:../drivers/fsl_uart.c **** 
 1677              		.loc 1 678 0
 1678 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1679              	.LVL179:
 1680              	.L226:
 1681 0052 00BF     		.align	2
 1682              	.L225:
 1683 0054 00000000 		.word	.LANCHOR1
 1684 0058 00000000 		.word	UART_TransferHandleIRQ
 1685 005c 00000000 		.word	.LANCHOR2
 1686 0060 00000000 		.word	.LANCHOR3
 1687 0064 00E100E0 		.word	-536813312
 1688              		.cfi_endproc
 1689              	.LFE170:
 1691              		.section	.text.UART_TransferStartRingBuffer,"ax",%progbits
 1692              		.align	1
 1693              		.global	UART_TransferStartRingBuffer
 1694              		.syntax unified
 1695              		.thumb
 1696              		.thumb_func
 1697              		.fpu fpv4-sp-d16
 1699              	UART_TransferStartRingBuffer:
 1700              	.LFB171:
 681:../drivers/fsl_uart.c ****     assert(handle);
 1701              		.loc 1 681 0
 1702              		.cfi_startproc
 1703              		@ args = 0, pretend = 0, frame = 0
 1704              		@ frame_needed = 0, uses_anonymous_args = 0
 1705              	.LVL180:
 1706 0000 10B5     		push	{r4, lr}
 1707              		.cfi_def_cfa_offset 8
 1708              		.cfi_offset 4, -8
 1709              		.cfi_offset 14, -4
 687:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 1710              		.loc 1 687 0
 1711 0002 C1E90623 		strd	r2, r3, [r1, #24]
 688:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 1712              		.loc 1 688 0
 1713 0006 0023     		movs	r3, #0
 1714              	.LVL181:
 1715 0008 0B84     		strh	r3, [r1, #32]	@ movhi
 689:../drivers/fsl_uart.c **** 
 1716              		.loc 1 689 0
 1717 000a 4B84     		strh	r3, [r1, #34]	@ movhi
 692:../drivers/fsl_uart.c ****         base, kUART_RxDataRegFullInterruptEnable | kUART_RxOverrunInterruptEnable | kUART_FramingEr
 1718              		.loc 1 692 0
 1719 000c 4FF42221 		mov	r1, #663552
 1720              	.LVL182:
 1721 0010 FFF7FEFF 		bl	UART_EnableInterrupts
 1722              	.LVL183:
 695:../drivers/fsl_uart.c ****     {
 1723              		.loc 1 695 0
 1724 0014 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 1725 0016 9B07     		lsls	r3, r3, #30
 1726 0018 05D5     		bpl	.L227
 697:../drivers/fsl_uart.c ****     }
 1727              		.loc 1 697 0
 1728 001a 4FF48031 		mov	r1, #65536
 699:../drivers/fsl_uart.c **** 
 1729              		.loc 1 699 0
 1730 001e BDE81040 		pop	{r4, lr}
 1731              		.cfi_remember_state
 1732              		.cfi_restore 14
 1733              		.cfi_restore 4
 1734              		.cfi_def_cfa_offset 0
 697:../drivers/fsl_uart.c ****     }
 1735              		.loc 1 697 0
 1736 0022 FFF7FEBF 		b	UART_EnableInterrupts
 1737              	.LVL184:
 1738              	.L227:
 1739              		.cfi_restore_state
 699:../drivers/fsl_uart.c **** 
 1740              		.loc 1 699 0
 1741 0026 10BD     		pop	{r4, pc}
 1742              		.cfi_endproc
 1743              	.LFE171:
 1745              		.section	.text.UART_TransferStopRingBuffer,"ax",%progbits
 1746              		.align	1
 1747              		.global	UART_TransferStopRingBuffer
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1751              		.fpu fpv4-sp-d16
 1753              	UART_TransferStopRingBuffer:
 1754              	.LFB172:
 702:../drivers/fsl_uart.c ****     assert(handle);
 1755              		.loc 1 702 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              	.LVL185:
 1760 0000 10B5     		push	{r4, lr}
 1761              		.cfi_def_cfa_offset 8
 1762              		.cfi_offset 4, -8
 1763              		.cfi_offset 14, -4
 705:../drivers/fsl_uart.c ****     {
 1764              		.loc 1 705 0
 1765 0002 91F82D30 		ldrb	r3, [r1, #45]	@ zero_extendqisi2
 1766 0006 022B     		cmp	r3, #2
 702:../drivers/fsl_uart.c ****     assert(handle);
 1767              		.loc 1 702 0
 1768 0008 0A46     		mov	r2, r1
 705:../drivers/fsl_uart.c ****     {
 1769              		.loc 1 705 0
 1770 000a 0AD1     		bne	.L231
 707:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable);
 1771              		.loc 1 707 0
 1772 000c 4FF42221 		mov	r1, #663552
 1773              	.LVL186:
 1774 0010 FFF7FEFF 		bl	UART_DisableInterrupts
 1775              	.LVL187:
 710:../drivers/fsl_uart.c ****         {
 1776              		.loc 1 710 0
 1777 0014 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 1778 0016 9B07     		lsls	r3, r3, #30
 1779 0018 03D5     		bpl	.L231
 712:../drivers/fsl_uart.c ****         }
 1780              		.loc 1 712 0
 1781 001a 4FF48031 		mov	r1, #65536
 1782 001e FFF7FEFF 		bl	UART_DisableInterrupts
 1783              	.LVL188:
 1784              	.L231:
 716:../drivers/fsl_uart.c ****     handle->rxRingBufferSize = 0U;
 1785              		.loc 1 716 0
 1786 0022 0023     		movs	r3, #0
 718:../drivers/fsl_uart.c ****     handle->rxRingBufferTail = 0U;
 1787              		.loc 1 718 0
 1788 0024 1384     		strh	r3, [r2, #32]	@ movhi
 717:../drivers/fsl_uart.c ****     handle->rxRingBufferHead = 0U;
 1789              		.loc 1 717 0
 1790 0026 C2E90633 		strd	r3, r3, [r2, #24]
 719:../drivers/fsl_uart.c **** }
 1791              		.loc 1 719 0
 1792 002a 5384     		strh	r3, [r2, #34]	@ movhi
 720:../drivers/fsl_uart.c **** 
 1793              		.loc 1 720 0
 1794 002c 10BD     		pop	{r4, pc}
 1795              		.cfi_endproc
 1796              	.LFE172:
 1798              		.section	.text.UART_TransferSendNonBlocking,"ax",%progbits
 1799              		.align	1
 1800              		.global	UART_TransferSendNonBlocking
 1801              		.syntax unified
 1802              		.thumb
 1803              		.thumb_func
 1804              		.fpu fpv4-sp-d16
 1806              	UART_TransferSendNonBlocking:
 1807              	.LFB173:
 723:../drivers/fsl_uart.c ****     assert(handle);
 1808              		.loc 1 723 0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 0
 1811              		@ frame_needed = 0, uses_anonymous_args = 0
 1812              	.LVL189:
 1813 0000 08B5     		push	{r3, lr}
 1814              		.cfi_def_cfa_offset 8
 1815              		.cfi_offset 3, -8
 1816              		.cfi_offset 14, -4
 732:../drivers/fsl_uart.c ****     {
 1817              		.loc 1 732 0
 1818 0002 91F82C30 		ldrb	r3, [r1, #44]	@ zero_extendqisi2
 1819 0006 012B     		cmp	r3, #1
 1820 0008 0DD0     		beq	.L238
 738:../drivers/fsl_uart.c ****         handle->txDataSize = xfer->dataSize;
 1821              		.loc 1 738 0
 1822 000a 1368     		ldr	r3, [r2]
 1823 000c 0B60     		str	r3, [r1]
 739:../drivers/fsl_uart.c ****         handle->txDataSizeAll = xfer->dataSize;
 1824              		.loc 1 739 0
 1825 000e 5368     		ldr	r3, [r2, #4]
 1826 0010 4B60     		str	r3, [r1, #4]
 740:../drivers/fsl_uart.c ****         handle->txState = kUART_TxBusy;
 1827              		.loc 1 740 0
 1828 0012 8B60     		str	r3, [r1, #8]
 741:../drivers/fsl_uart.c **** 
 1829              		.loc 1 741 0
 1830 0014 0123     		movs	r3, #1
 1831 0016 81F82C30 		strb	r3, [r1, #44]
 744:../drivers/fsl_uart.c **** 
 1832              		.loc 1 744 0
 1833 001a 4FF40041 		mov	r1, #32768
 1834              	.LVL190:
 1835 001e FFF7FEFF 		bl	UART_EnableInterrupts
 1836              	.LVL191:
 746:../drivers/fsl_uart.c ****     }
 1837              		.loc 1 746 0
 1838 0022 0020     		movs	r0, #0
 1839              	.LVL192:
 1840              	.L236:
 750:../drivers/fsl_uart.c **** 
 1841              		.loc 1 750 0
 1842 0024 08BD     		pop	{r3, pc}
 1843              	.LVL193:
 1844              	.L238:
 734:../drivers/fsl_uart.c ****     }
 1845              		.loc 1 734 0
 1846 0026 4FF47A70 		mov	r0, #1000
 1847              	.LVL194:
 749:../drivers/fsl_uart.c **** }
 1848              		.loc 1 749 0
 1849 002a FBE7     		b	.L236
 1850              		.cfi_endproc
 1851              	.LFE173:
 1853              		.section	.text.UART_TransferAbortSend,"ax",%progbits
 1854              		.align	1
 1855              		.global	UART_TransferAbortSend
 1856              		.syntax unified
 1857              		.thumb
 1858              		.thumb_func
 1859              		.fpu fpv4-sp-d16
 1861              	UART_TransferAbortSend:
 1862              	.LFB174:
 753:../drivers/fsl_uart.c ****     assert(handle);
 1863              		.loc 1 753 0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867              	.LVL195:
 1868 0000 08B5     		push	{r3, lr}
 1869              		.cfi_def_cfa_offset 8
 1870              		.cfi_offset 3, -8
 1871              		.cfi_offset 14, -4
 753:../drivers/fsl_uart.c ****     assert(handle);
 1872              		.loc 1 753 0
 1873 0002 0A46     		mov	r2, r1
 756:../drivers/fsl_uart.c **** 
 1874              		.loc 1 756 0
 1875 0004 4FF44041 		mov	r1, #49152
 1876              	.LVL196:
 1877 0008 FFF7FEFF 		bl	UART_DisableInterrupts
 1878              	.LVL197:
 758:../drivers/fsl_uart.c ****     handle->txState = kUART_TxIdle;
 1879              		.loc 1 758 0
 1880 000c 0023     		movs	r3, #0
 1881 000e 5360     		str	r3, [r2, #4]
 759:../drivers/fsl_uart.c **** }
 1882              		.loc 1 759 0
 1883 0010 82F82C30 		strb	r3, [r2, #44]
 760:../drivers/fsl_uart.c **** 
 1884              		.loc 1 760 0
 1885 0014 08BD     		pop	{r3, pc}
 1886              		.cfi_endproc
 1887              	.LFE174:
 1889              		.section	.text.UART_TransferGetSendCount,"ax",%progbits
 1890              		.align	1
 1891              		.global	UART_TransferGetSendCount
 1892              		.syntax unified
 1893              		.thumb
 1894              		.thumb_func
 1895              		.fpu fpv4-sp-d16
 1897              	UART_TransferGetSendCount:
 1898              	.LFB175:
 763:../drivers/fsl_uart.c ****     assert(handle);
 1899              		.loc 1 763 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              		@ link register save eliminated.
 1904              	.LVL198:
 767:../drivers/fsl_uart.c ****     {
 1905              		.loc 1 767 0
 1906 0000 91F82C30 		ldrb	r3, [r1, #44]	@ zero_extendqisi2
 1907 0004 2BB1     		cbz	r3, .L242
 772:../drivers/fsl_uart.c **** 
 1908              		.loc 1 772 0
 1909 0006 4868     		ldr	r0, [r1, #4]
 1910              	.LVL199:
 1911 0008 8B68     		ldr	r3, [r1, #8]
 1912 000a 1B1A     		subs	r3, r3, r0
 1913 000c 1360     		str	r3, [r2]
 774:../drivers/fsl_uart.c **** }
 1914              		.loc 1 774 0
 1915 000e 0020     		movs	r0, #0
 1916 0010 7047     		bx	lr
 1917              	.LVL200:
 1918              	.L242:
 769:../drivers/fsl_uart.c ****     }
 1919              		.loc 1 769 0
 1920 0012 0620     		movs	r0, #6
 1921              	.LVL201:
 775:../drivers/fsl_uart.c **** 
 1922              		.loc 1 775 0
 1923 0014 7047     		bx	lr
 1924              		.cfi_endproc
 1925              	.LFE175:
 1927              		.section	.text.UART_TransferReceiveNonBlocking,"ax",%progbits
 1928              		.align	1
 1929              		.global	UART_TransferReceiveNonBlocking
 1930              		.syntax unified
 1931              		.thumb
 1932              		.thumb_func
 1933              		.fpu fpv4-sp-d16
 1935              	UART_TransferReceiveNonBlocking:
 1936              	.LFB176:
 781:../drivers/fsl_uart.c ****     assert(handle);
 1937              		.loc 1 781 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 1941              	.LVL202:
 1942 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1943              		.cfi_def_cfa_offset 32
 1944              		.cfi_offset 3, -32
 1945              		.cfi_offset 4, -28
 1946              		.cfi_offset 5, -24
 1947              		.cfi_offset 6, -20
 1948              		.cfi_offset 7, -16
 1949              		.cfi_offset 8, -12
 1950              		.cfi_offset 9, -8
 1951              		.cfi_offset 14, -4
 781:../drivers/fsl_uart.c ****     assert(handle);
 1952              		.loc 1 781 0
 1953 0004 1F46     		mov	r7, r3
 806:../drivers/fsl_uart.c ****     {
 1954              		.loc 1 806 0
 1955 0006 91F82D30 		ldrb	r3, [r1, #45]	@ zero_extendqisi2
 1956              	.LVL203:
 1957 000a 032B     		cmp	r3, #3
 781:../drivers/fsl_uart.c ****     assert(handle);
 1958              		.loc 1 781 0
 1959 000c 8046     		mov	r8, r0
 1960 000e 0C46     		mov	r4, r1
 1961 0010 9146     		mov	r9, r2
 1962              	.LVL204:
 806:../drivers/fsl_uart.c ****     {
 1963              		.loc 1 806 0
 1964 0012 64D0     		beq	.L253
 812:../drivers/fsl_uart.c ****         bytesCurrentReceived = 0U;
 1965              		.loc 1 812 0
 1966 0014 5668     		ldr	r6, [r2, #4]
 1967              	.LVL205:
 816:../drivers/fsl_uart.c ****         {
 1968              		.loc 1 816 0
 1969 0016 8A69     		ldr	r2, [r1, #24]
 1970              	.LVL206:
 1971 0018 002A     		cmp	r2, #0
 1972 001a 49D0     		beq	.L245
 819:../drivers/fsl_uart.c **** 
 1973              		.loc 1 819 0
 1974 001c 4FF40051 		mov	r1, #8192
 1975              	.LVL207:
 1976 0020 FFF7FEFF 		bl	UART_DisableInterrupts
 1977              	.LVL208:
 822:../drivers/fsl_uart.c **** 
 1978              		.loc 1 822 0
 1979 0024 2046     		mov	r0, r4
 1980              	.LVL209:
 1981 0026 FFF7FEFF 		bl	UART_TransferGetRxRingBufferLength
 1982              	.LVL210:
 824:../drivers/fsl_uart.c ****             {
 1983              		.loc 1 824 0
 1984 002a 0028     		cmp	r0, #0
 1985 002c 3ED0     		beq	.L254
 826:../drivers/fsl_uart.c **** 
 1986              		.loc 1 826 0
 1987 002e B042     		cmp	r0, r6
 1988 0030 28BF     		it	cs
 1989 0032 3046     		movcs	r0, r6
 1990              	.LVL211:
 831:../drivers/fsl_uart.c ****                 {
 1991              		.loc 1 831 0
 1992 0034 0023     		movs	r3, #0
 826:../drivers/fsl_uart.c **** 
 1993              		.loc 1 826 0
 1994 0036 0546     		mov	r5, r0
 1995              	.LVL212:
 828:../drivers/fsl_uart.c **** 
 1996              		.loc 1 828 0
 1997 0038 361A     		subs	r6, r6, r0
 1998              	.LVL213:
 838:../drivers/fsl_uart.c ****                     }
 1999              		.loc 1 838 0
 2000 003a 1946     		mov	r1, r3
 2001              	.LVL214:
 2002              	.L247:
 831:../drivers/fsl_uart.c ****                 {
 2003              		.loc 1 831 0 discriminator 1
 2004 003c AB42     		cmp	r3, r5
 2005 003e 1CD1     		bne	.L250
 2006              	.LVL215:
 2007              	.L246:
 848:../drivers/fsl_uart.c ****             {
 2008              		.loc 1 848 0
 2009 0040 46B1     		cbz	r6, .L251
 851:../drivers/fsl_uart.c ****                 handle->rxDataSize = bytesToReceive;
 2010              		.loc 1 851 0
 2011 0042 D9F80030 		ldr	r3, [r9]
 853:../drivers/fsl_uart.c ****                 handle->rxState = kUART_RxBusy;
 2012              		.loc 1 853 0
 2013 0046 6661     		str	r6, [r4, #20]
 851:../drivers/fsl_uart.c ****                 handle->rxDataSize = bytesToReceive;
 2014              		.loc 1 851 0
 2015 0048 2B44     		add	r3, r3, r5
 2016 004a E360     		str	r3, [r4, #12]
 854:../drivers/fsl_uart.c ****             }
 2017              		.loc 1 854 0
 2018 004c 0323     		movs	r3, #3
 852:../drivers/fsl_uart.c ****                 handle->rxDataSizeAll = bytesToReceive;
 2019              		.loc 1 852 0
 2020 004e 2661     		str	r6, [r4, #16]
 854:../drivers/fsl_uart.c ****             }
 2021              		.loc 1 854 0
 2022 0050 84F82D30 		strb	r3, [r4, #45]
 2023              	.L251:
 858:../drivers/fsl_uart.c **** 
 2024              		.loc 1 858 0
 2025 0054 4FF40051 		mov	r1, #8192
 2026 0058 4046     		mov	r0, r8
 2027 005a FFF7FEFF 		bl	UART_EnableInterrupts
 2028              	.LVL216:
 861:../drivers/fsl_uart.c ****             {
 2029              		.loc 1 861 0
 2030 005e 36B9     		cbnz	r6, .L252
 2031              	.LVL217:
 863:../drivers/fsl_uart.c ****                 {
 2032              		.loc 1 863 0
 2033 0060 666A     		ldr	r6, [r4, #36]
 2034              	.LVL218:
 2035 0062 26B1     		cbz	r6, .L252
 865:../drivers/fsl_uart.c ****                 }
 2036              		.loc 1 865 0
 2037 0064 A36A     		ldr	r3, [r4, #40]
 2038 0066 40F2EB32 		movw	r2, #1003
 2039 006a 2146     		mov	r1, r4
 2040 006c B047     		blx	r6
 2041              	.LVL219:
 2042              	.L252:
 888:../drivers/fsl_uart.c ****         {
 2043              		.loc 1 888 0
 2044 006e 002F     		cmp	r7, #0
 2045 0070 38D0     		beq	.L256
 890:../drivers/fsl_uart.c ****         }
 2046              		.loc 1 890 0
 2047 0072 3D60     		str	r5, [r7]
 893:../drivers/fsl_uart.c ****     }
 2048              		.loc 1 893 0
 2049 0074 0020     		movs	r0, #0
 2050              	.LVL220:
 2051              	.L243:
 897:../drivers/fsl_uart.c **** 
 2052              		.loc 1 897 0
 2053 0076 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2054              	.LVL221:
 2055              	.L250:
 833:../drivers/fsl_uart.c **** 
 2056              		.loc 1 833 0
 2057 007a B4F822C0 		ldrh	ip, [r4, #34]
 2058 007e A269     		ldr	r2, [r4, #24]
 2059 0080 1FFA8CFC 		uxth	ip, ip
 2060 0084 581C     		adds	r0, r3, #1
 2061              	.LVL222:
 2062 0086 12F80CC0 		ldrb	ip, [r2, ip]	@ zero_extendqisi2
 2063 008a D9F80020 		ldr	r2, [r9]
 2064 008e 02F803C0 		strb	ip, [r2, r3]
 836:../drivers/fsl_uart.c ****                     {
 2065              		.loc 1 836 0
 2066 0092 628C     		ldrh	r2, [r4, #34]
 2067 0094 E369     		ldr	r3, [r4, #28]
 2068              	.LVL223:
 2069 0096 0132     		adds	r2, r2, #1
 2070 0098 9A42     		cmp	r2, r3
 842:../drivers/fsl_uart.c ****                     }
 2071              		.loc 1 842 0
 2072 009a 17BF     		itett	ne
 2073 009c 638C     		ldrhne	r3, [r4, #34]
 838:../drivers/fsl_uart.c ****                     }
 2074              		.loc 1 838 0
 2075 009e 6184     		strheq	r1, [r4, #34]	@ movhi
 842:../drivers/fsl_uart.c ****                     }
 2076              		.loc 1 842 0
 2077 00a0 0133     		addne	r3, r3, #1
 2078 00a2 9BB2     		uxthne	r3, r3
 2079 00a4 18BF     		it	ne
 2080 00a6 6384     		strhne	r3, [r4, #34]	@ movhi
 781:../drivers/fsl_uart.c ****     assert(handle);
 2081              		.loc 1 781 0
 2082 00a8 0346     		mov	r3, r0
 2083 00aa C7E7     		b	.L247
 2084              	.LVL224:
 2085              	.L254:
 813:../drivers/fsl_uart.c **** 
 2086              		.loc 1 813 0
 2087 00ac 0546     		mov	r5, r0
 2088 00ae C7E7     		b	.L246
 2089              	.LVL225:
 2090              	.L245:
 872:../drivers/fsl_uart.c ****             handle->rxDataSize = bytesToReceive;
 2091              		.loc 1 872 0
 2092 00b0 D9F80030 		ldr	r3, [r9]
 2093 00b4 CB60     		str	r3, [r1, #12]
 875:../drivers/fsl_uart.c **** 
 2094              		.loc 1 875 0
 2095 00b6 0323     		movs	r3, #3
 873:../drivers/fsl_uart.c ****             handle->rxDataSizeAll = bytesToReceive;
 2096              		.loc 1 873 0
 2097 00b8 0E61     		str	r6, [r1, #16]
 874:../drivers/fsl_uart.c ****             handle->rxState = kUART_RxBusy;
 2098              		.loc 1 874 0
 2099 00ba 4E61     		str	r6, [r1, #20]
 875:../drivers/fsl_uart.c **** 
 2100              		.loc 1 875 0
 2101 00bc 81F82D30 		strb	r3, [r1, #45]
 878:../drivers/fsl_uart.c ****                                             kUART_FramingErrorInterruptEnable | kUART_IdleLineInter
 2102              		.loc 1 878 0
 2103 00c0 4FF42321 		mov	r1, #667648
 2104              	.LVL226:
 2105 00c4 FFF7FEFF 		bl	UART_EnableInterrupts
 2106              	.LVL227:
 881:../drivers/fsl_uart.c ****             {
 2107              		.loc 1 881 0
 2108 00c8 8078     		ldrb	r0, [r0, #2]	@ zero_extendqisi2
 2109              	.LVL228:
 2110 00ca 10F00205 		ands	r5, r0, #2
 2111 00ce CED0     		beq	.L252
 883:../drivers/fsl_uart.c ****             }
 2112              		.loc 1 883 0
 2113 00d0 4FF48031 		mov	r1, #65536
 2114 00d4 4046     		mov	r0, r8
 2115 00d6 FFF7FEFF 		bl	UART_EnableInterrupts
 2116              	.LVL229:
 813:../drivers/fsl_uart.c **** 
 2117              		.loc 1 813 0
 2118 00da 1546     		mov	r5, r2
 2119 00dc C7E7     		b	.L252
 2120              	.LVL230:
 2121              	.L253:
 808:../drivers/fsl_uart.c ****     }
 2122              		.loc 1 808 0
 2123 00de 40F2E930 		movw	r0, #1001
 2124              	.LVL231:
 2125 00e2 C8E7     		b	.L243
 2126              	.LVL232:
 2127              	.L256:
 893:../drivers/fsl_uart.c ****     }
 2128              		.loc 1 893 0
 2129 00e4 3846     		mov	r0, r7
 2130              	.LVL233:
 896:../drivers/fsl_uart.c **** }
 2131              		.loc 1 896 0
 2132 00e6 C6E7     		b	.L243
 2133              		.cfi_endproc
 2134              	.LFE176:
 2136              		.section	.text.UART_TransferAbortReceive,"ax",%progbits
 2137              		.align	1
 2138              		.global	UART_TransferAbortReceive
 2139              		.syntax unified
 2140              		.thumb
 2141              		.thumb_func
 2142              		.fpu fpv4-sp-d16
 2144              	UART_TransferAbortReceive:
 2145              	.LFB177:
 900:../drivers/fsl_uart.c ****     assert(handle);
 2146              		.loc 1 900 0
 2147              		.cfi_startproc
 2148              		@ args = 0, pretend = 0, frame = 0
 2149              		@ frame_needed = 0, uses_anonymous_args = 0
 2150              	.LVL234:
 904:../drivers/fsl_uart.c ****     {
 2151              		.loc 1 904 0
 2152 0000 8B69     		ldr	r3, [r1, #24]
 900:../drivers/fsl_uart.c ****     assert(handle);
 2153              		.loc 1 900 0
 2154 0002 10B5     		push	{r4, lr}
 2155              		.cfi_def_cfa_offset 8
 2156              		.cfi_offset 4, -8
 2157              		.cfi_offset 14, -4
 900:../drivers/fsl_uart.c ****     assert(handle);
 2158              		.loc 1 900 0
 2159 0004 0A46     		mov	r2, r1
 904:../drivers/fsl_uart.c ****     {
 2160              		.loc 1 904 0
 2161 0006 53B9     		cbnz	r3, .L265
 907:../drivers/fsl_uart.c ****                                          kUART_FramingErrorInterruptEnable | kUART_IdleLineInterrup
 2162              		.loc 1 907 0
 2163 0008 4FF42321 		mov	r1, #667648
 2164              	.LVL235:
 2165 000c FFF7FEFF 		bl	UART_DisableInterrupts
 2166              	.LVL236:
 910:../drivers/fsl_uart.c ****         {
 2167              		.loc 1 910 0
 2168 0010 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 2169 0012 9B07     		lsls	r3, r3, #30
 2170 0014 03D5     		bpl	.L265
 912:../drivers/fsl_uart.c ****         }
 2171              		.loc 1 912 0
 2172 0016 4FF48031 		mov	r1, #65536
 2173 001a FFF7FEFF 		bl	UART_DisableInterrupts
 2174              	.LVL237:
 2175              	.L265:
 916:../drivers/fsl_uart.c ****     handle->rxState = kUART_RxIdle;
 2176              		.loc 1 916 0
 2177 001e 0023     		movs	r3, #0
 2178 0020 1361     		str	r3, [r2, #16]
 917:../drivers/fsl_uart.c **** }
 2179              		.loc 1 917 0
 2180 0022 0223     		movs	r3, #2
 2181 0024 82F82D30 		strb	r3, [r2, #45]
 918:../drivers/fsl_uart.c **** 
 2182              		.loc 1 918 0
 2183 0028 10BD     		pop	{r4, pc}
 2184              		.cfi_endproc
 2185              	.LFE177:
 2187              		.section	.text.UART_TransferGetReceiveCount,"ax",%progbits
 2188              		.align	1
 2189              		.global	UART_TransferGetReceiveCount
 2190              		.syntax unified
 2191              		.thumb
 2192              		.thumb_func
 2193              		.fpu fpv4-sp-d16
 2195              	UART_TransferGetReceiveCount:
 2196              	.LFB178:
 921:../drivers/fsl_uart.c ****     assert(handle);
 2197              		.loc 1 921 0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 2201              		@ link register save eliminated.
 2202              	.LVL238:
 925:../drivers/fsl_uart.c ****     {
 2203              		.loc 1 925 0
 2204 0000 91F82D30 		ldrb	r3, [r1, #45]	@ zero_extendqisi2
 2205 0004 022B     		cmp	r3, #2
 2206 0006 06D0     		beq	.L272
 930:../drivers/fsl_uart.c ****     {
 2207              		.loc 1 930 0
 2208 0008 3AB1     		cbz	r2, .L273
 935:../drivers/fsl_uart.c **** 
 2209              		.loc 1 935 0
 2210 000a 0869     		ldr	r0, [r1, #16]
 2211              	.LVL239:
 2212 000c 4B69     		ldr	r3, [r1, #20]
 2213 000e 1B1A     		subs	r3, r3, r0
 2214 0010 1360     		str	r3, [r2]
 937:../drivers/fsl_uart.c **** }
 2215              		.loc 1 937 0
 2216 0012 0020     		movs	r0, #0
 2217 0014 7047     		bx	lr
 2218              	.LVL240:
 2219              	.L272:
 927:../drivers/fsl_uart.c ****     }
 2220              		.loc 1 927 0
 2221 0016 0620     		movs	r0, #6
 2222              	.LVL241:
 2223 0018 7047     		bx	lr
 2224              	.LVL242:
 2225              	.L273:
 932:../drivers/fsl_uart.c ****     }
 2226              		.loc 1 932 0
 2227 001a 0420     		movs	r0, #4
 2228              	.LVL243:
 938:../drivers/fsl_uart.c **** 
 2229              		.loc 1 938 0
 2230 001c 7047     		bx	lr
 2231              		.cfi_endproc
 2232              	.LFE178:
 2234              		.section	.text.UART_TransferHandleErrorIRQ,"ax",%progbits
 2235              		.align	1
 2236              		.global	UART_TransferHandleErrorIRQ
 2237              		.syntax unified
 2238              		.thumb
 2239              		.thumb_func
 2240              		.fpu fpv4-sp-d16
 2242              	UART_TransferHandleErrorIRQ:
 2243              	.LFB180:
1221:../drivers/fsl_uart.c **** 
1222:../drivers/fsl_uart.c **** void UART_TransferHandleErrorIRQ(UART_Type *base, uart_handle_t *handle)
1223:../drivers/fsl_uart.c **** {
 2244              		.loc 1 1223 0
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 0
 2247              		@ frame_needed = 0, uses_anonymous_args = 0
 2248              		@ link register save eliminated.
 2249              	.LVL244:
1224:../drivers/fsl_uart.c ****     /* To be implemented by User. */
1225:../drivers/fsl_uart.c **** }
 2250              		.loc 1 1225 0
 2251 0000 7047     		bx	lr
 2252              		.cfi_endproc
 2253              	.LFE180:
 2255              		.section	.text.UART0_DriverIRQHandler,"ax",%progbits
 2256              		.align	1
 2257              		.global	UART0_DriverIRQHandler
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2261              		.fpu fpv4-sp-d16
 2263              	UART0_DriverIRQHandler:
 2264              	.LFB181:
1226:../drivers/fsl_uart.c **** 
1227:../drivers/fsl_uart.c **** #if defined(UART0)
1228:../drivers/fsl_uart.c **** #if ((!(defined(FSL_FEATURE_SOC_LPSCI_COUNT))) || \
1229:../drivers/fsl_uart.c ****      ((defined(FSL_FEATURE_SOC_LPSCI_COUNT)) && (FSL_FEATURE_SOC_LPSCI_COUNT == 0)))
1230:../drivers/fsl_uart.c **** void UART0_DriverIRQHandler(void)
1231:../drivers/fsl_uart.c **** {
 2265              		.loc 1 1231 0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 0
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
 2269 0000 08B5     		push	{r3, lr}
 2270              		.cfi_def_cfa_offset 8
 2271              		.cfi_offset 3, -8
 2272              		.cfi_offset 14, -4
1232:../drivers/fsl_uart.c ****     s_uartIsr(UART0, s_uartHandle[0]);
 2273              		.loc 1 1232 0
 2274 0002 044A     		ldr	r2, .L276
 2275 0004 044B     		ldr	r3, .L276+4
 2276 0006 1168     		ldr	r1, [r2]
 2277 0008 1B68     		ldr	r3, [r3]
 2278 000a 0448     		ldr	r0, .L276+8
 2279 000c 9847     		blx	r3
 2280              	.LVL245:
 2281              	.LBB73:
 2282              	.LBB74:
 2283              		.file 4 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2284              		.loc 4 833 0
 2285              		.syntax unified
 2286              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2287 000e BFF34F8F 		dsb 0xF
 2288              	@ 0 "" 2
 2289              		.thumb
 2290              		.syntax unified
 2291              	.LBE74:
 2292              	.LBE73:
1233:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1234:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1235:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1236:../drivers/fsl_uart.c ****     __DSB();
1237:../drivers/fsl_uart.c **** #endif
1238:../drivers/fsl_uart.c **** }
 2293              		.loc 1 1238 0
 2294 0012 08BD     		pop	{r3, pc}
 2295              	.L277:
 2296              		.align	2
 2297              	.L276:
 2298 0014 00000000 		.word	.LANCHOR1
 2299 0018 00000000 		.word	.LANCHOR2
 2300 001c 00A00640 		.word	1074176000
 2301              		.cfi_endproc
 2302              	.LFE181:
 2304              		.section	.text.UART0_RX_TX_DriverIRQHandler,"ax",%progbits
 2305              		.align	1
 2306              		.global	UART0_RX_TX_DriverIRQHandler
 2307              		.syntax unified
 2308              		.thumb
 2309              		.thumb_func
 2310              		.fpu fpv4-sp-d16
 2312              	UART0_RX_TX_DriverIRQHandler:
 2313              	.LFB182:
1239:../drivers/fsl_uart.c **** 
1240:../drivers/fsl_uart.c **** void UART0_RX_TX_DriverIRQHandler(void)
1241:../drivers/fsl_uart.c **** {
 2314              		.loc 1 1241 0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 0
 2317              		@ frame_needed = 0, uses_anonymous_args = 0
 2318 0000 08B5     		push	{r3, lr}
 2319              		.cfi_def_cfa_offset 8
 2320              		.cfi_offset 3, -8
 2321              		.cfi_offset 14, -4
1242:../drivers/fsl_uart.c ****     UART0_DriverIRQHandler();
 2322              		.loc 1 1242 0
 2323 0002 FFF7FEFF 		bl	UART0_DriverIRQHandler
 2324              	.LVL246:
 2325              	.LBB75:
 2326              	.LBB76:
 2327              		.loc 4 833 0
 2328              		.syntax unified
 2329              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2330 0006 BFF34F8F 		dsb 0xF
 2331              	@ 0 "" 2
 2332              		.thumb
 2333              		.syntax unified
 2334              	.LBE76:
 2335              	.LBE75:
1243:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1244:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1245:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1246:../drivers/fsl_uart.c ****     __DSB();
1247:../drivers/fsl_uart.c **** #endif
1248:../drivers/fsl_uart.c **** }
 2336              		.loc 1 1248 0
 2337 000a 08BD     		pop	{r3, pc}
 2338              		.cfi_endproc
 2339              	.LFE182:
 2341              		.section	.text.UART1_DriverIRQHandler,"ax",%progbits
 2342              		.align	1
 2343              		.global	UART1_DriverIRQHandler
 2344              		.syntax unified
 2345              		.thumb
 2346              		.thumb_func
 2347              		.fpu fpv4-sp-d16
 2349              	UART1_DriverIRQHandler:
 2350              	.LFB183:
1249:../drivers/fsl_uart.c **** #endif
1250:../drivers/fsl_uart.c **** #endif
1251:../drivers/fsl_uart.c **** 
1252:../drivers/fsl_uart.c **** #if defined(UART1)
1253:../drivers/fsl_uart.c **** void UART1_DriverIRQHandler(void)
1254:../drivers/fsl_uart.c **** {
 2351              		.loc 1 1254 0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 2355 0000 08B5     		push	{r3, lr}
 2356              		.cfi_def_cfa_offset 8
 2357              		.cfi_offset 3, -8
 2358              		.cfi_offset 14, -4
1255:../drivers/fsl_uart.c ****     s_uartIsr(UART1, s_uartHandle[1]);
 2359              		.loc 1 1255 0
 2360 0002 044A     		ldr	r2, .L280
 2361 0004 044B     		ldr	r3, .L280+4
 2362 0006 5168     		ldr	r1, [r2, #4]
 2363 0008 1B68     		ldr	r3, [r3]
 2364 000a 0448     		ldr	r0, .L280+8
 2365 000c 9847     		blx	r3
 2366              	.LVL247:
 2367              	.LBB77:
 2368              	.LBB78:
 2369              		.loc 4 833 0
 2370              		.syntax unified
 2371              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2372 000e BFF34F8F 		dsb 0xF
 2373              	@ 0 "" 2
 2374              		.thumb
 2375              		.syntax unified
 2376              	.LBE78:
 2377              	.LBE77:
1256:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1257:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1258:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1259:../drivers/fsl_uart.c ****     __DSB();
1260:../drivers/fsl_uart.c **** #endif
1261:../drivers/fsl_uart.c **** }
 2378              		.loc 1 1261 0
 2379 0012 08BD     		pop	{r3, pc}
 2380              	.L281:
 2381              		.align	2
 2382              	.L280:
 2383 0014 00000000 		.word	.LANCHOR1
 2384 0018 00000000 		.word	.LANCHOR2
 2385 001c 00B00640 		.word	1074180096
 2386              		.cfi_endproc
 2387              	.LFE183:
 2389              		.section	.text.UART1_RX_TX_DriverIRQHandler,"ax",%progbits
 2390              		.align	1
 2391              		.global	UART1_RX_TX_DriverIRQHandler
 2392              		.syntax unified
 2393              		.thumb
 2394              		.thumb_func
 2395              		.fpu fpv4-sp-d16
 2397              	UART1_RX_TX_DriverIRQHandler:
 2398              	.LFB184:
1262:../drivers/fsl_uart.c **** 
1263:../drivers/fsl_uart.c **** void UART1_RX_TX_DriverIRQHandler(void)
1264:../drivers/fsl_uart.c **** {
 2399              		.loc 1 1264 0
 2400              		.cfi_startproc
 2401              		@ args = 0, pretend = 0, frame = 0
 2402              		@ frame_needed = 0, uses_anonymous_args = 0
 2403 0000 08B5     		push	{r3, lr}
 2404              		.cfi_def_cfa_offset 8
 2405              		.cfi_offset 3, -8
 2406              		.cfi_offset 14, -4
1265:../drivers/fsl_uart.c ****     UART1_DriverIRQHandler();
 2407              		.loc 1 1265 0
 2408 0002 FFF7FEFF 		bl	UART1_DriverIRQHandler
 2409              	.LVL248:
 2410              	.LBB79:
 2411              	.LBB80:
 2412              		.loc 4 833 0
 2413              		.syntax unified
 2414              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2415 0006 BFF34F8F 		dsb 0xF
 2416              	@ 0 "" 2
 2417              		.thumb
 2418              		.syntax unified
 2419              	.LBE80:
 2420              	.LBE79:
1266:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1267:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1268:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1269:../drivers/fsl_uart.c ****     __DSB();
1270:../drivers/fsl_uart.c **** #endif
1271:../drivers/fsl_uart.c **** }
 2421              		.loc 1 1271 0
 2422 000a 08BD     		pop	{r3, pc}
 2423              		.cfi_endproc
 2424              	.LFE184:
 2426              		.section	.text.UART2_DriverIRQHandler,"ax",%progbits
 2427              		.align	1
 2428              		.global	UART2_DriverIRQHandler
 2429              		.syntax unified
 2430              		.thumb
 2431              		.thumb_func
 2432              		.fpu fpv4-sp-d16
 2434              	UART2_DriverIRQHandler:
 2435              	.LFB185:
1272:../drivers/fsl_uart.c **** #endif
1273:../drivers/fsl_uart.c **** 
1274:../drivers/fsl_uart.c **** #if defined(UART2)
1275:../drivers/fsl_uart.c **** void UART2_DriverIRQHandler(void)
1276:../drivers/fsl_uart.c **** {
 2436              		.loc 1 1276 0
 2437              		.cfi_startproc
 2438              		@ args = 0, pretend = 0, frame = 0
 2439              		@ frame_needed = 0, uses_anonymous_args = 0
 2440 0000 08B5     		push	{r3, lr}
 2441              		.cfi_def_cfa_offset 8
 2442              		.cfi_offset 3, -8
 2443              		.cfi_offset 14, -4
1277:../drivers/fsl_uart.c ****     s_uartIsr(UART2, s_uartHandle[2]);
 2444              		.loc 1 1277 0
 2445 0002 044A     		ldr	r2, .L284
 2446 0004 044B     		ldr	r3, .L284+4
 2447 0006 9168     		ldr	r1, [r2, #8]
 2448 0008 1B68     		ldr	r3, [r3]
 2449 000a 0448     		ldr	r0, .L284+8
 2450 000c 9847     		blx	r3
 2451              	.LVL249:
 2452              	.LBB81:
 2453              	.LBB82:
 2454              		.loc 4 833 0
 2455              		.syntax unified
 2456              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2457 000e BFF34F8F 		dsb 0xF
 2458              	@ 0 "" 2
 2459              		.thumb
 2460              		.syntax unified
 2461              	.LBE82:
 2462              	.LBE81:
1278:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1279:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1280:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1281:../drivers/fsl_uart.c ****     __DSB();
1282:../drivers/fsl_uart.c **** #endif
1283:../drivers/fsl_uart.c **** }
 2463              		.loc 1 1283 0
 2464 0012 08BD     		pop	{r3, pc}
 2465              	.L285:
 2466              		.align	2
 2467              	.L284:
 2468 0014 00000000 		.word	.LANCHOR1
 2469 0018 00000000 		.word	.LANCHOR2
 2470 001c 00C00640 		.word	1074184192
 2471              		.cfi_endproc
 2472              	.LFE185:
 2474              		.section	.text.UART2_RX_TX_DriverIRQHandler,"ax",%progbits
 2475              		.align	1
 2476              		.global	UART2_RX_TX_DriverIRQHandler
 2477              		.syntax unified
 2478              		.thumb
 2479              		.thumb_func
 2480              		.fpu fpv4-sp-d16
 2482              	UART2_RX_TX_DriverIRQHandler:
 2483              	.LFB186:
1284:../drivers/fsl_uart.c **** 
1285:../drivers/fsl_uart.c **** void UART2_RX_TX_DriverIRQHandler(void)
1286:../drivers/fsl_uart.c **** {
 2484              		.loc 1 1286 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 0
 2487              		@ frame_needed = 0, uses_anonymous_args = 0
 2488 0000 08B5     		push	{r3, lr}
 2489              		.cfi_def_cfa_offset 8
 2490              		.cfi_offset 3, -8
 2491              		.cfi_offset 14, -4
1287:../drivers/fsl_uart.c ****     UART2_DriverIRQHandler();
 2492              		.loc 1 1287 0
 2493 0002 FFF7FEFF 		bl	UART2_DriverIRQHandler
 2494              	.LVL250:
 2495              	.LBB83:
 2496              	.LBB84:
 2497              		.loc 4 833 0
 2498              		.syntax unified
 2499              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2500 0006 BFF34F8F 		dsb 0xF
 2501              	@ 0 "" 2
 2502              		.thumb
 2503              		.syntax unified
 2504              	.LBE84:
 2505              	.LBE83:
1288:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1289:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1290:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1291:../drivers/fsl_uart.c ****     __DSB();
1292:../drivers/fsl_uart.c **** #endif
1293:../drivers/fsl_uart.c **** }
 2506              		.loc 1 1293 0
 2507 000a 08BD     		pop	{r3, pc}
 2508              		.cfi_endproc
 2509              	.LFE186:
 2511              		.section	.text.UART3_DriverIRQHandler,"ax",%progbits
 2512              		.align	1
 2513              		.global	UART3_DriverIRQHandler
 2514              		.syntax unified
 2515              		.thumb
 2516              		.thumb_func
 2517              		.fpu fpv4-sp-d16
 2519              	UART3_DriverIRQHandler:
 2520              	.LFB187:
1294:../drivers/fsl_uart.c **** #endif
1295:../drivers/fsl_uart.c **** 
1296:../drivers/fsl_uart.c **** #if defined(UART3)
1297:../drivers/fsl_uart.c **** void UART3_DriverIRQHandler(void)
1298:../drivers/fsl_uart.c **** {
 2521              		.loc 1 1298 0
 2522              		.cfi_startproc
 2523              		@ args = 0, pretend = 0, frame = 0
 2524              		@ frame_needed = 0, uses_anonymous_args = 0
 2525 0000 08B5     		push	{r3, lr}
 2526              		.cfi_def_cfa_offset 8
 2527              		.cfi_offset 3, -8
 2528              		.cfi_offset 14, -4
1299:../drivers/fsl_uart.c ****     s_uartIsr(UART3, s_uartHandle[3]);
 2529              		.loc 1 1299 0
 2530 0002 044A     		ldr	r2, .L288
 2531 0004 044B     		ldr	r3, .L288+4
 2532 0006 D168     		ldr	r1, [r2, #12]
 2533 0008 1B68     		ldr	r3, [r3]
 2534 000a 0448     		ldr	r0, .L288+8
 2535 000c 9847     		blx	r3
 2536              	.LVL251:
 2537              	.LBB85:
 2538              	.LBB86:
 2539              		.loc 4 833 0
 2540              		.syntax unified
 2541              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2542 000e BFF34F8F 		dsb 0xF
 2543              	@ 0 "" 2
 2544              		.thumb
 2545              		.syntax unified
 2546              	.LBE86:
 2547              	.LBE85:
1300:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1301:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1302:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1303:../drivers/fsl_uart.c ****     __DSB();
1304:../drivers/fsl_uart.c **** #endif
1305:../drivers/fsl_uart.c **** }
 2548              		.loc 1 1305 0
 2549 0012 08BD     		pop	{r3, pc}
 2550              	.L289:
 2551              		.align	2
 2552              	.L288:
 2553 0014 00000000 		.word	.LANCHOR1
 2554 0018 00000000 		.word	.LANCHOR2
 2555 001c 00D00640 		.word	1074188288
 2556              		.cfi_endproc
 2557              	.LFE187:
 2559              		.section	.text.UART3_RX_TX_DriverIRQHandler,"ax",%progbits
 2560              		.align	1
 2561              		.global	UART3_RX_TX_DriverIRQHandler
 2562              		.syntax unified
 2563              		.thumb
 2564              		.thumb_func
 2565              		.fpu fpv4-sp-d16
 2567              	UART3_RX_TX_DriverIRQHandler:
 2568              	.LFB188:
1306:../drivers/fsl_uart.c **** 
1307:../drivers/fsl_uart.c **** void UART3_RX_TX_DriverIRQHandler(void)
1308:../drivers/fsl_uart.c **** {
 2569              		.loc 1 1308 0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 0
 2572              		@ frame_needed = 0, uses_anonymous_args = 0
 2573 0000 08B5     		push	{r3, lr}
 2574              		.cfi_def_cfa_offset 8
 2575              		.cfi_offset 3, -8
 2576              		.cfi_offset 14, -4
1309:../drivers/fsl_uart.c ****     UART3_DriverIRQHandler();
 2577              		.loc 1 1309 0
 2578 0002 FFF7FEFF 		bl	UART3_DriverIRQHandler
 2579              	.LVL252:
 2580              	.LBB87:
 2581              	.LBB88:
 2582              		.loc 4 833 0
 2583              		.syntax unified
 2584              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2585 0006 BFF34F8F 		dsb 0xF
 2586              	@ 0 "" 2
 2587              		.thumb
 2588              		.syntax unified
 2589              	.LBE88:
 2590              	.LBE87:
1310:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1311:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1312:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1313:../drivers/fsl_uart.c ****     __DSB();
1314:../drivers/fsl_uart.c **** #endif
1315:../drivers/fsl_uart.c **** }
 2591              		.loc 1 1315 0
 2592 000a 08BD     		pop	{r3, pc}
 2593              		.cfi_endproc
 2594              	.LFE188:
 2596              		.section	.text.UART4_DriverIRQHandler,"ax",%progbits
 2597              		.align	1
 2598              		.global	UART4_DriverIRQHandler
 2599              		.syntax unified
 2600              		.thumb
 2601              		.thumb_func
 2602              		.fpu fpv4-sp-d16
 2604              	UART4_DriverIRQHandler:
 2605              	.LFB189:
1316:../drivers/fsl_uart.c **** #endif
1317:../drivers/fsl_uart.c **** 
1318:../drivers/fsl_uart.c **** #if defined(UART4)
1319:../drivers/fsl_uart.c **** void UART4_DriverIRQHandler(void)
1320:../drivers/fsl_uart.c **** {
 2606              		.loc 1 1320 0
 2607              		.cfi_startproc
 2608              		@ args = 0, pretend = 0, frame = 0
 2609              		@ frame_needed = 0, uses_anonymous_args = 0
 2610 0000 08B5     		push	{r3, lr}
 2611              		.cfi_def_cfa_offset 8
 2612              		.cfi_offset 3, -8
 2613              		.cfi_offset 14, -4
1321:../drivers/fsl_uart.c ****     s_uartIsr(UART4, s_uartHandle[4]);
 2614              		.loc 1 1321 0
 2615 0002 044A     		ldr	r2, .L292
 2616 0004 044B     		ldr	r3, .L292+4
 2617 0006 1169     		ldr	r1, [r2, #16]
 2618 0008 1B68     		ldr	r3, [r3]
 2619 000a 0448     		ldr	r0, .L292+8
 2620 000c 9847     		blx	r3
 2621              	.LVL253:
 2622              	.LBB89:
 2623              	.LBB90:
 2624              		.loc 4 833 0
 2625              		.syntax unified
 2626              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2627 000e BFF34F8F 		dsb 0xF
 2628              	@ 0 "" 2
 2629              		.thumb
 2630              		.syntax unified
 2631              	.LBE90:
 2632              	.LBE89:
1322:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1323:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1324:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1325:../drivers/fsl_uart.c ****     __DSB();
1326:../drivers/fsl_uart.c **** #endif
1327:../drivers/fsl_uart.c **** }
 2633              		.loc 1 1327 0
 2634 0012 08BD     		pop	{r3, pc}
 2635              	.L293:
 2636              		.align	2
 2637              	.L292:
 2638 0014 00000000 		.word	.LANCHOR1
 2639 0018 00000000 		.word	.LANCHOR2
 2640 001c 00A00E40 		.word	1074700288
 2641              		.cfi_endproc
 2642              	.LFE189:
 2644              		.section	.text.UART4_RX_TX_DriverIRQHandler,"ax",%progbits
 2645              		.align	1
 2646              		.global	UART4_RX_TX_DriverIRQHandler
 2647              		.syntax unified
 2648              		.thumb
 2649              		.thumb_func
 2650              		.fpu fpv4-sp-d16
 2652              	UART4_RX_TX_DriverIRQHandler:
 2653              	.LFB190:
1328:../drivers/fsl_uart.c **** 
1329:../drivers/fsl_uart.c **** void UART4_RX_TX_DriverIRQHandler(void)
1330:../drivers/fsl_uart.c **** {
 2654              		.loc 1 1330 0
 2655              		.cfi_startproc
 2656              		@ args = 0, pretend = 0, frame = 0
 2657              		@ frame_needed = 0, uses_anonymous_args = 0
 2658 0000 08B5     		push	{r3, lr}
 2659              		.cfi_def_cfa_offset 8
 2660              		.cfi_offset 3, -8
 2661              		.cfi_offset 14, -4
1331:../drivers/fsl_uart.c ****     UART4_DriverIRQHandler();
 2662              		.loc 1 1331 0
 2663 0002 FFF7FEFF 		bl	UART4_DriverIRQHandler
 2664              	.LVL254:
 2665              	.LBB91:
 2666              	.LBB92:
 2667              		.loc 4 833 0
 2668              		.syntax unified
 2669              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2670 0006 BFF34F8F 		dsb 0xF
 2671              	@ 0 "" 2
 2672              		.thumb
 2673              		.syntax unified
 2674              	.LBE92:
 2675              	.LBE91:
1332:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1333:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1334:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1335:../drivers/fsl_uart.c ****     __DSB();
1336:../drivers/fsl_uart.c **** #endif
1337:../drivers/fsl_uart.c **** }
 2676              		.loc 1 1337 0
 2677 000a 08BD     		pop	{r3, pc}
 2678              		.cfi_endproc
 2679              	.LFE190:
 2681              		.section	.text.UART5_DriverIRQHandler,"ax",%progbits
 2682              		.align	1
 2683              		.global	UART5_DriverIRQHandler
 2684              		.syntax unified
 2685              		.thumb
 2686              		.thumb_func
 2687              		.fpu fpv4-sp-d16
 2689              	UART5_DriverIRQHandler:
 2690              	.LFB191:
1338:../drivers/fsl_uart.c **** #endif
1339:../drivers/fsl_uart.c **** 
1340:../drivers/fsl_uart.c **** #if defined(UART5)
1341:../drivers/fsl_uart.c **** void UART5_DriverIRQHandler(void)
1342:../drivers/fsl_uart.c **** {
 2691              		.loc 1 1342 0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 0
 2694              		@ frame_needed = 0, uses_anonymous_args = 0
 2695 0000 08B5     		push	{r3, lr}
 2696              		.cfi_def_cfa_offset 8
 2697              		.cfi_offset 3, -8
 2698              		.cfi_offset 14, -4
1343:../drivers/fsl_uart.c ****     s_uartIsr(UART5, s_uartHandle[5]);
 2699              		.loc 1 1343 0
 2700 0002 044A     		ldr	r2, .L296
 2701 0004 044B     		ldr	r3, .L296+4
 2702 0006 5169     		ldr	r1, [r2, #20]
 2703 0008 1B68     		ldr	r3, [r3]
 2704 000a 0448     		ldr	r0, .L296+8
 2705 000c 9847     		blx	r3
 2706              	.LVL255:
 2707              	.LBB93:
 2708              	.LBB94:
 2709              		.loc 4 833 0
 2710              		.syntax unified
 2711              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2712 000e BFF34F8F 		dsb 0xF
 2713              	@ 0 "" 2
 2714              		.thumb
 2715              		.syntax unified
 2716              	.LBE94:
 2717              	.LBE93:
1344:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1345:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1346:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1347:../drivers/fsl_uart.c ****     __DSB();
1348:../drivers/fsl_uart.c **** #endif
1349:../drivers/fsl_uart.c **** }
 2718              		.loc 1 1349 0
 2719 0012 08BD     		pop	{r3, pc}
 2720              	.L297:
 2721              		.align	2
 2722              	.L296:
 2723 0014 00000000 		.word	.LANCHOR1
 2724 0018 00000000 		.word	.LANCHOR2
 2725 001c 00B00E40 		.word	1074704384
 2726              		.cfi_endproc
 2727              	.LFE191:
 2729              		.section	.text.UART5_RX_TX_DriverIRQHandler,"ax",%progbits
 2730              		.align	1
 2731              		.global	UART5_RX_TX_DriverIRQHandler
 2732              		.syntax unified
 2733              		.thumb
 2734              		.thumb_func
 2735              		.fpu fpv4-sp-d16
 2737              	UART5_RX_TX_DriverIRQHandler:
 2738              	.LFB192:
1350:../drivers/fsl_uart.c **** 
1351:../drivers/fsl_uart.c **** void UART5_RX_TX_DriverIRQHandler(void)
1352:../drivers/fsl_uart.c **** {
 2739              		.loc 1 1352 0
 2740              		.cfi_startproc
 2741              		@ args = 0, pretend = 0, frame = 0
 2742              		@ frame_needed = 0, uses_anonymous_args = 0
 2743 0000 08B5     		push	{r3, lr}
 2744              		.cfi_def_cfa_offset 8
 2745              		.cfi_offset 3, -8
 2746              		.cfi_offset 14, -4
1353:../drivers/fsl_uart.c ****     UART5_DriverIRQHandler();
 2747              		.loc 1 1353 0
 2748 0002 FFF7FEFF 		bl	UART5_DriverIRQHandler
 2749              	.LVL256:
 2750              	.LBB95:
 2751              	.LBB96:
 2752              		.loc 4 833 0
 2753              		.syntax unified
 2754              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2755 0006 BFF34F8F 		dsb 0xF
 2756              	@ 0 "" 2
 2757              		.thumb
 2758              		.syntax unified
 2759              	.LBE96:
 2760              	.LBE95:
1354:../drivers/fsl_uart.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1355:../drivers/fsl_uart.c ****       exception return operation might vector to incorrect interrupt */
1356:../drivers/fsl_uart.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1357:../drivers/fsl_uart.c ****     __DSB();
1358:../drivers/fsl_uart.c **** #endif
1359:../drivers/fsl_uart.c **** }
 2761              		.loc 1 1359 0
 2762 000a 08BD     		pop	{r3, pc}
 2763              		.cfi_endproc
 2764              	.LFE192:
 2766              		.section	.bss.s_uartHandle,"aw",%nobits
 2767              		.align	2
 2768              		.set	.LANCHOR1,. + 0
 2771              	s_uartHandle:
 2772 0000 00000000 		.space	24
 2772      00000000 
 2772      00000000 
 2772      00000000 
 2772      00000000 
 2773              		.section	.bss.s_uartIsr,"aw",%nobits
 2774              		.align	2
 2775              		.set	.LANCHOR2,. + 0
 2778              	s_uartIsr:
 2779 0000 00000000 		.space	4
 2780              		.section	.rodata.s_uartClock,"a",%progbits
 2781              		.align	2
 2782              		.set	.LANCHOR0,. + 0
 2785              	s_uartClock:
 2786 0000 0A003410 		.word	271843338
 2787 0004 0B003410 		.word	271843339
 2788 0008 0C003410 		.word	271843340
 2789 000c 0D003410 		.word	271843341
 2790 0010 0A002810 		.word	271056906
 2791 0014 0B002810 		.word	271056907
 2792              		.section	.rodata.s_uartIRQ,"a",%progbits
 2793              		.set	.LANCHOR3,. + 0
 2796              	s_uartIRQ:
 2797 0000 1F       		.byte	31
 2798 0001 21       		.byte	33
 2799 0002 23       		.byte	35
 2800 0003 25       		.byte	37
 2801 0004 42       		.byte	66
 2802 0005 44       		.byte	68
 2803              		.text
 2804              	.Letext0:
 2805              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2806              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2807              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 2808              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 2809              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 2810              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 2811              		.file 11 "../CMSIS/MK64F12.h"
 2812              		.file 12 "../CMSIS/system_MK64F12.h"
 2813              		.file 13 "../drivers/fsl_common.h"
 2814              		.file 14 "../drivers/fsl_uart.h"
 2815              		.file 15 "<built-in>"
