   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_edma.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.EDMA_InstallTCD,"ax",%progbits
  18              		.align	1
  19              		.global	EDMA_InstallTCD
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	EDMA_InstallTCD:
  26              	.LFB158:
  27              		.file 1 "../drivers/fsl_edma.c"
   1:../drivers/fsl_edma.c **** /*
   2:../drivers/fsl_edma.c ****  * The Clear BSD License
   3:../drivers/fsl_edma.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_edma.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_edma.c ****  * All rights reserved.
   6:../drivers/fsl_edma.c ****  *
   7:../drivers/fsl_edma.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_edma.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_edma.c ****  * that the following conditions are met:
  10:../drivers/fsl_edma.c ****  *
  11:../drivers/fsl_edma.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_edma.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_edma.c ****  *
  14:../drivers/fsl_edma.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_edma.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_edma.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_edma.c ****  *
  18:../drivers/fsl_edma.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_edma.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_edma.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_edma.c ****  *
  22:../drivers/fsl_edma.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_edma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_edma.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_edma.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_edma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_edma.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_edma.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_edma.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_edma.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_edma.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_edma.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_edma.c ****  */
  34:../drivers/fsl_edma.c **** 
  35:../drivers/fsl_edma.c **** #include "fsl_edma.h"
  36:../drivers/fsl_edma.c **** 
  37:../drivers/fsl_edma.c **** /*******************************************************************************
  38:../drivers/fsl_edma.c ****  * Definitions
  39:../drivers/fsl_edma.c ****  ******************************************************************************/
  40:../drivers/fsl_edma.c **** 
  41:../drivers/fsl_edma.c **** #define EDMA_TRANSFER_ENABLED_MASK 0x80U
  42:../drivers/fsl_edma.c **** 
  43:../drivers/fsl_edma.c **** /*******************************************************************************
  44:../drivers/fsl_edma.c ****  * Prototypes
  45:../drivers/fsl_edma.c ****  ******************************************************************************/
  46:../drivers/fsl_edma.c **** 
  47:../drivers/fsl_edma.c **** /*!
  48:../drivers/fsl_edma.c ****  * @brief Get instance number for EDMA.
  49:../drivers/fsl_edma.c ****  *
  50:../drivers/fsl_edma.c ****  * @param base EDMA peripheral base address.
  51:../drivers/fsl_edma.c ****  */
  52:../drivers/fsl_edma.c **** static uint32_t EDMA_GetInstance(DMA_Type *base);
  53:../drivers/fsl_edma.c **** 
  54:../drivers/fsl_edma.c **** /*******************************************************************************
  55:../drivers/fsl_edma.c ****  * Variables
  56:../drivers/fsl_edma.c ****  ******************************************************************************/
  57:../drivers/fsl_edma.c **** 
  58:../drivers/fsl_edma.c **** /*! @brief Array to map EDMA instance number to base pointer. */
  59:../drivers/fsl_edma.c **** static DMA_Type *const s_edmaBases[] = DMA_BASE_PTRS;
  60:../drivers/fsl_edma.c **** 
  61:../drivers/fsl_edma.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  62:../drivers/fsl_edma.c **** /*! @brief Array to map EDMA instance number to clock name. */
  63:../drivers/fsl_edma.c **** static const clock_ip_name_t s_edmaClockName[] = EDMA_CLOCKS;
  64:../drivers/fsl_edma.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  65:../drivers/fsl_edma.c **** 
  66:../drivers/fsl_edma.c **** /*! @brief Array to map EDMA instance number to IRQ number. */
  67:../drivers/fsl_edma.c **** static const IRQn_Type s_edmaIRQNumber[][FSL_FEATURE_EDMA_MODULE_CHANNEL] = DMA_CHN_IRQS;
  68:../drivers/fsl_edma.c **** 
  69:../drivers/fsl_edma.c **** /*! @brief Pointers to transfer handle for each EDMA channel. */
  70:../drivers/fsl_edma.c **** static edma_handle_t *s_EDMAHandle[FSL_FEATURE_EDMA_MODULE_CHANNEL * FSL_FEATURE_SOC_EDMA_COUNT];
  71:../drivers/fsl_edma.c **** 
  72:../drivers/fsl_edma.c **** /*******************************************************************************
  73:../drivers/fsl_edma.c ****  * Code
  74:../drivers/fsl_edma.c ****  ******************************************************************************/
  75:../drivers/fsl_edma.c **** 
  76:../drivers/fsl_edma.c **** static uint32_t EDMA_GetInstance(DMA_Type *base)
  77:../drivers/fsl_edma.c **** {
  78:../drivers/fsl_edma.c ****     uint32_t instance;
  79:../drivers/fsl_edma.c **** 
  80:../drivers/fsl_edma.c ****     /* Find the instance index from base address mappings. */
  81:../drivers/fsl_edma.c ****     for (instance = 0; instance < ARRAY_SIZE(s_edmaBases); instance++)
  82:../drivers/fsl_edma.c ****     {
  83:../drivers/fsl_edma.c ****         if (s_edmaBases[instance] == base)
  84:../drivers/fsl_edma.c ****         {
  85:../drivers/fsl_edma.c ****             break;
  86:../drivers/fsl_edma.c ****         }
  87:../drivers/fsl_edma.c ****     }
  88:../drivers/fsl_edma.c **** 
  89:../drivers/fsl_edma.c ****     assert(instance < ARRAY_SIZE(s_edmaBases));
  90:../drivers/fsl_edma.c **** 
  91:../drivers/fsl_edma.c ****     return instance;
  92:../drivers/fsl_edma.c **** }
  93:../drivers/fsl_edma.c **** 
  94:../drivers/fsl_edma.c **** void EDMA_InstallTCD(DMA_Type *base, uint32_t channel, edma_tcd_t *tcd)
  95:../drivers/fsl_edma.c **** {
  28              		.loc 1 95 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 00EB4111 		add	r1, r0, r1, lsl #5
  34              	.LVL1:
  96:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
  97:../drivers/fsl_edma.c ****     assert(tcd != NULL);
  98:../drivers/fsl_edma.c ****     assert(((uint32_t)tcd & 0x1FU) == 0);
  99:../drivers/fsl_edma.c **** 
 100:../drivers/fsl_edma.c ****     /* Push tcd into hardware TCD register */
 101:../drivers/fsl_edma.c ****     base->TCD[channel].SADDR = tcd->SADDR;
  35              		.loc 1 101 0
  36 0004 01F58053 		add	r3, r1, #4096
  95:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
  37              		.loc 1 95 0
  38 0008 10B5     		push	{r4, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 101 0
  43 000a 1468     		ldr	r4, [r2]
  44 000c 1C60     		str	r4, [r3]
 102:../drivers/fsl_edma.c ****     base->TCD[channel].SOFF = tcd->SOFF;
  45              		.loc 1 102 0
  46 000e 9388     		ldrh	r3, [r2, #4]
  47 0010 41F20400 		movw	r0, #4100
  48              	.LVL2:
  49 0014 9BB2     		uxth	r3, r3
  50 0016 0B52     		strh	r3, [r1, r0]	@ movhi
 103:../drivers/fsl_edma.c ****     base->TCD[channel].ATTR = tcd->ATTR;
  51              		.loc 1 103 0
  52 0018 D388     		ldrh	r3, [r2, #6]
  53 001a 41F20600 		movw	r0, #4102
  54 001e 9BB2     		uxth	r3, r3
  55 0020 0B52     		strh	r3, [r1, r0]	@ movhi
 104:../drivers/fsl_edma.c ****     base->TCD[channel].NBYTES_MLNO = tcd->NBYTES;
  56              		.loc 1 104 0
  57 0022 41F20803 		movw	r3, #4104
  58 0026 9068     		ldr	r0, [r2, #8]
  59 0028 C850     		str	r0, [r1, r3]
 105:../drivers/fsl_edma.c ****     base->TCD[channel].SLAST = tcd->SLAST;
  60              		.loc 1 105 0
  61 002a 41F20C03 		movw	r3, #4108
  62 002e D068     		ldr	r0, [r2, #12]
  63 0030 C850     		str	r0, [r1, r3]
 106:../drivers/fsl_edma.c ****     base->TCD[channel].DADDR = tcd->DADDR;
  64              		.loc 1 106 0
  65 0032 41F21003 		movw	r3, #4112
  66 0036 1069     		ldr	r0, [r2, #16]
  67 0038 C850     		str	r0, [r1, r3]
 107:../drivers/fsl_edma.c ****     base->TCD[channel].DOFF = tcd->DOFF;
  68              		.loc 1 107 0
  69 003a 938A     		ldrh	r3, [r2, #20]
  70 003c 41F21400 		movw	r0, #4116
  71 0040 9BB2     		uxth	r3, r3
  72 0042 0B52     		strh	r3, [r1, r0]	@ movhi
 108:../drivers/fsl_edma.c ****     base->TCD[channel].CITER_ELINKNO = tcd->CITER;
  73              		.loc 1 108 0
  74 0044 D38A     		ldrh	r3, [r2, #22]
  75 0046 41F21600 		movw	r0, #4118
  76 004a 9BB2     		uxth	r3, r3
  77 004c 0B52     		strh	r3, [r1, r0]	@ movhi
 109:../drivers/fsl_edma.c ****     base->TCD[channel].DLAST_SGA = tcd->DLAST_SGA;
  78              		.loc 1 109 0
  79 004e 41F21803 		movw	r3, #4120
  80 0052 9069     		ldr	r0, [r2, #24]
  81 0054 C850     		str	r0, [r1, r3]
 110:../drivers/fsl_edma.c ****     /* Clear DONE bit first, otherwise ESG cannot be set */
 111:../drivers/fsl_edma.c ****     base->TCD[channel].CSR = 0;
  82              		.loc 1 111 0
  83 0056 41F21C00 		movw	r0, #4124
  84 005a 0023     		movs	r3, #0
  85 005c 0B52     		strh	r3, [r1, r0]	@ movhi
 112:../drivers/fsl_edma.c ****     base->TCD[channel].CSR = tcd->CSR;
  86              		.loc 1 112 0
  87 005e 938B     		ldrh	r3, [r2, #28]
  88 0060 9BB2     		uxth	r3, r3
  89 0062 0B52     		strh	r3, [r1, r0]	@ movhi
 113:../drivers/fsl_edma.c ****     base->TCD[channel].BITER_ELINKNO = tcd->BITER;
  90              		.loc 1 113 0
  91 0064 D38B     		ldrh	r3, [r2, #30]
  92 0066 41F21E02 		movw	r2, #4126
  93              	.LVL3:
  94 006a 9BB2     		uxth	r3, r3
  95 006c 8B52     		strh	r3, [r1, r2]	@ movhi
  96 006e 10BD     		pop	{r4, pc}
  97              		.cfi_endproc
  98              	.LFE158:
 100              		.section	.text.EDMA_Init,"ax",%progbits
 101              		.align	1
 102              		.global	EDMA_Init
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu fpv4-sp-d16
 108              	EDMA_Init:
 109              	.LFB159:
 114:../drivers/fsl_edma.c **** }
 115:../drivers/fsl_edma.c **** 
 116:../drivers/fsl_edma.c **** void EDMA_Init(DMA_Type *base, const edma_config_t *config)
 117:../drivers/fsl_edma.c **** {
 110              		.loc 1 117 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL4:
 116              	.LBB94:
 117              	.LBB95:
 118              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 119              		.loc 2 695 0
 120 0000 0F4A     		ldr	r2, .L3
 121 0002 1368     		ldr	r3, [r2]
 122 0004 43F00203 		orr	r3, r3, #2
 123 0008 1360     		str	r3, [r2]
 124              	.LVL5:
 125              	.LBE95:
 126              	.LBE94:
 118:../drivers/fsl_edma.c ****     assert(config != NULL);
 119:../drivers/fsl_edma.c **** 
 120:../drivers/fsl_edma.c ****     uint32_t tmpreg;
 121:../drivers/fsl_edma.c **** 
 122:../drivers/fsl_edma.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 123:../drivers/fsl_edma.c ****     /* Ungate EDMA periphral clock */
 124:../drivers/fsl_edma.c ****     CLOCK_EnableClock(s_edmaClockName[EDMA_GetInstance(base)]);
 125:../drivers/fsl_edma.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 126:../drivers/fsl_edma.c ****     /* Configure EDMA peripheral according to the configuration structure. */
 127:../drivers/fsl_edma.c ****     tmpreg = base->CR;
 127              		.loc 1 127 0
 128 000a 0268     		ldr	r2, [r0]
 129              	.LVL6:
 128:../drivers/fsl_edma.c ****     tmpreg &= ~(DMA_CR_ERCA_MASK | DMA_CR_HOE_MASK | DMA_CR_CLM_MASK | DMA_CR_EDBG_MASK);
 129:../drivers/fsl_edma.c ****     tmpreg |= (DMA_CR_ERCA(config->enableRoundRobinArbitration) | DMA_CR_HOE(config->enableHaltOnEr
 130              		.loc 1 129 0
 131 000c 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 128:../drivers/fsl_edma.c ****     tmpreg &= ~(DMA_CR_ERCA_MASK | DMA_CR_HOE_MASK | DMA_CR_CLM_MASK | DMA_CR_EDBG_MASK);
 132              		.loc 1 128 0
 133 000e 22F05602 		bic	r2, r2, #86
 134              	.LVL7:
 135              		.loc 1 129 0
 136 0012 9B00     		lsls	r3, r3, #2
 137 0014 42F08002 		orr	r2, r2, #128
 138              	.LVL8:
 139 0018 03F00403 		and	r3, r3, #4
 140 001c 1343     		orrs	r3, r3, r2
 141 001e 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 142 0020 1201     		lsls	r2, r2, #4
 143 0022 02F01002 		and	r2, r2, #16
 144 0026 1343     		orrs	r3, r3, r2
 130:../drivers/fsl_edma.c ****                DMA_CR_CLM(config->enableContinuousLinkMode) | DMA_CR_EDBG(config->enableDebugMode) 
 145              		.loc 1 130 0
 146 0028 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 147 002a 9201     		lsls	r2, r2, #6
 148 002c 02F04002 		and	r2, r2, #64
 149 0030 1343     		orrs	r3, r3, r2
 150 0032 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 151 0034 5200     		lsls	r2, r2, #1
 152 0036 02F00202 		and	r2, r2, #2
 129:../drivers/fsl_edma.c ****                DMA_CR_CLM(config->enableContinuousLinkMode) | DMA_CR_EDBG(config->enableDebugMode) 
 153              		.loc 1 129 0
 154 003a 1343     		orrs	r3, r3, r2
 155              	.LVL9:
 131:../drivers/fsl_edma.c ****     base->CR = tmpreg;
 156              		.loc 1 131 0
 157 003c 0360     		str	r3, [r0]
 158 003e 7047     		bx	lr
 159              	.L4:
 160              		.align	2
 161              	.L3:
 162 0040 40800440 		.word	1074036800
 163              		.cfi_endproc
 164              	.LFE159:
 166              		.section	.text.EDMA_Deinit,"ax",%progbits
 167              		.align	1
 168              		.global	EDMA_Deinit
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	EDMA_Deinit:
 175              	.LFB160:
 132:../drivers/fsl_edma.c **** }
 133:../drivers/fsl_edma.c **** 
 134:../drivers/fsl_edma.c **** void EDMA_Deinit(DMA_Type *base)
 135:../drivers/fsl_edma.c **** {
 176              		.loc 1 135 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL10:
 182              	.LBB100:
 183              	.LBB101:
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 184              		.loc 2 706 0
 185 0000 024A     		ldr	r2, .L6
 186 0002 1368     		ldr	r3, [r2]
 187 0004 23F00203 		bic	r3, r3, #2
 188 0008 1360     		str	r3, [r2]
 189              	.LVL11:
 190 000a 7047     		bx	lr
 191              	.L7:
 192              		.align	2
 193              	.L6:
 194 000c 40800440 		.word	1074036800
 195              	.LBE101:
 196              	.LBE100:
 197              		.cfi_endproc
 198              	.LFE160:
 200              		.section	.text.EDMA_GetDefaultConfig,"ax",%progbits
 201              		.align	1
 202              		.global	EDMA_GetDefaultConfig
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	EDMA_GetDefaultConfig:
 209              	.LFB161:
 136:../drivers/fsl_edma.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 137:../drivers/fsl_edma.c ****     /* Gate EDMA periphral clock */
 138:../drivers/fsl_edma.c ****     CLOCK_DisableClock(s_edmaClockName[EDMA_GetInstance(base)]);
 139:../drivers/fsl_edma.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 140:../drivers/fsl_edma.c **** }
 141:../drivers/fsl_edma.c **** 
 142:../drivers/fsl_edma.c **** void EDMA_GetDefaultConfig(edma_config_t *config)
 143:../drivers/fsl_edma.c **** {
 210              		.loc 1 143 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215              	.LVL12:
 144:../drivers/fsl_edma.c ****     assert(config != NULL);
 145:../drivers/fsl_edma.c **** 
 146:../drivers/fsl_edma.c ****     config->enableRoundRobinArbitration = false;
 216              		.loc 1 146 0
 217 0000 0023     		movs	r3, #0
 147:../drivers/fsl_edma.c ****     config->enableHaltOnError = true;
 218              		.loc 1 147 0
 219 0002 0122     		movs	r2, #1
 146:../drivers/fsl_edma.c ****     config->enableHaltOnError = true;
 220              		.loc 1 146 0
 221 0004 8370     		strb	r3, [r0, #2]
 222              		.loc 1 147 0
 223 0006 4270     		strb	r2, [r0, #1]
 148:../drivers/fsl_edma.c ****     config->enableContinuousLinkMode = false;
 224              		.loc 1 148 0
 225 0008 0370     		strb	r3, [r0]
 149:../drivers/fsl_edma.c ****     config->enableDebugMode = false;
 226              		.loc 1 149 0
 227 000a C370     		strb	r3, [r0, #3]
 228 000c 7047     		bx	lr
 229              		.cfi_endproc
 230              	.LFE161:
 232              		.section	.text.EDMA_SetMinorOffsetConfig,"ax",%progbits
 233              		.align	1
 234              		.global	EDMA_SetMinorOffsetConfig
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv4-sp-d16
 240              	EDMA_SetMinorOffsetConfig:
 241              	.LFB164:
 150:../drivers/fsl_edma.c **** }
 151:../drivers/fsl_edma.c **** 
 152:../drivers/fsl_edma.c **** void EDMA_ResetChannel(DMA_Type *base, uint32_t channel)
 153:../drivers/fsl_edma.c **** {
 154:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 155:../drivers/fsl_edma.c **** 
 156:../drivers/fsl_edma.c ****     EDMA_TcdReset((edma_tcd_t *)&base->TCD[channel]);
 157:../drivers/fsl_edma.c **** }
 158:../drivers/fsl_edma.c **** 
 159:../drivers/fsl_edma.c **** void EDMA_SetTransferConfig(DMA_Type *base, uint32_t channel, const edma_transfer_config_t *config,
 160:../drivers/fsl_edma.c **** {
 161:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 162:../drivers/fsl_edma.c ****     assert(config != NULL);
 163:../drivers/fsl_edma.c ****     assert(((uint32_t)nextTcd & 0x1FU) == 0);
 164:../drivers/fsl_edma.c **** 
 165:../drivers/fsl_edma.c ****     EDMA_TcdSetTransferConfig((edma_tcd_t *)&base->TCD[channel], config, nextTcd);
 166:../drivers/fsl_edma.c **** }
 167:../drivers/fsl_edma.c **** 
 168:../drivers/fsl_edma.c **** void EDMA_SetMinorOffsetConfig(DMA_Type *base, uint32_t channel, const edma_minor_offset_config_t *
 169:../drivers/fsl_edma.c **** {
 242              		.loc 1 169 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL13:
 247 0000 30B5     		push	{r4, r5, lr}
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 4, -12
 250              		.cfi_offset 5, -8
 251              		.cfi_offset 14, -4
 170:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 171:../drivers/fsl_edma.c ****     assert(config != NULL);
 172:../drivers/fsl_edma.c **** 
 173:../drivers/fsl_edma.c ****     uint32_t tmpreg;
 174:../drivers/fsl_edma.c **** 
 175:../drivers/fsl_edma.c ****     tmpreg = base->TCD[channel].NBYTES_MLOFFYES;
 252              		.loc 1 175 0
 253 0002 00EB4111 		add	r1, r0, r1, lsl #5
 254              	.LVL14:
 255 0006 41F20805 		movw	r5, #4104
 176:../drivers/fsl_edma.c ****     tmpreg &= ~(DMA_NBYTES_MLOFFYES_SMLOE_MASK | DMA_NBYTES_MLOFFYES_DMLOE_MASK | DMA_NBYTES_MLOFFY
 177:../drivers/fsl_edma.c ****     tmpreg |=
 178:../drivers/fsl_edma.c ****         (DMA_NBYTES_MLOFFYES_SMLOE(config->enableSrcMinorOffset) |
 179:../drivers/fsl_edma.c ****          DMA_NBYTES_MLOFFYES_DMLOE(config->enableDestMinorOffset) | DMA_NBYTES_MLOFFYES_MLOFF(confi
 256              		.loc 1 179 0
 257 000a 5068     		ldr	r0, [r2, #4]
 258              	.LVL15:
 259 000c 084B     		ldr	r3, .L10
 175:../drivers/fsl_edma.c ****     tmpreg &= ~(DMA_NBYTES_MLOFFYES_SMLOE_MASK | DMA_NBYTES_MLOFFYES_DMLOE_MASK | DMA_NBYTES_MLOFFY
 260              		.loc 1 175 0
 261 000e 4C59     		ldr	r4, [r1, r5]
 262              	.LVL16:
 263              		.loc 1 179 0
 264 0010 03EA8023 		and	r3, r3, r0, lsl #10
 178:../drivers/fsl_edma.c ****          DMA_NBYTES_MLOFFYES_DMLOE(config->enableDestMinorOffset) | DMA_NBYTES_MLOFFYES_MLOFF(confi
 265              		.loc 1 178 0
 266 0014 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 176:../drivers/fsl_edma.c ****     tmpreg &= ~(DMA_NBYTES_MLOFFYES_SMLOE_MASK | DMA_NBYTES_MLOFFYES_DMLOE_MASK | DMA_NBYTES_MLOFFY
 267              		.loc 1 176 0
 268 0016 C4F30904 		ubfx	r4, r4, #0, #10
 269              	.LVL17:
 270 001a 43EAC073 		orr	r3, r3, r0, lsl #31
 271 001e 1C43     		orrs	r4, r4, r3
 272              		.loc 1 179 0
 273 0020 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 274 0022 9B07     		lsls	r3, r3, #30
 275 0024 03F08043 		and	r3, r3, #1073741824
 177:../drivers/fsl_edma.c ****         (DMA_NBYTES_MLOFFYES_SMLOE(config->enableSrcMinorOffset) |
 276              		.loc 1 177 0
 277 0028 2343     		orrs	r3, r3, r4
 278              	.LVL18:
 180:../drivers/fsl_edma.c ****     base->TCD[channel].NBYTES_MLOFFYES = tmpreg;
 279              		.loc 1 180 0
 280 002a 4B51     		str	r3, [r1, r5]
 281 002c 30BD     		pop	{r4, r5, pc}
 282              	.L11:
 283 002e 00BF     		.align	2
 284              	.L10:
 285 0030 00FCFF3F 		.word	1073740800
 286              		.cfi_endproc
 287              	.LFE164:
 289              		.section	.text.EDMA_SetBandWidth,"ax",%progbits
 290              		.align	1
 291              		.global	EDMA_SetBandWidth
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	EDMA_SetBandWidth:
 298              	.LFB166:
 181:../drivers/fsl_edma.c **** }
 182:../drivers/fsl_edma.c **** 
 183:../drivers/fsl_edma.c **** void EDMA_SetChannelLink(DMA_Type *base, uint32_t channel, edma_channel_link_type_t type, uint32_t 
 184:../drivers/fsl_edma.c **** {
 185:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 186:../drivers/fsl_edma.c ****     assert(linkedChannel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 187:../drivers/fsl_edma.c **** 
 188:../drivers/fsl_edma.c ****     EDMA_TcdSetChannelLink((edma_tcd_t *)&base->TCD[channel], type, linkedChannel);
 189:../drivers/fsl_edma.c **** }
 190:../drivers/fsl_edma.c **** 
 191:../drivers/fsl_edma.c **** void EDMA_SetBandWidth(DMA_Type *base, uint32_t channel, edma_bandwidth_t bandWidth)
 192:../drivers/fsl_edma.c **** {
 299              		.loc 1 192 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL19:
 304 0000 10B5     		push	{r4, lr}
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 4, -8
 307              		.cfi_offset 14, -4
 193:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 194:../drivers/fsl_edma.c **** 
 195:../drivers/fsl_edma.c ****     base->TCD[channel].CSR = (base->TCD[channel].CSR & (~DMA_CSR_BWC_MASK)) | DMA_CSR_BWC(bandWidth
 308              		.loc 1 195 0
 309 0002 00EB4111 		add	r1, r0, r1, lsl #5
 310              	.LVL20:
 311 0006 41F21C04 		movw	r4, #4124
 312 000a 0B5B     		ldrh	r3, [r1, r4]
 313 000c C3F30D03 		ubfx	r3, r3, #0, #14
 314 0010 43EA8232 		orr	r2, r3, r2, lsl #14
 315              	.LVL21:
 316 0014 92B2     		uxth	r2, r2
 317 0016 0A53     		strh	r2, [r1, r4]	@ movhi
 318 0018 10BD     		pop	{r4, pc}
 319              		.cfi_endproc
 320              	.LFE166:
 322              		.section	.text.EDMA_SetModulo,"ax",%progbits
 323              		.align	1
 324              		.global	EDMA_SetModulo
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu fpv4-sp-d16
 330              	EDMA_SetModulo:
 331              	.LFB167:
 196:../drivers/fsl_edma.c **** }
 197:../drivers/fsl_edma.c **** 
 198:../drivers/fsl_edma.c **** void EDMA_SetModulo(DMA_Type *base, uint32_t channel, edma_modulo_t srcModulo, edma_modulo_t destMo
 199:../drivers/fsl_edma.c **** {
 332              		.loc 1 199 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              	.LVL22:
 337 0000 30B5     		push	{r4, r5, lr}
 338              		.cfi_def_cfa_offset 12
 339              		.cfi_offset 4, -12
 340              		.cfi_offset 5, -8
 341              		.cfi_offset 14, -4
 342 0002 00EB4111 		add	r1, r0, r1, lsl #5
 343              	.LVL23:
 200:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 201:../drivers/fsl_edma.c **** 
 202:../drivers/fsl_edma.c ****     uint32_t tmpreg;
 203:../drivers/fsl_edma.c **** 
 204:../drivers/fsl_edma.c ****     tmpreg = base->TCD[channel].ATTR & (~(DMA_ATTR_SMOD_MASK | DMA_ATTR_DMOD_MASK));
 344              		.loc 1 204 0
 345 0006 41F20605 		movw	r5, #4102
 205:../drivers/fsl_edma.c ****     base->TCD[channel].ATTR = tmpreg | DMA_ATTR_DMOD(destModulo) | DMA_ATTR_SMOD(srcModulo);
 346              		.loc 1 205 0
 347 000a DB00     		lsls	r3, r3, #3
 348              	.LVL24:
 204:../drivers/fsl_edma.c ****     base->TCD[channel].ATTR = tmpreg | DMA_ATTR_DMOD(destModulo) | DMA_ATTR_SMOD(srcModulo);
 349              		.loc 1 204 0
 350 000c 4C5B     		ldrh	r4, [r1, r5]
 351              	.LVL25:
 352              		.loc 1 205 0
 353 000e DBB2     		uxtb	r3, r3
 354 0010 43EAC223 		orr	r3, r3, r2, lsl #11
 204:../drivers/fsl_edma.c ****     base->TCD[channel].ATTR = tmpreg | DMA_ATTR_DMOD(destModulo) | DMA_ATTR_SMOD(srcModulo);
 355              		.loc 1 204 0
 356 0014 24F0F802 		bic	r2, r4, #248
 357              	.LVL26:
 358 0018 5205     		lsls	r2, r2, #21
 359 001a 520D     		lsrs	r2, r2, #21
 360              		.loc 1 205 0
 361 001c 1343     		orrs	r3, r3, r2
 362 001e 9BB2     		uxth	r3, r3
 363 0020 4B53     		strh	r3, [r1, r5]	@ movhi
 364 0022 30BD     		pop	{r4, r5, pc}
 365              		.cfi_endproc
 366              	.LFE167:
 368              		.section	.text.EDMA_EnableChannelInterrupts,"ax",%progbits
 369              		.align	1
 370              		.global	EDMA_EnableChannelInterrupts
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu fpv4-sp-d16
 376              	EDMA_EnableChannelInterrupts:
 377              	.LFB168:
 206:../drivers/fsl_edma.c **** }
 207:../drivers/fsl_edma.c **** 
 208:../drivers/fsl_edma.c **** void EDMA_EnableChannelInterrupts(DMA_Type *base, uint32_t channel, uint32_t mask)
 209:../drivers/fsl_edma.c **** {
 378              		.loc 1 209 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              	.LVL27:
 383 0000 30B5     		push	{r4, r5, lr}
 384              		.cfi_def_cfa_offset 12
 385              		.cfi_offset 4, -12
 386              		.cfi_offset 5, -8
 387              		.cfi_offset 14, -4
 210:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 211:../drivers/fsl_edma.c **** 
 212:../drivers/fsl_edma.c ****     /* Enable error interrupt */
 213:../drivers/fsl_edma.c ****     if (mask & kEDMA_ErrorInterruptEnable)
 388              		.loc 1 213 0
 389 0002 D507     		lsls	r5, r2, #31
 390 0004 04D5     		bpl	.L15
 214:../drivers/fsl_edma.c ****     {
 215:../drivers/fsl_edma.c ****         base->EEI |= (0x1U << channel);
 391              		.loc 1 215 0
 392 0006 4469     		ldr	r4, [r0, #20]
 393 0008 0123     		movs	r3, #1
 394 000a 8B40     		lsls	r3, r3, r1
 395 000c 2343     		orrs	r3, r3, r4
 396 000e 4361     		str	r3, [r0, #20]
 397              	.L15:
 216:../drivers/fsl_edma.c ****     }
 217:../drivers/fsl_edma.c **** 
 218:../drivers/fsl_edma.c ****     /* Enable Major interrupt */
 219:../drivers/fsl_edma.c ****     if (mask & kEDMA_MajorInterruptEnable)
 398              		.loc 1 219 0
 399 0010 9407     		lsls	r4, r2, #30
 400 0012 08D5     		bpl	.L16
 220:../drivers/fsl_edma.c ****     {
 221:../drivers/fsl_edma.c ****         base->TCD[channel].CSR |= DMA_CSR_INTMAJOR_MASK;
 401              		.loc 1 221 0
 402 0014 00EB4114 		add	r4, r0, r1, lsl #5
 403 0018 41F21C05 		movw	r5, #4124
 404 001c 635B     		ldrh	r3, [r4, r5]
 405 001e 9BB2     		uxth	r3, r3
 406 0020 43F00203 		orr	r3, r3, #2
 407 0024 6353     		strh	r3, [r4, r5]	@ movhi
 408              	.L16:
 222:../drivers/fsl_edma.c ****     }
 223:../drivers/fsl_edma.c **** 
 224:../drivers/fsl_edma.c ****     /* Enable Half major interrupt */
 225:../drivers/fsl_edma.c ****     if (mask & kEDMA_HalfInterruptEnable)
 409              		.loc 1 225 0
 410 0026 5307     		lsls	r3, r2, #29
 411 0028 08D5     		bpl	.L14
 226:../drivers/fsl_edma.c ****     {
 227:../drivers/fsl_edma.c ****         base->TCD[channel].CSR |= DMA_CSR_INTHALF_MASK;
 412              		.loc 1 227 0
 413 002a 00EB4110 		add	r0, r0, r1, lsl #5
 414              	.LVL28:
 415 002e 41F21C02 		movw	r2, #4124
 416              	.LVL29:
 417 0032 835A     		ldrh	r3, [r0, r2]
 418 0034 9BB2     		uxth	r3, r3
 419 0036 43F00403 		orr	r3, r3, #4
 420 003a 8352     		strh	r3, [r0, r2]	@ movhi
 421              	.L14:
 422 003c 30BD     		pop	{r4, r5, pc}
 423              		.cfi_endproc
 424              	.LFE168:
 426              		.section	.text.EDMA_DisableChannelInterrupts,"ax",%progbits
 427              		.align	1
 428              		.global	EDMA_DisableChannelInterrupts
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu fpv4-sp-d16
 434              	EDMA_DisableChannelInterrupts:
 435              	.LFB169:
 228:../drivers/fsl_edma.c ****     }
 229:../drivers/fsl_edma.c **** }
 230:../drivers/fsl_edma.c **** 
 231:../drivers/fsl_edma.c **** void EDMA_DisableChannelInterrupts(DMA_Type *base, uint32_t channel, uint32_t mask)
 232:../drivers/fsl_edma.c **** {
 436              		.loc 1 232 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              	.LVL30:
 441 0000 30B5     		push	{r4, r5, lr}
 442              		.cfi_def_cfa_offset 12
 443              		.cfi_offset 4, -12
 444              		.cfi_offset 5, -8
 445              		.cfi_offset 14, -4
 233:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 234:../drivers/fsl_edma.c **** 
 235:../drivers/fsl_edma.c ****     /* Disable error interrupt */
 236:../drivers/fsl_edma.c ****     if (mask & kEDMA_ErrorInterruptEnable)
 446              		.loc 1 236 0
 447 0002 D507     		lsls	r5, r2, #31
 448 0004 05D5     		bpl	.L28
 237:../drivers/fsl_edma.c ****     {
 238:../drivers/fsl_edma.c ****         base->EEI &= ~(0x1U << channel);
 449              		.loc 1 238 0
 450 0006 4369     		ldr	r3, [r0, #20]
 451 0008 0124     		movs	r4, #1
 452 000a 8C40     		lsls	r4, r4, r1
 453 000c 23EA0403 		bic	r3, r3, r4
 454 0010 4361     		str	r3, [r0, #20]
 455              	.L28:
 239:../drivers/fsl_edma.c ****     }
 240:../drivers/fsl_edma.c **** 
 241:../drivers/fsl_edma.c ****     /* Disable Major interrupt */
 242:../drivers/fsl_edma.c ****     if (mask & kEDMA_MajorInterruptEnable)
 456              		.loc 1 242 0
 457 0012 9407     		lsls	r4, r2, #30
 458 0014 09D5     		bpl	.L29
 243:../drivers/fsl_edma.c ****     {
 244:../drivers/fsl_edma.c ****         base->TCD[channel].CSR &= ~DMA_CSR_INTMAJOR_MASK;
 459              		.loc 1 244 0
 460 0016 00EB4114 		add	r4, r0, r1, lsl #5
 461 001a 41F21C05 		movw	r5, #4124
 462 001e 635B     		ldrh	r3, [r4, r5]
 463 0020 23F00203 		bic	r3, r3, #2
 464 0024 1B04     		lsls	r3, r3, #16
 465 0026 1B0C     		lsrs	r3, r3, #16
 466 0028 6353     		strh	r3, [r4, r5]	@ movhi
 467              	.L29:
 245:../drivers/fsl_edma.c ****     }
 246:../drivers/fsl_edma.c **** 
 247:../drivers/fsl_edma.c ****     /* Disable Half major interrupt */
 248:../drivers/fsl_edma.c ****     if (mask & kEDMA_HalfInterruptEnable)
 468              		.loc 1 248 0
 469 002a 5307     		lsls	r3, r2, #29
 470 002c 09D5     		bpl	.L27
 249:../drivers/fsl_edma.c ****     {
 250:../drivers/fsl_edma.c ****         base->TCD[channel].CSR &= ~DMA_CSR_INTHALF_MASK;
 471              		.loc 1 250 0
 472 002e 00EB4110 		add	r0, r0, r1, lsl #5
 473              	.LVL31:
 474 0032 41F21C02 		movw	r2, #4124
 475              	.LVL32:
 476 0036 835A     		ldrh	r3, [r0, r2]
 477 0038 23F00403 		bic	r3, r3, #4
 478 003c 1B04     		lsls	r3, r3, #16
 479 003e 1B0C     		lsrs	r3, r3, #16
 480 0040 8352     		strh	r3, [r0, r2]	@ movhi
 481              	.L27:
 482 0042 30BD     		pop	{r4, r5, pc}
 483              		.cfi_endproc
 484              	.LFE169:
 486              		.section	.text.EDMA_TcdReset,"ax",%progbits
 487              		.align	1
 488              		.global	EDMA_TcdReset
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 492              		.fpu fpv4-sp-d16
 494              	EDMA_TcdReset:
 495              	.LFB170:
 251:../drivers/fsl_edma.c ****     }
 252:../drivers/fsl_edma.c **** }
 253:../drivers/fsl_edma.c **** 
 254:../drivers/fsl_edma.c **** void EDMA_TcdReset(edma_tcd_t *tcd)
 255:../drivers/fsl_edma.c **** {
 496              		.loc 1 255 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501              	.LVL33:
 256:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 257:../drivers/fsl_edma.c ****     assert(((uint32_t)tcd & 0x1FU) == 0);
 258:../drivers/fsl_edma.c **** 
 259:../drivers/fsl_edma.c ****     /* Reset channel TCD */
 260:../drivers/fsl_edma.c ****     tcd->SADDR = 0U;
 502              		.loc 1 260 0
 503 0000 0023     		movs	r3, #0
 261:../drivers/fsl_edma.c ****     tcd->SOFF = 0U;
 262:../drivers/fsl_edma.c ****     tcd->ATTR = 0U;
 263:../drivers/fsl_edma.c ****     tcd->NBYTES = 0U;
 264:../drivers/fsl_edma.c ****     tcd->SLAST = 0U;
 265:../drivers/fsl_edma.c ****     tcd->DADDR = 0U;
 266:../drivers/fsl_edma.c ****     tcd->DOFF = 0U;
 267:../drivers/fsl_edma.c ****     tcd->CITER = 0U;
 268:../drivers/fsl_edma.c ****     tcd->DLAST_SGA = 0U;
 269:../drivers/fsl_edma.c ****     /* Enable auto disable request feature */
 270:../drivers/fsl_edma.c ****     tcd->CSR = DMA_CSR_DREQ(true);
 504              		.loc 1 270 0
 505 0002 0822     		movs	r2, #8
 260:../drivers/fsl_edma.c ****     tcd->SOFF = 0U;
 506              		.loc 1 260 0
 507 0004 0360     		str	r3, [r0]
 261:../drivers/fsl_edma.c ****     tcd->SOFF = 0U;
 508              		.loc 1 261 0
 509 0006 8380     		strh	r3, [r0, #4]	@ movhi
 262:../drivers/fsl_edma.c ****     tcd->NBYTES = 0U;
 510              		.loc 1 262 0
 511 0008 C380     		strh	r3, [r0, #6]	@ movhi
 263:../drivers/fsl_edma.c ****     tcd->SLAST = 0U;
 512              		.loc 1 263 0
 513 000a 8360     		str	r3, [r0, #8]
 264:../drivers/fsl_edma.c ****     tcd->DADDR = 0U;
 514              		.loc 1 264 0
 515 000c C360     		str	r3, [r0, #12]
 265:../drivers/fsl_edma.c ****     tcd->DOFF = 0U;
 516              		.loc 1 265 0
 517 000e 0361     		str	r3, [r0, #16]
 266:../drivers/fsl_edma.c ****     tcd->CITER = 0U;
 518              		.loc 1 266 0
 519 0010 8382     		strh	r3, [r0, #20]	@ movhi
 267:../drivers/fsl_edma.c ****     tcd->DLAST_SGA = 0U;
 520              		.loc 1 267 0
 521 0012 C382     		strh	r3, [r0, #22]	@ movhi
 268:../drivers/fsl_edma.c ****     /* Enable auto disable request feature */
 522              		.loc 1 268 0
 523 0014 8361     		str	r3, [r0, #24]
 524              		.loc 1 270 0
 525 0016 8283     		strh	r2, [r0, #28]	@ movhi
 271:../drivers/fsl_edma.c ****     tcd->BITER = 0U;
 526              		.loc 1 271 0
 527 0018 C383     		strh	r3, [r0, #30]	@ movhi
 528 001a 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE170:
 532              		.section	.text.EDMA_ResetChannel,"ax",%progbits
 533              		.align	1
 534              		.global	EDMA_ResetChannel
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv4-sp-d16
 540              	EDMA_ResetChannel:
 541              	.LFB162:
 153:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 542              		.loc 1 153 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 547              	.LVL34:
 156:../drivers/fsl_edma.c **** }
 548              		.loc 1 156 0
 549 0000 8031     		adds	r1, r1, #128
 550              	.LVL35:
 551 0002 00EB4110 		add	r0, r0, r1, lsl #5
 552              	.LVL36:
 553 0006 FFF7FEBF 		b	EDMA_TcdReset
 554              	.LVL37:
 555              		.cfi_endproc
 556              	.LFE162:
 558              		.section	.text.EDMA_TcdSetTransferConfig,"ax",%progbits
 559              		.align	1
 560              		.global	EDMA_TcdSetTransferConfig
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	EDMA_TcdSetTransferConfig:
 567              	.LFB171:
 272:../drivers/fsl_edma.c **** }
 273:../drivers/fsl_edma.c **** 
 274:../drivers/fsl_edma.c **** void EDMA_TcdSetTransferConfig(edma_tcd_t *tcd, const edma_transfer_config_t *config, edma_tcd_t *n
 275:../drivers/fsl_edma.c **** {
 568              		.loc 1 275 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              	.LVL38:
 276:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 277:../drivers/fsl_edma.c ****     assert(((uint32_t)tcd & 0x1FU) == 0);
 278:../drivers/fsl_edma.c ****     assert(config != NULL);
 279:../drivers/fsl_edma.c ****     assert(((uint32_t)nextTcd & 0x1FU) == 0);
 280:../drivers/fsl_edma.c **** 
 281:../drivers/fsl_edma.c ****     /* source address */
 282:../drivers/fsl_edma.c ****     tcd->SADDR = config->srcAddr;
 573              		.loc 1 282 0
 574 0000 0B68     		ldr	r3, [r1]
 575 0002 0360     		str	r3, [r0]
 283:../drivers/fsl_edma.c ****     /* destination address */
 284:../drivers/fsl_edma.c ****     tcd->DADDR = config->destAddr;
 576              		.loc 1 284 0
 577 0004 4B68     		ldr	r3, [r1, #4]
 578 0006 0361     		str	r3, [r0, #16]
 285:../drivers/fsl_edma.c ****     /* Source data and destination data transfer size */
 286:../drivers/fsl_edma.c ****     tcd->ATTR = DMA_ATTR_SSIZE(config->srcTransferSize) | DMA_ATTR_DSIZE(config->destTransferSize);
 579              		.loc 1 286 0
 580 0008 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 581 000a 1B02     		lsls	r3, r3, #8
 275:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 582              		.loc 1 275 0
 583 000c 10B5     		push	{r4, lr}
 584              		.cfi_def_cfa_offset 8
 585              		.cfi_offset 4, -8
 586              		.cfi_offset 14, -4
 587              		.loc 1 286 0
 588 000e 03F4E064 		and	r4, r3, #1792
 589 0012 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 590 0014 03F00703 		and	r3, r3, #7
 591 0018 2343     		orrs	r3, r3, r4
 592 001a C380     		strh	r3, [r0, #6]	@ movhi
 287:../drivers/fsl_edma.c ****     /* Source address signed offset */
 288:../drivers/fsl_edma.c ****     tcd->SOFF = config->srcOffset;
 593              		.loc 1 288 0
 594 001c 4B89     		ldrh	r3, [r1, #10]
 595 001e 8380     		strh	r3, [r0, #4]	@ movhi
 289:../drivers/fsl_edma.c ****     /* Destination address signed offset */
 290:../drivers/fsl_edma.c ****     tcd->DOFF = config->destOffset;
 596              		.loc 1 290 0
 597 0020 8B89     		ldrh	r3, [r1, #12]
 598 0022 8382     		strh	r3, [r0, #20]	@ movhi
 291:../drivers/fsl_edma.c ****     /* Minor byte transfer count */
 292:../drivers/fsl_edma.c ****     tcd->NBYTES = config->minorLoopBytes;
 599              		.loc 1 292 0
 600 0024 0B69     		ldr	r3, [r1, #16]
 601 0026 8360     		str	r3, [r0, #8]
 293:../drivers/fsl_edma.c ****     /* Current major iteration count */
 294:../drivers/fsl_edma.c ****     tcd->CITER = config->majorLoopCounts;
 602              		.loc 1 294 0
 603 0028 8B8A     		ldrh	r3, [r1, #20]
 604 002a C382     		strh	r3, [r0, #22]	@ movhi
 295:../drivers/fsl_edma.c ****     /* Starting major iteration count */
 296:../drivers/fsl_edma.c ****     tcd->BITER = config->majorLoopCounts;
 605              		.loc 1 296 0
 606 002c C383     		strh	r3, [r0, #30]	@ movhi
 297:../drivers/fsl_edma.c ****     /* Enable scatter/gather processing */
 298:../drivers/fsl_edma.c ****     if (nextTcd != NULL)
 607              		.loc 1 298 0
 608 002e 3AB1     		cbz	r2, .L42
 299:../drivers/fsl_edma.c ****     {
 300:../drivers/fsl_edma.c ****         tcd->DLAST_SGA = (uint32_t)nextTcd;
 609              		.loc 1 300 0
 610 0030 8261     		str	r2, [r0, #24]
 301:../drivers/fsl_edma.c ****         /*
 302:../drivers/fsl_edma.c ****             Before call EDMA_TcdSetTransferConfig or EDMA_SetTransferConfig,
 303:../drivers/fsl_edma.c ****             user must call EDMA_TcdReset or EDMA_ResetChannel which will set
 304:../drivers/fsl_edma.c ****             DREQ, so must use "|" or "&" rather than "=".
 305:../drivers/fsl_edma.c **** 
 306:../drivers/fsl_edma.c ****             Clear the DREQ bit because scatter gather has been enabled, so the
 307:../drivers/fsl_edma.c ****             previous transfer is not the last transfer, and channel request should
 308:../drivers/fsl_edma.c ****             be enabled at the next transfer(the next TCD).
 309:../drivers/fsl_edma.c ****         */
 310:../drivers/fsl_edma.c ****         tcd->CSR = (tcd->CSR | DMA_CSR_ESG_MASK) & ~DMA_CSR_DREQ_MASK;
 611              		.loc 1 310 0
 612 0032 838B     		ldrh	r3, [r0, #28]
 613 0034 9BB2     		uxth	r3, r3
 614 0036 23F00803 		bic	r3, r3, #8
 615 003a 43F01003 		orr	r3, r3, #16
 616 003e 8383     		strh	r3, [r0, #28]	@ movhi
 617              	.L42:
 618 0040 10BD     		pop	{r4, pc}
 619              		.cfi_endproc
 620              	.LFE171:
 622              		.section	.text.EDMA_SetTransferConfig,"ax",%progbits
 623              		.align	1
 624              		.global	EDMA_SetTransferConfig
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 628              		.fpu fpv4-sp-d16
 630              	EDMA_SetTransferConfig:
 631              	.LFB163:
 160:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 632              		.loc 1 160 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LVL39:
 638 0000 30B4     		push	{r4, r5}
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 4, -8
 641              		.cfi_offset 5, -4
 160:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 642              		.loc 1 160 0
 643 0002 1546     		mov	r5, r2
 165:../drivers/fsl_edma.c **** }
 644              		.loc 1 165 0
 645 0004 01F18004 		add	r4, r1, #128
 646 0008 00EB4410 		add	r0, r0, r4, lsl #5
 647              	.LVL40:
 648 000c 2946     		mov	r1, r5
 649              	.LVL41:
 650 000e 1A46     		mov	r2, r3
 651              	.LVL42:
 166:../drivers/fsl_edma.c **** 
 652              		.loc 1 166 0
 653 0010 30BC     		pop	{r4, r5}
 654              		.cfi_restore 5
 655              		.cfi_restore 4
 656              		.cfi_def_cfa_offset 0
 657              	.LVL43:
 165:../drivers/fsl_edma.c **** }
 658              		.loc 1 165 0
 659 0012 FFF7FEBF 		b	EDMA_TcdSetTransferConfig
 660              	.LVL44:
 661              		.cfi_endproc
 662              	.LFE163:
 664              		.section	.text.EDMA_TcdSetMinorOffsetConfig,"ax",%progbits
 665              		.align	1
 666              		.global	EDMA_TcdSetMinorOffsetConfig
 667              		.syntax unified
 668              		.thumb
 669              		.thumb_func
 670              		.fpu fpv4-sp-d16
 672              	EDMA_TcdSetMinorOffsetConfig:
 673              	.LFB172:
 311:../drivers/fsl_edma.c ****     }
 312:../drivers/fsl_edma.c **** }
 313:../drivers/fsl_edma.c **** 
 314:../drivers/fsl_edma.c **** void EDMA_TcdSetMinorOffsetConfig(edma_tcd_t *tcd, const edma_minor_offset_config_t *config)
 315:../drivers/fsl_edma.c **** {
 674              		.loc 1 315 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              	.LVL45:
 316:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 317:../drivers/fsl_edma.c ****     assert(((uint32_t)tcd & 0x1FU) == 0);
 318:../drivers/fsl_edma.c **** 
 319:../drivers/fsl_edma.c ****     uint32_t tmpreg;
 320:../drivers/fsl_edma.c **** 
 321:../drivers/fsl_edma.c ****     tmpreg = tcd->NBYTES &
 679              		.loc 1 321 0
 680 0000 8368     		ldr	r3, [r0, #8]
 681              	.LVL46:
 322:../drivers/fsl_edma.c ****              ~(DMA_NBYTES_MLOFFYES_SMLOE_MASK | DMA_NBYTES_MLOFFYES_DMLOE_MASK | DMA_NBYTES_MLOFFYE
 323:../drivers/fsl_edma.c ****     tmpreg |=
 324:../drivers/fsl_edma.c ****         (DMA_NBYTES_MLOFFYES_SMLOE(config->enableSrcMinorOffset) |
 682              		.loc 1 324 0
 683 0002 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 321:../drivers/fsl_edma.c ****              ~(DMA_NBYTES_MLOFFYES_SMLOE_MASK | DMA_NBYTES_MLOFFYES_DMLOE_MASK | DMA_NBYTES_MLOFFYE
 684              		.loc 1 321 0
 685 0004 C3F30903 		ubfx	r3, r3, #0, #10
 686              	.LVL47:
 687 0008 43EAC273 		orr	r3, r3, r2, lsl #31
 315:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 688              		.loc 1 315 0
 689 000c 10B5     		push	{r4, lr}
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 4, -8
 692              		.cfi_offset 14, -4
 325:../drivers/fsl_edma.c ****          DMA_NBYTES_MLOFFYES_DMLOE(config->enableDestMinorOffset) | DMA_NBYTES_MLOFFYES_MLOFF(confi
 693              		.loc 1 325 0
 694 000e 064A     		ldr	r2, .L49
 695 0010 4C68     		ldr	r4, [r1, #4]
 696 0012 02EA8422 		and	r2, r2, r4, lsl #10
 697 0016 1A43     		orrs	r2, r2, r3
 698 0018 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 699 001a 9B07     		lsls	r3, r3, #30
 700 001c 03F08043 		and	r3, r3, #1073741824
 323:../drivers/fsl_edma.c ****         (DMA_NBYTES_MLOFFYES_SMLOE(config->enableSrcMinorOffset) |
 701              		.loc 1 323 0
 702 0020 1343     		orrs	r3, r3, r2
 703              	.LVL48:
 326:../drivers/fsl_edma.c ****     tcd->NBYTES = tmpreg;
 704              		.loc 1 326 0
 705 0022 8360     		str	r3, [r0, #8]
 706 0024 10BD     		pop	{r4, pc}
 707              	.L50:
 708 0026 00BF     		.align	2
 709              	.L49:
 710 0028 00FCFF3F 		.word	1073740800
 711              		.cfi_endproc
 712              	.LFE172:
 714              		.section	.text.EDMA_TcdSetChannelLink,"ax",%progbits
 715              		.align	1
 716              		.global	EDMA_TcdSetChannelLink
 717              		.syntax unified
 718              		.thumb
 719              		.thumb_func
 720              		.fpu fpv4-sp-d16
 722              	EDMA_TcdSetChannelLink:
 723              	.LFB173:
 327:../drivers/fsl_edma.c **** }
 328:../drivers/fsl_edma.c **** 
 329:../drivers/fsl_edma.c **** void EDMA_TcdSetChannelLink(edma_tcd_t *tcd, edma_channel_link_type_t type, uint32_t linkedChannel)
 330:../drivers/fsl_edma.c **** {
 724              		.loc 1 330 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728              		@ link register save eliminated.
 729              	.LVL49:
 331:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 332:../drivers/fsl_edma.c ****     assert(((uint32_t)tcd & 0x1FU) == 0);
 333:../drivers/fsl_edma.c ****     assert(linkedChannel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 334:../drivers/fsl_edma.c **** 
 335:../drivers/fsl_edma.c ****     if (type == kEDMA_MinorLink) /* Minor link config */
 730              		.loc 1 335 0
 731 0000 0129     		cmp	r1, #1
 732 0002 1DD1     		bne	.L52
 733              	.LBB107:
 336:../drivers/fsl_edma.c ****     {
 337:../drivers/fsl_edma.c ****         uint32_t tmpreg;
 338:../drivers/fsl_edma.c **** 
 339:../drivers/fsl_edma.c ****         /* Enable minor link */
 340:../drivers/fsl_edma.c ****         tcd->CITER |= DMA_CITER_ELINKYES_ELINK_MASK;
 734              		.loc 1 340 0
 735 0004 C38A     		ldrh	r3, [r0, #22]
 736 0006 6FEA4343 		mvn	r3, r3, lsl #17
 737 000a 6FEA5343 		mvn	r3, r3, lsr #17
 738 000e 9BB2     		uxth	r3, r3
 739 0010 C382     		strh	r3, [r0, #22]	@ movhi
 341:../drivers/fsl_edma.c ****         tcd->BITER |= DMA_BITER_ELINKYES_ELINK_MASK;
 740              		.loc 1 341 0
 741 0012 C38B     		ldrh	r3, [r0, #30]
 742 0014 6FEA4343 		mvn	r3, r3, lsl #17
 743 0018 6FEA5343 		mvn	r3, r3, lsr #17
 744 001c 9BB2     		uxth	r3, r3
 745 001e C383     		strh	r3, [r0, #30]	@ movhi
 342:../drivers/fsl_edma.c ****         /* Set likned channel */
 343:../drivers/fsl_edma.c ****         tmpreg = tcd->CITER & (~DMA_CITER_ELINKYES_LINKCH_MASK);
 746              		.loc 1 343 0
 747 0020 C38A     		ldrh	r3, [r0, #22]
 344:../drivers/fsl_edma.c ****         tmpreg |= DMA_CITER_ELINKYES_LINKCH(linkedChannel);
 748              		.loc 1 344 0
 749 0022 5202     		lsls	r2, r2, #9
 750              	.LVL50:
 343:../drivers/fsl_edma.c ****         tmpreg |= DMA_CITER_ELINKYES_LINKCH(linkedChannel);
 751              		.loc 1 343 0
 752 0024 9BB2     		uxth	r3, r3
 753              		.loc 1 344 0
 754 0026 02F4F052 		and	r2, r2, #7680
 343:../drivers/fsl_edma.c ****         tmpreg |= DMA_CITER_ELINKYES_LINKCH(linkedChannel);
 755              		.loc 1 343 0
 756 002a 23F4F053 		bic	r3, r3, #7680
 757              	.LVL51:
 345:../drivers/fsl_edma.c ****         tcd->CITER = tmpreg;
 758              		.loc 1 345 0
 759 002e 1343     		orrs	r3, r3, r2
 760              	.LVL52:
 761 0030 C382     		strh	r3, [r0, #22]	@ movhi
 346:../drivers/fsl_edma.c ****         tmpreg = tcd->BITER & (~DMA_BITER_ELINKYES_LINKCH_MASK);
 762              		.loc 1 346 0
 763 0032 C38B     		ldrh	r3, [r0, #30]
 764              	.LVL53:
 765 0034 9BB2     		uxth	r3, r3
 766 0036 23F4F053 		bic	r3, r3, #7680
 767              	.LVL54:
 347:../drivers/fsl_edma.c ****         tmpreg |= DMA_BITER_ELINKYES_LINKCH(linkedChannel);
 348:../drivers/fsl_edma.c ****         tcd->BITER = tmpreg;
 768              		.loc 1 348 0
 769 003a 1A43     		orrs	r2, r2, r3
 770              	.LVL55:
 771 003c C283     		strh	r2, [r0, #30]	@ movhi
 772              	.LBE107:
 773 003e 7047     		bx	lr
 774              	.LVL56:
 775              	.L52:
 349:../drivers/fsl_edma.c ****     }
 350:../drivers/fsl_edma.c ****     else if (type == kEDMA_MajorLink) /* Major link config */
 776              		.loc 1 350 0
 777 0040 0229     		cmp	r1, #2
 778 0042 0ED1     		bne	.L54
 779              	.LVL57:
 780              	.LBB108:
 781              	.LBB109:
 351:../drivers/fsl_edma.c ****     {
 352:../drivers/fsl_edma.c ****         uint32_t tmpreg;
 353:../drivers/fsl_edma.c **** 
 354:../drivers/fsl_edma.c ****         /* Enable major link */
 355:../drivers/fsl_edma.c ****         tcd->CSR |= DMA_CSR_MAJORELINK_MASK;
 782              		.loc 1 355 0
 783 0044 838B     		ldrh	r3, [r0, #28]
 784 0046 9BB2     		uxth	r3, r3
 785 0048 43F02003 		orr	r3, r3, #32
 786 004c 8383     		strh	r3, [r0, #28]	@ movhi
 356:../drivers/fsl_edma.c ****         /* Set major linked channel */
 357:../drivers/fsl_edma.c ****         tmpreg = tcd->CSR & (~DMA_CSR_MAJORLINKCH_MASK);
 787              		.loc 1 357 0
 788 004e 838B     		ldrh	r3, [r0, #28]
 358:../drivers/fsl_edma.c ****         tcd->CSR = tmpreg | DMA_CSR_MAJORLINKCH(linkedChannel);
 789              		.loc 1 358 0
 790 0050 1202     		lsls	r2, r2, #8
 791              	.LVL58:
 357:../drivers/fsl_edma.c ****         tcd->CSR = tmpreg | DMA_CSR_MAJORLINKCH(linkedChannel);
 792              		.loc 1 357 0
 793 0052 9BB2     		uxth	r3, r3
 794              	.LVL59:
 795              		.loc 1 358 0
 796 0054 02F47062 		and	r2, r2, #3840
 357:../drivers/fsl_edma.c ****         tcd->CSR = tmpreg | DMA_CSR_MAJORLINKCH(linkedChannel);
 797              		.loc 1 357 0
 798 0058 23F47063 		bic	r3, r3, #3840
 799              	.LVL60:
 800              		.loc 1 358 0
 801 005c 1A43     		orrs	r2, r2, r3
 802 005e 8283     		strh	r2, [r0, #28]	@ movhi
 803 0060 7047     		bx	lr
 804              	.LVL61:
 805              	.L54:
 806              	.LBE109:
 807              	.LBE108:
 359:../drivers/fsl_edma.c ****     }
 360:../drivers/fsl_edma.c ****     else /* Link none */
 361:../drivers/fsl_edma.c ****     {
 362:../drivers/fsl_edma.c ****         tcd->CITER &= ~DMA_CITER_ELINKYES_ELINK_MASK;
 808              		.loc 1 362 0
 809 0062 C38A     		ldrh	r3, [r0, #22]
 810 0064 C3F30E03 		ubfx	r3, r3, #0, #15
 811 0068 C382     		strh	r3, [r0, #22]	@ movhi
 363:../drivers/fsl_edma.c ****         tcd->BITER &= ~DMA_BITER_ELINKYES_ELINK_MASK;
 812              		.loc 1 363 0
 813 006a C38B     		ldrh	r3, [r0, #30]
 814 006c C3F30E03 		ubfx	r3, r3, #0, #15
 815 0070 C383     		strh	r3, [r0, #30]	@ movhi
 364:../drivers/fsl_edma.c ****         tcd->CSR &= ~DMA_CSR_MAJORELINK_MASK;
 816              		.loc 1 364 0
 817 0072 838B     		ldrh	r3, [r0, #28]
 818 0074 23F02003 		bic	r3, r3, #32
 819 0078 1B04     		lsls	r3, r3, #16
 820 007a 1B0C     		lsrs	r3, r3, #16
 821 007c 8383     		strh	r3, [r0, #28]	@ movhi
 822 007e 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE173:
 826              		.section	.text.EDMA_SetChannelLink,"ax",%progbits
 827              		.align	1
 828              		.global	EDMA_SetChannelLink
 829              		.syntax unified
 830              		.thumb
 831              		.thumb_func
 832              		.fpu fpv4-sp-d16
 834              	EDMA_SetChannelLink:
 835              	.LFB165:
 184:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 836              		.loc 1 184 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 841              	.LVL62:
 842 0000 30B4     		push	{r4, r5}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 4, -8
 845              		.cfi_offset 5, -4
 184:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 846              		.loc 1 184 0
 847 0002 1546     		mov	r5, r2
 188:../drivers/fsl_edma.c **** }
 848              		.loc 1 188 0
 849 0004 01F18004 		add	r4, r1, #128
 850 0008 00EB4410 		add	r0, r0, r4, lsl #5
 851              	.LVL63:
 852 000c 2946     		mov	r1, r5
 853              	.LVL64:
 854 000e 1A46     		mov	r2, r3
 855              	.LVL65:
 189:../drivers/fsl_edma.c **** 
 856              		.loc 1 189 0
 857 0010 30BC     		pop	{r4, r5}
 858              		.cfi_restore 5
 859              		.cfi_restore 4
 860              		.cfi_def_cfa_offset 0
 861              	.LVL66:
 188:../drivers/fsl_edma.c **** }
 862              		.loc 1 188 0
 863 0012 FFF7FEBF 		b	EDMA_TcdSetChannelLink
 864              	.LVL67:
 865              		.cfi_endproc
 866              	.LFE165:
 868              		.section	.text.EDMA_TcdSetModulo,"ax",%progbits
 869              		.align	1
 870              		.global	EDMA_TcdSetModulo
 871              		.syntax unified
 872              		.thumb
 873              		.thumb_func
 874              		.fpu fpv4-sp-d16
 876              	EDMA_TcdSetModulo:
 877              	.LFB174:
 365:../drivers/fsl_edma.c ****     }
 366:../drivers/fsl_edma.c **** }
 367:../drivers/fsl_edma.c **** 
 368:../drivers/fsl_edma.c **** void EDMA_TcdSetModulo(edma_tcd_t *tcd, edma_modulo_t srcModulo, edma_modulo_t destModulo)
 369:../drivers/fsl_edma.c **** {
 878              		.loc 1 369 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              		@ link register save eliminated.
 883              	.LVL68:
 370:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 371:../drivers/fsl_edma.c ****     assert(((uint32_t)tcd & 0x1FU) == 0);
 372:../drivers/fsl_edma.c **** 
 373:../drivers/fsl_edma.c ****     uint32_t tmpreg;
 374:../drivers/fsl_edma.c **** 
 375:../drivers/fsl_edma.c ****     tmpreg = tcd->ATTR & (~(DMA_ATTR_SMOD_MASK | DMA_ATTR_DMOD_MASK));
 884              		.loc 1 375 0
 885 0000 C388     		ldrh	r3, [r0, #6]
 886              	.LVL69:
 376:../drivers/fsl_edma.c ****     tcd->ATTR = tmpreg | DMA_ATTR_DMOD(destModulo) | DMA_ATTR_SMOD(srcModulo);
 887              		.loc 1 376 0
 888 0002 D200     		lsls	r2, r2, #3
 889              	.LVL70:
 890 0004 D2B2     		uxtb	r2, r2
 891 0006 42EAC122 		orr	r2, r2, r1, lsl #11
 375:../drivers/fsl_edma.c ****     tcd->ATTR = tmpreg | DMA_ATTR_DMOD(destModulo) | DMA_ATTR_SMOD(srcModulo);
 892              		.loc 1 375 0
 893 000a 23F0F801 		bic	r1, r3, #248
 894              	.LVL71:
 895 000e 4905     		lsls	r1, r1, #21
 896 0010 490D     		lsrs	r1, r1, #21
 897              		.loc 1 376 0
 898 0012 0A43     		orrs	r2, r2, r1
 899 0014 92B2     		uxth	r2, r2
 900 0016 C280     		strh	r2, [r0, #6]	@ movhi
 901 0018 7047     		bx	lr
 902              		.cfi_endproc
 903              	.LFE174:
 905              		.section	.text.EDMA_TcdEnableInterrupts,"ax",%progbits
 906              		.align	1
 907              		.global	EDMA_TcdEnableInterrupts
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu fpv4-sp-d16
 913              	EDMA_TcdEnableInterrupts:
 914              	.LFB175:
 377:../drivers/fsl_edma.c **** }
 378:../drivers/fsl_edma.c **** 
 379:../drivers/fsl_edma.c **** void EDMA_TcdEnableInterrupts(edma_tcd_t *tcd, uint32_t mask)
 380:../drivers/fsl_edma.c **** {
 915              		.loc 1 380 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		@ link register save eliminated.
 920              	.LVL72:
 381:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 382:../drivers/fsl_edma.c **** 
 383:../drivers/fsl_edma.c ****     /* Enable Major interrupt */
 384:../drivers/fsl_edma.c ****     if (mask & kEDMA_MajorInterruptEnable)
 921              		.loc 1 384 0
 922 0000 8A07     		lsls	r2, r1, #30
 385:../drivers/fsl_edma.c ****     {
 386:../drivers/fsl_edma.c ****         tcd->CSR |= DMA_CSR_INTMAJOR_MASK;
 923              		.loc 1 386 0
 924 0002 41BF     		itttt	mi
 925 0004 838B     		ldrhmi	r3, [r0, #28]
 926 0006 9BB2     		uxthmi	r3, r3
 927 0008 43F00203 		orrmi	r3, r3, #2
 928 000c 8383     		strhmi	r3, [r0, #28]	@ movhi
 387:../drivers/fsl_edma.c ****     }
 388:../drivers/fsl_edma.c **** 
 389:../drivers/fsl_edma.c ****     /* Enable Half major interrupt */
 390:../drivers/fsl_edma.c ****     if (mask & kEDMA_HalfInterruptEnable)
 929              		.loc 1 390 0
 930 000e 4B07     		lsls	r3, r1, #29
 391:../drivers/fsl_edma.c ****     {
 392:../drivers/fsl_edma.c ****         tcd->CSR |= DMA_CSR_INTHALF_MASK;
 931              		.loc 1 392 0
 932 0010 41BF     		itttt	mi
 933 0012 838B     		ldrhmi	r3, [r0, #28]
 934 0014 9BB2     		uxthmi	r3, r3
 935 0016 43F00403 		orrmi	r3, r3, #4
 936 001a 8383     		strhmi	r3, [r0, #28]	@ movhi
 937 001c 7047     		bx	lr
 938              		.cfi_endproc
 939              	.LFE175:
 941              		.section	.text.EDMA_TcdDisableInterrupts,"ax",%progbits
 942              		.align	1
 943              		.global	EDMA_TcdDisableInterrupts
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 947              		.fpu fpv4-sp-d16
 949              	EDMA_TcdDisableInterrupts:
 950              	.LFB176:
 393:../drivers/fsl_edma.c ****     }
 394:../drivers/fsl_edma.c **** }
 395:../drivers/fsl_edma.c **** 
 396:../drivers/fsl_edma.c **** void EDMA_TcdDisableInterrupts(edma_tcd_t *tcd, uint32_t mask)
 397:../drivers/fsl_edma.c **** {
 951              		.loc 1 397 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956              	.LVL73:
 398:../drivers/fsl_edma.c ****     assert(tcd != NULL);
 399:../drivers/fsl_edma.c **** 
 400:../drivers/fsl_edma.c ****     /* Disable Major interrupt */
 401:../drivers/fsl_edma.c ****     if (mask & kEDMA_MajorInterruptEnable)
 957              		.loc 1 401 0
 958 0000 8A07     		lsls	r2, r1, #30
 959 0002 05D5     		bpl	.L67
 402:../drivers/fsl_edma.c ****     {
 403:../drivers/fsl_edma.c ****         tcd->CSR &= ~DMA_CSR_INTMAJOR_MASK;
 960              		.loc 1 403 0
 961 0004 838B     		ldrh	r3, [r0, #28]
 962 0006 23F00203 		bic	r3, r3, #2
 963 000a 1B04     		lsls	r3, r3, #16
 964 000c 1B0C     		lsrs	r3, r3, #16
 965 000e 8383     		strh	r3, [r0, #28]	@ movhi
 966              	.L67:
 404:../drivers/fsl_edma.c ****     }
 405:../drivers/fsl_edma.c **** 
 406:../drivers/fsl_edma.c ****     /* Disable Half major interrupt */
 407:../drivers/fsl_edma.c ****     if (mask & kEDMA_HalfInterruptEnable)
 967              		.loc 1 407 0
 968 0010 4B07     		lsls	r3, r1, #29
 969 0012 05D5     		bpl	.L66
 408:../drivers/fsl_edma.c ****     {
 409:../drivers/fsl_edma.c ****         tcd->CSR &= ~DMA_CSR_INTHALF_MASK;
 970              		.loc 1 409 0
 971 0014 838B     		ldrh	r3, [r0, #28]
 972 0016 23F00403 		bic	r3, r3, #4
 973 001a 1B04     		lsls	r3, r3, #16
 974 001c 1B0C     		lsrs	r3, r3, #16
 975 001e 8383     		strh	r3, [r0, #28]	@ movhi
 976              	.L66:
 977 0020 7047     		bx	lr
 978              		.cfi_endproc
 979              	.LFE176:
 981              		.section	.text.EDMA_GetRemainingMajorLoopCount,"ax",%progbits
 982              		.align	1
 983              		.global	EDMA_GetRemainingMajorLoopCount
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 987              		.fpu fpv4-sp-d16
 989              	EDMA_GetRemainingMajorLoopCount:
 990              	.LFB177:
 410:../drivers/fsl_edma.c ****     }
 411:../drivers/fsl_edma.c **** }
 412:../drivers/fsl_edma.c **** 
 413:../drivers/fsl_edma.c **** uint32_t EDMA_GetRemainingMajorLoopCount(DMA_Type *base, uint32_t channel)
 414:../drivers/fsl_edma.c **** {
 991              		.loc 1 414 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              		@ link register save eliminated.
 996              	.LVL74:
 415:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 416:../drivers/fsl_edma.c **** 
 417:../drivers/fsl_edma.c ****     uint32_t remainingCount = 0;
 418:../drivers/fsl_edma.c **** 
 419:../drivers/fsl_edma.c ****     if (DMA_CSR_DONE_MASK & base->TCD[channel].CSR)
 997              		.loc 1 419 0
 998 0000 00EB4111 		add	r1, r0, r1, lsl #5
 999              	.LVL75:
 1000 0004 41F21C03 		movw	r3, #4124
 1001 0008 CB5A     		ldrh	r3, [r1, r3]
 1002 000a 1A06     		lsls	r2, r3, #24
 1003 000c 0AD4     		bmi	.L78
 420:../drivers/fsl_edma.c ****     {
 421:../drivers/fsl_edma.c ****         remainingCount = 0;
 422:../drivers/fsl_edma.c ****     }
 423:../drivers/fsl_edma.c ****     else
 424:../drivers/fsl_edma.c ****     {
 425:../drivers/fsl_edma.c ****         /* Calculate the unfinished bytes */
 426:../drivers/fsl_edma.c ****         if (base->TCD[channel].CITER_ELINKNO & DMA_CITER_ELINKNO_ELINK_MASK)
 1004              		.loc 1 426 0
 1005 000e 41F21603 		movw	r3, #4118
 1006 0012 CA5A     		ldrh	r2, [r1, r3]
 427:../drivers/fsl_edma.c ****         {
 428:../drivers/fsl_edma.c ****             remainingCount =
 429:../drivers/fsl_edma.c ****                 (base->TCD[channel].CITER_ELINKYES & DMA_CITER_ELINKYES_CITER_MASK) >> DMA_CITER_EL
 1007              		.loc 1 429 0
 1008 0014 C85A     		ldrh	r0, [r1, r3]
 1009              	.LVL76:
 426:../drivers/fsl_edma.c ****         {
 1010              		.loc 1 426 0
 1011 0016 1304     		lsls	r3, r2, #16
 428:../drivers/fsl_edma.c ****                 (base->TCD[channel].CITER_ELINKYES & DMA_CITER_ELINKYES_CITER_MASK) >> DMA_CITER_EL
 1012              		.loc 1 428 0
 1013 0018 4CBF     		ite	mi
 1014 001a C0F30800 		ubfxmi	r0, r0, #0, #9
 1015              	.LVL77:
 430:../drivers/fsl_edma.c ****         }
 431:../drivers/fsl_edma.c ****         else
 432:../drivers/fsl_edma.c ****         {
 433:../drivers/fsl_edma.c ****             remainingCount =
 1016              		.loc 1 433 0
 1017 001e C0F30E00 		ubfxpl	r0, r0, #0, #15
 1018              	.LVL78:
 1019 0022 7047     		bx	lr
 1020              	.LVL79:
 1021              	.L78:
 421:../drivers/fsl_edma.c ****     }
 1022              		.loc 1 421 0
 1023 0024 0020     		movs	r0, #0
 1024              	.LVL80:
 434:../drivers/fsl_edma.c ****                 (base->TCD[channel].CITER_ELINKNO & DMA_CITER_ELINKNO_CITER_MASK) >> DMA_CITER_ELIN
 435:../drivers/fsl_edma.c ****         }
 436:../drivers/fsl_edma.c ****     }
 437:../drivers/fsl_edma.c **** 
 438:../drivers/fsl_edma.c ****     return remainingCount;
 439:../drivers/fsl_edma.c **** }
 1025              		.loc 1 439 0
 1026 0026 7047     		bx	lr
 1027              		.cfi_endproc
 1028              	.LFE177:
 1030              		.section	.text.EDMA_GetChannelStatusFlags,"ax",%progbits
 1031              		.align	1
 1032              		.global	EDMA_GetChannelStatusFlags
 1033              		.syntax unified
 1034              		.thumb
 1035              		.thumb_func
 1036              		.fpu fpv4-sp-d16
 1038              	EDMA_GetChannelStatusFlags:
 1039              	.LFB178:
 440:../drivers/fsl_edma.c **** 
 441:../drivers/fsl_edma.c **** uint32_t EDMA_GetChannelStatusFlags(DMA_Type *base, uint32_t channel)
 442:../drivers/fsl_edma.c **** {
 1040              		.loc 1 442 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 0
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045              	.LVL81:
 443:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 444:../drivers/fsl_edma.c **** 
 445:../drivers/fsl_edma.c ****     uint32_t retval = 0;
 446:../drivers/fsl_edma.c **** 
 447:../drivers/fsl_edma.c ****     /* Get DONE bit flag */
 448:../drivers/fsl_edma.c ****     retval |= ((base->TCD[channel].CSR & DMA_CSR_DONE_MASK) >> DMA_CSR_DONE_SHIFT);
 1046              		.loc 1 448 0
 1047 0000 00EB4112 		add	r2, r0, r1, lsl #5
 1048 0004 41F21C03 		movw	r3, #4124
 1049 0008 D25A     		ldrh	r2, [r2, r3]
 1050              	.LVL82:
 449:../drivers/fsl_edma.c ****     /* Get ERROR bit flag */
 450:../drivers/fsl_edma.c ****     retval |= (((base->ERR >> channel) & 0x1U) << 1U);
 1051              		.loc 1 450 0
 1052 000a C36A     		ldr	r3, [r0, #44]
 451:../drivers/fsl_edma.c ****     /* Get INT bit flag */
 452:../drivers/fsl_edma.c ****     retval |= (((base->INT >> channel) & 0x1U) << 2U);
 1053              		.loc 1 452 0
 1054 000c 406A     		ldr	r0, [r0, #36]
 1055              	.LVL83:
 450:../drivers/fsl_edma.c ****     /* Get INT bit flag */
 1056              		.loc 1 450 0
 1057 000e CB40     		lsrs	r3, r3, r1
 1058              		.loc 1 452 0
 1059 0010 C840     		lsrs	r0, r0, r1
 450:../drivers/fsl_edma.c ****     /* Get INT bit flag */
 1060              		.loc 1 450 0
 1061 0012 5B00     		lsls	r3, r3, #1
 448:../drivers/fsl_edma.c ****     /* Get ERROR bit flag */
 1062              		.loc 1 448 0
 1063 0014 C2F3C012 		ubfx	r2, r2, #7, #1
 1064              	.LVL84:
 450:../drivers/fsl_edma.c ****     /* Get INT bit flag */
 1065              		.loc 1 450 0
 1066 0018 03F00203 		and	r3, r3, #2
 1067              		.loc 1 452 0
 1068 001c 8000     		lsls	r0, r0, #2
 450:../drivers/fsl_edma.c ****     /* Get INT bit flag */
 1069              		.loc 1 450 0
 1070 001e 1343     		orrs	r3, r3, r2
 1071              	.LVL85:
 1072              		.loc 1 452 0
 1073 0020 00F00400 		and	r0, r0, #4
 453:../drivers/fsl_edma.c **** 
 454:../drivers/fsl_edma.c ****     return retval;
 455:../drivers/fsl_edma.c **** }
 1074              		.loc 1 455 0
 1075 0024 1843     		orrs	r0, r0, r3
 1076 0026 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE178:
 1080              		.section	.text.EDMA_ClearChannelStatusFlags,"ax",%progbits
 1081              		.align	1
 1082              		.global	EDMA_ClearChannelStatusFlags
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu fpv4-sp-d16
 1088              	EDMA_ClearChannelStatusFlags:
 1089              	.LFB179:
 456:../drivers/fsl_edma.c **** 
 457:../drivers/fsl_edma.c **** void EDMA_ClearChannelStatusFlags(DMA_Type *base, uint32_t channel, uint32_t mask)
 458:../drivers/fsl_edma.c **** {
 1090              		.loc 1 458 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              		@ link register save eliminated.
 1095              	.LVL86:
 459:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 460:../drivers/fsl_edma.c **** 
 461:../drivers/fsl_edma.c ****     /* Clear DONE bit flag */
 462:../drivers/fsl_edma.c ****     if (mask & kEDMA_DoneFlag)
 1096              		.loc 1 462 0
 1097 0000 D307     		lsls	r3, r2, #31
 463:../drivers/fsl_edma.c ****     {
 464:../drivers/fsl_edma.c ****         base->CDNE = channel;
 1098              		.loc 1 464 0
 1099 0002 44BF     		itt	mi
 1100 0004 CBB2     		uxtbmi	r3, r1
 1101 0006 0377     		strbmi	r3, [r0, #28]
 465:../drivers/fsl_edma.c ****     }
 466:../drivers/fsl_edma.c ****     /* Clear ERROR bit flag */
 467:../drivers/fsl_edma.c ****     if (mask & kEDMA_ErrorFlag)
 1102              		.loc 1 467 0
 1103 0008 9307     		lsls	r3, r2, #30
 468:../drivers/fsl_edma.c ****     {
 469:../drivers/fsl_edma.c ****         base->CERR = channel;
 1104              		.loc 1 469 0
 1105 000a 44BF     		itt	mi
 1106 000c CBB2     		uxtbmi	r3, r1
 1107 000e 8377     		strbmi	r3, [r0, #30]
 470:../drivers/fsl_edma.c ****     }
 471:../drivers/fsl_edma.c ****     /* Clear INT bit flag */
 472:../drivers/fsl_edma.c ****     if (mask & kEDMA_InterruptFlag)
 1108              		.loc 1 472 0
 1109 0010 5307     		lsls	r3, r2, #29
 473:../drivers/fsl_edma.c ****     {
 474:../drivers/fsl_edma.c ****         base->CINT = channel;
 1110              		.loc 1 474 0
 1111 0012 44BF     		itt	mi
 1112 0014 C9B2     		uxtbmi	r1, r1
 1113              	.LVL87:
 1114 0016 C177     		strbmi	r1, [r0, #31]
 1115 0018 7047     		bx	lr
 1116              		.cfi_endproc
 1117              	.LFE179:
 1119              		.section	.text.EDMA_CreateHandle,"ax",%progbits
 1120              		.align	1
 1121              		.global	EDMA_CreateHandle
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	EDMA_CreateHandle:
 1128              	.LFB181:
 475:../drivers/fsl_edma.c ****     }
 476:../drivers/fsl_edma.c **** }
 477:../drivers/fsl_edma.c **** 
 478:../drivers/fsl_edma.c **** static uint8_t Get_StartInstance(void)
 479:../drivers/fsl_edma.c **** {
 480:../drivers/fsl_edma.c ****     static uint8_t StartInstanceNum;
 481:../drivers/fsl_edma.c **** 
 482:../drivers/fsl_edma.c **** #if defined(DMA0)
 483:../drivers/fsl_edma.c ****     StartInstanceNum = EDMA_GetInstance(DMA0);
 484:../drivers/fsl_edma.c **** #elif defined(DMA1)
 485:../drivers/fsl_edma.c ****     StartInstanceNum = EDMA_GetInstance(DMA1);
 486:../drivers/fsl_edma.c **** #elif defined(DMA2)
 487:../drivers/fsl_edma.c ****     StartInstanceNum = EDMA_GetInstance(DMA2);
 488:../drivers/fsl_edma.c **** #elif defined(DMA3)
 489:../drivers/fsl_edma.c ****     StartInstanceNum = EDMA_GetInstance(DMA3);
 490:../drivers/fsl_edma.c **** #endif
 491:../drivers/fsl_edma.c **** 
 492:../drivers/fsl_edma.c ****     return StartInstanceNum;
 493:../drivers/fsl_edma.c **** }
 494:../drivers/fsl_edma.c **** 
 495:../drivers/fsl_edma.c **** void EDMA_CreateHandle(edma_handle_t *handle, DMA_Type *base, uint32_t channel)
 496:../drivers/fsl_edma.c **** {
 1129              		.loc 1 496 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              	.LVL88:
 1134 0000 70B5     		push	{r4, r5, r6, lr}
 1135              		.cfi_def_cfa_offset 16
 1136              		.cfi_offset 4, -16
 1137              		.cfi_offset 5, -12
 1138              		.cfi_offset 6, -8
 1139              		.cfi_offset 14, -4
 1140              		.loc 1 496 0
 1141 0002 1446     		mov	r4, r2
 1142 0004 0D46     		mov	r5, r1
 497:../drivers/fsl_edma.c ****     assert(handle != NULL);
 498:../drivers/fsl_edma.c ****     assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
 499:../drivers/fsl_edma.c **** 
 500:../drivers/fsl_edma.c ****     uint32_t edmaInstance;
 501:../drivers/fsl_edma.c ****     uint32_t channelIndex;
 502:../drivers/fsl_edma.c ****     uint8_t StartInstance;
 503:../drivers/fsl_edma.c ****     edma_tcd_t *tcdRegs;
 504:../drivers/fsl_edma.c **** 
 505:../drivers/fsl_edma.c ****     /* Zero the handle */
 506:../drivers/fsl_edma.c ****     memset(handle, 0, sizeof(*handle));
 1143              		.loc 1 506 0
 1144 0006 1822     		movs	r2, #24
 1145              	.LVL89:
 1146 0008 0021     		movs	r1, #0
 1147              	.LVL90:
 496:../drivers/fsl_edma.c ****     assert(handle != NULL);
 1148              		.loc 1 496 0
 1149 000a 0646     		mov	r6, r0
 1150              		.loc 1 506 0
 1151 000c FFF7FEFF 		bl	memset
 1152              	.LVL91:
 1153              	.LBB118:
 1154              	.LBB119:
  83:../drivers/fsl_edma.c ****         {
 1155              		.loc 1 83 0
 1156 0010 144B     		ldr	r3, .L95
 1157              	.LBE119:
 1158              	.LBE118:
 507:../drivers/fsl_edma.c **** 
 508:../drivers/fsl_edma.c ****     handle->base = base;
 509:../drivers/fsl_edma.c ****     handle->channel = channel;
 510:../drivers/fsl_edma.c ****     /* Get the DMA instance number */
 511:../drivers/fsl_edma.c ****     edmaInstance = EDMA_GetInstance(base);
 512:../drivers/fsl_edma.c ****     StartInstance = Get_StartInstance();
 513:../drivers/fsl_edma.c ****     channelIndex = ((edmaInstance - StartInstance) * FSL_FEATURE_EDMA_MODULE_CHANNEL) + channel;
 514:../drivers/fsl_edma.c ****     s_EDMAHandle[channelIndex] = handle;
 1159              		.loc 1 514 0
 1160 0012 154A     		ldr	r2, .L95+4
 508:../drivers/fsl_edma.c ****     handle->channel = channel;
 1161              		.loc 1 508 0
 1162 0014 B560     		str	r5, [r6, #8]
 1163              	.LBB121:
 1164              	.LBB120:
  83:../drivers/fsl_edma.c ****         {
 1165              		.loc 1 83 0
 1166 0016 EB1A     		subs	r3, r5, r3
 1167 0018 18BF     		it	ne
 1168 001a 0123     		movne	r3, #1
 1169              	.LBE120:
 1170              	.LBE121:
 1171              		.loc 1 514 0
 1172 001c 1B01     		lsls	r3, r3, #4
 1173 001e 1919     		adds	r1, r3, r4
 509:../drivers/fsl_edma.c ****     /* Get the DMA instance number */
 1174              		.loc 1 509 0
 1175 0020 3474     		strb	r4, [r6, #16]
 1176              	.LVL92:
 1177              		.loc 1 514 0
 1178 0022 42F82160 		str	r6, [r2, r1, lsl #2]
 515:../drivers/fsl_edma.c **** 
 516:../drivers/fsl_edma.c ****     /* Enable NVIC interrupt */
 517:../drivers/fsl_edma.c ****     EnableIRQ(s_edmaIRQNumber[edmaInstance][channel]);
 1179              		.loc 1 517 0
 1180 0026 114A     		ldr	r2, .L95+8
 1181 0028 1344     		add	r3, r3, r2
 1182 002a 1B57     		ldrsb	r3, [r3, r4]
 1183              	.LVL93:
 1184              	.LBB122:
 1185              	.LBB123:
 1186              	.LBB124:
 1187              		.file 3 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
 1188              		.loc 3 1674 0
 1189 002c 002B     		cmp	r3, #0
 1190 002e 08DB     		blt	.L94
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 1191              		.loc 3 1676 0
 1192 0030 5909     		lsrs	r1, r3, #5
 1193 0032 0122     		movs	r2, #1
 1194 0034 03F01F03 		and	r3, r3, #31
 1195              	.LVL94:
 1196 0038 02FA03F3 		lsl	r3, r2, r3
 1197 003c 0C4A     		ldr	r2, .L95+12
 1198 003e 42F82130 		str	r3, [r2, r1, lsl #2]
 1199              	.L94:
 1200              	.LVL95:
 1201              	.LBE124:
 1202              	.LBE123:
 1203              	.LBE122:
 518:../drivers/fsl_edma.c **** 
 519:../drivers/fsl_edma.c ****     /*
 520:../drivers/fsl_edma.c ****        Reset TCD registers to zero. Unlike the EDMA_TcdReset(DREQ will be set),
 521:../drivers/fsl_edma.c ****        CSR will be 0. Because in order to suit EDMA busy check mechanism in
 522:../drivers/fsl_edma.c ****        EDMA_SubmitTransfer, CSR must be set 0.
 523:../drivers/fsl_edma.c ****     */
 524:../drivers/fsl_edma.c ****     tcdRegs = (edma_tcd_t *)&handle->base->TCD[handle->channel];
 1204              		.loc 1 524 0
 1205 0042 E4B2     		uxtb	r4, r4
 1206              	.LVL96:
 1207 0044 8034     		adds	r4, r4, #128
 1208 0046 6401     		lsls	r4, r4, #5
 1209 0048 2A19     		adds	r2, r5, r4
 1210              	.LVL97:
 525:../drivers/fsl_edma.c ****     tcdRegs->SADDR = 0;
 1211              		.loc 1 525 0
 1212 004a 0023     		movs	r3, #0
 1213 004c 2B51     		str	r3, [r5, r4]
 526:../drivers/fsl_edma.c ****     tcdRegs->SOFF = 0;
 1214              		.loc 1 526 0
 1215 004e 9380     		strh	r3, [r2, #4]	@ movhi
 527:../drivers/fsl_edma.c ****     tcdRegs->ATTR = 0;
 1216              		.loc 1 527 0
 1217 0050 D380     		strh	r3, [r2, #6]	@ movhi
 528:../drivers/fsl_edma.c ****     tcdRegs->NBYTES = 0;
 1218              		.loc 1 528 0
 1219 0052 9360     		str	r3, [r2, #8]
 529:../drivers/fsl_edma.c ****     tcdRegs->SLAST = 0;
 1220              		.loc 1 529 0
 1221 0054 D360     		str	r3, [r2, #12]
 530:../drivers/fsl_edma.c ****     tcdRegs->DADDR = 0;
 1222              		.loc 1 530 0
 1223 0056 1361     		str	r3, [r2, #16]
 531:../drivers/fsl_edma.c ****     tcdRegs->DOFF = 0;
 1224              		.loc 1 531 0
 1225 0058 9382     		strh	r3, [r2, #20]	@ movhi
 532:../drivers/fsl_edma.c ****     tcdRegs->CITER = 0;
 1226              		.loc 1 532 0
 1227 005a D382     		strh	r3, [r2, #22]	@ movhi
 533:../drivers/fsl_edma.c ****     tcdRegs->DLAST_SGA = 0;
 1228              		.loc 1 533 0
 1229 005c 9361     		str	r3, [r2, #24]
 534:../drivers/fsl_edma.c ****     tcdRegs->CSR = 0;
 1230              		.loc 1 534 0
 1231 005e 9383     		strh	r3, [r2, #28]	@ movhi
 535:../drivers/fsl_edma.c ****     tcdRegs->BITER = 0;
 1232              		.loc 1 535 0
 1233 0060 D383     		strh	r3, [r2, #30]	@ movhi
 1234 0062 70BD     		pop	{r4, r5, r6, pc}
 1235              	.LVL98:
 1236              	.L96:
 1237              		.align	2
 1238              	.L95:
 1239 0064 00800040 		.word	1073774592
 1240 0068 00000000 		.word	.LANCHOR0
 1241 006c 00000000 		.word	.LANCHOR1
 1242 0070 00E100E0 		.word	-536813312
 1243              		.cfi_endproc
 1244              	.LFE181:
 1246              		.section	.text.EDMA_InstallTCDMemory,"ax",%progbits
 1247              		.align	1
 1248              		.global	EDMA_InstallTCDMemory
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1252              		.fpu fpv4-sp-d16
 1254              	EDMA_InstallTCDMemory:
 1255              	.LFB182:
 536:../drivers/fsl_edma.c **** }
 537:../drivers/fsl_edma.c **** 
 538:../drivers/fsl_edma.c **** void EDMA_InstallTCDMemory(edma_handle_t *handle, edma_tcd_t *tcdPool, uint32_t tcdSize)
 539:../drivers/fsl_edma.c **** {
 1256              		.loc 1 539 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
 1261              	.LVL99:
 540:../drivers/fsl_edma.c ****     assert(handle != NULL);
 541:../drivers/fsl_edma.c ****     assert(((uint32_t)tcdPool & 0x1FU) == 0);
 542:../drivers/fsl_edma.c **** 
 543:../drivers/fsl_edma.c ****     /* Initialize tcd queue attibute. */
 544:../drivers/fsl_edma.c ****     handle->header = 0;
 1262              		.loc 1 544 0
 1263 0000 0023     		movs	r3, #0
 545:../drivers/fsl_edma.c ****     handle->tail = 0;
 546:../drivers/fsl_edma.c ****     handle->tcdUsed = 0;
 547:../drivers/fsl_edma.c ****     handle->tcdSize = tcdSize;
 1264              		.loc 1 547 0
 1265 0002 52B2     		sxtb	r2, r2
 1266              	.LVL100:
 544:../drivers/fsl_edma.c ****     handle->tail = 0;
 1267              		.loc 1 544 0
 1268 0004 4374     		strb	r3, [r0, #17]
 548:../drivers/fsl_edma.c ****     handle->flags = 0;
 1269              		.loc 1 548 0
 1270 0006 4375     		strb	r3, [r0, #21]
 545:../drivers/fsl_edma.c ****     handle->tail = 0;
 1271              		.loc 1 545 0
 1272 0008 8374     		strb	r3, [r0, #18]
 549:../drivers/fsl_edma.c ****     handle->tcdPool = tcdPool;
 1273              		.loc 1 549 0
 1274 000a C160     		str	r1, [r0, #12]
 546:../drivers/fsl_edma.c ****     handle->tcdSize = tcdSize;
 1275              		.loc 1 546 0
 1276 000c C374     		strb	r3, [r0, #19]
 547:../drivers/fsl_edma.c ****     handle->flags = 0;
 1277              		.loc 1 547 0
 1278 000e 0275     		strb	r2, [r0, #20]
 1279              		.loc 1 549 0
 1280 0010 7047     		bx	lr
 1281              		.cfi_endproc
 1282              	.LFE182:
 1284              		.section	.text.EDMA_SetCallback,"ax",%progbits
 1285              		.align	1
 1286              		.global	EDMA_SetCallback
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1290              		.fpu fpv4-sp-d16
 1292              	EDMA_SetCallback:
 1293              	.LFB183:
 550:../drivers/fsl_edma.c **** }
 551:../drivers/fsl_edma.c **** 
 552:../drivers/fsl_edma.c **** void EDMA_SetCallback(edma_handle_t *handle, edma_callback callback, void *userData)
 553:../drivers/fsl_edma.c **** {
 1294              		.loc 1 553 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 1299              	.LVL101:
 554:../drivers/fsl_edma.c ****     assert(handle != NULL);
 555:../drivers/fsl_edma.c **** 
 556:../drivers/fsl_edma.c ****     handle->callback = callback;
 557:../drivers/fsl_edma.c ****     handle->userData = userData;
 1300              		.loc 1 557 0
 1301 0000 80E80600 		stm	r0, {r1, r2}
 1302 0004 7047     		bx	lr
 1303              		.cfi_endproc
 1304              	.LFE183:
 1306              		.section	.text.EDMA_PrepareTransfer,"ax",%progbits
 1307              		.align	1
 1308              		.global	EDMA_PrepareTransfer
 1309              		.syntax unified
 1310              		.thumb
 1311              		.thumb_func
 1312              		.fpu fpv4-sp-d16
 1314              	EDMA_PrepareTransfer:
 1315              	.LFB184:
 558:../drivers/fsl_edma.c **** }
 559:../drivers/fsl_edma.c **** 
 560:../drivers/fsl_edma.c **** void EDMA_PrepareTransfer(edma_transfer_config_t *config,
 561:../drivers/fsl_edma.c ****                           void *srcAddr,
 562:../drivers/fsl_edma.c ****                           uint32_t srcWidth,
 563:../drivers/fsl_edma.c ****                           void *destAddr,
 564:../drivers/fsl_edma.c ****                           uint32_t destWidth,
 565:../drivers/fsl_edma.c ****                           uint32_t bytesEachRequest,
 566:../drivers/fsl_edma.c ****                           uint32_t transferBytes,
 567:../drivers/fsl_edma.c ****                           edma_transfer_type_t type)
 568:../drivers/fsl_edma.c **** {
 1316              		.loc 1 568 0
 1317              		.cfi_startproc
 1318              		@ args = 16, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320              	.LVL102:
 1321 0000 70B5     		push	{r4, r5, r6, lr}
 1322              		.cfi_def_cfa_offset 16
 1323              		.cfi_offset 4, -16
 1324              		.cfi_offset 5, -12
 1325              		.cfi_offset 6, -8
 1326              		.cfi_offset 14, -4
 1327              		.loc 1 568 0
 1328 0002 059E     		ldr	r6, [sp, #20]
 1329 0004 049C     		ldr	r4, [sp, #16]
 1330 0006 9DF81C50 		ldrb	r5, [sp, #28]	@ zero_extendqisi2
 569:../drivers/fsl_edma.c ****     assert(config != NULL);
 570:../drivers/fsl_edma.c ****     assert(srcAddr != NULL);
 571:../drivers/fsl_edma.c ****     assert(destAddr != NULL);
 572:../drivers/fsl_edma.c ****     assert((srcWidth == 1U) || (srcWidth == 2U) || (srcWidth == 4U) || (srcWidth == 16U) || (srcWid
 573:../drivers/fsl_edma.c ****     assert((destWidth == 1U) || (destWidth == 2U) || (destWidth == 4U) || (destWidth == 16U) || (de
 574:../drivers/fsl_edma.c ****     assert(transferBytes % bytesEachRequest == 0);
 575:../drivers/fsl_edma.c **** 
 576:../drivers/fsl_edma.c ****     config->destAddr = (uint32_t)destAddr;
 577:../drivers/fsl_edma.c ****     config->srcAddr = (uint32_t)srcAddr;
 578:../drivers/fsl_edma.c ****     config->minorLoopBytes = bytesEachRequest;
 1331              		.loc 1 578 0
 1332 000a 0661     		str	r6, [r0, #16]
 579:../drivers/fsl_edma.c ****     config->majorLoopCounts = transferBytes / bytesEachRequest;
 580:../drivers/fsl_edma.c ****     switch (srcWidth)
 1333              		.loc 1 580 0
 1334 000c 042A     		cmp	r2, #4
 577:../drivers/fsl_edma.c ****     config->minorLoopBytes = bytesEachRequest;
 1335              		.loc 1 577 0
 1336 000e 80E80A00 		stm	r0, {r1, r3}
 579:../drivers/fsl_edma.c ****     config->majorLoopCounts = transferBytes / bytesEachRequest;
 1337              		.loc 1 579 0
 1338 0012 069B     		ldr	r3, [sp, #24]
 1339              	.LVL103:
 1340 0014 B3FBF6F3 		udiv	r3, r3, r6
 1341 0018 4361     		str	r3, [r0, #20]
 1342              		.loc 1 580 0
 1343 001a 1CD0     		beq	.L101
 1344 001c 10D8     		bhi	.L102
 1345 001e 012A     		cmp	r2, #1
 1346 0020 14D0     		beq	.L103
 1347 0022 022A     		cmp	r2, #2
 1348 0024 15D0     		beq	.L104
 1349              	.L100:
 581:../drivers/fsl_edma.c ****     {
 582:../drivers/fsl_edma.c ****         case 1U:
 583:../drivers/fsl_edma.c ****             config->srcTransferSize = kEDMA_TransferSize1Bytes;
 584:../drivers/fsl_edma.c ****             break;
 585:../drivers/fsl_edma.c ****         case 2U:
 586:../drivers/fsl_edma.c ****             config->srcTransferSize = kEDMA_TransferSize2Bytes;
 587:../drivers/fsl_edma.c ****             break;
 588:../drivers/fsl_edma.c ****         case 4U:
 589:../drivers/fsl_edma.c ****             config->srcTransferSize = kEDMA_TransferSize4Bytes;
 590:../drivers/fsl_edma.c ****             break;
 591:../drivers/fsl_edma.c ****         case 16U:
 592:../drivers/fsl_edma.c ****             config->srcTransferSize = kEDMA_TransferSize16Bytes;
 593:../drivers/fsl_edma.c ****             break;
 594:../drivers/fsl_edma.c ****         case 32U:
 595:../drivers/fsl_edma.c ****             config->srcTransferSize = kEDMA_TransferSize32Bytes;
 596:../drivers/fsl_edma.c ****             break;
 597:../drivers/fsl_edma.c ****         default:
 598:../drivers/fsl_edma.c ****             break;
 599:../drivers/fsl_edma.c ****     }
 600:../drivers/fsl_edma.c ****     switch (destWidth)
 1350              		.loc 1 600 0
 1351 0026 042C     		cmp	r4, #4
 1352 0028 24D0     		beq	.L108
 1353 002a 18D8     		bhi	.L109
 1354 002c 012C     		cmp	r4, #1
 1355 002e 1CD0     		beq	.L110
 1356 0030 022C     		cmp	r4, #2
 1357 0032 1DD0     		beq	.L111
 1358              	.L107:
 601:../drivers/fsl_edma.c ****     {
 602:../drivers/fsl_edma.c ****         case 1U:
 603:../drivers/fsl_edma.c ****             config->destTransferSize = kEDMA_TransferSize1Bytes;
 604:../drivers/fsl_edma.c ****             break;
 605:../drivers/fsl_edma.c ****         case 2U:
 606:../drivers/fsl_edma.c ****             config->destTransferSize = kEDMA_TransferSize2Bytes;
 607:../drivers/fsl_edma.c ****             break;
 608:../drivers/fsl_edma.c ****         case 4U:
 609:../drivers/fsl_edma.c ****             config->destTransferSize = kEDMA_TransferSize4Bytes;
 610:../drivers/fsl_edma.c ****             break;
 611:../drivers/fsl_edma.c ****         case 16U:
 612:../drivers/fsl_edma.c ****             config->destTransferSize = kEDMA_TransferSize16Bytes;
 613:../drivers/fsl_edma.c ****             break;
 614:../drivers/fsl_edma.c ****         case 32U:
 615:../drivers/fsl_edma.c ****             config->destTransferSize = kEDMA_TransferSize32Bytes;
 616:../drivers/fsl_edma.c ****             break;
 617:../drivers/fsl_edma.c ****         default:
 618:../drivers/fsl_edma.c ****             break;
 619:../drivers/fsl_edma.c ****     }
 620:../drivers/fsl_edma.c ****     switch (type)
 1359              		.loc 1 620 0
 1360 0034 012D     		cmp	r5, #1
 1361 0036 27D0     		beq	.L115
 1362 0038 20D3     		bcc	.L116
 1363 003a 022D     		cmp	r5, #2
 1364 003c 21D0     		beq	.L117
 1365 003e 70BD     		pop	{r4, r5, r6, pc}
 1366              	.LVL104:
 1367              	.L102:
 580:../drivers/fsl_edma.c ****     {
 1368              		.loc 1 580 0
 1369 0040 102A     		cmp	r2, #16
 1370 0042 0AD0     		beq	.L105
 1371 0044 202A     		cmp	r2, #32
 1372 0046 EED1     		bne	.L100
 595:../drivers/fsl_edma.c ****             break;
 1373              		.loc 1 595 0
 1374 0048 0523     		movs	r3, #5
 1375 004a 00E0     		b	.L118
 1376              	.L103:
 583:../drivers/fsl_edma.c ****             break;
 1377              		.loc 1 583 0
 1378 004c 0023     		movs	r3, #0
 1379              	.L118:
 595:../drivers/fsl_edma.c ****             break;
 1380              		.loc 1 595 0
 1381 004e 0372     		strb	r3, [r0, #8]
 596:../drivers/fsl_edma.c ****         default:
 1382              		.loc 1 596 0
 1383 0050 E9E7     		b	.L100
 1384              	.L104:
 586:../drivers/fsl_edma.c ****             break;
 1385              		.loc 1 586 0
 1386 0052 0123     		movs	r3, #1
 1387 0054 FBE7     		b	.L118
 1388              	.L101:
 589:../drivers/fsl_edma.c ****             break;
 1389              		.loc 1 589 0
 1390 0056 0223     		movs	r3, #2
 1391 0058 F9E7     		b	.L118
 1392              	.L105:
 592:../drivers/fsl_edma.c ****             break;
 1393              		.loc 1 592 0
 1394 005a 0423     		movs	r3, #4
 1395 005c F7E7     		b	.L118
 1396              	.L109:
 600:../drivers/fsl_edma.c ****     {
 1397              		.loc 1 600 0
 1398 005e 102C     		cmp	r4, #16
 1399 0060 0AD0     		beq	.L112
 1400 0062 202C     		cmp	r4, #32
 1401 0064 E6D1     		bne	.L107
 615:../drivers/fsl_edma.c ****             break;
 1402              		.loc 1 615 0
 1403 0066 0523     		movs	r3, #5
 1404 0068 00E0     		b	.L119
 1405              	.L110:
 603:../drivers/fsl_edma.c ****             break;
 1406              		.loc 1 603 0
 1407 006a 0023     		movs	r3, #0
 1408              	.L119:
 615:../drivers/fsl_edma.c ****             break;
 1409              		.loc 1 615 0
 1410 006c 4372     		strb	r3, [r0, #9]
 616:../drivers/fsl_edma.c ****         default:
 1411              		.loc 1 616 0
 1412 006e E1E7     		b	.L107
 1413              	.L111:
 606:../drivers/fsl_edma.c ****             break;
 1414              		.loc 1 606 0
 1415 0070 0123     		movs	r3, #1
 1416 0072 FBE7     		b	.L119
 1417              	.L108:
 609:../drivers/fsl_edma.c ****             break;
 1418              		.loc 1 609 0
 1419 0074 0223     		movs	r3, #2
 1420 0076 F9E7     		b	.L119
 1421              	.L112:
 612:../drivers/fsl_edma.c ****             break;
 1422              		.loc 1 612 0
 1423 0078 0423     		movs	r3, #4
 1424 007a F7E7     		b	.L119
 1425              	.L116:
 621:../drivers/fsl_edma.c ****     {
 622:../drivers/fsl_edma.c ****         case kEDMA_MemoryToMemory:
 623:../drivers/fsl_edma.c ****             config->destOffset = destWidth;
 1426              		.loc 1 623 0
 1427 007c 8481     		strh	r4, [r0, #12]	@ movhi
 1428              	.L120:
 624:../drivers/fsl_edma.c ****             config->srcOffset = srcWidth;
 625:../drivers/fsl_edma.c ****             break;
 626:../drivers/fsl_edma.c ****         case kEDMA_MemoryToPeripheral:
 627:../drivers/fsl_edma.c ****             config->destOffset = 0U;
 628:../drivers/fsl_edma.c ****             config->srcOffset = srcWidth;
 1429              		.loc 1 628 0
 1430 007e 4281     		strh	r2, [r0, #10]	@ movhi
 629:../drivers/fsl_edma.c ****             break;
 1431              		.loc 1 629 0
 1432 0080 70BD     		pop	{r4, r5, r6, pc}
 1433              	.LVL105:
 1434              	.L117:
 627:../drivers/fsl_edma.c ****             config->srcOffset = srcWidth;
 1435              		.loc 1 627 0
 1436 0082 0023     		movs	r3, #0
 1437 0084 8381     		strh	r3, [r0, #12]	@ movhi
 1438 0086 FAE7     		b	.L120
 1439              	.L115:
 630:../drivers/fsl_edma.c ****         case kEDMA_PeripheralToMemory:
 631:../drivers/fsl_edma.c ****             config->destOffset = destWidth;
 632:../drivers/fsl_edma.c ****             config->srcOffset = 0U;
 1440              		.loc 1 632 0
 1441 0088 0023     		movs	r3, #0
 631:../drivers/fsl_edma.c ****             config->srcOffset = 0U;
 1442              		.loc 1 631 0
 1443 008a 8481     		strh	r4, [r0, #12]	@ movhi
 1444              		.loc 1 632 0
 1445 008c 4381     		strh	r3, [r0, #10]	@ movhi
 1446 008e 70BD     		pop	{r4, r5, r6, pc}
 1447              		.cfi_endproc
 1448              	.LFE184:
 1450              		.section	.text.EDMA_SubmitTransfer,"ax",%progbits
 1451              		.align	1
 1452              		.global	EDMA_SubmitTransfer
 1453              		.syntax unified
 1454              		.thumb
 1455              		.thumb_func
 1456              		.fpu fpv4-sp-d16
 1458              	EDMA_SubmitTransfer:
 1459              	.LFB185:
 633:../drivers/fsl_edma.c ****             break;
 634:../drivers/fsl_edma.c ****         default:
 635:../drivers/fsl_edma.c ****             break;
 636:../drivers/fsl_edma.c ****     }
 637:../drivers/fsl_edma.c **** }
 638:../drivers/fsl_edma.c **** 
 639:../drivers/fsl_edma.c **** status_t EDMA_SubmitTransfer(edma_handle_t *handle, const edma_transfer_config_t *config)
 640:../drivers/fsl_edma.c **** {
 1460              		.loc 1 640 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 0
 1463              		@ frame_needed = 0, uses_anonymous_args = 0
 1464              	.LVL106:
 1465 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1466              		.cfi_def_cfa_offset 32
 1467              		.cfi_offset 3, -32
 1468              		.cfi_offset 4, -28
 1469              		.cfi_offset 5, -24
 1470              		.cfi_offset 6, -20
 1471              		.cfi_offset 7, -16
 1472              		.cfi_offset 8, -12
 1473              		.cfi_offset 9, -8
 1474              		.cfi_offset 14, -4
 1475              		.loc 1 640 0
 1476 0004 0446     		mov	r4, r0
 641:../drivers/fsl_edma.c ****     assert(handle != NULL);
 642:../drivers/fsl_edma.c ****     assert(config != NULL);
 643:../drivers/fsl_edma.c **** 
 644:../drivers/fsl_edma.c ****     edma_tcd_t *tcdRegs = (edma_tcd_t *)&handle->base->TCD[handle->channel];
 1477              		.loc 1 644 0
 1478 0006 8068     		ldr	r0, [r0, #8]
 1479              	.LVL107:
 1480 0008 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 645:../drivers/fsl_edma.c **** 
 646:../drivers/fsl_edma.c ****     if (handle->tcdPool == NULL)
 1481              		.loc 1 646 0
 1482 000a E268     		ldr	r2, [r4, #12]
 644:../drivers/fsl_edma.c **** 
 1483              		.loc 1 644 0
 1484 000c 8033     		adds	r3, r3, #128
 1485 000e 00EB4316 		add	r6, r0, r3, lsl #5
 1486              	.LVL108:
 1487              		.loc 1 646 0
 1488 0012 F2B9     		cbnz	r2, .L122
 647:../drivers/fsl_edma.c ****     {
 648:../drivers/fsl_edma.c ****         /*
 649:../drivers/fsl_edma.c ****             Check if EDMA is busy: if the given channel started transfer, CSR will be not zero. Bec
 650:../drivers/fsl_edma.c ****             if it is the last transfer, DREQ will be set. If not, ESG will be set. So in order to s
 651:../drivers/fsl_edma.c ****             this check mechanism, EDMA_CreatHandle will clear CSR register.
 652:../drivers/fsl_edma.c ****         */
 653:../drivers/fsl_edma.c ****         if ((tcdRegs->CSR != 0) && ((tcdRegs->CSR & DMA_CSR_DONE_MASK) == 0))
 1489              		.loc 1 653 0
 1490 0014 B28B     		ldrh	r2, [r6, #28]
 1491 0016 92B2     		uxth	r2, r2
 1492 0018 1AB1     		cbz	r2, .L123
 1493              		.loc 1 653 0 is_stmt 0 discriminator 1
 1494 001a B28B     		ldrh	r2, [r6, #28]
 1495 001c 1206     		lsls	r2, r2, #24
 1496 001e 40F18980 		bpl	.L135
 1497              	.L123:
 1498              	.LVL109:
 1499              	.LBB125:
 1500              	.LBB126:
 165:../drivers/fsl_edma.c **** }
 1501              		.loc 1 165 0 is_stmt 1
 1502 0022 0022     		movs	r2, #0
 1503 0024 00EB4310 		add	r0, r0, r3, lsl #5
 1504              	.LVL110:
 1505 0028 FFF7FEFF 		bl	EDMA_TcdSetTransferConfig
 1506              	.LVL111:
 1507              	.LBE126:
 1508              	.LBE125:
 654:../drivers/fsl_edma.c ****         {
 655:../drivers/fsl_edma.c ****             return kStatus_EDMA_Busy;
 656:../drivers/fsl_edma.c ****         }
 657:../drivers/fsl_edma.c ****         else
 658:../drivers/fsl_edma.c ****         {
 659:../drivers/fsl_edma.c ****             EDMA_SetTransferConfig(handle->base, handle->channel, config, NULL);
 660:../drivers/fsl_edma.c ****             /* Enable auto disable request feature */
 661:../drivers/fsl_edma.c ****             handle->base->TCD[handle->channel].CSR |= DMA_CSR_DREQ_MASK;
 1509              		.loc 1 661 0
 1510 002c 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 1511 002e A368     		ldr	r3, [r4, #8]
 1512 0030 41F21C01 		movw	r1, #4124
 1513              	.LVL112:
 1514 0034 03EB4213 		add	r3, r3, r2, lsl #5
 1515 0038 5A5A     		ldrh	r2, [r3, r1]
 1516 003a 92B2     		uxth	r2, r2
 1517 003c 42F00802 		orr	r2, r2, #8
 1518 0040 5A52     		strh	r2, [r3, r1]	@ movhi
 662:../drivers/fsl_edma.c ****             /* Enable major interrupt */
 663:../drivers/fsl_edma.c ****             handle->base->TCD[handle->channel].CSR |= DMA_CSR_INTMAJOR_MASK;
 1519              		.loc 1 663 0
 1520 0042 5A5A     		ldrh	r2, [r3, r1]
 1521 0044 92B2     		uxth	r2, r2
 1522 0046 42F00202 		orr	r2, r2, #2
 1523 004a 5A52     		strh	r2, [r3, r1]	@ movhi
 1524              	.L140:
 1525              	.LBB127:
 664:../drivers/fsl_edma.c **** 
 665:../drivers/fsl_edma.c ****             return kStatus_Success;
 666:../drivers/fsl_edma.c ****         }
 667:../drivers/fsl_edma.c ****     }
 668:../drivers/fsl_edma.c ****     else /* Use the TCD queue. */
 669:../drivers/fsl_edma.c ****     {
 670:../drivers/fsl_edma.c ****         uint32_t primask;
 671:../drivers/fsl_edma.c ****         uint32_t csr;
 672:../drivers/fsl_edma.c ****         int8_t currentTcd;
 673:../drivers/fsl_edma.c ****         int8_t previousTcd;
 674:../drivers/fsl_edma.c ****         int8_t nextTcd;
 675:../drivers/fsl_edma.c **** 
 676:../drivers/fsl_edma.c ****         /* Check if tcd pool is full. */
 677:../drivers/fsl_edma.c ****         primask = DisableGlobalIRQ();
 678:../drivers/fsl_edma.c ****         if (handle->tcdUsed >= handle->tcdSize)
 679:../drivers/fsl_edma.c ****         {
 680:../drivers/fsl_edma.c ****             EnableGlobalIRQ(primask);
 681:../drivers/fsl_edma.c **** 
 682:../drivers/fsl_edma.c ****             return kStatus_EDMA_QueueFull;
 683:../drivers/fsl_edma.c ****         }
 684:../drivers/fsl_edma.c ****         currentTcd = handle->tail;
 685:../drivers/fsl_edma.c ****         handle->tcdUsed++;
 686:../drivers/fsl_edma.c ****         /* Calculate index of next TCD */
 687:../drivers/fsl_edma.c ****         nextTcd = currentTcd + 1U;
 688:../drivers/fsl_edma.c ****         if (nextTcd == handle->tcdSize)
 689:../drivers/fsl_edma.c ****         {
 690:../drivers/fsl_edma.c ****             nextTcd = 0U;
 691:../drivers/fsl_edma.c ****         }
 692:../drivers/fsl_edma.c ****         /* Advance queue tail index */
 693:../drivers/fsl_edma.c ****         handle->tail = nextTcd;
 694:../drivers/fsl_edma.c ****         EnableGlobalIRQ(primask);
 695:../drivers/fsl_edma.c ****         /* Calculate index of previous TCD */
 696:../drivers/fsl_edma.c ****         previousTcd = currentTcd ? currentTcd - 1U : handle->tcdSize - 1U;
 697:../drivers/fsl_edma.c ****         /* Configure current TCD block. */
 698:../drivers/fsl_edma.c ****         EDMA_TcdReset(&handle->tcdPool[currentTcd]);
 699:../drivers/fsl_edma.c ****         EDMA_TcdSetTransferConfig(&handle->tcdPool[currentTcd], config, NULL);
 700:../drivers/fsl_edma.c ****         /* Enable major interrupt */
 701:../drivers/fsl_edma.c ****         handle->tcdPool[currentTcd].CSR |= DMA_CSR_INTMAJOR_MASK;
 702:../drivers/fsl_edma.c ****         /* Link current TCD with next TCD for identification of current TCD */
 703:../drivers/fsl_edma.c ****         handle->tcdPool[currentTcd].DLAST_SGA = (uint32_t)&handle->tcdPool[nextTcd];
 704:../drivers/fsl_edma.c ****         /* Chain from previous descriptor unless tcd pool size is 1(this descriptor is its own pred
 705:../drivers/fsl_edma.c ****         if (currentTcd != previousTcd)
 706:../drivers/fsl_edma.c ****         {
 707:../drivers/fsl_edma.c ****             /* Enable scatter/gather feature in the previous TCD block. */
 708:../drivers/fsl_edma.c ****             csr = (handle->tcdPool[previousTcd].CSR | DMA_CSR_ESG_MASK) & ~DMA_CSR_DREQ_MASK;
 709:../drivers/fsl_edma.c ****             handle->tcdPool[previousTcd].CSR = csr;
 710:../drivers/fsl_edma.c ****             /*
 711:../drivers/fsl_edma.c ****                 Check if the TCD blcok in the registers is the previous one (points to current TCD 
 712:../drivers/fsl_edma.c ****                 is used to check if the previous TCD linked has been loaded in TCD register. If so,
 713:../drivers/fsl_edma.c ****                 link the TCD register in case link the current TCD with the dead chain when TCD loa
 714:../drivers/fsl_edma.c ****                 before link the previous TCD block.
 715:../drivers/fsl_edma.c ****             */
 716:../drivers/fsl_edma.c ****             if (tcdRegs->DLAST_SGA == (uint32_t)&handle->tcdPool[currentTcd])
 717:../drivers/fsl_edma.c ****             {
 718:../drivers/fsl_edma.c ****                 /* Enable scatter/gather also in the TCD registers. */
 719:../drivers/fsl_edma.c ****                 csr = (tcdRegs->CSR | DMA_CSR_ESG_MASK) & ~DMA_CSR_DREQ_MASK;
 720:../drivers/fsl_edma.c ****                 /* Must write the CSR register one-time, because the transfer maybe finished anytim
 721:../drivers/fsl_edma.c ****                 tcdRegs->CSR = csr;
 722:../drivers/fsl_edma.c ****                 /*
 723:../drivers/fsl_edma.c ****                     It is very important to check the ESG bit!
 724:../drivers/fsl_edma.c ****                     Because this hardware design: if DONE bit is set, the ESG bit can not be set. S
 725:../drivers/fsl_edma.c ****                     be used to check if the dynamic TCD link operation is successful. If ESG bit is
 726:../drivers/fsl_edma.c ****                     and the DLAST_SGA is not the next TCD address(it means the dynamic TCD link suc
 727:../drivers/fsl_edma.c ****                     the current TCD block has been loaded into TCD registers), it means transfer fi
 728:../drivers/fsl_edma.c ****                     and TCD link operation fail, so must install TCD content into TCD registers and
 729:../drivers/fsl_edma.c ****                     transfer again. And if ESG is set, it means transfer has notfinished, so TCD dy
 730:../drivers/fsl_edma.c ****                     link succeed.
 731:../drivers/fsl_edma.c ****                 */
 732:../drivers/fsl_edma.c ****                 if (tcdRegs->CSR & DMA_CSR_ESG_MASK)
 733:../drivers/fsl_edma.c ****                 {
 734:../drivers/fsl_edma.c ****                     return kStatus_Success;
 735:../drivers/fsl_edma.c ****                 }
 736:../drivers/fsl_edma.c ****                 /*
 737:../drivers/fsl_edma.c ****                     Check whether the current TCD block is already loaded in the TCD registers. It 
 738:../drivers/fsl_edma.c ****                     condition when ESG bit is not set: it means the dynamic TCD link succeed and th
 739:../drivers/fsl_edma.c ****                     TCD block has been loaded into TCD registers.
 740:../drivers/fsl_edma.c ****                 */
 741:../drivers/fsl_edma.c ****                 if (tcdRegs->DLAST_SGA == (uint32_t)&handle->tcdPool[nextTcd])
 742:../drivers/fsl_edma.c ****                 {
 743:../drivers/fsl_edma.c ****                     return kStatus_Success;
 744:../drivers/fsl_edma.c ****                 }
 745:../drivers/fsl_edma.c ****                 /*
 746:../drivers/fsl_edma.c ****                     If go to this, means the previous transfer finished, and the DONE bit is set.
 747:../drivers/fsl_edma.c ****                     So shall configure TCD registers.
 748:../drivers/fsl_edma.c ****                 */
 749:../drivers/fsl_edma.c ****             }
 750:../drivers/fsl_edma.c ****             else if (tcdRegs->DLAST_SGA != 0)
 751:../drivers/fsl_edma.c ****             {
 752:../drivers/fsl_edma.c ****                 /* The current TCD block has been linked successfully. */
 753:../drivers/fsl_edma.c ****                 return kStatus_Success;
 754:../drivers/fsl_edma.c ****             }
 755:../drivers/fsl_edma.c ****             else
 756:../drivers/fsl_edma.c ****             {
 757:../drivers/fsl_edma.c ****                 /*
 758:../drivers/fsl_edma.c ****                     DLAST_SGA is 0 and it means the first submit transfer, so shall configure
 759:../drivers/fsl_edma.c ****                     TCD registers.
 760:../drivers/fsl_edma.c ****                 */
 761:../drivers/fsl_edma.c ****             }
 762:../drivers/fsl_edma.c ****         }
 763:../drivers/fsl_edma.c ****         /* There is no live chain, TCD block need to be installed in TCD registers. */
 764:../drivers/fsl_edma.c ****         EDMA_InstallTCD(handle->base, handle->channel, &handle->tcdPool[currentTcd]);
 765:../drivers/fsl_edma.c ****         /* Enable channel request again. */
 766:../drivers/fsl_edma.c ****         if (handle->flags & EDMA_TRANSFER_ENABLED_MASK)
 767:../drivers/fsl_edma.c ****         {
 768:../drivers/fsl_edma.c ****             handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
 769:../drivers/fsl_edma.c ****         }
 770:../drivers/fsl_edma.c **** 
 771:../drivers/fsl_edma.c ****         return kStatus_Success;
 1526              		.loc 1 771 0
 1527 004c 0020     		movs	r0, #0
 1528 004e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1529              	.LVL113:
 1530              	.L122:
 1531              	.LBB128:
 1532              	.LBB129:
 1533              	.LBB130:
 1534              	.LBB131:
 1535              		.file 4 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1536              		.loc 4 383 0
 1537              		.syntax unified
 1538              	@ 383 "../CMSIS/cmsis_gcc.h" 1
 1539 0052 EFF31082 		MRS r2, primask
 1540              	@ 0 "" 2
 1541              		.thumb
 1542              		.syntax unified
 1543              	.LBE131:
 1544              	.LBE130:
 1545              	.LBB132:
 1546              	.LBB133:
 139:../CMSIS/cmsis_gcc.h **** }
 1547              		.loc 4 139 0
 1548              		.syntax unified
 1549              	@ 139 "../CMSIS/cmsis_gcc.h" 1
 1550 0056 72B6     		cpsid i
 1551              	@ 0 "" 2
 1552              		.thumb
 1553              		.syntax unified
 1554              	.LBE133:
 1555              	.LBE132:
 1556              	.LBE129:
 1557              	.LBE128:
 678:../drivers/fsl_edma.c ****         {
 1558              		.loc 1 678 0
 1559 0058 E07C     		ldrb	r0, [r4, #19]	@ zero_extendqisi2
 1560 005a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 1561 005c 40B2     		sxtb	r0, r0
 1562 005e 5BB2     		sxtb	r3, r3
 1563 0060 9842     		cmp	r0, r3
 1564 0062 05DB     		blt	.L125
 1565              	.LVL114:
 1566              	.LBB134:
 1567              	.LBB135:
 1568              	.LBB136:
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1569              		.loc 4 411 0
 1570              		.syntax unified
 1571              	@ 411 "../CMSIS/cmsis_gcc.h" 1
 1572 0064 82F31088 		MSR primask, r2
 1573              	@ 0 "" 2
 1574              	.LVL115:
 1575              		.thumb
 1576              		.syntax unified
 1577              	.LBE136:
 1578              	.LBE135:
 1579              	.LBE134:
 682:../drivers/fsl_edma.c ****         }
 1580              		.loc 1 682 0
 1581 0068 41F2EC30 		movw	r0, #5100
 1582 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1583              	.LVL116:
 1584              	.L125:
 684:../drivers/fsl_edma.c ****         handle->tcdUsed++;
 1585              		.loc 1 684 0
 1586 0070 94F81280 		ldrb	r8, [r4, #18]	@ zero_extendqisi2
 685:../drivers/fsl_edma.c ****         /* Calculate index of next TCD */
 1587              		.loc 1 685 0
 1588 0074 E37C     		ldrb	r3, [r4, #19]	@ zero_extendqisi2
 1589 0076 0133     		adds	r3, r3, #1
 1590 0078 5BB2     		sxtb	r3, r3
 1591 007a E374     		strb	r3, [r4, #19]
 684:../drivers/fsl_edma.c ****         handle->tcdUsed++;
 1592              		.loc 1 684 0
 1593 007c 4FFA88F8 		sxtb	r8, r8
 1594              	.LVL117:
 688:../drivers/fsl_edma.c ****         {
 1595              		.loc 1 688 0
 1596 0080 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 687:../drivers/fsl_edma.c ****         if (nextTcd == handle->tcdSize)
 1597              		.loc 1 687 0
 1598 0082 5FFA88F7 		uxtb	r7, r8
 1599 0086 7D1C     		adds	r5, r7, #1
 688:../drivers/fsl_edma.c ****         {
 1600              		.loc 1 688 0
 1601 0088 5BB2     		sxtb	r3, r3
 687:../drivers/fsl_edma.c ****         if (nextTcd == handle->tcdSize)
 1602              		.loc 1 687 0
 1603 008a 6DB2     		sxtb	r5, r5
 1604              	.LVL118:
 690:../drivers/fsl_edma.c ****         }
 1605              		.loc 1 690 0
 1606 008c 9D42     		cmp	r5, r3
 1607 008e 08BF     		it	eq
 1608 0090 0025     		moveq	r5, #0
 1609              	.LVL119:
 693:../drivers/fsl_edma.c ****         EnableGlobalIRQ(primask);
 1610              		.loc 1 693 0
 1611 0092 A574     		strb	r5, [r4, #18]
 1612              	.LVL120:
 1613              	.LBB137:
 1614              	.LBB138:
 1615              	.LBB139:
 1616              		.loc 4 411 0
 1617              		.syntax unified
 1618              	@ 411 "../CMSIS/cmsis_gcc.h" 1
 1619 0094 82F31088 		MSR primask, r2
 1620              	@ 0 "" 2
 1621              	.LVL121:
 1622              		.thumb
 1623              		.syntax unified
 1624              	.LBE139:
 1625              	.LBE138:
 1626              	.LBE137:
 696:../drivers/fsl_edma.c ****         /* Configure current TCD block. */
 1627              		.loc 1 696 0
 1628 0098 B8F1000F 		cmp	r8, #0
 1629 009c 28D0     		beq	.L127
 1630              	.L139:
 698:../drivers/fsl_edma.c ****         EDMA_TcdSetTransferConfig(&handle->tcdPool[currentTcd], config, NULL);
 1631              		.loc 1 698 0 discriminator 2
 1632 009e E068     		ldr	r0, [r4, #12]
 1633 00a0 4FEA4819 		lsl	r9, r8, #5
 1634 00a4 4844     		add	r0, r0, r9
 1635 00a6 FFF7FEFF 		bl	EDMA_TcdReset
 1636              	.LVL122:
 699:../drivers/fsl_edma.c ****         /* Enable major interrupt */
 1637              		.loc 1 699 0 discriminator 2
 1638 00aa E068     		ldr	r0, [r4, #12]
 1639 00ac 0022     		movs	r2, #0
 1640 00ae 4844     		add	r0, r0, r9
 1641 00b0 FFF7FEFF 		bl	EDMA_TcdSetTransferConfig
 1642              	.LVL123:
 701:../drivers/fsl_edma.c ****         /* Link current TCD with next TCD for identification of current TCD */
 1643              		.loc 1 701 0 discriminator 2
 1644 00b4 E368     		ldr	r3, [r4, #12]
 1645 00b6 03EB0902 		add	r2, r3, r9
 696:../drivers/fsl_edma.c ****         /* Configure current TCD block. */
 1646              		.loc 1 696 0 discriminator 2
 1647 00ba 013F     		subs	r7, r7, #1
 701:../drivers/fsl_edma.c ****         /* Link current TCD with next TCD for identification of current TCD */
 1648              		.loc 1 701 0 discriminator 2
 1649 00bc 918B     		ldrh	r1, [r2, #28]
 1650              	.LVL124:
 696:../drivers/fsl_edma.c ****         /* Configure current TCD block. */
 1651              		.loc 1 696 0 discriminator 2
 1652 00be 7FB2     		sxtb	r7, r7
 1653              	.LVL125:
 701:../drivers/fsl_edma.c ****         /* Link current TCD with next TCD for identification of current TCD */
 1654              		.loc 1 701 0 discriminator 2
 1655 00c0 89B2     		uxth	r1, r1
 703:../drivers/fsl_edma.c ****         /* Chain from previous descriptor unless tcd pool size is 1(this descriptor is its own pred
 1656              		.loc 1 703 0 discriminator 2
 1657 00c2 2DB2     		sxth	r5, r5
 1658              	.LVL126:
 701:../drivers/fsl_edma.c ****         /* Link current TCD with next TCD for identification of current TCD */
 1659              		.loc 1 701 0 discriminator 2
 1660 00c4 41F00201 		orr	r1, r1, #2
 703:../drivers/fsl_edma.c ****         /* Chain from previous descriptor unless tcd pool size is 1(this descriptor is its own pred
 1661              		.loc 1 703 0 discriminator 2
 1662 00c8 03EB4515 		add	r5, r3, r5, lsl #5
 705:../drivers/fsl_edma.c ****         {
 1663              		.loc 1 705 0 discriminator 2
 1664 00cc 4745     		cmp	r7, r8
 701:../drivers/fsl_edma.c ****         /* Link current TCD with next TCD for identification of current TCD */
 1665              		.loc 1 701 0 discriminator 2
 1666 00ce 9183     		strh	r1, [r2, #28]	@ movhi
 703:../drivers/fsl_edma.c ****         /* Chain from previous descriptor unless tcd pool size is 1(this descriptor is its own pred
 1667              		.loc 1 703 0 discriminator 2
 1668 00d0 9561     		str	r5, [r2, #24]
 705:../drivers/fsl_edma.c ****         {
 1669              		.loc 1 705 0 discriminator 2
 1670 00d2 0FD1     		bne	.L129
 1671              	.LVL127:
 1672              	.L134:
 764:../drivers/fsl_edma.c ****         /* Enable channel request again. */
 1673              		.loc 1 764 0
 1674 00d4 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 1675 00d6 A068     		ldr	r0, [r4, #8]
 1676 00d8 FFF7FEFF 		bl	EDMA_InstallTCD
 1677              	.LVL128:
 766:../drivers/fsl_edma.c ****         {
 1678              		.loc 1 766 0
 1679 00dc 94F91530 		ldrsb	r3, [r4, #21]
 1680 00e0 002B     		cmp	r3, #0
 1681 00e2 B3DA     		bge	.L140
 768:../drivers/fsl_edma.c ****         }
 1682              		.loc 1 768 0
 1683 00e4 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1684 00e6 A268     		ldr	r2, [r4, #8]
 1685 00e8 03F00F03 		and	r3, r3, #15
 1686 00ec D376     		strb	r3, [r2, #27]
 1687 00ee ADE7     		b	.L140
 1688              	.LVL129:
 1689              	.L127:
 696:../drivers/fsl_edma.c ****         /* Configure current TCD block. */
 1690              		.loc 1 696 0 discriminator 2
 1691 00f0 277D     		ldrb	r7, [r4, #20]	@ zero_extendqisi2
 1692 00f2 D4E7     		b	.L139
 1693              	.LVL130:
 1694              	.L129:
 708:../drivers/fsl_edma.c ****             handle->tcdPool[previousTcd].CSR = csr;
 1695              		.loc 1 708 0
 1696 00f4 03EB4717 		add	r7, r3, r7, lsl #5
 1697              	.LVL131:
 1698 00f8 BB8B     		ldrh	r3, [r7, #28]
 1699              	.LVL132:
 1700 00fa 23F01803 		bic	r3, r3, #24
 1701              	.LVL133:
 1702 00fe 1B04     		lsls	r3, r3, #16
 1703 0100 1B0C     		lsrs	r3, r3, #16
 709:../drivers/fsl_edma.c ****             /*
 1704              		.loc 1 709 0
 1705 0102 43F01003 		orr	r3, r3, #16
 1706 0106 BB83     		strh	r3, [r7, #28]	@ movhi
 716:../drivers/fsl_edma.c ****             {
 1707              		.loc 1 716 0
 1708 0108 B369     		ldr	r3, [r6, #24]
 1709 010a 9A42     		cmp	r2, r3
 1710 010c 0ED1     		bne	.L132
 719:../drivers/fsl_edma.c ****                 /* Must write the CSR register one-time, because the transfer maybe finished anytim
 1711              		.loc 1 719 0
 1712 010e B38B     		ldrh	r3, [r6, #28]
 1713              	.LVL134:
 1714 0110 23F01803 		bic	r3, r3, #24
 1715              	.LVL135:
 1716 0114 1B04     		lsls	r3, r3, #16
 1717 0116 1B0C     		lsrs	r3, r3, #16
 721:../drivers/fsl_edma.c ****                 /*
 1718              		.loc 1 721 0
 1719 0118 43F01003 		orr	r3, r3, #16
 1720 011c B383     		strh	r3, [r6, #28]	@ movhi
 732:../drivers/fsl_edma.c ****                 {
 1721              		.loc 1 732 0
 1722 011e B38B     		ldrh	r3, [r6, #28]
 1723 0120 DB06     		lsls	r3, r3, #27
 1724 0122 93D4     		bmi	.L140
 741:../drivers/fsl_edma.c ****                 {
 1725              		.loc 1 741 0
 1726 0124 B369     		ldr	r3, [r6, #24]
 1727 0126 9D42     		cmp	r5, r3
 1728 0128 D4D1     		bne	.L134
 1729 012a 8FE7     		b	.L140
 1730              	.L132:
 750:../drivers/fsl_edma.c ****             {
 1731              		.loc 1 750 0
 1732 012c B369     		ldr	r3, [r6, #24]
 1733 012e 002B     		cmp	r3, #0
 1734 0130 D0D0     		beq	.L134
 1735 0132 8BE7     		b	.L140
 1736              	.LVL136:
 1737              	.L135:
 1738              	.LBE127:
 655:../drivers/fsl_edma.c ****         }
 1739              		.loc 1 655 0
 1740 0134 41F2ED30 		movw	r0, #5101
 772:../drivers/fsl_edma.c ****     }
 773:../drivers/fsl_edma.c **** }
 1741              		.loc 1 773 0
 1742 0138 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1743              		.cfi_endproc
 1744              	.LFE185:
 1746              		.section	.text.EDMA_StartTransfer,"ax",%progbits
 1747              		.align	1
 1748              		.global	EDMA_StartTransfer
 1749              		.syntax unified
 1750              		.thumb
 1751              		.thumb_func
 1752              		.fpu fpv4-sp-d16
 1754              	EDMA_StartTransfer:
 1755              	.LFB186:
 774:../drivers/fsl_edma.c **** 
 775:../drivers/fsl_edma.c **** void EDMA_StartTransfer(edma_handle_t *handle)
 776:../drivers/fsl_edma.c **** {
 1756              		.loc 1 776 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 0
 1759              		@ frame_needed = 0, uses_anonymous_args = 0
 1760              	.LVL137:
 777:../drivers/fsl_edma.c ****     assert(handle != NULL);
 778:../drivers/fsl_edma.c **** 
 779:../drivers/fsl_edma.c ****     if (handle->tcdPool == NULL)
 1761              		.loc 1 779 0
 1762 0000 C168     		ldr	r1, [r0, #12]
 1763 0002 8368     		ldr	r3, [r0, #8]
 1764 0004 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
 776:../drivers/fsl_edma.c ****     assert(handle != NULL);
 1765              		.loc 1 776 0
 1766 0006 70B5     		push	{r4, r5, r6, lr}
 1767              		.cfi_def_cfa_offset 16
 1768              		.cfi_offset 4, -16
 1769              		.cfi_offset 5, -12
 1770              		.cfi_offset 6, -8
 1771              		.cfi_offset 14, -4
 1772              		.loc 1 779 0
 1773 0008 19B9     		cbnz	r1, .L142
 780:../drivers/fsl_edma.c ****     {
 781:../drivers/fsl_edma.c ****         handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
 1774              		.loc 1 781 0
 1775 000a 02F00F02 		and	r2, r2, #15
 1776 000e DA76     		strb	r2, [r3, #27]
 1777 0010 70BD     		pop	{r4, r5, r6, pc}
 1778              	.L142:
 1779              	.LBB140:
 782:../drivers/fsl_edma.c ****     }
 783:../drivers/fsl_edma.c ****     else /* Use the TCD queue. */
 784:../drivers/fsl_edma.c ****     {
 785:../drivers/fsl_edma.c ****         uint32_t primask;
 786:../drivers/fsl_edma.c ****         edma_tcd_t *tcdRegs = (edma_tcd_t *)&handle->base->TCD[handle->channel];
 1780              		.loc 1 786 0
 1781 0012 8032     		adds	r2, r2, #128
 1782 0014 03EB4213 		add	r3, r3, r2, lsl #5
 1783              	.LVL138:
 787:../drivers/fsl_edma.c **** 
 788:../drivers/fsl_edma.c ****         handle->flags |= EDMA_TRANSFER_ENABLED_MASK;
 1784              		.loc 1 788 0
 1785 0018 427D     		ldrb	r2, [r0, #21]	@ zero_extendqisi2
 1786 001a 62F07F02 		orn	r2, r2, #127
 1787 001e 4275     		strb	r2, [r0, #21]
 789:../drivers/fsl_edma.c **** 
 790:../drivers/fsl_edma.c ****         /* Check if there was at least one descriptor submitted since reset (TCD in registers is va
 791:../drivers/fsl_edma.c ****         if (tcdRegs->DLAST_SGA != 0U)
 1788              		.loc 1 791 0
 1789 0020 9A69     		ldr	r2, [r3, #24]
 1790 0022 A2B1     		cbz	r2, .L141
 1791              	.LBB141:
 1792              	.LBB142:
 1793              	.LBB143:
 1794              	.LBB144:
 383:../CMSIS/cmsis_gcc.h ****   return(result);
 1795              		.loc 4 383 0
 1796              		.syntax unified
 1797              	@ 383 "../CMSIS/cmsis_gcc.h" 1
 1798 0024 EFF31085 		MRS r5, primask
 1799              	@ 0 "" 2
 1800              		.thumb
 1801              		.syntax unified
 1802              	.LBE144:
 1803              	.LBE143:
 1804              	.LBB145:
 1805              	.LBB146:
 139:../CMSIS/cmsis_gcc.h **** }
 1806              		.loc 4 139 0
 1807              		.syntax unified
 1808              	@ 139 "../CMSIS/cmsis_gcc.h" 1
 1809 0028 72B6     		cpsid i
 1810              	@ 0 "" 2
 1811              		.thumb
 1812              		.syntax unified
 1813              	.LBE146:
 1814              	.LBE145:
 1815              	.LBE142:
 1816              	.LBE141:
 792:../drivers/fsl_edma.c ****         {
 793:../drivers/fsl_edma.c ****             primask = DisableGlobalIRQ();
 794:../drivers/fsl_edma.c ****             /* Check if channel request is actually disable. */
 795:../drivers/fsl_edma.c ****             if ((handle->base->ERQ & (1U << handle->channel)) == 0U)
 1817              		.loc 1 795 0
 1818 002a 8468     		ldr	r4, [r0, #8]
 1819 002c 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
 1820 002e E668     		ldr	r6, [r4, #12]
 1821 0030 0121     		movs	r1, #1
 1822 0032 9140     		lsls	r1, r1, r2
 1823 0034 3142     		tst	r1, r6
 1824 0036 08D1     		bne	.L144
 796:../drivers/fsl_edma.c ****             {
 797:../drivers/fsl_edma.c ****                 /* Check if transfer is paused. */
 798:../drivers/fsl_edma.c ****                 if ((!(tcdRegs->CSR & DMA_CSR_DONE_MASK)) || (tcdRegs->CSR & DMA_CSR_ESG_MASK))
 1825              		.loc 1 798 0
 1826 0038 998B     		ldrh	r1, [r3, #28]
 1827 003a 0906     		lsls	r1, r1, #24
 1828 003c 02D5     		bpl	.L145
 1829              		.loc 1 798 0 is_stmt 0 discriminator 1
 1830 003e 9B8B     		ldrh	r3, [r3, #28]
 1831              	.LVL139:
 1832 0040 DB06     		lsls	r3, r3, #27
 1833 0042 02D5     		bpl	.L144
 1834              	.L145:
 799:../drivers/fsl_edma.c ****                 {
 800:../drivers/fsl_edma.c ****                     /*
 801:../drivers/fsl_edma.c ****                         Re-enable channel request must be as soon as possible, so must put it into
 802:../drivers/fsl_edma.c ****                         critical section to avoid task switching or interrupt service routine.
 803:../drivers/fsl_edma.c ****                     */
 804:../drivers/fsl_edma.c ****                     handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
 1835              		.loc 1 804 0 is_stmt 1
 1836 0044 02F00F02 		and	r2, r2, #15
 1837 0048 E276     		strb	r2, [r4, #27]
 1838              	.LVL140:
 1839              	.L144:
 1840              	.LBB147:
 1841              	.LBB148:
 1842              	.LBB149:
 1843              		.loc 4 411 0
 1844              		.syntax unified
 1845              	@ 411 "../CMSIS/cmsis_gcc.h" 1
 1846 004a 85F31088 		MSR primask, r5
 1847              	@ 0 "" 2
 1848              	.LVL141:
 1849              		.thumb
 1850              		.syntax unified
 1851              	.L141:
 1852 004e 70BD     		pop	{r4, r5, r6, pc}
 1853              	.LBE149:
 1854              	.LBE148:
 1855              	.LBE147:
 1856              	.LBE140:
 1857              		.cfi_endproc
 1858              	.LFE186:
 1860              		.section	.text.EDMA_StopTransfer,"ax",%progbits
 1861              		.align	1
 1862              		.global	EDMA_StopTransfer
 1863              		.syntax unified
 1864              		.thumb
 1865              		.thumb_func
 1866              		.fpu fpv4-sp-d16
 1868              	EDMA_StopTransfer:
 1869              	.LFB187:
 805:../drivers/fsl_edma.c ****                 }
 806:../drivers/fsl_edma.c ****             }
 807:../drivers/fsl_edma.c ****             EnableGlobalIRQ(primask);
 808:../drivers/fsl_edma.c ****         }
 809:../drivers/fsl_edma.c ****     }
 810:../drivers/fsl_edma.c **** }
 811:../drivers/fsl_edma.c **** 
 812:../drivers/fsl_edma.c **** void EDMA_StopTransfer(edma_handle_t *handle)
 813:../drivers/fsl_edma.c **** {
 1870              		.loc 1 813 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 1875              	.LVL142:
 814:../drivers/fsl_edma.c ****     assert(handle != NULL);
 815:../drivers/fsl_edma.c **** 
 816:../drivers/fsl_edma.c ****     handle->flags &= (~EDMA_TRANSFER_ENABLED_MASK);
 1876              		.loc 1 816 0
 1877 0000 437D     		ldrb	r3, [r0, #21]	@ zero_extendqisi2
 817:../drivers/fsl_edma.c ****     handle->base->CERQ = DMA_CERQ_CERQ(handle->channel);
 1878              		.loc 1 817 0
 1879 0002 8268     		ldr	r2, [r0, #8]
 816:../drivers/fsl_edma.c ****     handle->base->CERQ = DMA_CERQ_CERQ(handle->channel);
 1880              		.loc 1 816 0
 1881 0004 03F07F03 		and	r3, r3, #127
 1882 0008 4375     		strb	r3, [r0, #21]
 1883              		.loc 1 817 0
 1884 000a 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 1885 000c 03F00F03 		and	r3, r3, #15
 1886 0010 9376     		strb	r3, [r2, #26]
 1887 0012 7047     		bx	lr
 1888              		.cfi_endproc
 1889              	.LFE187:
 1891              		.section	.text.EDMA_AbortTransfer,"ax",%progbits
 1892              		.align	1
 1893              		.global	EDMA_AbortTransfer
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu fpv4-sp-d16
 1899              	EDMA_AbortTransfer:
 1900              	.LFB188:
 818:../drivers/fsl_edma.c **** }
 819:../drivers/fsl_edma.c **** 
 820:../drivers/fsl_edma.c **** void EDMA_AbortTransfer(edma_handle_t *handle)
 821:../drivers/fsl_edma.c **** {
 1901              		.loc 1 821 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 0
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906              	.LVL143:
 822:../drivers/fsl_edma.c ****     handle->base->CERQ = DMA_CERQ_CERQ(handle->channel);
 1907              		.loc 1 822 0
 1908 0000 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 1909 0002 8268     		ldr	r2, [r0, #8]
 1910 0004 03F00F01 		and	r1, r3, #15
 1911 0008 9176     		strb	r1, [r2, #26]
 823:../drivers/fsl_edma.c ****     /*
 824:../drivers/fsl_edma.c ****         Clear CSR to release channel. Because if the given channel started transfer,
 825:../drivers/fsl_edma.c ****         CSR will be not zero. Because if it is the last transfer, DREQ will be set.
 826:../drivers/fsl_edma.c ****         If not, ESG will be set.
 827:../drivers/fsl_edma.c ****     */
 828:../drivers/fsl_edma.c ****     handle->base->TCD[handle->channel].CSR = 0;
 1912              		.loc 1 828 0
 1913 000a 02EB4312 		add	r2, r2, r3, lsl #5
 1914 000e 41F21C01 		movw	r1, #4124
 1915 0012 0023     		movs	r3, #0
 1916 0014 5352     		strh	r3, [r2, r1]	@ movhi
 829:../drivers/fsl_edma.c ****     /* Cancel all next TCD transfer. */
 830:../drivers/fsl_edma.c ****     handle->base->TCD[handle->channel].DLAST_SGA = 0;
 1917              		.loc 1 830 0
 1918 0016 41F21801 		movw	r1, #4120
 1919 001a 5350     		str	r3, [r2, r1]
 831:../drivers/fsl_edma.c **** 
 832:../drivers/fsl_edma.c ****     /* Handle the tcd */
 833:../drivers/fsl_edma.c ****     if (handle->tcdPool != NULL)
 1920              		.loc 1 833 0
 1921 001c C268     		ldr	r2, [r0, #12]
 1922 001e 12B1     		cbz	r2, .L156
 834:../drivers/fsl_edma.c ****     {
 835:../drivers/fsl_edma.c ****         handle->header = 0;
 1923              		.loc 1 835 0
 1924 0020 4374     		strb	r3, [r0, #17]
 836:../drivers/fsl_edma.c ****         handle->tail = 0;
 1925              		.loc 1 836 0
 1926 0022 8374     		strb	r3, [r0, #18]
 837:../drivers/fsl_edma.c ****         handle->tcdUsed = 0;
 1927              		.loc 1 837 0
 1928 0024 C374     		strb	r3, [r0, #19]
 1929              	.L156:
 1930 0026 7047     		bx	lr
 1931              		.cfi_endproc
 1932              	.LFE188:
 1934              		.section	.text.EDMA_HandleIRQ,"ax",%progbits
 1935              		.align	1
 1936              		.global	EDMA_HandleIRQ
 1937              		.syntax unified
 1938              		.thumb
 1939              		.thumb_func
 1940              		.fpu fpv4-sp-d16
 1942              	EDMA_HandleIRQ:
 1943              	.LFB189:
 838:../drivers/fsl_edma.c ****     }
 839:../drivers/fsl_edma.c **** }
 840:../drivers/fsl_edma.c **** 
 841:../drivers/fsl_edma.c **** void EDMA_HandleIRQ(edma_handle_t *handle)
 842:../drivers/fsl_edma.c **** {
 1944              		.loc 1 842 0
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 0
 1947              		@ frame_needed = 0, uses_anonymous_args = 0
 1948              		@ link register save eliminated.
 1949              	.LVL144:
 1950 0000 30B4     		push	{r4, r5}
 1951              		.cfi_def_cfa_offset 8
 1952              		.cfi_offset 4, -8
 1953              		.cfi_offset 5, -4
 843:../drivers/fsl_edma.c ****     assert(handle != NULL);
 844:../drivers/fsl_edma.c **** 
 845:../drivers/fsl_edma.c ****     /* Clear EDMA interrupt flag */
 846:../drivers/fsl_edma.c ****     handle->base->CINT = handle->channel;
 1954              		.loc 1 846 0
 1955 0002 8268     		ldr	r2, [r0, #8]
 1956 0004 017C     		ldrb	r1, [r0, #16]	@ zero_extendqisi2
 1957 0006 D177     		strb	r1, [r2, #31]
 847:../drivers/fsl_edma.c ****     if ((handle->tcdPool == NULL) && (handle->callback != NULL))
 1958              		.loc 1 847 0
 1959 0008 C368     		ldr	r3, [r0, #12]
 1960 000a 0468     		ldr	r4, [r0]
 842:../drivers/fsl_edma.c ****     assert(handle != NULL);
 1961              		.loc 1 842 0
 1962 000c 0546     		mov	r5, r0
 1963              		.loc 1 847 0
 1964 000e 2BB9     		cbnz	r3, .L162
 1965              		.loc 1 847 0 is_stmt 0 discriminator 1
 1966 0010 24B1     		cbz	r4, .L162
 848:../drivers/fsl_edma.c ****     {
 849:../drivers/fsl_edma.c ****         (handle->callback)(handle, handle->userData, true, 0);
 1967              		.loc 1 849 0 is_stmt 1
 1968 0012 4168     		ldr	r1, [r0, #4]
 1969 0014 0122     		movs	r2, #1
 1970              	.L174:
 1971              	.LBB150:
 850:../drivers/fsl_edma.c ****     }
 851:../drivers/fsl_edma.c ****     else /* Use the TCD queue. Please refer to the API descriptions in the eDMA header file for det
 852:../drivers/fsl_edma.c ****     {
 853:../drivers/fsl_edma.c ****         uint32_t sga = handle->base->TCD[handle->channel].DLAST_SGA;
 854:../drivers/fsl_edma.c ****         uint32_t sga_index;
 855:../drivers/fsl_edma.c ****         int32_t tcds_done;
 856:../drivers/fsl_edma.c ****         uint8_t new_header;
 857:../drivers/fsl_edma.c ****         bool transfer_done;
 858:../drivers/fsl_edma.c **** 
 859:../drivers/fsl_edma.c ****         /* Check if transfer is already finished. */
 860:../drivers/fsl_edma.c ****         transfer_done = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_DONE_MASK) != 0);
 861:../drivers/fsl_edma.c ****         /* Get the offset of the next transfer TCD blcoks to be loaded into the eDMA engine. */
 862:../drivers/fsl_edma.c ****         sga -= (uint32_t)handle->tcdPool;
 863:../drivers/fsl_edma.c ****         /* Get the index of the next transfer TCD blcoks to be loaded into the eDMA engine. */
 864:../drivers/fsl_edma.c ****         sga_index = sga / sizeof(edma_tcd_t);
 865:../drivers/fsl_edma.c ****         /* Adjust header positions. */
 866:../drivers/fsl_edma.c ****         if (transfer_done)
 867:../drivers/fsl_edma.c ****         {
 868:../drivers/fsl_edma.c ****             /* New header shall point to the next TCD to be loaded (current one is already finished
 869:../drivers/fsl_edma.c ****             new_header = sga_index;
 870:../drivers/fsl_edma.c ****         }
 871:../drivers/fsl_edma.c ****         else
 872:../drivers/fsl_edma.c ****         {
 873:../drivers/fsl_edma.c ****             /* New header shall point to this descriptor currently loaded (not finished yet) */
 874:../drivers/fsl_edma.c ****             new_header = sga_index ? sga_index - 1U : handle->tcdSize - 1U;
 875:../drivers/fsl_edma.c ****         }
 876:../drivers/fsl_edma.c ****         /* Calculate the number of finished TCDs */
 877:../drivers/fsl_edma.c ****         if (new_header == handle->header)
 878:../drivers/fsl_edma.c ****         {
 879:../drivers/fsl_edma.c ****             if (handle->tcdUsed == handle->tcdSize)
 880:../drivers/fsl_edma.c ****             {
 881:../drivers/fsl_edma.c ****                 tcds_done = handle->tcdUsed;
 882:../drivers/fsl_edma.c ****             }
 883:../drivers/fsl_edma.c ****             else
 884:../drivers/fsl_edma.c ****             {
 885:../drivers/fsl_edma.c ****                 /* No TCD in the memory are going to be loaded or internal error occurs. */
 886:../drivers/fsl_edma.c ****                 tcds_done = 0;
 887:../drivers/fsl_edma.c ****             }
 888:../drivers/fsl_edma.c ****         }
 889:../drivers/fsl_edma.c ****         else
 890:../drivers/fsl_edma.c ****         {
 891:../drivers/fsl_edma.c ****             tcds_done = new_header - handle->header;
 892:../drivers/fsl_edma.c ****             if (tcds_done < 0)
 893:../drivers/fsl_edma.c ****             {
 894:../drivers/fsl_edma.c ****                 tcds_done += handle->tcdSize;
 895:../drivers/fsl_edma.c ****             }
 896:../drivers/fsl_edma.c ****         }
 897:../drivers/fsl_edma.c ****         /* Advance header which points to the TCD to be loaded into the eDMA engine from memory. */
 898:../drivers/fsl_edma.c ****         handle->header = new_header;
 899:../drivers/fsl_edma.c ****         /* Release TCD blocks. tcdUsed is the TCD number which can be used/loaded in the memory poo
 900:../drivers/fsl_edma.c ****         handle->tcdUsed -= tcds_done;
 901:../drivers/fsl_edma.c ****         /* Invoke callback function. */
 902:../drivers/fsl_edma.c ****         if (handle->callback)
 903:../drivers/fsl_edma.c ****         {
 904:../drivers/fsl_edma.c ****             (handle->callback)(handle, handle->userData, transfer_done, tcds_done);
 1972              		.loc 1 904 0
 1973 0016 A446     		mov	ip, r4
 1974              	.LBE150:
 905:../drivers/fsl_edma.c ****         }
 906:../drivers/fsl_edma.c ****     }
 907:../drivers/fsl_edma.c **** }
 1975              		.loc 1 907 0
 1976 0018 30BC     		pop	{r4, r5}
 1977              		.cfi_remember_state
 1978              		.cfi_restore 5
 1979              		.cfi_restore 4
 1980              		.cfi_def_cfa_offset 0
 1981              	.LBB151:
 904:../drivers/fsl_edma.c ****         }
 1982              		.loc 1 904 0
 1983 001a 6047     		bx	ip	@ indirect register sibling call
 1984              	.LVL145:
 1985              	.L162:
 1986              		.cfi_restore_state
 853:../drivers/fsl_edma.c ****         uint32_t sga_index;
 1987              		.loc 1 853 0
 1988 001c 02EB4112 		add	r2, r2, r1, lsl #5
 860:../drivers/fsl_edma.c ****         /* Get the offset of the next transfer TCD blcoks to be loaded into the eDMA engine. */
 1989              		.loc 1 860 0
 1990 0020 41F21C00 		movw	r0, #4124
 1991              	.LVL146:
 853:../drivers/fsl_edma.c ****         uint32_t sga_index;
 1992              		.loc 1 853 0
 1993 0024 41F21801 		movw	r1, #4120
 1994 0028 5158     		ldr	r1, [r2, r1]
 1995              	.LVL147:
 860:../drivers/fsl_edma.c ****         /* Get the offset of the next transfer TCD blcoks to be loaded into the eDMA engine. */
 1996              		.loc 1 860 0
 1997 002a 125A     		ldrh	r2, [r2, r0]
 1998 002c 02F08002 		and	r2, r2, #128
 1999 0030 002A     		cmp	r2, #0
 862:../drivers/fsl_edma.c ****         /* Get the index of the next transfer TCD blcoks to be loaded into the eDMA engine. */
 2000              		.loc 1 862 0
 2001 0032 A1EB0301 		sub	r1, r1, r3
 2002              	.LVL148:
 860:../drivers/fsl_edma.c ****         /* Get the offset of the next transfer TCD blcoks to be loaded into the eDMA engine. */
 2003              		.loc 1 860 0
 2004 0036 14BF     		ite	ne
 2005 0038 0122     		movne	r2, #1
 2006 003a 0022     		moveq	r2, #0
 2007              	.LVL149:
 864:../drivers/fsl_edma.c ****         /* Adjust header positions. */
 2008              		.loc 1 864 0
 2009 003c 4FEA5111 		lsr	r1, r1, #5
 2010              	.LVL150:
 866:../drivers/fsl_edma.c ****         {
 2011              		.loc 1 866 0
 2012 0040 14D0     		beq	.L163
 2013              	.LVL151:
 2014              	.L173:
 874:../drivers/fsl_edma.c ****         }
 2015              		.loc 1 874 0 discriminator 1
 2016 0042 C9B2     		uxtb	r1, r1
 2017              	.L164:
 2018              	.LVL152:
 877:../drivers/fsl_edma.c ****         {
 2019              		.loc 1 877 0
 2020 0044 6B7C     		ldrb	r3, [r5, #17]	@ zero_extendqisi2
 2021 0046 5BB2     		sxtb	r3, r3
 2022 0048 9942     		cmp	r1, r3
 2023 004a 17D1     		bne	.L166
 879:../drivers/fsl_edma.c ****             {
 2024              		.loc 1 879 0
 2025 004c EB7C     		ldrb	r3, [r5, #19]	@ zero_extendqisi2
 2026 004e 287D     		ldrb	r0, [r5, #20]	@ zero_extendqisi2
 2027 0050 9842     		cmp	r0, r3
 2028 0052 1BD1     		bne	.L169
 881:../drivers/fsl_edma.c ****             }
 2029              		.loc 1 881 0
 2030 0054 EB7C     		ldrb	r3, [r5, #19]	@ zero_extendqisi2
 2031 0056 5BB2     		sxtb	r3, r3
 2032              	.LVL153:
 2033              	.L167:
 898:../drivers/fsl_edma.c ****         /* Release TCD blocks. tcdUsed is the TCD number which can be used/loaded in the memory poo
 2034              		.loc 1 898 0
 2035 0058 49B2     		sxtb	r1, r1
 2036 005a 6974     		strb	r1, [r5, #17]
 900:../drivers/fsl_edma.c ****         /* Invoke callback function. */
 2037              		.loc 1 900 0
 2038 005c E97C     		ldrb	r1, [r5, #19]	@ zero_extendqisi2
 2039              	.LVL154:
 2040 005e C91A     		subs	r1, r1, r3
 2041 0060 49B2     		sxtb	r1, r1
 2042 0062 E974     		strb	r1, [r5, #19]
 902:../drivers/fsl_edma.c ****         {
 2043              		.loc 1 902 0
 2044 0064 A4B1     		cbz	r4, .L161
 904:../drivers/fsl_edma.c ****         }
 2045              		.loc 1 904 0
 2046 0066 6968     		ldr	r1, [r5, #4]
 2047 0068 2846     		mov	r0, r5
 2048 006a D4E7     		b	.L174
 2049              	.LVL155:
 2050              	.L163:
 874:../drivers/fsl_edma.c ****         }
 2051              		.loc 1 874 0
 2052 006c 09B1     		cbz	r1, .L165
 874:../drivers/fsl_edma.c ****         }
 2053              		.loc 1 874 0 is_stmt 0 discriminator 1
 2054 006e 0139     		subs	r1, r1, #1
 2055              	.LVL156:
 2056 0070 E7E7     		b	.L173
 2057              	.LVL157:
 2058              	.L165:
 874:../drivers/fsl_edma.c ****         }
 2059              		.loc 1 874 0 discriminator 2
 2060 0072 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 2061              	.LVL158:
 2062 0074 0139     		subs	r1, r1, #1
 2063 0076 01F0FF01 		and	r1, r1, #255
 2064 007a E3E7     		b	.L164
 2065              	.LVL159:
 2066              	.L166:
 891:../drivers/fsl_edma.c ****             if (tcds_done < 0)
 2067              		.loc 1 891 0 is_stmt 1
 2068 007c 6B7C     		ldrb	r3, [r5, #17]	@ zero_extendqisi2
 2069 007e 5BB2     		sxtb	r3, r3
 2070              	.LVL160:
 892:../drivers/fsl_edma.c ****             {
 2071              		.loc 1 892 0
 2072 0080 CB1A     		subs	r3, r1, r3
 2073              	.LVL161:
 2074 0082 E9D5     		bpl	.L167
 894:../drivers/fsl_edma.c ****             }
 2075              		.loc 1 894 0
 2076 0084 287D     		ldrb	r0, [r5, #20]	@ zero_extendqisi2
 2077 0086 43FA80F3 		sxtab	r3, r3, r0
 2078              	.LVL162:
 2079 008a E5E7     		b	.L167
 2080              	.LVL163:
 2081              	.L169:
 886:../drivers/fsl_edma.c ****             }
 2082              		.loc 1 886 0
 2083 008c 0023     		movs	r3, #0
 2084 008e E3E7     		b	.L167
 2085              	.LVL164:
 2086              	.L161:
 2087              	.LBE151:
 2088              		.loc 1 907 0
 2089 0090 30BC     		pop	{r4, r5}
 2090              		.cfi_restore 5
 2091              		.cfi_restore 4
 2092              		.cfi_def_cfa_offset 0
 2093              	.LVL165:
 2094 0092 7047     		bx	lr
 2095              		.cfi_endproc
 2096              	.LFE189:
 2098              		.section	.text.DMA0_08_DriverIRQHandler,"ax",%progbits
 2099              		.align	1
 2100              		.global	DMA0_08_DriverIRQHandler
 2101              		.syntax unified
 2102              		.thumb
 2103              		.thumb_func
 2104              		.fpu fpv4-sp-d16
 2106              	DMA0_08_DriverIRQHandler:
 2107              	.LFB190:
 908:../drivers/fsl_edma.c **** 
 909:../drivers/fsl_edma.c **** /* 8 channels (Shared): kl28 */
 910:../drivers/fsl_edma.c **** #if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL == 8U
 911:../drivers/fsl_edma.c **** 
 912:../drivers/fsl_edma.c **** #if defined(DMA0)
 913:../drivers/fsl_edma.c **** void DMA0_04_DriverIRQHandler(void)
 914:../drivers/fsl_edma.c **** {
 915:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 0U) & kEDMA_InterruptFlag) != 0U)
 916:../drivers/fsl_edma.c ****     {
 917:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[0]);
 918:../drivers/fsl_edma.c ****     }
 919:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 4U) & kEDMA_InterruptFlag) != 0U)
 920:../drivers/fsl_edma.c ****     {
 921:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[4]);
 922:../drivers/fsl_edma.c ****     }
 923:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
 924:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
 925:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
 926:../drivers/fsl_edma.c ****     __DSB();
 927:../drivers/fsl_edma.c **** #endif
 928:../drivers/fsl_edma.c **** }
 929:../drivers/fsl_edma.c **** 
 930:../drivers/fsl_edma.c **** void DMA0_15_DriverIRQHandler(void)
 931:../drivers/fsl_edma.c **** {
 932:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 1U) & kEDMA_InterruptFlag) != 0U)
 933:../drivers/fsl_edma.c ****     {
 934:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[1]);
 935:../drivers/fsl_edma.c ****     }
 936:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 5U) & kEDMA_InterruptFlag) != 0U)
 937:../drivers/fsl_edma.c ****     {
 938:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[5]);
 939:../drivers/fsl_edma.c ****     }
 940:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
 941:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
 942:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
 943:../drivers/fsl_edma.c ****     __DSB();
 944:../drivers/fsl_edma.c **** #endif
 945:../drivers/fsl_edma.c **** }
 946:../drivers/fsl_edma.c **** 
 947:../drivers/fsl_edma.c **** void DMA0_26_DriverIRQHandler(void)
 948:../drivers/fsl_edma.c **** {
 949:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 2U) & kEDMA_InterruptFlag) != 0U)
 950:../drivers/fsl_edma.c ****     {
 951:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[2]);
 952:../drivers/fsl_edma.c ****     }
 953:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 6U) & kEDMA_InterruptFlag) != 0U)
 954:../drivers/fsl_edma.c ****     {
 955:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[6]);
 956:../drivers/fsl_edma.c ****     }
 957:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
 958:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
 959:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
 960:../drivers/fsl_edma.c ****     __DSB();
 961:../drivers/fsl_edma.c **** #endif
 962:../drivers/fsl_edma.c **** }
 963:../drivers/fsl_edma.c **** 
 964:../drivers/fsl_edma.c **** void DMA0_37_DriverIRQHandler(void)
 965:../drivers/fsl_edma.c **** {
 966:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 3U) & kEDMA_InterruptFlag) != 0U)
 967:../drivers/fsl_edma.c ****     {
 968:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[3]);
 969:../drivers/fsl_edma.c ****     }
 970:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 7U) & kEDMA_InterruptFlag) != 0U)
 971:../drivers/fsl_edma.c ****     {
 972:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[7]);
 973:../drivers/fsl_edma.c ****     }
 974:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
 975:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
 976:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
 977:../drivers/fsl_edma.c ****     __DSB();
 978:../drivers/fsl_edma.c **** #endif
 979:../drivers/fsl_edma.c **** }
 980:../drivers/fsl_edma.c **** #endif
 981:../drivers/fsl_edma.c **** 
 982:../drivers/fsl_edma.c **** #if defined(DMA1)
 983:../drivers/fsl_edma.c **** 
 984:../drivers/fsl_edma.c **** #if defined(DMA0)
 985:../drivers/fsl_edma.c **** void DMA1_04_DriverIRQHandler(void)
 986:../drivers/fsl_edma.c **** {
 987:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 0U) & kEDMA_InterruptFlag) != 0U)
 988:../drivers/fsl_edma.c ****     {
 989:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[8]);
 990:../drivers/fsl_edma.c ****     }
 991:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 4U) & kEDMA_InterruptFlag) != 0U)
 992:../drivers/fsl_edma.c ****     {
 993:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[12]);
 994:../drivers/fsl_edma.c ****     }
 995:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
 996:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
 997:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
 998:../drivers/fsl_edma.c ****     __DSB();
 999:../drivers/fsl_edma.c **** #endif
1000:../drivers/fsl_edma.c **** }
1001:../drivers/fsl_edma.c **** 
1002:../drivers/fsl_edma.c **** void DMA1_15_DriverIRQHandler(void)
1003:../drivers/fsl_edma.c **** {
1004:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 1U) & kEDMA_InterruptFlag) != 0U)
1005:../drivers/fsl_edma.c ****     {
1006:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[9]);
1007:../drivers/fsl_edma.c ****     }
1008:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 5U) & kEDMA_InterruptFlag) != 0U)
1009:../drivers/fsl_edma.c ****     {
1010:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[13]);
1011:../drivers/fsl_edma.c ****     }
1012:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1013:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1014:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1015:../drivers/fsl_edma.c ****     __DSB();
1016:../drivers/fsl_edma.c **** #endif
1017:../drivers/fsl_edma.c **** }
1018:../drivers/fsl_edma.c **** 
1019:../drivers/fsl_edma.c **** void DMA1_26_DriverIRQHandler(void)
1020:../drivers/fsl_edma.c **** {
1021:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 2U) & kEDMA_InterruptFlag) != 0U)
1022:../drivers/fsl_edma.c ****     {
1023:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[10]);
1024:../drivers/fsl_edma.c ****     }
1025:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 6U) & kEDMA_InterruptFlag) != 0U)
1026:../drivers/fsl_edma.c ****     {
1027:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[14]);
1028:../drivers/fsl_edma.c ****     }
1029:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1030:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1031:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1032:../drivers/fsl_edma.c ****     __DSB();
1033:../drivers/fsl_edma.c **** #endif
1034:../drivers/fsl_edma.c **** }
1035:../drivers/fsl_edma.c **** 
1036:../drivers/fsl_edma.c **** void DMA1_37_DriverIRQHandler(void)
1037:../drivers/fsl_edma.c **** {
1038:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 3U) & kEDMA_InterruptFlag) != 0U)
1039:../drivers/fsl_edma.c ****     {
1040:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[11]);
1041:../drivers/fsl_edma.c ****     }
1042:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 7U) & kEDMA_InterruptFlag) != 0U)
1043:../drivers/fsl_edma.c ****     {
1044:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[15]);
1045:../drivers/fsl_edma.c ****     }
1046:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1047:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1048:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1049:../drivers/fsl_edma.c ****     __DSB();
1050:../drivers/fsl_edma.c **** #endif
1051:../drivers/fsl_edma.c **** }
1052:../drivers/fsl_edma.c **** 
1053:../drivers/fsl_edma.c **** #else
1054:../drivers/fsl_edma.c **** void DMA1_04_DriverIRQHandler(void)
1055:../drivers/fsl_edma.c **** {
1056:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 0U) & kEDMA_InterruptFlag) != 0U)
1057:../drivers/fsl_edma.c ****     {
1058:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[0]);
1059:../drivers/fsl_edma.c ****     }
1060:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 4U) & kEDMA_InterruptFlag) != 0U)
1061:../drivers/fsl_edma.c ****     {
1062:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[4]);
1063:../drivers/fsl_edma.c ****     }
1064:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1065:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1066:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1067:../drivers/fsl_edma.c ****     __DSB();
1068:../drivers/fsl_edma.c **** #endif
1069:../drivers/fsl_edma.c **** }
1070:../drivers/fsl_edma.c **** 
1071:../drivers/fsl_edma.c **** void DMA1_15_DriverIRQHandler(void)
1072:../drivers/fsl_edma.c **** {
1073:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 1U) & kEDMA_InterruptFlag) != 0U)
1074:../drivers/fsl_edma.c ****     {
1075:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[1]);
1076:../drivers/fsl_edma.c ****     }
1077:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 5U) & kEDMA_InterruptFlag) != 0U)
1078:../drivers/fsl_edma.c ****     {
1079:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[5]);
1080:../drivers/fsl_edma.c ****     }
1081:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1082:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1083:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1084:../drivers/fsl_edma.c ****     __DSB();
1085:../drivers/fsl_edma.c **** #endif
1086:../drivers/fsl_edma.c **** }
1087:../drivers/fsl_edma.c **** 
1088:../drivers/fsl_edma.c **** void DMA1_26_DriverIRQHandler(void)
1089:../drivers/fsl_edma.c **** {
1090:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 2U) & kEDMA_InterruptFlag) != 0U)
1091:../drivers/fsl_edma.c ****     {
1092:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[2]);
1093:../drivers/fsl_edma.c ****     }
1094:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 6U) & kEDMA_InterruptFlag) != 0U)
1095:../drivers/fsl_edma.c ****     {
1096:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[6]);
1097:../drivers/fsl_edma.c ****     }
1098:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1099:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1100:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1101:../drivers/fsl_edma.c ****     __DSB();
1102:../drivers/fsl_edma.c **** #endif
1103:../drivers/fsl_edma.c **** }
1104:../drivers/fsl_edma.c **** 
1105:../drivers/fsl_edma.c **** void DMA1_37_DriverIRQHandler(void)
1106:../drivers/fsl_edma.c **** {
1107:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 3U) & kEDMA_InterruptFlag) != 0U)
1108:../drivers/fsl_edma.c ****     {
1109:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[3]);
1110:../drivers/fsl_edma.c ****     }
1111:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 7U) & kEDMA_InterruptFlag) != 0U)
1112:../drivers/fsl_edma.c ****     {
1113:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[7]);
1114:../drivers/fsl_edma.c ****     }
1115:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1116:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1117:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1118:../drivers/fsl_edma.c ****     __DSB();
1119:../drivers/fsl_edma.c **** #endif
1120:../drivers/fsl_edma.c **** }
1121:../drivers/fsl_edma.c **** #endif
1122:../drivers/fsl_edma.c **** #endif
1123:../drivers/fsl_edma.c **** #endif /* 8 channels (Shared) */
1124:../drivers/fsl_edma.c **** 
1125:../drivers/fsl_edma.c **** /* 16 channels (Shared): K32H844P */
1126:../drivers/fsl_edma.c **** #if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL == 16U
1127:../drivers/fsl_edma.c **** 
1128:../drivers/fsl_edma.c **** void DMA0_08_DriverIRQHandler(void)
1129:../drivers/fsl_edma.c **** {
 2108              		.loc 1 1129 0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 0
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
 2112 0000 08B5     		push	{r3, lr}
 2113              		.cfi_def_cfa_offset 8
 2114              		.cfi_offset 3, -8
 2115              		.cfi_offset 14, -4
1130:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 0U) & kEDMA_InterruptFlag) != 0U)
 2116              		.loc 1 1130 0
 2117 0002 0021     		movs	r1, #0
 2118 0004 0A48     		ldr	r0, .L184
 2119 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2120              	.LVL166:
 2121 000a 4207     		lsls	r2, r0, #29
 2122 000c 03D5     		bpl	.L176
1131:../drivers/fsl_edma.c ****     {
1132:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[0]);
 2123              		.loc 1 1132 0
 2124 000e 094B     		ldr	r3, .L184+4
 2125 0010 1868     		ldr	r0, [r3]
 2126 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2127              	.LVL167:
 2128              	.L176:
1133:../drivers/fsl_edma.c ****     }
1134:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 8U) & kEDMA_InterruptFlag) != 0U)
 2129              		.loc 1 1134 0
 2130 0016 0821     		movs	r1, #8
 2131 0018 0548     		ldr	r0, .L184
 2132 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2133              	.LVL168:
 2134 001e 4307     		lsls	r3, r0, #29
 2135 0020 03D5     		bpl	.L177
1135:../drivers/fsl_edma.c ****     {
1136:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[8]);
 2136              		.loc 1 1136 0
 2137 0022 044B     		ldr	r3, .L184+4
 2138 0024 186A     		ldr	r0, [r3, #32]
 2139 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2140              	.LVL169:
 2141              	.L177:
 2142              	.LBB152:
 2143              	.LBB153:
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2144              		.loc 4 833 0
 2145              		.syntax unified
 2146              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2147 002a BFF34F8F 		dsb 0xF
 2148              	@ 0 "" 2
 2149              		.thumb
 2150              		.syntax unified
 2151 002e 08BD     		pop	{r3, pc}
 2152              	.L185:
 2153              		.align	2
 2154              	.L184:
 2155 0030 00800040 		.word	1073774592
 2156 0034 00000000 		.word	.LANCHOR0
 2157              	.LBE153:
 2158              	.LBE152:
 2159              		.cfi_endproc
 2160              	.LFE190:
 2162              		.section	.text.DMA0_19_DriverIRQHandler,"ax",%progbits
 2163              		.align	1
 2164              		.global	DMA0_19_DriverIRQHandler
 2165              		.syntax unified
 2166              		.thumb
 2167              		.thumb_func
 2168              		.fpu fpv4-sp-d16
 2170              	DMA0_19_DriverIRQHandler:
 2171              	.LFB191:
1137:../drivers/fsl_edma.c ****     }
1138:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1139:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1140:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1141:../drivers/fsl_edma.c ****     __DSB();
1142:../drivers/fsl_edma.c **** #endif
1143:../drivers/fsl_edma.c **** }
1144:../drivers/fsl_edma.c **** 
1145:../drivers/fsl_edma.c **** void DMA0_19_DriverIRQHandler(void)
1146:../drivers/fsl_edma.c **** {
 2172              		.loc 1 1146 0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
 2176 0000 08B5     		push	{r3, lr}
 2177              		.cfi_def_cfa_offset 8
 2178              		.cfi_offset 3, -8
 2179              		.cfi_offset 14, -4
1147:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 1U) & kEDMA_InterruptFlag) != 0U)
 2180              		.loc 1 1147 0
 2181 0002 0121     		movs	r1, #1
 2182 0004 0A48     		ldr	r0, .L195
 2183 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2184              	.LVL170:
 2185 000a 4207     		lsls	r2, r0, #29
 2186 000c 03D5     		bpl	.L187
1148:../drivers/fsl_edma.c ****     {
1149:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[1]);
 2187              		.loc 1 1149 0
 2188 000e 094B     		ldr	r3, .L195+4
 2189 0010 5868     		ldr	r0, [r3, #4]
 2190 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2191              	.LVL171:
 2192              	.L187:
1150:../drivers/fsl_edma.c ****     }
1151:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 9U) & kEDMA_InterruptFlag) != 0U)
 2193              		.loc 1 1151 0
 2194 0016 0921     		movs	r1, #9
 2195 0018 0548     		ldr	r0, .L195
 2196 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2197              	.LVL172:
 2198 001e 4307     		lsls	r3, r0, #29
 2199 0020 03D5     		bpl	.L188
1152:../drivers/fsl_edma.c ****     {
1153:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[9]);
 2200              		.loc 1 1153 0
 2201 0022 044B     		ldr	r3, .L195+4
 2202 0024 586A     		ldr	r0, [r3, #36]
 2203 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2204              	.LVL173:
 2205              	.L188:
 2206              	.LBB154:
 2207              	.LBB155:
 2208              		.loc 4 833 0
 2209              		.syntax unified
 2210              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2211 002a BFF34F8F 		dsb 0xF
 2212              	@ 0 "" 2
 2213              		.thumb
 2214              		.syntax unified
 2215 002e 08BD     		pop	{r3, pc}
 2216              	.L196:
 2217              		.align	2
 2218              	.L195:
 2219 0030 00800040 		.word	1073774592
 2220 0034 00000000 		.word	.LANCHOR0
 2221              	.LBE155:
 2222              	.LBE154:
 2223              		.cfi_endproc
 2224              	.LFE191:
 2226              		.section	.text.DMA0_210_DriverIRQHandler,"ax",%progbits
 2227              		.align	1
 2228              		.global	DMA0_210_DriverIRQHandler
 2229              		.syntax unified
 2230              		.thumb
 2231              		.thumb_func
 2232              		.fpu fpv4-sp-d16
 2234              	DMA0_210_DriverIRQHandler:
 2235              	.LFB192:
1154:../drivers/fsl_edma.c ****     }
1155:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1156:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1157:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1158:../drivers/fsl_edma.c ****     __DSB();
1159:../drivers/fsl_edma.c **** #endif
1160:../drivers/fsl_edma.c **** }
1161:../drivers/fsl_edma.c **** 
1162:../drivers/fsl_edma.c **** void DMA0_210_DriverIRQHandler(void)
1163:../drivers/fsl_edma.c **** {
 2236              		.loc 1 1163 0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 0
 2239              		@ frame_needed = 0, uses_anonymous_args = 0
 2240 0000 08B5     		push	{r3, lr}
 2241              		.cfi_def_cfa_offset 8
 2242              		.cfi_offset 3, -8
 2243              		.cfi_offset 14, -4
1164:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 2U) & kEDMA_InterruptFlag) != 0U)
 2244              		.loc 1 1164 0
 2245 0002 0221     		movs	r1, #2
 2246 0004 0A48     		ldr	r0, .L206
 2247 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2248              	.LVL174:
 2249 000a 4207     		lsls	r2, r0, #29
 2250 000c 03D5     		bpl	.L198
1165:../drivers/fsl_edma.c ****     {
1166:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[2]);
 2251              		.loc 1 1166 0
 2252 000e 094B     		ldr	r3, .L206+4
 2253 0010 9868     		ldr	r0, [r3, #8]
 2254 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2255              	.LVL175:
 2256              	.L198:
1167:../drivers/fsl_edma.c ****     }
1168:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 10U) & kEDMA_InterruptFlag) != 0U)
 2257              		.loc 1 1168 0
 2258 0016 0A21     		movs	r1, #10
 2259 0018 0548     		ldr	r0, .L206
 2260 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2261              	.LVL176:
 2262 001e 4307     		lsls	r3, r0, #29
 2263 0020 03D5     		bpl	.L199
1169:../drivers/fsl_edma.c ****     {
1170:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[10]);
 2264              		.loc 1 1170 0
 2265 0022 044B     		ldr	r3, .L206+4
 2266 0024 986A     		ldr	r0, [r3, #40]
 2267 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2268              	.LVL177:
 2269              	.L199:
 2270              	.LBB156:
 2271              	.LBB157:
 2272              		.loc 4 833 0
 2273              		.syntax unified
 2274              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2275 002a BFF34F8F 		dsb 0xF
 2276              	@ 0 "" 2
 2277              		.thumb
 2278              		.syntax unified
 2279 002e 08BD     		pop	{r3, pc}
 2280              	.L207:
 2281              		.align	2
 2282              	.L206:
 2283 0030 00800040 		.word	1073774592
 2284 0034 00000000 		.word	.LANCHOR0
 2285              	.LBE157:
 2286              	.LBE156:
 2287              		.cfi_endproc
 2288              	.LFE192:
 2290              		.section	.text.DMA0_311_DriverIRQHandler,"ax",%progbits
 2291              		.align	1
 2292              		.global	DMA0_311_DriverIRQHandler
 2293              		.syntax unified
 2294              		.thumb
 2295              		.thumb_func
 2296              		.fpu fpv4-sp-d16
 2298              	DMA0_311_DriverIRQHandler:
 2299              	.LFB193:
1171:../drivers/fsl_edma.c ****     }
1172:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1173:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1174:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1175:../drivers/fsl_edma.c ****     __DSB();
1176:../drivers/fsl_edma.c **** #endif
1177:../drivers/fsl_edma.c **** }
1178:../drivers/fsl_edma.c **** 
1179:../drivers/fsl_edma.c **** void DMA0_311_DriverIRQHandler(void)
1180:../drivers/fsl_edma.c **** {
 2300              		.loc 1 1180 0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 0
 2303              		@ frame_needed = 0, uses_anonymous_args = 0
 2304 0000 08B5     		push	{r3, lr}
 2305              		.cfi_def_cfa_offset 8
 2306              		.cfi_offset 3, -8
 2307              		.cfi_offset 14, -4
1181:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 3U) & kEDMA_InterruptFlag) != 0U)
 2308              		.loc 1 1181 0
 2309 0002 0321     		movs	r1, #3
 2310 0004 0A48     		ldr	r0, .L217
 2311 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2312              	.LVL178:
 2313 000a 4207     		lsls	r2, r0, #29
 2314 000c 03D5     		bpl	.L209
1182:../drivers/fsl_edma.c ****     {
1183:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[3]);
 2315              		.loc 1 1183 0
 2316 000e 094B     		ldr	r3, .L217+4
 2317 0010 D868     		ldr	r0, [r3, #12]
 2318 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2319              	.LVL179:
 2320              	.L209:
1184:../drivers/fsl_edma.c ****     }
1185:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 11U) & kEDMA_InterruptFlag) != 0U)
 2321              		.loc 1 1185 0
 2322 0016 0B21     		movs	r1, #11
 2323 0018 0548     		ldr	r0, .L217
 2324 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2325              	.LVL180:
 2326 001e 4307     		lsls	r3, r0, #29
 2327 0020 03D5     		bpl	.L210
1186:../drivers/fsl_edma.c ****     {
1187:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[11]);
 2328              		.loc 1 1187 0
 2329 0022 044B     		ldr	r3, .L217+4
 2330 0024 D86A     		ldr	r0, [r3, #44]
 2331 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2332              	.LVL181:
 2333              	.L210:
 2334              	.LBB158:
 2335              	.LBB159:
 2336              		.loc 4 833 0
 2337              		.syntax unified
 2338              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2339 002a BFF34F8F 		dsb 0xF
 2340              	@ 0 "" 2
 2341              		.thumb
 2342              		.syntax unified
 2343 002e 08BD     		pop	{r3, pc}
 2344              	.L218:
 2345              		.align	2
 2346              	.L217:
 2347 0030 00800040 		.word	1073774592
 2348 0034 00000000 		.word	.LANCHOR0
 2349              	.LBE159:
 2350              	.LBE158:
 2351              		.cfi_endproc
 2352              	.LFE193:
 2354              		.section	.text.DMA0_412_DriverIRQHandler,"ax",%progbits
 2355              		.align	1
 2356              		.global	DMA0_412_DriverIRQHandler
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2360              		.fpu fpv4-sp-d16
 2362              	DMA0_412_DriverIRQHandler:
 2363              	.LFB194:
1188:../drivers/fsl_edma.c ****     }
1189:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1190:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1191:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1192:../drivers/fsl_edma.c ****     __DSB();
1193:../drivers/fsl_edma.c **** #endif
1194:../drivers/fsl_edma.c **** }
1195:../drivers/fsl_edma.c **** 
1196:../drivers/fsl_edma.c **** void DMA0_412_DriverIRQHandler(void)
1197:../drivers/fsl_edma.c **** {
 2364              		.loc 1 1197 0
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 0
 2367              		@ frame_needed = 0, uses_anonymous_args = 0
 2368 0000 08B5     		push	{r3, lr}
 2369              		.cfi_def_cfa_offset 8
 2370              		.cfi_offset 3, -8
 2371              		.cfi_offset 14, -4
1198:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 4U) & kEDMA_InterruptFlag) != 0U)
 2372              		.loc 1 1198 0
 2373 0002 0421     		movs	r1, #4
 2374 0004 0A48     		ldr	r0, .L228
 2375 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2376              	.LVL182:
 2377 000a 4207     		lsls	r2, r0, #29
 2378 000c 03D5     		bpl	.L220
1199:../drivers/fsl_edma.c ****     {
1200:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[4]);
 2379              		.loc 1 1200 0
 2380 000e 094B     		ldr	r3, .L228+4
 2381 0010 1869     		ldr	r0, [r3, #16]
 2382 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2383              	.LVL183:
 2384              	.L220:
1201:../drivers/fsl_edma.c ****     }
1202:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 12U) & kEDMA_InterruptFlag) != 0U)
 2385              		.loc 1 1202 0
 2386 0016 0C21     		movs	r1, #12
 2387 0018 0548     		ldr	r0, .L228
 2388 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2389              	.LVL184:
 2390 001e 4307     		lsls	r3, r0, #29
 2391 0020 03D5     		bpl	.L221
1203:../drivers/fsl_edma.c ****     {
1204:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[12]);
 2392              		.loc 1 1204 0
 2393 0022 044B     		ldr	r3, .L228+4
 2394 0024 186B     		ldr	r0, [r3, #48]
 2395 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2396              	.LVL185:
 2397              	.L221:
 2398              	.LBB160:
 2399              	.LBB161:
 2400              		.loc 4 833 0
 2401              		.syntax unified
 2402              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2403 002a BFF34F8F 		dsb 0xF
 2404              	@ 0 "" 2
 2405              		.thumb
 2406              		.syntax unified
 2407 002e 08BD     		pop	{r3, pc}
 2408              	.L229:
 2409              		.align	2
 2410              	.L228:
 2411 0030 00800040 		.word	1073774592
 2412 0034 00000000 		.word	.LANCHOR0
 2413              	.LBE161:
 2414              	.LBE160:
 2415              		.cfi_endproc
 2416              	.LFE194:
 2418              		.section	.text.DMA0_513_DriverIRQHandler,"ax",%progbits
 2419              		.align	1
 2420              		.global	DMA0_513_DriverIRQHandler
 2421              		.syntax unified
 2422              		.thumb
 2423              		.thumb_func
 2424              		.fpu fpv4-sp-d16
 2426              	DMA0_513_DriverIRQHandler:
 2427              	.LFB195:
1205:../drivers/fsl_edma.c ****     }
1206:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1207:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1208:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1209:../drivers/fsl_edma.c ****     __DSB();
1210:../drivers/fsl_edma.c **** #endif
1211:../drivers/fsl_edma.c **** }
1212:../drivers/fsl_edma.c **** 
1213:../drivers/fsl_edma.c **** void DMA0_513_DriverIRQHandler(void)
1214:../drivers/fsl_edma.c **** {
 2428              		.loc 1 1214 0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432 0000 08B5     		push	{r3, lr}
 2433              		.cfi_def_cfa_offset 8
 2434              		.cfi_offset 3, -8
 2435              		.cfi_offset 14, -4
1215:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 5U) & kEDMA_InterruptFlag) != 0U)
 2436              		.loc 1 1215 0
 2437 0002 0521     		movs	r1, #5
 2438 0004 0A48     		ldr	r0, .L239
 2439 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2440              	.LVL186:
 2441 000a 4207     		lsls	r2, r0, #29
 2442 000c 03D5     		bpl	.L231
1216:../drivers/fsl_edma.c ****     {
1217:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[5]);
 2443              		.loc 1 1217 0
 2444 000e 094B     		ldr	r3, .L239+4
 2445 0010 5869     		ldr	r0, [r3, #20]
 2446 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2447              	.LVL187:
 2448              	.L231:
1218:../drivers/fsl_edma.c ****     }
1219:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 13U) & kEDMA_InterruptFlag) != 0U)
 2449              		.loc 1 1219 0
 2450 0016 0D21     		movs	r1, #13
 2451 0018 0548     		ldr	r0, .L239
 2452 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2453              	.LVL188:
 2454 001e 4307     		lsls	r3, r0, #29
 2455 0020 03D5     		bpl	.L232
1220:../drivers/fsl_edma.c ****     {
1221:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[13]);
 2456              		.loc 1 1221 0
 2457 0022 044B     		ldr	r3, .L239+4
 2458 0024 586B     		ldr	r0, [r3, #52]
 2459 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2460              	.LVL189:
 2461              	.L232:
 2462              	.LBB162:
 2463              	.LBB163:
 2464              		.loc 4 833 0
 2465              		.syntax unified
 2466              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2467 002a BFF34F8F 		dsb 0xF
 2468              	@ 0 "" 2
 2469              		.thumb
 2470              		.syntax unified
 2471 002e 08BD     		pop	{r3, pc}
 2472              	.L240:
 2473              		.align	2
 2474              	.L239:
 2475 0030 00800040 		.word	1073774592
 2476 0034 00000000 		.word	.LANCHOR0
 2477              	.LBE163:
 2478              	.LBE162:
 2479              		.cfi_endproc
 2480              	.LFE195:
 2482              		.section	.text.DMA0_614_DriverIRQHandler,"ax",%progbits
 2483              		.align	1
 2484              		.global	DMA0_614_DriverIRQHandler
 2485              		.syntax unified
 2486              		.thumb
 2487              		.thumb_func
 2488              		.fpu fpv4-sp-d16
 2490              	DMA0_614_DriverIRQHandler:
 2491              	.LFB196:
1222:../drivers/fsl_edma.c ****     }
1223:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1224:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1225:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1226:../drivers/fsl_edma.c ****     __DSB();
1227:../drivers/fsl_edma.c **** #endif
1228:../drivers/fsl_edma.c **** }
1229:../drivers/fsl_edma.c **** 
1230:../drivers/fsl_edma.c **** void DMA0_614_DriverIRQHandler(void)
1231:../drivers/fsl_edma.c **** {
 2492              		.loc 1 1231 0
 2493              		.cfi_startproc
 2494              		@ args = 0, pretend = 0, frame = 0
 2495              		@ frame_needed = 0, uses_anonymous_args = 0
 2496 0000 08B5     		push	{r3, lr}
 2497              		.cfi_def_cfa_offset 8
 2498              		.cfi_offset 3, -8
 2499              		.cfi_offset 14, -4
1232:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 6U) & kEDMA_InterruptFlag) != 0U)
 2500              		.loc 1 1232 0
 2501 0002 0621     		movs	r1, #6
 2502 0004 0A48     		ldr	r0, .L250
 2503 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2504              	.LVL190:
 2505 000a 4207     		lsls	r2, r0, #29
 2506 000c 03D5     		bpl	.L242
1233:../drivers/fsl_edma.c ****     {
1234:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[6]);
 2507              		.loc 1 1234 0
 2508 000e 094B     		ldr	r3, .L250+4
 2509 0010 9869     		ldr	r0, [r3, #24]
 2510 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2511              	.LVL191:
 2512              	.L242:
1235:../drivers/fsl_edma.c ****     }
1236:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 14U) & kEDMA_InterruptFlag) != 0U)
 2513              		.loc 1 1236 0
 2514 0016 0E21     		movs	r1, #14
 2515 0018 0548     		ldr	r0, .L250
 2516 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2517              	.LVL192:
 2518 001e 4307     		lsls	r3, r0, #29
 2519 0020 03D5     		bpl	.L243
1237:../drivers/fsl_edma.c ****     {
1238:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[14]);
 2520              		.loc 1 1238 0
 2521 0022 044B     		ldr	r3, .L250+4
 2522 0024 986B     		ldr	r0, [r3, #56]
 2523 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2524              	.LVL193:
 2525              	.L243:
 2526              	.LBB164:
 2527              	.LBB165:
 2528              		.loc 4 833 0
 2529              		.syntax unified
 2530              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2531 002a BFF34F8F 		dsb 0xF
 2532              	@ 0 "" 2
 2533              		.thumb
 2534              		.syntax unified
 2535 002e 08BD     		pop	{r3, pc}
 2536              	.L251:
 2537              		.align	2
 2538              	.L250:
 2539 0030 00800040 		.word	1073774592
 2540 0034 00000000 		.word	.LANCHOR0
 2541              	.LBE165:
 2542              	.LBE164:
 2543              		.cfi_endproc
 2544              	.LFE196:
 2546              		.section	.text.DMA0_715_DriverIRQHandler,"ax",%progbits
 2547              		.align	1
 2548              		.global	DMA0_715_DriverIRQHandler
 2549              		.syntax unified
 2550              		.thumb
 2551              		.thumb_func
 2552              		.fpu fpv4-sp-d16
 2554              	DMA0_715_DriverIRQHandler:
 2555              	.LFB197:
1239:../drivers/fsl_edma.c ****     }
1240:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1241:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1242:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1243:../drivers/fsl_edma.c ****     __DSB();
1244:../drivers/fsl_edma.c **** #endif
1245:../drivers/fsl_edma.c **** }
1246:../drivers/fsl_edma.c **** 
1247:../drivers/fsl_edma.c **** void DMA0_715_DriverIRQHandler(void)
1248:../drivers/fsl_edma.c **** {
 2556              		.loc 1 1248 0
 2557              		.cfi_startproc
 2558              		@ args = 0, pretend = 0, frame = 0
 2559              		@ frame_needed = 0, uses_anonymous_args = 0
 2560 0000 08B5     		push	{r3, lr}
 2561              		.cfi_def_cfa_offset 8
 2562              		.cfi_offset 3, -8
 2563              		.cfi_offset 14, -4
1249:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 7U) & kEDMA_InterruptFlag) != 0U)
 2564              		.loc 1 1249 0
 2565 0002 0721     		movs	r1, #7
 2566 0004 0A48     		ldr	r0, .L261
 2567 0006 FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2568              	.LVL194:
 2569 000a 4207     		lsls	r2, r0, #29
 2570 000c 03D5     		bpl	.L253
1250:../drivers/fsl_edma.c ****     {
1251:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[7]);
 2571              		.loc 1 1251 0
 2572 000e 094B     		ldr	r3, .L261+4
 2573 0010 D869     		ldr	r0, [r3, #28]
 2574 0012 FFF7FEFF 		bl	EDMA_HandleIRQ
 2575              	.LVL195:
 2576              	.L253:
1252:../drivers/fsl_edma.c ****     }
1253:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 15U) & kEDMA_InterruptFlag) != 0U)
 2577              		.loc 1 1253 0
 2578 0016 0F21     		movs	r1, #15
 2579 0018 0548     		ldr	r0, .L261
 2580 001a FFF7FEFF 		bl	EDMA_GetChannelStatusFlags
 2581              	.LVL196:
 2582 001e 4307     		lsls	r3, r0, #29
 2583 0020 03D5     		bpl	.L254
1254:../drivers/fsl_edma.c ****     {
1255:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[15]);
 2584              		.loc 1 1255 0
 2585 0022 044B     		ldr	r3, .L261+4
 2586 0024 D86B     		ldr	r0, [r3, #60]
 2587 0026 FFF7FEFF 		bl	EDMA_HandleIRQ
 2588              	.LVL197:
 2589              	.L254:
 2590              	.LBB166:
 2591              	.LBB167:
 2592              		.loc 4 833 0
 2593              		.syntax unified
 2594              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2595 002a BFF34F8F 		dsb 0xF
 2596              	@ 0 "" 2
 2597              		.thumb
 2598              		.syntax unified
 2599 002e 08BD     		pop	{r3, pc}
 2600              	.L262:
 2601              		.align	2
 2602              	.L261:
 2603 0030 00800040 		.word	1073774592
 2604 0034 00000000 		.word	.LANCHOR0
 2605              	.LBE167:
 2606              	.LBE166:
 2607              		.cfi_endproc
 2608              	.LFE197:
 2610              		.section	.text.DMA0_DriverIRQHandler,"ax",%progbits
 2611              		.align	1
 2612              		.global	DMA0_DriverIRQHandler
 2613              		.syntax unified
 2614              		.thumb
 2615              		.thumb_func
 2616              		.fpu fpv4-sp-d16
 2618              	DMA0_DriverIRQHandler:
 2619              	.LFB198:
1256:../drivers/fsl_edma.c ****     }
1257:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1258:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1259:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1260:../drivers/fsl_edma.c ****     __DSB();
1261:../drivers/fsl_edma.c **** #endif
1262:../drivers/fsl_edma.c **** }
1263:../drivers/fsl_edma.c **** 
1264:../drivers/fsl_edma.c **** #if defined(DMA1)
1265:../drivers/fsl_edma.c **** void DMA1_08_DriverIRQHandler(void)
1266:../drivers/fsl_edma.c **** {
1267:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 0U) & kEDMA_InterruptFlag) != 0U)
1268:../drivers/fsl_edma.c ****     {
1269:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[16]);
1270:../drivers/fsl_edma.c ****     }
1271:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 8U) & kEDMA_InterruptFlag) != 0U)
1272:../drivers/fsl_edma.c ****     {
1273:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[24]);
1274:../drivers/fsl_edma.c ****     }
1275:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1276:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1277:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1278:../drivers/fsl_edma.c ****     __DSB();
1279:../drivers/fsl_edma.c **** #endif
1280:../drivers/fsl_edma.c **** }
1281:../drivers/fsl_edma.c **** 
1282:../drivers/fsl_edma.c **** void DMA1_19_DriverIRQHandler(void)
1283:../drivers/fsl_edma.c **** {
1284:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 1U) & kEDMA_InterruptFlag) != 0U)
1285:../drivers/fsl_edma.c ****     {
1286:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[17]);
1287:../drivers/fsl_edma.c ****     }
1288:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 9U) & kEDMA_InterruptFlag) != 0U)
1289:../drivers/fsl_edma.c ****     {
1290:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[25]);
1291:../drivers/fsl_edma.c ****     }
1292:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1293:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1294:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1295:../drivers/fsl_edma.c ****     __DSB();
1296:../drivers/fsl_edma.c **** #endif
1297:../drivers/fsl_edma.c **** }
1298:../drivers/fsl_edma.c **** 
1299:../drivers/fsl_edma.c **** void DMA1_210_DriverIRQHandler(void)
1300:../drivers/fsl_edma.c **** {
1301:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 2U) & kEDMA_InterruptFlag) != 0U)
1302:../drivers/fsl_edma.c ****     {
1303:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[18]);
1304:../drivers/fsl_edma.c ****     }
1305:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 10U) & kEDMA_InterruptFlag) != 0U)
1306:../drivers/fsl_edma.c ****     {
1307:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[26]);
1308:../drivers/fsl_edma.c ****     }
1309:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1310:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1311:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1312:../drivers/fsl_edma.c ****     __DSB();
1313:../drivers/fsl_edma.c **** #endif
1314:../drivers/fsl_edma.c **** }
1315:../drivers/fsl_edma.c **** 
1316:../drivers/fsl_edma.c **** void DMA1_311_DriverIRQHandler(void)
1317:../drivers/fsl_edma.c **** {
1318:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 3U) & kEDMA_InterruptFlag) != 0U)
1319:../drivers/fsl_edma.c ****     {
1320:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[19]);
1321:../drivers/fsl_edma.c ****     }
1322:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 11U) & kEDMA_InterruptFlag) != 0U)
1323:../drivers/fsl_edma.c ****     {
1324:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[27]);
1325:../drivers/fsl_edma.c ****     }
1326:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1327:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1328:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1329:../drivers/fsl_edma.c ****     __DSB();
1330:../drivers/fsl_edma.c **** #endif
1331:../drivers/fsl_edma.c **** }
1332:../drivers/fsl_edma.c **** 
1333:../drivers/fsl_edma.c **** void DMA1_412_DriverIRQHandler(void)
1334:../drivers/fsl_edma.c **** {
1335:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 4U) & kEDMA_InterruptFlag) != 0U)
1336:../drivers/fsl_edma.c ****     {
1337:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[20]);
1338:../drivers/fsl_edma.c ****     }
1339:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 12U) & kEDMA_InterruptFlag) != 0U)
1340:../drivers/fsl_edma.c ****     {
1341:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[28]);
1342:../drivers/fsl_edma.c ****     }
1343:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1344:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1345:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1346:../drivers/fsl_edma.c ****     __DSB();
1347:../drivers/fsl_edma.c **** #endif
1348:../drivers/fsl_edma.c **** }
1349:../drivers/fsl_edma.c **** 
1350:../drivers/fsl_edma.c **** void DMA1_513_DriverIRQHandler(void)
1351:../drivers/fsl_edma.c **** {
1352:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 5U) & kEDMA_InterruptFlag) != 0U)
1353:../drivers/fsl_edma.c ****     {
1354:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[21]);
1355:../drivers/fsl_edma.c ****     }
1356:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 13U) & kEDMA_InterruptFlag) != 0U)
1357:../drivers/fsl_edma.c ****     {
1358:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[29]);
1359:../drivers/fsl_edma.c ****     }
1360:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1361:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1362:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1363:../drivers/fsl_edma.c ****     __DSB();
1364:../drivers/fsl_edma.c **** #endif
1365:../drivers/fsl_edma.c **** }
1366:../drivers/fsl_edma.c **** 
1367:../drivers/fsl_edma.c **** void DMA1_614_DriverIRQHandler(void)
1368:../drivers/fsl_edma.c **** {
1369:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 6U) & kEDMA_InterruptFlag) != 0U)
1370:../drivers/fsl_edma.c ****     {
1371:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[22]);
1372:../drivers/fsl_edma.c ****     }
1373:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 14U) & kEDMA_InterruptFlag) != 0U)
1374:../drivers/fsl_edma.c ****     {
1375:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[30]);
1376:../drivers/fsl_edma.c ****     }
1377:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1378:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1379:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1380:../drivers/fsl_edma.c ****     __DSB();
1381:../drivers/fsl_edma.c **** #endif
1382:../drivers/fsl_edma.c **** }
1383:../drivers/fsl_edma.c **** 
1384:../drivers/fsl_edma.c **** void DMA1_715_DriverIRQHandler(void)
1385:../drivers/fsl_edma.c **** {
1386:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 7U) & kEDMA_InterruptFlag) != 0U)
1387:../drivers/fsl_edma.c ****     {
1388:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[23]);
1389:../drivers/fsl_edma.c ****     }
1390:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA1, 15U) & kEDMA_InterruptFlag) != 0U)
1391:../drivers/fsl_edma.c ****     {
1392:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[31]);
1393:../drivers/fsl_edma.c ****     }
1394:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1395:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1396:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1397:../drivers/fsl_edma.c ****     __DSB();
1398:../drivers/fsl_edma.c **** #endif
1399:../drivers/fsl_edma.c **** }
1400:../drivers/fsl_edma.c **** #endif
1401:../drivers/fsl_edma.c **** #endif /* 16 channels (Shared) */
1402:../drivers/fsl_edma.c **** 
1403:../drivers/fsl_edma.c **** /* 32 channels (Shared): k80 */
1404:../drivers/fsl_edma.c **** #if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL == 32U
1405:../drivers/fsl_edma.c **** 
1406:../drivers/fsl_edma.c **** void DMA0_DMA16_DriverIRQHandler(void)
1407:../drivers/fsl_edma.c **** {
1408:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 0U) & kEDMA_InterruptFlag) != 0U)
1409:../drivers/fsl_edma.c ****     {
1410:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[0]);
1411:../drivers/fsl_edma.c ****     }
1412:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 16U) & kEDMA_InterruptFlag) != 0U)
1413:../drivers/fsl_edma.c ****     {
1414:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[16]);
1415:../drivers/fsl_edma.c ****     }
1416:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1417:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1418:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1419:../drivers/fsl_edma.c ****     __DSB();
1420:../drivers/fsl_edma.c **** #endif
1421:../drivers/fsl_edma.c **** }
1422:../drivers/fsl_edma.c **** 
1423:../drivers/fsl_edma.c **** void DMA1_DMA17_DriverIRQHandler(void)
1424:../drivers/fsl_edma.c **** {
1425:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 1U) & kEDMA_InterruptFlag) != 0U)
1426:../drivers/fsl_edma.c ****     {
1427:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[1]);
1428:../drivers/fsl_edma.c ****     }
1429:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 17U) & kEDMA_InterruptFlag) != 0U)
1430:../drivers/fsl_edma.c ****     {
1431:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[17]);
1432:../drivers/fsl_edma.c ****     }
1433:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1434:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1435:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1436:../drivers/fsl_edma.c ****     __DSB();
1437:../drivers/fsl_edma.c **** #endif
1438:../drivers/fsl_edma.c **** }
1439:../drivers/fsl_edma.c **** 
1440:../drivers/fsl_edma.c **** void DMA2_DMA18_DriverIRQHandler(void)
1441:../drivers/fsl_edma.c **** {
1442:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 2U) & kEDMA_InterruptFlag) != 0U)
1443:../drivers/fsl_edma.c ****     {
1444:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[2]);
1445:../drivers/fsl_edma.c ****     }
1446:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 18U) & kEDMA_InterruptFlag) != 0U)
1447:../drivers/fsl_edma.c ****     {
1448:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[18]);
1449:../drivers/fsl_edma.c ****     }
1450:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1451:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1452:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1453:../drivers/fsl_edma.c ****     __DSB();
1454:../drivers/fsl_edma.c **** #endif
1455:../drivers/fsl_edma.c **** }
1456:../drivers/fsl_edma.c **** 
1457:../drivers/fsl_edma.c **** void DMA3_DMA19_DriverIRQHandler(void)
1458:../drivers/fsl_edma.c **** {
1459:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 3U) & kEDMA_InterruptFlag) != 0U)
1460:../drivers/fsl_edma.c ****     {
1461:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[3]);
1462:../drivers/fsl_edma.c ****     }
1463:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 19U) & kEDMA_InterruptFlag) != 0U)
1464:../drivers/fsl_edma.c ****     {
1465:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[19]);
1466:../drivers/fsl_edma.c ****     }
1467:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1468:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1469:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1470:../drivers/fsl_edma.c ****     __DSB();
1471:../drivers/fsl_edma.c **** #endif
1472:../drivers/fsl_edma.c **** }
1473:../drivers/fsl_edma.c **** 
1474:../drivers/fsl_edma.c **** void DMA4_DMA20_DriverIRQHandler(void)
1475:../drivers/fsl_edma.c **** {
1476:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 4U) & kEDMA_InterruptFlag) != 0U)
1477:../drivers/fsl_edma.c ****     {
1478:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[4]);
1479:../drivers/fsl_edma.c ****     }
1480:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 20U) & kEDMA_InterruptFlag) != 0U)
1481:../drivers/fsl_edma.c ****     {
1482:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[20]);
1483:../drivers/fsl_edma.c ****     }
1484:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1485:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1486:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1487:../drivers/fsl_edma.c ****     __DSB();
1488:../drivers/fsl_edma.c **** #endif
1489:../drivers/fsl_edma.c **** }
1490:../drivers/fsl_edma.c **** 
1491:../drivers/fsl_edma.c **** void DMA5_DMA21_DriverIRQHandler(void)
1492:../drivers/fsl_edma.c **** {
1493:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 5U) & kEDMA_InterruptFlag) != 0U)
1494:../drivers/fsl_edma.c ****     {
1495:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[5]);
1496:../drivers/fsl_edma.c ****     }
1497:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 21U) & kEDMA_InterruptFlag) != 0U)
1498:../drivers/fsl_edma.c ****     {
1499:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[21]);
1500:../drivers/fsl_edma.c ****     }
1501:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1502:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1503:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1504:../drivers/fsl_edma.c ****     __DSB();
1505:../drivers/fsl_edma.c **** #endif
1506:../drivers/fsl_edma.c **** }
1507:../drivers/fsl_edma.c **** 
1508:../drivers/fsl_edma.c **** void DMA6_DMA22_DriverIRQHandler(void)
1509:../drivers/fsl_edma.c **** {
1510:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 6U) & kEDMA_InterruptFlag) != 0U)
1511:../drivers/fsl_edma.c ****     {
1512:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[6]);
1513:../drivers/fsl_edma.c ****     }
1514:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 22U) & kEDMA_InterruptFlag) != 0U)
1515:../drivers/fsl_edma.c ****     {
1516:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[22]);
1517:../drivers/fsl_edma.c ****     }
1518:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1519:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1520:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1521:../drivers/fsl_edma.c ****     __DSB();
1522:../drivers/fsl_edma.c **** #endif
1523:../drivers/fsl_edma.c **** }
1524:../drivers/fsl_edma.c **** 
1525:../drivers/fsl_edma.c **** void DMA7_DMA23_DriverIRQHandler(void)
1526:../drivers/fsl_edma.c **** {
1527:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 7U) & kEDMA_InterruptFlag) != 0U)
1528:../drivers/fsl_edma.c ****     {
1529:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[7]);
1530:../drivers/fsl_edma.c ****     }
1531:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 23U) & kEDMA_InterruptFlag) != 0U)
1532:../drivers/fsl_edma.c ****     {
1533:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[23]);
1534:../drivers/fsl_edma.c ****     }
1535:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1536:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1537:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1538:../drivers/fsl_edma.c ****     __DSB();
1539:../drivers/fsl_edma.c **** #endif
1540:../drivers/fsl_edma.c **** }
1541:../drivers/fsl_edma.c **** 
1542:../drivers/fsl_edma.c **** void DMA8_DMA24_DriverIRQHandler(void)
1543:../drivers/fsl_edma.c **** {
1544:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 8U) & kEDMA_InterruptFlag) != 0U)
1545:../drivers/fsl_edma.c ****     {
1546:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[8]);
1547:../drivers/fsl_edma.c ****     }
1548:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 24U) & kEDMA_InterruptFlag) != 0U)
1549:../drivers/fsl_edma.c ****     {
1550:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[24]);
1551:../drivers/fsl_edma.c ****     }
1552:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1553:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1554:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1555:../drivers/fsl_edma.c ****     __DSB();
1556:../drivers/fsl_edma.c **** #endif
1557:../drivers/fsl_edma.c **** }
1558:../drivers/fsl_edma.c **** 
1559:../drivers/fsl_edma.c **** void DMA9_DMA25_DriverIRQHandler(void)
1560:../drivers/fsl_edma.c **** {
1561:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 9U) & kEDMA_InterruptFlag) != 0U)
1562:../drivers/fsl_edma.c ****     {
1563:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[9]);
1564:../drivers/fsl_edma.c ****     }
1565:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 25U) & kEDMA_InterruptFlag) != 0U)
1566:../drivers/fsl_edma.c ****     {
1567:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[25]);
1568:../drivers/fsl_edma.c ****     }
1569:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1570:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1571:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1572:../drivers/fsl_edma.c ****     __DSB();
1573:../drivers/fsl_edma.c **** #endif
1574:../drivers/fsl_edma.c **** }
1575:../drivers/fsl_edma.c **** 
1576:../drivers/fsl_edma.c **** void DMA10_DMA26_DriverIRQHandler(void)
1577:../drivers/fsl_edma.c **** {
1578:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 10U) & kEDMA_InterruptFlag) != 0U)
1579:../drivers/fsl_edma.c ****     {
1580:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[10]);
1581:../drivers/fsl_edma.c ****     }
1582:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 26U) & kEDMA_InterruptFlag) != 0U)
1583:../drivers/fsl_edma.c ****     {
1584:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[26]);
1585:../drivers/fsl_edma.c ****     }
1586:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1587:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1588:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1589:../drivers/fsl_edma.c ****     __DSB();
1590:../drivers/fsl_edma.c **** #endif
1591:../drivers/fsl_edma.c **** }
1592:../drivers/fsl_edma.c **** 
1593:../drivers/fsl_edma.c **** void DMA11_DMA27_DriverIRQHandler(void)
1594:../drivers/fsl_edma.c **** {
1595:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 11U) & kEDMA_InterruptFlag) != 0U)
1596:../drivers/fsl_edma.c ****     {
1597:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[11]);
1598:../drivers/fsl_edma.c ****     }
1599:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 27U) & kEDMA_InterruptFlag) != 0U)
1600:../drivers/fsl_edma.c ****     {
1601:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[27]);
1602:../drivers/fsl_edma.c ****     }
1603:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1604:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1605:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1606:../drivers/fsl_edma.c ****     __DSB();
1607:../drivers/fsl_edma.c **** #endif
1608:../drivers/fsl_edma.c **** }
1609:../drivers/fsl_edma.c **** 
1610:../drivers/fsl_edma.c **** void DMA12_DMA28_DriverIRQHandler(void)
1611:../drivers/fsl_edma.c **** {
1612:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 12U) & kEDMA_InterruptFlag) != 0U)
1613:../drivers/fsl_edma.c ****     {
1614:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[12]);
1615:../drivers/fsl_edma.c ****     }
1616:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 28U) & kEDMA_InterruptFlag) != 0U)
1617:../drivers/fsl_edma.c ****     {
1618:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[28]);
1619:../drivers/fsl_edma.c ****     }
1620:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1621:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1622:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1623:../drivers/fsl_edma.c ****     __DSB();
1624:../drivers/fsl_edma.c **** #endif
1625:../drivers/fsl_edma.c **** }
1626:../drivers/fsl_edma.c **** 
1627:../drivers/fsl_edma.c **** void DMA13_DMA29_DriverIRQHandler(void)
1628:../drivers/fsl_edma.c **** {
1629:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 13U) & kEDMA_InterruptFlag) != 0U)
1630:../drivers/fsl_edma.c ****     {
1631:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[13]);
1632:../drivers/fsl_edma.c ****     }
1633:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 29U) & kEDMA_InterruptFlag) != 0U)
1634:../drivers/fsl_edma.c ****     {
1635:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[29]);
1636:../drivers/fsl_edma.c ****     }
1637:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1638:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1639:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1640:../drivers/fsl_edma.c ****     __DSB();
1641:../drivers/fsl_edma.c **** #endif
1642:../drivers/fsl_edma.c **** }
1643:../drivers/fsl_edma.c **** 
1644:../drivers/fsl_edma.c **** void DMA14_DMA30_DriverIRQHandler(void)
1645:../drivers/fsl_edma.c **** {
1646:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 14U) & kEDMA_InterruptFlag) != 0U)
1647:../drivers/fsl_edma.c ****     {
1648:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[14]);
1649:../drivers/fsl_edma.c ****     }
1650:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 30U) & kEDMA_InterruptFlag) != 0U)
1651:../drivers/fsl_edma.c ****     {
1652:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[30]);
1653:../drivers/fsl_edma.c ****     }
1654:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1655:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1656:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1657:../drivers/fsl_edma.c ****     __DSB();
1658:../drivers/fsl_edma.c **** #endif
1659:../drivers/fsl_edma.c **** }
1660:../drivers/fsl_edma.c **** 
1661:../drivers/fsl_edma.c **** void DMA15_DMA31_DriverIRQHandler(void)
1662:../drivers/fsl_edma.c **** {
1663:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 15U) & kEDMA_InterruptFlag) != 0U)
1664:../drivers/fsl_edma.c ****     {
1665:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[15]);
1666:../drivers/fsl_edma.c ****     }
1667:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 31U) & kEDMA_InterruptFlag) != 0U)
1668:../drivers/fsl_edma.c ****     {
1669:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[31]);
1670:../drivers/fsl_edma.c ****     }
1671:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1672:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1673:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1674:../drivers/fsl_edma.c ****     __DSB();
1675:../drivers/fsl_edma.c **** #endif
1676:../drivers/fsl_edma.c **** }
1677:../drivers/fsl_edma.c **** #endif /* 32 channels (Shared) */
1678:../drivers/fsl_edma.c **** 
1679:../drivers/fsl_edma.c **** /* 32 channels (Shared): MCIMX7U5_M4 */
1680:../drivers/fsl_edma.c **** #if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL == 32U
1681:../drivers/fsl_edma.c **** 
1682:../drivers/fsl_edma.c **** void DMA0_0_4_DriverIRQHandler(void)
1683:../drivers/fsl_edma.c **** {
1684:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 0U) & kEDMA_InterruptFlag) != 0U)
1685:../drivers/fsl_edma.c ****     {
1686:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[0]);
1687:../drivers/fsl_edma.c ****     }
1688:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 4U) & kEDMA_InterruptFlag) != 0U)
1689:../drivers/fsl_edma.c ****     {
1690:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[4]);
1691:../drivers/fsl_edma.c ****     }
1692:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1693:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1694:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1695:../drivers/fsl_edma.c ****     __DSB();
1696:../drivers/fsl_edma.c **** #endif
1697:../drivers/fsl_edma.c **** }
1698:../drivers/fsl_edma.c **** 
1699:../drivers/fsl_edma.c **** void DMA0_1_5_DriverIRQHandler(void)
1700:../drivers/fsl_edma.c **** {
1701:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 1U) & kEDMA_InterruptFlag) != 0U)
1702:../drivers/fsl_edma.c ****     {
1703:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[1]);
1704:../drivers/fsl_edma.c ****     }
1705:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 5U) & kEDMA_InterruptFlag) != 0U)
1706:../drivers/fsl_edma.c ****     {
1707:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[5]);
1708:../drivers/fsl_edma.c ****     }
1709:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1710:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1711:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1712:../drivers/fsl_edma.c ****     __DSB();
1713:../drivers/fsl_edma.c **** #endif
1714:../drivers/fsl_edma.c **** }
1715:../drivers/fsl_edma.c **** 
1716:../drivers/fsl_edma.c **** void DMA0_2_6_DriverIRQHandler(void)
1717:../drivers/fsl_edma.c **** {
1718:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 2U) & kEDMA_InterruptFlag) != 0U)
1719:../drivers/fsl_edma.c ****     {
1720:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[2]);
1721:../drivers/fsl_edma.c ****     }
1722:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 6U) & kEDMA_InterruptFlag) != 0U)
1723:../drivers/fsl_edma.c ****     {
1724:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[6]);
1725:../drivers/fsl_edma.c ****     }
1726:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1727:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1728:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1729:../drivers/fsl_edma.c ****     __DSB();
1730:../drivers/fsl_edma.c **** #endif
1731:../drivers/fsl_edma.c **** }
1732:../drivers/fsl_edma.c **** 
1733:../drivers/fsl_edma.c **** void DMA0_3_7_DriverIRQHandler(void)
1734:../drivers/fsl_edma.c **** {
1735:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 3U) & kEDMA_InterruptFlag) != 0U)
1736:../drivers/fsl_edma.c ****     {
1737:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[3]);
1738:../drivers/fsl_edma.c ****     }
1739:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 7U) & kEDMA_InterruptFlag) != 0U)
1740:../drivers/fsl_edma.c ****     {
1741:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[7]);
1742:../drivers/fsl_edma.c ****     }
1743:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1744:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1745:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1746:../drivers/fsl_edma.c ****     __DSB();
1747:../drivers/fsl_edma.c **** #endif
1748:../drivers/fsl_edma.c **** }
1749:../drivers/fsl_edma.c **** 
1750:../drivers/fsl_edma.c **** void DMA0_8_12_DriverIRQHandler(void)
1751:../drivers/fsl_edma.c **** {
1752:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 8U) & kEDMA_InterruptFlag) != 0U)
1753:../drivers/fsl_edma.c ****     {
1754:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[8]);
1755:../drivers/fsl_edma.c ****     }
1756:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 12U) & kEDMA_InterruptFlag) != 0U)
1757:../drivers/fsl_edma.c ****     {
1758:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[12]);
1759:../drivers/fsl_edma.c ****     }
1760:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1761:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1762:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1763:../drivers/fsl_edma.c ****     __DSB();
1764:../drivers/fsl_edma.c **** #endif
1765:../drivers/fsl_edma.c **** }
1766:../drivers/fsl_edma.c **** 
1767:../drivers/fsl_edma.c **** void DMA0_9_13_DriverIRQHandler(void)
1768:../drivers/fsl_edma.c **** {
1769:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 9U) & kEDMA_InterruptFlag) != 0U)
1770:../drivers/fsl_edma.c ****     {
1771:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[9]);
1772:../drivers/fsl_edma.c ****     }
1773:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 13U) & kEDMA_InterruptFlag) != 0U)
1774:../drivers/fsl_edma.c ****     {
1775:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[13]);
1776:../drivers/fsl_edma.c ****     }
1777:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1778:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1779:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1780:../drivers/fsl_edma.c ****     __DSB();
1781:../drivers/fsl_edma.c **** #endif
1782:../drivers/fsl_edma.c **** }
1783:../drivers/fsl_edma.c **** 
1784:../drivers/fsl_edma.c **** void DMA0_10_14_DriverIRQHandler(void)
1785:../drivers/fsl_edma.c **** {
1786:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 10U) & kEDMA_InterruptFlag) != 0U)
1787:../drivers/fsl_edma.c ****     {
1788:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[10]);
1789:../drivers/fsl_edma.c ****     }
1790:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 14U) & kEDMA_InterruptFlag) != 0U)
1791:../drivers/fsl_edma.c ****     {
1792:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[14]);
1793:../drivers/fsl_edma.c ****     }
1794:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1795:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1796:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1797:../drivers/fsl_edma.c ****     __DSB();
1798:../drivers/fsl_edma.c **** #endif
1799:../drivers/fsl_edma.c **** }
1800:../drivers/fsl_edma.c **** 
1801:../drivers/fsl_edma.c **** void DMA0_11_15_DriverIRQHandler(void)
1802:../drivers/fsl_edma.c **** {
1803:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 11U) & kEDMA_InterruptFlag) != 0U)
1804:../drivers/fsl_edma.c ****     {
1805:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[11]);
1806:../drivers/fsl_edma.c ****     }
1807:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 15U) & kEDMA_InterruptFlag) != 0U)
1808:../drivers/fsl_edma.c ****     {
1809:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[15]);
1810:../drivers/fsl_edma.c ****     }
1811:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1812:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1813:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1814:../drivers/fsl_edma.c ****     __DSB();
1815:../drivers/fsl_edma.c **** #endif
1816:../drivers/fsl_edma.c **** }
1817:../drivers/fsl_edma.c **** 
1818:../drivers/fsl_edma.c **** void DMA0_16_20_DriverIRQHandler(void)
1819:../drivers/fsl_edma.c **** {
1820:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 16U) & kEDMA_InterruptFlag) != 0U)
1821:../drivers/fsl_edma.c ****     {
1822:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[16]);
1823:../drivers/fsl_edma.c ****     }
1824:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 20U) & kEDMA_InterruptFlag) != 0U)
1825:../drivers/fsl_edma.c ****     {
1826:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[20]);
1827:../drivers/fsl_edma.c ****     }
1828:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1829:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1830:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1831:../drivers/fsl_edma.c ****     __DSB();
1832:../drivers/fsl_edma.c **** #endif
1833:../drivers/fsl_edma.c **** }
1834:../drivers/fsl_edma.c **** 
1835:../drivers/fsl_edma.c **** void DMA0_17_21_DriverIRQHandler(void)
1836:../drivers/fsl_edma.c **** {
1837:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 17U) & kEDMA_InterruptFlag) != 0U)
1838:../drivers/fsl_edma.c ****     {
1839:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[17]);
1840:../drivers/fsl_edma.c ****     }
1841:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 21U) & kEDMA_InterruptFlag) != 0U)
1842:../drivers/fsl_edma.c ****     {
1843:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[21]);
1844:../drivers/fsl_edma.c ****     }
1845:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1846:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1847:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1848:../drivers/fsl_edma.c ****     __DSB();
1849:../drivers/fsl_edma.c **** #endif
1850:../drivers/fsl_edma.c **** }
1851:../drivers/fsl_edma.c **** 
1852:../drivers/fsl_edma.c **** void DMA0_18_22_DriverIRQHandler(void)
1853:../drivers/fsl_edma.c **** {
1854:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 18U) & kEDMA_InterruptFlag) != 0U)
1855:../drivers/fsl_edma.c ****     {
1856:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[18]);
1857:../drivers/fsl_edma.c ****     }
1858:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 22U) & kEDMA_InterruptFlag) != 0U)
1859:../drivers/fsl_edma.c ****     {
1860:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[22]);
1861:../drivers/fsl_edma.c ****     }
1862:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1863:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1864:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1865:../drivers/fsl_edma.c ****     __DSB();
1866:../drivers/fsl_edma.c **** #endif
1867:../drivers/fsl_edma.c **** }
1868:../drivers/fsl_edma.c **** 
1869:../drivers/fsl_edma.c **** void DMA0_19_23_DriverIRQHandler(void)
1870:../drivers/fsl_edma.c **** {
1871:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 19U) & kEDMA_InterruptFlag) != 0U)
1872:../drivers/fsl_edma.c ****     {
1873:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[19]);
1874:../drivers/fsl_edma.c ****     }
1875:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 23U) & kEDMA_InterruptFlag) != 0U)
1876:../drivers/fsl_edma.c ****     {
1877:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[23]);
1878:../drivers/fsl_edma.c ****     }
1879:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1880:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1881:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1882:../drivers/fsl_edma.c ****     __DSB();
1883:../drivers/fsl_edma.c **** #endif
1884:../drivers/fsl_edma.c **** }
1885:../drivers/fsl_edma.c **** 
1886:../drivers/fsl_edma.c **** void DMA0_24_28_DriverIRQHandler(void)
1887:../drivers/fsl_edma.c **** {
1888:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 24U) & kEDMA_InterruptFlag) != 0U)
1889:../drivers/fsl_edma.c ****     {
1890:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[24]);
1891:../drivers/fsl_edma.c ****     }
1892:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 28U) & kEDMA_InterruptFlag) != 0U)
1893:../drivers/fsl_edma.c ****     {
1894:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[28]);
1895:../drivers/fsl_edma.c ****     }
1896:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1897:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1898:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1899:../drivers/fsl_edma.c ****     __DSB();
1900:../drivers/fsl_edma.c **** #endif
1901:../drivers/fsl_edma.c **** }
1902:../drivers/fsl_edma.c **** 
1903:../drivers/fsl_edma.c **** void DMA0_25_29_DriverIRQHandler(void)
1904:../drivers/fsl_edma.c **** {
1905:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 25U) & kEDMA_InterruptFlag) != 0U)
1906:../drivers/fsl_edma.c ****     {
1907:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[25]);
1908:../drivers/fsl_edma.c ****     }
1909:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 29U) & kEDMA_InterruptFlag) != 0U)
1910:../drivers/fsl_edma.c ****     {
1911:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[29]);
1912:../drivers/fsl_edma.c ****     }
1913:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1914:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1915:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1916:../drivers/fsl_edma.c ****     __DSB();
1917:../drivers/fsl_edma.c **** #endif
1918:../drivers/fsl_edma.c **** }
1919:../drivers/fsl_edma.c **** 
1920:../drivers/fsl_edma.c **** void DMA0_26_30_DriverIRQHandler(void)
1921:../drivers/fsl_edma.c **** {
1922:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 26U) & kEDMA_InterruptFlag) != 0U)
1923:../drivers/fsl_edma.c ****     {
1924:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[26]);
1925:../drivers/fsl_edma.c ****     }
1926:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 30U) & kEDMA_InterruptFlag) != 0U)
1927:../drivers/fsl_edma.c ****     {
1928:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[30]);
1929:../drivers/fsl_edma.c ****     }
1930:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1931:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1932:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1933:../drivers/fsl_edma.c ****     __DSB();
1934:../drivers/fsl_edma.c **** #endif
1935:../drivers/fsl_edma.c **** }
1936:../drivers/fsl_edma.c **** 
1937:../drivers/fsl_edma.c **** void DMA0_27_31_DriverIRQHandler(void)
1938:../drivers/fsl_edma.c **** {
1939:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 27U) & kEDMA_InterruptFlag) != 0U)
1940:../drivers/fsl_edma.c ****     {
1941:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[27]);
1942:../drivers/fsl_edma.c ****     }
1943:../drivers/fsl_edma.c ****     if ((EDMA_GetChannelStatusFlags(DMA0, 31U) & kEDMA_InterruptFlag) != 0U)
1944:../drivers/fsl_edma.c ****     {
1945:../drivers/fsl_edma.c ****         EDMA_HandleIRQ(s_EDMAHandle[31]);
1946:../drivers/fsl_edma.c ****     }
1947:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1948:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1949:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1950:../drivers/fsl_edma.c ****     __DSB();
1951:../drivers/fsl_edma.c **** #endif
1952:../drivers/fsl_edma.c **** }
1953:../drivers/fsl_edma.c **** #endif /* 32 channels (Shared): MCIMX7U5 */
1954:../drivers/fsl_edma.c **** 
1955:../drivers/fsl_edma.c **** /* 4 channels (No Shared): kv10  */
1956:../drivers/fsl_edma.c **** #if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL > 0
1957:../drivers/fsl_edma.c **** 
1958:../drivers/fsl_edma.c **** void DMA0_DriverIRQHandler(void)
1959:../drivers/fsl_edma.c **** {
 2620              		.loc 1 1959 0
 2621              		.cfi_startproc
 2622              		@ args = 0, pretend = 0, frame = 0
 2623              		@ frame_needed = 0, uses_anonymous_args = 0
 2624 0000 08B5     		push	{r3, lr}
 2625              		.cfi_def_cfa_offset 8
 2626              		.cfi_offset 3, -8
 2627              		.cfi_offset 14, -4
1960:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[0]);
 2628              		.loc 1 1960 0
 2629 0002 034B     		ldr	r3, .L264
 2630 0004 1868     		ldr	r0, [r3]
 2631 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2632              	.LVL198:
 2633              	.LBB168:
 2634              	.LBB169:
 2635              		.loc 4 833 0
 2636              		.syntax unified
 2637              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2638 000a BFF34F8F 		dsb 0xF
 2639              	@ 0 "" 2
 2640              		.thumb
 2641              		.syntax unified
 2642 000e 08BD     		pop	{r3, pc}
 2643              	.L265:
 2644              		.align	2
 2645              	.L264:
 2646 0010 00000000 		.word	.LANCHOR0
 2647              	.LBE169:
 2648              	.LBE168:
 2649              		.cfi_endproc
 2650              	.LFE198:
 2652              		.section	.text.DMA1_DriverIRQHandler,"ax",%progbits
 2653              		.align	1
 2654              		.global	DMA1_DriverIRQHandler
 2655              		.syntax unified
 2656              		.thumb
 2657              		.thumb_func
 2658              		.fpu fpv4-sp-d16
 2660              	DMA1_DriverIRQHandler:
 2661              	.LFB199:
1961:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1962:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1963:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1964:../drivers/fsl_edma.c ****     __DSB();
1965:../drivers/fsl_edma.c **** #endif
1966:../drivers/fsl_edma.c **** }
1967:../drivers/fsl_edma.c **** 
1968:../drivers/fsl_edma.c **** void DMA1_DriverIRQHandler(void)
1969:../drivers/fsl_edma.c **** {
 2662              		.loc 1 1969 0
 2663              		.cfi_startproc
 2664              		@ args = 0, pretend = 0, frame = 0
 2665              		@ frame_needed = 0, uses_anonymous_args = 0
 2666 0000 08B5     		push	{r3, lr}
 2667              		.cfi_def_cfa_offset 8
 2668              		.cfi_offset 3, -8
 2669              		.cfi_offset 14, -4
1970:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[1]);
 2670              		.loc 1 1970 0
 2671 0002 034B     		ldr	r3, .L267
 2672 0004 5868     		ldr	r0, [r3, #4]
 2673 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2674              	.LVL199:
 2675              	.LBB170:
 2676              	.LBB171:
 2677              		.loc 4 833 0
 2678              		.syntax unified
 2679              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2680 000a BFF34F8F 		dsb 0xF
 2681              	@ 0 "" 2
 2682              		.thumb
 2683              		.syntax unified
 2684 000e 08BD     		pop	{r3, pc}
 2685              	.L268:
 2686              		.align	2
 2687              	.L267:
 2688 0010 00000000 		.word	.LANCHOR0
 2689              	.LBE171:
 2690              	.LBE170:
 2691              		.cfi_endproc
 2692              	.LFE199:
 2694              		.section	.text.DMA2_DriverIRQHandler,"ax",%progbits
 2695              		.align	1
 2696              		.global	DMA2_DriverIRQHandler
 2697              		.syntax unified
 2698              		.thumb
 2699              		.thumb_func
 2700              		.fpu fpv4-sp-d16
 2702              	DMA2_DriverIRQHandler:
 2703              	.LFB200:
1971:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1972:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1973:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1974:../drivers/fsl_edma.c ****     __DSB();
1975:../drivers/fsl_edma.c **** #endif
1976:../drivers/fsl_edma.c **** }
1977:../drivers/fsl_edma.c **** 
1978:../drivers/fsl_edma.c **** void DMA2_DriverIRQHandler(void)
1979:../drivers/fsl_edma.c **** {
 2704              		.loc 1 1979 0
 2705              		.cfi_startproc
 2706              		@ args = 0, pretend = 0, frame = 0
 2707              		@ frame_needed = 0, uses_anonymous_args = 0
 2708 0000 08B5     		push	{r3, lr}
 2709              		.cfi_def_cfa_offset 8
 2710              		.cfi_offset 3, -8
 2711              		.cfi_offset 14, -4
1980:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[2]);
 2712              		.loc 1 1980 0
 2713 0002 034B     		ldr	r3, .L270
 2714 0004 9868     		ldr	r0, [r3, #8]
 2715 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2716              	.LVL200:
 2717              	.LBB172:
 2718              	.LBB173:
 2719              		.loc 4 833 0
 2720              		.syntax unified
 2721              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2722 000a BFF34F8F 		dsb 0xF
 2723              	@ 0 "" 2
 2724              		.thumb
 2725              		.syntax unified
 2726 000e 08BD     		pop	{r3, pc}
 2727              	.L271:
 2728              		.align	2
 2729              	.L270:
 2730 0010 00000000 		.word	.LANCHOR0
 2731              	.LBE173:
 2732              	.LBE172:
 2733              		.cfi_endproc
 2734              	.LFE200:
 2736              		.section	.text.DMA3_DriverIRQHandler,"ax",%progbits
 2737              		.align	1
 2738              		.global	DMA3_DriverIRQHandler
 2739              		.syntax unified
 2740              		.thumb
 2741              		.thumb_func
 2742              		.fpu fpv4-sp-d16
 2744              	DMA3_DriverIRQHandler:
 2745              	.LFB201:
1981:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1982:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1983:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1984:../drivers/fsl_edma.c ****     __DSB();
1985:../drivers/fsl_edma.c **** #endif
1986:../drivers/fsl_edma.c **** }
1987:../drivers/fsl_edma.c **** 
1988:../drivers/fsl_edma.c **** void DMA3_DriverIRQHandler(void)
1989:../drivers/fsl_edma.c **** {
 2746              		.loc 1 1989 0
 2747              		.cfi_startproc
 2748              		@ args = 0, pretend = 0, frame = 0
 2749              		@ frame_needed = 0, uses_anonymous_args = 0
 2750 0000 08B5     		push	{r3, lr}
 2751              		.cfi_def_cfa_offset 8
 2752              		.cfi_offset 3, -8
 2753              		.cfi_offset 14, -4
1990:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[3]);
 2754              		.loc 1 1990 0
 2755 0002 034B     		ldr	r3, .L273
 2756 0004 D868     		ldr	r0, [r3, #12]
 2757 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2758              	.LVL201:
 2759              	.LBB174:
 2760              	.LBB175:
 2761              		.loc 4 833 0
 2762              		.syntax unified
 2763              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2764 000a BFF34F8F 		dsb 0xF
 2765              	@ 0 "" 2
 2766              		.thumb
 2767              		.syntax unified
 2768 000e 08BD     		pop	{r3, pc}
 2769              	.L274:
 2770              		.align	2
 2771              	.L273:
 2772 0010 00000000 		.word	.LANCHOR0
 2773              	.LBE175:
 2774              	.LBE174:
 2775              		.cfi_endproc
 2776              	.LFE201:
 2778              		.section	.text.DMA4_DriverIRQHandler,"ax",%progbits
 2779              		.align	1
 2780              		.global	DMA4_DriverIRQHandler
 2781              		.syntax unified
 2782              		.thumb
 2783              		.thumb_func
 2784              		.fpu fpv4-sp-d16
 2786              	DMA4_DriverIRQHandler:
 2787              	.LFB202:
1991:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1992:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
1993:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1994:../drivers/fsl_edma.c ****     __DSB();
1995:../drivers/fsl_edma.c **** #endif
1996:../drivers/fsl_edma.c **** }
1997:../drivers/fsl_edma.c **** 
1998:../drivers/fsl_edma.c **** /* 8 channels (No Shared) */
1999:../drivers/fsl_edma.c **** #if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL > 4U
2000:../drivers/fsl_edma.c **** 
2001:../drivers/fsl_edma.c **** void DMA4_DriverIRQHandler(void)
2002:../drivers/fsl_edma.c **** {
 2788              		.loc 1 2002 0
 2789              		.cfi_startproc
 2790              		@ args = 0, pretend = 0, frame = 0
 2791              		@ frame_needed = 0, uses_anonymous_args = 0
 2792 0000 08B5     		push	{r3, lr}
 2793              		.cfi_def_cfa_offset 8
 2794              		.cfi_offset 3, -8
 2795              		.cfi_offset 14, -4
2003:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[4]);
 2796              		.loc 1 2003 0
 2797 0002 034B     		ldr	r3, .L276
 2798 0004 1869     		ldr	r0, [r3, #16]
 2799 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2800              	.LVL202:
 2801              	.LBB176:
 2802              	.LBB177:
 2803              		.loc 4 833 0
 2804              		.syntax unified
 2805              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2806 000a BFF34F8F 		dsb 0xF
 2807              	@ 0 "" 2
 2808              		.thumb
 2809              		.syntax unified
 2810 000e 08BD     		pop	{r3, pc}
 2811              	.L277:
 2812              		.align	2
 2813              	.L276:
 2814 0010 00000000 		.word	.LANCHOR0
 2815              	.LBE177:
 2816              	.LBE176:
 2817              		.cfi_endproc
 2818              	.LFE202:
 2820              		.section	.text.DMA5_DriverIRQHandler,"ax",%progbits
 2821              		.align	1
 2822              		.global	DMA5_DriverIRQHandler
 2823              		.syntax unified
 2824              		.thumb
 2825              		.thumb_func
 2826              		.fpu fpv4-sp-d16
 2828              	DMA5_DriverIRQHandler:
 2829              	.LFB203:
2004:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2005:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2006:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2007:../drivers/fsl_edma.c ****     __DSB();
2008:../drivers/fsl_edma.c **** #endif
2009:../drivers/fsl_edma.c **** }
2010:../drivers/fsl_edma.c **** 
2011:../drivers/fsl_edma.c **** void DMA5_DriverIRQHandler(void)
2012:../drivers/fsl_edma.c **** {
 2830              		.loc 1 2012 0
 2831              		.cfi_startproc
 2832              		@ args = 0, pretend = 0, frame = 0
 2833              		@ frame_needed = 0, uses_anonymous_args = 0
 2834 0000 08B5     		push	{r3, lr}
 2835              		.cfi_def_cfa_offset 8
 2836              		.cfi_offset 3, -8
 2837              		.cfi_offset 14, -4
2013:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[5]);
 2838              		.loc 1 2013 0
 2839 0002 034B     		ldr	r3, .L279
 2840 0004 5869     		ldr	r0, [r3, #20]
 2841 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2842              	.LVL203:
 2843              	.LBB178:
 2844              	.LBB179:
 2845              		.loc 4 833 0
 2846              		.syntax unified
 2847              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2848 000a BFF34F8F 		dsb 0xF
 2849              	@ 0 "" 2
 2850              		.thumb
 2851              		.syntax unified
 2852 000e 08BD     		pop	{r3, pc}
 2853              	.L280:
 2854              		.align	2
 2855              	.L279:
 2856 0010 00000000 		.word	.LANCHOR0
 2857              	.LBE179:
 2858              	.LBE178:
 2859              		.cfi_endproc
 2860              	.LFE203:
 2862              		.section	.text.DMA6_DriverIRQHandler,"ax",%progbits
 2863              		.align	1
 2864              		.global	DMA6_DriverIRQHandler
 2865              		.syntax unified
 2866              		.thumb
 2867              		.thumb_func
 2868              		.fpu fpv4-sp-d16
 2870              	DMA6_DriverIRQHandler:
 2871              	.LFB204:
2014:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2015:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2016:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2017:../drivers/fsl_edma.c ****     __DSB();
2018:../drivers/fsl_edma.c **** #endif
2019:../drivers/fsl_edma.c **** }
2020:../drivers/fsl_edma.c **** 
2021:../drivers/fsl_edma.c **** void DMA6_DriverIRQHandler(void)
2022:../drivers/fsl_edma.c **** {
 2872              		.loc 1 2022 0
 2873              		.cfi_startproc
 2874              		@ args = 0, pretend = 0, frame = 0
 2875              		@ frame_needed = 0, uses_anonymous_args = 0
 2876 0000 08B5     		push	{r3, lr}
 2877              		.cfi_def_cfa_offset 8
 2878              		.cfi_offset 3, -8
 2879              		.cfi_offset 14, -4
2023:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[6]);
 2880              		.loc 1 2023 0
 2881 0002 034B     		ldr	r3, .L282
 2882 0004 9869     		ldr	r0, [r3, #24]
 2883 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2884              	.LVL204:
 2885              	.LBB180:
 2886              	.LBB181:
 2887              		.loc 4 833 0
 2888              		.syntax unified
 2889              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2890 000a BFF34F8F 		dsb 0xF
 2891              	@ 0 "" 2
 2892              		.thumb
 2893              		.syntax unified
 2894 000e 08BD     		pop	{r3, pc}
 2895              	.L283:
 2896              		.align	2
 2897              	.L282:
 2898 0010 00000000 		.word	.LANCHOR0
 2899              	.LBE181:
 2900              	.LBE180:
 2901              		.cfi_endproc
 2902              	.LFE204:
 2904              		.section	.text.DMA7_DriverIRQHandler,"ax",%progbits
 2905              		.align	1
 2906              		.global	DMA7_DriverIRQHandler
 2907              		.syntax unified
 2908              		.thumb
 2909              		.thumb_func
 2910              		.fpu fpv4-sp-d16
 2912              	DMA7_DriverIRQHandler:
 2913              	.LFB205:
2024:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2025:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2026:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2027:../drivers/fsl_edma.c ****     __DSB();
2028:../drivers/fsl_edma.c **** #endif
2029:../drivers/fsl_edma.c **** }
2030:../drivers/fsl_edma.c **** 
2031:../drivers/fsl_edma.c **** void DMA7_DriverIRQHandler(void)
2032:../drivers/fsl_edma.c **** {
 2914              		.loc 1 2032 0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 0
 2917              		@ frame_needed = 0, uses_anonymous_args = 0
 2918 0000 08B5     		push	{r3, lr}
 2919              		.cfi_def_cfa_offset 8
 2920              		.cfi_offset 3, -8
 2921              		.cfi_offset 14, -4
2033:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[7]);
 2922              		.loc 1 2033 0
 2923 0002 034B     		ldr	r3, .L285
 2924 0004 D869     		ldr	r0, [r3, #28]
 2925 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2926              	.LVL205:
 2927              	.LBB182:
 2928              	.LBB183:
 2929              		.loc 4 833 0
 2930              		.syntax unified
 2931              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2932 000a BFF34F8F 		dsb 0xF
 2933              	@ 0 "" 2
 2934              		.thumb
 2935              		.syntax unified
 2936 000e 08BD     		pop	{r3, pc}
 2937              	.L286:
 2938              		.align	2
 2939              	.L285:
 2940 0010 00000000 		.word	.LANCHOR0
 2941              	.LBE183:
 2942              	.LBE182:
 2943              		.cfi_endproc
 2944              	.LFE205:
 2946              		.section	.text.DMA8_DriverIRQHandler,"ax",%progbits
 2947              		.align	1
 2948              		.global	DMA8_DriverIRQHandler
 2949              		.syntax unified
 2950              		.thumb
 2951              		.thumb_func
 2952              		.fpu fpv4-sp-d16
 2954              	DMA8_DriverIRQHandler:
 2955              	.LFB206:
2034:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2035:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2036:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2037:../drivers/fsl_edma.c ****     __DSB();
2038:../drivers/fsl_edma.c **** #endif
2039:../drivers/fsl_edma.c **** }
2040:../drivers/fsl_edma.c **** #endif /* FSL_FEATURE_EDMA_MODULE_CHANNEL == 8 */
2041:../drivers/fsl_edma.c **** 
2042:../drivers/fsl_edma.c **** /* 16 channels (No Shared) */
2043:../drivers/fsl_edma.c **** #if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL > 8U
2044:../drivers/fsl_edma.c **** 
2045:../drivers/fsl_edma.c **** void DMA8_DriverIRQHandler(void)
2046:../drivers/fsl_edma.c **** {
 2956              		.loc 1 2046 0
 2957              		.cfi_startproc
 2958              		@ args = 0, pretend = 0, frame = 0
 2959              		@ frame_needed = 0, uses_anonymous_args = 0
 2960 0000 08B5     		push	{r3, lr}
 2961              		.cfi_def_cfa_offset 8
 2962              		.cfi_offset 3, -8
 2963              		.cfi_offset 14, -4
2047:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[8]);
 2964              		.loc 1 2047 0
 2965 0002 034B     		ldr	r3, .L288
 2966 0004 186A     		ldr	r0, [r3, #32]
 2967 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 2968              	.LVL206:
 2969              	.LBB184:
 2970              	.LBB185:
 2971              		.loc 4 833 0
 2972              		.syntax unified
 2973              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2974 000a BFF34F8F 		dsb 0xF
 2975              	@ 0 "" 2
 2976              		.thumb
 2977              		.syntax unified
 2978 000e 08BD     		pop	{r3, pc}
 2979              	.L289:
 2980              		.align	2
 2981              	.L288:
 2982 0010 00000000 		.word	.LANCHOR0
 2983              	.LBE185:
 2984              	.LBE184:
 2985              		.cfi_endproc
 2986              	.LFE206:
 2988              		.section	.text.DMA9_DriverIRQHandler,"ax",%progbits
 2989              		.align	1
 2990              		.global	DMA9_DriverIRQHandler
 2991              		.syntax unified
 2992              		.thumb
 2993              		.thumb_func
 2994              		.fpu fpv4-sp-d16
 2996              	DMA9_DriverIRQHandler:
 2997              	.LFB207:
2048:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2049:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2050:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2051:../drivers/fsl_edma.c ****     __DSB();
2052:../drivers/fsl_edma.c **** #endif
2053:../drivers/fsl_edma.c **** }
2054:../drivers/fsl_edma.c **** 
2055:../drivers/fsl_edma.c **** void DMA9_DriverIRQHandler(void)
2056:../drivers/fsl_edma.c **** {
 2998              		.loc 1 2056 0
 2999              		.cfi_startproc
 3000              		@ args = 0, pretend = 0, frame = 0
 3001              		@ frame_needed = 0, uses_anonymous_args = 0
 3002 0000 08B5     		push	{r3, lr}
 3003              		.cfi_def_cfa_offset 8
 3004              		.cfi_offset 3, -8
 3005              		.cfi_offset 14, -4
2057:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[9]);
 3006              		.loc 1 2057 0
 3007 0002 034B     		ldr	r3, .L291
 3008 0004 586A     		ldr	r0, [r3, #36]
 3009 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 3010              	.LVL207:
 3011              	.LBB186:
 3012              	.LBB187:
 3013              		.loc 4 833 0
 3014              		.syntax unified
 3015              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3016 000a BFF34F8F 		dsb 0xF
 3017              	@ 0 "" 2
 3018              		.thumb
 3019              		.syntax unified
 3020 000e 08BD     		pop	{r3, pc}
 3021              	.L292:
 3022              		.align	2
 3023              	.L291:
 3024 0010 00000000 		.word	.LANCHOR0
 3025              	.LBE187:
 3026              	.LBE186:
 3027              		.cfi_endproc
 3028              	.LFE207:
 3030              		.section	.text.DMA10_DriverIRQHandler,"ax",%progbits
 3031              		.align	1
 3032              		.global	DMA10_DriverIRQHandler
 3033              		.syntax unified
 3034              		.thumb
 3035              		.thumb_func
 3036              		.fpu fpv4-sp-d16
 3038              	DMA10_DriverIRQHandler:
 3039              	.LFB208:
2058:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2059:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2060:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2061:../drivers/fsl_edma.c ****     __DSB();
2062:../drivers/fsl_edma.c **** #endif
2063:../drivers/fsl_edma.c **** }
2064:../drivers/fsl_edma.c **** 
2065:../drivers/fsl_edma.c **** void DMA10_DriverIRQHandler(void)
2066:../drivers/fsl_edma.c **** {
 3040              		.loc 1 2066 0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 0
 3043              		@ frame_needed = 0, uses_anonymous_args = 0
 3044 0000 08B5     		push	{r3, lr}
 3045              		.cfi_def_cfa_offset 8
 3046              		.cfi_offset 3, -8
 3047              		.cfi_offset 14, -4
2067:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[10]);
 3048              		.loc 1 2067 0
 3049 0002 034B     		ldr	r3, .L294
 3050 0004 986A     		ldr	r0, [r3, #40]
 3051 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 3052              	.LVL208:
 3053              	.LBB188:
 3054              	.LBB189:
 3055              		.loc 4 833 0
 3056              		.syntax unified
 3057              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3058 000a BFF34F8F 		dsb 0xF
 3059              	@ 0 "" 2
 3060              		.thumb
 3061              		.syntax unified
 3062 000e 08BD     		pop	{r3, pc}
 3063              	.L295:
 3064              		.align	2
 3065              	.L294:
 3066 0010 00000000 		.word	.LANCHOR0
 3067              	.LBE189:
 3068              	.LBE188:
 3069              		.cfi_endproc
 3070              	.LFE208:
 3072              		.section	.text.DMA11_DriverIRQHandler,"ax",%progbits
 3073              		.align	1
 3074              		.global	DMA11_DriverIRQHandler
 3075              		.syntax unified
 3076              		.thumb
 3077              		.thumb_func
 3078              		.fpu fpv4-sp-d16
 3080              	DMA11_DriverIRQHandler:
 3081              	.LFB209:
2068:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2069:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2070:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2071:../drivers/fsl_edma.c ****     __DSB();
2072:../drivers/fsl_edma.c **** #endif
2073:../drivers/fsl_edma.c **** }
2074:../drivers/fsl_edma.c **** 
2075:../drivers/fsl_edma.c **** void DMA11_DriverIRQHandler(void)
2076:../drivers/fsl_edma.c **** {
 3082              		.loc 1 2076 0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 0, uses_anonymous_args = 0
 3086 0000 08B5     		push	{r3, lr}
 3087              		.cfi_def_cfa_offset 8
 3088              		.cfi_offset 3, -8
 3089              		.cfi_offset 14, -4
2077:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[11]);
 3090              		.loc 1 2077 0
 3091 0002 034B     		ldr	r3, .L297
 3092 0004 D86A     		ldr	r0, [r3, #44]
 3093 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 3094              	.LVL209:
 3095              	.LBB190:
 3096              	.LBB191:
 3097              		.loc 4 833 0
 3098              		.syntax unified
 3099              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3100 000a BFF34F8F 		dsb 0xF
 3101              	@ 0 "" 2
 3102              		.thumb
 3103              		.syntax unified
 3104 000e 08BD     		pop	{r3, pc}
 3105              	.L298:
 3106              		.align	2
 3107              	.L297:
 3108 0010 00000000 		.word	.LANCHOR0
 3109              	.LBE191:
 3110              	.LBE190:
 3111              		.cfi_endproc
 3112              	.LFE209:
 3114              		.section	.text.DMA12_DriverIRQHandler,"ax",%progbits
 3115              		.align	1
 3116              		.global	DMA12_DriverIRQHandler
 3117              		.syntax unified
 3118              		.thumb
 3119              		.thumb_func
 3120              		.fpu fpv4-sp-d16
 3122              	DMA12_DriverIRQHandler:
 3123              	.LFB210:
2078:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2079:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2080:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2081:../drivers/fsl_edma.c ****     __DSB();
2082:../drivers/fsl_edma.c **** #endif
2083:../drivers/fsl_edma.c **** }
2084:../drivers/fsl_edma.c **** 
2085:../drivers/fsl_edma.c **** void DMA12_DriverIRQHandler(void)
2086:../drivers/fsl_edma.c **** {
 3124              		.loc 1 2086 0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 3128 0000 08B5     		push	{r3, lr}
 3129              		.cfi_def_cfa_offset 8
 3130              		.cfi_offset 3, -8
 3131              		.cfi_offset 14, -4
2087:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[12]);
 3132              		.loc 1 2087 0
 3133 0002 034B     		ldr	r3, .L300
 3134 0004 186B     		ldr	r0, [r3, #48]
 3135 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 3136              	.LVL210:
 3137              	.LBB192:
 3138              	.LBB193:
 3139              		.loc 4 833 0
 3140              		.syntax unified
 3141              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3142 000a BFF34F8F 		dsb 0xF
 3143              	@ 0 "" 2
 3144              		.thumb
 3145              		.syntax unified
 3146 000e 08BD     		pop	{r3, pc}
 3147              	.L301:
 3148              		.align	2
 3149              	.L300:
 3150 0010 00000000 		.word	.LANCHOR0
 3151              	.LBE193:
 3152              	.LBE192:
 3153              		.cfi_endproc
 3154              	.LFE210:
 3156              		.section	.text.DMA13_DriverIRQHandler,"ax",%progbits
 3157              		.align	1
 3158              		.global	DMA13_DriverIRQHandler
 3159              		.syntax unified
 3160              		.thumb
 3161              		.thumb_func
 3162              		.fpu fpv4-sp-d16
 3164              	DMA13_DriverIRQHandler:
 3165              	.LFB211:
2088:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2089:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2090:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2091:../drivers/fsl_edma.c ****     __DSB();
2092:../drivers/fsl_edma.c **** #endif
2093:../drivers/fsl_edma.c **** }
2094:../drivers/fsl_edma.c **** 
2095:../drivers/fsl_edma.c **** void DMA13_DriverIRQHandler(void)
2096:../drivers/fsl_edma.c **** {
 3166              		.loc 1 2096 0
 3167              		.cfi_startproc
 3168              		@ args = 0, pretend = 0, frame = 0
 3169              		@ frame_needed = 0, uses_anonymous_args = 0
 3170 0000 08B5     		push	{r3, lr}
 3171              		.cfi_def_cfa_offset 8
 3172              		.cfi_offset 3, -8
 3173              		.cfi_offset 14, -4
2097:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[13]);
 3174              		.loc 1 2097 0
 3175 0002 034B     		ldr	r3, .L303
 3176 0004 586B     		ldr	r0, [r3, #52]
 3177 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 3178              	.LVL211:
 3179              	.LBB194:
 3180              	.LBB195:
 3181              		.loc 4 833 0
 3182              		.syntax unified
 3183              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3184 000a BFF34F8F 		dsb 0xF
 3185              	@ 0 "" 2
 3186              		.thumb
 3187              		.syntax unified
 3188 000e 08BD     		pop	{r3, pc}
 3189              	.L304:
 3190              		.align	2
 3191              	.L303:
 3192 0010 00000000 		.word	.LANCHOR0
 3193              	.LBE195:
 3194              	.LBE194:
 3195              		.cfi_endproc
 3196              	.LFE211:
 3198              		.section	.text.DMA14_DriverIRQHandler,"ax",%progbits
 3199              		.align	1
 3200              		.global	DMA14_DriverIRQHandler
 3201              		.syntax unified
 3202              		.thumb
 3203              		.thumb_func
 3204              		.fpu fpv4-sp-d16
 3206              	DMA14_DriverIRQHandler:
 3207              	.LFB212:
2098:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2099:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2100:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2101:../drivers/fsl_edma.c ****     __DSB();
2102:../drivers/fsl_edma.c **** #endif
2103:../drivers/fsl_edma.c **** }
2104:../drivers/fsl_edma.c **** 
2105:../drivers/fsl_edma.c **** void DMA14_DriverIRQHandler(void)
2106:../drivers/fsl_edma.c **** {
 3208              		.loc 1 2106 0
 3209              		.cfi_startproc
 3210              		@ args = 0, pretend = 0, frame = 0
 3211              		@ frame_needed = 0, uses_anonymous_args = 0
 3212 0000 08B5     		push	{r3, lr}
 3213              		.cfi_def_cfa_offset 8
 3214              		.cfi_offset 3, -8
 3215              		.cfi_offset 14, -4
2107:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[14]);
 3216              		.loc 1 2107 0
 3217 0002 034B     		ldr	r3, .L306
 3218 0004 986B     		ldr	r0, [r3, #56]
 3219 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 3220              	.LVL212:
 3221              	.LBB196:
 3222              	.LBB197:
 3223              		.loc 4 833 0
 3224              		.syntax unified
 3225              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3226 000a BFF34F8F 		dsb 0xF
 3227              	@ 0 "" 2
 3228              		.thumb
 3229              		.syntax unified
 3230 000e 08BD     		pop	{r3, pc}
 3231              	.L307:
 3232              		.align	2
 3233              	.L306:
 3234 0010 00000000 		.word	.LANCHOR0
 3235              	.LBE197:
 3236              	.LBE196:
 3237              		.cfi_endproc
 3238              	.LFE212:
 3240              		.section	.text.DMA15_DriverIRQHandler,"ax",%progbits
 3241              		.align	1
 3242              		.global	DMA15_DriverIRQHandler
 3243              		.syntax unified
 3244              		.thumb
 3245              		.thumb_func
 3246              		.fpu fpv4-sp-d16
 3248              	DMA15_DriverIRQHandler:
 3249              	.LFB213:
2108:../drivers/fsl_edma.c ****     /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
2109:../drivers/fsl_edma.c ****       exception return operation might vector to incorrect interrupt */
2110:../drivers/fsl_edma.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
2111:../drivers/fsl_edma.c ****     __DSB();
2112:../drivers/fsl_edma.c **** #endif
2113:../drivers/fsl_edma.c **** }
2114:../drivers/fsl_edma.c **** 
2115:../drivers/fsl_edma.c **** void DMA15_DriverIRQHandler(void)
2116:../drivers/fsl_edma.c **** {
 3250              		.loc 1 2116 0
 3251              		.cfi_startproc
 3252              		@ args = 0, pretend = 0, frame = 0
 3253              		@ frame_needed = 0, uses_anonymous_args = 0
 3254 0000 08B5     		push	{r3, lr}
 3255              		.cfi_def_cfa_offset 8
 3256              		.cfi_offset 3, -8
 3257              		.cfi_offset 14, -4
2117:../drivers/fsl_edma.c ****     EDMA_HandleIRQ(s_EDMAHandle[15]);
 3258              		.loc 1 2117 0
 3259 0002 034B     		ldr	r3, .L309
 3260 0004 D86B     		ldr	r0, [r3, #60]
 3261 0006 FFF7FEFF 		bl	EDMA_HandleIRQ
 3262              	.LVL213:
 3263              	.LBB198:
 3264              	.LBB199:
 3265              		.loc 4 833 0
 3266              		.syntax unified
 3267              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3268 000a BFF34F8F 		dsb 0xF
 3269              	@ 0 "" 2
 3270              		.thumb
 3271              		.syntax unified
 3272 000e 08BD     		pop	{r3, pc}
 3273              	.L310:
 3274              		.align	2
 3275              	.L309:
 3276 0010 00000000 		.word	.LANCHOR0
 3277              	.LBE199:
 3278              	.LBE198:
 3279              		.cfi_endproc
 3280              	.LFE213:
 3282              		.section	.bss.s_EDMAHandle,"aw",%nobits
 3283              		.align	2
 3284              		.set	.LANCHOR0,. + 0
 3287              	s_EDMAHandle:
 3288 0000 00000000 		.space	64
 3288      00000000 
 3288      00000000 
 3288      00000000 
 3288      00000000 
 3289              		.section	.rodata.s_edmaIRQNumber,"a",%progbits
 3290              		.set	.LANCHOR1,. + 0
 3293              	s_edmaIRQNumber:
 3294 0000 00       		.byte	0
 3295 0001 01       		.byte	1
 3296 0002 02       		.byte	2
 3297 0003 03       		.byte	3
 3298 0004 04       		.byte	4
 3299 0005 05       		.byte	5
 3300 0006 06       		.byte	6
 3301 0007 07       		.byte	7
 3302 0008 08       		.byte	8
 3303 0009 09       		.byte	9
 3304 000a 0A       		.byte	10
 3305 000b 0B       		.byte	11
 3306 000c 0C       		.byte	12
 3307 000d 0D       		.byte	13
 3308 000e 0E       		.byte	14
 3309 000f 0F       		.byte	15
 3310              		.text
 3311              	.Letext0:
 3312              		.file 5 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 3313              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 3314              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 3315              		.file 8 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 3316              		.file 9 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 3317              		.file 10 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 3318              		.file 11 "../CMSIS/MK64F12.h"
 3319              		.file 12 "../CMSIS/system_MK64F12.h"
 3320              		.file 13 "../drivers/fsl_common.h"
 3321              		.file 14 "../drivers/fsl_edma.h"
