   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_i2c.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_CheckAndClearError,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	I2C_CheckAndClearError:
  25              	.LFB156:
  26              		.file 1 "../drivers/fsl_i2c.c"
   1:../drivers/fsl_i2c.c **** /*
   2:../drivers/fsl_i2c.c ****  * The Clear BSD License
   3:../drivers/fsl_i2c.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_i2c.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_i2c.c ****  * All rights reserved.
   6:../drivers/fsl_i2c.c ****  *
   7:../drivers/fsl_i2c.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_i2c.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_i2c.c ****  * that the following conditions are met:
  10:../drivers/fsl_i2c.c ****  *
  11:../drivers/fsl_i2c.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_i2c.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_i2c.c ****  *
  14:../drivers/fsl_i2c.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_i2c.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_i2c.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_i2c.c ****  *
  18:../drivers/fsl_i2c.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_i2c.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_i2c.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_i2c.c ****  *
  22:../drivers/fsl_i2c.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_i2c.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_i2c.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_i2c.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_i2c.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_i2c.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_i2c.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_i2c.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_i2c.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_i2c.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_i2c.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_i2c.c ****  */
  34:../drivers/fsl_i2c.c **** #include "fsl_i2c.h"
  35:../drivers/fsl_i2c.c **** 
  36:../drivers/fsl_i2c.c **** /*******************************************************************************
  37:../drivers/fsl_i2c.c ****  * Definitions
  38:../drivers/fsl_i2c.c ****  ******************************************************************************/
  39:../drivers/fsl_i2c.c **** 
  40:../drivers/fsl_i2c.c **** /*! @brief i2c transfer state. */
  41:../drivers/fsl_i2c.c **** enum _i2c_transfer_states
  42:../drivers/fsl_i2c.c **** {
  43:../drivers/fsl_i2c.c ****     kIdleState = 0x0U,             /*!< I2C bus idle. */
  44:../drivers/fsl_i2c.c ****     kCheckAddressState = 0x1U,     /*!< 7-bit address check state. */
  45:../drivers/fsl_i2c.c ****     kSendCommandState = 0x2U,      /*!< Send command byte phase. */
  46:../drivers/fsl_i2c.c ****     kSendDataState = 0x3U,         /*!< Send data transfer phase. */
  47:../drivers/fsl_i2c.c ****     kReceiveDataBeginState = 0x4U, /*!< Receive data transfer phase begin. */
  48:../drivers/fsl_i2c.c ****     kReceiveDataState = 0x5U,      /*!< Receive data transfer phase. */
  49:../drivers/fsl_i2c.c **** };
  50:../drivers/fsl_i2c.c **** 
  51:../drivers/fsl_i2c.c **** /*! @brief Common sets of flags used by the driver. */
  52:../drivers/fsl_i2c.c **** enum _i2c_flag_constants
  53:../drivers/fsl_i2c.c **** {
  54:../drivers/fsl_i2c.c **** /*! All flags which are cleared by the driver upon starting a transfer. */
  55:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
  56:../drivers/fsl_i2c.c ****     kClearFlags = kI2C_ArbitrationLostFlag | kI2C_IntPendingFlag | kI2C_StartDetectFlag | kI2C_Stop
  57:../drivers/fsl_i2c.c ****     kIrqFlags = kI2C_GlobalInterruptEnable | kI2C_StartStopDetectInterruptEnable,
  58:../drivers/fsl_i2c.c **** #elif defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
  59:../drivers/fsl_i2c.c ****     kClearFlags = kI2C_ArbitrationLostFlag | kI2C_IntPendingFlag | kI2C_StopDetectFlag,
  60:../drivers/fsl_i2c.c ****     kIrqFlags = kI2C_GlobalInterruptEnable | kI2C_StopDetectInterruptEnable,
  61:../drivers/fsl_i2c.c **** #else
  62:../drivers/fsl_i2c.c ****     kClearFlags = kI2C_ArbitrationLostFlag | kI2C_IntPendingFlag,
  63:../drivers/fsl_i2c.c ****     kIrqFlags = kI2C_GlobalInterruptEnable,
  64:../drivers/fsl_i2c.c **** #endif
  65:../drivers/fsl_i2c.c **** 
  66:../drivers/fsl_i2c.c **** };
  67:../drivers/fsl_i2c.c **** 
  68:../drivers/fsl_i2c.c **** /*! @brief Typedef for interrupt handler. */
  69:../drivers/fsl_i2c.c **** typedef void (*i2c_isr_t)(I2C_Type *base, void *i2cHandle);
  70:../drivers/fsl_i2c.c **** 
  71:../drivers/fsl_i2c.c **** /*******************************************************************************
  72:../drivers/fsl_i2c.c ****  * Prototypes
  73:../drivers/fsl_i2c.c ****  ******************************************************************************/
  74:../drivers/fsl_i2c.c **** 
  75:../drivers/fsl_i2c.c **** /*!
  76:../drivers/fsl_i2c.c ****  * @brief Get instance number for I2C module.
  77:../drivers/fsl_i2c.c ****  *
  78:../drivers/fsl_i2c.c ****  * @param base I2C peripheral base address.
  79:../drivers/fsl_i2c.c ****  */
  80:../drivers/fsl_i2c.c **** uint32_t I2C_GetInstance(I2C_Type *base);
  81:../drivers/fsl_i2c.c **** 
  82:../drivers/fsl_i2c.c **** /*!
  83:../drivers/fsl_i2c.c **** * @brief Set SCL/SDA hold time, this API receives SCL stop hold time, calculate the
  84:../drivers/fsl_i2c.c **** * closest SCL divider and MULT value for the SDA hold time, SCL start and SCL stop
  85:../drivers/fsl_i2c.c **** * hold time. To reduce the ROM size, SDA/SCL hold value mapping table is not provided,
  86:../drivers/fsl_i2c.c **** * assume SCL divider = SCL stop hold value *2 to get the closest SCL divider value and MULT
  87:../drivers/fsl_i2c.c **** * value, then the related SDA hold time, SCL start and SCL stop hold time is used.
  88:../drivers/fsl_i2c.c **** *
  89:../drivers/fsl_i2c.c **** * @param base I2C peripheral base address.
  90:../drivers/fsl_i2c.c **** * @param sourceClock_Hz I2C functional clock frequency in Hertz.
  91:../drivers/fsl_i2c.c **** * @param sclStopHoldTime_ns SCL stop hold time in ns.
  92:../drivers/fsl_i2c.c **** */
  93:../drivers/fsl_i2c.c **** static void I2C_SetHoldTime(I2C_Type *base, uint32_t sclStopHoldTime_ns, uint32_t sourceClock_Hz);
  94:../drivers/fsl_i2c.c **** 
  95:../drivers/fsl_i2c.c **** /*!
  96:../drivers/fsl_i2c.c ****  * @brief Set up master transfer, send slave address and decide the initial
  97:../drivers/fsl_i2c.c ****  * transfer state.
  98:../drivers/fsl_i2c.c ****  *
  99:../drivers/fsl_i2c.c ****  * @param base I2C peripheral base address.
 100:../drivers/fsl_i2c.c ****  * @param handle pointer to i2c_master_handle_t structure which stores the transfer state.
 101:../drivers/fsl_i2c.c ****  * @param xfer pointer to i2c_master_transfer_t structure.
 102:../drivers/fsl_i2c.c ****  */
 103:../drivers/fsl_i2c.c **** static status_t I2C_InitTransferStateMachine(I2C_Type *base, i2c_master_handle_t *handle, i2c_maste
 104:../drivers/fsl_i2c.c **** 
 105:../drivers/fsl_i2c.c **** /*!
 106:../drivers/fsl_i2c.c ****  * @brief Check and clear status operation.
 107:../drivers/fsl_i2c.c ****  *
 108:../drivers/fsl_i2c.c ****  * @param base I2C peripheral base address.
 109:../drivers/fsl_i2c.c ****  * @param status current i2c hardware status.
 110:../drivers/fsl_i2c.c ****  * @retval kStatus_Success No error found.
 111:../drivers/fsl_i2c.c ****  * @retval kStatus_I2C_ArbitrationLost Transfer error, arbitration lost.
 112:../drivers/fsl_i2c.c ****  * @retval kStatus_I2C_Nak Received Nak error.
 113:../drivers/fsl_i2c.c ****  */
 114:../drivers/fsl_i2c.c **** static status_t I2C_CheckAndClearError(I2C_Type *base, uint32_t status);
 115:../drivers/fsl_i2c.c **** 
 116:../drivers/fsl_i2c.c **** /*!
 117:../drivers/fsl_i2c.c ****  * @brief Master run transfer state machine to perform a byte of transfer.
 118:../drivers/fsl_i2c.c ****  *
 119:../drivers/fsl_i2c.c ****  * @param base I2C peripheral base address.
 120:../drivers/fsl_i2c.c ****  * @param handle pointer to i2c_master_handle_t structure which stores the transfer state
 121:../drivers/fsl_i2c.c ****  * @param isDone input param to get whether the thing is done, true is done
 122:../drivers/fsl_i2c.c ****  * @retval kStatus_Success No error found.
 123:../drivers/fsl_i2c.c ****  * @retval kStatus_I2C_ArbitrationLost Transfer error, arbitration lost.
 124:../drivers/fsl_i2c.c ****  * @retval kStatus_I2C_Nak Received Nak error.
 125:../drivers/fsl_i2c.c ****  * @retval kStatus_I2C_Timeout Transfer error, wait signal timeout.
 126:../drivers/fsl_i2c.c ****  */
 127:../drivers/fsl_i2c.c **** static status_t I2C_MasterTransferRunStateMachine(I2C_Type *base, i2c_master_handle_t *handle, bool
 128:../drivers/fsl_i2c.c **** 
 129:../drivers/fsl_i2c.c **** /*!
 130:../drivers/fsl_i2c.c ****  * @brief I2C common interrupt handler.
 131:../drivers/fsl_i2c.c ****  *
 132:../drivers/fsl_i2c.c ****  * @param base I2C peripheral base address.
 133:../drivers/fsl_i2c.c ****  * @param handle pointer to i2c_master_handle_t structure which stores the transfer state
 134:../drivers/fsl_i2c.c ****  */
 135:../drivers/fsl_i2c.c **** static void I2C_TransferCommonIRQHandler(I2C_Type *base, void *handle);
 136:../drivers/fsl_i2c.c **** 
 137:../drivers/fsl_i2c.c **** /*******************************************************************************
 138:../drivers/fsl_i2c.c ****  * Variables
 139:../drivers/fsl_i2c.c ****  ******************************************************************************/
 140:../drivers/fsl_i2c.c **** 
 141:../drivers/fsl_i2c.c **** /*! @brief Pointers to i2c handles for each instance. */
 142:../drivers/fsl_i2c.c **** static void *s_i2cHandle[FSL_FEATURE_SOC_I2C_COUNT] = {NULL};
 143:../drivers/fsl_i2c.c **** 
 144:../drivers/fsl_i2c.c **** /*! @brief SCL clock divider used to calculate baudrate. */
 145:../drivers/fsl_i2c.c **** static const uint16_t s_i2cDividerTable[] = {
 146:../drivers/fsl_i2c.c ****     20,  22,  24,  26,   28,   30,   34,   40,   28,   32,   36,   40,   44,   48,   56,   68,
 147:../drivers/fsl_i2c.c ****     48,  56,  64,  72,   80,   88,   104,  128,  80,   96,   112,  128,  144,  160,  192,  240,
 148:../drivers/fsl_i2c.c ****     160, 192, 224, 256,  288,  320,  384,  480,  320,  384,  448,  512,  576,  640,  768,  960,
 149:../drivers/fsl_i2c.c ****     640, 768, 896, 1024, 1152, 1280, 1536, 1920, 1280, 1536, 1792, 2048, 2304, 2560, 3072, 3840};
 150:../drivers/fsl_i2c.c **** 
 151:../drivers/fsl_i2c.c **** /*! @brief Pointers to i2c bases for each instance. */
 152:../drivers/fsl_i2c.c **** static I2C_Type *const s_i2cBases[] = I2C_BASE_PTRS;
 153:../drivers/fsl_i2c.c **** 
 154:../drivers/fsl_i2c.c **** /*! @brief Pointers to i2c IRQ number for each instance. */
 155:../drivers/fsl_i2c.c **** static const IRQn_Type s_i2cIrqs[] = I2C_IRQS;
 156:../drivers/fsl_i2c.c **** 
 157:../drivers/fsl_i2c.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 158:../drivers/fsl_i2c.c **** /*! @brief Pointers to i2c clocks for each instance. */
 159:../drivers/fsl_i2c.c **** static const clock_ip_name_t s_i2cClocks[] = I2C_CLOCKS;
 160:../drivers/fsl_i2c.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 161:../drivers/fsl_i2c.c **** 
 162:../drivers/fsl_i2c.c **** /*! @brief Pointer to master IRQ handler for each instance. */
 163:../drivers/fsl_i2c.c **** static i2c_isr_t s_i2cMasterIsr;
 164:../drivers/fsl_i2c.c **** 
 165:../drivers/fsl_i2c.c **** /*! @brief Pointer to slave IRQ handler for each instance. */
 166:../drivers/fsl_i2c.c **** static i2c_isr_t s_i2cSlaveIsr;
 167:../drivers/fsl_i2c.c **** 
 168:../drivers/fsl_i2c.c **** /*******************************************************************************
 169:../drivers/fsl_i2c.c ****  * Codes
 170:../drivers/fsl_i2c.c ****  ******************************************************************************/
 171:../drivers/fsl_i2c.c **** 
 172:../drivers/fsl_i2c.c **** uint32_t I2C_GetInstance(I2C_Type *base)
 173:../drivers/fsl_i2c.c **** {
 174:../drivers/fsl_i2c.c ****     uint32_t instance;
 175:../drivers/fsl_i2c.c **** 
 176:../drivers/fsl_i2c.c ****     /* Find the instance index from base address mappings. */
 177:../drivers/fsl_i2c.c ****     for (instance = 0; instance < ARRAY_SIZE(s_i2cBases); instance++)
 178:../drivers/fsl_i2c.c ****     {
 179:../drivers/fsl_i2c.c ****         if (s_i2cBases[instance] == base)
 180:../drivers/fsl_i2c.c ****         {
 181:../drivers/fsl_i2c.c ****             break;
 182:../drivers/fsl_i2c.c ****         }
 183:../drivers/fsl_i2c.c ****     }
 184:../drivers/fsl_i2c.c **** 
 185:../drivers/fsl_i2c.c ****     assert(instance < ARRAY_SIZE(s_i2cBases));
 186:../drivers/fsl_i2c.c **** 
 187:../drivers/fsl_i2c.c ****     return instance;
 188:../drivers/fsl_i2c.c **** }
 189:../drivers/fsl_i2c.c **** 
 190:../drivers/fsl_i2c.c **** static void I2C_SetHoldTime(I2C_Type *base, uint32_t sclStopHoldTime_ns, uint32_t sourceClock_Hz)
 191:../drivers/fsl_i2c.c **** {
 192:../drivers/fsl_i2c.c ****     uint32_t multiplier;
 193:../drivers/fsl_i2c.c ****     uint32_t computedSclHoldTime;
 194:../drivers/fsl_i2c.c ****     uint32_t absError;
 195:../drivers/fsl_i2c.c ****     uint32_t bestError = UINT32_MAX;
 196:../drivers/fsl_i2c.c ****     uint32_t bestMult = 0u;
 197:../drivers/fsl_i2c.c ****     uint32_t bestIcr = 0u;
 198:../drivers/fsl_i2c.c ****     uint8_t mult;
 199:../drivers/fsl_i2c.c ****     uint8_t i;
 200:../drivers/fsl_i2c.c **** 
 201:../drivers/fsl_i2c.c ****     /* Search for the settings with the lowest error. Mult is the MULT field of the I2C_F register,
 202:../drivers/fsl_i2c.c ****      * and ranges from 0-2. It selects the multiplier factor for the divider. */
 203:../drivers/fsl_i2c.c ****     /* SDA hold time = bus period (s) * mul * SDA hold value. */
 204:../drivers/fsl_i2c.c ****     /* SCL start hold time = bus period (s) * mul * SCL start hold value. */
 205:../drivers/fsl_i2c.c ****     /* SCL stop hold time = bus period (s) * mul * SCL stop hold value. */
 206:../drivers/fsl_i2c.c **** 
 207:../drivers/fsl_i2c.c ****     for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
 208:../drivers/fsl_i2c.c ****     {
 209:../drivers/fsl_i2c.c ****         multiplier = 1u << mult;
 210:../drivers/fsl_i2c.c **** 
 211:../drivers/fsl_i2c.c ****         /* Scan table to find best match. */
 212:../drivers/fsl_i2c.c ****         for (i = 0u; i < sizeof(s_i2cDividerTable) / sizeof(s_i2cDividerTable[0]); ++i)
 213:../drivers/fsl_i2c.c ****         {
 214:../drivers/fsl_i2c.c ****             /* Assume SCL hold(stop) value = s_i2cDividerTable[i]/2. */
 215:../drivers/fsl_i2c.c ****             computedSclHoldTime = ((multiplier * s_i2cDividerTable[i]) * 500000000U) / sourceClock_
 216:../drivers/fsl_i2c.c ****             absError = sclStopHoldTime_ns > computedSclHoldTime ? (sclStopHoldTime_ns - computedScl
 217:../drivers/fsl_i2c.c ****                                                                   (computedSclHoldTime - sclStopHol
 218:../drivers/fsl_i2c.c **** 
 219:../drivers/fsl_i2c.c ****             if (absError < bestError)
 220:../drivers/fsl_i2c.c ****             {
 221:../drivers/fsl_i2c.c ****                 bestMult = mult;
 222:../drivers/fsl_i2c.c ****                 bestIcr = i;
 223:../drivers/fsl_i2c.c ****                 bestError = absError;
 224:../drivers/fsl_i2c.c **** 
 225:../drivers/fsl_i2c.c ****                 /* If the error is 0, then we can stop searching because we won't find a better mat
 226:../drivers/fsl_i2c.c ****                 if (absError == 0)
 227:../drivers/fsl_i2c.c ****                 {
 228:../drivers/fsl_i2c.c ****                     break;
 229:../drivers/fsl_i2c.c ****                 }
 230:../drivers/fsl_i2c.c ****             }
 231:../drivers/fsl_i2c.c ****         }
 232:../drivers/fsl_i2c.c ****     }
 233:../drivers/fsl_i2c.c **** 
 234:../drivers/fsl_i2c.c ****     /* Set frequency register based on best settings. */
 235:../drivers/fsl_i2c.c ****     base->F = I2C_F_MULT(bestMult) | I2C_F_ICR(bestIcr);
 236:../drivers/fsl_i2c.c **** }
 237:../drivers/fsl_i2c.c **** 
 238:../drivers/fsl_i2c.c **** static status_t I2C_InitTransferStateMachine(I2C_Type *base, i2c_master_handle_t *handle, i2c_maste
 239:../drivers/fsl_i2c.c **** {
 240:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 241:../drivers/fsl_i2c.c ****     i2c_direction_t direction = xfer->direction;
 242:../drivers/fsl_i2c.c **** 
 243:../drivers/fsl_i2c.c ****     /* Initialize the handle transfer information. */
 244:../drivers/fsl_i2c.c ****     handle->transfer = *xfer;
 245:../drivers/fsl_i2c.c **** 
 246:../drivers/fsl_i2c.c ****     /* Save total transfer size. */
 247:../drivers/fsl_i2c.c ****     handle->transferSize = xfer->dataSize;
 248:../drivers/fsl_i2c.c **** 
 249:../drivers/fsl_i2c.c ****     /* Initial transfer state. */
 250:../drivers/fsl_i2c.c ****     if (handle->transfer.subaddressSize > 0)
 251:../drivers/fsl_i2c.c ****     {
 252:../drivers/fsl_i2c.c ****         if (xfer->direction == kI2C_Read)
 253:../drivers/fsl_i2c.c ****         {
 254:../drivers/fsl_i2c.c ****             direction = kI2C_Write;
 255:../drivers/fsl_i2c.c ****         }
 256:../drivers/fsl_i2c.c ****     }
 257:../drivers/fsl_i2c.c **** 
 258:../drivers/fsl_i2c.c ****     handle->state = kCheckAddressState;
 259:../drivers/fsl_i2c.c **** 
 260:../drivers/fsl_i2c.c ****     /* Clear all status before transfer. */
 261:../drivers/fsl_i2c.c ****     I2C_MasterClearStatusFlags(base, kClearFlags);
 262:../drivers/fsl_i2c.c **** 
 263:../drivers/fsl_i2c.c ****     /* Handle no start option. */
 264:../drivers/fsl_i2c.c ****     if (handle->transfer.flags & kI2C_TransferNoStartFlag)
 265:../drivers/fsl_i2c.c ****     {
 266:../drivers/fsl_i2c.c ****         /* No need to send start flag, directly go to send command or data */
 267:../drivers/fsl_i2c.c ****         if (handle->transfer.subaddressSize > 0)
 268:../drivers/fsl_i2c.c ****         {
 269:../drivers/fsl_i2c.c ****             handle->state = kSendCommandState;
 270:../drivers/fsl_i2c.c ****         }
 271:../drivers/fsl_i2c.c ****         else
 272:../drivers/fsl_i2c.c ****         {
 273:../drivers/fsl_i2c.c ****             if (direction == kI2C_Write)
 274:../drivers/fsl_i2c.c ****             {
 275:../drivers/fsl_i2c.c ****                 /* Next state, send data. */
 276:../drivers/fsl_i2c.c ****                 handle->state = kSendDataState;
 277:../drivers/fsl_i2c.c ****             }
 278:../drivers/fsl_i2c.c ****             else
 279:../drivers/fsl_i2c.c ****             {
 280:../drivers/fsl_i2c.c ****                 /* Only support write with no stop signal. */
 281:../drivers/fsl_i2c.c ****                 return kStatus_InvalidArgument;
 282:../drivers/fsl_i2c.c ****             }
 283:../drivers/fsl_i2c.c ****         }
 284:../drivers/fsl_i2c.c **** 
 285:../drivers/fsl_i2c.c ****         /* Wait for TCF bit and manually trigger tx interrupt. */
 286:../drivers/fsl_i2c.c ****         while (!(base->S & kI2C_TransferCompleteFlag))
 287:../drivers/fsl_i2c.c ****         {
 288:../drivers/fsl_i2c.c ****         }
 289:../drivers/fsl_i2c.c ****         I2C_MasterTransferHandleIRQ(base, handle);
 290:../drivers/fsl_i2c.c ****     }
 291:../drivers/fsl_i2c.c ****     /* If repeated start is requested, send repeated start. */
 292:../drivers/fsl_i2c.c ****     else if (handle->transfer.flags & kI2C_TransferRepeatedStartFlag)
 293:../drivers/fsl_i2c.c ****     {
 294:../drivers/fsl_i2c.c ****         result = I2C_MasterRepeatedStart(base, handle->transfer.slaveAddress, direction);
 295:../drivers/fsl_i2c.c ****     }
 296:../drivers/fsl_i2c.c ****     else /* For normal transfer, send start. */
 297:../drivers/fsl_i2c.c ****     {
 298:../drivers/fsl_i2c.c ****         result = I2C_MasterStart(base, handle->transfer.slaveAddress, direction);
 299:../drivers/fsl_i2c.c ****     }
 300:../drivers/fsl_i2c.c **** 
 301:../drivers/fsl_i2c.c ****     return result;
 302:../drivers/fsl_i2c.c **** }
 303:../drivers/fsl_i2c.c **** 
 304:../drivers/fsl_i2c.c **** static status_t I2C_CheckAndClearError(I2C_Type *base, uint32_t status)
 305:../drivers/fsl_i2c.c **** {
  27              		.loc 1 305 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 306:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 307:../drivers/fsl_i2c.c **** 
 308:../drivers/fsl_i2c.c ****     /* Check arbitration lost. */
 309:../drivers/fsl_i2c.c ****     if (status & kI2C_ArbitrationLostFlag)
  33              		.loc 1 309 0
  34 0000 CB06     		lsls	r3, r1, #27
  35 0002 04D5     		bpl	.L2
 310:../drivers/fsl_i2c.c ****     {
 311:../drivers/fsl_i2c.c ****         /* Clear arbitration lost flag. */
 312:../drivers/fsl_i2c.c ****         base->S = kI2C_ArbitrationLostFlag;
  36              		.loc 1 312 0
  37 0004 1023     		movs	r3, #16
  38 0006 C370     		strb	r3, [r0, #3]
  39              	.LVL1:
 313:../drivers/fsl_i2c.c ****         result = kStatus_I2C_ArbitrationLost;
  40              		.loc 1 313 0
  41 0008 40F24F40 		movw	r0, #1103
  42              	.LVL2:
  43 000c 7047     		bx	lr
  44              	.LVL3:
  45              	.L2:
 314:../drivers/fsl_i2c.c ****     }
 315:../drivers/fsl_i2c.c ****     /* Check NAK */
 316:../drivers/fsl_i2c.c ****     else if (status & kI2C_ReceiveNakFlag)
  46              		.loc 1 316 0
  47 000e 11F0010F 		tst	r1, #1
 317:../drivers/fsl_i2c.c ****     {
 318:../drivers/fsl_i2c.c ****         result = kStatus_I2C_Nak;
  48              		.loc 1 318 0
  49 0012 40F24E40 		movw	r0, #1102
  50              	.LVL4:
  51 0016 08BF     		it	eq
  52 0018 0020     		moveq	r0, #0
 319:../drivers/fsl_i2c.c ****     }
 320:../drivers/fsl_i2c.c ****     else
 321:../drivers/fsl_i2c.c ****     {
 322:../drivers/fsl_i2c.c ****     }
 323:../drivers/fsl_i2c.c **** 
 324:../drivers/fsl_i2c.c ****     return result;
 325:../drivers/fsl_i2c.c **** }
  53              		.loc 1 325 0
  54 001a 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE156:
  58              		.section	.text.I2C_TransferCommonIRQHandler,"ax",%progbits
  59              		.align	1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv4-sp-d16
  65              	I2C_TransferCommonIRQHandler:
  66              	.LFB158:
 326:../drivers/fsl_i2c.c **** 
 327:../drivers/fsl_i2c.c **** static status_t I2C_MasterTransferRunStateMachine(I2C_Type *base, i2c_master_handle_t *handle, bool
 328:../drivers/fsl_i2c.c **** {
 329:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 330:../drivers/fsl_i2c.c ****     uint32_t statusFlags = base->S;
 331:../drivers/fsl_i2c.c ****     *isDone = false;
 332:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
 333:../drivers/fsl_i2c.c ****     bool ignoreNak = ((handle->state == kSendDataState) && (handle->transfer.dataSize == 0U)) ||
 334:../drivers/fsl_i2c.c ****                      ((handle->state == kReceiveDataState) && (handle->transfer.dataSize == 1U));
 335:../drivers/fsl_i2c.c **** 
 336:../drivers/fsl_i2c.c ****     /* Add this to avoid build warning. */
 337:../drivers/fsl_i2c.c ****     dummy++;
 338:../drivers/fsl_i2c.c **** 
 339:../drivers/fsl_i2c.c ****     /* Check & clear error flags. */
 340:../drivers/fsl_i2c.c ****     result = I2C_CheckAndClearError(base, statusFlags);
 341:../drivers/fsl_i2c.c **** 
 342:../drivers/fsl_i2c.c ****     /* Ignore Nak when it's appeared for last byte. */
 343:../drivers/fsl_i2c.c ****     if ((result == kStatus_I2C_Nak) && ignoreNak)
 344:../drivers/fsl_i2c.c ****     {
 345:../drivers/fsl_i2c.c ****         result = kStatus_Success;
 346:../drivers/fsl_i2c.c ****     }
 347:../drivers/fsl_i2c.c **** 
 348:../drivers/fsl_i2c.c ****     /* Handle Check address state to check the slave address is Acked in slave
 349:../drivers/fsl_i2c.c ****        probe application. */
 350:../drivers/fsl_i2c.c ****     if (handle->state == kCheckAddressState)
 351:../drivers/fsl_i2c.c ****     {
 352:../drivers/fsl_i2c.c ****         if (statusFlags & kI2C_ReceiveNakFlag)
 353:../drivers/fsl_i2c.c ****         {
 354:../drivers/fsl_i2c.c ****             result = kStatus_I2C_Addr_Nak;
 355:../drivers/fsl_i2c.c ****         }
 356:../drivers/fsl_i2c.c ****         else
 357:../drivers/fsl_i2c.c ****         {
 358:../drivers/fsl_i2c.c ****             if (handle->transfer.subaddressSize > 0)
 359:../drivers/fsl_i2c.c ****             {
 360:../drivers/fsl_i2c.c ****                 handle->state = kSendCommandState;
 361:../drivers/fsl_i2c.c ****             }
 362:../drivers/fsl_i2c.c ****             else
 363:../drivers/fsl_i2c.c ****             {
 364:../drivers/fsl_i2c.c ****                 if (handle->transfer.direction == kI2C_Write)
 365:../drivers/fsl_i2c.c ****                 {
 366:../drivers/fsl_i2c.c ****                     /* Next state, send data. */
 367:../drivers/fsl_i2c.c ****                     handle->state = kSendDataState;
 368:../drivers/fsl_i2c.c ****                 }
 369:../drivers/fsl_i2c.c ****                 else
 370:../drivers/fsl_i2c.c ****                 {
 371:../drivers/fsl_i2c.c ****                     /* Next state, receive data begin. */
 372:../drivers/fsl_i2c.c ****                     handle->state = kReceiveDataBeginState;
 373:../drivers/fsl_i2c.c ****                 }
 374:../drivers/fsl_i2c.c ****             }
 375:../drivers/fsl_i2c.c ****         }
 376:../drivers/fsl_i2c.c ****     }
 377:../drivers/fsl_i2c.c **** 
 378:../drivers/fsl_i2c.c ****     if (result)
 379:../drivers/fsl_i2c.c ****     {
 380:../drivers/fsl_i2c.c ****         return result;
 381:../drivers/fsl_i2c.c ****     }
 382:../drivers/fsl_i2c.c **** 
 383:../drivers/fsl_i2c.c ****     /* Run state machine. */
 384:../drivers/fsl_i2c.c ****     switch (handle->state)
 385:../drivers/fsl_i2c.c ****     {
 386:../drivers/fsl_i2c.c ****         /* Send I2C command. */
 387:../drivers/fsl_i2c.c ****         case kSendCommandState:
 388:../drivers/fsl_i2c.c ****             if (handle->transfer.subaddressSize)
 389:../drivers/fsl_i2c.c ****             {
 390:../drivers/fsl_i2c.c ****                 handle->transfer.subaddressSize--;
 391:../drivers/fsl_i2c.c ****                 base->D = ((handle->transfer.subaddress) >> (8 * handle->transfer.subaddressSize));
 392:../drivers/fsl_i2c.c ****             }
 393:../drivers/fsl_i2c.c ****             else
 394:../drivers/fsl_i2c.c ****             {
 395:../drivers/fsl_i2c.c ****                 if (handle->transfer.direction == kI2C_Write)
 396:../drivers/fsl_i2c.c ****                 {
 397:../drivers/fsl_i2c.c ****                     /* Next state, send data. */
 398:../drivers/fsl_i2c.c ****                     handle->state = kSendDataState;
 399:../drivers/fsl_i2c.c **** 
 400:../drivers/fsl_i2c.c ****                     /* Send first byte of data. */
 401:../drivers/fsl_i2c.c ****                     if (handle->transfer.dataSize > 0)
 402:../drivers/fsl_i2c.c ****                     {
 403:../drivers/fsl_i2c.c ****                         base->D = *handle->transfer.data;
 404:../drivers/fsl_i2c.c ****                         handle->transfer.data++;
 405:../drivers/fsl_i2c.c ****                         handle->transfer.dataSize--;
 406:../drivers/fsl_i2c.c ****                     }
 407:../drivers/fsl_i2c.c ****                 }
 408:../drivers/fsl_i2c.c ****                 else
 409:../drivers/fsl_i2c.c ****                 {
 410:../drivers/fsl_i2c.c ****                     /* Send repeated start and slave address. */
 411:../drivers/fsl_i2c.c ****                     result = I2C_MasterRepeatedStart(base, handle->transfer.slaveAddress, kI2C_Read
 412:../drivers/fsl_i2c.c **** 
 413:../drivers/fsl_i2c.c ****                     /* Next state, receive data begin. */
 414:../drivers/fsl_i2c.c ****                     handle->state = kReceiveDataBeginState;
 415:../drivers/fsl_i2c.c ****                 }
 416:../drivers/fsl_i2c.c ****             }
 417:../drivers/fsl_i2c.c ****             break;
 418:../drivers/fsl_i2c.c **** 
 419:../drivers/fsl_i2c.c ****         /* Send I2C data. */
 420:../drivers/fsl_i2c.c ****         case kSendDataState:
 421:../drivers/fsl_i2c.c ****             /* Send one byte of data. */
 422:../drivers/fsl_i2c.c ****             if (handle->transfer.dataSize > 0)
 423:../drivers/fsl_i2c.c ****             {
 424:../drivers/fsl_i2c.c ****                 base->D = *handle->transfer.data;
 425:../drivers/fsl_i2c.c ****                 handle->transfer.data++;
 426:../drivers/fsl_i2c.c ****                 handle->transfer.dataSize--;
 427:../drivers/fsl_i2c.c ****             }
 428:../drivers/fsl_i2c.c ****             else
 429:../drivers/fsl_i2c.c ****             {
 430:../drivers/fsl_i2c.c ****                 *isDone = true;
 431:../drivers/fsl_i2c.c ****             }
 432:../drivers/fsl_i2c.c ****             break;
 433:../drivers/fsl_i2c.c **** 
 434:../drivers/fsl_i2c.c ****         /* Start I2C data receive. */
 435:../drivers/fsl_i2c.c ****         case kReceiveDataBeginState:
 436:../drivers/fsl_i2c.c ****             base->C1 &= ~(I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
 437:../drivers/fsl_i2c.c **** 
 438:../drivers/fsl_i2c.c ****             /* Send nak at the last receive byte. */
 439:../drivers/fsl_i2c.c ****             if (handle->transfer.dataSize == 1)
 440:../drivers/fsl_i2c.c ****             {
 441:../drivers/fsl_i2c.c ****                 base->C1 |= I2C_C1_TXAK_MASK;
 442:../drivers/fsl_i2c.c ****             }
 443:../drivers/fsl_i2c.c **** 
 444:../drivers/fsl_i2c.c ****             /* Read dummy to release the bus. */
 445:../drivers/fsl_i2c.c ****             dummy = base->D;
 446:../drivers/fsl_i2c.c **** 
 447:../drivers/fsl_i2c.c ****             /* Next state, receive data. */
 448:../drivers/fsl_i2c.c ****             handle->state = kReceiveDataState;
 449:../drivers/fsl_i2c.c ****             break;
 450:../drivers/fsl_i2c.c **** 
 451:../drivers/fsl_i2c.c ****         /* Receive I2C data. */
 452:../drivers/fsl_i2c.c ****         case kReceiveDataState:
 453:../drivers/fsl_i2c.c ****             /* Receive one byte of data. */
 454:../drivers/fsl_i2c.c ****             if (handle->transfer.dataSize--)
 455:../drivers/fsl_i2c.c ****             {
 456:../drivers/fsl_i2c.c ****                 if (handle->transfer.dataSize == 0)
 457:../drivers/fsl_i2c.c ****                 {
 458:../drivers/fsl_i2c.c ****                     *isDone = true;
 459:../drivers/fsl_i2c.c **** 
 460:../drivers/fsl_i2c.c ****                     /* Send stop if kI2C_TransferNoStop is not asserted. */
 461:../drivers/fsl_i2c.c ****                     if (!(handle->transfer.flags & kI2C_TransferNoStopFlag))
 462:../drivers/fsl_i2c.c ****                     {
 463:../drivers/fsl_i2c.c ****                         result = I2C_MasterStop(base);
 464:../drivers/fsl_i2c.c ****                     }
 465:../drivers/fsl_i2c.c ****                     else
 466:../drivers/fsl_i2c.c ****                     {
 467:../drivers/fsl_i2c.c ****                         base->C1 |= I2C_C1_TX_MASK;
 468:../drivers/fsl_i2c.c ****                     }
 469:../drivers/fsl_i2c.c ****                 }
 470:../drivers/fsl_i2c.c **** 
 471:../drivers/fsl_i2c.c ****                 /* Send NAK at the last receive byte. */
 472:../drivers/fsl_i2c.c ****                 if (handle->transfer.dataSize == 1)
 473:../drivers/fsl_i2c.c ****                 {
 474:../drivers/fsl_i2c.c ****                     base->C1 |= I2C_C1_TXAK_MASK;
 475:../drivers/fsl_i2c.c ****                 }
 476:../drivers/fsl_i2c.c **** 
 477:../drivers/fsl_i2c.c ****                 /* Read the data byte into the transfer buffer. */
 478:../drivers/fsl_i2c.c ****                 *handle->transfer.data = base->D;
 479:../drivers/fsl_i2c.c ****                 handle->transfer.data++;
 480:../drivers/fsl_i2c.c ****             }
 481:../drivers/fsl_i2c.c ****             break;
 482:../drivers/fsl_i2c.c **** 
 483:../drivers/fsl_i2c.c ****         default:
 484:../drivers/fsl_i2c.c ****             break;
 485:../drivers/fsl_i2c.c ****     }
 486:../drivers/fsl_i2c.c **** 
 487:../drivers/fsl_i2c.c ****     return result;
 488:../drivers/fsl_i2c.c **** }
 489:../drivers/fsl_i2c.c **** 
 490:../drivers/fsl_i2c.c **** static void I2C_TransferCommonIRQHandler(I2C_Type *base, void *handle)
 491:../drivers/fsl_i2c.c **** {
  67              		.loc 1 491 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL5:
  72 0000 10B5     		push	{r4, lr}
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
 492:../drivers/fsl_i2c.c ****     /* Check if master interrupt. */
 493:../drivers/fsl_i2c.c ****     if ((base->S & kI2C_ArbitrationLostFlag) || (base->C1 & I2C_C1_MST_MASK))
  76              		.loc 1 493 0
  77 0002 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  78 0004 D206     		lsls	r2, r2, #27
 491:../drivers/fsl_i2c.c ****     /* Check if master interrupt. */
  79              		.loc 1 491 0
  80 0006 0346     		mov	r3, r0
  81 0008 0C46     		mov	r4, r1
  82              		.loc 1 493 0
  83 000a 02D4     		bmi	.L6
  84              		.loc 1 493 0 is_stmt 0 discriminator 1
  85 000c 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
  86 000e 9206     		lsls	r2, r2, #26
  87 0010 07D5     		bpl	.L7
  88              	.L6:
 494:../drivers/fsl_i2c.c ****     {
 495:../drivers/fsl_i2c.c ****         s_i2cMasterIsr(base, handle);
  89              		.loc 1 495 0 is_stmt 1
  90 0012 064A     		ldr	r2, .L9
  91 0014 2146     		mov	r1, r4
  92              	.LVL6:
  93 0016 1268     		ldr	r2, [r2]
  94 0018 1846     		mov	r0, r3
  95              	.LVL7:
  96 001a 9047     		blx	r2
  97              	.LVL8:
  98              	.L8:
  99              	.LBB13:
 100              	.LBB14:
 101              		.file 2 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 102              		.loc 2 833 0
 103              		.syntax unified
 104              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 105 001c BFF34F8F 		dsb 0xF
 106              	@ 0 "" 2
 107              		.thumb
 108              		.syntax unified
 109              	.LBE14:
 110              	.LBE13:
 496:../drivers/fsl_i2c.c ****     }
 497:../drivers/fsl_i2c.c ****     else
 498:../drivers/fsl_i2c.c ****     {
 499:../drivers/fsl_i2c.c ****         s_i2cSlaveIsr(base, handle);
 500:../drivers/fsl_i2c.c ****     }
 501:../drivers/fsl_i2c.c ****     __DSB();
 502:../drivers/fsl_i2c.c **** }
 111              		.loc 1 502 0
 112 0020 10BD     		pop	{r4, pc}
 113              	.LVL9:
 114              	.L7:
 499:../drivers/fsl_i2c.c ****     }
 115              		.loc 1 499 0
 116 0022 034B     		ldr	r3, .L9+4
 117 0024 1B68     		ldr	r3, [r3]
 118 0026 9847     		blx	r3
 119              	.LVL10:
 120 0028 F8E7     		b	.L8
 121              	.L10:
 122 002a 00BF     		.align	2
 123              	.L9:
 124 002c 00000000 		.word	.LANCHOR0
 125 0030 00000000 		.word	.LANCHOR1
 126              		.cfi_endproc
 127              	.LFE158:
 129              		.section	.text.I2C_GetInstance,"ax",%progbits
 130              		.align	1
 131              		.global	I2C_GetInstance
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu fpv4-sp-d16
 137              	I2C_GetInstance:
 138              	.LFB153:
 173:../drivers/fsl_i2c.c ****     uint32_t instance;
 139              		.loc 1 173 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL11:
 179:../drivers/fsl_i2c.c ****         {
 145              		.loc 1 179 0
 146 0000 084B     		ldr	r3, .L16
 147 0002 9842     		cmp	r0, r3
 148 0004 0AD0     		beq	.L13
 149              	.LVL12:
 150 0006 03F58053 		add	r3, r3, #4096
 151 000a 9842     		cmp	r0, r3
 152 000c 08D0     		beq	.L14
 153              	.LVL13:
 177:../drivers/fsl_i2c.c ****     {
 154              		.loc 1 177 0
 155 000e 03F5FE23 		add	r3, r3, #520192
 156 0012 9842     		cmp	r0, r3
 157 0014 0CBF     		ite	eq
 158 0016 0220     		moveq	r0, #2
 159 0018 0320     		movne	r0, #3
 160              	.LVL14:
 161 001a 7047     		bx	lr
 162              	.LVL15:
 163              	.L13:
 164 001c 0020     		movs	r0, #0
 165              	.LVL16:
 166 001e 7047     		bx	lr
 167              	.LVL17:
 168              	.L14:
 169 0020 0120     		movs	r0, #1
 170              	.LVL18:
 188:../drivers/fsl_i2c.c **** 
 171              		.loc 1 188 0
 172 0022 7047     		bx	lr
 173              	.L17:
 174              		.align	2
 175              	.L16:
 176 0024 00600640 		.word	1074159616
 177              		.cfi_endproc
 178              	.LFE153:
 180              		.section	.text.I2C_MasterDeinit,"ax",%progbits
 181              		.align	1
 182              		.global	I2C_MasterDeinit
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	I2C_MasterDeinit:
 189              	.LFB160:
 503:../drivers/fsl_i2c.c **** 
 504:../drivers/fsl_i2c.c **** void I2C_MasterInit(I2C_Type *base, const i2c_master_config_t *masterConfig, uint32_t srcClock_Hz)
 505:../drivers/fsl_i2c.c **** {
 506:../drivers/fsl_i2c.c ****     assert(masterConfig && srcClock_Hz);
 507:../drivers/fsl_i2c.c **** 
 508:../drivers/fsl_i2c.c ****     /* Temporary register for filter read. */
 509:../drivers/fsl_i2c.c ****     uint8_t fltReg;
 510:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE
 511:../drivers/fsl_i2c.c ****     uint8_t s2Reg;
 512:../drivers/fsl_i2c.c **** #endif
 513:../drivers/fsl_i2c.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 514:../drivers/fsl_i2c.c ****     /* Enable I2C clock. */
 515:../drivers/fsl_i2c.c ****     CLOCK_EnableClock(s_i2cClocks[I2C_GetInstance(base)]);
 516:../drivers/fsl_i2c.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 517:../drivers/fsl_i2c.c **** 
 518:../drivers/fsl_i2c.c ****     /* Reset the module. */
 519:../drivers/fsl_i2c.c ****     base->A1 = 0;
 520:../drivers/fsl_i2c.c ****     base->F = 0;
 521:../drivers/fsl_i2c.c ****     base->C1 = 0;
 522:../drivers/fsl_i2c.c ****     base->S = 0xFFU;
 523:../drivers/fsl_i2c.c ****     base->C2 = 0;
 524:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 525:../drivers/fsl_i2c.c ****     base->FLT = 0x50U;
 526:../drivers/fsl_i2c.c **** #elif defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 527:../drivers/fsl_i2c.c ****     base->FLT = 0x40U;
 528:../drivers/fsl_i2c.c **** #endif
 529:../drivers/fsl_i2c.c ****     base->RA = 0;
 530:../drivers/fsl_i2c.c **** 
 531:../drivers/fsl_i2c.c ****     /* Disable I2C prior to configuring it. */
 532:../drivers/fsl_i2c.c ****     base->C1 &= ~(I2C_C1_IICEN_MASK);
 533:../drivers/fsl_i2c.c **** 
 534:../drivers/fsl_i2c.c ****     /* Clear all flags. */
 535:../drivers/fsl_i2c.c ****     I2C_MasterClearStatusFlags(base, kClearFlags);
 536:../drivers/fsl_i2c.c **** 
 537:../drivers/fsl_i2c.c ****     /* Configure baud rate. */
 538:../drivers/fsl_i2c.c ****     I2C_MasterSetBaudRate(base, masterConfig->baudRate_Bps, srcClock_Hz);
 539:../drivers/fsl_i2c.c **** 
 540:../drivers/fsl_i2c.c ****     /* Read out the FLT register. */
 541:../drivers/fsl_i2c.c ****     fltReg = base->FLT;
 542:../drivers/fsl_i2c.c **** 
 543:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF) && FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF
 544:../drivers/fsl_i2c.c ****     /* Configure the stop / hold enable. */
 545:../drivers/fsl_i2c.c ****     fltReg &= ~(I2C_FLT_SHEN_MASK);
 546:../drivers/fsl_i2c.c ****     fltReg |= I2C_FLT_SHEN(masterConfig->enableStopHold);
 547:../drivers/fsl_i2c.c **** #endif
 548:../drivers/fsl_i2c.c **** 
 549:../drivers/fsl_i2c.c ****     /* Configure the glitch filter value. */
 550:../drivers/fsl_i2c.c ****     fltReg &= ~(I2C_FLT_FLT_MASK);
 551:../drivers/fsl_i2c.c ****     fltReg |= I2C_FLT_FLT(masterConfig->glitchFilterWidth);
 552:../drivers/fsl_i2c.c **** 
 553:../drivers/fsl_i2c.c ****     /* Write the register value back to the filter register. */
 554:../drivers/fsl_i2c.c ****     base->FLT = fltReg;
 555:../drivers/fsl_i2c.c **** 
 556:../drivers/fsl_i2c.c **** /* Enable/Disable double buffering. */
 557:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE
 558:../drivers/fsl_i2c.c ****     s2Reg = base->S2 & (~I2C_S2_DFEN_MASK);
 559:../drivers/fsl_i2c.c ****     base->S2 = s2Reg | I2C_S2_DFEN(masterConfig->enableDoubleBuffering);
 560:../drivers/fsl_i2c.c **** #endif
 561:../drivers/fsl_i2c.c **** 
 562:../drivers/fsl_i2c.c ****     /* Enable the I2C peripheral based on the configuration. */
 563:../drivers/fsl_i2c.c ****     base->C1 = I2C_C1_IICEN(masterConfig->enableMaster);
 564:../drivers/fsl_i2c.c **** }
 565:../drivers/fsl_i2c.c **** 
 566:../drivers/fsl_i2c.c **** void I2C_MasterDeinit(I2C_Type *base)
 567:../drivers/fsl_i2c.c **** {
 190              		.loc 1 567 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL19:
 195 0000 08B5     		push	{r3, lr}
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 199              	.LBB19:
 200              	.LBB20:
 201              		.file 3 "../drivers/fsl_i2c.h"
   1:../drivers/fsl_i2c.h **** /*
   2:../drivers/fsl_i2c.h ****  * The Clear BSD License
   3:../drivers/fsl_i2c.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_i2c.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_i2c.h ****  * All rights reserved.
   6:../drivers/fsl_i2c.h ****  *
   7:../drivers/fsl_i2c.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_i2c.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_i2c.h ****  * that the following conditions are met:
  10:../drivers/fsl_i2c.h ****  *
  11:../drivers/fsl_i2c.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_i2c.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_i2c.h ****  *
  14:../drivers/fsl_i2c.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_i2c.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_i2c.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_i2c.h ****  *
  18:../drivers/fsl_i2c.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_i2c.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_i2c.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_i2c.h ****  *
  22:../drivers/fsl_i2c.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_i2c.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_i2c.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_i2c.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_i2c.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_i2c.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_i2c.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_i2c.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_i2c.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_i2c.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_i2c.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_i2c.h ****  */
  34:../drivers/fsl_i2c.h **** #ifndef _FSL_I2C_H_
  35:../drivers/fsl_i2c.h **** #define _FSL_I2C_H_
  36:../drivers/fsl_i2c.h **** 
  37:../drivers/fsl_i2c.h **** #include "fsl_common.h"
  38:../drivers/fsl_i2c.h **** 
  39:../drivers/fsl_i2c.h **** /*!
  40:../drivers/fsl_i2c.h ****  * @addtogroup i2c_driver
  41:../drivers/fsl_i2c.h ****  * @{
  42:../drivers/fsl_i2c.h ****  */
  43:../drivers/fsl_i2c.h **** 
  44:../drivers/fsl_i2c.h **** /*******************************************************************************
  45:../drivers/fsl_i2c.h ****  * Definitions
  46:../drivers/fsl_i2c.h ****  ******************************************************************************/
  47:../drivers/fsl_i2c.h **** 
  48:../drivers/fsl_i2c.h **** /*! @name Driver version */
  49:../drivers/fsl_i2c.h **** /*@{*/
  50:../drivers/fsl_i2c.h **** /*! @brief I2C driver version 2.0.5. */
  51:../drivers/fsl_i2c.h **** #define FSL_I2C_DRIVER_VERSION (MAKE_VERSION(2, 0, 5))
  52:../drivers/fsl_i2c.h **** /*@}*/
  53:../drivers/fsl_i2c.h **** 
  54:../drivers/fsl_i2c.h **** /*! @brief Timeout times for waiting flag. */
  55:../drivers/fsl_i2c.h **** #ifndef I2C_WAIT_TIMEOUT
  56:../drivers/fsl_i2c.h **** #define I2C_WAIT_TIMEOUT 0U /* Define to zero means keep waiting until the flag is assert/deassert.
  57:../drivers/fsl_i2c.h **** #endif
  58:../drivers/fsl_i2c.h **** 
  59:../drivers/fsl_i2c.h **** #if (defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT || \
  60:../drivers/fsl_i2c.h ****      defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT)
  61:../drivers/fsl_i2c.h **** #define I2C_HAS_STOP_DETECT
  62:../drivers/fsl_i2c.h **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT / FSL_FEATURE_I2C_HAS_STOP_DETECT */
  63:../drivers/fsl_i2c.h **** 
  64:../drivers/fsl_i2c.h **** /*! @brief  I2C status return codes. */
  65:../drivers/fsl_i2c.h **** enum _i2c_status
  66:../drivers/fsl_i2c.h **** {
  67:../drivers/fsl_i2c.h ****     kStatus_I2C_Busy = MAKE_STATUS(kStatusGroup_I2C, 0),            /*!< I2C is busy with current t
  68:../drivers/fsl_i2c.h ****     kStatus_I2C_Idle = MAKE_STATUS(kStatusGroup_I2C, 1),            /*!< Bus is Idle. */
  69:../drivers/fsl_i2c.h ****     kStatus_I2C_Nak = MAKE_STATUS(kStatusGroup_I2C, 2),             /*!< NAK received during transf
  70:../drivers/fsl_i2c.h ****     kStatus_I2C_ArbitrationLost = MAKE_STATUS(kStatusGroup_I2C, 3), /*!< Arbitration lost during tr
  71:../drivers/fsl_i2c.h ****     kStatus_I2C_Timeout = MAKE_STATUS(kStatusGroup_I2C, 4),         /*!< Timeout poling status flag
  72:../drivers/fsl_i2c.h ****     kStatus_I2C_Addr_Nak = MAKE_STATUS(kStatusGroup_I2C, 5),        /*!< NAK received during the ad
  73:../drivers/fsl_i2c.h **** };
  74:../drivers/fsl_i2c.h **** 
  75:../drivers/fsl_i2c.h **** /*!
  76:../drivers/fsl_i2c.h ****  * @brief I2C peripheral flags
  77:../drivers/fsl_i2c.h ****  *
  78:../drivers/fsl_i2c.h ****  * The following status register flags can be cleared:
  79:../drivers/fsl_i2c.h ****  * - #kI2C_ArbitrationLostFlag
  80:../drivers/fsl_i2c.h ****  * - #kI2C_IntPendingFlag
  81:../drivers/fsl_i2c.h ****  * - #kI2C_StartDetectFlag
  82:../drivers/fsl_i2c.h ****  * - #kI2C_StopDetectFlag
  83:../drivers/fsl_i2c.h ****  *
  84:../drivers/fsl_i2c.h ****  * @note These enumerations are meant to be OR'd together to form a bit mask.
  85:../drivers/fsl_i2c.h ****  *
  86:../drivers/fsl_i2c.h ****  */
  87:../drivers/fsl_i2c.h **** enum _i2c_flags
  88:../drivers/fsl_i2c.h **** {
  89:../drivers/fsl_i2c.h ****     kI2C_ReceiveNakFlag = I2C_S_RXAK_MASK,       /*!< I2C receive NAK flag. */
  90:../drivers/fsl_i2c.h ****     kI2C_IntPendingFlag = I2C_S_IICIF_MASK,      /*!< I2C interrupt pending flag. */
  91:../drivers/fsl_i2c.h ****     kI2C_TransferDirectionFlag = I2C_S_SRW_MASK, /*!< I2C transfer direction flag. */
  92:../drivers/fsl_i2c.h ****     kI2C_RangeAddressMatchFlag = I2C_S_RAM_MASK, /*!< I2C range address match flag. */
  93:../drivers/fsl_i2c.h ****     kI2C_ArbitrationLostFlag = I2C_S_ARBL_MASK,  /*!< I2C arbitration lost flag. */
  94:../drivers/fsl_i2c.h ****     kI2C_BusBusyFlag = I2C_S_BUSY_MASK,          /*!< I2C bus busy flag. */
  95:../drivers/fsl_i2c.h ****     kI2C_AddressMatchFlag = I2C_S_IAAS_MASK,     /*!< I2C address match flag. */
  96:../drivers/fsl_i2c.h ****     kI2C_TransferCompleteFlag = I2C_S_TCF_MASK,  /*!< I2C transfer complete flag. */
  97:../drivers/fsl_i2c.h **** #ifdef I2C_HAS_STOP_DETECT
  98:../drivers/fsl_i2c.h ****     kI2C_StopDetectFlag = I2C_FLT_STOPF_MASK << 8, /*!< I2C stop detect flag. */
  99:../drivers/fsl_i2c.h **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT / FSL_FEATURE_I2C_HAS_STOP_DETECT */
 100:../drivers/fsl_i2c.h **** 
 101:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 102:../drivers/fsl_i2c.h ****     kI2C_StartDetectFlag = I2C_FLT_STARTF_MASK << 8, /*!< I2C start detect flag. */
 103:../drivers/fsl_i2c.h **** #endif                                               /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
 104:../drivers/fsl_i2c.h **** };
 105:../drivers/fsl_i2c.h **** 
 106:../drivers/fsl_i2c.h **** /*! @brief I2C feature interrupt source. */
 107:../drivers/fsl_i2c.h **** enum _i2c_interrupt_enable
 108:../drivers/fsl_i2c.h **** {
 109:../drivers/fsl_i2c.h ****     kI2C_GlobalInterruptEnable = I2C_C1_IICIE_MASK, /*!< I2C global interrupt. */
 110:../drivers/fsl_i2c.h **** 
 111:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 112:../drivers/fsl_i2c.h ****     kI2C_StopDetectInterruptEnable = I2C_FLT_STOPIE_MASK, /*!< I2C stop detect interrupt. */
 113:../drivers/fsl_i2c.h **** #endif                                                    /* FSL_FEATURE_I2C_HAS_STOP_DETECT */
 114:../drivers/fsl_i2c.h **** 
 115:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 116:../drivers/fsl_i2c.h ****     kI2C_StartStopDetectInterruptEnable = I2C_FLT_SSIE_MASK, /*!< I2C start&stop detect interrupt. 
 117:../drivers/fsl_i2c.h **** #endif                                                       /* FSL_FEATURE_I2C_HAS_START_STOP_DETE
 118:../drivers/fsl_i2c.h **** };
 119:../drivers/fsl_i2c.h **** 
 120:../drivers/fsl_i2c.h **** /*! @brief The direction of master and slave transfers. */
 121:../drivers/fsl_i2c.h **** typedef enum _i2c_direction
 122:../drivers/fsl_i2c.h **** {
 123:../drivers/fsl_i2c.h ****     kI2C_Write = 0x0U, /*!< Master transmits to the slave. */
 124:../drivers/fsl_i2c.h ****     kI2C_Read = 0x1U,  /*!< Master receives from the slave. */
 125:../drivers/fsl_i2c.h **** } i2c_direction_t;
 126:../drivers/fsl_i2c.h **** 
 127:../drivers/fsl_i2c.h **** /*! @brief Addressing mode. */
 128:../drivers/fsl_i2c.h **** typedef enum _i2c_slave_address_mode
 129:../drivers/fsl_i2c.h **** {
 130:../drivers/fsl_i2c.h ****     kI2C_Address7bit = 0x0U, /*!< 7-bit addressing mode. */
 131:../drivers/fsl_i2c.h ****     kI2C_RangeMatch = 0X2U,  /*!< Range address match addressing mode. */
 132:../drivers/fsl_i2c.h **** } i2c_slave_address_mode_t;
 133:../drivers/fsl_i2c.h **** 
 134:../drivers/fsl_i2c.h **** /*! @brief I2C transfer control flag. */
 135:../drivers/fsl_i2c.h **** enum _i2c_master_transfer_flags
 136:../drivers/fsl_i2c.h **** {
 137:../drivers/fsl_i2c.h ****     kI2C_TransferDefaultFlag = 0x0U,       /*!< A transfer starts with a start signal, stops with a
 138:../drivers/fsl_i2c.h ****     kI2C_TransferNoStartFlag = 0x1U,       /*!< A transfer starts without a start signal, only supp
 139:../drivers/fsl_i2c.h ****                                         write+read with no start flag, do not support read only wit
 140:../drivers/fsl_i2c.h ****     kI2C_TransferRepeatedStartFlag = 0x2U, /*!< A transfer starts with a repeated start signal. */
 141:../drivers/fsl_i2c.h ****     kI2C_TransferNoStopFlag = 0x4U,        /*!< A transfer ends without a stop signal. */
 142:../drivers/fsl_i2c.h **** };
 143:../drivers/fsl_i2c.h **** 
 144:../drivers/fsl_i2c.h **** /*!
 145:../drivers/fsl_i2c.h ****  * @brief Set of events sent to the callback for nonblocking slave transfers.
 146:../drivers/fsl_i2c.h ****  *
 147:../drivers/fsl_i2c.h ****  * These event enumerations are used for two related purposes. First, a bit mask created by OR'ing 
 148:../drivers/fsl_i2c.h ****  * events is passed to I2C_SlaveTransferNonBlocking() to specify which events to enable.
 149:../drivers/fsl_i2c.h ****  * Then, when the slave callback is invoked, it is passed the current event through its @a transfer
 150:../drivers/fsl_i2c.h ****  * parameter.
 151:../drivers/fsl_i2c.h ****  *
 152:../drivers/fsl_i2c.h ****  * @note These enumerations are meant to be OR'd together to form a bit mask of events.
 153:../drivers/fsl_i2c.h ****  */
 154:../drivers/fsl_i2c.h **** typedef enum _i2c_slave_transfer_event
 155:../drivers/fsl_i2c.h **** {
 156:../drivers/fsl_i2c.h ****     kI2C_SlaveAddressMatchEvent = 0x01U, /*!< Received the slave address after a start or repeated 
 157:../drivers/fsl_i2c.h ****     kI2C_SlaveTransmitEvent = 0x02U,     /*!< A callback is requested to provide data to transmit
 158:../drivers/fsl_i2c.h ****                                                 (slave-transmitter role). */
 159:../drivers/fsl_i2c.h ****     kI2C_SlaveReceiveEvent = 0x04U,      /*!< A callback is requested to provide a buffer in which 
 160:../drivers/fsl_i2c.h ****                                                  data (slave-receiver role). */
 161:../drivers/fsl_i2c.h ****     kI2C_SlaveTransmitAckEvent = 0x08U,  /*!< A callback needs to either transmit an ACK or NACK. *
 162:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 163:../drivers/fsl_i2c.h ****     kI2C_SlaveStartEvent = 0x10U, /*!< A start/repeated start was detected. */
 164:../drivers/fsl_i2c.h **** #endif
 165:../drivers/fsl_i2c.h ****     kI2C_SlaveCompletionEvent = 0x20U,  /*!< A stop was detected or finished transfer, completing t
 166:../drivers/fsl_i2c.h ****     kI2C_SlaveGenaralcallEvent = 0x40U, /*!< Received the general call address after a start or rep
 167:../drivers/fsl_i2c.h **** 
 168:../drivers/fsl_i2c.h ****     /*! A bit mask of all available events. */
 169:../drivers/fsl_i2c.h ****     kI2C_SlaveAllEvents = kI2C_SlaveAddressMatchEvent | kI2C_SlaveTransmitEvent | kI2C_SlaveReceive
 170:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 171:../drivers/fsl_i2c.h ****                           kI2C_SlaveStartEvent |
 172:../drivers/fsl_i2c.h **** #endif
 173:../drivers/fsl_i2c.h ****                           kI2C_SlaveCompletionEvent | kI2C_SlaveGenaralcallEvent,
 174:../drivers/fsl_i2c.h **** } i2c_slave_transfer_event_t;
 175:../drivers/fsl_i2c.h **** 
 176:../drivers/fsl_i2c.h **** /*! @brief I2C master user configuration. */
 177:../drivers/fsl_i2c.h **** typedef struct _i2c_master_config
 178:../drivers/fsl_i2c.h **** {
 179:../drivers/fsl_i2c.h ****     bool enableMaster; /*!< Enables the I2C peripheral at initialization time. */
 180:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF) && FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF
 181:../drivers/fsl_i2c.h ****     bool enableStopHold; /*!< Controls the stop hold enable. */
 182:../drivers/fsl_i2c.h **** #endif
 183:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE
 184:../drivers/fsl_i2c.h ****     bool enableDoubleBuffering; /*!< Controls double buffer enable; notice that
 185:../drivers/fsl_i2c.h ****                                      enabling the double buffer disables the clock stretch. */
 186:../drivers/fsl_i2c.h **** #endif
 187:../drivers/fsl_i2c.h ****     uint32_t baudRate_Bps;     /*!< Baud rate configuration of I2C peripheral. */
 188:../drivers/fsl_i2c.h ****     uint8_t glitchFilterWidth; /*!< Controls the width of the glitch. */
 189:../drivers/fsl_i2c.h **** } i2c_master_config_t;
 190:../drivers/fsl_i2c.h **** 
 191:../drivers/fsl_i2c.h **** /*! @brief I2C slave user configuration. */
 192:../drivers/fsl_i2c.h **** typedef struct _i2c_slave_config
 193:../drivers/fsl_i2c.h **** {
 194:../drivers/fsl_i2c.h ****     bool enableSlave;       /*!< Enables the I2C peripheral at initialization time. */
 195:../drivers/fsl_i2c.h ****     bool enableGeneralCall; /*!< Enables the general call addressing mode. */
 196:../drivers/fsl_i2c.h ****     bool enableWakeUp;      /*!< Enables/disables waking up MCU from low-power mode. */
 197:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE
 198:../drivers/fsl_i2c.h ****     bool enableDoubleBuffering; /*!< Controls a double buffer enable; notice that
 199:../drivers/fsl_i2c.h ****                                      enabling the double buffer disables the clock stretch. */
 200:../drivers/fsl_i2c.h **** #endif
 201:../drivers/fsl_i2c.h ****     bool enableBaudRateCtl; /*!< Enables/disables independent slave baud rate on SCL in very fast I
 202:../drivers/fsl_i2c.h ****     uint16_t slaveAddress;  /*!< A slave address configuration. */
 203:../drivers/fsl_i2c.h ****     uint16_t upperAddress;  /*!< A maximum boundary slave address used in a range matching mode. */
 204:../drivers/fsl_i2c.h ****     i2c_slave_address_mode_t
 205:../drivers/fsl_i2c.h ****         addressingMode;          /*!< An addressing mode configuration of i2c_slave_address_mode_co
 206:../drivers/fsl_i2c.h ****     uint32_t sclStopHoldTime_ns; /*!< the delay from the rising edge of SCL (I2C clock) to the risi
 207:../drivers/fsl_i2c.h ****                                     data) while SCL is high (stop condition), SDA hold time and SCL
 208:../drivers/fsl_i2c.h ****                                     are also configured according to the SCL stop hold time. */
 209:../drivers/fsl_i2c.h **** } i2c_slave_config_t;
 210:../drivers/fsl_i2c.h **** 
 211:../drivers/fsl_i2c.h **** /*! @brief I2C master handle typedef. */
 212:../drivers/fsl_i2c.h **** typedef struct _i2c_master_handle i2c_master_handle_t;
 213:../drivers/fsl_i2c.h **** 
 214:../drivers/fsl_i2c.h **** /*! @brief I2C master transfer callback typedef. */
 215:../drivers/fsl_i2c.h **** typedef void (*i2c_master_transfer_callback_t)(I2C_Type *base,
 216:../drivers/fsl_i2c.h ****                                                i2c_master_handle_t *handle,
 217:../drivers/fsl_i2c.h ****                                                status_t status,
 218:../drivers/fsl_i2c.h ****                                                void *userData);
 219:../drivers/fsl_i2c.h **** 
 220:../drivers/fsl_i2c.h **** /*! @brief I2C slave handle typedef. */
 221:../drivers/fsl_i2c.h **** typedef struct _i2c_slave_handle i2c_slave_handle_t;
 222:../drivers/fsl_i2c.h **** 
 223:../drivers/fsl_i2c.h **** /*! @brief I2C master transfer structure. */
 224:../drivers/fsl_i2c.h **** typedef struct _i2c_master_transfer
 225:../drivers/fsl_i2c.h **** {
 226:../drivers/fsl_i2c.h ****     uint32_t flags;            /*!< A transfer flag which controls the transfer. */
 227:../drivers/fsl_i2c.h ****     uint8_t slaveAddress;      /*!< 7-bit slave address. */
 228:../drivers/fsl_i2c.h ****     i2c_direction_t direction; /*!< A transfer direction, read or write. */
 229:../drivers/fsl_i2c.h ****     uint32_t subaddress;       /*!< A sub address. Transferred MSB first. */
 230:../drivers/fsl_i2c.h ****     uint8_t subaddressSize;    /*!< A size of the command buffer. */
 231:../drivers/fsl_i2c.h ****     uint8_t *volatile data;    /*!< A transfer buffer. */
 232:../drivers/fsl_i2c.h ****     volatile size_t dataSize;  /*!< A transfer size. */
 233:../drivers/fsl_i2c.h **** } i2c_master_transfer_t;
 234:../drivers/fsl_i2c.h **** 
 235:../drivers/fsl_i2c.h **** /*! @brief I2C master handle structure. */
 236:../drivers/fsl_i2c.h **** struct _i2c_master_handle
 237:../drivers/fsl_i2c.h **** {
 238:../drivers/fsl_i2c.h ****     i2c_master_transfer_t transfer;                    /*!< I2C master transfer copy. */
 239:../drivers/fsl_i2c.h ****     size_t transferSize;                               /*!< Total bytes to be transferred. */
 240:../drivers/fsl_i2c.h ****     uint8_t state;                                     /*!< A transfer state maintained during tran
 241:../drivers/fsl_i2c.h ****     i2c_master_transfer_callback_t completionCallback; /*!< A callback function called when the tra
 242:../drivers/fsl_i2c.h ****     void *userData;                                    /*!< A callback parameter passed to the call
 243:../drivers/fsl_i2c.h **** };
 244:../drivers/fsl_i2c.h **** 
 245:../drivers/fsl_i2c.h **** /*! @brief I2C slave transfer structure. */
 246:../drivers/fsl_i2c.h **** typedef struct _i2c_slave_transfer
 247:../drivers/fsl_i2c.h **** {
 248:../drivers/fsl_i2c.h ****     i2c_slave_transfer_event_t event; /*!< A reason that the callback is invoked. */
 249:../drivers/fsl_i2c.h ****     uint8_t *volatile data;           /*!< A transfer buffer. */
 250:../drivers/fsl_i2c.h ****     volatile size_t dataSize;         /*!< A transfer size. */
 251:../drivers/fsl_i2c.h ****     status_t completionStatus;        /*!< Success or error code describing how the transfer comple
 252:../drivers/fsl_i2c.h ****                                          #kI2C_SlaveCompletionEvent. */
 253:../drivers/fsl_i2c.h ****     size_t transferredCount; /*!< A number of bytes actually transferred since the start or since t
 254:../drivers/fsl_i2c.h ****                                 start. */
 255:../drivers/fsl_i2c.h **** } i2c_slave_transfer_t;
 256:../drivers/fsl_i2c.h **** 
 257:../drivers/fsl_i2c.h **** /*! @brief I2C slave transfer callback typedef. */
 258:../drivers/fsl_i2c.h **** typedef void (*i2c_slave_transfer_callback_t)(I2C_Type *base, i2c_slave_transfer_t *xfer, void *use
 259:../drivers/fsl_i2c.h **** 
 260:../drivers/fsl_i2c.h **** /*! @brief I2C slave handle structure. */
 261:../drivers/fsl_i2c.h **** struct _i2c_slave_handle
 262:../drivers/fsl_i2c.h **** {
 263:../drivers/fsl_i2c.h ****     volatile bool isBusy;                   /*!< Indicates whether a transfer is busy. */
 264:../drivers/fsl_i2c.h ****     i2c_slave_transfer_t transfer;          /*!< I2C slave transfer copy. */
 265:../drivers/fsl_i2c.h ****     uint32_t eventMask;                     /*!< A mask of enabled events. */
 266:../drivers/fsl_i2c.h ****     i2c_slave_transfer_callback_t callback; /*!< A callback function called at the transfer event. 
 267:../drivers/fsl_i2c.h ****     void *userData;                         /*!< A callback parameter passed to the callback. */
 268:../drivers/fsl_i2c.h **** };
 269:../drivers/fsl_i2c.h **** 
 270:../drivers/fsl_i2c.h **** /*******************************************************************************
 271:../drivers/fsl_i2c.h ****  * API
 272:../drivers/fsl_i2c.h ****  ******************************************************************************/
 273:../drivers/fsl_i2c.h **** 
 274:../drivers/fsl_i2c.h **** #if defined(__cplusplus)
 275:../drivers/fsl_i2c.h **** extern "C" {
 276:../drivers/fsl_i2c.h **** #endif /*_cplusplus. */
 277:../drivers/fsl_i2c.h **** 
 278:../drivers/fsl_i2c.h **** /*!
 279:../drivers/fsl_i2c.h ****  * @name Initialization and deinitialization
 280:../drivers/fsl_i2c.h ****  * @{
 281:../drivers/fsl_i2c.h ****  */
 282:../drivers/fsl_i2c.h **** 
 283:../drivers/fsl_i2c.h **** /*!
 284:../drivers/fsl_i2c.h ****  * @brief Initializes the I2C peripheral. Call this API to ungate the I2C clock
 285:../drivers/fsl_i2c.h ****  * and configure the I2C with master configuration.
 286:../drivers/fsl_i2c.h ****  *
 287:../drivers/fsl_i2c.h ****  * @note This API should be called at the beginning of the application.
 288:../drivers/fsl_i2c.h ****  * Otherwise, any operation to the I2C module can cause a hard fault
 289:../drivers/fsl_i2c.h ****  * because the clock is not enabled. The configuration structure can be custom filled
 290:../drivers/fsl_i2c.h ****  * or it can be set with default values by using the I2C_MasterGetDefaultConfig().
 291:../drivers/fsl_i2c.h ****  * After calling this API, the master is ready to transfer.
 292:../drivers/fsl_i2c.h ****  * This is an example.
 293:../drivers/fsl_i2c.h ****  * @code
 294:../drivers/fsl_i2c.h ****  * i2c_master_config_t config = {
 295:../drivers/fsl_i2c.h ****  * .enableMaster = true,
 296:../drivers/fsl_i2c.h ****  * .enableStopHold = false,
 297:../drivers/fsl_i2c.h ****  * .highDrive = false,
 298:../drivers/fsl_i2c.h ****  * .baudRate_Bps = 100000,
 299:../drivers/fsl_i2c.h ****  * .glitchFilterWidth = 0
 300:../drivers/fsl_i2c.h ****  * };
 301:../drivers/fsl_i2c.h ****  * I2C_MasterInit(I2C0, &config, 12000000U);
 302:../drivers/fsl_i2c.h ****  * @endcode
 303:../drivers/fsl_i2c.h ****  *
 304:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 305:../drivers/fsl_i2c.h ****  * @param masterConfig A pointer to the master configuration structure
 306:../drivers/fsl_i2c.h ****  * @param srcClock_Hz I2C peripheral clock frequency in Hz
 307:../drivers/fsl_i2c.h ****  */
 308:../drivers/fsl_i2c.h **** void I2C_MasterInit(I2C_Type *base, const i2c_master_config_t *masterConfig, uint32_t srcClock_Hz);
 309:../drivers/fsl_i2c.h **** 
 310:../drivers/fsl_i2c.h **** /*!
 311:../drivers/fsl_i2c.h ****  * @brief Initializes the I2C peripheral. Call this API to ungate the I2C clock
 312:../drivers/fsl_i2c.h ****  * and initialize the I2C with the slave configuration.
 313:../drivers/fsl_i2c.h ****  *
 314:../drivers/fsl_i2c.h ****  * @note This API should be called at the beginning of the application.
 315:../drivers/fsl_i2c.h ****  * Otherwise, any operation to the I2C module can cause a hard fault
 316:../drivers/fsl_i2c.h ****  * because the clock is not enabled. The configuration structure can partly be set
 317:../drivers/fsl_i2c.h ****  * with default values by I2C_SlaveGetDefaultConfig() or it can be custom filled by the user.
 318:../drivers/fsl_i2c.h ****  * This is an example.
 319:../drivers/fsl_i2c.h ****  * @code
 320:../drivers/fsl_i2c.h ****  * i2c_slave_config_t config = {
 321:../drivers/fsl_i2c.h ****  * .enableSlave = true,
 322:../drivers/fsl_i2c.h ****  * .enableGeneralCall = false,
 323:../drivers/fsl_i2c.h ****  * .addressingMode = kI2C_Address7bit,
 324:../drivers/fsl_i2c.h ****  * .slaveAddress = 0x1DU,
 325:../drivers/fsl_i2c.h ****  * .enableWakeUp = false,
 326:../drivers/fsl_i2c.h ****  * .enablehighDrive = false,
 327:../drivers/fsl_i2c.h ****  * .enableBaudRateCtl = false,
 328:../drivers/fsl_i2c.h ****  * .sclStopHoldTime_ns = 4000
 329:../drivers/fsl_i2c.h ****  * };
 330:../drivers/fsl_i2c.h ****  * I2C_SlaveInit(I2C0, &config, 12000000U);
 331:../drivers/fsl_i2c.h ****  * @endcode
 332:../drivers/fsl_i2c.h ****  *
 333:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 334:../drivers/fsl_i2c.h ****  * @param slaveConfig A pointer to the slave configuration structure
 335:../drivers/fsl_i2c.h ****  * @param srcClock_Hz I2C peripheral clock frequency in Hz
 336:../drivers/fsl_i2c.h ****  */
 337:../drivers/fsl_i2c.h **** void I2C_SlaveInit(I2C_Type *base, const i2c_slave_config_t *slaveConfig, uint32_t srcClock_Hz);
 338:../drivers/fsl_i2c.h **** 
 339:../drivers/fsl_i2c.h **** /*!
 340:../drivers/fsl_i2c.h ****  * @brief De-initializes the I2C master peripheral. Call this API to gate the I2C clock.
 341:../drivers/fsl_i2c.h ****  * The I2C master module can't work unless the I2C_MasterInit is called.
 342:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 343:../drivers/fsl_i2c.h ****  */
 344:../drivers/fsl_i2c.h **** void I2C_MasterDeinit(I2C_Type *base);
 345:../drivers/fsl_i2c.h **** 
 346:../drivers/fsl_i2c.h **** /*!
 347:../drivers/fsl_i2c.h ****  * @brief De-initializes the I2C slave peripheral. Calling this API gates the I2C clock.
 348:../drivers/fsl_i2c.h ****  * The I2C slave module can't work unless the I2C_SlaveInit is called to enable the clock.
 349:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 350:../drivers/fsl_i2c.h ****  */
 351:../drivers/fsl_i2c.h **** void I2C_SlaveDeinit(I2C_Type *base);
 352:../drivers/fsl_i2c.h **** 
 353:../drivers/fsl_i2c.h **** /*!
 354:../drivers/fsl_i2c.h ****  * @brief  Sets the I2C master configuration structure to default values.
 355:../drivers/fsl_i2c.h ****  *
 356:../drivers/fsl_i2c.h ****  * The purpose of this API is to get the configuration structure initialized for use in the I2C_Mas
 357:../drivers/fsl_i2c.h ****  * Use the initialized structure unchanged in the I2C_MasterConfigure() or modify
 358:../drivers/fsl_i2c.h ****  * the structure before calling the I2C_MasterConfigure().
 359:../drivers/fsl_i2c.h ****  * This is an example.
 360:../drivers/fsl_i2c.h ****  * @code
 361:../drivers/fsl_i2c.h ****  * i2c_master_config_t config;
 362:../drivers/fsl_i2c.h ****  * I2C_MasterGetDefaultConfig(&config);
 363:../drivers/fsl_i2c.h ****  * @endcode
 364:../drivers/fsl_i2c.h ****  * @param masterConfig A pointer to the master configuration structure.
 365:../drivers/fsl_i2c.h **** */
 366:../drivers/fsl_i2c.h **** void I2C_MasterGetDefaultConfig(i2c_master_config_t *masterConfig);
 367:../drivers/fsl_i2c.h **** 
 368:../drivers/fsl_i2c.h **** /*!
 369:../drivers/fsl_i2c.h ****  * @brief  Sets the I2C slave configuration structure to default values.
 370:../drivers/fsl_i2c.h ****  *
 371:../drivers/fsl_i2c.h ****  * The purpose of this API is to get the configuration structure initialized for use in the I2C_Sla
 372:../drivers/fsl_i2c.h ****  * Modify fields of the structure before calling the I2C_SlaveConfigure().
 373:../drivers/fsl_i2c.h ****  * This is an example.
 374:../drivers/fsl_i2c.h ****  * @code
 375:../drivers/fsl_i2c.h ****  * i2c_slave_config_t config;
 376:../drivers/fsl_i2c.h ****  * I2C_SlaveGetDefaultConfig(&config);
 377:../drivers/fsl_i2c.h ****  * @endcode
 378:../drivers/fsl_i2c.h ****  * @param slaveConfig A pointer to the slave configuration structure.
 379:../drivers/fsl_i2c.h ****  */
 380:../drivers/fsl_i2c.h **** void I2C_SlaveGetDefaultConfig(i2c_slave_config_t *slaveConfig);
 381:../drivers/fsl_i2c.h **** 
 382:../drivers/fsl_i2c.h **** /*!
 383:../drivers/fsl_i2c.h ****  * @brief Enables or disabless the I2C peripheral operation.
 384:../drivers/fsl_i2c.h ****  *
 385:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 386:../drivers/fsl_i2c.h ****  * @param enable Pass true to enable and false to disable the module.
 387:../drivers/fsl_i2c.h ****  */
 388:../drivers/fsl_i2c.h **** static inline void I2C_Enable(I2C_Type *base, bool enable)
 389:../drivers/fsl_i2c.h **** {
 390:../drivers/fsl_i2c.h ****     if (enable)
 391:../drivers/fsl_i2c.h ****     {
 392:../drivers/fsl_i2c.h ****         base->C1 |= I2C_C1_IICEN_MASK;
 393:../drivers/fsl_i2c.h ****     }
 394:../drivers/fsl_i2c.h ****     else
 395:../drivers/fsl_i2c.h ****     {
 396:../drivers/fsl_i2c.h ****         base->C1 &= ~I2C_C1_IICEN_MASK;
 202              		.loc 3 396 0
 203 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 204 0004 03F07F03 		and	r3, r3, #127
 205 0008 8370     		strb	r3, [r0, #2]
 206              	.LVL20:
 207              	.LBE20:
 208              	.LBE19:
 568:../drivers/fsl_i2c.c ****     /* Disable I2C module. */
 569:../drivers/fsl_i2c.c ****     I2C_Enable(base, false);
 570:../drivers/fsl_i2c.c **** 
 571:../drivers/fsl_i2c.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 572:../drivers/fsl_i2c.c ****     /* Disable I2C clock. */
 573:../drivers/fsl_i2c.c ****     CLOCK_DisableClock(s_i2cClocks[I2C_GetInstance(base)]);
 209              		.loc 1 573 0
 210 000a FFF7FEFF 		bl	I2C_GetInstance
 211              	.LVL21:
 212 000e 084B     		ldr	r3, .L19
 213 0010 53F82020 		ldr	r2, [r3, r0, lsl #2]
 214              	.LVL22:
 215              	.LBB21:
 216              	.LBB22:
 217              		.file 4 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 218              		.loc 4 705 0
 219 0014 130C     		lsrs	r3, r2, #16
 220 0016 03F18043 		add	r3, r3, #1073741824
 221 001a 03F58E23 		add	r3, r3, #290816
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 222              		.loc 4 706 0
 223 001e 92B2     		uxth	r2, r2
 224              	.LVL23:
 225 0020 1968     		ldr	r1, [r3]
 226 0022 0120     		movs	r0, #1
 227              	.LVL24:
 228 0024 00FA02F2 		lsl	r2, r0, r2
 229 0028 21EA0202 		bic	r2, r1, r2
 230 002c 1A60     		str	r2, [r3]
 231              	.LBE22:
 232              	.LBE21:
 574:../drivers/fsl_i2c.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 575:../drivers/fsl_i2c.c **** }
 233              		.loc 1 575 0
 234 002e 08BD     		pop	{r3, pc}
 235              	.L20:
 236              		.align	2
 237              	.L19:
 238 0030 00000000 		.word	.LANCHOR2
 239              		.cfi_endproc
 240              	.LFE160:
 242              		.section	.text.I2C_MasterGetDefaultConfig,"ax",%progbits
 243              		.align	1
 244              		.global	I2C_MasterGetDefaultConfig
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu fpv4-sp-d16
 250              	I2C_MasterGetDefaultConfig:
 251              	.LFB161:
 576:../drivers/fsl_i2c.c **** 
 577:../drivers/fsl_i2c.c **** void I2C_MasterGetDefaultConfig(i2c_master_config_t *masterConfig)
 578:../drivers/fsl_i2c.c **** {
 252              		.loc 1 578 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257              	.LVL25:
 579:../drivers/fsl_i2c.c ****     assert(masterConfig);
 580:../drivers/fsl_i2c.c **** 
 581:../drivers/fsl_i2c.c ****     /* Default baud rate at 100kbps. */
 582:../drivers/fsl_i2c.c ****     masterConfig->baudRate_Bps = 100000U;
 258              		.loc 1 582 0
 259 0000 034B     		ldr	r3, .L22
 260 0002 4360     		str	r3, [r0, #4]
 583:../drivers/fsl_i2c.c **** 
 584:../drivers/fsl_i2c.c **** /* Default stop hold enable is disabled. */
 585:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF) && FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF
 586:../drivers/fsl_i2c.c ****     masterConfig->enableStopHold = false;
 261              		.loc 1 586 0
 262 0004 0023     		movs	r3, #0
 263 0006 4370     		strb	r3, [r0, #1]
 587:../drivers/fsl_i2c.c **** #endif
 588:../drivers/fsl_i2c.c **** 
 589:../drivers/fsl_i2c.c ****     /* Default glitch filter value is no filter. */
 590:../drivers/fsl_i2c.c ****     masterConfig->glitchFilterWidth = 0U;
 264              		.loc 1 590 0
 265 0008 0372     		strb	r3, [r0, #8]
 591:../drivers/fsl_i2c.c **** 
 592:../drivers/fsl_i2c.c **** /* Default enable double buffering. */
 593:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE
 594:../drivers/fsl_i2c.c ****     masterConfig->enableDoubleBuffering = true;
 595:../drivers/fsl_i2c.c **** #endif
 596:../drivers/fsl_i2c.c **** 
 597:../drivers/fsl_i2c.c ****     /* Enable the I2C peripheral. */
 598:../drivers/fsl_i2c.c ****     masterConfig->enableMaster = true;
 266              		.loc 1 598 0
 267 000a 0123     		movs	r3, #1
 268 000c 0370     		strb	r3, [r0]
 599:../drivers/fsl_i2c.c **** }
 269              		.loc 1 599 0
 270 000e 7047     		bx	lr
 271              	.L23:
 272              		.align	2
 273              	.L22:
 274 0010 A0860100 		.word	100000
 275              		.cfi_endproc
 276              	.LFE161:
 278              		.section	.text.I2C_EnableInterrupts,"ax",%progbits
 279              		.align	1
 280              		.global	I2C_EnableInterrupts
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu fpv4-sp-d16
 286              	I2C_EnableInterrupts:
 287              	.LFB162:
 600:../drivers/fsl_i2c.c **** 
 601:../drivers/fsl_i2c.c **** void I2C_EnableInterrupts(I2C_Type *base, uint32_t mask)
 602:../drivers/fsl_i2c.c **** {
 288              		.loc 1 602 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293              	.LVL26:
 603:../drivers/fsl_i2c.c **** #ifdef I2C_HAS_STOP_DETECT
 604:../drivers/fsl_i2c.c ****     uint8_t fltReg;
 605:../drivers/fsl_i2c.c **** #endif
 606:../drivers/fsl_i2c.c **** 
 607:../drivers/fsl_i2c.c ****     if (mask & kI2C_GlobalInterruptEnable)
 294              		.loc 1 607 0
 295 0000 4A06     		lsls	r2, r1, #25
 608:../drivers/fsl_i2c.c ****     {
 609:../drivers/fsl_i2c.c ****         base->C1 |= I2C_C1_IICIE_MASK;
 296              		.loc 1 609 0
 297 0002 42BF     		ittt	mi
 298 0004 8378     		ldrbmi	r3, [r0, #2]	@ zero_extendqisi2
 299 0006 43F04003 		orrmi	r3, r3, #64
 300 000a 8370     		strbmi	r3, [r0, #2]
 610:../drivers/fsl_i2c.c ****     }
 611:../drivers/fsl_i2c.c **** 
 612:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 613:../drivers/fsl_i2c.c ****     if (mask & kI2C_StopDetectInterruptEnable)
 614:../drivers/fsl_i2c.c ****     {
 615:../drivers/fsl_i2c.c ****         fltReg = base->FLT;
 616:../drivers/fsl_i2c.c **** 
 617:../drivers/fsl_i2c.c ****         /* Keep STOPF flag. */
 618:../drivers/fsl_i2c.c ****         fltReg &= ~I2C_FLT_STOPF_MASK;
 619:../drivers/fsl_i2c.c **** 
 620:../drivers/fsl_i2c.c ****         /* Stop detect enable. */
 621:../drivers/fsl_i2c.c ****         fltReg |= I2C_FLT_STOPIE_MASK;
 622:../drivers/fsl_i2c.c ****         base->FLT = fltReg;
 623:../drivers/fsl_i2c.c ****     }
 624:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_STOP_DETECT */
 625:../drivers/fsl_i2c.c **** 
 626:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 627:../drivers/fsl_i2c.c ****     if (mask & kI2C_StartStopDetectInterruptEnable)
 301              		.loc 1 627 0
 302 000c 8B06     		lsls	r3, r1, #26
 303              	.LVL27:
 304              	.LBB25:
 305              	.LBB26:
 628:../drivers/fsl_i2c.c ****     {
 629:../drivers/fsl_i2c.c ****         fltReg = base->FLT;
 306              		.loc 1 629 0
 307 000e 41BF     		itttt	mi
 308 0010 8379     		ldrbmi	r3, [r0, #6]	@ zero_extendqisi2
 309              	.LVL28:
 630:../drivers/fsl_i2c.c **** 
 631:../drivers/fsl_i2c.c ****         /* Keep STARTF and STOPF flags. */
 632:../drivers/fsl_i2c.c ****         fltReg &= ~(I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK);
 310              		.loc 1 632 0
 311 0012 03F0AF03 		andmi	r3, r3, #175
 312              	.LVL29:
 633:../drivers/fsl_i2c.c **** 
 634:../drivers/fsl_i2c.c ****         /* Start and stop detect enable. */
 635:../drivers/fsl_i2c.c ****         fltReg |= I2C_FLT_SSIE_MASK;
 313              		.loc 1 635 0
 314 0016 43F02003 		orrmi	r3, r3, #32
 315              	.LVL30:
 636:../drivers/fsl_i2c.c ****         base->FLT = fltReg;
 316              		.loc 1 636 0
 317 001a 8371     		strbmi	r3, [r0, #6]
 318              	.LBE26:
 319              	.LBE25:
 637:../drivers/fsl_i2c.c ****     }
 638:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
 639:../drivers/fsl_i2c.c **** }
 320              		.loc 1 639 0
 321 001c 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE162:
 325              		.section	.text.I2C_DisableInterrupts,"ax",%progbits
 326              		.align	1
 327              		.global	I2C_DisableInterrupts
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	I2C_DisableInterrupts:
 334              	.LFB163:
 640:../drivers/fsl_i2c.c **** 
 641:../drivers/fsl_i2c.c **** void I2C_DisableInterrupts(I2C_Type *base, uint32_t mask)
 642:../drivers/fsl_i2c.c **** {
 335              		.loc 1 642 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL31:
 643:../drivers/fsl_i2c.c ****     if (mask & kI2C_GlobalInterruptEnable)
 341              		.loc 1 643 0
 342 0000 4A06     		lsls	r2, r1, #25
 644:../drivers/fsl_i2c.c ****     {
 645:../drivers/fsl_i2c.c ****         base->C1 &= ~I2C_C1_IICIE_MASK;
 343              		.loc 1 645 0
 344 0002 42BF     		ittt	mi
 345 0004 8378     		ldrbmi	r3, [r0, #2]	@ zero_extendqisi2
 346 0006 03F0BF03 		andmi	r3, r3, #191
 347 000a 8370     		strbmi	r3, [r0, #2]
 646:../drivers/fsl_i2c.c ****     }
 647:../drivers/fsl_i2c.c **** 
 648:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 649:../drivers/fsl_i2c.c ****     if (mask & kI2C_StopDetectInterruptEnable)
 650:../drivers/fsl_i2c.c ****     {
 651:../drivers/fsl_i2c.c ****         base->FLT &= ~(I2C_FLT_STOPIE_MASK | I2C_FLT_STOPF_MASK);
 652:../drivers/fsl_i2c.c ****     }
 653:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_STOP_DETECT */
 654:../drivers/fsl_i2c.c **** 
 655:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 656:../drivers/fsl_i2c.c ****     if (mask & kI2C_StartStopDetectInterruptEnable)
 348              		.loc 1 656 0
 349 000c 8B06     		lsls	r3, r1, #26
 657:../drivers/fsl_i2c.c ****     {
 658:../drivers/fsl_i2c.c ****         base->FLT &= ~(I2C_FLT_SSIE_MASK | I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK);
 350              		.loc 1 658 0
 351 000e 42BF     		ittt	mi
 352 0010 8379     		ldrbmi	r3, [r0, #6]	@ zero_extendqisi2
 353 0012 03F08F03 		andmi	r3, r3, #143
 354 0016 8371     		strbmi	r3, [r0, #6]
 659:../drivers/fsl_i2c.c ****     }
 660:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
 661:../drivers/fsl_i2c.c **** }
 355              		.loc 1 661 0
 356 0018 7047     		bx	lr
 357              		.cfi_endproc
 358              	.LFE163:
 360              		.section	.text.I2C_MasterSetBaudRate,"ax",%progbits
 361              		.align	1
 362              		.global	I2C_MasterSetBaudRate
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 366              		.fpu fpv4-sp-d16
 368              	I2C_MasterSetBaudRate:
 369              	.LFB164:
 662:../drivers/fsl_i2c.c **** 
 663:../drivers/fsl_i2c.c **** void I2C_MasterSetBaudRate(I2C_Type *base, uint32_t baudRate_Bps, uint32_t srcClock_Hz)
 664:../drivers/fsl_i2c.c **** {
 370              		.loc 1 664 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              	.LVL32:
 375 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 376              		.cfi_def_cfa_offset 20
 377              		.cfi_offset 4, -20
 378              		.cfi_offset 5, -16
 379              		.cfi_offset 6, -12
 380              		.cfi_offset 7, -8
 381              		.cfi_offset 14, -4
 382              		.loc 1 664 0
 383 0002 0025     		movs	r5, #0
 665:../drivers/fsl_i2c.c ****     uint32_t multiplier;
 666:../drivers/fsl_i2c.c ****     uint32_t computedRate;
 667:../drivers/fsl_i2c.c ****     uint32_t absError;
 668:../drivers/fsl_i2c.c ****     uint32_t bestError = UINT32_MAX;
 669:../drivers/fsl_i2c.c ****     uint32_t bestMult = 0u;
 670:../drivers/fsl_i2c.c ****     uint32_t bestIcr = 0u;
 671:../drivers/fsl_i2c.c ****     uint8_t mult;
 672:../drivers/fsl_i2c.c ****     uint8_t i;
 673:../drivers/fsl_i2c.c **** 
 674:../drivers/fsl_i2c.c ****     /* Search for the settings with the lowest error. Mult is the MULT field of the I2C_F register,
 675:../drivers/fsl_i2c.c ****      * and ranges from 0-2. It selects the multiplier factor for the divider. */
 676:../drivers/fsl_i2c.c ****     for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
 677:../drivers/fsl_i2c.c ****     {
 678:../drivers/fsl_i2c.c ****         multiplier = 1u << mult;
 679:../drivers/fsl_i2c.c **** 
 680:../drivers/fsl_i2c.c ****         /* Scan table to find best match. */
 681:../drivers/fsl_i2c.c ****         for (i = 0u; i < sizeof(s_i2cDividerTable) / sizeof(uint16_t); ++i)
 682:../drivers/fsl_i2c.c ****         {
 683:../drivers/fsl_i2c.c ****             computedRate = srcClock_Hz / (multiplier * s_i2cDividerTable[i]);
 384              		.loc 1 683 0
 385 0004 DFF854E0 		ldr	lr, .L53
 670:../drivers/fsl_i2c.c ****     uint8_t mult;
 386              		.loc 1 670 0
 387 0008 2F46     		mov	r7, r5
 669:../drivers/fsl_i2c.c ****     uint32_t bestIcr = 0u;
 388              		.loc 1 669 0
 389 000a 2E46     		mov	r6, r5
 668:../drivers/fsl_i2c.c ****     uint32_t bestMult = 0u;
 390              		.loc 1 668 0
 391 000c 4FF0FF3C 		mov	ip, #-1
 392              	.LVL33:
 393              	.L50:
 678:../drivers/fsl_i2c.c **** 
 394              		.loc 1 678 0
 395 0010 0024     		movs	r4, #0
 396              	.LVL34:
 397              	.L46:
 398              		.loc 1 683 0
 399 0012 3EF81430 		ldrh	r3, [lr, r4, lsl #1]
 400 0016 AB40     		lsls	r3, r3, r5
 401 0018 B2FBF3F3 		udiv	r3, r2, r3
 402              	.LVL35:
 684:../drivers/fsl_i2c.c ****             absError = baudRate_Bps > computedRate ? (baudRate_Bps - computedRate) : (computedRate 
 403              		.loc 1 684 0
 404 001c 8B42     		cmp	r3, r1
 405 001e 0ED2     		bcs	.L43
 406              		.loc 1 684 0 is_stmt 0 discriminator 1
 407 0020 CB1A     		subs	r3, r1, r3
 408              	.LVL36:
 685:../drivers/fsl_i2c.c **** 
 686:../drivers/fsl_i2c.c ****             if (absError < bestError)
 409              		.loc 1 686 0 is_stmt 1 discriminator 1
 410 0022 6345     		cmp	r3, ip
 411 0024 0FD3     		bcc	.L51
 412              	.LVL37:
 413              	.L44:
 414 0026 0134     		adds	r4, r4, #1
 415              	.LVL38:
 681:../drivers/fsl_i2c.c ****         {
 416              		.loc 1 681 0 discriminator 2
 417 0028 402C     		cmp	r4, #64
 418 002a F2D1     		bne	.L46
 419              	.LVL39:
 676:../drivers/fsl_i2c.c ****     {
 420              		.loc 1 676 0
 421 002c 022D     		cmp	r5, #2
 422 002e 13D1     		bne	.L47
 423              	.LVL40:
 424              	.L48:
 687:../drivers/fsl_i2c.c ****             {
 688:../drivers/fsl_i2c.c ****                 bestMult = mult;
 425              		.loc 1 688 0
 426 0030 3C46     		mov	r4, r7
 427 0032 3546     		mov	r5, r6
 428              	.LVL41:
 429              	.L49:
 689:../drivers/fsl_i2c.c ****                 bestIcr = i;
 690:../drivers/fsl_i2c.c ****                 bestError = absError;
 691:../drivers/fsl_i2c.c **** 
 692:../drivers/fsl_i2c.c ****                 /* If the error is 0, then we can stop searching because we won't find a better mat
 693:../drivers/fsl_i2c.c ****                 if (absError == 0)
 694:../drivers/fsl_i2c.c ****                 {
 695:../drivers/fsl_i2c.c ****                     break;
 696:../drivers/fsl_i2c.c ****                 }
 697:../drivers/fsl_i2c.c ****             }
 698:../drivers/fsl_i2c.c ****         }
 699:../drivers/fsl_i2c.c ****     }
 700:../drivers/fsl_i2c.c **** 
 701:../drivers/fsl_i2c.c ****     /* Set frequency register based on best settings. */
 702:../drivers/fsl_i2c.c ****     base->F = I2C_F_MULT(bestMult) | I2C_F_ICR(bestIcr);
 430              		.loc 1 702 0
 431 0034 44EA8514 		orr	r4, r4, r5, lsl #6
 432 0038 E4B2     		uxtb	r4, r4
 433 003a 4470     		strb	r4, [r0, #1]
 703:../drivers/fsl_i2c.c **** }
 434              		.loc 1 703 0
 435 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 436              	.LVL42:
 437              	.L43:
 684:../drivers/fsl_i2c.c **** 
 438              		.loc 1 684 0 discriminator 2
 439 003e 5B1A     		subs	r3, r3, r1
 440              	.LVL43:
 686:../drivers/fsl_i2c.c ****             {
 441              		.loc 1 686 0 discriminator 2
 442 0040 6345     		cmp	r3, ip
 443 0042 F0D2     		bcs	.L44
 444              	.LVL44:
 693:../drivers/fsl_i2c.c ****                 {
 445              		.loc 1 693 0
 446 0044 1BB1     		cbz	r3, .L45
 447              	.LVL45:
 448              	.L51:
 689:../drivers/fsl_i2c.c ****                 bestError = absError;
 449              		.loc 1 689 0
 450 0046 2746     		mov	r7, r4
 688:../drivers/fsl_i2c.c ****                 bestIcr = i;
 451              		.loc 1 688 0
 452 0048 2E46     		mov	r6, r5
 686:../drivers/fsl_i2c.c ****             {
 453              		.loc 1 686 0
 454 004a 9C46     		mov	ip, r3
 455 004c EBE7     		b	.L44
 456              	.LVL46:
 457              	.L45:
 676:../drivers/fsl_i2c.c ****     {
 458              		.loc 1 676 0
 459 004e 022D     		cmp	r5, #2
 460 0050 F0D1     		bne	.L49
 689:../drivers/fsl_i2c.c ****                 bestError = absError;
 461              		.loc 1 689 0
 462 0052 2746     		mov	r7, r4
 688:../drivers/fsl_i2c.c ****                 bestIcr = i;
 463              		.loc 1 688 0
 464 0054 2E46     		mov	r6, r5
 465 0056 EBE7     		b	.L48
 466              	.LVL47:
 467              	.L47:
 468 0058 0135     		adds	r5, r5, #1
 469              	.LVL48:
 470 005a D9E7     		b	.L50
 471              	.L54:
 472              		.align	2
 473              	.L53:
 474 005c 00000000 		.word	.LANCHOR3
 475              		.cfi_endproc
 476              	.LFE164:
 478              		.section	.text.I2C_MasterInit,"ax",%progbits
 479              		.align	1
 480              		.global	I2C_MasterInit
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	I2C_MasterInit:
 487              	.LFB159:
 505:../drivers/fsl_i2c.c ****     assert(masterConfig && srcClock_Hz);
 488              		.loc 1 505 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              	.LVL49:
 493 0000 70B5     		push	{r4, r5, r6, lr}
 494              		.cfi_def_cfa_offset 16
 495              		.cfi_offset 4, -16
 496              		.cfi_offset 5, -12
 497              		.cfi_offset 6, -8
 498              		.cfi_offset 14, -4
 505:../drivers/fsl_i2c.c ****     assert(masterConfig && srcClock_Hz);
 499              		.loc 1 505 0
 500 0002 0446     		mov	r4, r0
 501 0004 0D46     		mov	r5, r1
 515:../drivers/fsl_i2c.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 502              		.loc 1 515 0
 503 0006 FFF7FEFF 		bl	I2C_GetInstance
 504              	.LVL50:
 505 000a 1D4B     		ldr	r3, .L56
 506 000c 53F82000 		ldr	r0, [r3, r0, lsl #2]
 507              	.LVL51:
 508              	.LBB31:
 509              	.LBB32:
 694:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 510              		.loc 4 694 0
 511 0010 030C     		lsrs	r3, r0, #16
 512 0012 03F18043 		add	r3, r3, #1073741824
 513 0016 03F58E23 		add	r3, r3, #290816
 695:../drivers/fsl_clock.h **** }
 514              		.loc 4 695 0
 515 001a 80B2     		uxth	r0, r0
 516              	.LVL52:
 517 001c 1E68     		ldr	r6, [r3]
 518 001e 0121     		movs	r1, #1
 519              	.LVL53:
 520 0020 8140     		lsls	r1, r1, r0
 521 0022 3143     		orrs	r1, r1, r6
 522 0024 1960     		str	r1, [r3]
 523              	.LBE32:
 524              	.LBE31:
 519:../drivers/fsl_i2c.c ****     base->F = 0;
 525              		.loc 1 519 0
 526 0026 0023     		movs	r3, #0
 522:../drivers/fsl_i2c.c ****     base->C2 = 0;
 527              		.loc 1 522 0
 528 0028 FF21     		movs	r1, #255
 519:../drivers/fsl_i2c.c ****     base->F = 0;
 529              		.loc 1 519 0
 530 002a 2370     		strb	r3, [r4]
 520:../drivers/fsl_i2c.c ****     base->C1 = 0;
 531              		.loc 1 520 0
 532 002c 6370     		strb	r3, [r4, #1]
 521:../drivers/fsl_i2c.c ****     base->S = 0xFFU;
 533              		.loc 1 521 0
 534 002e A370     		strb	r3, [r4, #2]
 522:../drivers/fsl_i2c.c ****     base->C2 = 0;
 535              		.loc 1 522 0
 536 0030 E170     		strb	r1, [r4, #3]
 525:../drivers/fsl_i2c.c **** #elif defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 537              		.loc 1 525 0
 538 0032 5021     		movs	r1, #80
 523:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 539              		.loc 1 523 0
 540 0034 6371     		strb	r3, [r4, #5]
 525:../drivers/fsl_i2c.c **** #elif defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 541              		.loc 1 525 0
 542 0036 A171     		strb	r1, [r4, #6]
 529:../drivers/fsl_i2c.c **** 
 543              		.loc 1 529 0
 544 0038 E371     		strb	r3, [r4, #7]
 532:../drivers/fsl_i2c.c **** 
 545              		.loc 1 532 0
 546 003a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 547 003c 03F07F03 		and	r3, r3, #127
 548 0040 A370     		strb	r3, [r4, #2]
 549              	.LVL54:
 550              	.LBB33:
 551              	.LBB34:
 397:../drivers/fsl_i2c.h ****     }
 398:../drivers/fsl_i2c.h **** }
 399:../drivers/fsl_i2c.h **** 
 400:../drivers/fsl_i2c.h **** /* @} */
 401:../drivers/fsl_i2c.h **** 
 402:../drivers/fsl_i2c.h **** /*!
 403:../drivers/fsl_i2c.h ****  * @name Status
 404:../drivers/fsl_i2c.h ****  * @{
 405:../drivers/fsl_i2c.h ****  */
 406:../drivers/fsl_i2c.h **** 
 407:../drivers/fsl_i2c.h **** /*!
 408:../drivers/fsl_i2c.h ****  * @brief Gets the I2C status flags.
 409:../drivers/fsl_i2c.h ****  *
 410:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 411:../drivers/fsl_i2c.h ****  * @return status flag, use status flag to AND #_i2c_flags to get the related status.
 412:../drivers/fsl_i2c.h ****  */
 413:../drivers/fsl_i2c.h **** uint32_t I2C_MasterGetStatusFlags(I2C_Type *base);
 414:../drivers/fsl_i2c.h **** 
 415:../drivers/fsl_i2c.h **** /*!
 416:../drivers/fsl_i2c.h ****  * @brief Gets the I2C status flags.
 417:../drivers/fsl_i2c.h ****  *
 418:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 419:../drivers/fsl_i2c.h ****  * @return status flag, use status flag to AND #_i2c_flags to get the related status.
 420:../drivers/fsl_i2c.h ****  */
 421:../drivers/fsl_i2c.h **** static inline uint32_t I2C_SlaveGetStatusFlags(I2C_Type *base)
 422:../drivers/fsl_i2c.h **** {
 423:../drivers/fsl_i2c.h ****     return I2C_MasterGetStatusFlags(base);
 424:../drivers/fsl_i2c.h **** }
 425:../drivers/fsl_i2c.h **** 
 426:../drivers/fsl_i2c.h **** /*!
 427:../drivers/fsl_i2c.h ****  * @brief Clears the I2C status flag state.
 428:../drivers/fsl_i2c.h ****  *
 429:../drivers/fsl_i2c.h ****  * The following status register flags can be cleared kI2C_ArbitrationLostFlag and kI2C_IntPendingF
 430:../drivers/fsl_i2c.h ****  *
 431:../drivers/fsl_i2c.h ****  * @param base I2C base pointer
 432:../drivers/fsl_i2c.h ****  * @param statusMask The status flag mask, defined in type i2c_status_flag_t.
 433:../drivers/fsl_i2c.h ****  *      The parameter can be any combination of the following values:
 434:../drivers/fsl_i2c.h ****  *          @arg kI2C_StartDetectFlag (if available)
 435:../drivers/fsl_i2c.h ****  *          @arg kI2C_StopDetectFlag (if available)
 436:../drivers/fsl_i2c.h ****  *          @arg kI2C_ArbitrationLostFlag
 437:../drivers/fsl_i2c.h ****  *          @arg kI2C_IntPendingFlagFlag
 438:../drivers/fsl_i2c.h ****  */
 439:../drivers/fsl_i2c.h **** static inline void I2C_MasterClearStatusFlags(I2C_Type *base, uint32_t statusMask)
 440:../drivers/fsl_i2c.h **** {
 441:../drivers/fsl_i2c.h **** /* Must clear the STARTF / STOPF bits prior to clearing IICIF */
 442:../drivers/fsl_i2c.h **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 443:../drivers/fsl_i2c.h ****     if (statusMask & kI2C_StartDetectFlag)
 444:../drivers/fsl_i2c.h ****     {
 445:../drivers/fsl_i2c.h ****         /* Shift the odd-ball flags back into place. */
 446:../drivers/fsl_i2c.h ****         base->FLT |= (uint8_t)(statusMask >> 8U);
 552              		.loc 3 446 0
 553 0042 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 554 0044 0B43     		orrs	r3, r3, r1
 555 0046 A371     		strb	r3, [r4, #6]
 447:../drivers/fsl_i2c.h ****     }
 448:../drivers/fsl_i2c.h **** #endif
 449:../drivers/fsl_i2c.h **** 
 450:../drivers/fsl_i2c.h **** #ifdef I2C_HAS_STOP_DETECT
 451:../drivers/fsl_i2c.h ****     if (statusMask & kI2C_StopDetectFlag)
 452:../drivers/fsl_i2c.h ****     {
 453:../drivers/fsl_i2c.h ****         /* Shift the odd-ball flags back into place. */
 454:../drivers/fsl_i2c.h ****         base->FLT |= (uint8_t)(statusMask >> 8U);
 556              		.loc 3 454 0
 557 0048 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 558 004a 0B43     		orrs	r3, r3, r1
 559 004c A371     		strb	r3, [r4, #6]
 455:../drivers/fsl_i2c.h ****     }
 456:../drivers/fsl_i2c.h **** #endif
 457:../drivers/fsl_i2c.h **** 
 458:../drivers/fsl_i2c.h ****     base->S = (uint8_t)statusMask;
 560              		.loc 3 458 0
 561 004e 1223     		movs	r3, #18
 562 0050 E370     		strb	r3, [r4, #3]
 563              	.LVL55:
 564              	.LBE34:
 565              	.LBE33:
 538:../drivers/fsl_i2c.c **** 
 566              		.loc 1 538 0
 567 0052 6968     		ldr	r1, [r5, #4]
 568 0054 2046     		mov	r0, r4
 569 0056 FFF7FEFF 		bl	I2C_MasterSetBaudRate
 570              	.LVL56:
 541:../drivers/fsl_i2c.c **** 
 571              		.loc 1 541 0
 572 005a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 573              	.LVL57:
 546:../drivers/fsl_i2c.c **** #endif
 574              		.loc 1 546 0
 575 005c 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 576              	.LVL58:
 545:../drivers/fsl_i2c.c ****     fltReg |= I2C_FLT_SHEN(masterConfig->enableStopHold);
 577              		.loc 1 545 0
 578 005e 03F07F03 		and	r3, r3, #127
 579              	.LVL59:
 546:../drivers/fsl_i2c.c **** #endif
 580              		.loc 1 546 0
 581 0062 43EAC213 		orr	r3, r3, r2, lsl #7
 582              	.LVL60:
 551:../drivers/fsl_i2c.c **** 
 583              		.loc 1 551 0
 584 0066 2A7A     		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 550:../drivers/fsl_i2c.c ****     fltReg |= I2C_FLT_FLT(masterConfig->glitchFilterWidth);
 585              		.loc 1 550 0
 586 0068 03F0F003 		and	r3, r3, #240
 587              	.LVL61:
 551:../drivers/fsl_i2c.c **** 
 588              		.loc 1 551 0
 589 006c 02F00F02 		and	r2, r2, #15
 590 0070 1343     		orrs	r3, r3, r2
 591              	.LVL62:
 554:../drivers/fsl_i2c.c **** 
 592              		.loc 1 554 0
 593 0072 A371     		strb	r3, [r4, #6]
 563:../drivers/fsl_i2c.c **** }
 594              		.loc 1 563 0
 595 0074 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 596              	.LVL63:
 597 0076 DB01     		lsls	r3, r3, #7
 598 0078 DBB2     		uxtb	r3, r3
 599 007a A370     		strb	r3, [r4, #2]
 600              	.LVL64:
 564:../drivers/fsl_i2c.c **** 
 601              		.loc 1 564 0
 602 007c 70BD     		pop	{r4, r5, r6, pc}
 603              	.LVL65:
 604              	.L57:
 605 007e 00BF     		.align	2
 606              	.L56:
 607 0080 00000000 		.word	.LANCHOR2
 608              		.cfi_endproc
 609              	.LFE159:
 611              		.section	.text.I2C_MasterStop,"ax",%progbits
 612              		.align	1
 613              		.global	I2C_MasterStop
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu fpv4-sp-d16
 619              	I2C_MasterStop:
 620              	.LFB167:
 704:../drivers/fsl_i2c.c **** 
 705:../drivers/fsl_i2c.c **** status_t I2C_MasterStart(I2C_Type *base, uint8_t address, i2c_direction_t direction)
 706:../drivers/fsl_i2c.c **** {
 707:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 708:../drivers/fsl_i2c.c ****     uint32_t statusFlags = I2C_MasterGetStatusFlags(base);
 709:../drivers/fsl_i2c.c **** 
 710:../drivers/fsl_i2c.c ****     /* Return an error if the bus is already in use. */
 711:../drivers/fsl_i2c.c ****     if (statusFlags & kI2C_BusBusyFlag)
 712:../drivers/fsl_i2c.c ****     {
 713:../drivers/fsl_i2c.c ****         result = kStatus_I2C_Busy;
 714:../drivers/fsl_i2c.c ****     }
 715:../drivers/fsl_i2c.c ****     else
 716:../drivers/fsl_i2c.c ****     {
 717:../drivers/fsl_i2c.c ****         /* Send the START signal. */
 718:../drivers/fsl_i2c.c ****         base->C1 |= I2C_C1_MST_MASK | I2C_C1_TX_MASK;
 719:../drivers/fsl_i2c.c **** 
 720:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING
 721:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 722:../drivers/fsl_i2c.c ****         uint32_t waitTimes = I2C_WAIT_TIMEOUT;
 723:../drivers/fsl_i2c.c ****         while ((!(base->S2 & I2C_S2_EMPTY_MASK)) && (--waitTimes))
 724:../drivers/fsl_i2c.c ****         {
 725:../drivers/fsl_i2c.c ****         }
 726:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
 727:../drivers/fsl_i2c.c ****         {
 728:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
 729:../drivers/fsl_i2c.c ****         }
 730:../drivers/fsl_i2c.c **** #else
 731:../drivers/fsl_i2c.c ****         while (!(base->S2 & I2C_S2_EMPTY_MASK))
 732:../drivers/fsl_i2c.c ****         {
 733:../drivers/fsl_i2c.c ****         }
 734:../drivers/fsl_i2c.c **** #endif
 735:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING */
 736:../drivers/fsl_i2c.c **** 
 737:../drivers/fsl_i2c.c ****         base->D = (((uint32_t)address) << 1U | ((direction == kI2C_Read) ? 1U : 0U));
 738:../drivers/fsl_i2c.c ****     }
 739:../drivers/fsl_i2c.c **** 
 740:../drivers/fsl_i2c.c ****     return result;
 741:../drivers/fsl_i2c.c **** }
 742:../drivers/fsl_i2c.c **** 
 743:../drivers/fsl_i2c.c **** status_t I2C_MasterRepeatedStart(I2C_Type *base, uint8_t address, i2c_direction_t direction)
 744:../drivers/fsl_i2c.c **** {
 745:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 746:../drivers/fsl_i2c.c ****     uint8_t savedMult;
 747:../drivers/fsl_i2c.c ****     uint32_t statusFlags = I2C_MasterGetStatusFlags(base);
 748:../drivers/fsl_i2c.c ****     uint8_t timeDelay = 6;
 749:../drivers/fsl_i2c.c **** 
 750:../drivers/fsl_i2c.c ****     /* Return an error if the bus is already in use, but not by us. */
 751:../drivers/fsl_i2c.c ****     if ((statusFlags & kI2C_BusBusyFlag) && ((base->C1 & I2C_C1_MST_MASK) == 0))
 752:../drivers/fsl_i2c.c ****     {
 753:../drivers/fsl_i2c.c ****         result = kStatus_I2C_Busy;
 754:../drivers/fsl_i2c.c ****     }
 755:../drivers/fsl_i2c.c ****     else
 756:../drivers/fsl_i2c.c ****     {
 757:../drivers/fsl_i2c.c ****         savedMult = base->F;
 758:../drivers/fsl_i2c.c ****         base->F = savedMult & (~I2C_F_MULT_MASK);
 759:../drivers/fsl_i2c.c **** 
 760:../drivers/fsl_i2c.c ****         /* We are already in a transfer, so send a repeated start. */
 761:../drivers/fsl_i2c.c ****         base->C1 |= I2C_C1_RSTA_MASK | I2C_C1_TX_MASK;
 762:../drivers/fsl_i2c.c **** 
 763:../drivers/fsl_i2c.c ****         /* Restore the multiplier factor. */
 764:../drivers/fsl_i2c.c ****         base->F = savedMult;
 765:../drivers/fsl_i2c.c **** 
 766:../drivers/fsl_i2c.c ****         /* Add some delay to wait the Re-Start signal. */
 767:../drivers/fsl_i2c.c ****         while (timeDelay--)
 768:../drivers/fsl_i2c.c ****         {
 769:../drivers/fsl_i2c.c ****             __NOP();
 770:../drivers/fsl_i2c.c ****         }
 771:../drivers/fsl_i2c.c **** 
 772:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING
 773:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 774:../drivers/fsl_i2c.c ****         uint32_t waitTimes = I2C_WAIT_TIMEOUT;
 775:../drivers/fsl_i2c.c ****         while ((!(base->S2 & I2C_S2_EMPTY_MASK)) && (--waitTimes))
 776:../drivers/fsl_i2c.c ****         {
 777:../drivers/fsl_i2c.c ****         }
 778:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
 779:../drivers/fsl_i2c.c ****         {
 780:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
 781:../drivers/fsl_i2c.c ****         }
 782:../drivers/fsl_i2c.c **** #else
 783:../drivers/fsl_i2c.c ****         while (!(base->S2 & I2C_S2_EMPTY_MASK))
 784:../drivers/fsl_i2c.c ****         {
 785:../drivers/fsl_i2c.c ****         }
 786:../drivers/fsl_i2c.c **** #endif
 787:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING */
 788:../drivers/fsl_i2c.c **** 
 789:../drivers/fsl_i2c.c ****         base->D = (((uint32_t)address) << 1U | ((direction == kI2C_Read) ? 1U : 0U));
 790:../drivers/fsl_i2c.c ****     }
 791:../drivers/fsl_i2c.c **** 
 792:../drivers/fsl_i2c.c ****     return result;
 793:../drivers/fsl_i2c.c **** }
 794:../drivers/fsl_i2c.c **** 
 795:../drivers/fsl_i2c.c **** status_t I2C_MasterStop(I2C_Type *base)
 796:../drivers/fsl_i2c.c **** {
 621              		.loc 1 796 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626              	.LVL66:
 797:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 798:../drivers/fsl_i2c.c **** 
 799:../drivers/fsl_i2c.c ****     /* Issue the STOP command on the bus. */
 800:../drivers/fsl_i2c.c ****     base->C1 &= ~(I2C_C1_MST_MASK | I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
 627              		.loc 1 800 0
 628 0000 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 629 0002 03F0C703 		and	r3, r3, #199
 630 0006 8370     		strb	r3, [r0, #2]
 631              	.L59:
 801:../drivers/fsl_i2c.c **** 
 802:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 803:../drivers/fsl_i2c.c ****     uint32_t waitTimes = I2C_WAIT_TIMEOUT;
 804:../drivers/fsl_i2c.c ****     /* Wait until bus not busy. */
 805:../drivers/fsl_i2c.c ****     while ((base->S & kI2C_BusBusyFlag) && (--waitTimes))
 806:../drivers/fsl_i2c.c ****     {
 807:../drivers/fsl_i2c.c ****     }
 808:../drivers/fsl_i2c.c **** 
 809:../drivers/fsl_i2c.c ****     if (waitTimes == 0)
 810:../drivers/fsl_i2c.c ****     {
 811:../drivers/fsl_i2c.c ****         result = kStatus_I2C_Timeout;
 812:../drivers/fsl_i2c.c ****     }
 813:../drivers/fsl_i2c.c **** #else
 814:../drivers/fsl_i2c.c ****     /* Wait until data transfer complete. */
 815:../drivers/fsl_i2c.c ****     while (base->S & kI2C_BusBusyFlag)
 632              		.loc 1 815 0 discriminator 1
 633 0008 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 634 000a 13F02003 		ands	r3, r3, #32
 635 000e FBD1     		bne	.L59
 816:../drivers/fsl_i2c.c ****     {
 817:../drivers/fsl_i2c.c ****     }
 818:../drivers/fsl_i2c.c **** #endif
 819:../drivers/fsl_i2c.c **** 
 820:../drivers/fsl_i2c.c ****     return result;
 821:../drivers/fsl_i2c.c **** }
 636              		.loc 1 821 0
 637 0010 1846     		mov	r0, r3
 638              	.LVL67:
 639 0012 7047     		bx	lr
 640              		.cfi_endproc
 641              	.LFE167:
 643              		.section	.text.I2C_MasterGetStatusFlags,"ax",%progbits
 644              		.align	1
 645              		.global	I2C_MasterGetStatusFlags
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu fpv4-sp-d16
 651              	I2C_MasterGetStatusFlags:
 652              	.LFB168:
 822:../drivers/fsl_i2c.c **** 
 823:../drivers/fsl_i2c.c **** uint32_t I2C_MasterGetStatusFlags(I2C_Type *base)
 824:../drivers/fsl_i2c.c **** {
 653              		.loc 1 824 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658              	.LVL68:
 825:../drivers/fsl_i2c.c ****     uint32_t statusFlags = base->S;
 659              		.loc 1 825 0
 660 0000 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 826:../drivers/fsl_i2c.c **** 
 827:../drivers/fsl_i2c.c **** #ifdef I2C_HAS_STOP_DETECT
 828:../drivers/fsl_i2c.c ****     /* Look up the STOPF bit from the filter register. */
 829:../drivers/fsl_i2c.c ****     if (base->FLT & I2C_FLT_STOPF_MASK)
 661              		.loc 1 829 0
 662 0002 8279     		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 663 0004 5106     		lsls	r1, r2, #25
 830:../drivers/fsl_i2c.c ****     {
 831:../drivers/fsl_i2c.c ****         statusFlags |= kI2C_StopDetectFlag;
 832:../drivers/fsl_i2c.c ****     }
 833:../drivers/fsl_i2c.c **** #endif
 834:../drivers/fsl_i2c.c **** 
 835:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 836:../drivers/fsl_i2c.c ****     /* Look up the STARTF bit from the filter register. */
 837:../drivers/fsl_i2c.c ****     if (base->FLT & I2C_FLT_STARTF_MASK)
 664              		.loc 1 837 0
 665 0006 8279     		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 825:../drivers/fsl_i2c.c **** 
 666              		.loc 1 825 0
 667 0008 DBB2     		uxtb	r3, r3
 668              	.LVL69:
 831:../drivers/fsl_i2c.c ****     }
 669              		.loc 1 831 0
 670 000a 48BF     		it	mi
 671 000c 43F48043 		orrmi	r3, r3, #16384
 672              	.LVL70:
 673              		.loc 1 837 0
 674 0010 D206     		lsls	r2, r2, #27
 838:../drivers/fsl_i2c.c ****     {
 839:../drivers/fsl_i2c.c ****         statusFlags |= kI2C_StartDetectFlag;
 675              		.loc 1 839 0
 676 0012 48BF     		it	mi
 677 0014 43F48053 		orrmi	r3, r3, #4096
 678              	.LVL71:
 840:../drivers/fsl_i2c.c ****     }
 841:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
 842:../drivers/fsl_i2c.c **** 
 843:../drivers/fsl_i2c.c ****     return statusFlags;
 844:../drivers/fsl_i2c.c **** }
 679              		.loc 1 844 0
 680 0018 1846     		mov	r0, r3
 681              	.LVL72:
 682 001a 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE168:
 686              		.section	.text.I2C_MasterStart,"ax",%progbits
 687              		.align	1
 688              		.global	I2C_MasterStart
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu fpv4-sp-d16
 694              	I2C_MasterStart:
 695              	.LFB165:
 706:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 696              		.loc 1 706 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              	.LVL73:
 701 0000 70B5     		push	{r4, r5, r6, lr}
 702              		.cfi_def_cfa_offset 16
 703              		.cfi_offset 4, -16
 704              		.cfi_offset 5, -12
 705              		.cfi_offset 6, -8
 706              		.cfi_offset 14, -4
 706:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 707              		.loc 1 706 0
 708 0002 0546     		mov	r5, r0
 709 0004 0C46     		mov	r4, r1
 710 0006 1646     		mov	r6, r2
 708:../drivers/fsl_i2c.c **** 
 711              		.loc 1 708 0
 712 0008 FFF7FEFF 		bl	I2C_MasterGetStatusFlags
 713              	.LVL74:
 711:../drivers/fsl_i2c.c ****     {
 714              		.loc 1 711 0
 715 000c 10F02000 		ands	r0, r0, #32
 716              	.LVL75:
 717 0010 0CD1     		bne	.L72
 718              	.LVL76:
 719              	.LBB37:
 720              	.LBB38:
 718:../drivers/fsl_i2c.c **** 
 721              		.loc 1 718 0
 722 0012 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 737:../drivers/fsl_i2c.c ****     }
 723              		.loc 1 737 0
 724 0014 6400     		lsls	r4, r4, #1
 725              	.LVL77:
 726 0016 012E     		cmp	r6, #1
 727 0018 14BF     		ite	ne
 728 001a 2246     		movne	r2, r4
 729 001c 44F00102 		orreq	r2, r4, #1
 718:../drivers/fsl_i2c.c **** 
 730              		.loc 1 718 0
 731 0020 43F03003 		orr	r3, r3, #48
 737:../drivers/fsl_i2c.c ****     }
 732              		.loc 1 737 0
 733 0024 D2B2     		uxtb	r2, r2
 718:../drivers/fsl_i2c.c **** 
 734              		.loc 1 718 0
 735 0026 AB70     		strb	r3, [r5, #2]
 737:../drivers/fsl_i2c.c ****     }
 736              		.loc 1 737 0
 737 0028 2A71     		strb	r2, [r5, #4]
 738              	.LVL78:
 739              	.L70:
 740              	.LBE38:
 741              	.LBE37:
 741:../drivers/fsl_i2c.c **** 
 742              		.loc 1 741 0
 743 002a 70BD     		pop	{r4, r5, r6, pc}
 744              	.LVL79:
 745              	.L72:
 713:../drivers/fsl_i2c.c ****     }
 746              		.loc 1 713 0
 747 002c 40F24C40 		movw	r0, #1100
 748              	.LVL80:
 740:../drivers/fsl_i2c.c **** }
 749              		.loc 1 740 0
 750 0030 FBE7     		b	.L70
 751              		.cfi_endproc
 752              	.LFE165:
 754              		.section	.text.I2C_MasterRepeatedStart,"ax",%progbits
 755              		.align	1
 756              		.global	I2C_MasterRepeatedStart
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 760              		.fpu fpv4-sp-d16
 762              	I2C_MasterRepeatedStart:
 763              	.LFB166:
 744:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 764              		.loc 1 744 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768              	.LVL81:
 769 0000 70B5     		push	{r4, r5, r6, lr}
 770              		.cfi_def_cfa_offset 16
 771              		.cfi_offset 4, -16
 772              		.cfi_offset 5, -12
 773              		.cfi_offset 6, -8
 774              		.cfi_offset 14, -4
 744:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 775              		.loc 1 744 0
 776 0002 0E46     		mov	r6, r1
 777 0004 0446     		mov	r4, r0
 778 0006 1546     		mov	r5, r2
 747:../drivers/fsl_i2c.c ****     uint8_t timeDelay = 6;
 779              		.loc 1 747 0
 780 0008 FFF7FEFF 		bl	I2C_MasterGetStatusFlags
 781              	.LVL82:
 751:../drivers/fsl_i2c.c ****     {
 782              		.loc 1 751 0
 783 000c 8106     		lsls	r1, r0, #26
 784 000e 02D5     		bpl	.L74
 751:../drivers/fsl_i2c.c ****     {
 785              		.loc 1 751 0 is_stmt 0 discriminator 1
 786 0010 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 787 0012 9A06     		lsls	r2, r3, #26
 788 0014 18D5     		bpl	.L76
 789              	.L74:
 757:../drivers/fsl_i2c.c ****         base->F = savedMult & (~I2C_F_MULT_MASK);
 790              		.loc 1 757 0 is_stmt 1
 791 0016 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 792 0018 DBB2     		uxtb	r3, r3
 793              	.LVL83:
 758:../drivers/fsl_i2c.c **** 
 794              		.loc 1 758 0
 795 001a 03F03F02 		and	r2, r3, #63
 796 001e 6270     		strb	r2, [r4, #1]
 761:../drivers/fsl_i2c.c **** 
 797              		.loc 1 761 0
 798 0020 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 799 0022 42F01402 		orr	r2, r2, #20
 800 0026 A270     		strb	r2, [r4, #2]
 764:../drivers/fsl_i2c.c **** 
 801              		.loc 1 764 0
 802 0028 6370     		strb	r3, [r4, #1]
 803              	.LVL84:
 804              	.LBB41:
 805              	.LBB42:
 769:../drivers/fsl_i2c.c ****         }
 806              		.loc 1 769 0
 807              		.syntax unified
 808              	@ 769 "../drivers/fsl_i2c.c" 1
 809 002a 00BF     		nop
 810              	@ 0 "" 2
 811              	.LVL85:
 812              	@ 769 "../drivers/fsl_i2c.c" 1
 813 002c 00BF     		nop
 814              	@ 0 "" 2
 815              	.LVL86:
 816              	@ 769 "../drivers/fsl_i2c.c" 1
 817 002e 00BF     		nop
 818              	@ 0 "" 2
 819              	.LVL87:
 820              	@ 769 "../drivers/fsl_i2c.c" 1
 821 0030 00BF     		nop
 822              	@ 0 "" 2
 823              	.LVL88:
 824              	@ 769 "../drivers/fsl_i2c.c" 1
 825 0032 00BF     		nop
 826              	@ 0 "" 2
 827              	.LVL89:
 828              	@ 769 "../drivers/fsl_i2c.c" 1
 829 0034 00BF     		nop
 830              	@ 0 "" 2
 831              	.LVL90:
 789:../drivers/fsl_i2c.c ****     }
 832              		.loc 1 789 0
 833              		.thumb
 834              		.syntax unified
 835 0036 6B1E     		subs	r3, r5, #1
 836              	.LVL91:
 837 0038 5D42     		rsbs	r5, r3, #0
 838              	.LVL92:
 839 003a 5D41     		adcs	r5, r5, r3
 840 003c 45EA4601 		orr	r1, r5, r6, lsl #1
 841 0040 C9B2     		uxtb	r1, r1
 842 0042 2171     		strb	r1, [r4, #4]
 843              	.LVL93:
 844 0044 0020     		movs	r0, #0
 845              	.LVL94:
 846              	.L73:
 847              	.LBE42:
 848              	.LBE41:
 793:../drivers/fsl_i2c.c **** 
 849              		.loc 1 793 0
 850 0046 70BD     		pop	{r4, r5, r6, pc}
 851              	.LVL95:
 852              	.L76:
 753:../drivers/fsl_i2c.c ****     }
 853              		.loc 1 753 0
 854 0048 40F24C40 		movw	r0, #1100
 855              	.LVL96:
 792:../drivers/fsl_i2c.c **** }
 856              		.loc 1 792 0
 857 004c FBE7     		b	.L73
 858              		.cfi_endproc
 859              	.LFE166:
 861              		.section	.text.I2C_MasterTransferHandleIRQ,"ax",%progbits
 862              		.align	1
 863              		.global	I2C_MasterTransferHandleIRQ
 864              		.syntax unified
 865              		.thumb
 866              		.thumb_func
 867              		.fpu fpv4-sp-d16
 869              	I2C_MasterTransferHandleIRQ:
 870              	.LFB176:
 845:../drivers/fsl_i2c.c **** 
 846:../drivers/fsl_i2c.c **** status_t I2C_MasterWriteBlocking(I2C_Type *base, const uint8_t *txBuff, size_t txSize, uint32_t fla
 847:../drivers/fsl_i2c.c **** {
 848:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 849:../drivers/fsl_i2c.c ****     uint8_t statusFlags = 0;
 850:../drivers/fsl_i2c.c **** 
 851:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 852:../drivers/fsl_i2c.c ****     uint32_t waitTimes = I2C_WAIT_TIMEOUT;
 853:../drivers/fsl_i2c.c ****     /* Wait until the data register is ready for transmit. */
 854:../drivers/fsl_i2c.c ****     while ((!(base->S & kI2C_TransferCompleteFlag)) && (--waitTimes))
 855:../drivers/fsl_i2c.c ****     {
 856:../drivers/fsl_i2c.c ****     }
 857:../drivers/fsl_i2c.c ****     if (waitTimes == 0)
 858:../drivers/fsl_i2c.c ****     {
 859:../drivers/fsl_i2c.c ****         return kStatus_I2C_Timeout;
 860:../drivers/fsl_i2c.c ****     }
 861:../drivers/fsl_i2c.c **** #else
 862:../drivers/fsl_i2c.c ****     /* Wait until the data register is ready for transmit. */
 863:../drivers/fsl_i2c.c ****     while (!(base->S & kI2C_TransferCompleteFlag))
 864:../drivers/fsl_i2c.c ****     {
 865:../drivers/fsl_i2c.c ****     }
 866:../drivers/fsl_i2c.c **** #endif
 867:../drivers/fsl_i2c.c **** 
 868:../drivers/fsl_i2c.c ****     /* Clear the IICIF flag. */
 869:../drivers/fsl_i2c.c ****     base->S = kI2C_IntPendingFlag;
 870:../drivers/fsl_i2c.c **** 
 871:../drivers/fsl_i2c.c ****     /* Setup the I2C peripheral to transmit data. */
 872:../drivers/fsl_i2c.c ****     base->C1 |= I2C_C1_TX_MASK;
 873:../drivers/fsl_i2c.c **** 
 874:../drivers/fsl_i2c.c ****     while (txSize--)
 875:../drivers/fsl_i2c.c ****     {
 876:../drivers/fsl_i2c.c ****         /* Send a byte of data. */
 877:../drivers/fsl_i2c.c ****         base->D = *txBuff++;
 878:../drivers/fsl_i2c.c **** 
 879:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 880:../drivers/fsl_i2c.c ****         waitTimes = I2C_WAIT_TIMEOUT;
 881:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
 882:../drivers/fsl_i2c.c ****         while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
 883:../drivers/fsl_i2c.c ****         {
 884:../drivers/fsl_i2c.c ****         }
 885:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
 886:../drivers/fsl_i2c.c ****         {
 887:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
 888:../drivers/fsl_i2c.c ****         }
 889:../drivers/fsl_i2c.c **** #else
 890:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
 891:../drivers/fsl_i2c.c ****         while (!(base->S & kI2C_IntPendingFlag))
 892:../drivers/fsl_i2c.c ****         {
 893:../drivers/fsl_i2c.c ****         }
 894:../drivers/fsl_i2c.c **** #endif
 895:../drivers/fsl_i2c.c ****         statusFlags = base->S;
 896:../drivers/fsl_i2c.c **** 
 897:../drivers/fsl_i2c.c ****         /* Clear the IICIF flag. */
 898:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
 899:../drivers/fsl_i2c.c **** 
 900:../drivers/fsl_i2c.c ****         /* Check if arbitration lost or no acknowledgement (NAK), return failure status. */
 901:../drivers/fsl_i2c.c ****         if (statusFlags & kI2C_ArbitrationLostFlag)
 902:../drivers/fsl_i2c.c ****         {
 903:../drivers/fsl_i2c.c ****             base->S = kI2C_ArbitrationLostFlag;
 904:../drivers/fsl_i2c.c ****             result = kStatus_I2C_ArbitrationLost;
 905:../drivers/fsl_i2c.c ****         }
 906:../drivers/fsl_i2c.c **** 
 907:../drivers/fsl_i2c.c ****         if ((statusFlags & kI2C_ReceiveNakFlag) && txSize)
 908:../drivers/fsl_i2c.c ****         {
 909:../drivers/fsl_i2c.c ****             base->S = kI2C_ReceiveNakFlag;
 910:../drivers/fsl_i2c.c ****             result = kStatus_I2C_Nak;
 911:../drivers/fsl_i2c.c ****         }
 912:../drivers/fsl_i2c.c **** 
 913:../drivers/fsl_i2c.c ****         if (result != kStatus_Success)
 914:../drivers/fsl_i2c.c ****         {
 915:../drivers/fsl_i2c.c ****             /* Breaking out of the send loop. */
 916:../drivers/fsl_i2c.c ****             break;
 917:../drivers/fsl_i2c.c ****         }
 918:../drivers/fsl_i2c.c ****     }
 919:../drivers/fsl_i2c.c **** 
 920:../drivers/fsl_i2c.c ****     if (((result == kStatus_Success) && (!(flags & kI2C_TransferNoStopFlag))) || (result == kStatus
 921:../drivers/fsl_i2c.c ****     {
 922:../drivers/fsl_i2c.c ****         /* Clear the IICIF flag. */
 923:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
 924:../drivers/fsl_i2c.c **** 
 925:../drivers/fsl_i2c.c ****         /* Send stop. */
 926:../drivers/fsl_i2c.c ****         result = I2C_MasterStop(base);
 927:../drivers/fsl_i2c.c ****     }
 928:../drivers/fsl_i2c.c **** 
 929:../drivers/fsl_i2c.c ****     return result;
 930:../drivers/fsl_i2c.c **** }
 931:../drivers/fsl_i2c.c **** 
 932:../drivers/fsl_i2c.c **** status_t I2C_MasterReadBlocking(I2C_Type *base, uint8_t *rxBuff, size_t rxSize, uint32_t flags)
 933:../drivers/fsl_i2c.c **** {
 934:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 935:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
 936:../drivers/fsl_i2c.c **** 
 937:../drivers/fsl_i2c.c ****     /* Add this to avoid build warning. */
 938:../drivers/fsl_i2c.c ****     dummy++;
 939:../drivers/fsl_i2c.c **** 
 940:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 941:../drivers/fsl_i2c.c ****     uint32_t waitTimes = I2C_WAIT_TIMEOUT;
 942:../drivers/fsl_i2c.c ****     /* Wait until the data register is ready for transmit. */
 943:../drivers/fsl_i2c.c ****     while ((!(base->S & kI2C_TransferCompleteFlag)) && (--waitTimes))
 944:../drivers/fsl_i2c.c ****     {
 945:../drivers/fsl_i2c.c ****     }
 946:../drivers/fsl_i2c.c ****     if (waitTimes == 0)
 947:../drivers/fsl_i2c.c ****     {
 948:../drivers/fsl_i2c.c ****         return kStatus_I2C_Timeout;
 949:../drivers/fsl_i2c.c ****     }
 950:../drivers/fsl_i2c.c **** #else
 951:../drivers/fsl_i2c.c ****     /* Wait until the data register is ready for transmit. */
 952:../drivers/fsl_i2c.c ****     while (!(base->S & kI2C_TransferCompleteFlag))
 953:../drivers/fsl_i2c.c ****     {
 954:../drivers/fsl_i2c.c ****     }
 955:../drivers/fsl_i2c.c **** #endif
 956:../drivers/fsl_i2c.c **** 
 957:../drivers/fsl_i2c.c ****     /* Clear the IICIF flag. */
 958:../drivers/fsl_i2c.c ****     base->S = kI2C_IntPendingFlag;
 959:../drivers/fsl_i2c.c **** 
 960:../drivers/fsl_i2c.c ****     /* Setup the I2C peripheral to receive data. */
 961:../drivers/fsl_i2c.c ****     base->C1 &= ~(I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
 962:../drivers/fsl_i2c.c **** 
 963:../drivers/fsl_i2c.c ****     /* If rxSize equals 1, configure to send NAK. */
 964:../drivers/fsl_i2c.c ****     if (rxSize == 1)
 965:../drivers/fsl_i2c.c ****     {
 966:../drivers/fsl_i2c.c ****         /* Issue NACK on read. */
 967:../drivers/fsl_i2c.c ****         base->C1 |= I2C_C1_TXAK_MASK;
 968:../drivers/fsl_i2c.c ****     }
 969:../drivers/fsl_i2c.c **** 
 970:../drivers/fsl_i2c.c ****     /* Do dummy read. */
 971:../drivers/fsl_i2c.c ****     dummy = base->D;
 972:../drivers/fsl_i2c.c **** 
 973:../drivers/fsl_i2c.c ****     while ((rxSize--))
 974:../drivers/fsl_i2c.c ****     {
 975:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 976:../drivers/fsl_i2c.c ****         waitTimes = I2C_WAIT_TIMEOUT;
 977:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
 978:../drivers/fsl_i2c.c ****         while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
 979:../drivers/fsl_i2c.c ****         {
 980:../drivers/fsl_i2c.c ****         }
 981:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
 982:../drivers/fsl_i2c.c ****         {
 983:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
 984:../drivers/fsl_i2c.c ****         }
 985:../drivers/fsl_i2c.c **** #else
 986:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
 987:../drivers/fsl_i2c.c ****         while (!(base->S & kI2C_IntPendingFlag))
 988:../drivers/fsl_i2c.c ****         {
 989:../drivers/fsl_i2c.c ****         }
 990:../drivers/fsl_i2c.c **** #endif
 991:../drivers/fsl_i2c.c ****         /* Clear the IICIF flag. */
 992:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
 993:../drivers/fsl_i2c.c **** 
 994:../drivers/fsl_i2c.c ****         /* Single byte use case. */
 995:../drivers/fsl_i2c.c ****         if (rxSize == 0)
 996:../drivers/fsl_i2c.c ****         {
 997:../drivers/fsl_i2c.c ****             if (!(flags & kI2C_TransferNoStopFlag))
 998:../drivers/fsl_i2c.c ****             {
 999:../drivers/fsl_i2c.c ****                 /* Issue STOP command before reading last byte. */
1000:../drivers/fsl_i2c.c ****                 result = I2C_MasterStop(base);
1001:../drivers/fsl_i2c.c ****             }
1002:../drivers/fsl_i2c.c ****             else
1003:../drivers/fsl_i2c.c ****             {
1004:../drivers/fsl_i2c.c ****                 /* Change direction to Tx to avoid extra clocks. */
1005:../drivers/fsl_i2c.c ****                 base->C1 |= I2C_C1_TX_MASK;
1006:../drivers/fsl_i2c.c ****             }
1007:../drivers/fsl_i2c.c ****         }
1008:../drivers/fsl_i2c.c **** 
1009:../drivers/fsl_i2c.c ****         if (rxSize == 1)
1010:../drivers/fsl_i2c.c ****         {
1011:../drivers/fsl_i2c.c ****             /* Issue NACK on read. */
1012:../drivers/fsl_i2c.c ****             base->C1 |= I2C_C1_TXAK_MASK;
1013:../drivers/fsl_i2c.c ****         }
1014:../drivers/fsl_i2c.c **** 
1015:../drivers/fsl_i2c.c ****         /* Read from the data register. */
1016:../drivers/fsl_i2c.c ****         *rxBuff++ = base->D;
1017:../drivers/fsl_i2c.c ****     }
1018:../drivers/fsl_i2c.c **** 
1019:../drivers/fsl_i2c.c ****     return result;
1020:../drivers/fsl_i2c.c **** }
1021:../drivers/fsl_i2c.c **** 
1022:../drivers/fsl_i2c.c **** status_t I2C_MasterTransferBlocking(I2C_Type *base, i2c_master_transfer_t *xfer)
1023:../drivers/fsl_i2c.c **** {
1024:../drivers/fsl_i2c.c ****     assert(xfer);
1025:../drivers/fsl_i2c.c **** 
1026:../drivers/fsl_i2c.c ****     i2c_direction_t direction = xfer->direction;
1027:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
1028:../drivers/fsl_i2c.c **** 
1029:../drivers/fsl_i2c.c ****     /* Clear all status before transfer. */
1030:../drivers/fsl_i2c.c ****     I2C_MasterClearStatusFlags(base, kClearFlags);
1031:../drivers/fsl_i2c.c **** 
1032:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1033:../drivers/fsl_i2c.c ****     uint32_t waitTimes = I2C_WAIT_TIMEOUT;
1034:../drivers/fsl_i2c.c ****     /* Wait until the data register is ready for transmit. */
1035:../drivers/fsl_i2c.c ****     while ((!(base->S & kI2C_TransferCompleteFlag)) && (--waitTimes))
1036:../drivers/fsl_i2c.c ****     {
1037:../drivers/fsl_i2c.c ****     }
1038:../drivers/fsl_i2c.c ****     if (waitTimes == 0)
1039:../drivers/fsl_i2c.c ****     {
1040:../drivers/fsl_i2c.c ****         return kStatus_I2C_Timeout;
1041:../drivers/fsl_i2c.c ****     }
1042:../drivers/fsl_i2c.c **** #else
1043:../drivers/fsl_i2c.c ****     /* Wait until the data register is ready for transmit. */
1044:../drivers/fsl_i2c.c ****     while (!(base->S & kI2C_TransferCompleteFlag))
1045:../drivers/fsl_i2c.c ****     {
1046:../drivers/fsl_i2c.c ****     }
1047:../drivers/fsl_i2c.c **** #endif
1048:../drivers/fsl_i2c.c **** 
1049:../drivers/fsl_i2c.c ****     /* Change to send write address when it's a read operation with command. */
1050:../drivers/fsl_i2c.c ****     if ((xfer->subaddressSize > 0) && (xfer->direction == kI2C_Read))
1051:../drivers/fsl_i2c.c ****     {
1052:../drivers/fsl_i2c.c ****         direction = kI2C_Write;
1053:../drivers/fsl_i2c.c ****     }
1054:../drivers/fsl_i2c.c **** 
1055:../drivers/fsl_i2c.c ****     /* Handle no start option, only support write with no start signal. */
1056:../drivers/fsl_i2c.c ****     if (xfer->flags & kI2C_TransferNoStartFlag)
1057:../drivers/fsl_i2c.c ****     {
1058:../drivers/fsl_i2c.c ****         if (direction == kI2C_Read)
1059:../drivers/fsl_i2c.c ****         {
1060:../drivers/fsl_i2c.c ****             return kStatus_InvalidArgument;
1061:../drivers/fsl_i2c.c ****         }
1062:../drivers/fsl_i2c.c ****     }
1063:../drivers/fsl_i2c.c ****     /* If repeated start is requested, send repeated start. */
1064:../drivers/fsl_i2c.c ****     else if (xfer->flags & kI2C_TransferRepeatedStartFlag)
1065:../drivers/fsl_i2c.c ****     {
1066:../drivers/fsl_i2c.c ****         result = I2C_MasterRepeatedStart(base, xfer->slaveAddress, direction);
1067:../drivers/fsl_i2c.c ****     }
1068:../drivers/fsl_i2c.c ****     else /* For normal transfer, send start. */
1069:../drivers/fsl_i2c.c ****     {
1070:../drivers/fsl_i2c.c ****         result = I2C_MasterStart(base, xfer->slaveAddress, direction);
1071:../drivers/fsl_i2c.c ****     }
1072:../drivers/fsl_i2c.c **** 
1073:../drivers/fsl_i2c.c ****     if (!(xfer->flags & kI2C_TransferNoStartFlag))
1074:../drivers/fsl_i2c.c ****     {
1075:../drivers/fsl_i2c.c ****         /* Return if error. */
1076:../drivers/fsl_i2c.c ****         if (result)
1077:../drivers/fsl_i2c.c ****         {
1078:../drivers/fsl_i2c.c ****             return result;
1079:../drivers/fsl_i2c.c ****         }
1080:../drivers/fsl_i2c.c **** 
1081:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1082:../drivers/fsl_i2c.c ****         waitTimes = I2C_WAIT_TIMEOUT;
1083:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1084:../drivers/fsl_i2c.c ****         while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
1085:../drivers/fsl_i2c.c ****         {
1086:../drivers/fsl_i2c.c ****         }
1087:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
1088:../drivers/fsl_i2c.c ****         {
1089:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
1090:../drivers/fsl_i2c.c ****         }
1091:../drivers/fsl_i2c.c **** #else
1092:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1093:../drivers/fsl_i2c.c ****         while (!(base->S & kI2C_IntPendingFlag))
1094:../drivers/fsl_i2c.c ****         {
1095:../drivers/fsl_i2c.c ****         }
1096:../drivers/fsl_i2c.c **** #endif
1097:../drivers/fsl_i2c.c ****         /* Check if there's transfer error. */
1098:../drivers/fsl_i2c.c ****         result = I2C_CheckAndClearError(base, base->S);
1099:../drivers/fsl_i2c.c **** 
1100:../drivers/fsl_i2c.c ****         /* Return if error. */
1101:../drivers/fsl_i2c.c ****         if (result)
1102:../drivers/fsl_i2c.c ****         {
1103:../drivers/fsl_i2c.c ****             if (result == kStatus_I2C_Nak)
1104:../drivers/fsl_i2c.c ****             {
1105:../drivers/fsl_i2c.c ****                 result = kStatus_I2C_Addr_Nak;
1106:../drivers/fsl_i2c.c **** 
1107:../drivers/fsl_i2c.c ****                 I2C_MasterStop(base);
1108:../drivers/fsl_i2c.c ****             }
1109:../drivers/fsl_i2c.c **** 
1110:../drivers/fsl_i2c.c ****             return result;
1111:../drivers/fsl_i2c.c ****         }
1112:../drivers/fsl_i2c.c ****     }
1113:../drivers/fsl_i2c.c **** 
1114:../drivers/fsl_i2c.c ****     /* Send subaddress. */
1115:../drivers/fsl_i2c.c ****     if (xfer->subaddressSize)
1116:../drivers/fsl_i2c.c ****     {
1117:../drivers/fsl_i2c.c ****         do
1118:../drivers/fsl_i2c.c ****         {
1119:../drivers/fsl_i2c.c ****             /* Clear interrupt pending flag. */
1120:../drivers/fsl_i2c.c ****             base->S = kI2C_IntPendingFlag;
1121:../drivers/fsl_i2c.c **** 
1122:../drivers/fsl_i2c.c ****             xfer->subaddressSize--;
1123:../drivers/fsl_i2c.c ****             base->D = ((xfer->subaddress) >> (8 * xfer->subaddressSize));
1124:../drivers/fsl_i2c.c **** 
1125:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1126:../drivers/fsl_i2c.c ****             waitTimes = I2C_WAIT_TIMEOUT;
1127:../drivers/fsl_i2c.c ****             /* Wait until data transfer complete. */
1128:../drivers/fsl_i2c.c ****             while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
1129:../drivers/fsl_i2c.c ****             {
1130:../drivers/fsl_i2c.c ****             }
1131:../drivers/fsl_i2c.c ****             if (waitTimes == 0)
1132:../drivers/fsl_i2c.c ****             {
1133:../drivers/fsl_i2c.c ****                 return kStatus_I2C_Timeout;
1134:../drivers/fsl_i2c.c ****             }
1135:../drivers/fsl_i2c.c **** #else
1136:../drivers/fsl_i2c.c ****             /* Wait until data transfer complete. */
1137:../drivers/fsl_i2c.c ****             while (!(base->S & kI2C_IntPendingFlag))
1138:../drivers/fsl_i2c.c ****             {
1139:../drivers/fsl_i2c.c ****             }
1140:../drivers/fsl_i2c.c **** #endif
1141:../drivers/fsl_i2c.c **** 
1142:../drivers/fsl_i2c.c ****             /* Check if there's transfer error. */
1143:../drivers/fsl_i2c.c ****             result = I2C_CheckAndClearError(base, base->S);
1144:../drivers/fsl_i2c.c **** 
1145:../drivers/fsl_i2c.c ****             if (result)
1146:../drivers/fsl_i2c.c ****             {
1147:../drivers/fsl_i2c.c ****                 if (result == kStatus_I2C_Nak)
1148:../drivers/fsl_i2c.c ****                 {
1149:../drivers/fsl_i2c.c ****                     I2C_MasterStop(base);
1150:../drivers/fsl_i2c.c ****                 }
1151:../drivers/fsl_i2c.c **** 
1152:../drivers/fsl_i2c.c ****                 return result;
1153:../drivers/fsl_i2c.c ****             }
1154:../drivers/fsl_i2c.c **** 
1155:../drivers/fsl_i2c.c ****         } while ((xfer->subaddressSize > 0) && (result == kStatus_Success));
1156:../drivers/fsl_i2c.c **** 
1157:../drivers/fsl_i2c.c ****         if (xfer->direction == kI2C_Read)
1158:../drivers/fsl_i2c.c ****         {
1159:../drivers/fsl_i2c.c ****             /* Clear pending flag. */
1160:../drivers/fsl_i2c.c ****             base->S = kI2C_IntPendingFlag;
1161:../drivers/fsl_i2c.c **** 
1162:../drivers/fsl_i2c.c ****             /* Send repeated start and slave address. */
1163:../drivers/fsl_i2c.c ****             result = I2C_MasterRepeatedStart(base, xfer->slaveAddress, kI2C_Read);
1164:../drivers/fsl_i2c.c **** 
1165:../drivers/fsl_i2c.c ****             /* Return if error. */
1166:../drivers/fsl_i2c.c ****             if (result)
1167:../drivers/fsl_i2c.c ****             {
1168:../drivers/fsl_i2c.c ****                 return result;
1169:../drivers/fsl_i2c.c ****             }
1170:../drivers/fsl_i2c.c **** 
1171:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1172:../drivers/fsl_i2c.c ****             waitTimes = I2C_WAIT_TIMEOUT;
1173:../drivers/fsl_i2c.c ****             /* Wait until data transfer complete. */
1174:../drivers/fsl_i2c.c ****             while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
1175:../drivers/fsl_i2c.c ****             {
1176:../drivers/fsl_i2c.c ****             }
1177:../drivers/fsl_i2c.c ****             if (waitTimes == 0)
1178:../drivers/fsl_i2c.c ****             {
1179:../drivers/fsl_i2c.c ****                 return kStatus_I2C_Timeout;
1180:../drivers/fsl_i2c.c ****             }
1181:../drivers/fsl_i2c.c **** #else
1182:../drivers/fsl_i2c.c ****             /* Wait until data transfer complete. */
1183:../drivers/fsl_i2c.c ****             while (!(base->S & kI2C_IntPendingFlag))
1184:../drivers/fsl_i2c.c ****             {
1185:../drivers/fsl_i2c.c ****             }
1186:../drivers/fsl_i2c.c **** #endif
1187:../drivers/fsl_i2c.c **** 
1188:../drivers/fsl_i2c.c ****             /* Check if there's transfer error. */
1189:../drivers/fsl_i2c.c ****             result = I2C_CheckAndClearError(base, base->S);
1190:../drivers/fsl_i2c.c **** 
1191:../drivers/fsl_i2c.c ****             if (result)
1192:../drivers/fsl_i2c.c ****             {
1193:../drivers/fsl_i2c.c ****                 if (result == kStatus_I2C_Nak)
1194:../drivers/fsl_i2c.c ****                 {
1195:../drivers/fsl_i2c.c ****                     result = kStatus_I2C_Addr_Nak;
1196:../drivers/fsl_i2c.c **** 
1197:../drivers/fsl_i2c.c ****                     I2C_MasterStop(base);
1198:../drivers/fsl_i2c.c ****                 }
1199:../drivers/fsl_i2c.c **** 
1200:../drivers/fsl_i2c.c ****                 return result;
1201:../drivers/fsl_i2c.c ****             }
1202:../drivers/fsl_i2c.c ****         }
1203:../drivers/fsl_i2c.c ****     }
1204:../drivers/fsl_i2c.c **** 
1205:../drivers/fsl_i2c.c ****     /* Transmit data. */
1206:../drivers/fsl_i2c.c ****     if ((xfer->direction == kI2C_Write) && (xfer->dataSize > 0))
1207:../drivers/fsl_i2c.c ****     {
1208:../drivers/fsl_i2c.c ****         /* Send Data. */
1209:../drivers/fsl_i2c.c ****         result = I2C_MasterWriteBlocking(base, xfer->data, xfer->dataSize, xfer->flags);
1210:../drivers/fsl_i2c.c ****     }
1211:../drivers/fsl_i2c.c **** 
1212:../drivers/fsl_i2c.c ****     /* Receive Data. */
1213:../drivers/fsl_i2c.c ****     if ((xfer->direction == kI2C_Read) && (xfer->dataSize > 0))
1214:../drivers/fsl_i2c.c ****     {
1215:../drivers/fsl_i2c.c ****         result = I2C_MasterReadBlocking(base, xfer->data, xfer->dataSize, xfer->flags);
1216:../drivers/fsl_i2c.c ****     }
1217:../drivers/fsl_i2c.c **** 
1218:../drivers/fsl_i2c.c ****     return result;
1219:../drivers/fsl_i2c.c **** }
1220:../drivers/fsl_i2c.c **** 
1221:../drivers/fsl_i2c.c **** void I2C_MasterTransferCreateHandle(I2C_Type *base,
1222:../drivers/fsl_i2c.c ****                                     i2c_master_handle_t *handle,
1223:../drivers/fsl_i2c.c ****                                     i2c_master_transfer_callback_t callback,
1224:../drivers/fsl_i2c.c ****                                     void *userData)
1225:../drivers/fsl_i2c.c **** {
1226:../drivers/fsl_i2c.c ****     assert(handle);
1227:../drivers/fsl_i2c.c **** 
1228:../drivers/fsl_i2c.c ****     uint32_t instance = I2C_GetInstance(base);
1229:../drivers/fsl_i2c.c **** 
1230:../drivers/fsl_i2c.c ****     /* Zero handle. */
1231:../drivers/fsl_i2c.c ****     memset(handle, 0, sizeof(*handle));
1232:../drivers/fsl_i2c.c **** 
1233:../drivers/fsl_i2c.c ****     /* Set callback and userData. */
1234:../drivers/fsl_i2c.c ****     handle->completionCallback = callback;
1235:../drivers/fsl_i2c.c ****     handle->userData = userData;
1236:../drivers/fsl_i2c.c **** 
1237:../drivers/fsl_i2c.c ****     /* Save the context in global variables to support the double weak mechanism. */
1238:../drivers/fsl_i2c.c ****     s_i2cHandle[instance] = handle;
1239:../drivers/fsl_i2c.c **** 
1240:../drivers/fsl_i2c.c ****     /* Save master interrupt handler. */
1241:../drivers/fsl_i2c.c ****     s_i2cMasterIsr = I2C_MasterTransferHandleIRQ;
1242:../drivers/fsl_i2c.c **** 
1243:../drivers/fsl_i2c.c ****     /* Enable NVIC interrupt. */
1244:../drivers/fsl_i2c.c ****     EnableIRQ(s_i2cIrqs[instance]);
1245:../drivers/fsl_i2c.c **** }
1246:../drivers/fsl_i2c.c **** 
1247:../drivers/fsl_i2c.c **** status_t I2C_MasterTransferNonBlocking(I2C_Type *base, i2c_master_handle_t *handle, i2c_master_tran
1248:../drivers/fsl_i2c.c **** {
1249:../drivers/fsl_i2c.c ****     assert(handle);
1250:../drivers/fsl_i2c.c ****     assert(xfer);
1251:../drivers/fsl_i2c.c **** 
1252:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
1253:../drivers/fsl_i2c.c **** 
1254:../drivers/fsl_i2c.c ****     /* Check if the I2C bus is idle - if not return busy status. */
1255:../drivers/fsl_i2c.c ****     if (handle->state != kIdleState)
1256:../drivers/fsl_i2c.c ****     {
1257:../drivers/fsl_i2c.c ****         result = kStatus_I2C_Busy;
1258:../drivers/fsl_i2c.c ****     }
1259:../drivers/fsl_i2c.c ****     else
1260:../drivers/fsl_i2c.c ****     {
1261:../drivers/fsl_i2c.c ****         /* Start up the master transfer state machine. */
1262:../drivers/fsl_i2c.c ****         result = I2C_InitTransferStateMachine(base, handle, xfer);
1263:../drivers/fsl_i2c.c **** 
1264:../drivers/fsl_i2c.c ****         if (result == kStatus_Success)
1265:../drivers/fsl_i2c.c ****         {
1266:../drivers/fsl_i2c.c ****             /* Enable the I2C interrupts. */
1267:../drivers/fsl_i2c.c ****             I2C_EnableInterrupts(base, kI2C_GlobalInterruptEnable);
1268:../drivers/fsl_i2c.c ****         }
1269:../drivers/fsl_i2c.c ****     }
1270:../drivers/fsl_i2c.c **** 
1271:../drivers/fsl_i2c.c ****     return result;
1272:../drivers/fsl_i2c.c **** }
1273:../drivers/fsl_i2c.c **** 
1274:../drivers/fsl_i2c.c **** status_t I2C_MasterTransferAbort(I2C_Type *base, i2c_master_handle_t *handle)
1275:../drivers/fsl_i2c.c **** {
1276:../drivers/fsl_i2c.c ****     assert(handle);
1277:../drivers/fsl_i2c.c **** 
1278:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
1279:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1280:../drivers/fsl_i2c.c ****     uint32_t waitTimes = I2C_WAIT_TIMEOUT;
1281:../drivers/fsl_i2c.c **** #endif
1282:../drivers/fsl_i2c.c **** 
1283:../drivers/fsl_i2c.c ****     /* Add this to avoid build warning. */
1284:../drivers/fsl_i2c.c ****     dummy++;
1285:../drivers/fsl_i2c.c **** 
1286:../drivers/fsl_i2c.c ****     /* Disable interrupt. */
1287:../drivers/fsl_i2c.c ****     I2C_DisableInterrupts(base, kI2C_GlobalInterruptEnable);
1288:../drivers/fsl_i2c.c **** 
1289:../drivers/fsl_i2c.c ****     /* Reset the state to idle. */
1290:../drivers/fsl_i2c.c ****     handle->state = kIdleState;
1291:../drivers/fsl_i2c.c **** 
1292:../drivers/fsl_i2c.c ****     /* If the bus is already in use, but not by us */
1293:../drivers/fsl_i2c.c ****     if (!(base->C1 & I2C_C1_MST_MASK))
1294:../drivers/fsl_i2c.c ****     {
1295:../drivers/fsl_i2c.c ****         return kStatus_I2C_Busy;
1296:../drivers/fsl_i2c.c ****     }
1297:../drivers/fsl_i2c.c **** 
1298:../drivers/fsl_i2c.c ****     /* Send STOP signal. */
1299:../drivers/fsl_i2c.c ****     if (handle->transfer.direction == kI2C_Read)
1300:../drivers/fsl_i2c.c ****     {
1301:../drivers/fsl_i2c.c ****         base->C1 |= I2C_C1_TXAK_MASK;
1302:../drivers/fsl_i2c.c **** 
1303:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1304:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1305:../drivers/fsl_i2c.c ****         while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
1306:../drivers/fsl_i2c.c ****         {
1307:../drivers/fsl_i2c.c ****         }
1308:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
1309:../drivers/fsl_i2c.c ****         {
1310:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
1311:../drivers/fsl_i2c.c ****         }
1312:../drivers/fsl_i2c.c **** #else
1313:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1314:../drivers/fsl_i2c.c ****         while (!(base->S & kI2C_IntPendingFlag))
1315:../drivers/fsl_i2c.c ****         {
1316:../drivers/fsl_i2c.c ****         }
1317:../drivers/fsl_i2c.c **** #endif
1318:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
1319:../drivers/fsl_i2c.c **** 
1320:../drivers/fsl_i2c.c ****         base->C1 &= ~(I2C_C1_MST_MASK | I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
1321:../drivers/fsl_i2c.c ****         dummy = base->D;
1322:../drivers/fsl_i2c.c ****     }
1323:../drivers/fsl_i2c.c ****     else
1324:../drivers/fsl_i2c.c ****     {
1325:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1326:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1327:../drivers/fsl_i2c.c ****         while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
1328:../drivers/fsl_i2c.c ****         {
1329:../drivers/fsl_i2c.c ****         }
1330:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
1331:../drivers/fsl_i2c.c ****         {
1332:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
1333:../drivers/fsl_i2c.c ****         }
1334:../drivers/fsl_i2c.c **** #else
1335:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1336:../drivers/fsl_i2c.c ****         while (!(base->S & kI2C_IntPendingFlag))
1337:../drivers/fsl_i2c.c ****         {
1338:../drivers/fsl_i2c.c ****         }
1339:../drivers/fsl_i2c.c **** #endif
1340:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
1341:../drivers/fsl_i2c.c ****         base->C1 &= ~(I2C_C1_MST_MASK | I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
1342:../drivers/fsl_i2c.c ****     }
1343:../drivers/fsl_i2c.c **** 
1344:../drivers/fsl_i2c.c ****     return kStatus_Success;
1345:../drivers/fsl_i2c.c **** }
1346:../drivers/fsl_i2c.c **** 
1347:../drivers/fsl_i2c.c **** status_t I2C_MasterTransferGetCount(I2C_Type *base, i2c_master_handle_t *handle, size_t *count)
1348:../drivers/fsl_i2c.c **** {
1349:../drivers/fsl_i2c.c ****     assert(handle);
1350:../drivers/fsl_i2c.c **** 
1351:../drivers/fsl_i2c.c ****     if (!count)
1352:../drivers/fsl_i2c.c ****     {
1353:../drivers/fsl_i2c.c ****         return kStatus_InvalidArgument;
1354:../drivers/fsl_i2c.c ****     }
1355:../drivers/fsl_i2c.c **** 
1356:../drivers/fsl_i2c.c ****     *count = handle->transferSize - handle->transfer.dataSize;
1357:../drivers/fsl_i2c.c **** 
1358:../drivers/fsl_i2c.c ****     return kStatus_Success;
1359:../drivers/fsl_i2c.c **** }
1360:../drivers/fsl_i2c.c **** 
1361:../drivers/fsl_i2c.c **** void I2C_MasterTransferHandleIRQ(I2C_Type *base, void *i2cHandle)
1362:../drivers/fsl_i2c.c **** {
 871              		.loc 1 1362 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 8
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              	.LVL97:
 876 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 877              		.cfi_def_cfa_offset 32
 878              		.cfi_offset 4, -20
 879              		.cfi_offset 5, -16
 880              		.cfi_offset 6, -12
 881              		.cfi_offset 7, -8
 882              		.cfi_offset 14, -4
1363:../drivers/fsl_i2c.c ****     assert(i2cHandle);
1364:../drivers/fsl_i2c.c **** 
1365:../drivers/fsl_i2c.c ****     i2c_master_handle_t *handle = (i2c_master_handle_t *)i2cHandle;
1366:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
1367:../drivers/fsl_i2c.c ****     bool isDone;
1368:../drivers/fsl_i2c.c **** 
1369:../drivers/fsl_i2c.c ****     /* Clear the interrupt flag. */
1370:../drivers/fsl_i2c.c ****     base->S = kI2C_IntPendingFlag;
 883              		.loc 1 1370 0
 884 0002 0223     		movs	r3, #2
 885 0004 C370     		strb	r3, [r0, #3]
 886              	.LVL98:
 887              	.LBB45:
 888              	.LBB46:
 333:../drivers/fsl_i2c.c ****                      ((handle->state == kReceiveDataState) && (handle->transfer.dataSize == 1U));
 889              		.loc 1 333 0
 890 0006 0B7F     		ldrb	r3, [r1, #28]	@ zero_extendqisi2
 330:../drivers/fsl_i2c.c ****     *isDone = false;
 891              		.loc 1 330 0
 892 0008 C778     		ldrb	r7, [r0, #3]	@ zero_extendqisi2
 332:../drivers/fsl_i2c.c ****     bool ignoreNak = ((handle->state == kSendDataState) && (handle->transfer.dataSize == 0U)) ||
 893              		.loc 1 332 0
 894 000a 0022     		movs	r2, #0
 333:../drivers/fsl_i2c.c ****                      ((handle->state == kReceiveDataState) && (handle->transfer.dataSize == 1U));
 895              		.loc 1 333 0
 896 000c 032B     		cmp	r3, #3
 897              	.LBE46:
 898              	.LBE45:
1362:../drivers/fsl_i2c.c ****     assert(i2cHandle);
 899              		.loc 1 1362 0
 900 000e 0546     		mov	r5, r0
 901 0010 0C46     		mov	r4, r1
 902              	.LBB52:
 903              	.LBB47:
 330:../drivers/fsl_i2c.c ****     *isDone = false;
 904              		.loc 1 330 0
 905 0012 FFB2     		uxtb	r7, r7
 906              	.LVL99:
 332:../drivers/fsl_i2c.c ****     bool ignoreNak = ((handle->state == kSendDataState) && (handle->transfer.dataSize == 0U)) ||
 907              		.loc 1 332 0
 908 0014 8DF80720 		strb	r2, [sp, #7]
 333:../drivers/fsl_i2c.c ****                      ((handle->state == kReceiveDataState) && (handle->transfer.dataSize == 1U));
 909              		.loc 1 333 0
 910 0018 47D1     		bne	.L81
 911 001a 4A69     		ldr	r2, [r1, #20]
 912 001c B2FA82F2 		clz	r2, r2
 913 0020 5209     		lsrs	r2, r2, #5
 914              	.L82:
 915              	.LVL100:
 337:../drivers/fsl_i2c.c **** 
 916              		.loc 1 337 0
 917 0022 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 918 0026 0133     		adds	r3, r3, #1
 919 0028 DBB2     		uxtb	r3, r3
 340:../drivers/fsl_i2c.c **** 
 920              		.loc 1 340 0
 921 002a 3946     		mov	r1, r7
 922              	.LVL101:
 923 002c 2846     		mov	r0, r5
 924              	.LVL102:
 337:../drivers/fsl_i2c.c **** 
 925              		.loc 1 337 0
 926 002e 8DF80730 		strb	r3, [sp, #7]
 340:../drivers/fsl_i2c.c **** 
 927              		.loc 1 340 0
 928 0032 FFF7FEFF 		bl	I2C_CheckAndClearError
 929              	.LVL103:
 343:../drivers/fsl_i2c.c ****     {
 930              		.loc 1 343 0
 931 0036 40F24E43 		movw	r3, #1102
 932 003a 9842     		cmp	r0, r3
 340:../drivers/fsl_i2c.c **** 
 933              		.loc 1 340 0
 934 003c 0646     		mov	r6, r0
 935              	.LVL104:
 343:../drivers/fsl_i2c.c ****     {
 936              		.loc 1 343 0
 937 003e 02D1     		bne	.L83
 938              	.LVL105:
 345:../drivers/fsl_i2c.c ****     }
 939              		.loc 1 345 0
 940 0040 002A     		cmp	r2, #0
 941 0042 18BF     		it	ne
 942 0044 0026     		movne	r6, #0
 943              	.L83:
 944              	.LVL106:
 350:../drivers/fsl_i2c.c ****     {
 945              		.loc 1 350 0
 946 0046 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 947 0048 012B     		cmp	r3, #1
 948 004a 55D1     		bne	.L84
 352:../drivers/fsl_i2c.c ****         {
 949              		.loc 1 352 0
 950 004c F807     		lsls	r0, r7, #31
 951 004e 00F1B480 		bmi	.L107
 358:../drivers/fsl_i2c.c ****             {
 952              		.loc 1 358 0
 953 0052 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 954 0054 83B3     		cbz	r3, .L86
 360:../drivers/fsl_i2c.c ****             }
 955              		.loc 1 360 0
 956 0056 0223     		movs	r3, #2
 957 0058 2377     		strb	r3, [r4, #28]
 378:../drivers/fsl_i2c.c ****     {
 958              		.loc 1 378 0
 959 005a 002E     		cmp	r6, #0
 960 005c 5CD0     		beq	.L87
 961              	.LVL107:
 962              	.L85:
 963              	.LBE47:
 964              	.LBE52:
1371:../drivers/fsl_i2c.c **** 
1372:../drivers/fsl_i2c.c ****     /* Check transfer complete flag. */
1373:../drivers/fsl_i2c.c ****     result = I2C_MasterTransferRunStateMachine(base, handle, &isDone);
1374:../drivers/fsl_i2c.c **** 
1375:../drivers/fsl_i2c.c ****     if (isDone || result)
1376:../drivers/fsl_i2c.c ****     {
1377:../drivers/fsl_i2c.c ****         /* Send stop command if transfer done or received Nak. */
1378:../drivers/fsl_i2c.c ****         if ((!(handle->transfer.flags & kI2C_TransferNoStopFlag)) || (result == kStatus_I2C_Nak) ||
 965              		.loc 1 1378 0
 966 005e 2368     		ldr	r3, [r4]
 967 0060 5A07     		lsls	r2, r3, #29
 968 0062 07D5     		bpl	.L103
 969              		.loc 1 1378 0 is_stmt 0 discriminator 1
 970 0064 40F24E43 		movw	r3, #1102
 971 0068 9E42     		cmp	r6, r3
 972 006a 03D0     		beq	.L103
 973              		.loc 1 1378 0 discriminator 2
 974 006c 40F25143 		movw	r3, #1105
 975 0070 9E42     		cmp	r6, r3
 976 0072 09D1     		bne	.L104
 977              	.L103:
1379:../drivers/fsl_i2c.c ****             (result == kStatus_I2C_Addr_Nak))
1380:../drivers/fsl_i2c.c ****         {
1381:../drivers/fsl_i2c.c ****             /* Ensure stop command is a need. */
1382:../drivers/fsl_i2c.c ****             if ((base->C1 & I2C_C1_MST_MASK))
 978              		.loc 1 1382 0 is_stmt 1
 979 0074 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 980 0076 9B06     		lsls	r3, r3, #26
 981 0078 06D5     		bpl	.L104
1383:../drivers/fsl_i2c.c ****             {
1384:../drivers/fsl_i2c.c ****                 if (I2C_MasterStop(base) != kStatus_Success)
 982              		.loc 1 1384 0
 983 007a 2846     		mov	r0, r5
 984 007c FFF7FEFF 		bl	I2C_MasterStop
 985              	.LVL108:
1385:../drivers/fsl_i2c.c ****                 {
1386:../drivers/fsl_i2c.c ****                     result = kStatus_I2C_Timeout;
 986              		.loc 1 1386 0
 987 0080 0028     		cmp	r0, #0
 988 0082 18BF     		it	ne
 989 0084 4FF48A66 		movne	r6, #1104
 990              	.L104:
 991              	.LVL109:
1387:../drivers/fsl_i2c.c ****                 }
1388:../drivers/fsl_i2c.c ****             }
1389:../drivers/fsl_i2c.c ****         }
1390:../drivers/fsl_i2c.c **** 
1391:../drivers/fsl_i2c.c ****         /* Restore handle to idle state. */
1392:../drivers/fsl_i2c.c ****         handle->state = kIdleState;
 992              		.loc 1 1392 0
 993 0088 0023     		movs	r3, #0
 994 008a 2377     		strb	r3, [r4, #28]
1393:../drivers/fsl_i2c.c **** 
1394:../drivers/fsl_i2c.c ****         /* Disable interrupt. */
1395:../drivers/fsl_i2c.c ****         I2C_DisableInterrupts(base, kI2C_GlobalInterruptEnable);
 995              		.loc 1 1395 0
 996 008c 4021     		movs	r1, #64
 997 008e 2846     		mov	r0, r5
 998 0090 FFF7FEFF 		bl	I2C_DisableInterrupts
 999              	.LVL110:
1396:../drivers/fsl_i2c.c **** 
1397:../drivers/fsl_i2c.c ****         /* Call the callback function after the function has completed. */
1398:../drivers/fsl_i2c.c ****         if (handle->completionCallback)
 1000              		.loc 1 1398 0
 1001 0094 276A     		ldr	r7, [r4, #32]
 1002 0096 002F     		cmp	r7, #0
 1003 0098 49D0     		beq	.L80
 1004              	.LVL111:
1399:../drivers/fsl_i2c.c ****         {
1400:../drivers/fsl_i2c.c ****             handle->completionCallback(base, handle, result, handle->userData);
 1005              		.loc 1 1400 0
 1006 009a 636A     		ldr	r3, [r4, #36]
 1007 009c 3246     		mov	r2, r6
 1008 009e 2146     		mov	r1, r4
 1009 00a0 BC46     		mov	ip, r7
1401:../drivers/fsl_i2c.c ****         }
1402:../drivers/fsl_i2c.c ****     }
1403:../drivers/fsl_i2c.c **** }
 1010              		.loc 1 1403 0
 1011 00a2 03B0     		add	sp, sp, #12
 1012              		.cfi_remember_state
 1013              		.cfi_def_cfa_offset 20
 1014              		@ sp needed
 1015 00a4 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 1016              		.cfi_restore 14
 1017              		.cfi_restore 7
 1018              		.cfi_restore 6
 1019              		.cfi_restore 5
 1020              		.cfi_restore 4
 1021              		.cfi_def_cfa_offset 0
 1022              	.LVL112:
1400:../drivers/fsl_i2c.c ****         }
 1023              		.loc 1 1400 0
 1024 00a8 6047     		bx	ip	@ indirect register sibling call
 1025              	.LVL113:
 1026              	.L81:
 1027              		.cfi_restore_state
 1028              	.LBB53:
 1029              	.LBB48:
 333:../drivers/fsl_i2c.c ****                      ((handle->state == kReceiveDataState) && (handle->transfer.dataSize == 1U));
 1030              		.loc 1 333 0
 1031 00aa 052B     		cmp	r3, #5
 1032 00ac B9D1     		bne	.L82
 334:../drivers/fsl_i2c.c **** 
 1033              		.loc 1 334 0
 1034 00ae 4A69     		ldr	r2, [r1, #20]
 1035 00b0 561E     		subs	r6, r2, #1
 1036 00b2 7242     		rsbs	r2, r6, #0
 1037 00b4 7241     		adcs	r2, r2, r6
 1038 00b6 B4E7     		b	.L82
 1039              	.LVL114:
 1040              	.L86:
 364:../drivers/fsl_i2c.c ****                 {
 1041              		.loc 1 364 0
 1042 00b8 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1043 00ba 3BB9     		cbnz	r3, .L88
 367:../drivers/fsl_i2c.c ****                 }
 1044              		.loc 1 367 0
 1045 00bc 0323     		movs	r3, #3
 1046 00be 2377     		strb	r3, [r4, #28]
 378:../drivers/fsl_i2c.c ****     {
 1047              		.loc 1 378 0
 1048 00c0 002E     		cmp	r6, #0
 1049 00c2 CCD1     		bne	.L85
 1050              	.LVL115:
 1051              	.L89:
 422:../drivers/fsl_i2c.c ****             {
 1052              		.loc 1 422 0
 1053 00c4 6669     		ldr	r6, [r4, #20]
 1054 00c6 002E     		cmp	r6, #0
 1055 00c8 C9D0     		beq	.L85
 1056 00ca 39E0     		b	.L127
 1057              	.LVL116:
 1058              	.L88:
 372:../drivers/fsl_i2c.c ****                 }
 1059              		.loc 1 372 0
 1060 00cc 0423     		movs	r3, #4
 1061 00ce 2377     		strb	r3, [r4, #28]
 378:../drivers/fsl_i2c.c ****     {
 1062              		.loc 1 378 0
 1063 00d0 002E     		cmp	r6, #0
 1064 00d2 C4D1     		bne	.L85
 1065              	.LVL117:
 1066              	.L90:
 436:../drivers/fsl_i2c.c **** 
 1067              		.loc 1 436 0
 1068 00d4 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1069 00d6 03F0E703 		and	r3, r3, #231
 1070 00da AB70     		strb	r3, [r5, #2]
 439:../drivers/fsl_i2c.c ****             {
 1071              		.loc 1 439 0
 1072 00dc 6369     		ldr	r3, [r4, #20]
 1073 00de 012B     		cmp	r3, #1
 441:../drivers/fsl_i2c.c ****             }
 1074              		.loc 1 441 0
 1075 00e0 02BF     		ittt	eq
 1076 00e2 AB78     		ldrbeq	r3, [r5, #2]	@ zero_extendqisi2
 1077 00e4 43F00803 		orreq	r3, r3, #8
 1078 00e8 AB70     		strbeq	r3, [r5, #2]
 445:../drivers/fsl_i2c.c **** 
 1079              		.loc 1 445 0
 1080 00ea 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1081 00ec DBB2     		uxtb	r3, r3
 1082 00ee 8DF80730 		strb	r3, [sp, #7]
 448:../drivers/fsl_i2c.c ****             break;
 1083              		.loc 1 448 0
 1084 00f2 0523     		movs	r3, #5
 1085 00f4 2377     		strb	r3, [r4, #28]
 1086              	.LVL118:
 1087 00f6 1AE0     		b	.L80
 1088              	.LVL119:
 1089              	.L84:
 378:../drivers/fsl_i2c.c ****     {
 1090              		.loc 1 378 0
 1091 00f8 002E     		cmp	r6, #0
 1092 00fa B0D1     		bne	.L85
 1093              	.LVL120:
 384:../drivers/fsl_i2c.c ****     {
 1094              		.loc 1 384 0
 1095 00fc 023B     		subs	r3, r3, #2
 1096 00fe 032B     		cmp	r3, #3
 1097 0100 15D8     		bhi	.L80
 1098 0102 01A2     		adr	r2, .L92
 1099 0104 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1100              	.LVL121:
 1101              		.p2align 2
 1102              	.L92:
 1103 0108 19010000 		.word	.L87+1
 1104 010c C5000000 		.word	.L89+1
 1105 0110 D5000000 		.word	.L90+1
 1106 0114 6D010000 		.word	.L93+1
 1107              		.p2align 1
 1108              	.L87:
 388:../drivers/fsl_i2c.c ****             {
 1109              		.loc 1 388 0
 1110 0118 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 1111 011a 53B1     		cbz	r3, .L94
 390:../drivers/fsl_i2c.c ****                 base->D = ((handle->transfer.subaddress) >> (8 * handle->transfer.subaddressSize));
 1112              		.loc 1 390 0
 1113 011c 013B     		subs	r3, r3, #1
 1114 011e DBB2     		uxtb	r3, r3
 391:../drivers/fsl_i2c.c ****             }
 1115              		.loc 1 391 0
 1116 0120 A268     		ldr	r2, [r4, #8]
 390:../drivers/fsl_i2c.c ****                 base->D = ((handle->transfer.subaddress) >> (8 * handle->transfer.subaddressSize));
 1117              		.loc 1 390 0
 1118 0122 2373     		strb	r3, [r4, #12]
 391:../drivers/fsl_i2c.c ****             }
 1119              		.loc 1 391 0
 1120 0124 DB00     		lsls	r3, r3, #3
 1121 0126 22FA03F3 		lsr	r3, r2, r3
 1122 012a DBB2     		uxtb	r3, r3
 1123 012c 2B71     		strb	r3, [r5, #4]
 1124              	.LVL122:
 1125              	.L80:
 1126              	.LBE48:
 1127              	.LBE53:
 1128              		.loc 1 1403 0
 1129 012e 03B0     		add	sp, sp, #12
 1130              		.cfi_remember_state
 1131              		.cfi_def_cfa_offset 20
 1132              		@ sp needed
 1133 0130 F0BD     		pop	{r4, r5, r6, r7, pc}
 1134              	.LVL123:
 1135              	.L94:
 1136              		.cfi_restore_state
 1137              	.LBB54:
 1138              	.LBB49:
 395:../drivers/fsl_i2c.c ****                 {
 1139              		.loc 1 395 0
 1140 0132 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1141 0134 73B9     		cbnz	r3, .L95
 398:../drivers/fsl_i2c.c **** 
 1142              		.loc 1 398 0
 1143 0136 0323     		movs	r3, #3
 1144 0138 2377     		strb	r3, [r4, #28]
 401:../drivers/fsl_i2c.c ****                     {
 1145              		.loc 1 401 0
 1146 013a 6369     		ldr	r3, [r4, #20]
 1147 013c 002B     		cmp	r3, #0
 1148 013e F6D0     		beq	.L80
 1149              	.L127:
 424:../drivers/fsl_i2c.c ****                 handle->transfer.data++;
 1150              		.loc 1 424 0
 1151 0140 2369     		ldr	r3, [r4, #16]
 1152 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1153 0144 2B71     		strb	r3, [r5, #4]
 425:../drivers/fsl_i2c.c ****                 handle->transfer.dataSize--;
 1154              		.loc 1 425 0
 1155 0146 2369     		ldr	r3, [r4, #16]
 1156 0148 0133     		adds	r3, r3, #1
 1157 014a 2361     		str	r3, [r4, #16]
 426:../drivers/fsl_i2c.c ****             }
 1158              		.loc 1 426 0
 1159 014c 6369     		ldr	r3, [r4, #20]
 1160 014e 013B     		subs	r3, r3, #1
 1161 0150 6361     		str	r3, [r4, #20]
 1162              	.LVL124:
 1163 0152 ECE7     		b	.L80
 1164              	.LVL125:
 1165              	.L95:
 411:../drivers/fsl_i2c.c **** 
 1166              		.loc 1 411 0
 1167 0154 0122     		movs	r2, #1
 1168 0156 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 1169              	.LVL126:
 1170 0158 2846     		mov	r0, r5
 1171 015a FFF7FEFF 		bl	I2C_MasterRepeatedStart
 1172              	.LVL127:
 414:../drivers/fsl_i2c.c ****                 }
 1173              		.loc 1 414 0
 1174 015e 0423     		movs	r3, #4
 411:../drivers/fsl_i2c.c **** 
 1175              		.loc 1 411 0
 1176 0160 0646     		mov	r6, r0
 1177              	.LVL128:
 414:../drivers/fsl_i2c.c ****                 }
 1178              		.loc 1 414 0
 1179 0162 2377     		strb	r3, [r4, #28]
 1180              	.LVL129:
 1181              	.L97:
 1182              	.LBE49:
 1183              	.LBE54:
1375:../drivers/fsl_i2c.c ****     {
 1184              		.loc 1 1375 0 discriminator 1
 1185 0164 002E     		cmp	r6, #0
 1186 0166 7FF47AAF 		bne	.L85
 1187 016a E0E7     		b	.L80
 1188              	.LVL130:
 1189              	.L93:
 1190              	.LBB55:
 1191              	.LBB50:
 454:../drivers/fsl_i2c.c ****             {
 1192              		.loc 1 454 0
 1193 016c 6369     		ldr	r3, [r4, #20]
 1194 016e 5A1E     		subs	r2, r3, #1
 1195 0170 6261     		str	r2, [r4, #20]
 1196 0172 002B     		cmp	r3, #0
 1197 0174 DBD0     		beq	.L80
 456:../drivers/fsl_i2c.c ****                 {
 1198              		.loc 1 456 0
 1199 0176 6369     		ldr	r3, [r4, #20]
 1200 0178 EBB9     		cbnz	r3, .L109
 1201              	.LVL131:
 461:../drivers/fsl_i2c.c ****                     {
 1202              		.loc 1 461 0
 1203 017a 2368     		ldr	r3, [r4]
 1204 017c 5907     		lsls	r1, r3, #29
 1205              	.LVL132:
 1206 017e 15D4     		bmi	.L101
 463:../drivers/fsl_i2c.c ****                     }
 1207              		.loc 1 463 0
 1208 0180 2846     		mov	r0, r5
 1209 0182 FFF7FEFF 		bl	I2C_MasterStop
 1210              	.LVL133:
 1211 0186 0646     		mov	r6, r0
 1212              	.LVL134:
 1213              	.L126:
 458:../drivers/fsl_i2c.c **** 
 1214              		.loc 1 458 0
 1215 0188 0123     		movs	r3, #1
 1216              	.LVL135:
 1217              	.L100:
 472:../drivers/fsl_i2c.c ****                 {
 1218              		.loc 1 472 0
 1219 018a 6269     		ldr	r2, [r4, #20]
 1220 018c 012A     		cmp	r2, #1
 474:../drivers/fsl_i2c.c ****                 }
 1221              		.loc 1 474 0
 1222 018e 02BF     		ittt	eq
 1223 0190 AA78     		ldrbeq	r2, [r5, #2]	@ zero_extendqisi2
 1224 0192 42F00802 		orreq	r2, r2, #8
 1225 0196 AA70     		strbeq	r2, [r5, #2]
 478:../drivers/fsl_i2c.c ****                 handle->transfer.data++;
 1226              		.loc 1 478 0
 1227 0198 2269     		ldr	r2, [r4, #16]
 1228 019a 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 1229 019c 1170     		strb	r1, [r2]
 479:../drivers/fsl_i2c.c ****             }
 1230              		.loc 1 479 0
 1231 019e 2269     		ldr	r2, [r4, #16]
 1232 01a0 0132     		adds	r2, r2, #1
 1233 01a2 2261     		str	r2, [r4, #16]
 1234              	.LVL136:
 1235              	.LBE50:
 1236              	.LBE55:
1375:../drivers/fsl_i2c.c ****     {
 1237              		.loc 1 1375 0
 1238 01a4 002B     		cmp	r3, #0
 1239 01a6 7FF45AAF 		bne	.L85
 1240 01aa DBE7     		b	.L97
 1241              	.LVL137:
 1242              	.L101:
 1243              	.LBB56:
 1244              	.LBB51:
 467:../drivers/fsl_i2c.c ****                     }
 1245              		.loc 1 467 0
 1246 01ac AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1247 01ae 43F01003 		orr	r3, r3, #16
 1248 01b2 AB70     		strb	r3, [r5, #2]
 1249 01b4 E8E7     		b	.L126
 1250              	.LVL138:
 1251              	.L109:
 331:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
 1252              		.loc 1 331 0
 1253 01b6 0023     		movs	r3, #0
 1254 01b8 E7E7     		b	.L100
 1255              	.LVL139:
 1256              	.L107:
 354:../drivers/fsl_i2c.c ****         }
 1257              		.loc 1 354 0
 1258 01ba 40F25146 		movw	r6, #1105
 1259              	.LVL140:
 1260 01be 4EE7     		b	.L85
 1261              	.LBE51:
 1262              	.LBE56:
 1263              		.cfi_endproc
 1264              	.LFE176:
 1266              		.section	.text.I2C_SlaveTransferHandleIRQ,"ax",%progbits
 1267              		.align	1
 1268              		.global	I2C_SlaveTransferHandleIRQ
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1272              		.fpu fpv4-sp-d16
 1274              	I2C_SlaveTransferHandleIRQ:
 1275              	.LFB186:
1404:../drivers/fsl_i2c.c **** 
1405:../drivers/fsl_i2c.c **** void I2C_SlaveInit(I2C_Type *base, const i2c_slave_config_t *slaveConfig, uint32_t srcClock_Hz)
1406:../drivers/fsl_i2c.c **** {
1407:../drivers/fsl_i2c.c ****     assert(slaveConfig);
1408:../drivers/fsl_i2c.c **** 
1409:../drivers/fsl_i2c.c ****     uint8_t tmpReg;
1410:../drivers/fsl_i2c.c **** 
1411:../drivers/fsl_i2c.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
1412:../drivers/fsl_i2c.c ****     CLOCK_EnableClock(s_i2cClocks[I2C_GetInstance(base)]);
1413:../drivers/fsl_i2c.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
1414:../drivers/fsl_i2c.c **** 
1415:../drivers/fsl_i2c.c ****     /* Reset the module. */
1416:../drivers/fsl_i2c.c ****     base->A1 = 0;
1417:../drivers/fsl_i2c.c ****     base->F = 0;
1418:../drivers/fsl_i2c.c ****     base->C1 = 0;
1419:../drivers/fsl_i2c.c ****     base->S = 0xFFU;
1420:../drivers/fsl_i2c.c ****     base->C2 = 0;
1421:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
1422:../drivers/fsl_i2c.c ****     base->FLT = 0x50U;
1423:../drivers/fsl_i2c.c **** #elif defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
1424:../drivers/fsl_i2c.c ****     base->FLT = 0x40U;
1425:../drivers/fsl_i2c.c **** #endif
1426:../drivers/fsl_i2c.c ****     base->RA = 0;
1427:../drivers/fsl_i2c.c **** 
1428:../drivers/fsl_i2c.c ****     /* Configure addressing mode. */
1429:../drivers/fsl_i2c.c ****     switch (slaveConfig->addressingMode)
1430:../drivers/fsl_i2c.c ****     {
1431:../drivers/fsl_i2c.c ****         case kI2C_Address7bit:
1432:../drivers/fsl_i2c.c ****             base->A1 = ((uint32_t)(slaveConfig->slaveAddress)) << 1U;
1433:../drivers/fsl_i2c.c ****             break;
1434:../drivers/fsl_i2c.c **** 
1435:../drivers/fsl_i2c.c ****         case kI2C_RangeMatch:
1436:../drivers/fsl_i2c.c ****             assert(slaveConfig->slaveAddress < slaveConfig->upperAddress);
1437:../drivers/fsl_i2c.c ****             base->A1 = ((uint32_t)(slaveConfig->slaveAddress)) << 1U;
1438:../drivers/fsl_i2c.c ****             base->RA = ((uint32_t)(slaveConfig->upperAddress)) << 1U;
1439:../drivers/fsl_i2c.c ****             base->C2 |= I2C_C2_RMEN_MASK;
1440:../drivers/fsl_i2c.c ****             break;
1441:../drivers/fsl_i2c.c **** 
1442:../drivers/fsl_i2c.c ****         default:
1443:../drivers/fsl_i2c.c ****             break;
1444:../drivers/fsl_i2c.c ****     }
1445:../drivers/fsl_i2c.c **** 
1446:../drivers/fsl_i2c.c ****     /* Configure low power wake up feature. */
1447:../drivers/fsl_i2c.c ****     tmpReg = base->C1;
1448:../drivers/fsl_i2c.c ****     tmpReg &= ~I2C_C1_WUEN_MASK;
1449:../drivers/fsl_i2c.c ****     base->C1 = tmpReg | I2C_C1_WUEN(slaveConfig->enableWakeUp) | I2C_C1_IICEN(slaveConfig->enableSl
1450:../drivers/fsl_i2c.c **** 
1451:../drivers/fsl_i2c.c ****     /* Configure general call & baud rate control. */
1452:../drivers/fsl_i2c.c ****     tmpReg = base->C2;
1453:../drivers/fsl_i2c.c ****     tmpReg &= ~(I2C_C2_SBRC_MASK | I2C_C2_GCAEN_MASK);
1454:../drivers/fsl_i2c.c ****     tmpReg |= I2C_C2_SBRC(slaveConfig->enableBaudRateCtl) | I2C_C2_GCAEN(slaveConfig->enableGeneral
1455:../drivers/fsl_i2c.c ****     base->C2 = tmpReg;
1456:../drivers/fsl_i2c.c **** 
1457:../drivers/fsl_i2c.c **** /* Enable/Disable double buffering. */
1458:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE
1459:../drivers/fsl_i2c.c ****     tmpReg = base->S2 & (~I2C_S2_DFEN_MASK);
1460:../drivers/fsl_i2c.c ****     base->S2 = tmpReg | I2C_S2_DFEN(slaveConfig->enableDoubleBuffering);
1461:../drivers/fsl_i2c.c **** #endif
1462:../drivers/fsl_i2c.c **** 
1463:../drivers/fsl_i2c.c ****     /* Set hold time. */
1464:../drivers/fsl_i2c.c ****     I2C_SetHoldTime(base, slaveConfig->sclStopHoldTime_ns, srcClock_Hz);
1465:../drivers/fsl_i2c.c **** }
1466:../drivers/fsl_i2c.c **** 
1467:../drivers/fsl_i2c.c **** void I2C_SlaveDeinit(I2C_Type *base)
1468:../drivers/fsl_i2c.c **** {
1469:../drivers/fsl_i2c.c ****     /* Disable I2C module. */
1470:../drivers/fsl_i2c.c ****     I2C_Enable(base, false);
1471:../drivers/fsl_i2c.c **** 
1472:../drivers/fsl_i2c.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
1473:../drivers/fsl_i2c.c ****     /* Disable I2C clock. */
1474:../drivers/fsl_i2c.c ****     CLOCK_DisableClock(s_i2cClocks[I2C_GetInstance(base)]);
1475:../drivers/fsl_i2c.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
1476:../drivers/fsl_i2c.c **** }
1477:../drivers/fsl_i2c.c **** 
1478:../drivers/fsl_i2c.c **** void I2C_SlaveGetDefaultConfig(i2c_slave_config_t *slaveConfig)
1479:../drivers/fsl_i2c.c **** {
1480:../drivers/fsl_i2c.c ****     assert(slaveConfig);
1481:../drivers/fsl_i2c.c **** 
1482:../drivers/fsl_i2c.c ****     /* By default slave is addressed with 7-bit address. */
1483:../drivers/fsl_i2c.c ****     slaveConfig->addressingMode = kI2C_Address7bit;
1484:../drivers/fsl_i2c.c **** 
1485:../drivers/fsl_i2c.c ****     /* General call mode is disabled by default. */
1486:../drivers/fsl_i2c.c ****     slaveConfig->enableGeneralCall = false;
1487:../drivers/fsl_i2c.c **** 
1488:../drivers/fsl_i2c.c ****     /* Slave address match waking up MCU from low power mode is disabled. */
1489:../drivers/fsl_i2c.c ****     slaveConfig->enableWakeUp = false;
1490:../drivers/fsl_i2c.c **** 
1491:../drivers/fsl_i2c.c ****     /* Independent slave mode baud rate at maximum frequency is disabled. */
1492:../drivers/fsl_i2c.c ****     slaveConfig->enableBaudRateCtl = false;
1493:../drivers/fsl_i2c.c **** 
1494:../drivers/fsl_i2c.c **** /* Default enable double buffering. */
1495:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE) && FSL_FEATURE_I2C_HAS_DOUBLE_BUFFER_ENABLE
1496:../drivers/fsl_i2c.c ****     slaveConfig->enableDoubleBuffering = true;
1497:../drivers/fsl_i2c.c **** #endif
1498:../drivers/fsl_i2c.c **** 
1499:../drivers/fsl_i2c.c ****     /* Set default SCL stop hold time to 4us which is minimum requirement in I2C spec. */
1500:../drivers/fsl_i2c.c ****     slaveConfig->sclStopHoldTime_ns = 4000;
1501:../drivers/fsl_i2c.c **** 
1502:../drivers/fsl_i2c.c ****     /* Enable the I2C peripheral. */
1503:../drivers/fsl_i2c.c ****     slaveConfig->enableSlave = true;
1504:../drivers/fsl_i2c.c **** }
1505:../drivers/fsl_i2c.c **** 
1506:../drivers/fsl_i2c.c **** status_t I2C_SlaveWriteBlocking(I2C_Type *base, const uint8_t *txBuff, size_t txSize)
1507:../drivers/fsl_i2c.c **** {
1508:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
1509:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
1510:../drivers/fsl_i2c.c **** 
1511:../drivers/fsl_i2c.c ****     /* Add this to avoid build warning. */
1512:../drivers/fsl_i2c.c ****     dummy++;
1513:../drivers/fsl_i2c.c **** 
1514:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
1515:../drivers/fsl_i2c.c ****     /* Check start flag. */
1516:../drivers/fsl_i2c.c ****     while (!(base->FLT & I2C_FLT_STARTF_MASK))
1517:../drivers/fsl_i2c.c ****     {
1518:../drivers/fsl_i2c.c ****     }
1519:../drivers/fsl_i2c.c ****     /* Clear STARTF flag. */
1520:../drivers/fsl_i2c.c ****     base->FLT |= I2C_FLT_STARTF_MASK;
1521:../drivers/fsl_i2c.c ****     /* Clear the IICIF flag. */
1522:../drivers/fsl_i2c.c ****     base->S = kI2C_IntPendingFlag;
1523:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
1524:../drivers/fsl_i2c.c **** 
1525:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1526:../drivers/fsl_i2c.c ****     uint32_t waitTimes = I2C_WAIT_TIMEOUT;
1527:../drivers/fsl_i2c.c ****     /* Wait until data transfer complete. */
1528:../drivers/fsl_i2c.c ****     while ((!(base->S & kI2C_AddressMatchFlag)) && (--waitTimes))
1529:../drivers/fsl_i2c.c ****     {
1530:../drivers/fsl_i2c.c ****     }
1531:../drivers/fsl_i2c.c ****     if (waitTimes == 0)
1532:../drivers/fsl_i2c.c ****     {
1533:../drivers/fsl_i2c.c ****         return kStatus_I2C_Timeout;
1534:../drivers/fsl_i2c.c ****     }
1535:../drivers/fsl_i2c.c **** #else
1536:../drivers/fsl_i2c.c ****     /* Wait for address match flag. */
1537:../drivers/fsl_i2c.c ****     while (!(base->S & kI2C_AddressMatchFlag))
1538:../drivers/fsl_i2c.c ****     {
1539:../drivers/fsl_i2c.c ****     }
1540:../drivers/fsl_i2c.c **** #endif
1541:../drivers/fsl_i2c.c ****     /* Read dummy to release bus. */
1542:../drivers/fsl_i2c.c ****     dummy = base->D;
1543:../drivers/fsl_i2c.c **** 
1544:../drivers/fsl_i2c.c ****     result = I2C_MasterWriteBlocking(base, txBuff, txSize, kI2C_TransferDefaultFlag);
1545:../drivers/fsl_i2c.c **** 
1546:../drivers/fsl_i2c.c ****     /* Switch to receive mode. */
1547:../drivers/fsl_i2c.c ****     base->C1 &= ~(I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
1548:../drivers/fsl_i2c.c **** 
1549:../drivers/fsl_i2c.c ****     /* Read dummy to release bus. */
1550:../drivers/fsl_i2c.c ****     dummy = base->D;
1551:../drivers/fsl_i2c.c **** 
1552:../drivers/fsl_i2c.c ****     return result;
1553:../drivers/fsl_i2c.c **** }
1554:../drivers/fsl_i2c.c **** 
1555:../drivers/fsl_i2c.c **** status_t I2C_SlaveReadBlocking(I2C_Type *base, uint8_t *rxBuff, size_t rxSize)
1556:../drivers/fsl_i2c.c **** {
1557:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
1558:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
1559:../drivers/fsl_i2c.c **** 
1560:../drivers/fsl_i2c.c ****     /* Add this to avoid build warning. */
1561:../drivers/fsl_i2c.c ****     dummy++;
1562:../drivers/fsl_i2c.c **** 
1563:../drivers/fsl_i2c.c **** /* Wait until address match. */
1564:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
1565:../drivers/fsl_i2c.c ****     /* Check start flag. */
1566:../drivers/fsl_i2c.c ****     while (!(base->FLT & I2C_FLT_STARTF_MASK))
1567:../drivers/fsl_i2c.c ****     {
1568:../drivers/fsl_i2c.c ****     }
1569:../drivers/fsl_i2c.c ****     /* Clear STARTF flag. */
1570:../drivers/fsl_i2c.c ****     base->FLT |= I2C_FLT_STARTF_MASK;
1571:../drivers/fsl_i2c.c ****     /* Clear the IICIF flag. */
1572:../drivers/fsl_i2c.c ****     base->S = kI2C_IntPendingFlag;
1573:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
1574:../drivers/fsl_i2c.c **** 
1575:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1576:../drivers/fsl_i2c.c ****     uint32_t waitTimes = I2C_WAIT_TIMEOUT;
1577:../drivers/fsl_i2c.c ****     /* Wait for address match and int pending flag. */
1578:../drivers/fsl_i2c.c ****     while ((!(base->S & kI2C_AddressMatchFlag)) && (--waitTimes))
1579:../drivers/fsl_i2c.c ****     {
1580:../drivers/fsl_i2c.c ****     }
1581:../drivers/fsl_i2c.c ****     if (waitTimes == 0)
1582:../drivers/fsl_i2c.c ****     {
1583:../drivers/fsl_i2c.c ****         return kStatus_I2C_Timeout;
1584:../drivers/fsl_i2c.c ****     }
1585:../drivers/fsl_i2c.c **** 
1586:../drivers/fsl_i2c.c ****     waitTimes = I2C_WAIT_TIMEOUT;
1587:../drivers/fsl_i2c.c ****     while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
1588:../drivers/fsl_i2c.c ****     {
1589:../drivers/fsl_i2c.c ****     }
1590:../drivers/fsl_i2c.c ****     if (waitTimes == 0)
1591:../drivers/fsl_i2c.c ****     {
1592:../drivers/fsl_i2c.c ****         return kStatus_I2C_Timeout;
1593:../drivers/fsl_i2c.c ****     }
1594:../drivers/fsl_i2c.c **** #else
1595:../drivers/fsl_i2c.c ****     /* Wait for address match and int pending flag. */
1596:../drivers/fsl_i2c.c ****     while (!(base->S & kI2C_AddressMatchFlag))
1597:../drivers/fsl_i2c.c ****     {
1598:../drivers/fsl_i2c.c ****     }
1599:../drivers/fsl_i2c.c ****     while (!(base->S & kI2C_IntPendingFlag))
1600:../drivers/fsl_i2c.c ****     {
1601:../drivers/fsl_i2c.c ****     }
1602:../drivers/fsl_i2c.c **** #endif
1603:../drivers/fsl_i2c.c **** 
1604:../drivers/fsl_i2c.c ****     /* Read dummy to release bus. */
1605:../drivers/fsl_i2c.c ****     dummy = base->D;
1606:../drivers/fsl_i2c.c **** 
1607:../drivers/fsl_i2c.c ****     /* Clear the IICIF flag. */
1608:../drivers/fsl_i2c.c ****     base->S = kI2C_IntPendingFlag;
1609:../drivers/fsl_i2c.c **** 
1610:../drivers/fsl_i2c.c ****     /* Setup the I2C peripheral to receive data. */
1611:../drivers/fsl_i2c.c ****     base->C1 &= ~(I2C_C1_TX_MASK);
1612:../drivers/fsl_i2c.c **** 
1613:../drivers/fsl_i2c.c ****     while (rxSize--)
1614:../drivers/fsl_i2c.c ****     {
1615:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
1616:../drivers/fsl_i2c.c ****         waitTimes = I2C_WAIT_TIMEOUT;
1617:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1618:../drivers/fsl_i2c.c ****         while ((!(base->S & kI2C_IntPendingFlag)) && (--waitTimes))
1619:../drivers/fsl_i2c.c ****         {
1620:../drivers/fsl_i2c.c ****         }
1621:../drivers/fsl_i2c.c ****         if (waitTimes == 0)
1622:../drivers/fsl_i2c.c ****         {
1623:../drivers/fsl_i2c.c ****             return kStatus_I2C_Timeout;
1624:../drivers/fsl_i2c.c ****         }
1625:../drivers/fsl_i2c.c **** #else
1626:../drivers/fsl_i2c.c ****         /* Wait until data transfer complete. */
1627:../drivers/fsl_i2c.c ****         while (!(base->S & kI2C_IntPendingFlag))
1628:../drivers/fsl_i2c.c ****         {
1629:../drivers/fsl_i2c.c ****         }
1630:../drivers/fsl_i2c.c **** #endif
1631:../drivers/fsl_i2c.c ****         /* Clear the IICIF flag. */
1632:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
1633:../drivers/fsl_i2c.c **** 
1634:../drivers/fsl_i2c.c ****         /* Read from the data register. */
1635:../drivers/fsl_i2c.c ****         *rxBuff++ = base->D;
1636:../drivers/fsl_i2c.c ****     }
1637:../drivers/fsl_i2c.c **** 
1638:../drivers/fsl_i2c.c ****     return result;
1639:../drivers/fsl_i2c.c **** }
1640:../drivers/fsl_i2c.c **** 
1641:../drivers/fsl_i2c.c **** void I2C_SlaveTransferCreateHandle(I2C_Type *base,
1642:../drivers/fsl_i2c.c ****                                    i2c_slave_handle_t *handle,
1643:../drivers/fsl_i2c.c ****                                    i2c_slave_transfer_callback_t callback,
1644:../drivers/fsl_i2c.c ****                                    void *userData)
1645:../drivers/fsl_i2c.c **** {
1646:../drivers/fsl_i2c.c ****     assert(handle);
1647:../drivers/fsl_i2c.c **** 
1648:../drivers/fsl_i2c.c ****     uint32_t instance = I2C_GetInstance(base);
1649:../drivers/fsl_i2c.c **** 
1650:../drivers/fsl_i2c.c ****     /* Zero handle. */
1651:../drivers/fsl_i2c.c ****     memset(handle, 0, sizeof(*handle));
1652:../drivers/fsl_i2c.c **** 
1653:../drivers/fsl_i2c.c ****     /* Set callback and userData. */
1654:../drivers/fsl_i2c.c ****     handle->callback = callback;
1655:../drivers/fsl_i2c.c ****     handle->userData = userData;
1656:../drivers/fsl_i2c.c **** 
1657:../drivers/fsl_i2c.c ****     /* Save the context in global variables to support the double weak mechanism. */
1658:../drivers/fsl_i2c.c ****     s_i2cHandle[instance] = handle;
1659:../drivers/fsl_i2c.c **** 
1660:../drivers/fsl_i2c.c ****     /* Save slave interrupt handler. */
1661:../drivers/fsl_i2c.c ****     s_i2cSlaveIsr = I2C_SlaveTransferHandleIRQ;
1662:../drivers/fsl_i2c.c **** 
1663:../drivers/fsl_i2c.c ****     /* Enable NVIC interrupt. */
1664:../drivers/fsl_i2c.c ****     EnableIRQ(s_i2cIrqs[instance]);
1665:../drivers/fsl_i2c.c **** }
1666:../drivers/fsl_i2c.c **** 
1667:../drivers/fsl_i2c.c **** status_t I2C_SlaveTransferNonBlocking(I2C_Type *base, i2c_slave_handle_t *handle, uint32_t eventMas
1668:../drivers/fsl_i2c.c **** {
1669:../drivers/fsl_i2c.c ****     assert(handle);
1670:../drivers/fsl_i2c.c **** 
1671:../drivers/fsl_i2c.c ****     /* Check if the I2C bus is idle - if not return busy status. */
1672:../drivers/fsl_i2c.c ****     if (handle->isBusy)
1673:../drivers/fsl_i2c.c ****     {
1674:../drivers/fsl_i2c.c ****         return kStatus_I2C_Busy;
1675:../drivers/fsl_i2c.c ****     }
1676:../drivers/fsl_i2c.c ****     else
1677:../drivers/fsl_i2c.c ****     {
1678:../drivers/fsl_i2c.c ****         /* Disable LPI2C IRQ sources while we configure stuff. */
1679:../drivers/fsl_i2c.c ****         I2C_DisableInterrupts(base, kIrqFlags);
1680:../drivers/fsl_i2c.c **** 
1681:../drivers/fsl_i2c.c ****         /* Clear transfer in handle. */
1682:../drivers/fsl_i2c.c ****         memset(&handle->transfer, 0, sizeof(handle->transfer));
1683:../drivers/fsl_i2c.c **** 
1684:../drivers/fsl_i2c.c ****         /* Record that we're busy. */
1685:../drivers/fsl_i2c.c ****         handle->isBusy = true;
1686:../drivers/fsl_i2c.c **** 
1687:../drivers/fsl_i2c.c ****         /* Set up event mask. tx and rx are always enabled. */
1688:../drivers/fsl_i2c.c ****         handle->eventMask = eventMask | kI2C_SlaveTransmitEvent | kI2C_SlaveReceiveEvent | kI2C_Sla
1689:../drivers/fsl_i2c.c **** 
1690:../drivers/fsl_i2c.c ****         /* Clear all flags. */
1691:../drivers/fsl_i2c.c ****         I2C_SlaveClearStatusFlags(base, kClearFlags);
1692:../drivers/fsl_i2c.c **** 
1693:../drivers/fsl_i2c.c ****         /* Enable I2C internal IRQ sources. NVIC IRQ was enabled in CreateHandle() */
1694:../drivers/fsl_i2c.c ****         I2C_EnableInterrupts(base, kIrqFlags);
1695:../drivers/fsl_i2c.c ****     }
1696:../drivers/fsl_i2c.c **** 
1697:../drivers/fsl_i2c.c ****     return kStatus_Success;
1698:../drivers/fsl_i2c.c **** }
1699:../drivers/fsl_i2c.c **** 
1700:../drivers/fsl_i2c.c **** void I2C_SlaveTransferAbort(I2C_Type *base, i2c_slave_handle_t *handle)
1701:../drivers/fsl_i2c.c **** {
1702:../drivers/fsl_i2c.c ****     assert(handle);
1703:../drivers/fsl_i2c.c **** 
1704:../drivers/fsl_i2c.c ****     if (handle->isBusy)
1705:../drivers/fsl_i2c.c ****     {
1706:../drivers/fsl_i2c.c ****         /* Disable interrupts. */
1707:../drivers/fsl_i2c.c ****         I2C_DisableInterrupts(base, kIrqFlags);
1708:../drivers/fsl_i2c.c **** 
1709:../drivers/fsl_i2c.c ****         /* Reset transfer info. */
1710:../drivers/fsl_i2c.c ****         memset(&handle->transfer, 0, sizeof(handle->transfer));
1711:../drivers/fsl_i2c.c **** 
1712:../drivers/fsl_i2c.c ****         /* Reset the state to idle. */
1713:../drivers/fsl_i2c.c ****         handle->isBusy = false;
1714:../drivers/fsl_i2c.c ****     }
1715:../drivers/fsl_i2c.c **** }
1716:../drivers/fsl_i2c.c **** 
1717:../drivers/fsl_i2c.c **** status_t I2C_SlaveTransferGetCount(I2C_Type *base, i2c_slave_handle_t *handle, size_t *count)
1718:../drivers/fsl_i2c.c **** {
1719:../drivers/fsl_i2c.c ****     assert(handle);
1720:../drivers/fsl_i2c.c **** 
1721:../drivers/fsl_i2c.c ****     if (!count)
1722:../drivers/fsl_i2c.c ****     {
1723:../drivers/fsl_i2c.c ****         return kStatus_InvalidArgument;
1724:../drivers/fsl_i2c.c ****     }
1725:../drivers/fsl_i2c.c **** 
1726:../drivers/fsl_i2c.c ****     /* Catch when there is not an active transfer. */
1727:../drivers/fsl_i2c.c ****     if (!handle->isBusy)
1728:../drivers/fsl_i2c.c ****     {
1729:../drivers/fsl_i2c.c ****         *count = 0;
1730:../drivers/fsl_i2c.c ****         return kStatus_NoTransferInProgress;
1731:../drivers/fsl_i2c.c ****     }
1732:../drivers/fsl_i2c.c **** 
1733:../drivers/fsl_i2c.c ****     /* For an active transfer, just return the count from the handle. */
1734:../drivers/fsl_i2c.c ****     *count = handle->transfer.transferredCount;
1735:../drivers/fsl_i2c.c **** 
1736:../drivers/fsl_i2c.c ****     return kStatus_Success;
1737:../drivers/fsl_i2c.c **** }
1738:../drivers/fsl_i2c.c **** 
1739:../drivers/fsl_i2c.c **** void I2C_SlaveTransferHandleIRQ(I2C_Type *base, void *i2cHandle)
1740:../drivers/fsl_i2c.c **** {
 1276              		.loc 1 1740 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 8
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280              	.LVL141:
 1281 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 1282              		.cfi_def_cfa_offset 32
 1283              		.cfi_offset 4, -24
 1284              		.cfi_offset 5, -20
 1285              		.cfi_offset 6, -16
 1286              		.cfi_offset 7, -12
 1287              		.cfi_offset 8, -8
 1288              		.cfi_offset 14, -4
1741:../drivers/fsl_i2c.c ****     assert(i2cHandle);
1742:../drivers/fsl_i2c.c **** 
1743:../drivers/fsl_i2c.c ****     uint16_t status;
1744:../drivers/fsl_i2c.c ****     bool doTransmit = false;
1745:../drivers/fsl_i2c.c ****     i2c_slave_handle_t *handle = (i2c_slave_handle_t *)i2cHandle;
1746:../drivers/fsl_i2c.c ****     i2c_slave_transfer_t *xfer;
1747:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
 1289              		.loc 1 1747 0
 1290 0004 4FF00008 		mov	r8, #0
 1291 0008 8DF80780 		strb	r8, [sp, #7]
1748:../drivers/fsl_i2c.c **** 
1749:../drivers/fsl_i2c.c ****     /* Add this to avoid build warning. */
1750:../drivers/fsl_i2c.c ****     dummy++;
 1292              		.loc 1 1750 0
 1293 000c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1294 0010 0133     		adds	r3, r3, #1
 1295 0012 DBB2     		uxtb	r3, r3
1740:../drivers/fsl_i2c.c ****     assert(i2cHandle);
 1296              		.loc 1 1740 0
 1297 0014 0C46     		mov	r4, r1
 1298              	.LVL142:
 1299 0016 0546     		mov	r5, r0
 1300              		.loc 1 1750 0
 1301 0018 8DF80730 		strb	r3, [sp, #7]
 1302              	.LVL143:
 1303              	.LBB64:
 1304              	.LBB65:
 423:../drivers/fsl_i2c.h **** }
 1305              		.loc 3 423 0
 1306 001c FFF7FEFF 		bl	I2C_MasterGetStatusFlags
 1307              	.LVL144:
 1308              	.LBE65:
 1309              	.LBE64:
1751:../drivers/fsl_i2c.c **** 
1752:../drivers/fsl_i2c.c ****     status = I2C_SlaveGetStatusFlags(base);
1753:../drivers/fsl_i2c.c ****     xfer = &(handle->transfer);
1754:../drivers/fsl_i2c.c **** 
1755:../drivers/fsl_i2c.c **** #ifdef I2C_HAS_STOP_DETECT
1756:../drivers/fsl_i2c.c ****     /* Check stop flag. */
1757:../drivers/fsl_i2c.c ****     if (status & kI2C_StopDetectFlag)
 1310              		.loc 1 1757 0
 1311 0020 4104     		lsls	r1, r0, #17
1753:../drivers/fsl_i2c.c **** 
 1312              		.loc 1 1753 0
 1313 0022 04F10407 		add	r7, r4, #4
 1314              	.LVL145:
 1315              		.loc 1 1757 0
 1316 0026 86B2     		uxth	r6, r0
 1317 0028 34D4     		bmi	.L129
 1318              	.LVL146:
 1319              	.L135:
1758:../drivers/fsl_i2c.c ****     {
1759:../drivers/fsl_i2c.c ****         I2C_MasterClearStatusFlags(base, kI2C_StopDetectFlag);
1760:../drivers/fsl_i2c.c **** 
1761:../drivers/fsl_i2c.c ****         /* Clear the interrupt flag. */
1762:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
1763:../drivers/fsl_i2c.c **** 
1764:../drivers/fsl_i2c.c ****         /* Call slave callback if this is the STOP of the transfer. */
1765:../drivers/fsl_i2c.c ****         if (handle->isBusy)
1766:../drivers/fsl_i2c.c ****         {
1767:../drivers/fsl_i2c.c ****             xfer->event = kI2C_SlaveCompletionEvent;
1768:../drivers/fsl_i2c.c ****             xfer->completionStatus = kStatus_Success;
1769:../drivers/fsl_i2c.c ****             handle->isBusy = false;
1770:../drivers/fsl_i2c.c **** 
1771:../drivers/fsl_i2c.c ****             if ((handle->eventMask & xfer->event) && (handle->callback))
1772:../drivers/fsl_i2c.c ****             {
1773:../drivers/fsl_i2c.c ****                 handle->callback(base, xfer, handle->userData);
1774:../drivers/fsl_i2c.c ****             }
1775:../drivers/fsl_i2c.c ****         }
1776:../drivers/fsl_i2c.c **** 
1777:../drivers/fsl_i2c.c ****         if (!(status & kI2C_AddressMatchFlag))
1778:../drivers/fsl_i2c.c ****         {
1779:../drivers/fsl_i2c.c ****             return;
1780:../drivers/fsl_i2c.c ****         }
1781:../drivers/fsl_i2c.c ****     }
1782:../drivers/fsl_i2c.c **** #endif /* I2C_HAS_STOP_DETECT */
1783:../drivers/fsl_i2c.c **** 
1784:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
1785:../drivers/fsl_i2c.c ****     /* Check start flag. */
1786:../drivers/fsl_i2c.c ****     if (status & kI2C_StartDetectFlag)
 1320              		.loc 1 1786 0
 1321 002a F204     		lsls	r2, r6, #19
 1322 002c 14D5     		bpl	.L131
 1323              	.LVL147:
 1324              	.LBB66:
 1325              	.LBB67:
 446:../drivers/fsl_i2c.h ****     }
 1326              		.loc 3 446 0
 1327 002e AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 1328 0030 43F01003 		orr	r3, r3, #16
 1329 0034 AB71     		strb	r3, [r5, #6]
 1330              		.loc 3 458 0
 1331 0036 0023     		movs	r3, #0
 1332 0038 EB70     		strb	r3, [r5, #3]
 1333              	.LVL148:
 1334              	.LBE67:
 1335              	.LBE66:
1787:../drivers/fsl_i2c.c ****     {
1788:../drivers/fsl_i2c.c ****         I2C_MasterClearStatusFlags(base, kI2C_StartDetectFlag);
1789:../drivers/fsl_i2c.c **** 
1790:../drivers/fsl_i2c.c ****         /* Clear the interrupt flag. */
1791:../drivers/fsl_i2c.c ****         base->S = kI2C_IntPendingFlag;
 1336              		.loc 1 1791 0
 1337 003a 0223     		movs	r3, #2
 1338 003c EB70     		strb	r3, [r5, #3]
1792:../drivers/fsl_i2c.c **** 
1793:../drivers/fsl_i2c.c ****         xfer->event = kI2C_SlaveStartEvent;
 1339              		.loc 1 1793 0
 1340 003e 1023     		movs	r3, #16
 1341 0040 2371     		strb	r3, [r4, #4]
1794:../drivers/fsl_i2c.c **** 
1795:../drivers/fsl_i2c.c ****         if ((handle->eventMask & xfer->event) && (handle->callback))
 1342              		.loc 1 1795 0
 1343 0042 A369     		ldr	r3, [r4, #24]
 1344 0044 DA06     		lsls	r2, r3, #27
 1345 0046 05D5     		bpl	.L139
 1346              		.loc 1 1795 0 is_stmt 0 discriminator 1
 1347 0048 E369     		ldr	r3, [r4, #28]
 1348 004a 1BB1     		cbz	r3, .L139
1796:../drivers/fsl_i2c.c ****         {
1797:../drivers/fsl_i2c.c ****             handle->callback(base, xfer, handle->userData);
 1349              		.loc 1 1797 0 is_stmt 1
 1350 004c 226A     		ldr	r2, [r4, #32]
 1351 004e 3946     		mov	r1, r7
 1352 0050 2846     		mov	r0, r5
 1353 0052 9847     		blx	r3
 1354              	.LVL149:
 1355              	.L139:
1798:../drivers/fsl_i2c.c ****         }
1799:../drivers/fsl_i2c.c **** 
1800:../drivers/fsl_i2c.c ****         if (!(status & kI2C_AddressMatchFlag))
 1356              		.loc 1 1800 0
 1357 0054 7306     		lsls	r3, r6, #25
 1358 0056 38D5     		bpl	.L128
 1359              	.L131:
1801:../drivers/fsl_i2c.c ****         {
1802:../drivers/fsl_i2c.c ****             return;
1803:../drivers/fsl_i2c.c ****         }
1804:../drivers/fsl_i2c.c ****     }
1805:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
1806:../drivers/fsl_i2c.c **** 
1807:../drivers/fsl_i2c.c ****     /* Clear the interrupt flag. */
1808:../drivers/fsl_i2c.c ****     base->S = kI2C_IntPendingFlag;
 1360              		.loc 1 1808 0
 1361 0058 0223     		movs	r3, #2
1809:../drivers/fsl_i2c.c **** 
1810:../drivers/fsl_i2c.c ****     /* Check NAK */
1811:../drivers/fsl_i2c.c ****     if (status & kI2C_ReceiveNakFlag)
 1362              		.loc 1 1811 0
 1363 005a F107     		lsls	r1, r6, #31
1808:../drivers/fsl_i2c.c **** 
 1364              		.loc 1 1808 0
 1365 005c EB70     		strb	r3, [r5, #3]
 1366              		.loc 1 1811 0
 1367 005e 37D4     		bmi	.L137
1812:../drivers/fsl_i2c.c ****     {
1813:../drivers/fsl_i2c.c ****         /* Set receive mode. */
1814:../drivers/fsl_i2c.c ****         base->C1 &= ~(I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
1815:../drivers/fsl_i2c.c **** 
1816:../drivers/fsl_i2c.c ****         /* Read dummy. */
1817:../drivers/fsl_i2c.c ****         dummy = base->D;
1818:../drivers/fsl_i2c.c **** 
1819:../drivers/fsl_i2c.c ****         if (handle->transfer.dataSize != 0)
1820:../drivers/fsl_i2c.c ****         {
1821:../drivers/fsl_i2c.c ****             xfer->event = kI2C_SlaveCompletionEvent;
1822:../drivers/fsl_i2c.c ****             xfer->completionStatus = kStatus_I2C_Nak;
1823:../drivers/fsl_i2c.c ****             handle->isBusy = false;
1824:../drivers/fsl_i2c.c **** 
1825:../drivers/fsl_i2c.c ****             if ((handle->eventMask & xfer->event) && (handle->callback))
1826:../drivers/fsl_i2c.c ****             {
1827:../drivers/fsl_i2c.c ****                 handle->callback(base, xfer, handle->userData);
1828:../drivers/fsl_i2c.c ****             }
1829:../drivers/fsl_i2c.c ****         }
1830:../drivers/fsl_i2c.c ****         else
1831:../drivers/fsl_i2c.c ****         {
1832:../drivers/fsl_i2c.c **** #ifndef I2C_HAS_STOP_DETECT
1833:../drivers/fsl_i2c.c ****             xfer->event = kI2C_SlaveCompletionEvent;
1834:../drivers/fsl_i2c.c ****             xfer->completionStatus = kStatus_Success;
1835:../drivers/fsl_i2c.c ****             handle->isBusy = false;
1836:../drivers/fsl_i2c.c **** 
1837:../drivers/fsl_i2c.c ****             if ((handle->eventMask & xfer->event) && (handle->callback))
1838:../drivers/fsl_i2c.c ****             {
1839:../drivers/fsl_i2c.c ****                 handle->callback(base, xfer, handle->userData);
1840:../drivers/fsl_i2c.c ****             }
1841:../drivers/fsl_i2c.c **** #endif /* !FSL_FEATURE_I2C_HAS_START_STOP_DETECT or !FSL_FEATURE_I2C_HAS_STOP_DETECT */
1842:../drivers/fsl_i2c.c ****         }
1843:../drivers/fsl_i2c.c ****     }
1844:../drivers/fsl_i2c.c ****     /* Check address match. */
1845:../drivers/fsl_i2c.c ****     else if (status & kI2C_AddressMatchFlag)
 1368              		.loc 1 1845 0
 1369 0060 7106     		lsls	r1, r6, #25
 1370 0062 66D5     		bpl	.L141
1846:../drivers/fsl_i2c.c ****     {
1847:../drivers/fsl_i2c.c ****         handle->isBusy = true;
 1371              		.loc 1 1847 0
 1372 0064 0123     		movs	r3, #1
1848:../drivers/fsl_i2c.c ****         xfer->event = kI2C_SlaveAddressMatchEvent;
1849:../drivers/fsl_i2c.c **** 
1850:../drivers/fsl_i2c.c ****         /* Slave transmit, master reading from slave. */
1851:../drivers/fsl_i2c.c ****         if (status & kI2C_TransferDirectionFlag)
 1373              		.loc 1 1851 0
 1374 0066 16F00406 		ands	r6, r6, #4
 1375              	.LVL150:
1847:../drivers/fsl_i2c.c ****         xfer->event = kI2C_SlaveAddressMatchEvent;
 1376              		.loc 1 1847 0
 1377 006a 2370     		strb	r3, [r4]
1848:../drivers/fsl_i2c.c ****         xfer->event = kI2C_SlaveAddressMatchEvent;
 1378              		.loc 1 1848 0
 1379 006c 2371     		strb	r3, [r4, #4]
 1380              		.loc 1 1851 0
 1381 006e 4ED0     		beq	.L142
1852:../drivers/fsl_i2c.c ****         {
1853:../drivers/fsl_i2c.c ****             /* Change direction to send data. */
1854:../drivers/fsl_i2c.c ****             base->C1 |= I2C_C1_TX_MASK;
 1382              		.loc 1 1854 0
 1383 0070 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 1384 0072 42F01002 		orr	r2, r2, #16
 1385 0076 AA70     		strb	r2, [r5, #2]
 1386              	.LVL151:
1855:../drivers/fsl_i2c.c **** 
1856:../drivers/fsl_i2c.c ****             doTransmit = true;
 1387              		.loc 1 1856 0
 1388 0078 1E46     		mov	r6, r3
 1389              	.LVL152:
 1390              	.L143:
1857:../drivers/fsl_i2c.c ****         }
1858:../drivers/fsl_i2c.c ****         else
1859:../drivers/fsl_i2c.c ****         {
1860:../drivers/fsl_i2c.c ****             /* Slave receive, master writing to slave. */
1861:../drivers/fsl_i2c.c ****             base->C1 &= ~(I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
1862:../drivers/fsl_i2c.c **** 
1863:../drivers/fsl_i2c.c ****             /* Read dummy to release the bus. */
1864:../drivers/fsl_i2c.c ****             dummy = base->D;
1865:../drivers/fsl_i2c.c **** 
1866:../drivers/fsl_i2c.c ****             if (dummy == 0)
1867:../drivers/fsl_i2c.c ****             {
1868:../drivers/fsl_i2c.c ****                 xfer->event = kI2C_SlaveGenaralcallEvent;
1869:../drivers/fsl_i2c.c ****             }
1870:../drivers/fsl_i2c.c ****         }
1871:../drivers/fsl_i2c.c **** 
1872:../drivers/fsl_i2c.c ****         if ((handle->eventMask & xfer->event) && (handle->callback))
 1391              		.loc 1 1872 0
 1392 007a 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 1393 007c A369     		ldr	r3, [r4, #24]
 1394 007e 1A42     		tst	r2, r3
 1395 0080 05D0     		beq	.L144
 1396              		.loc 1 1872 0 is_stmt 0 discriminator 1
 1397 0082 E369     		ldr	r3, [r4, #28]
 1398 0084 1BB1     		cbz	r3, .L144
1873:../drivers/fsl_i2c.c ****         {
1874:../drivers/fsl_i2c.c ****             handle->callback(base, xfer, handle->userData);
 1399              		.loc 1 1874 0 is_stmt 1
 1400 0086 226A     		ldr	r2, [r4, #32]
 1401 0088 3946     		mov	r1, r7
 1402 008a 2846     		mov	r0, r5
 1403 008c 9847     		blx	r3
 1404              	.LVL153:
 1405              	.L144:
1875:../drivers/fsl_i2c.c ****         }
1876:../drivers/fsl_i2c.c ****     }
1877:../drivers/fsl_i2c.c ****     /* Check transfer complete flag. */
1878:../drivers/fsl_i2c.c ****     else if (status & kI2C_TransferCompleteFlag)
1879:../drivers/fsl_i2c.c ****     {
1880:../drivers/fsl_i2c.c ****         /* Slave transmit, master reading from slave. */
1881:../drivers/fsl_i2c.c ****         if (status & kI2C_TransferDirectionFlag)
1882:../drivers/fsl_i2c.c ****         {
1883:../drivers/fsl_i2c.c ****             doTransmit = true;
1884:../drivers/fsl_i2c.c ****         }
1885:../drivers/fsl_i2c.c ****         else
1886:../drivers/fsl_i2c.c ****         {
1887:../drivers/fsl_i2c.c ****             /* If we're out of data, invoke callback to get more. */
1888:../drivers/fsl_i2c.c ****             if ((!xfer->data) || (!xfer->dataSize))
1889:../drivers/fsl_i2c.c ****             {
1890:../drivers/fsl_i2c.c ****                 xfer->event = kI2C_SlaveReceiveEvent;
1891:../drivers/fsl_i2c.c **** 
1892:../drivers/fsl_i2c.c ****                 if (handle->callback)
1893:../drivers/fsl_i2c.c ****                 {
1894:../drivers/fsl_i2c.c ****                     handle->callback(base, xfer, handle->userData);
1895:../drivers/fsl_i2c.c ****                 }
1896:../drivers/fsl_i2c.c **** 
1897:../drivers/fsl_i2c.c ****                 /* Clear the transferred count now that we have a new buffer. */
1898:../drivers/fsl_i2c.c ****                 xfer->transferredCount = 0;
1899:../drivers/fsl_i2c.c ****             }
1900:../drivers/fsl_i2c.c **** 
1901:../drivers/fsl_i2c.c ****             /* Slave receive, master writing to slave. */
1902:../drivers/fsl_i2c.c ****             uint8_t data = base->D;
1903:../drivers/fsl_i2c.c **** 
1904:../drivers/fsl_i2c.c ****             if (handle->transfer.dataSize)
1905:../drivers/fsl_i2c.c ****             {
1906:../drivers/fsl_i2c.c ****                 /* Receive data. */
1907:../drivers/fsl_i2c.c ****                 *handle->transfer.data++ = data;
1908:../drivers/fsl_i2c.c ****                 handle->transfer.dataSize--;
1909:../drivers/fsl_i2c.c ****                 xfer->transferredCount++;
1910:../drivers/fsl_i2c.c ****                 if (!handle->transfer.dataSize)
1911:../drivers/fsl_i2c.c ****                 {
1912:../drivers/fsl_i2c.c **** #ifndef I2C_HAS_STOP_DETECT
1913:../drivers/fsl_i2c.c ****                     xfer->event = kI2C_SlaveCompletionEvent;
1914:../drivers/fsl_i2c.c ****                     xfer->completionStatus = kStatus_Success;
1915:../drivers/fsl_i2c.c ****                     handle->isBusy = false;
1916:../drivers/fsl_i2c.c **** 
1917:../drivers/fsl_i2c.c ****                     /* Proceed receive complete event. */
1918:../drivers/fsl_i2c.c ****                     if ((handle->eventMask & xfer->event) && (handle->callback))
1919:../drivers/fsl_i2c.c ****                     {
1920:../drivers/fsl_i2c.c ****                         handle->callback(base, xfer, handle->userData);
1921:../drivers/fsl_i2c.c ****                     }
1922:../drivers/fsl_i2c.c **** #endif /* !FSL_FEATURE_I2C_HAS_START_STOP_DETECT or !FSL_FEATURE_I2C_HAS_STOP_DETECT */
1923:../drivers/fsl_i2c.c ****                 }
1924:../drivers/fsl_i2c.c ****             }
1925:../drivers/fsl_i2c.c ****         }
1926:../drivers/fsl_i2c.c ****     }
1927:../drivers/fsl_i2c.c ****     else
1928:../drivers/fsl_i2c.c ****     {
1929:../drivers/fsl_i2c.c ****         /* Read dummy to release bus. */
1930:../drivers/fsl_i2c.c ****         dummy = base->D;
1931:../drivers/fsl_i2c.c ****     }
1932:../drivers/fsl_i2c.c **** 
1933:../drivers/fsl_i2c.c ****     /* Send data if there is the need. */
1934:../drivers/fsl_i2c.c ****     if (doTransmit)
 1406              		.loc 1 1934 0
 1407 008e 002E     		cmp	r6, #0
 1408 0090 53D1     		bne	.L152
 1409 0092 1AE0     		b	.L128
 1410              	.LVL154:
 1411              	.L129:
 1412              	.LBB68:
 1413              	.LBB69:
 454:../drivers/fsl_i2c.h ****     }
 1414              		.loc 3 454 0
 1415 0094 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 1416 0096 43F04003 		orr	r3, r3, #64
 1417 009a AB71     		strb	r3, [r5, #6]
 1418              	.LBE69:
 1419              	.LBE68:
1762:../drivers/fsl_i2c.c **** 
 1420              		.loc 1 1762 0
 1421 009c 0223     		movs	r3, #2
 1422              	.LBB71:
 1423              	.LBB70:
 1424              		.loc 3 458 0
 1425 009e 85F80380 		strb	r8, [r5, #3]
 1426              	.LVL155:
 1427              	.LBE70:
 1428              	.LBE71:
1762:../drivers/fsl_i2c.c **** 
 1429              		.loc 1 1762 0
 1430 00a2 EB70     		strb	r3, [r5, #3]
1765:../drivers/fsl_i2c.c ****         {
 1431              		.loc 1 1765 0
 1432 00a4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1433 00a6 73B1     		cbz	r3, .L133
1767:../drivers/fsl_i2c.c ****             xfer->completionStatus = kStatus_Success;
 1434              		.loc 1 1767 0
 1435 00a8 2023     		movs	r3, #32
 1436 00aa 2371     		strb	r3, [r4, #4]
1771:../drivers/fsl_i2c.c ****             {
 1437              		.loc 1 1771 0
 1438 00ac A369     		ldr	r3, [r4, #24]
1768:../drivers/fsl_i2c.c ****             handle->isBusy = false;
 1439              		.loc 1 1768 0
 1440 00ae C4F81080 		str	r8, [r4, #16]
1771:../drivers/fsl_i2c.c ****             {
 1441              		.loc 1 1771 0
 1442 00b2 9B06     		lsls	r3, r3, #26
1769:../drivers/fsl_i2c.c **** 
 1443              		.loc 1 1769 0
 1444 00b4 84F80080 		strb	r8, [r4]
1771:../drivers/fsl_i2c.c ****             {
 1445              		.loc 1 1771 0
 1446 00b8 05D5     		bpl	.L133
1771:../drivers/fsl_i2c.c ****             {
 1447              		.loc 1 1771 0 is_stmt 0 discriminator 1
 1448 00ba E369     		ldr	r3, [r4, #28]
 1449 00bc 1BB1     		cbz	r3, .L133
1773:../drivers/fsl_i2c.c ****             }
 1450              		.loc 1 1773 0 is_stmt 1
 1451 00be 226A     		ldr	r2, [r4, #32]
 1452 00c0 3946     		mov	r1, r7
 1453 00c2 2846     		mov	r0, r5
 1454              	.LVL156:
 1455 00c4 9847     		blx	r3
 1456              	.LVL157:
 1457              	.L133:
1777:../drivers/fsl_i2c.c ****         {
 1458              		.loc 1 1777 0
 1459 00c6 7006     		lsls	r0, r6, #25
 1460 00c8 AFD4     		bmi	.L135
 1461              	.LVL158:
 1462              	.L128:
1935:../drivers/fsl_i2c.c ****     {
1936:../drivers/fsl_i2c.c ****         /* If we're out of data, invoke callback to get more. */
1937:../drivers/fsl_i2c.c ****         if ((!xfer->data) || (!xfer->dataSize))
1938:../drivers/fsl_i2c.c ****         {
1939:../drivers/fsl_i2c.c ****             xfer->event = kI2C_SlaveTransmitEvent;
1940:../drivers/fsl_i2c.c **** 
1941:../drivers/fsl_i2c.c ****             if (handle->callback)
1942:../drivers/fsl_i2c.c ****             {
1943:../drivers/fsl_i2c.c ****                 handle->callback(base, xfer, handle->userData);
1944:../drivers/fsl_i2c.c ****             }
1945:../drivers/fsl_i2c.c **** 
1946:../drivers/fsl_i2c.c ****             /* Clear the transferred count now that we have a new buffer. */
1947:../drivers/fsl_i2c.c ****             xfer->transferredCount = 0;
1948:../drivers/fsl_i2c.c ****         }
1949:../drivers/fsl_i2c.c **** 
1950:../drivers/fsl_i2c.c ****         if (handle->transfer.dataSize)
1951:../drivers/fsl_i2c.c ****         {
1952:../drivers/fsl_i2c.c ****             /* Send data. */
1953:../drivers/fsl_i2c.c ****             base->D = *handle->transfer.data++;
1954:../drivers/fsl_i2c.c ****             handle->transfer.dataSize--;
1955:../drivers/fsl_i2c.c ****             xfer->transferredCount++;
1956:../drivers/fsl_i2c.c ****         }
1957:../drivers/fsl_i2c.c ****         else
1958:../drivers/fsl_i2c.c ****         {
1959:../drivers/fsl_i2c.c ****             /* Switch to receive mode. */
1960:../drivers/fsl_i2c.c ****             base->C1 &= ~(I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
1961:../drivers/fsl_i2c.c **** 
1962:../drivers/fsl_i2c.c ****             /* Read dummy to release bus. */
1963:../drivers/fsl_i2c.c ****             dummy = base->D;
1964:../drivers/fsl_i2c.c **** 
1965:../drivers/fsl_i2c.c **** #ifndef I2C_HAS_STOP_DETECT
1966:../drivers/fsl_i2c.c ****             xfer->event = kI2C_SlaveCompletionEvent;
1967:../drivers/fsl_i2c.c ****             xfer->completionStatus = kStatus_Success;
1968:../drivers/fsl_i2c.c ****             handle->isBusy = false;
1969:../drivers/fsl_i2c.c **** 
1970:../drivers/fsl_i2c.c ****             /* Proceed txdone event. */
1971:../drivers/fsl_i2c.c ****             if ((handle->eventMask & xfer->event) && (handle->callback))
1972:../drivers/fsl_i2c.c ****             {
1973:../drivers/fsl_i2c.c ****                 handle->callback(base, xfer, handle->userData);
1974:../drivers/fsl_i2c.c ****             }
1975:../drivers/fsl_i2c.c **** #endif /* !FSL_FEATURE_I2C_HAS_START_STOP_DETECT or !FSL_FEATURE_I2C_HAS_STOP_DETECT */
1976:../drivers/fsl_i2c.c ****         }
1977:../drivers/fsl_i2c.c ****     }
1978:../drivers/fsl_i2c.c **** }
 1463              		.loc 1 1978 0
 1464 00ca 02B0     		add	sp, sp, #8
 1465              		.cfi_remember_state
 1466              		.cfi_def_cfa_offset 24
 1467              		@ sp needed
 1468 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1469              	.LVL159:
 1470              	.L137:
 1471              		.cfi_restore_state
1814:../drivers/fsl_i2c.c **** 
 1472              		.loc 1 1814 0
 1473 00d0 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1474 00d2 03F0E703 		and	r3, r3, #231
 1475 00d6 AB70     		strb	r3, [r5, #2]
1817:../drivers/fsl_i2c.c **** 
 1476              		.loc 1 1817 0
 1477 00d8 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1478 00da DBB2     		uxtb	r3, r3
 1479 00dc 8DF80730 		strb	r3, [sp, #7]
1819:../drivers/fsl_i2c.c ****         {
 1480              		.loc 1 1819 0
 1481 00e0 E368     		ldr	r3, [r4, #12]
 1482 00e2 002B     		cmp	r3, #0
 1483 00e4 F1D0     		beq	.L128
1821:../drivers/fsl_i2c.c ****             xfer->completionStatus = kStatus_I2C_Nak;
 1484              		.loc 1 1821 0
 1485 00e6 2023     		movs	r3, #32
 1486 00e8 2371     		strb	r3, [r4, #4]
1822:../drivers/fsl_i2c.c ****             handle->isBusy = false;
 1487              		.loc 1 1822 0
 1488 00ea 40F24E43 		movw	r3, #1102
 1489 00ee 2361     		str	r3, [r4, #16]
1823:../drivers/fsl_i2c.c **** 
 1490              		.loc 1 1823 0
 1491 00f0 0023     		movs	r3, #0
 1492 00f2 2370     		strb	r3, [r4]
1825:../drivers/fsl_i2c.c ****             {
 1493              		.loc 1 1825 0
 1494 00f4 A369     		ldr	r3, [r4, #24]
 1495 00f6 9806     		lsls	r0, r3, #26
 1496 00f8 E7D5     		bpl	.L128
1825:../drivers/fsl_i2c.c ****             {
 1497              		.loc 1 1825 0 is_stmt 0 discriminator 1
 1498 00fa E369     		ldr	r3, [r4, #28]
 1499 00fc 002B     		cmp	r3, #0
 1500 00fe E4D0     		beq	.L128
1827:../drivers/fsl_i2c.c ****             }
 1501              		.loc 1 1827 0 is_stmt 1
 1502 0100 226A     		ldr	r2, [r4, #32]
 1503 0102 3946     		mov	r1, r7
 1504 0104 2846     		mov	r0, r5
 1505              		.loc 1 1978 0
 1506 0106 02B0     		add	sp, sp, #8
 1507              		.cfi_remember_state
 1508              		.cfi_def_cfa_offset 24
 1509              		@ sp needed
 1510 0108 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1511              		.cfi_restore 14
 1512              		.cfi_restore 8
 1513              		.cfi_restore 7
 1514              		.cfi_restore 6
 1515              		.cfi_restore 5
 1516              		.cfi_restore 4
 1517              		.cfi_def_cfa_offset 0
 1518              	.LVL160:
1827:../drivers/fsl_i2c.c ****             }
 1519              		.loc 1 1827 0
 1520 010c 1847     		bx	r3	@ indirect register sibling call
 1521              	.LVL161:
 1522              	.L142:
 1523              		.cfi_restore_state
1861:../drivers/fsl_i2c.c **** 
 1524              		.loc 1 1861 0
 1525 010e AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1526 0110 03F0E703 		and	r3, r3, #231
 1527 0114 AB70     		strb	r3, [r5, #2]
1864:../drivers/fsl_i2c.c **** 
 1528              		.loc 1 1864 0
 1529 0116 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1530 0118 DBB2     		uxtb	r3, r3
 1531 011a 8DF80730 		strb	r3, [sp, #7]
1866:../drivers/fsl_i2c.c ****             {
 1532              		.loc 1 1866 0
 1533 011e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1534 0122 03F0FF02 		and	r2, r3, #255
 1535 0126 002B     		cmp	r3, #0
 1536 0128 A7D1     		bne	.L143
1868:../drivers/fsl_i2c.c ****             }
 1537              		.loc 1 1868 0
 1538 012a 4023     		movs	r3, #64
 1539 012c 2371     		strb	r3, [r4, #4]
1744:../drivers/fsl_i2c.c ****     i2c_slave_handle_t *handle = (i2c_slave_handle_t *)i2cHandle;
 1540              		.loc 1 1744 0
 1541 012e 1646     		mov	r6, r2
 1542 0130 A3E7     		b	.L143
 1543              	.LVL162:
 1544              	.L141:
1878:../drivers/fsl_i2c.c ****     {
 1545              		.loc 1 1878 0
 1546 0132 3206     		lsls	r2, r6, #24
 1547 0134 42D5     		bpl	.L204
1881:../drivers/fsl_i2c.c ****         {
 1548              		.loc 1 1881 0
 1549 0136 7307     		lsls	r3, r6, #29
 1550 0138 0CD5     		bpl	.L146
 1551              	.LVL163:
 1552              	.L152:
1937:../drivers/fsl_i2c.c ****         {
 1553              		.loc 1 1937 0
 1554 013a A368     		ldr	r3, [r4, #8]
 1555 013c 4BBB     		cbnz	r3, .L203
 1556              	.L147:
1939:../drivers/fsl_i2c.c **** 
 1557              		.loc 1 1939 0
 1558 013e 0223     		movs	r3, #2
 1559 0140 2371     		strb	r3, [r4, #4]
1941:../drivers/fsl_i2c.c ****             {
 1560              		.loc 1 1941 0
 1561 0142 E369     		ldr	r3, [r4, #28]
 1562 0144 1BB1     		cbz	r3, .L154
1943:../drivers/fsl_i2c.c ****             }
 1563              		.loc 1 1943 0
 1564 0146 226A     		ldr	r2, [r4, #32]
 1565 0148 3946     		mov	r1, r7
 1566 014a 2846     		mov	r0, r5
 1567 014c 9847     		blx	r3
 1568              	.LVL164:
 1569              	.L154:
1947:../drivers/fsl_i2c.c ****         }
 1570              		.loc 1 1947 0
 1571 014e 0023     		movs	r3, #0
 1572 0150 6361     		str	r3, [r4, #20]
 1573 0152 21E0     		b	.L153
 1574              	.LVL165:
 1575              	.L146:
 1576              	.LBB72:
1888:../drivers/fsl_i2c.c ****             {
 1577              		.loc 1 1888 0
 1578 0154 A368     		ldr	r3, [r4, #8]
 1579 0156 0BB1     		cbz	r3, .L149
1888:../drivers/fsl_i2c.c ****             {
 1580              		.loc 1 1888 0 is_stmt 0 discriminator 1
 1581 0158 E368     		ldr	r3, [r4, #12]
 1582 015a 4BB9     		cbnz	r3, .L150
 1583              	.L149:
1890:../drivers/fsl_i2c.c **** 
 1584              		.loc 1 1890 0 is_stmt 1
 1585 015c 0423     		movs	r3, #4
 1586 015e 2371     		strb	r3, [r4, #4]
1892:../drivers/fsl_i2c.c ****                 {
 1587              		.loc 1 1892 0
 1588 0160 E369     		ldr	r3, [r4, #28]
 1589 0162 1BB1     		cbz	r3, .L151
1894:../drivers/fsl_i2c.c ****                 }
 1590              		.loc 1 1894 0
 1591 0164 226A     		ldr	r2, [r4, #32]
 1592 0166 3946     		mov	r1, r7
 1593 0168 2846     		mov	r0, r5
 1594 016a 9847     		blx	r3
 1595              	.LVL166:
 1596              	.L151:
1898:../drivers/fsl_i2c.c ****             }
 1597              		.loc 1 1898 0
 1598 016c 0023     		movs	r3, #0
 1599 016e 6361     		str	r3, [r4, #20]
 1600              	.L150:
1902:../drivers/fsl_i2c.c **** 
 1601              		.loc 1 1902 0
 1602 0170 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
1904:../drivers/fsl_i2c.c ****             {
 1603              		.loc 1 1904 0
 1604 0172 E268     		ldr	r2, [r4, #12]
1902:../drivers/fsl_i2c.c **** 
 1605              		.loc 1 1902 0
 1606 0174 DBB2     		uxtb	r3, r3
 1607              	.LVL167:
1904:../drivers/fsl_i2c.c ****             {
 1608              		.loc 1 1904 0
 1609 0176 002A     		cmp	r2, #0
 1610 0178 A7D0     		beq	.L128
1907:../drivers/fsl_i2c.c ****                 handle->transfer.dataSize--;
 1611              		.loc 1 1907 0
 1612 017a A268     		ldr	r2, [r4, #8]
 1613 017c 511C     		adds	r1, r2, #1
 1614 017e A160     		str	r1, [r4, #8]
 1615 0180 1370     		strb	r3, [r2]
1908:../drivers/fsl_i2c.c ****                 xfer->transferredCount++;
 1616              		.loc 1 1908 0
 1617 0182 E368     		ldr	r3, [r4, #12]
 1618              	.LVL168:
 1619 0184 013B     		subs	r3, r3, #1
 1620 0186 E360     		str	r3, [r4, #12]
 1621              	.LVL169:
1909:../drivers/fsl_i2c.c ****                 if (!handle->transfer.dataSize)
 1622              		.loc 1 1909 0
 1623 0188 6369     		ldr	r3, [r4, #20]
 1624 018a 0133     		adds	r3, r3, #1
 1625 018c 6361     		str	r3, [r4, #20]
1910:../drivers/fsl_i2c.c ****                 {
 1626              		.loc 1 1910 0
 1627 018e E368     		ldr	r3, [r4, #12]
 1628 0190 9BE7     		b	.L128
 1629              	.LVL170:
 1630              	.L203:
 1631              	.LBE72:
1937:../drivers/fsl_i2c.c ****         {
 1632              		.loc 1 1937 0 discriminator 1
 1633 0192 E368     		ldr	r3, [r4, #12]
 1634 0194 002B     		cmp	r3, #0
 1635 0196 D2D0     		beq	.L147
 1636              	.L153:
1950:../drivers/fsl_i2c.c ****         {
 1637              		.loc 1 1950 0
 1638 0198 E368     		ldr	r3, [r4, #12]
 1639 019a 5BB1     		cbz	r3, .L155
1953:../drivers/fsl_i2c.c ****             handle->transfer.dataSize--;
 1640              		.loc 1 1953 0
 1641 019c A368     		ldr	r3, [r4, #8]
 1642 019e 5A1C     		adds	r2, r3, #1
 1643 01a0 A260     		str	r2, [r4, #8]
 1644 01a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1645 01a4 2B71     		strb	r3, [r5, #4]
1954:../drivers/fsl_i2c.c ****             xfer->transferredCount++;
 1646              		.loc 1 1954 0
 1647 01a6 E368     		ldr	r3, [r4, #12]
 1648 01a8 013B     		subs	r3, r3, #1
 1649 01aa E360     		str	r3, [r4, #12]
1955:../drivers/fsl_i2c.c ****         }
 1650              		.loc 1 1955 0
 1651 01ac 6369     		ldr	r3, [r4, #20]
 1652 01ae 0133     		adds	r3, r3, #1
 1653 01b0 6361     		str	r3, [r4, #20]
 1654 01b2 8AE7     		b	.L128
 1655              	.L155:
1960:../drivers/fsl_i2c.c **** 
 1656              		.loc 1 1960 0
 1657 01b4 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1658 01b6 03F0E703 		and	r3, r3, #231
 1659 01ba AB70     		strb	r3, [r5, #2]
 1660              	.L204:
1963:../drivers/fsl_i2c.c **** 
 1661              		.loc 1 1963 0
 1662 01bc 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1663 01be DBB2     		uxtb	r3, r3
 1664 01c0 8DF80730 		strb	r3, [sp, #7]
 1665 01c4 81E7     		b	.L128
 1666              		.cfi_endproc
 1667              	.LFE186:
 1669              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 1670              		.align	1
 1671              		.global	I2C_MasterWriteBlocking
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1675              		.fpu fpv4-sp-d16
 1677              	I2C_MasterWriteBlocking:
 1678              	.LFB169:
 847:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 1679              		.loc 1 847 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683              		@ link register save eliminated.
 1684              	.LVL171:
 1685 0000 F0B4     		push	{r4, r5, r6, r7}
 1686              		.cfi_def_cfa_offset 16
 1687              		.cfi_offset 4, -16
 1688              		.cfi_offset 5, -12
 1689              		.cfi_offset 6, -8
 1690              		.cfi_offset 7, -4
 1691              	.L206:
 863:../drivers/fsl_i2c.c ****     {
 1692              		.loc 1 863 0 discriminator 1
 1693 0002 C478     		ldrb	r4, [r0, #3]	@ zero_extendqisi2
 1694 0004 2506     		lsls	r5, r4, #24
 1695 0006 FCD5     		bpl	.L206
 869:../drivers/fsl_i2c.c **** 
 1696              		.loc 1 869 0
 1697 0008 0224     		movs	r4, #2
 1698 000a C470     		strb	r4, [r0, #3]
 872:../drivers/fsl_i2c.c **** 
 1699              		.loc 1 872 0
 1700 000c 8578     		ldrb	r5, [r0, #2]	@ zero_extendqisi2
 1701 000e 45F01005 		orr	r5, r5, #16
 1702 0012 8570     		strb	r5, [r0, #2]
 1703 0014 013A     		subs	r2, r2, #1
 1704              	.LVL172:
 898:../drivers/fsl_i2c.c **** 
 1705              		.loc 1 898 0
 1706 0016 2646     		mov	r6, r4
 903:../drivers/fsl_i2c.c ****             result = kStatus_I2C_ArbitrationLost;
 1707              		.loc 1 903 0
 1708 0018 1027     		movs	r7, #16
 1709              	.LVL173:
 1710              	.L207:
 874:../drivers/fsl_i2c.c ****     {
 1711              		.loc 1 874 0
 1712 001a 541C     		adds	r4, r2, #1
 1713 001c 05D1     		bne	.L213
 920:../drivers/fsl_i2c.c ****     {
 1714              		.loc 1 920 0
 1715 001e 5B07     		lsls	r3, r3, #29
 1716              	.LVL174:
 1717 0020 17D5     		bpl	.L211
 1718 0022 0024     		movs	r4, #0
 1719              	.LVL175:
 1720              	.L205:
 930:../drivers/fsl_i2c.c **** 
 1721              		.loc 1 930 0
 1722 0024 2046     		mov	r0, r4
 1723              	.LVL176:
 1724 0026 F0BC     		pop	{r4, r5, r6, r7}
 1725              		.cfi_remember_state
 1726              		.cfi_restore 7
 1727              		.cfi_restore 6
 1728              		.cfi_restore 5
 1729              		.cfi_restore 4
 1730              		.cfi_def_cfa_offset 0
 1731 0028 7047     		bx	lr
 1732              	.LVL177:
 1733              	.L213:
 1734              		.cfi_restore_state
 877:../drivers/fsl_i2c.c **** 
 1735              		.loc 1 877 0
 1736 002a 11F8014B 		ldrb	r4, [r1], #1	@ zero_extendqisi2
 1737              	.LVL178:
 1738 002e 0471     		strb	r4, [r0, #4]
 1739              	.L208:
 891:../drivers/fsl_i2c.c ****         {
 1740              		.loc 1 891 0 discriminator 1
 1741 0030 C478     		ldrb	r4, [r0, #3]	@ zero_extendqisi2
 1742 0032 A407     		lsls	r4, r4, #30
 1743 0034 FCD5     		bpl	.L208
 895:../drivers/fsl_i2c.c **** 
 1744              		.loc 1 895 0
 1745 0036 C578     		ldrb	r5, [r0, #3]	@ zero_extendqisi2
 898:../drivers/fsl_i2c.c **** 
 1746              		.loc 1 898 0
 1747 0038 C670     		strb	r6, [r0, #3]
 895:../drivers/fsl_i2c.c **** 
 1748              		.loc 1 895 0
 1749 003a EDB2     		uxtb	r5, r5
 1750              	.LVL179:
 901:../drivers/fsl_i2c.c ****         {
 1751              		.loc 1 901 0
 1752 003c 15F01004 		ands	r4, r5, #16
 903:../drivers/fsl_i2c.c ****             result = kStatus_I2C_ArbitrationLost;
 1753              		.loc 1 903 0
 1754 0040 1CBF     		itt	ne
 1755 0042 C770     		strbne	r7, [r0, #3]
 1756              	.LVL180:
 904:../drivers/fsl_i2c.c ****         }
 1757              		.loc 1 904 0
 1758 0044 40F24F44 		movwne	r4, #1103
 1759              	.LVL181:
 907:../drivers/fsl_i2c.c ****         {
 1760              		.loc 1 907 0
 1761 0048 ED07     		lsls	r5, r5, #31
 1762              	.LVL182:
 1763 004a 07D5     		bpl	.L210
 907:../drivers/fsl_i2c.c ****         {
 1764              		.loc 1 907 0 is_stmt 0 discriminator 1
 1765 004c 32B1     		cbz	r2, .L210
 909:../drivers/fsl_i2c.c ****             result = kStatus_I2C_Nak;
 1766              		.loc 1 909 0 is_stmt 1
 1767 004e 0123     		movs	r3, #1
 1768              	.LVL183:
 1769 0050 C370     		strb	r3, [r0, #3]
 1770              	.LVL184:
 1771              	.L211:
 923:../drivers/fsl_i2c.c **** 
 1772              		.loc 1 923 0
 1773 0052 0223     		movs	r3, #2
 1774 0054 C370     		strb	r3, [r0, #3]
 930:../drivers/fsl_i2c.c **** 
 1775              		.loc 1 930 0
 1776 0056 F0BC     		pop	{r4, r5, r6, r7}
 1777              		.cfi_remember_state
 1778              		.cfi_restore 7
 1779              		.cfi_restore 6
 1780              		.cfi_restore 5
 1781              		.cfi_restore 4
 1782              		.cfi_def_cfa_offset 0
 926:../drivers/fsl_i2c.c ****     }
 1783              		.loc 1 926 0
 1784 0058 FFF7FEBF 		b	I2C_MasterStop
 1785              	.LVL185:
 1786              	.L210:
 1787              		.cfi_restore_state
 1788 005c 013A     		subs	r2, r2, #1
 1789              	.LVL186:
 913:../drivers/fsl_i2c.c ****         {
 1790              		.loc 1 913 0
 1791 005e 002C     		cmp	r4, #0
 1792 0060 DBD0     		beq	.L207
 920:../drivers/fsl_i2c.c ****     {
 1793              		.loc 1 920 0
 1794 0062 40F24E43 		movw	r3, #1102
 1795              	.LVL187:
 1796 0066 9C42     		cmp	r4, r3
 1797 0068 DCD1     		bne	.L205
 1798 006a F2E7     		b	.L211
 1799              		.cfi_endproc
 1800              	.LFE169:
 1802              		.section	.text.I2C_MasterReadBlocking,"ax",%progbits
 1803              		.align	1
 1804              		.global	I2C_MasterReadBlocking
 1805              		.syntax unified
 1806              		.thumb
 1807              		.thumb_func
 1808              		.fpu fpv4-sp-d16
 1810              	I2C_MasterReadBlocking:
 1811              	.LFB170:
 933:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 1812              		.loc 1 933 0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 8
 1815              		@ frame_needed = 0, uses_anonymous_args = 0
 1816              	.LVL188:
 1817 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1818              		.cfi_def_cfa_offset 32
 1819              		.cfi_offset 4, -20
 1820              		.cfi_offset 5, -16
 1821              		.cfi_offset 6, -12
 1822              		.cfi_offset 7, -8
 1823              		.cfi_offset 14, -4
 933:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 1824              		.loc 1 933 0
 1825 0002 0446     		mov	r4, r0
 935:../drivers/fsl_i2c.c **** 
 1826              		.loc 1 935 0
 1827 0004 0020     		movs	r0, #0
 1828              	.LVL189:
 1829 0006 8DF80700 		strb	r0, [sp, #7]
 938:../drivers/fsl_i2c.c **** 
 1830              		.loc 1 938 0
 1831 000a 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1832 000e 0130     		adds	r0, r0, #1
 1833 0010 C0B2     		uxtb	r0, r0
 1834 0012 8DF80700 		strb	r0, [sp, #7]
 1835              	.L232:
 952:../drivers/fsl_i2c.c ****     {
 1836              		.loc 1 952 0 discriminator 1
 1837 0016 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1838 0018 0006     		lsls	r0, r0, #24
 1839 001a FCD5     		bpl	.L232
 958:../drivers/fsl_i2c.c **** 
 1840              		.loc 1 958 0
 1841 001c 0220     		movs	r0, #2
 1842 001e E070     		strb	r0, [r4, #3]
 961:../drivers/fsl_i2c.c **** 
 1843              		.loc 1 961 0
 1844 0020 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 1845 0022 00F0E700 		and	r0, r0, #231
 1846 0026 A070     		strb	r0, [r4, #2]
 964:../drivers/fsl_i2c.c ****     {
 1847              		.loc 1 964 0
 1848 0028 012A     		cmp	r2, #1
 967:../drivers/fsl_i2c.c ****     }
 1849              		.loc 1 967 0
 1850 002a 02BF     		ittt	eq
 1851 002c A078     		ldrbeq	r0, [r4, #2]	@ zero_extendqisi2
 1852 002e 40F00800 		orreq	r0, r0, #8
 1853 0032 A070     		strbeq	r0, [r4, #2]
 971:../drivers/fsl_i2c.c **** 
 1854              		.loc 1 971 0
 1855 0034 2079     		ldrb	r0, [r4, #4]	@ zero_extendqisi2
 1856 0036 C0B2     		uxtb	r0, r0
 1857 0038 8DF80700 		strb	r0, [sp, #7]
 992:../drivers/fsl_i2c.c **** 
 1858              		.loc 1 992 0
 1859 003c 0226     		movs	r6, #2
 934:../drivers/fsl_i2c.c ****     volatile uint8_t dummy = 0;
 1860              		.loc 1 934 0
 1861 003e 0020     		movs	r0, #0
 997:../drivers/fsl_i2c.c ****             {
 1862              		.loc 1 997 0
 1863 0040 03F00407 		and	r7, r3, #4
 1864              	.LVL190:
 1865              	.L234:
 973:../drivers/fsl_i2c.c ****     {
 1866              		.loc 1 973 0
 1867 0044 12F1FF32 		adds	r2, r2, #-1
 1868              	.LVL191:
 1869 0048 01D2     		bcs	.L235
1020:../drivers/fsl_i2c.c **** 
 1870              		.loc 1 1020 0
 1871 004a 03B0     		add	sp, sp, #12
 1872              		.cfi_remember_state
 1873              		.cfi_def_cfa_offset 20
 1874              		@ sp needed
 1875 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 1876              	.LVL192:
 1877              	.L235:
 1878              		.cfi_restore_state
 987:../drivers/fsl_i2c.c ****         {
 1879              		.loc 1 987 0 discriminator 1
 1880 004e E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1881 0050 9B07     		lsls	r3, r3, #30
 1882 0052 FCD5     		bpl	.L235
 992:../drivers/fsl_i2c.c **** 
 1883              		.loc 1 992 0
 1884 0054 E670     		strb	r6, [r4, #3]
 995:../drivers/fsl_i2c.c ****         {
 1885              		.loc 1 995 0
 1886 0056 62B9     		cbnz	r2, .L236
 997:../drivers/fsl_i2c.c ****             {
 1887              		.loc 1 997 0
 1888 0058 37B9     		cbnz	r7, .L237
1000:../drivers/fsl_i2c.c ****             }
 1889              		.loc 1 1000 0
 1890 005a 2046     		mov	r0, r4
 1891 005c FFF7FEFF 		bl	I2C_MasterStop
 1892              	.LVL193:
 1893              	.L238:
1016:../drivers/fsl_i2c.c ****     }
 1894              		.loc 1 1016 0
 1895 0060 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1896 0062 01F8013B 		strb	r3, [r1], #1
 1897              	.LVL194:
 1898 0066 EDE7     		b	.L234
 1899              	.LVL195:
 1900              	.L237:
1005:../drivers/fsl_i2c.c ****             }
 1901              		.loc 1 1005 0
 1902 0068 A578     		ldrb	r5, [r4, #2]	@ zero_extendqisi2
 1903 006a 45F01005 		orr	r5, r5, #16
 1904              	.L243:
1012:../drivers/fsl_i2c.c ****         }
 1905              		.loc 1 1012 0
 1906 006e A570     		strb	r5, [r4, #2]
 1907 0070 F6E7     		b	.L238
 1908              	.L236:
1009:../drivers/fsl_i2c.c ****         {
 1909              		.loc 1 1009 0
 1910 0072 012A     		cmp	r2, #1
 1911 0074 F4D1     		bne	.L238
1012:../drivers/fsl_i2c.c ****         }
 1912              		.loc 1 1012 0
 1913 0076 A578     		ldrb	r5, [r4, #2]	@ zero_extendqisi2
 1914 0078 45F00805 		orr	r5, r5, #8
 1915 007c F7E7     		b	.L243
 1916              		.cfi_endproc
 1917              	.LFE170:
 1919              		.section	.text.I2C_MasterTransferBlocking,"ax",%progbits
 1920              		.align	1
 1921              		.global	I2C_MasterTransferBlocking
 1922              		.syntax unified
 1923              		.thumb
 1924              		.thumb_func
 1925              		.fpu fpv4-sp-d16
 1927              	I2C_MasterTransferBlocking:
 1928              	.LFB171:
1023:../drivers/fsl_i2c.c ****     assert(xfer);
 1929              		.loc 1 1023 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 0
 1932              		@ frame_needed = 0, uses_anonymous_args = 0
 1933              	.LVL196:
 1934 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1935              		.cfi_def_cfa_offset 24
 1936              		.cfi_offset 4, -24
 1937              		.cfi_offset 5, -20
 1938              		.cfi_offset 6, -16
 1939              		.cfi_offset 7, -12
 1940              		.cfi_offset 8, -8
 1941              		.cfi_offset 14, -4
 1942              	.LBB75:
 1943              	.LBB76:
 446:../drivers/fsl_i2c.h ****     }
 1944              		.loc 3 446 0
 1945 0004 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1946              	.LBE76:
 1947              	.LBE75:
1026:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 1948              		.loc 1 1026 0
 1949 0006 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1950              	.LVL197:
 1951              	.LBB79:
 1952              	.LBB77:
 446:../drivers/fsl_i2c.h ****     }
 1953              		.loc 3 446 0
 1954 0008 43F05003 		orr	r3, r3, #80
 1955 000c 8371     		strb	r3, [r0, #6]
 454:../drivers/fsl_i2c.h ****     }
 1956              		.loc 3 454 0
 1957 000e 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1958 0010 43F05003 		orr	r3, r3, #80
 1959 0014 8371     		strb	r3, [r0, #6]
 1960              		.loc 3 458 0
 1961 0016 1223     		movs	r3, #18
 1962              	.LBE77:
 1963              	.LBE79:
1023:../drivers/fsl_i2c.c ****     assert(xfer);
 1964              		.loc 1 1023 0
 1965 0018 0446     		mov	r4, r0
 1966 001a 0D46     		mov	r5, r1
 1967              	.LBB80:
 1968              	.LBB78:
 1969              		.loc 3 458 0
 1970 001c C370     		strb	r3, [r0, #3]
 1971              	.L245:
 1972              	.LBE78:
 1973              	.LBE80:
1044:../drivers/fsl_i2c.c ****     {
 1974              		.loc 1 1044 0 discriminator 1
 1975 001e E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1976 0020 1B06     		lsls	r3, r3, #24
 1977 0022 FCD5     		bpl	.L245
1050:../drivers/fsl_i2c.c ****     {
 1978              		.loc 1 1050 0
 1979 0024 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 1980 0026 13B1     		cbz	r3, .L246
1052:../drivers/fsl_i2c.c ****     }
 1981              		.loc 1 1052 0 discriminator 1
 1982 0028 012A     		cmp	r2, #1
 1983 002a 08BF     		it	eq
 1984 002c 0022     		moveq	r2, #0
 1985              	.LVL198:
 1986              	.L246:
1056:../drivers/fsl_i2c.c ****     {
 1987              		.loc 1 1056 0
 1988 002e 2B68     		ldr	r3, [r5]
 1989 0030 DF07     		lsls	r7, r3, #31
 1990 0032 1BD5     		bpl	.L247
1058:../drivers/fsl_i2c.c ****         {
 1991              		.loc 1 1058 0
 1992 0034 012A     		cmp	r2, #1
 1993 0036 78D0     		beq	.L263
1027:../drivers/fsl_i2c.c **** 
 1994              		.loc 1 1027 0
 1995 0038 0026     		movs	r6, #0
 1996              	.LVL199:
 1997              	.L249:
1073:../drivers/fsl_i2c.c ****     {
 1998              		.loc 1 1073 0
 1999 003a 2B68     		ldr	r3, [r5]
 2000 003c D807     		lsls	r0, r3, #31
 2001 003e 20D4     		bmi	.L251
1076:../drivers/fsl_i2c.c ****         {
 2002              		.loc 1 1076 0
 2003 0040 8EB9     		cbnz	r6, .L244
 2004              	.L252:
1093:../drivers/fsl_i2c.c ****         {
 2005              		.loc 1 1093 0 discriminator 1
 2006 0042 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2007 0044 9907     		lsls	r1, r3, #30
 2008 0046 FCD5     		bpl	.L252
1098:../drivers/fsl_i2c.c **** 
 2009              		.loc 1 1098 0
 2010 0048 E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 2011 004a 2046     		mov	r0, r4
 2012 004c FFF7FEFF 		bl	I2C_CheckAndClearError
 2013              	.LVL200:
1101:../drivers/fsl_i2c.c ****         {
 2014              		.loc 1 1101 0
 2015 0050 0646     		mov	r6, r0
 2016 0052 B0B1     		cbz	r0, .L251
1103:../drivers/fsl_i2c.c ****             {
 2017              		.loc 1 1103 0
 2018 0054 40F24E43 		movw	r3, #1102
 2019 0058 9842     		cmp	r0, r3
 2020 005a 04D1     		bne	.L244
 2021              	.L260:
 2022              	.LVL201:
1107:../drivers/fsl_i2c.c ****             }
 2023              		.loc 1 1107 0
 2024 005c 2046     		mov	r0, r4
 2025 005e FFF7FEFF 		bl	I2C_MasterStop
 2026              	.LVL202:
1105:../drivers/fsl_i2c.c **** 
 2027              		.loc 1 1105 0
 2028 0062 40F25146 		movw	r6, #1105
 2029              	.LVL203:
 2030              	.L244:
1219:../drivers/fsl_i2c.c **** 
 2031              		.loc 1 1219 0
 2032 0066 3046     		mov	r0, r6
 2033 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2034              	.LVL204:
 2035              	.L247:
1064:../drivers/fsl_i2c.c ****     {
 2036              		.loc 1 1064 0
 2037 006c 9E07     		lsls	r6, r3, #30
 2038 006e 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 2039              	.LVL205:
1066:../drivers/fsl_i2c.c ****     }
 2040              		.loc 1 1066 0
 2041 0070 2046     		mov	r0, r4
 2042              	.LVL206:
1064:../drivers/fsl_i2c.c ****     {
 2043              		.loc 1 1064 0
 2044 0072 03D5     		bpl	.L250
 2045              	.LVL207:
1066:../drivers/fsl_i2c.c ****     }
 2046              		.loc 1 1066 0
 2047 0074 FFF7FEFF 		bl	I2C_MasterRepeatedStart
 2048              	.LVL208:
 2049              	.L291:
1070:../drivers/fsl_i2c.c ****     }
 2050              		.loc 1 1070 0
 2051 0078 0646     		mov	r6, r0
 2052              	.LVL209:
 2053 007a DEE7     		b	.L249
 2054              	.LVL210:
 2055              	.L250:
 2056 007c FFF7FEFF 		bl	I2C_MasterStart
 2057              	.LVL211:
 2058 0080 FAE7     		b	.L291
 2059              	.LVL212:
 2060              	.L251:
1115:../drivers/fsl_i2c.c ****     {
 2061              		.loc 1 1115 0
 2062 0082 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 2063 0084 002B     		cmp	r3, #0
 2064 0086 37D0     		beq	.L253
1120:../drivers/fsl_i2c.c **** 
 2065              		.loc 1 1120 0
 2066 0088 0227     		movs	r7, #2
 2067              	.L256:
 2068 008a E770     		strb	r7, [r4, #3]
1122:../drivers/fsl_i2c.c ****             base->D = ((xfer->subaddress) >> (8 * xfer->subaddressSize));
 2069              		.loc 1 1122 0
 2070 008c 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
1123:../drivers/fsl_i2c.c **** 
 2071              		.loc 1 1123 0
 2072 008e AA68     		ldr	r2, [r5, #8]
1122:../drivers/fsl_i2c.c ****             base->D = ((xfer->subaddress) >> (8 * xfer->subaddressSize));
 2073              		.loc 1 1122 0
 2074 0090 013B     		subs	r3, r3, #1
 2075 0092 DBB2     		uxtb	r3, r3
 2076 0094 2B73     		strb	r3, [r5, #12]
1123:../drivers/fsl_i2c.c **** 
 2077              		.loc 1 1123 0
 2078 0096 DB00     		lsls	r3, r3, #3
 2079 0098 22FA03F3 		lsr	r3, r2, r3
 2080 009c DBB2     		uxtb	r3, r3
 2081 009e 2371     		strb	r3, [r4, #4]
 2082              	.L254:
1137:../drivers/fsl_i2c.c ****             {
 2083              		.loc 1 1137 0 discriminator 1
 2084 00a0 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2085 00a2 9A07     		lsls	r2, r3, #30
 2086 00a4 FCD5     		bpl	.L254
1143:../drivers/fsl_i2c.c **** 
 2087              		.loc 1 1143 0
 2088 00a6 E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 2089 00a8 2046     		mov	r0, r4
 2090 00aa FFF7FEFF 		bl	I2C_CheckAndClearError
 2091              	.LVL213:
1145:../drivers/fsl_i2c.c ****             {
 2092              		.loc 1 1145 0
 2093 00ae 0646     		mov	r6, r0
 2094 00b0 38B1     		cbz	r0, .L255
1147:../drivers/fsl_i2c.c ****                 {
 2095              		.loc 1 1147 0
 2096 00b2 40F24E43 		movw	r3, #1102
 2097 00b6 9842     		cmp	r0, r3
 2098 00b8 D5D1     		bne	.L244
1149:../drivers/fsl_i2c.c ****                 }
 2099              		.loc 1 1149 0
 2100 00ba 2046     		mov	r0, r4
 2101              	.LVL214:
 2102 00bc FFF7FEFF 		bl	I2C_MasterStop
 2103              	.LVL215:
 2104 00c0 D1E7     		b	.L244
 2105              	.LVL216:
 2106              	.L255:
1155:../drivers/fsl_i2c.c **** 
 2107              		.loc 1 1155 0
 2108 00c2 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 2109 00c4 002B     		cmp	r3, #0
 2110 00c6 E0D1     		bne	.L256
1157:../drivers/fsl_i2c.c ****         {
 2111              		.loc 1 1157 0
 2112 00c8 6A79     		ldrb	r2, [r5, #5]	@ zero_extendqisi2
 2113 00ca 012A     		cmp	r2, #1
 2114 00cc 14D1     		bne	.L253
1160:../drivers/fsl_i2c.c **** 
 2115              		.loc 1 1160 0
 2116 00ce 0223     		movs	r3, #2
 2117 00d0 E370     		strb	r3, [r4, #3]
1163:../drivers/fsl_i2c.c **** 
 2118              		.loc 1 1163 0
 2119 00d2 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 2120 00d4 2046     		mov	r0, r4
 2121              	.LVL217:
 2122 00d6 FFF7FEFF 		bl	I2C_MasterRepeatedStart
 2123              	.LVL218:
1166:../drivers/fsl_i2c.c ****             {
 2124              		.loc 1 1166 0
 2125 00da 58B9     		cbnz	r0, .L264
 2126              	.L258:
1183:../drivers/fsl_i2c.c ****             {
 2127              		.loc 1 1183 0 discriminator 1
 2128 00dc E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2129 00de 9B07     		lsls	r3, r3, #30
 2130 00e0 FCD5     		bpl	.L258
1189:../drivers/fsl_i2c.c **** 
 2131              		.loc 1 1189 0
 2132 00e2 E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 2133 00e4 2046     		mov	r0, r4
 2134              	.LVL219:
 2135 00e6 FFF7FEFF 		bl	I2C_CheckAndClearError
 2136              	.LVL220:
1191:../drivers/fsl_i2c.c ****             {
 2137              		.loc 1 1191 0
 2138 00ea 28B1     		cbz	r0, .L253
1193:../drivers/fsl_i2c.c ****                 {
 2139              		.loc 1 1193 0
 2140 00ec 40F24E43 		movw	r3, #1102
 2141 00f0 9842     		cmp	r0, r3
 2142 00f2 B3D0     		beq	.L260
 2143              	.L264:
 2144 00f4 0646     		mov	r6, r0
 2145 00f6 B6E7     		b	.L244
 2146              	.LVL221:
 2147              	.L253:
1206:../drivers/fsl_i2c.c ****     {
 2148              		.loc 1 1206 0
 2149 00f8 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 2150 00fa 43B9     		cbnz	r3, .L261
1206:../drivers/fsl_i2c.c ****     {
 2151              		.loc 1 1206 0 is_stmt 0 discriminator 1
 2152 00fc 6B69     		ldr	r3, [r5, #20]
 2153 00fe 33B1     		cbz	r3, .L261
1209:../drivers/fsl_i2c.c ****     }
 2154              		.loc 1 1209 0 is_stmt 1
 2155 0100 2969     		ldr	r1, [r5, #16]
 2156 0102 2B68     		ldr	r3, [r5]
 2157 0104 6A69     		ldr	r2, [r5, #20]
 2158 0106 2046     		mov	r0, r4
 2159 0108 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2160              	.LVL222:
 2161 010c 0646     		mov	r6, r0
 2162              	.LVL223:
 2163              	.L261:
1213:../drivers/fsl_i2c.c ****     {
 2164              		.loc 1 1213 0
 2165 010e 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 2166 0110 012B     		cmp	r3, #1
 2167 0112 A8D1     		bne	.L244
1213:../drivers/fsl_i2c.c ****     {
 2168              		.loc 1 1213 0 is_stmt 0 discriminator 1
 2169 0114 6B69     		ldr	r3, [r5, #20]
 2170 0116 002B     		cmp	r3, #0
 2171 0118 A5D0     		beq	.L244
1215:../drivers/fsl_i2c.c ****     }
 2172              		.loc 1 1215 0 is_stmt 1
 2173 011a 2969     		ldr	r1, [r5, #16]
 2174 011c 2B68     		ldr	r3, [r5]
 2175 011e 6A69     		ldr	r2, [r5, #20]
 2176 0120 2046     		mov	r0, r4
1219:../drivers/fsl_i2c.c **** 
 2177              		.loc 1 1219 0
 2178 0122 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2179              		.cfi_remember_state
 2180              		.cfi_restore 14
 2181              		.cfi_restore 8
 2182              		.cfi_restore 7
 2183              		.cfi_restore 6
 2184              		.cfi_restore 5
 2185              		.cfi_restore 4
 2186              		.cfi_def_cfa_offset 0
 2187              	.LVL224:
1215:../drivers/fsl_i2c.c ****     }
 2188              		.loc 1 1215 0
 2189 0126 FFF7FEBF 		b	I2C_MasterReadBlocking
 2190              	.LVL225:
 2191              	.L263:
 2192              		.cfi_restore_state
1060:../drivers/fsl_i2c.c ****         }
 2193              		.loc 1 1060 0
 2194 012a 0426     		movs	r6, #4
 2195 012c 9BE7     		b	.L244
 2196              		.cfi_endproc
 2197              	.LFE171:
 2199              		.section	.text.I2C_MasterTransferCreateHandle,"ax",%progbits
 2200              		.align	1
 2201              		.global	I2C_MasterTransferCreateHandle
 2202              		.syntax unified
 2203              		.thumb
 2204              		.thumb_func
 2205              		.fpu fpv4-sp-d16
 2207              	I2C_MasterTransferCreateHandle:
 2208              	.LFB172:
1225:../drivers/fsl_i2c.c ****     assert(handle);
 2209              		.loc 1 1225 0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 0
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              	.LVL226:
 2214 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2215              		.cfi_def_cfa_offset 24
 2216              		.cfi_offset 3, -24
 2217              		.cfi_offset 4, -20
 2218              		.cfi_offset 5, -16
 2219              		.cfi_offset 6, -12
 2220              		.cfi_offset 7, -8
 2221              		.cfi_offset 14, -4
1225:../drivers/fsl_i2c.c ****     assert(handle);
 2222              		.loc 1 1225 0
 2223 0002 0C46     		mov	r4, r1
 2224 0004 1E46     		mov	r6, r3
 2225 0006 1746     		mov	r7, r2
1228:../drivers/fsl_i2c.c **** 
 2226              		.loc 1 1228 0
 2227 0008 FFF7FEFF 		bl	I2C_GetInstance
 2228              	.LVL227:
1231:../drivers/fsl_i2c.c **** 
 2229              		.loc 1 1231 0
 2230 000c 2022     		movs	r2, #32
 2231              	.LVL228:
1228:../drivers/fsl_i2c.c **** 
 2232              		.loc 1 1228 0
 2233 000e 0546     		mov	r5, r0
 2234              	.LVL229:
1231:../drivers/fsl_i2c.c **** 
 2235              		.loc 1 1231 0
 2236 0010 0021     		movs	r1, #0
 2237              	.LVL230:
 2238 0012 2046     		mov	r0, r4
 2239              	.LVL231:
 2240 0014 FFF7FEFF 		bl	memset
 2241              	.LVL232:
1238:../drivers/fsl_i2c.c **** 
 2242              		.loc 1 1238 0
 2243 0018 0A4B     		ldr	r3, .L294
1241:../drivers/fsl_i2c.c **** 
 2244              		.loc 1 1241 0
 2245 001a 0B4A     		ldr	r2, .L294+4
1238:../drivers/fsl_i2c.c **** 
 2246              		.loc 1 1238 0
 2247 001c 43F82540 		str	r4, [r3, r5, lsl #2]
1241:../drivers/fsl_i2c.c **** 
 2248              		.loc 1 1241 0
 2249 0020 0A4B     		ldr	r3, .L294+8
 2250 0022 1A60     		str	r2, [r3]
1244:../drivers/fsl_i2c.c **** }
 2251              		.loc 1 1244 0
 2252 0024 0A4B     		ldr	r3, .L294+12
 2253 0026 5B57     		ldrsb	r3, [r3, r5]
 2254              	.LVL233:
 2255              	.LBB85:
 2256              	.LBB86:
 2257              	.LBB87:
 2258              		.file 5 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
 2259              		.loc 5 1674 0
 2260 0028 002B     		cmp	r3, #0
 2261              	.LBE87:
 2262              	.LBE86:
 2263              	.LBE85:
1235:../drivers/fsl_i2c.c **** 
 2264              		.loc 1 1235 0
 2265 002a C4E90876 		strd	r7, r6, [r4, #32]
 2266              	.LBB90:
 2267              	.LBB89:
 2268              	.LBB88:
 2269              		.loc 5 1674 0
 2270 002e 08DB     		blt	.L292
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 2271              		.loc 5 1676 0
 2272 0030 5909     		lsrs	r1, r3, #5
 2273 0032 0122     		movs	r2, #1
 2274 0034 03F01F03 		and	r3, r3, #31
 2275              	.LVL234:
 2276 0038 02FA03F3 		lsl	r3, r2, r3
 2277 003c 054A     		ldr	r2, .L294+16
 2278 003e 42F82130 		str	r3, [r2, r1, lsl #2]
 2279              	.LVL235:
 2280              	.L292:
 2281              	.LBE88:
 2282              	.LBE89:
 2283              	.LBE90:
1245:../drivers/fsl_i2c.c **** 
 2284              		.loc 1 1245 0
 2285 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2286              	.LVL236:
 2287              	.L295:
 2288              		.align	2
 2289              	.L294:
 2290 0044 00000000 		.word	.LANCHOR4
 2291 0048 00000000 		.word	I2C_MasterTransferHandleIRQ
 2292 004c 00000000 		.word	.LANCHOR0
 2293 0050 00000000 		.word	.LANCHOR5
 2294 0054 00E100E0 		.word	-536813312
 2295              		.cfi_endproc
 2296              	.LFE172:
 2298              		.section	.text.I2C_MasterTransferNonBlocking,"ax",%progbits
 2299              		.align	1
 2300              		.global	I2C_MasterTransferNonBlocking
 2301              		.syntax unified
 2302              		.thumb
 2303              		.thumb_func
 2304              		.fpu fpv4-sp-d16
 2306              	I2C_MasterTransferNonBlocking:
 2307              	.LFB173:
1248:../drivers/fsl_i2c.c ****     assert(handle);
 2308              		.loc 1 1248 0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 0
 2311              		@ frame_needed = 0, uses_anonymous_args = 0
 2312              	.LVL237:
 2313 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2314              		.cfi_def_cfa_offset 24
 2315              		.cfi_offset 3, -24
 2316              		.cfi_offset 4, -20
 2317              		.cfi_offset 5, -16
 2318              		.cfi_offset 6, -12
 2319              		.cfi_offset 7, -8
 2320              		.cfi_offset 14, -4
1255:../drivers/fsl_i2c.c ****     {
 2321              		.loc 1 1255 0
 2322 0002 0B7F     		ldrb	r3, [r1, #28]	@ zero_extendqisi2
1248:../drivers/fsl_i2c.c ****     assert(handle);
 2323              		.loc 1 1248 0
 2324 0004 0446     		mov	r4, r0
 2325 0006 0D46     		mov	r5, r1
 2326 0008 9646     		mov	lr, r2
1255:../drivers/fsl_i2c.c ****     {
 2327              		.loc 1 1255 0
 2328 000a 002B     		cmp	r3, #0
 2329 000c 45D1     		bne	.L306
 2330              	.LVL238:
 2331              	.LBB95:
 2332              	.LBB96:
 244:../drivers/fsl_i2c.c **** 
 2333              		.loc 1 244 0
 2334 000e 1746     		mov	r7, r2
 241:../drivers/fsl_i2c.c **** 
 2335              		.loc 1 241 0
 2336 0010 92F805C0 		ldrb	ip, [r2, #5]	@ zero_extendqisi2
 2337              	.LVL239:
 244:../drivers/fsl_i2c.c **** 
 2338              		.loc 1 244 0
 2339 0014 0E46     		mov	r6, r1
 2340 0016 0FCF     		ldmia	r7!, {r0, r1, r2, r3}
 2341              	.LVL240:
 2342 0018 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 2343 001a 97E80300 		ldm	r7, {r0, r1}
 2344 001e 86E80300 		stm	r6, {r0, r1}
 250:../drivers/fsl_i2c.c ****     {
 2345              		.loc 1 250 0
 2346 0022 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 247:../drivers/fsl_i2c.c **** 
 2347              		.loc 1 247 0
 2348 0024 DEF81430 		ldr	r3, [lr, #20]
 2349 0028 AB61     		str	r3, [r5, #24]
 250:../drivers/fsl_i2c.c ****     {
 2350              		.loc 1 250 0
 2351 002a 2AB1     		cbz	r2, .L298
 252:../drivers/fsl_i2c.c ****         {
 2352              		.loc 1 252 0
 2353 002c 9EF80530 		ldrb	r3, [lr, #5]	@ zero_extendqisi2
 254:../drivers/fsl_i2c.c ****         }
 2354              		.loc 1 254 0
 2355 0030 012B     		cmp	r3, #1
 2356 0032 08BF     		it	eq
 2357 0034 4FF0000C 		moveq	ip, #0
 2358              	.LVL241:
 2359              	.L298:
 258:../drivers/fsl_i2c.c **** 
 2360              		.loc 1 258 0
 2361 0038 0123     		movs	r3, #1
 2362 003a 2B77     		strb	r3, [r5, #28]
 2363              	.LVL242:
 2364              	.LBB97:
 2365              	.LBB98:
 446:../drivers/fsl_i2c.h ****     }
 2366              		.loc 3 446 0
 2367 003c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2368 003e 43F05003 		orr	r3, r3, #80
 2369 0042 A371     		strb	r3, [r4, #6]
 454:../drivers/fsl_i2c.h ****     }
 2370              		.loc 3 454 0
 2371 0044 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2372 0046 43F05003 		orr	r3, r3, #80
 2373 004a A371     		strb	r3, [r4, #6]
 2374              		.loc 3 458 0
 2375 004c 1223     		movs	r3, #18
 2376 004e E370     		strb	r3, [r4, #3]
 2377              	.LVL243:
 2378              	.LBE98:
 2379              	.LBE97:
 264:../drivers/fsl_i2c.c ****     {
 2380              		.loc 1 264 0
 2381 0050 2B68     		ldr	r3, [r5]
 2382 0052 D907     		lsls	r1, r3, #31
 2383 0054 14D5     		bpl	.L299
 267:../drivers/fsl_i2c.c ****         {
 2384              		.loc 1 267 0
 2385 0056 72B1     		cbz	r2, .L300
 269:../drivers/fsl_i2c.c ****         }
 2386              		.loc 1 269 0
 2387 0058 0223     		movs	r3, #2
 2388              	.L313:
 276:../drivers/fsl_i2c.c ****             }
 2389              		.loc 1 276 0
 2390 005a 2B77     		strb	r3, [r5, #28]
 2391              	.L301:
 286:../drivers/fsl_i2c.c ****         {
 2392              		.loc 1 286 0
 2393 005c E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2394 005e 1A06     		lsls	r2, r3, #24
 2395 0060 FCD5     		bpl	.L301
 289:../drivers/fsl_i2c.c ****     }
 2396              		.loc 1 289 0
 2397 0062 2946     		mov	r1, r5
 2398 0064 2046     		mov	r0, r4
 2399 0066 FFF7FEFF 		bl	I2C_MasterTransferHandleIRQ
 2400              	.LVL244:
 2401              	.L303:
 2402              	.LBE96:
 2403              	.LBE95:
1267:../drivers/fsl_i2c.c ****         }
 2404              		.loc 1 1267 0
 2405 006a 2046     		mov	r0, r4
 2406 006c 4021     		movs	r1, #64
 2407 006e FFF7FEFF 		bl	I2C_EnableInterrupts
 2408              	.LVL245:
1262:../drivers/fsl_i2c.c **** 
 2409              		.loc 1 1262 0
 2410 0072 0020     		movs	r0, #0
 2411 0074 0DE0     		b	.L296
 2412              	.LVL246:
 2413              	.L300:
 2414              	.LBB102:
 2415              	.LBB99:
 273:../drivers/fsl_i2c.c ****             {
 2416              		.loc 1 273 0
 2417 0076 BCF1000F 		cmp	ip, #0
 2418 007a 11D1     		bne	.L308
 276:../drivers/fsl_i2c.c ****             }
 2419              		.loc 1 276 0
 2420 007c 0323     		movs	r3, #3
 2421 007e ECE7     		b	.L313
 2422              	.L299:
 292:../drivers/fsl_i2c.c ****     {
 2423              		.loc 1 292 0
 2424 0080 9B07     		lsls	r3, r3, #30
 2425 0082 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 294:../drivers/fsl_i2c.c ****     }
 2426              		.loc 1 294 0
 2427 0084 6246     		mov	r2, ip
 2428 0086 2046     		mov	r0, r4
 292:../drivers/fsl_i2c.c ****     {
 2429              		.loc 1 292 0
 2430 0088 04D5     		bpl	.L304
 2431              	.LVL247:
 294:../drivers/fsl_i2c.c ****     }
 2432              		.loc 1 294 0
 2433 008a FFF7FEFF 		bl	I2C_MasterRepeatedStart
 2434              	.LVL248:
 2435              	.L305:
 2436              	.LBE99:
 2437              	.LBE102:
1264:../drivers/fsl_i2c.c ****         {
 2438              		.loc 1 1264 0
 2439 008e 0028     		cmp	r0, #0
 2440 0090 EBD0     		beq	.L303
 2441              	.LVL249:
 2442              	.L296:
1272:../drivers/fsl_i2c.c **** 
 2443              		.loc 1 1272 0
 2444 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2445              	.LVL250:
 2446              	.L304:
 2447              	.LBB103:
 2448              	.LBB100:
 298:../drivers/fsl_i2c.c ****     }
 2449              		.loc 1 298 0
 2450 0094 FFF7FEFF 		bl	I2C_MasterStart
 2451              	.LVL251:
 2452 0098 F9E7     		b	.L305
 2453              	.LVL252:
 2454              	.L306:
 2455              	.LBE100:
 2456              	.LBE103:
1257:../drivers/fsl_i2c.c ****     }
 2457              		.loc 1 1257 0
 2458 009a 40F24C40 		movw	r0, #1100
 2459              	.LVL253:
 2460 009e F8E7     		b	.L296
 2461              	.LVL254:
 2462              	.L308:
 2463              	.LBB104:
 2464              	.LBB101:
 281:../drivers/fsl_i2c.c ****             }
 2465              		.loc 1 281 0
 2466 00a0 0420     		movs	r0, #4
 2467              	.LVL255:
 2468              	.LBE101:
 2469              	.LBE104:
1271:../drivers/fsl_i2c.c **** }
 2470              		.loc 1 1271 0
 2471 00a2 F6E7     		b	.L296
 2472              		.cfi_endproc
 2473              	.LFE173:
 2475              		.section	.text.I2C_MasterTransferAbort,"ax",%progbits
 2476              		.align	1
 2477              		.global	I2C_MasterTransferAbort
 2478              		.syntax unified
 2479              		.thumb
 2480              		.thumb_func
 2481              		.fpu fpv4-sp-d16
 2483              	I2C_MasterTransferAbort:
 2484              	.LFB174:
1275:../drivers/fsl_i2c.c ****     assert(handle);
 2485              		.loc 1 1275 0
 2486              		.cfi_startproc
 2487              		@ args = 0, pretend = 0, frame = 8
 2488              		@ frame_needed = 0, uses_anonymous_args = 0
 2489              	.LVL256:
 2490 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 2491              		.cfi_def_cfa_offset 24
 2492              		.cfi_offset 4, -16
 2493              		.cfi_offset 5, -12
 2494              		.cfi_offset 6, -8
 2495              		.cfi_offset 14, -4
1278:../drivers/fsl_i2c.c **** #if I2C_WAIT_TIMEOUT
 2496              		.loc 1 1278 0
 2497 0002 0026     		movs	r6, #0
 2498 0004 8DF80760 		strb	r6, [sp, #7]
1284:../drivers/fsl_i2c.c **** 
 2499              		.loc 1 1284 0
 2500 0008 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 2501 000c 0133     		adds	r3, r3, #1
 2502 000e DBB2     		uxtb	r3, r3
1275:../drivers/fsl_i2c.c ****     assert(handle);
 2503              		.loc 1 1275 0
 2504 0010 0D46     		mov	r5, r1
1287:../drivers/fsl_i2c.c **** 
 2505              		.loc 1 1287 0
 2506 0012 4021     		movs	r1, #64
 2507              	.LVL257:
1284:../drivers/fsl_i2c.c **** 
 2508              		.loc 1 1284 0
 2509 0014 8DF80730 		strb	r3, [sp, #7]
1275:../drivers/fsl_i2c.c ****     assert(handle);
 2510              		.loc 1 1275 0
 2511 0018 0446     		mov	r4, r0
1287:../drivers/fsl_i2c.c **** 
 2512              		.loc 1 1287 0
 2513 001a FFF7FEFF 		bl	I2C_DisableInterrupts
 2514              	.LVL258:
1290:../drivers/fsl_i2c.c **** 
 2515              		.loc 1 1290 0
 2516 001e 2E77     		strb	r6, [r5, #28]
1293:../drivers/fsl_i2c.c ****     {
 2517              		.loc 1 1293 0
 2518 0020 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 2519 0022 9906     		lsls	r1, r3, #26
 2520 0024 20D5     		bpl	.L318
1299:../drivers/fsl_i2c.c ****     {
 2521              		.loc 1 1299 0
 2522 0026 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 2523 0028 012B     		cmp	r3, #1
 2524 002a 13D1     		bne	.L316
1301:../drivers/fsl_i2c.c **** 
 2525              		.loc 1 1301 0
 2526 002c 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 2527 002e 43F00803 		orr	r3, r3, #8
 2528 0032 8370     		strb	r3, [r0, #2]
 2529              	.L317:
1314:../drivers/fsl_i2c.c ****         {
 2530              		.loc 1 1314 0 discriminator 1
 2531 0034 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2532 0036 9A07     		lsls	r2, r3, #30
 2533 0038 FCD5     		bpl	.L317
1318:../drivers/fsl_i2c.c **** 
 2534              		.loc 1 1318 0
 2535 003a 0223     		movs	r3, #2
 2536 003c E370     		strb	r3, [r4, #3]
1320:../drivers/fsl_i2c.c ****         dummy = base->D;
 2537              		.loc 1 1320 0
 2538 003e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2539 0040 03F0C703 		and	r3, r3, #199
 2540 0044 A370     		strb	r3, [r4, #2]
1321:../drivers/fsl_i2c.c ****     }
 2541              		.loc 1 1321 0
 2542 0046 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2543 0048 DBB2     		uxtb	r3, r3
 2544 004a 8DF80730 		strb	r3, [sp, #7]
 2545              	.L324:
1344:../drivers/fsl_i2c.c **** }
 2546              		.loc 1 1344 0
 2547 004e 0020     		movs	r0, #0
 2548              	.LVL259:
 2549              	.L314:
1345:../drivers/fsl_i2c.c **** 
 2550              		.loc 1 1345 0
 2551 0050 02B0     		add	sp, sp, #8
 2552              		.cfi_remember_state
 2553              		.cfi_def_cfa_offset 16
 2554              		@ sp needed
 2555 0052 70BD     		pop	{r4, r5, r6, pc}
 2556              	.LVL260:
 2557              	.L316:
 2558              		.cfi_restore_state
1336:../drivers/fsl_i2c.c ****         {
 2559              		.loc 1 1336 0 discriminator 1
 2560 0054 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2561 0056 9B07     		lsls	r3, r3, #30
 2562 0058 FCD5     		bpl	.L316
1340:../drivers/fsl_i2c.c ****         base->C1 &= ~(I2C_C1_MST_MASK | I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
 2563              		.loc 1 1340 0
 2564 005a 0223     		movs	r3, #2
 2565 005c E370     		strb	r3, [r4, #3]
1341:../drivers/fsl_i2c.c ****     }
 2566              		.loc 1 1341 0
 2567 005e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2568 0060 03F0C703 		and	r3, r3, #199
 2569 0064 A370     		strb	r3, [r4, #2]
 2570 0066 F2E7     		b	.L324
 2571              	.L318:
1295:../drivers/fsl_i2c.c ****     }
 2572              		.loc 1 1295 0
 2573 0068 40F24C40 		movw	r0, #1100
 2574              	.LVL261:
 2575 006c F0E7     		b	.L314
 2576              		.cfi_endproc
 2577              	.LFE174:
 2579              		.section	.text.I2C_MasterTransferGetCount,"ax",%progbits
 2580              		.align	1
 2581              		.global	I2C_MasterTransferGetCount
 2582              		.syntax unified
 2583              		.thumb
 2584              		.thumb_func
 2585              		.fpu fpv4-sp-d16
 2587              	I2C_MasterTransferGetCount:
 2588              	.LFB175:
1348:../drivers/fsl_i2c.c ****     assert(handle);
 2589              		.loc 1 1348 0
 2590              		.cfi_startproc
 2591              		@ args = 0, pretend = 0, frame = 0
 2592              		@ frame_needed = 0, uses_anonymous_args = 0
 2593              		@ link register save eliminated.
 2594              	.LVL262:
1351:../drivers/fsl_i2c.c ****     {
 2595              		.loc 1 1351 0
 2596 0000 2AB1     		cbz	r2, .L327
1356:../drivers/fsl_i2c.c **** 
 2597              		.loc 1 1356 0
 2598 0002 4869     		ldr	r0, [r1, #20]
 2599              	.LVL263:
 2600 0004 8B69     		ldr	r3, [r1, #24]
 2601 0006 1B1A     		subs	r3, r3, r0
 2602 0008 1360     		str	r3, [r2]
1358:../drivers/fsl_i2c.c **** }
 2603              		.loc 1 1358 0
 2604 000a 0020     		movs	r0, #0
 2605 000c 7047     		bx	lr
 2606              	.LVL264:
 2607              	.L327:
1353:../drivers/fsl_i2c.c ****     }
 2608              		.loc 1 1353 0
 2609 000e 0420     		movs	r0, #4
 2610              	.LVL265:
1359:../drivers/fsl_i2c.c **** 
 2611              		.loc 1 1359 0
 2612 0010 7047     		bx	lr
 2613              		.cfi_endproc
 2614              	.LFE175:
 2616              		.section	.text.I2C_SlaveInit,"ax",%progbits
 2617              		.align	1
 2618              		.global	I2C_SlaveInit
 2619              		.syntax unified
 2620              		.thumb
 2621              		.thumb_func
 2622              		.fpu fpv4-sp-d16
 2624              	I2C_SlaveInit:
 2625              	.LFB177:
1406:../drivers/fsl_i2c.c ****     assert(slaveConfig);
 2626              		.loc 1 1406 0
 2627              		.cfi_startproc
 2628              		@ args = 0, pretend = 0, frame = 0
 2629              		@ frame_needed = 0, uses_anonymous_args = 0
 2630              	.LVL266:
 2631 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2632              		.cfi_def_cfa_offset 24
 2633              		.cfi_offset 4, -24
 2634              		.cfi_offset 5, -20
 2635              		.cfi_offset 6, -16
 2636              		.cfi_offset 7, -12
 2637              		.cfi_offset 8, -8
 2638              		.cfi_offset 14, -4
1406:../drivers/fsl_i2c.c ****     assert(slaveConfig);
 2639              		.loc 1 1406 0
 2640 0004 0446     		mov	r4, r0
1412:../drivers/fsl_i2c.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 2641              		.loc 1 1412 0
 2642 0006 FFF7FEFF 		bl	I2C_GetInstance
 2643              	.LVL267:
 2644 000a 3A4B     		ldr	r3, .L342
 2645 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 2646              	.LVL268:
 2647              	.LBB109:
 2648              	.LBB110:
 694:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 2649              		.loc 4 694 0
 2650 0010 2B0C     		lsrs	r3, r5, #16
 2651 0012 03F18043 		add	r3, r3, #1073741824
 2652 0016 03F58E23 		add	r3, r3, #290816
 695:../drivers/fsl_clock.h **** }
 2653              		.loc 4 695 0
 2654 001a ADB2     		uxth	r5, r5
 2655              	.LVL269:
 2656 001c 1E68     		ldr	r6, [r3]
 2657 001e 0120     		movs	r0, #1
 2658              	.LVL270:
 2659 0020 A840     		lsls	r0, r0, r5
 2660 0022 3043     		orrs	r0, r0, r6
 2661 0024 1860     		str	r0, [r3]
 2662              	.LBE110:
 2663              	.LBE109:
1416:../drivers/fsl_i2c.c ****     base->F = 0;
 2664              		.loc 1 1416 0
 2665 0026 0023     		movs	r3, #0
1419:../drivers/fsl_i2c.c ****     base->C2 = 0;
 2666              		.loc 1 1419 0
 2667 0028 FF20     		movs	r0, #255
1416:../drivers/fsl_i2c.c ****     base->F = 0;
 2668              		.loc 1 1416 0
 2669 002a 2370     		strb	r3, [r4]
1417:../drivers/fsl_i2c.c ****     base->C1 = 0;
 2670              		.loc 1 1417 0
 2671 002c 6370     		strb	r3, [r4, #1]
1418:../drivers/fsl_i2c.c ****     base->S = 0xFFU;
 2672              		.loc 1 1418 0
 2673 002e A370     		strb	r3, [r4, #2]
1419:../drivers/fsl_i2c.c ****     base->C2 = 0;
 2674              		.loc 1 1419 0
 2675 0030 E070     		strb	r0, [r4, #3]
1422:../drivers/fsl_i2c.c **** #elif defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 2676              		.loc 1 1422 0
 2677 0032 5020     		movs	r0, #80
1420:../drivers/fsl_i2c.c **** #if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
 2678              		.loc 1 1420 0
 2679 0034 6371     		strb	r3, [r4, #5]
1422:../drivers/fsl_i2c.c **** #elif defined(FSL_FEATURE_I2C_HAS_STOP_DETECT) && FSL_FEATURE_I2C_HAS_STOP_DETECT
 2680              		.loc 1 1422 0
 2681 0036 A071     		strb	r0, [r4, #6]
1426:../drivers/fsl_i2c.c **** 
 2682              		.loc 1 1426 0
 2683 0038 E371     		strb	r3, [r4, #7]
1429:../drivers/fsl_i2c.c ****     {
 2684              		.loc 1 1429 0
 2685 003a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 2686 003c 002B     		cmp	r3, #0
 2687 003e 40D0     		beq	.L330
 2688 0040 022B     		cmp	r3, #2
 2689 0042 43D0     		beq	.L331
 2690              	.L329:
1447:../drivers/fsl_i2c.c ****     tmpReg &= ~I2C_C1_WUEN_MASK;
 2691              		.loc 1 1447 0
 2692 0044 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2693              	.LVL271:
1449:../drivers/fsl_i2c.c **** 
 2694              		.loc 1 1449 0
 2695 0046 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 2696              	.LBB111:
 2697              	.LBB112:
 215:../drivers/fsl_i2c.c ****             absError = sclStopHoldTime_ns > computedSclHoldTime ? (sclStopHoldTime_ns - computedScl
 2698              		.loc 1 215 0
 2699 0048 DFF8ACE0 		ldr	lr, .L342+4
 2700 004c DFF8AC80 		ldr	r8, .L342+8
 2701              	.LBE112:
 2702              	.LBE111:
1448:../drivers/fsl_i2c.c ****     base->C1 = tmpReg | I2C_C1_WUEN(slaveConfig->enableWakeUp) | I2C_C1_IICEN(slaveConfig->enableSl
 2703              		.loc 1 1448 0
 2704 0050 03F0FD03 		and	r3, r3, #253
 2705              	.LVL272:
1449:../drivers/fsl_i2c.c **** 
 2706              		.loc 1 1449 0
 2707 0054 43EA4003 		orr	r3, r3, r0, lsl #1
 2708 0058 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2709 005a 43EAC013 		orr	r3, r3, r0, lsl #7
 2710 005e DBB2     		uxtb	r3, r3
 2711 0060 A370     		strb	r3, [r4, #2]
1452:../drivers/fsl_i2c.c ****     tmpReg &= ~(I2C_C2_SBRC_MASK | I2C_C2_GCAEN_MASK);
 2712              		.loc 1 1452 0
 2713 0062 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 2714              	.LVL273:
1454:../drivers/fsl_i2c.c ****     base->C2 = tmpReg;
 2715              		.loc 1 1454 0
 2716 0064 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
1453:../drivers/fsl_i2c.c ****     tmpReg |= I2C_C2_SBRC(slaveConfig->enableBaudRateCtl) | I2C_C2_GCAEN(slaveConfig->enableGeneral
 2717              		.loc 1 1453 0
 2718 0066 03F06F03 		and	r3, r3, #111
 2719              	.LVL274:
 2720 006a 43EA0013 		orr	r3, r3, r0, lsl #4
1454:../drivers/fsl_i2c.c ****     base->C2 = tmpReg;
 2721              		.loc 1 1454 0
 2722 006e 4878     		ldrb	r0, [r1, #1]	@ zero_extendqisi2
 2723 0070 43EAC013 		orr	r3, r3, r0, lsl #7
 2724 0074 DBB2     		uxtb	r3, r3
 2725              	.LVL275:
1455:../drivers/fsl_i2c.c **** 
 2726              		.loc 1 1455 0
 2727 0076 6371     		strb	r3, [r4, #5]
1464:../drivers/fsl_i2c.c **** }
 2728              		.loc 1 1464 0
 2729 0078 0020     		movs	r0, #0
 2730 007a CF68     		ldr	r7, [r1, #12]
 2731              	.LVL276:
 2732              	.LBB115:
 2733              	.LBB113:
 197:../drivers/fsl_i2c.c ****     uint8_t mult;
 2734              		.loc 1 197 0
 2735 007c 0646     		mov	r6, r0
 196:../drivers/fsl_i2c.c ****     uint32_t bestIcr = 0u;
 2736              		.loc 1 196 0
 2737 007e 0546     		mov	r5, r0
 195:../drivers/fsl_i2c.c ****     uint32_t bestMult = 0u;
 2738              		.loc 1 195 0
 2739 0080 4FF0FF3C 		mov	ip, #-1
 2740              	.LVL277:
 2741              	.L340:
 209:../drivers/fsl_i2c.c **** 
 2742              		.loc 1 209 0
 2743 0084 0021     		movs	r1, #0
 2744              	.LVL278:
 2745              	.L336:
 215:../drivers/fsl_i2c.c ****             absError = sclStopHoldTime_ns > computedSclHoldTime ? (sclStopHoldTime_ns - computedScl
 2746              		.loc 1 215 0
 2747 0086 3EF81130 		ldrh	r3, [lr, r1, lsl #1]
 2748 008a 8340     		lsls	r3, r3, r0
 2749 008c 08FB03F3 		mul	r3, r8, r3
 2750 0090 B3FBF2F3 		udiv	r3, r3, r2
 2751              	.LVL279:
 216:../drivers/fsl_i2c.c ****                                                                   (computedSclHoldTime - sclStopHol
 2752              		.loc 1 216 0
 2753 0094 9F42     		cmp	r7, r3
 2754 0096 8CBF     		ite	hi
 2755 0098 FB1A     		subhi	r3, r7, r3
 2756              	.LVL280:
 2757 009a DB1B     		subls	r3, r3, r7
 2758              	.LVL281:
 219:../drivers/fsl_i2c.c ****             {
 2759              		.loc 1 219 0
 2760 009c 6345     		cmp	r3, ip
 2761 009e 03D2     		bcs	.L334
 2762              	.LVL282:
 226:../drivers/fsl_i2c.c ****                 {
 2763              		.loc 1 226 0
 2764 00a0 0BB3     		cbz	r3, .L335
 222:../drivers/fsl_i2c.c ****                 bestError = absError;
 2765              		.loc 1 222 0
 2766 00a2 0E46     		mov	r6, r1
 221:../drivers/fsl_i2c.c ****                 bestIcr = i;
 2767              		.loc 1 221 0
 2768 00a4 0546     		mov	r5, r0
 226:../drivers/fsl_i2c.c ****                 {
 2769              		.loc 1 226 0
 2770 00a6 9C46     		mov	ip, r3
 2771              	.LVL283:
 2772              	.L334:
 2773 00a8 0131     		adds	r1, r1, #1
 2774              	.LVL284:
 212:../drivers/fsl_i2c.c ****         {
 2775              		.loc 1 212 0
 2776 00aa 4029     		cmp	r1, #64
 2777 00ac EBD1     		bne	.L336
 2778              	.LVL285:
 207:../drivers/fsl_i2c.c ****     {
 2779              		.loc 1 207 0
 2780 00ae 0228     		cmp	r0, #2
 2781 00b0 1ED1     		bne	.L337
 2782              	.LVL286:
 2783              	.L338:
 221:../drivers/fsl_i2c.c ****                 bestIcr = i;
 2784              		.loc 1 221 0
 2785 00b2 3146     		mov	r1, r6
 2786 00b4 2846     		mov	r0, r5
 2787              	.LVL287:
 2788              	.L339:
 235:../drivers/fsl_i2c.c **** }
 2789              		.loc 1 235 0
 2790 00b6 41EA8011 		orr	r1, r1, r0, lsl #6
 2791 00ba C9B2     		uxtb	r1, r1
 2792 00bc 6170     		strb	r1, [r4, #1]
 2793              	.LVL288:
 2794              	.LBE113:
 2795              	.LBE115:
1465:../drivers/fsl_i2c.c **** 
 2796              		.loc 1 1465 0
 2797 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2798              	.LVL289:
 2799              	.L330:
1432:../drivers/fsl_i2c.c ****             break;
 2800              		.loc 1 1432 0
 2801 00c2 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 2802 00c4 5B00     		lsls	r3, r3, #1
 2803 00c6 DBB2     		uxtb	r3, r3
 2804 00c8 2370     		strb	r3, [r4]
1433:../drivers/fsl_i2c.c **** 
 2805              		.loc 1 1433 0
 2806 00ca BBE7     		b	.L329
 2807              	.L331:
1437:../drivers/fsl_i2c.c ****             base->RA = ((uint32_t)(slaveConfig->upperAddress)) << 1U;
 2808              		.loc 1 1437 0
 2809 00cc 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 2810 00ce 5B00     		lsls	r3, r3, #1
 2811 00d0 DBB2     		uxtb	r3, r3
 2812 00d2 2370     		strb	r3, [r4]
1438:../drivers/fsl_i2c.c ****             base->C2 |= I2C_C2_RMEN_MASK;
 2813              		.loc 1 1438 0
 2814 00d4 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 2815 00d6 5B00     		lsls	r3, r3, #1
 2816 00d8 DBB2     		uxtb	r3, r3
 2817 00da E371     		strb	r3, [r4, #7]
1439:../drivers/fsl_i2c.c ****             break;
 2818              		.loc 1 1439 0
 2819 00dc 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 2820 00de 43F00803 		orr	r3, r3, #8
 2821 00e2 6371     		strb	r3, [r4, #5]
1440:../drivers/fsl_i2c.c **** 
 2822              		.loc 1 1440 0
 2823 00e4 AEE7     		b	.L329
 2824              	.LVL290:
 2825              	.L335:
 2826              	.LBB116:
 2827              	.LBB114:
 207:../drivers/fsl_i2c.c ****     {
 2828              		.loc 1 207 0
 2829 00e6 0228     		cmp	r0, #2
 2830 00e8 E5D1     		bne	.L339
 222:../drivers/fsl_i2c.c ****                 bestError = absError;
 2831              		.loc 1 222 0
 2832 00ea 0E46     		mov	r6, r1
 221:../drivers/fsl_i2c.c ****                 bestIcr = i;
 2833              		.loc 1 221 0
 2834 00ec 0546     		mov	r5, r0
 2835 00ee E0E7     		b	.L338
 2836              	.LVL291:
 2837              	.L337:
 2838 00f0 0130     		adds	r0, r0, #1
 2839              	.LVL292:
 2840 00f2 C7E7     		b	.L340
 2841              	.L343:
 2842              		.align	2
 2843              	.L342:
 2844 00f4 00000000 		.word	.LANCHOR2
 2845 00f8 00000000 		.word	.LANCHOR3
 2846 00fc 0065CD1D 		.word	500000000
 2847              	.LBE114:
 2848              	.LBE116:
 2849              		.cfi_endproc
 2850              	.LFE177:
 2852              		.section	.text.I2C_SlaveDeinit,"ax",%progbits
 2853              		.align	1
 2854              		.global	I2C_SlaveDeinit
 2855              		.syntax unified
 2856              		.thumb
 2857              		.thumb_func
 2858              		.fpu fpv4-sp-d16
 2860              	I2C_SlaveDeinit:
 2861              	.LFB194:
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 0
 2864              		@ frame_needed = 0, uses_anonymous_args = 0
 2865              		@ link register save eliminated.
 2866 0000 FFF7FEBF 		b	I2C_MasterDeinit
 2867              		.cfi_endproc
 2868              	.LFE194:
 2870              		.section	.text.I2C_SlaveGetDefaultConfig,"ax",%progbits
 2871              		.align	1
 2872              		.global	I2C_SlaveGetDefaultConfig
 2873              		.syntax unified
 2874              		.thumb
 2875              		.thumb_func
 2876              		.fpu fpv4-sp-d16
 2878              	I2C_SlaveGetDefaultConfig:
 2879              	.LFB179:
1479:../drivers/fsl_i2c.c ****     assert(slaveConfig);
 2880              		.loc 1 1479 0
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 0
 2883              		@ frame_needed = 0, uses_anonymous_args = 0
 2884              		@ link register save eliminated.
 2885              	.LVL293:
1483:../drivers/fsl_i2c.c **** 
 2886              		.loc 1 1483 0
 2887 0000 0023     		movs	r3, #0
 2888 0002 0372     		strb	r3, [r0, #8]
1486:../drivers/fsl_i2c.c **** 
 2889              		.loc 1 1486 0
 2890 0004 4370     		strb	r3, [r0, #1]
1489:../drivers/fsl_i2c.c **** 
 2891              		.loc 1 1489 0
 2892 0006 8370     		strb	r3, [r0, #2]
1492:../drivers/fsl_i2c.c **** 
 2893              		.loc 1 1492 0
 2894 0008 C370     		strb	r3, [r0, #3]
1500:../drivers/fsl_i2c.c **** 
 2895              		.loc 1 1500 0
 2896 000a 4FF47A63 		mov	r3, #4000
 2897 000e C360     		str	r3, [r0, #12]
1503:../drivers/fsl_i2c.c **** }
 2898              		.loc 1 1503 0
 2899 0010 0123     		movs	r3, #1
 2900 0012 0370     		strb	r3, [r0]
1504:../drivers/fsl_i2c.c **** 
 2901              		.loc 1 1504 0
 2902 0014 7047     		bx	lr
 2903              		.cfi_endproc
 2904              	.LFE179:
 2906              		.section	.text.I2C_SlaveWriteBlocking,"ax",%progbits
 2907              		.align	1
 2908              		.global	I2C_SlaveWriteBlocking
 2909              		.syntax unified
 2910              		.thumb
 2911              		.thumb_func
 2912              		.fpu fpv4-sp-d16
 2914              	I2C_SlaveWriteBlocking:
 2915              	.LFB180:
1507:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 2916              		.loc 1 1507 0
 2917              		.cfi_startproc
 2918              		@ args = 0, pretend = 0, frame = 8
 2919              		@ frame_needed = 0, uses_anonymous_args = 0
 2920              	.LVL294:
 2921 0000 13B5     		push	{r0, r1, r4, lr}
 2922              		.cfi_def_cfa_offset 16
 2923              		.cfi_offset 4, -8
 2924              		.cfi_offset 14, -4
1509:../drivers/fsl_i2c.c **** 
 2925              		.loc 1 1509 0
 2926 0002 0023     		movs	r3, #0
 2927 0004 8DF80730 		strb	r3, [sp, #7]
1512:../drivers/fsl_i2c.c **** 
 2928              		.loc 1 1512 0
 2929 0008 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 2930 000c 0133     		adds	r3, r3, #1
 2931 000e DBB2     		uxtb	r3, r3
1507:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 2932              		.loc 1 1507 0
 2933 0010 0446     		mov	r4, r0
1512:../drivers/fsl_i2c.c **** 
 2934              		.loc 1 1512 0
 2935 0012 8DF80730 		strb	r3, [sp, #7]
 2936              	.LVL295:
 2937              	.L347:
1516:../drivers/fsl_i2c.c ****     {
 2938              		.loc 1 1516 0 discriminator 1
 2939 0016 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2940 0018 D806     		lsls	r0, r3, #27
 2941 001a FCD5     		bpl	.L347
1520:../drivers/fsl_i2c.c ****     /* Clear the IICIF flag. */
 2942              		.loc 1 1520 0
 2943 001c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2944 001e 43F01003 		orr	r3, r3, #16
 2945 0022 A371     		strb	r3, [r4, #6]
1522:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
 2946              		.loc 1 1522 0
 2947 0024 0223     		movs	r3, #2
 2948 0026 E370     		strb	r3, [r4, #3]
 2949              	.L348:
1537:../drivers/fsl_i2c.c ****     {
 2950              		.loc 1 1537 0 discriminator 1
 2951 0028 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2952 002a 5B06     		lsls	r3, r3, #25
 2953 002c FCD5     		bpl	.L348
1542:../drivers/fsl_i2c.c **** 
 2954              		.loc 1 1542 0
 2955 002e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2956 0030 DBB2     		uxtb	r3, r3
 2957 0032 8DF80730 		strb	r3, [sp, #7]
1544:../drivers/fsl_i2c.c **** 
 2958              		.loc 1 1544 0
 2959 0036 2046     		mov	r0, r4
 2960 0038 0023     		movs	r3, #0
 2961 003a FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2962              	.LVL296:
1547:../drivers/fsl_i2c.c **** 
 2963              		.loc 1 1547 0
 2964 003e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2965 0040 03F0E703 		and	r3, r3, #231
 2966 0044 A370     		strb	r3, [r4, #2]
1550:../drivers/fsl_i2c.c **** 
 2967              		.loc 1 1550 0
 2968 0046 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2969 0048 DBB2     		uxtb	r3, r3
 2970 004a 8DF80730 		strb	r3, [sp, #7]
1553:../drivers/fsl_i2c.c **** 
 2971              		.loc 1 1553 0
 2972 004e 02B0     		add	sp, sp, #8
 2973              		.cfi_def_cfa_offset 8
 2974              		@ sp needed
 2975 0050 10BD     		pop	{r4, pc}
 2976              		.cfi_endproc
 2977              	.LFE180:
 2979              		.section	.text.I2C_SlaveReadBlocking,"ax",%progbits
 2980              		.align	1
 2981              		.global	I2C_SlaveReadBlocking
 2982              		.syntax unified
 2983              		.thumb
 2984              		.thumb_func
 2985              		.fpu fpv4-sp-d16
 2987              	I2C_SlaveReadBlocking:
 2988              	.LFB181:
1556:../drivers/fsl_i2c.c ****     status_t result = kStatus_Success;
 2989              		.loc 1 1556 0
 2990              		.cfi_startproc
 2991              		@ args = 0, pretend = 0, frame = 8
 2992              		@ frame_needed = 0, uses_anonymous_args = 0
 2993              	.LVL297:
 2994 0000 13B5     		push	{r0, r1, r4, lr}
 2995              		.cfi_def_cfa_offset 16
 2996              		.cfi_offset 4, -8
 2997              		.cfi_offset 14, -4
1558:../drivers/fsl_i2c.c **** 
 2998              		.loc 1 1558 0
 2999 0002 0023     		movs	r3, #0
 3000 0004 8DF80730 		strb	r3, [sp, #7]
1561:../drivers/fsl_i2c.c **** 
 3001              		.loc 1 1561 0
 3002 0008 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 3003 000c 0133     		adds	r3, r3, #1
 3004 000e DBB2     		uxtb	r3, r3
 3005 0010 8DF80730 		strb	r3, [sp, #7]
 3006              	.L354:
1566:../drivers/fsl_i2c.c ****     {
 3007              		.loc 1 1566 0 discriminator 1
 3008 0014 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 3009 0016 DB06     		lsls	r3, r3, #27
 3010 0018 FCD5     		bpl	.L354
1570:../drivers/fsl_i2c.c ****     /* Clear the IICIF flag. */
 3011              		.loc 1 1570 0
 3012 001a 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 3013 001c 43F01003 		orr	r3, r3, #16
 3014 0020 8371     		strb	r3, [r0, #6]
1572:../drivers/fsl_i2c.c **** #endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
 3015              		.loc 1 1572 0
 3016 0022 0223     		movs	r3, #2
 3017 0024 C370     		strb	r3, [r0, #3]
 3018              	.L355:
1596:../drivers/fsl_i2c.c ****     {
 3019              		.loc 1 1596 0 discriminator 1
 3020 0026 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 3021 0028 5C06     		lsls	r4, r3, #25
 3022 002a FCD5     		bpl	.L355
 3023              	.L356:
1599:../drivers/fsl_i2c.c ****     {
 3024              		.loc 1 1599 0 discriminator 1
 3025 002c C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 3026 002e 9B07     		lsls	r3, r3, #30
 3027 0030 FCD5     		bpl	.L356
1605:../drivers/fsl_i2c.c **** 
 3028              		.loc 1 1605 0
 3029 0032 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 3030 0034 DBB2     		uxtb	r3, r3
 3031 0036 8DF80730 		strb	r3, [sp, #7]
1608:../drivers/fsl_i2c.c **** 
 3032              		.loc 1 1608 0
 3033 003a 0223     		movs	r3, #2
 3034 003c C370     		strb	r3, [r0, #3]
1611:../drivers/fsl_i2c.c **** 
 3035              		.loc 1 1611 0
 3036 003e 8478     		ldrb	r4, [r0, #2]	@ zero_extendqisi2
 3037 0040 04F0EF04 		and	r4, r4, #239
 3038 0044 8470     		strb	r4, [r0, #2]
 3039 0046 0A44     		add	r2, r2, r1
 3040              	.LVL298:
 3041              	.L357:
1613:../drivers/fsl_i2c.c ****     {
 3042              		.loc 1 1613 0
 3043 0048 9142     		cmp	r1, r2
 3044 004a 02D1     		bne	.L358
1639:../drivers/fsl_i2c.c **** 
 3045              		.loc 1 1639 0
 3046 004c 0020     		movs	r0, #0
 3047              	.LVL299:
 3048 004e 02B0     		add	sp, sp, #8
 3049              		.cfi_remember_state
 3050              		.cfi_def_cfa_offset 8
 3051              		@ sp needed
 3052 0050 10BD     		pop	{r4, pc}
 3053              	.LVL300:
 3054              	.L358:
 3055              		.cfi_restore_state
1627:../drivers/fsl_i2c.c ****         {
 3056              		.loc 1 1627 0 discriminator 1
 3057 0052 C478     		ldrb	r4, [r0, #3]	@ zero_extendqisi2
 3058 0054 A407     		lsls	r4, r4, #30
 3059 0056 FCD5     		bpl	.L358
1632:../drivers/fsl_i2c.c **** 
 3060              		.loc 1 1632 0
 3061 0058 C370     		strb	r3, [r0, #3]
1635:../drivers/fsl_i2c.c ****     }
 3062              		.loc 1 1635 0
 3063 005a 0479     		ldrb	r4, [r0, #4]	@ zero_extendqisi2
 3064 005c 01F8014B 		strb	r4, [r1], #1
 3065              	.LVL301:
 3066 0060 F2E7     		b	.L357
 3067              		.cfi_endproc
 3068              	.LFE181:
 3070              		.section	.text.I2C_SlaveTransferCreateHandle,"ax",%progbits
 3071              		.align	1
 3072              		.global	I2C_SlaveTransferCreateHandle
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.fpu fpv4-sp-d16
 3078              	I2C_SlaveTransferCreateHandle:
 3079              	.LFB182:
1645:../drivers/fsl_i2c.c ****     assert(handle);
 3080              		.loc 1 1645 0
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 0
 3083              		@ frame_needed = 0, uses_anonymous_args = 0
 3084              	.LVL302:
 3085 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3086              		.cfi_def_cfa_offset 24
 3087              		.cfi_offset 3, -24
 3088              		.cfi_offset 4, -20
 3089              		.cfi_offset 5, -16
 3090              		.cfi_offset 6, -12
 3091              		.cfi_offset 7, -8
 3092              		.cfi_offset 14, -4
1645:../drivers/fsl_i2c.c ****     assert(handle);
 3093              		.loc 1 1645 0
 3094 0002 0C46     		mov	r4, r1
 3095 0004 1E46     		mov	r6, r3
 3096 0006 1746     		mov	r7, r2
1648:../drivers/fsl_i2c.c **** 
 3097              		.loc 1 1648 0
 3098 0008 FFF7FEFF 		bl	I2C_GetInstance
 3099              	.LVL303:
1651:../drivers/fsl_i2c.c **** 
 3100              		.loc 1 1651 0
 3101 000c 1C22     		movs	r2, #28
 3102              	.LVL304:
1648:../drivers/fsl_i2c.c **** 
 3103              		.loc 1 1648 0
 3104 000e 0546     		mov	r5, r0
 3105              	.LVL305:
1651:../drivers/fsl_i2c.c **** 
 3106              		.loc 1 1651 0
 3107 0010 0021     		movs	r1, #0
 3108              	.LVL306:
 3109 0012 2046     		mov	r0, r4
 3110              	.LVL307:
 3111 0014 FFF7FEFF 		bl	memset
 3112              	.LVL308:
1658:../drivers/fsl_i2c.c **** 
 3113              		.loc 1 1658 0
 3114 0018 0A4B     		ldr	r3, .L370
1661:../drivers/fsl_i2c.c **** 
 3115              		.loc 1 1661 0
 3116 001a 0B4A     		ldr	r2, .L370+4
1658:../drivers/fsl_i2c.c **** 
 3117              		.loc 1 1658 0
 3118 001c 43F82540 		str	r4, [r3, r5, lsl #2]
1661:../drivers/fsl_i2c.c **** 
 3119              		.loc 1 1661 0
 3120 0020 0A4B     		ldr	r3, .L370+8
 3121 0022 1A60     		str	r2, [r3]
1664:../drivers/fsl_i2c.c **** }
 3122              		.loc 1 1664 0
 3123 0024 0A4B     		ldr	r3, .L370+12
 3124 0026 5B57     		ldrsb	r3, [r3, r5]
 3125              	.LVL309:
 3126              	.LBB121:
 3127              	.LBB122:
 3128              	.LBB123:
1674:../CMSIS/core_cm4.h ****   {
 3129              		.loc 5 1674 0
 3130 0028 002B     		cmp	r3, #0
 3131              	.LBE123:
 3132              	.LBE122:
 3133              	.LBE121:
1655:../drivers/fsl_i2c.c **** 
 3134              		.loc 1 1655 0
 3135 002a C4E90776 		strd	r7, r6, [r4, #28]
 3136              	.LBB126:
 3137              	.LBB125:
 3138              	.LBB124:
1674:../CMSIS/core_cm4.h ****   {
 3139              		.loc 5 1674 0
 3140 002e 08DB     		blt	.L368
 3141              		.loc 5 1676 0
 3142 0030 5909     		lsrs	r1, r3, #5
 3143 0032 0122     		movs	r2, #1
 3144 0034 03F01F03 		and	r3, r3, #31
 3145              	.LVL310:
 3146 0038 02FA03F3 		lsl	r3, r2, r3
 3147 003c 054A     		ldr	r2, .L370+16
 3148 003e 42F82130 		str	r3, [r2, r1, lsl #2]
 3149              	.LVL311:
 3150              	.L368:
 3151              	.LBE124:
 3152              	.LBE125:
 3153              	.LBE126:
1665:../drivers/fsl_i2c.c **** 
 3154              		.loc 1 1665 0
 3155 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3156              	.LVL312:
 3157              	.L371:
 3158              		.align	2
 3159              	.L370:
 3160 0044 00000000 		.word	.LANCHOR4
 3161 0048 00000000 		.word	I2C_SlaveTransferHandleIRQ
 3162 004c 00000000 		.word	.LANCHOR1
 3163 0050 00000000 		.word	.LANCHOR5
 3164 0054 00E100E0 		.word	-536813312
 3165              		.cfi_endproc
 3166              	.LFE182:
 3168              		.section	.text.I2C_SlaveTransferNonBlocking,"ax",%progbits
 3169              		.align	1
 3170              		.global	I2C_SlaveTransferNonBlocking
 3171              		.syntax unified
 3172              		.thumb
 3173              		.thumb_func
 3174              		.fpu fpv4-sp-d16
 3176              	I2C_SlaveTransferNonBlocking:
 3177              	.LFB183:
1668:../drivers/fsl_i2c.c ****     assert(handle);
 3178              		.loc 1 1668 0
 3179              		.cfi_startproc
 3180              		@ args = 0, pretend = 0, frame = 0
 3181              		@ frame_needed = 0, uses_anonymous_args = 0
 3182              	.LVL313:
 3183 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3184              		.cfi_def_cfa_offset 24
 3185              		.cfi_offset 3, -24
 3186              		.cfi_offset 4, -20
 3187              		.cfi_offset 5, -16
 3188              		.cfi_offset 6, -12
 3189              		.cfi_offset 7, -8
 3190              		.cfi_offset 14, -4
1672:../drivers/fsl_i2c.c ****     {
 3191              		.loc 1 1672 0
 3192 0002 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
1668:../drivers/fsl_i2c.c ****     assert(handle);
 3193              		.loc 1 1668 0
 3194 0004 0446     		mov	r4, r0
 3195 0006 0E46     		mov	r6, r1
 3196 0008 1746     		mov	r7, r2
1672:../drivers/fsl_i2c.c ****     {
 3197              		.loc 1 1672 0
 3198 000a 03F0FF05 		and	r5, r3, #255
 3199 000e E3B9     		cbnz	r3, .L374
1679:../drivers/fsl_i2c.c **** 
 3200              		.loc 1 1679 0
 3201 0010 6021     		movs	r1, #96
 3202              	.LVL314:
 3203 0012 FFF7FEFF 		bl	I2C_DisableInterrupts
 3204              	.LVL315:
1682:../drivers/fsl_i2c.c **** 
 3205              		.loc 1 1682 0
 3206 0016 1422     		movs	r2, #20
 3207 0018 2946     		mov	r1, r5
 3208 001a 301D     		adds	r0, r6, #4
 3209              	.LVL316:
 3210 001c FFF7FEFF 		bl	memset
 3211              	.LVL317:
1688:../drivers/fsl_i2c.c **** 
 3212              		.loc 1 1688 0
 3213 0020 47F04607 		orr	r7, r7, #70
 3214              	.LVL318:
1685:../drivers/fsl_i2c.c **** 
 3215              		.loc 1 1685 0
 3216 0024 0123     		movs	r3, #1
 3217 0026 3370     		strb	r3, [r6]
1688:../drivers/fsl_i2c.c **** 
 3218              		.loc 1 1688 0
 3219 0028 B761     		str	r7, [r6, #24]
 3220              	.LVL319:
 3221              	.LBB131:
 3222              	.LBB132:
 3223              	.LBB133:
 446:../drivers/fsl_i2c.h ****     }
 3224              		.loc 3 446 0
 3225 002a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3226 002c 43F05003 		orr	r3, r3, #80
 3227 0030 A371     		strb	r3, [r4, #6]
 454:../drivers/fsl_i2c.h ****     }
 3228              		.loc 3 454 0
 3229 0032 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3230 0034 43F05003 		orr	r3, r3, #80
 3231 0038 A371     		strb	r3, [r4, #6]
 3232              		.loc 3 458 0
 3233 003a 1223     		movs	r3, #18
 3234              	.LBE133:
 3235              	.LBE132:
 3236              	.LBE131:
1694:../drivers/fsl_i2c.c ****     }
 3237              		.loc 1 1694 0
 3238 003c 2046     		mov	r0, r4
 3239              	.LBB136:
 3240              	.LBB135:
 3241              	.LBB134:
 3242              		.loc 3 458 0
 3243 003e E370     		strb	r3, [r4, #3]
 3244              	.LVL320:
 3245              	.LBE134:
 3246              	.LBE135:
 3247              	.LBE136:
1694:../drivers/fsl_i2c.c ****     }
 3248              		.loc 1 1694 0
 3249 0040 6021     		movs	r1, #96
 3250 0042 FFF7FEFF 		bl	I2C_EnableInterrupts
 3251              	.LVL321:
1697:../drivers/fsl_i2c.c **** }
 3252              		.loc 1 1697 0
 3253 0046 2846     		mov	r0, r5
 3254              	.L372:
1698:../drivers/fsl_i2c.c **** 
 3255              		.loc 1 1698 0
 3256 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3257              	.LVL322:
 3258              	.L374:
1674:../drivers/fsl_i2c.c ****     }
 3259              		.loc 1 1674 0
 3260 004a 40F24C40 		movw	r0, #1100
 3261              	.LVL323:
 3262 004e FBE7     		b	.L372
 3263              		.cfi_endproc
 3264              	.LFE183:
 3266              		.section	.text.I2C_SlaveTransferAbort,"ax",%progbits
 3267              		.align	1
 3268              		.global	I2C_SlaveTransferAbort
 3269              		.syntax unified
 3270              		.thumb
 3271              		.thumb_func
 3272              		.fpu fpv4-sp-d16
 3274              	I2C_SlaveTransferAbort:
 3275              	.LFB184:
1701:../drivers/fsl_i2c.c ****     assert(handle);
 3276              		.loc 1 1701 0
 3277              		.cfi_startproc
 3278              		@ args = 0, pretend = 0, frame = 0
 3279              		@ frame_needed = 0, uses_anonymous_args = 0
 3280              	.LVL324:
1704:../drivers/fsl_i2c.c ****     {
 3281              		.loc 1 1704 0
 3282 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
1701:../drivers/fsl_i2c.c ****     assert(handle);
 3283              		.loc 1 1701 0
 3284 0002 10B5     		push	{r4, lr}
 3285              		.cfi_def_cfa_offset 8
 3286              		.cfi_offset 4, -8
 3287              		.cfi_offset 14, -4
1701:../drivers/fsl_i2c.c ****     assert(handle);
 3288              		.loc 1 1701 0
 3289 0004 0C46     		mov	r4, r1
1704:../drivers/fsl_i2c.c ****     {
 3290              		.loc 1 1704 0
 3291 0006 4BB1     		cbz	r3, .L375
1707:../drivers/fsl_i2c.c **** 
 3292              		.loc 1 1707 0
 3293 0008 6021     		movs	r1, #96
 3294              	.LVL325:
 3295 000a FFF7FEFF 		bl	I2C_DisableInterrupts
 3296              	.LVL326:
1710:../drivers/fsl_i2c.c **** 
 3297              		.loc 1 1710 0
 3298 000e 1422     		movs	r2, #20
 3299 0010 0021     		movs	r1, #0
 3300 0012 201D     		adds	r0, r4, #4
 3301              	.LVL327:
 3302 0014 FFF7FEFF 		bl	memset
 3303              	.LVL328:
1713:../drivers/fsl_i2c.c ****     }
 3304              		.loc 1 1713 0
 3305 0018 0023     		movs	r3, #0
 3306 001a 2370     		strb	r3, [r4]
 3307              	.L375:
1715:../drivers/fsl_i2c.c **** 
 3308              		.loc 1 1715 0
 3309 001c 10BD     		pop	{r4, pc}
 3310              		.cfi_endproc
 3311              	.LFE184:
 3313              		.section	.text.I2C_SlaveTransferGetCount,"ax",%progbits
 3314              		.align	1
 3315              		.global	I2C_SlaveTransferGetCount
 3316              		.syntax unified
 3317              		.thumb
 3318              		.thumb_func
 3319              		.fpu fpv4-sp-d16
 3321              	I2C_SlaveTransferGetCount:
 3322              	.LFB185:
1718:../drivers/fsl_i2c.c ****     assert(handle);
 3323              		.loc 1 1718 0
 3324              		.cfi_startproc
 3325              		@ args = 0, pretend = 0, frame = 0
 3326              		@ frame_needed = 0, uses_anonymous_args = 0
 3327              		@ link register save eliminated.
 3328              	.LVL329:
1721:../drivers/fsl_i2c.c ****     {
 3329              		.loc 1 1721 0
 3330 0000 52B1     		cbz	r2, .L383
1727:../drivers/fsl_i2c.c ****     {
 3331              		.loc 1 1727 0
 3332 0002 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 3333 0004 03F0FF00 		and	r0, r3, #255
 3334              	.LVL330:
 3335 0008 13B9     		cbnz	r3, .L382
1729:../drivers/fsl_i2c.c ****         return kStatus_NoTransferInProgress;
 3336              		.loc 1 1729 0
 3337 000a 1060     		str	r0, [r2]
1730:../drivers/fsl_i2c.c ****     }
 3338              		.loc 1 1730 0
 3339 000c 0620     		movs	r0, #6
 3340 000e 7047     		bx	lr
 3341              	.L382:
1734:../drivers/fsl_i2c.c **** 
 3342              		.loc 1 1734 0
 3343 0010 4B69     		ldr	r3, [r1, #20]
 3344 0012 1360     		str	r3, [r2]
1736:../drivers/fsl_i2c.c **** }
 3345              		.loc 1 1736 0
 3346 0014 0020     		movs	r0, #0
 3347 0016 7047     		bx	lr
 3348              	.LVL331:
 3349              	.L383:
1723:../drivers/fsl_i2c.c ****     }
 3350              		.loc 1 1723 0
 3351 0018 0420     		movs	r0, #4
 3352              	.LVL332:
1737:../drivers/fsl_i2c.c **** 
 3353              		.loc 1 1737 0
 3354 001a 7047     		bx	lr
 3355              		.cfi_endproc
 3356              	.LFE185:
 3358              		.section	.text.I2C0_DriverIRQHandler,"ax",%progbits
 3359              		.align	1
 3360              		.global	I2C0_DriverIRQHandler
 3361              		.syntax unified
 3362              		.thumb
 3363              		.thumb_func
 3364              		.fpu fpv4-sp-d16
 3366              	I2C0_DriverIRQHandler:
 3367              	.LFB187:
1979:../drivers/fsl_i2c.c **** 
1980:../drivers/fsl_i2c.c **** #if defined(I2C0)
1981:../drivers/fsl_i2c.c **** void I2C0_DriverIRQHandler(void)
1982:../drivers/fsl_i2c.c **** {
 3368              		.loc 1 1982 0
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 0
 3371              		@ frame_needed = 0, uses_anonymous_args = 0
 3372              		@ link register save eliminated.
1983:../drivers/fsl_i2c.c ****     I2C_TransferCommonIRQHandler(I2C0, s_i2cHandle[0]);
 3373              		.loc 1 1983 0
 3374 0000 024B     		ldr	r3, .L385
 3375 0002 0348     		ldr	r0, .L385+4
 3376 0004 1968     		ldr	r1, [r3]
 3377 0006 FFF7FEBF 		b	I2C_TransferCommonIRQHandler
 3378              	.LVL333:
 3379              	.L386:
 3380 000a 00BF     		.align	2
 3381              	.L385:
 3382 000c 00000000 		.word	.LANCHOR4
 3383 0010 00600640 		.word	1074159616
 3384              		.cfi_endproc
 3385              	.LFE187:
 3387              		.section	.text.I2C1_DriverIRQHandler,"ax",%progbits
 3388              		.align	1
 3389              		.global	I2C1_DriverIRQHandler
 3390              		.syntax unified
 3391              		.thumb
 3392              		.thumb_func
 3393              		.fpu fpv4-sp-d16
 3395              	I2C1_DriverIRQHandler:
 3396              	.LFB188:
1984:../drivers/fsl_i2c.c **** }
1985:../drivers/fsl_i2c.c **** #endif
1986:../drivers/fsl_i2c.c **** 
1987:../drivers/fsl_i2c.c **** #if defined(I2C1)
1988:../drivers/fsl_i2c.c **** void I2C1_DriverIRQHandler(void)
1989:../drivers/fsl_i2c.c **** {
 3397              		.loc 1 1989 0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
 3401              		@ link register save eliminated.
1990:../drivers/fsl_i2c.c ****     I2C_TransferCommonIRQHandler(I2C1, s_i2cHandle[1]);
 3402              		.loc 1 1990 0
 3403 0000 024B     		ldr	r3, .L388
 3404 0002 0348     		ldr	r0, .L388+4
 3405 0004 5968     		ldr	r1, [r3, #4]
 3406 0006 FFF7FEBF 		b	I2C_TransferCommonIRQHandler
 3407              	.LVL334:
 3408              	.L389:
 3409 000a 00BF     		.align	2
 3410              	.L388:
 3411 000c 00000000 		.word	.LANCHOR4
 3412 0010 00700640 		.word	1074163712
 3413              		.cfi_endproc
 3414              	.LFE188:
 3416              		.section	.text.I2C2_DriverIRQHandler,"ax",%progbits
 3417              		.align	1
 3418              		.global	I2C2_DriverIRQHandler
 3419              		.syntax unified
 3420              		.thumb
 3421              		.thumb_func
 3422              		.fpu fpv4-sp-d16
 3424              	I2C2_DriverIRQHandler:
 3425              	.LFB189:
1991:../drivers/fsl_i2c.c **** }
1992:../drivers/fsl_i2c.c **** #endif
1993:../drivers/fsl_i2c.c **** 
1994:../drivers/fsl_i2c.c **** #if defined(I2C2)
1995:../drivers/fsl_i2c.c **** void I2C2_DriverIRQHandler(void)
1996:../drivers/fsl_i2c.c **** {
 3426              		.loc 1 1996 0
 3427              		.cfi_startproc
 3428              		@ args = 0, pretend = 0, frame = 0
 3429              		@ frame_needed = 0, uses_anonymous_args = 0
 3430              		@ link register save eliminated.
1997:../drivers/fsl_i2c.c ****     I2C_TransferCommonIRQHandler(I2C2, s_i2cHandle[2]);
 3431              		.loc 1 1997 0
 3432 0000 024B     		ldr	r3, .L391
 3433 0002 0348     		ldr	r0, .L391+4
 3434 0004 9968     		ldr	r1, [r3, #8]
 3435 0006 FFF7FEBF 		b	I2C_TransferCommonIRQHandler
 3436              	.LVL335:
 3437              	.L392:
 3438 000a 00BF     		.align	2
 3439              	.L391:
 3440 000c 00000000 		.word	.LANCHOR4
 3441 0010 00600E40 		.word	1074683904
 3442              		.cfi_endproc
 3443              	.LFE189:
 3445              		.section	.bss.s_i2cHandle,"aw",%nobits
 3446              		.align	2
 3447              		.set	.LANCHOR4,. + 0
 3450              	s_i2cHandle:
 3451 0000 00000000 		.space	12
 3451      00000000 
 3451      00000000 
 3452              		.section	.bss.s_i2cMasterIsr,"aw",%nobits
 3453              		.align	2
 3454              		.set	.LANCHOR0,. + 0
 3457              	s_i2cMasterIsr:
 3458 0000 00000000 		.space	4
 3459              		.section	.bss.s_i2cSlaveIsr,"aw",%nobits
 3460              		.align	2
 3461              		.set	.LANCHOR1,. + 0
 3464              	s_i2cSlaveIsr:
 3465 0000 00000000 		.space	4
 3466              		.section	.rodata.s_i2cClocks,"a",%progbits
 3467              		.align	2
 3468              		.set	.LANCHOR2,. + 0
 3471              	s_i2cClocks:
 3472 0000 06003410 		.word	271843334
 3473 0004 07003410 		.word	271843335
 3474 0008 06002810 		.word	271056902
 3475              		.section	.rodata.s_i2cDividerTable,"a",%progbits
 3476              		.align	1
 3477              		.set	.LANCHOR3,. + 0
 3480              	s_i2cDividerTable:
 3481 0000 1400     		.short	20
 3482 0002 1600     		.short	22
 3483 0004 1800     		.short	24
 3484 0006 1A00     		.short	26
 3485 0008 1C00     		.short	28
 3486 000a 1E00     		.short	30
 3487 000c 2200     		.short	34
 3488 000e 2800     		.short	40
 3489 0010 1C00     		.short	28
 3490 0012 2000     		.short	32
 3491 0014 2400     		.short	36
 3492 0016 2800     		.short	40
 3493 0018 2C00     		.short	44
 3494 001a 3000     		.short	48
 3495 001c 3800     		.short	56
 3496 001e 4400     		.short	68
 3497 0020 3000     		.short	48
 3498 0022 3800     		.short	56
 3499 0024 4000     		.short	64
 3500 0026 4800     		.short	72
 3501 0028 5000     		.short	80
 3502 002a 5800     		.short	88
 3503 002c 6800     		.short	104
 3504 002e 8000     		.short	128
 3505 0030 5000     		.short	80
 3506 0032 6000     		.short	96
 3507 0034 7000     		.short	112
 3508 0036 8000     		.short	128
 3509 0038 9000     		.short	144
 3510 003a A000     		.short	160
 3511 003c C000     		.short	192
 3512 003e F000     		.short	240
 3513 0040 A000     		.short	160
 3514 0042 C000     		.short	192
 3515 0044 E000     		.short	224
 3516 0046 0001     		.short	256
 3517 0048 2001     		.short	288
 3518 004a 4001     		.short	320
 3519 004c 8001     		.short	384
 3520 004e E001     		.short	480
 3521 0050 4001     		.short	320
 3522 0052 8001     		.short	384
 3523 0054 C001     		.short	448
 3524 0056 0002     		.short	512
 3525 0058 4002     		.short	576
 3526 005a 8002     		.short	640
 3527 005c 0003     		.short	768
 3528 005e C003     		.short	960
 3529 0060 8002     		.short	640
 3530 0062 0003     		.short	768
 3531 0064 8003     		.short	896
 3532 0066 0004     		.short	1024
 3533 0068 8004     		.short	1152
 3534 006a 0005     		.short	1280
 3535 006c 0006     		.short	1536
 3536 006e 8007     		.short	1920
 3537 0070 0005     		.short	1280
 3538 0072 0006     		.short	1536
 3539 0074 0007     		.short	1792
 3540 0076 0008     		.short	2048
 3541 0078 0009     		.short	2304
 3542 007a 000A     		.short	2560
 3543 007c 000C     		.short	3072
 3544 007e 000F     		.short	3840
 3545              		.section	.rodata.s_i2cIrqs,"a",%progbits
 3546              		.set	.LANCHOR5,. + 0
 3549              	s_i2cIrqs:
 3550 0000 18       		.byte	24
 3551 0001 19       		.byte	25
 3552 0002 4A       		.byte	74
 3553              		.text
 3554              	.Letext0:
 3555              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 3556              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3557              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 3558              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 3559              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 3560              		.file 11 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 3561              		.file 12 "../CMSIS/MK64F12.h"
 3562              		.file 13 "../CMSIS/system_MK64F12.h"
 3563              		.file 14 "../drivers/fsl_common.h"
 3564              		.file 15 "<built-in>"
