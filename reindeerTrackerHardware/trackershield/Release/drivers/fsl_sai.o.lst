   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_sai.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SAI_SetMasterClockDivider,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	SAI_SetMasterClockDivider:
  25              	.LFB161:
  26              		.file 1 "../drivers/fsl_sai.c"
   1:../drivers/fsl_sai.c **** /*
   2:../drivers/fsl_sai.c ****  * The Clear BSD License
   3:../drivers/fsl_sai.c ****  * Copyright (c) 2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_sai.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_sai.c ****  * All rights reserved.
   6:../drivers/fsl_sai.c ****  *
   7:../drivers/fsl_sai.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_sai.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_sai.c ****  * that the following conditions are met:
  10:../drivers/fsl_sai.c ****  *
  11:../drivers/fsl_sai.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_sai.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_sai.c ****  *
  14:../drivers/fsl_sai.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_sai.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_sai.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_sai.c ****  *
  18:../drivers/fsl_sai.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_sai.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_sai.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_sai.c ****  *
  22:../drivers/fsl_sai.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_sai.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_sai.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_sai.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_sai.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_sai.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_sai.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_sai.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_sai.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_sai.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_sai.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_sai.c ****  */
  34:../drivers/fsl_sai.c **** 
  35:../drivers/fsl_sai.c **** #include "fsl_sai.h"
  36:../drivers/fsl_sai.c **** 
  37:../drivers/fsl_sai.c **** /*******************************************************************************
  38:../drivers/fsl_sai.c ****  * Definitations
  39:../drivers/fsl_sai.c ****  ******************************************************************************/
  40:../drivers/fsl_sai.c **** enum _sai_transfer_state
  41:../drivers/fsl_sai.c **** {
  42:../drivers/fsl_sai.c ****     kSAI_Busy = 0x0U, /*!< SAI is busy */
  43:../drivers/fsl_sai.c ****     kSAI_Idle,        /*!< Transfer is done. */
  44:../drivers/fsl_sai.c ****     kSAI_Error        /*!< Transfer error occured. */
  45:../drivers/fsl_sai.c **** };
  46:../drivers/fsl_sai.c **** 
  47:../drivers/fsl_sai.c **** /*! @brief Typedef for sai tx interrupt handler. */
  48:../drivers/fsl_sai.c **** typedef void (*sai_tx_isr_t)(I2S_Type *base, sai_handle_t *saiHandle);
  49:../drivers/fsl_sai.c **** 
  50:../drivers/fsl_sai.c **** /*! @brief Typedef for sai rx interrupt handler. */
  51:../drivers/fsl_sai.c **** typedef void (*sai_rx_isr_t)(I2S_Type *base, sai_handle_t *saiHandle);
  52:../drivers/fsl_sai.c **** 
  53:../drivers/fsl_sai.c **** /*******************************************************************************
  54:../drivers/fsl_sai.c ****  * Prototypes
  55:../drivers/fsl_sai.c ****  ******************************************************************************/
  56:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) && (FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER)
  57:../drivers/fsl_sai.c **** 
  58:../drivers/fsl_sai.c **** /*!
  59:../drivers/fsl_sai.c ****  * @brief Set the master clock divider.
  60:../drivers/fsl_sai.c ****  *
  61:../drivers/fsl_sai.c ****  * This API will compute the master clock divider according to master clock frequency and master
  62:../drivers/fsl_sai.c ****  * clock source clock source frequency.
  63:../drivers/fsl_sai.c ****  *
  64:../drivers/fsl_sai.c ****  * @param base SAI base pointer.
  65:../drivers/fsl_sai.c ****  * @param mclk_Hz Mater clock frequency in Hz.
  66:../drivers/fsl_sai.c ****  * @param mclkSrcClock_Hz Master clock source frequency in Hz.
  67:../drivers/fsl_sai.c ****  */
  68:../drivers/fsl_sai.c **** static void SAI_SetMasterClockDivider(I2S_Type *base, uint32_t mclk_Hz, uint32_t mclkSrcClock_Hz);
  69:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER */
  70:../drivers/fsl_sai.c **** 
  71:../drivers/fsl_sai.c **** /*!
  72:../drivers/fsl_sai.c ****  * @brief Get the instance number for SAI.
  73:../drivers/fsl_sai.c ****  *
  74:../drivers/fsl_sai.c ****  * @param base SAI base pointer.
  75:../drivers/fsl_sai.c ****  */
  76:../drivers/fsl_sai.c **** uint32_t SAI_GetInstance(I2S_Type *base);
  77:../drivers/fsl_sai.c **** 
  78:../drivers/fsl_sai.c **** /*!
  79:../drivers/fsl_sai.c ****  * @brief sends a piece of data in non-blocking way.
  80:../drivers/fsl_sai.c ****  *
  81:../drivers/fsl_sai.c ****  * @param base SAI base pointer
  82:../drivers/fsl_sai.c ****  * @param channel Data channel used.
  83:../drivers/fsl_sai.c ****  * @param bitWidth How many bits in a audio word, usually 8/16/24/32 bits.
  84:../drivers/fsl_sai.c ****  * @param buffer Pointer to the data to be written.
  85:../drivers/fsl_sai.c ****  * @param size Bytes to be written.
  86:../drivers/fsl_sai.c ****  */
  87:../drivers/fsl_sai.c **** static void SAI_WriteNonBlocking(I2S_Type *base, uint32_t channel, uint32_t bitWidth, uint8_t *buff
  88:../drivers/fsl_sai.c **** 
  89:../drivers/fsl_sai.c **** /*!
  90:../drivers/fsl_sai.c ****  * @brief Receive a piece of data in non-blocking way.
  91:../drivers/fsl_sai.c ****  *
  92:../drivers/fsl_sai.c ****  * @param base SAI base pointer
  93:../drivers/fsl_sai.c ****  * @param channel Data channel used.
  94:../drivers/fsl_sai.c ****  * @param bitWidth How many bits in a audio word, usually 8/16/24/32 bits.
  95:../drivers/fsl_sai.c ****  * @param buffer Pointer to the data to be read.
  96:../drivers/fsl_sai.c ****  * @param size Bytes to be read.
  97:../drivers/fsl_sai.c ****  */
  98:../drivers/fsl_sai.c **** static void SAI_ReadNonBlocking(I2S_Type *base, uint32_t channel, uint32_t bitWidth, uint8_t *buffe
  99:../drivers/fsl_sai.c **** /*******************************************************************************
 100:../drivers/fsl_sai.c ****  * Variables
 101:../drivers/fsl_sai.c ****  ******************************************************************************/
 102:../drivers/fsl_sai.c **** /* Base pointer array */
 103:../drivers/fsl_sai.c **** static I2S_Type *const s_saiBases[] = I2S_BASE_PTRS;
 104:../drivers/fsl_sai.c **** /*!@brief SAI handle pointer */
 105:../drivers/fsl_sai.c **** sai_handle_t *s_saiHandle[ARRAY_SIZE(s_saiBases)][2];
 106:../drivers/fsl_sai.c **** /* IRQ number array */
 107:../drivers/fsl_sai.c **** static const IRQn_Type s_saiTxIRQ[] = I2S_TX_IRQS;
 108:../drivers/fsl_sai.c **** static const IRQn_Type s_saiRxIRQ[] = I2S_RX_IRQS;
 109:../drivers/fsl_sai.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 110:../drivers/fsl_sai.c **** /* Clock name array */
 111:../drivers/fsl_sai.c **** static const clock_ip_name_t s_saiClock[] = SAI_CLOCKS;
 112:../drivers/fsl_sai.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 113:../drivers/fsl_sai.c **** /*! @brief Pointer to tx IRQ handler for each instance. */
 114:../drivers/fsl_sai.c **** static sai_tx_isr_t s_saiTxIsr;
 115:../drivers/fsl_sai.c **** /*! @brief Pointer to tx IRQ handler for each instance. */
 116:../drivers/fsl_sai.c **** static sai_rx_isr_t s_saiRxIsr;
 117:../drivers/fsl_sai.c **** 
 118:../drivers/fsl_sai.c **** /*******************************************************************************
 119:../drivers/fsl_sai.c ****  * Code
 120:../drivers/fsl_sai.c ****  ******************************************************************************/
 121:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) && (FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER)
 122:../drivers/fsl_sai.c **** static void SAI_SetMasterClockDivider(I2S_Type *base, uint32_t mclk_Hz, uint32_t mclkSrcClock_Hz)
 123:../drivers/fsl_sai.c **** {
  27              		.loc 1 123 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
 124:../drivers/fsl_sai.c ****     uint32_t freq = mclkSrcClock_Hz;
 125:../drivers/fsl_sai.c ****     uint16_t fract, divide;
 126:../drivers/fsl_sai.c ****     uint32_t remaind = 0;
 127:../drivers/fsl_sai.c ****     uint32_t current_remainder = 0xFFFFFFFFU;
 128:../drivers/fsl_sai.c ****     uint16_t current_fract = 0;
 129:../drivers/fsl_sai.c ****     uint16_t current_divide = 0;
 130:../drivers/fsl_sai.c ****     uint32_t mul_freq = 0;
 131:../drivers/fsl_sai.c ****     uint32_t max_fract = 256;
 132:../drivers/fsl_sai.c **** 
 133:../drivers/fsl_sai.c ****     /*In order to prevent overflow */
 134:../drivers/fsl_sai.c ****     freq /= 100;
  40              		.loc 1 134 0
  41 0004 4FF0640C 		mov	ip, #100
  42 0008 B2FBFCF2 		udiv	r2, r2, ip
  43              	.LVL1:
 135:../drivers/fsl_sai.c ****     mclk_Hz /= 100;
  44              		.loc 1 135 0
  45 000c B1FBFCFC 		udiv	ip, r1, ip
  46              	.LVL2:
 136:../drivers/fsl_sai.c **** 
 137:../drivers/fsl_sai.c ****     /* Compute the max fract number */
 138:../drivers/fsl_sai.c ****     max_fract = mclk_Hz * 4096 / freq + 1;
  47              		.loc 1 138 0
  48 0010 4FEA0C37 		lsl	r7, ip, #12
  49 0014 B7FBF2F7 		udiv	r7, r7, r2
  50 0018 0137     		adds	r7, r7, #1
  51              	.LVL3:
  52 001a B7F5807F 		cmp	r7, #256
 129:../drivers/fsl_sai.c ****     uint32_t mul_freq = 0;
  53              		.loc 1 129 0
  54 001e 4FF0000E 		mov	lr, #0
  55 0022 28BF     		it	cs
  56 0024 4FF48077 		movcs	r7, #256
  57              	.LVL4:
 128:../drivers/fsl_sai.c ****     uint16_t current_divide = 0;
  58              		.loc 1 128 0
  59 0028 7446     		mov	r4, lr
 127:../drivers/fsl_sai.c ****     uint16_t current_fract = 0;
  60              		.loc 1 127 0
  61 002a 4FF0FF38 		mov	r8, #-1
 139:../drivers/fsl_sai.c ****     if (max_fract > 256)
 140:../drivers/fsl_sai.c ****     {
 141:../drivers/fsl_sai.c ****         max_fract = 256;
 142:../drivers/fsl_sai.c ****     }
 143:../drivers/fsl_sai.c **** 
 144:../drivers/fsl_sai.c ****     /* Looking for the closet frequency */
 145:../drivers/fsl_sai.c ****     for (fract = 1; fract < max_fract; fract++)
  62              		.loc 1 145 0
  63 002e 0126     		movs	r6, #1
 146:../drivers/fsl_sai.c ****     {
 147:../drivers/fsl_sai.c ****         mul_freq = freq * fract;
 148:../drivers/fsl_sai.c ****         remaind = mul_freq % mclk_Hz;
 149:../drivers/fsl_sai.c ****         divide = mul_freq / mclk_Hz;
 150:../drivers/fsl_sai.c **** 
 151:../drivers/fsl_sai.c ****         /* Find the exactly frequency */
 152:../drivers/fsl_sai.c ****         if (remaind == 0)
 153:../drivers/fsl_sai.c ****         {
 154:../drivers/fsl_sai.c ****             current_fract = fract;
 155:../drivers/fsl_sai.c ****             current_divide = mul_freq / mclk_Hz;
 156:../drivers/fsl_sai.c ****             break;
 157:../drivers/fsl_sai.c ****         }
 158:../drivers/fsl_sai.c **** 
 159:../drivers/fsl_sai.c ****         /* Closer to next one, set the closest to next data */
 160:../drivers/fsl_sai.c ****         if (remaind > mclk_Hz / 2)
  64              		.loc 1 160 0
  65 0030 C823     		movs	r3, #200
  66 0032 B1FBF3F1 		udiv	r1, r1, r3
  67              	.LVL5:
  68              	.L2:
 145:../drivers/fsl_sai.c ****     {
  69              		.loc 1 145 0 discriminator 1
  70 0036 BE42     		cmp	r6, r7
  71 0038 10D3     		bcc	.L6
  72 003a 7346     		mov	r3, lr
  73              	.L3:
  74              	.LVL6:
 161:../drivers/fsl_sai.c ****         {
 162:../drivers/fsl_sai.c ****             remaind = mclk_Hz - remaind;
 163:../drivers/fsl_sai.c ****             divide += 1;
 164:../drivers/fsl_sai.c ****         }
 165:../drivers/fsl_sai.c **** 
 166:../drivers/fsl_sai.c ****         /* Update the closest div and fract */
 167:../drivers/fsl_sai.c ****         if (remaind < current_remainder)
 168:../drivers/fsl_sai.c ****         {
 169:../drivers/fsl_sai.c ****             current_fract = fract;
 170:../drivers/fsl_sai.c ****             current_divide = divide;
 171:../drivers/fsl_sai.c ****             current_remainder = remaind;
 172:../drivers/fsl_sai.c ****         }
 173:../drivers/fsl_sai.c ****     }
 174:../drivers/fsl_sai.c **** 
 175:../drivers/fsl_sai.c ****     /* Fill the computed fract and divider to registers */
 176:../drivers/fsl_sai.c ****     base->MDR = I2S_MDR_DIVIDE(current_divide - 1) | I2S_MDR_FRACT(current_fract - 1);
  75              		.loc 1 176 0
  76 003c 013C     		subs	r4, r4, #1
  77              	.LVL7:
  78 003e 2403     		lsls	r4, r4, #12
  79 0040 013B     		subs	r3, r3, #1
  80              	.LVL8:
  81 0042 04F47F24 		and	r4, r4, #1044480
  82 0046 C3F30B03 		ubfx	r3, r3, #0, #12
  83 004a 2343     		orrs	r3, r3, r4
  84 004c C0F80431 		str	r3, [r0, #260]
  85              	.L7:
 177:../drivers/fsl_sai.c **** 
 178:../drivers/fsl_sai.c ****     /* Waiting for the divider updated */
 179:../drivers/fsl_sai.c ****     while (base->MCR & I2S_MCR_DUF_MASK)
  86              		.loc 1 179 0 discriminator 1
  87 0050 D0F80031 		ldr	r3, [r0, #256]
  88 0054 002B     		cmp	r3, #0
  89 0056 FBDB     		blt	.L7
 180:../drivers/fsl_sai.c ****     {
 181:../drivers/fsl_sai.c ****     }
 182:../drivers/fsl_sai.c **** }
  90              		.loc 1 182 0
  91 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
  92              	.LVL9:
  93              	.L6:
 147:../drivers/fsl_sai.c ****         remaind = mul_freq % mclk_Hz;
  94              		.loc 1 147 0
  95 005c 02FB06F5 		mul	r5, r2, r6
  96              	.LVL10:
 148:../drivers/fsl_sai.c ****         divide = mul_freq / mclk_Hz;
  97              		.loc 1 148 0
  98 0060 B5FBFCF3 		udiv	r3, r5, ip
  99 0064 0CFB1355 		mls	r5, ip, r3, r5
 100              	.LVL11:
 149:../drivers/fsl_sai.c **** 
 101              		.loc 1 149 0
 102 0068 9BB2     		uxth	r3, r3
 103              	.LVL12:
 152:../drivers/fsl_sai.c ****         {
 104              		.loc 1 152 0
 105 006a 7DB1     		cbz	r5, .L8
 160:../drivers/fsl_sai.c ****         {
 106              		.loc 1 160 0
 107 006c A942     		cmp	r1, r5
 163:../drivers/fsl_sai.c ****         }
 108              		.loc 1 163 0
 109 006e 3EBF     		ittt	cc
 110 0070 0133     		addcc	r3, r3, #1
 111              	.LVL13:
 162:../drivers/fsl_sai.c ****             divide += 1;
 112              		.loc 1 162 0
 113 0072 ACEB0505 		subcc	r5, ip, r5
 114              	.LVL14:
 163:../drivers/fsl_sai.c ****         }
 115              		.loc 1 163 0
 116 0076 9BB2     		uxthcc	r3, r3
 117              	.LVL15:
 167:../drivers/fsl_sai.c ****         {
 118              		.loc 1 167 0
 119 0078 4545     		cmp	r5, r8
 120 007a 38BF     		it	cc
 121 007c 3446     		movcc	r4, r6
 145:../drivers/fsl_sai.c ****     {
 122              		.loc 1 145 0
 123 007e 06F10106 		add	r6, r6, #1
 124              	.LVL16:
 170:../drivers/fsl_sai.c ****             current_remainder = remaind;
 125              		.loc 1 170 0
 126 0082 3CBF     		itt	cc
 127 0084 9E46     		movcc	lr, r3
 167:../drivers/fsl_sai.c ****         {
 128              		.loc 1 167 0
 129 0086 A846     		movcc	r8, r5
 130              	.LVL17:
 145:../drivers/fsl_sai.c ****     {
 131              		.loc 1 145 0
 132 0088 B6B2     		uxth	r6, r6
 133              	.LVL18:
 134 008a D4E7     		b	.L2
 135              	.LVL19:
 136              	.L8:
 137 008c 3446     		mov	r4, r6
 138 008e D5E7     		b	.L3
 139              		.cfi_endproc
 140              	.LFE161:
 142              		.section	.text.SAI_TxEnable.part.0,"ax",%progbits
 143              		.align	1
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu fpv4-sp-d16
 149              	SAI_TxEnable.part.0:
 150              	.LFB199:
 183:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER */
 184:../drivers/fsl_sai.c **** 
 185:../drivers/fsl_sai.c **** uint32_t SAI_GetInstance(I2S_Type *base)
 186:../drivers/fsl_sai.c **** {
 187:../drivers/fsl_sai.c ****     uint32_t instance;
 188:../drivers/fsl_sai.c **** 
 189:../drivers/fsl_sai.c ****     /* Find the instance index from base address mappings. */
 190:../drivers/fsl_sai.c ****     for (instance = 0; instance < ARRAY_SIZE(s_saiBases); instance++)
 191:../drivers/fsl_sai.c ****     {
 192:../drivers/fsl_sai.c ****         if (s_saiBases[instance] == base)
 193:../drivers/fsl_sai.c ****         {
 194:../drivers/fsl_sai.c ****             break;
 195:../drivers/fsl_sai.c ****         }
 196:../drivers/fsl_sai.c ****     }
 197:../drivers/fsl_sai.c **** 
 198:../drivers/fsl_sai.c ****     assert(instance < ARRAY_SIZE(s_saiBases));
 199:../drivers/fsl_sai.c **** 
 200:../drivers/fsl_sai.c ****     return instance;
 201:../drivers/fsl_sai.c **** }
 202:../drivers/fsl_sai.c **** 
 203:../drivers/fsl_sai.c **** static void SAI_WriteNonBlocking(I2S_Type *base, uint32_t channel, uint32_t bitWidth, uint8_t *buff
 204:../drivers/fsl_sai.c **** {
 205:../drivers/fsl_sai.c ****     uint32_t i = 0;
 206:../drivers/fsl_sai.c ****     uint8_t j = 0;
 207:../drivers/fsl_sai.c ****     uint8_t bytesPerWord = bitWidth / 8U;
 208:../drivers/fsl_sai.c ****     uint32_t data = 0;
 209:../drivers/fsl_sai.c ****     uint32_t temp = 0;
 210:../drivers/fsl_sai.c **** 
 211:../drivers/fsl_sai.c ****     for (i = 0; i < size / bytesPerWord; i++)
 212:../drivers/fsl_sai.c ****     {
 213:../drivers/fsl_sai.c ****         for (j = 0; j < bytesPerWord; j++)
 214:../drivers/fsl_sai.c ****         {
 215:../drivers/fsl_sai.c ****             temp = (uint32_t)(*buffer);
 216:../drivers/fsl_sai.c ****             data |= (temp << (8U * j));
 217:../drivers/fsl_sai.c ****             buffer++;
 218:../drivers/fsl_sai.c ****         }
 219:../drivers/fsl_sai.c ****         base->TDR[channel] = data;
 220:../drivers/fsl_sai.c ****         data = 0;
 221:../drivers/fsl_sai.c ****     }
 222:../drivers/fsl_sai.c **** }
 223:../drivers/fsl_sai.c **** 
 224:../drivers/fsl_sai.c **** static void SAI_ReadNonBlocking(I2S_Type *base, uint32_t channel, uint32_t bitWidth, uint8_t *buffe
 225:../drivers/fsl_sai.c **** {
 226:../drivers/fsl_sai.c ****     uint32_t i = 0;
 227:../drivers/fsl_sai.c ****     uint8_t j = 0;
 228:../drivers/fsl_sai.c ****     uint8_t bytesPerWord = bitWidth / 8U;
 229:../drivers/fsl_sai.c ****     uint32_t data = 0;
 230:../drivers/fsl_sai.c **** 
 231:../drivers/fsl_sai.c ****     for (i = 0; i < size / bytesPerWord; i++)
 232:../drivers/fsl_sai.c ****     {
 233:../drivers/fsl_sai.c ****         data = base->RDR[channel];
 234:../drivers/fsl_sai.c ****         for (j = 0; j < bytesPerWord; j++)
 235:../drivers/fsl_sai.c ****         {
 236:../drivers/fsl_sai.c ****             *buffer = (data >> (8U * j)) & 0xFF;
 237:../drivers/fsl_sai.c ****             buffer++;
 238:../drivers/fsl_sai.c ****         }
 239:../drivers/fsl_sai.c ****     }
 240:../drivers/fsl_sai.c **** }
 241:../drivers/fsl_sai.c **** 
 242:../drivers/fsl_sai.c **** void SAI_TxInit(I2S_Type *base, const sai_config_t *config)
 243:../drivers/fsl_sai.c **** {
 244:../drivers/fsl_sai.c ****     uint32_t val = 0;
 245:../drivers/fsl_sai.c **** 
 246:../drivers/fsl_sai.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 247:../drivers/fsl_sai.c ****     /* Enable the SAI clock */
 248:../drivers/fsl_sai.c ****     CLOCK_EnableClock(s_saiClock[SAI_GetInstance(base)]);
 249:../drivers/fsl_sai.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 250:../drivers/fsl_sai.c **** 
 251:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
 252:../drivers/fsl_sai.c ****     /* Master clock source setting */
 253:../drivers/fsl_sai.c ****     val = (base->MCR & ~I2S_MCR_MICS_MASK);
 254:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MICS(config->mclkSource));
 255:../drivers/fsl_sai.c **** 
 256:../drivers/fsl_sai.c ****     /* Configure Master clock output enable */
 257:../drivers/fsl_sai.c ****     val = (base->MCR & ~I2S_MCR_MOE_MASK);
 258:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MOE(config->mclkOutputEnable));
 259:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 260:../drivers/fsl_sai.c **** 
 261:../drivers/fsl_sai.c ****     /* Configure audio protocol */
 262:../drivers/fsl_sai.c ****     switch (config->protocol)
 263:../drivers/fsl_sai.c ****     {
 264:../drivers/fsl_sai.c ****         case kSAI_BusLeftJustified:
 265:../drivers/fsl_sai.c ****             base->TCR2 |= I2S_TCR2_BCP_MASK;
 266:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 267:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(31U) | I2S_TCR4_FSE(0U) | I2S_TCR4_FSP(0U)
 268:../drivers/fsl_sai.c ****             break;
 269:../drivers/fsl_sai.c **** 
 270:../drivers/fsl_sai.c ****         case kSAI_BusRightJustified:
 271:../drivers/fsl_sai.c ****             base->TCR2 |= I2S_TCR2_BCP_MASK;
 272:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 273:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(31U) | I2S_TCR4_FSE(0U) | I2S_TCR4_FSP(0U)
 274:../drivers/fsl_sai.c ****             break;
 275:../drivers/fsl_sai.c **** 
 276:../drivers/fsl_sai.c ****         case kSAI_BusI2S:
 277:../drivers/fsl_sai.c ****             base->TCR2 |= I2S_TCR2_BCP_MASK;
 278:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 279:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(31U) | I2S_TCR4_FSE(1U) | I2S_TCR4_FSP(1U)
 280:../drivers/fsl_sai.c ****             break;
 281:../drivers/fsl_sai.c **** 
 282:../drivers/fsl_sai.c ****         case kSAI_BusPCMA:
 283:../drivers/fsl_sai.c ****             base->TCR2 &= ~I2S_TCR2_BCP_MASK;
 284:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 285:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(0U) | I2S_TCR4_FSE(1U) | I2S_TCR4_FSP(0U) 
 286:../drivers/fsl_sai.c ****             break;
 287:../drivers/fsl_sai.c **** 
 288:../drivers/fsl_sai.c ****         case kSAI_BusPCMB:
 289:../drivers/fsl_sai.c ****             base->TCR2 &= ~I2S_TCR2_BCP_MASK;
 290:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 291:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(0U) | I2S_TCR4_FSE(0U) | I2S_TCR4_FSP(0U) 
 292:../drivers/fsl_sai.c ****             break;
 293:../drivers/fsl_sai.c **** 
 294:../drivers/fsl_sai.c ****         default:
 295:../drivers/fsl_sai.c ****             break;
 296:../drivers/fsl_sai.c ****     }
 297:../drivers/fsl_sai.c **** 
 298:../drivers/fsl_sai.c ****     /* Set master or slave */
 299:../drivers/fsl_sai.c ****     if (config->masterSlave == kSAI_Master)
 300:../drivers/fsl_sai.c ****     {
 301:../drivers/fsl_sai.c ****         base->TCR2 |= I2S_TCR2_BCD_MASK;
 302:../drivers/fsl_sai.c ****         base->TCR4 |= I2S_TCR4_FSD_MASK;
 303:../drivers/fsl_sai.c **** 
 304:../drivers/fsl_sai.c ****         /* Bit clock source setting */
 305:../drivers/fsl_sai.c ****         val = base->TCR2 & (~I2S_TCR2_MSEL_MASK);
 306:../drivers/fsl_sai.c ****         base->TCR2 = (val | I2S_TCR2_MSEL(config->bclkSource));
 307:../drivers/fsl_sai.c ****     }
 308:../drivers/fsl_sai.c ****     else
 309:../drivers/fsl_sai.c ****     {
 310:../drivers/fsl_sai.c ****         base->TCR2 &= ~I2S_TCR2_BCD_MASK;
 311:../drivers/fsl_sai.c ****         base->TCR4 &= ~I2S_TCR4_FSD_MASK;
 312:../drivers/fsl_sai.c ****     }
 313:../drivers/fsl_sai.c **** 
 314:../drivers/fsl_sai.c ****     /* Set Sync mode */
 315:../drivers/fsl_sai.c ****     switch (config->syncMode)
 316:../drivers/fsl_sai.c ****     {
 317:../drivers/fsl_sai.c ****         case kSAI_ModeAsync:
 318:../drivers/fsl_sai.c ****             val = base->TCR2;
 319:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 320:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(0U));
 321:../drivers/fsl_sai.c ****             break;
 322:../drivers/fsl_sai.c ****         case kSAI_ModeSync:
 323:../drivers/fsl_sai.c ****             val = base->TCR2;
 324:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 325:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(1U));
 326:../drivers/fsl_sai.c ****             /* If sync with Rx, should set Rx to async mode */
 327:../drivers/fsl_sai.c ****             val = base->RCR2;
 328:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 329:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(0U));
 330:../drivers/fsl_sai.c ****             break;
 331:../drivers/fsl_sai.c ****         case kSAI_ModeSyncWithOtherTx:
 332:../drivers/fsl_sai.c ****             val = base->TCR2;
 333:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 334:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(2U));
 335:../drivers/fsl_sai.c ****             break;
 336:../drivers/fsl_sai.c ****         case kSAI_ModeSyncWithOtherRx:
 337:../drivers/fsl_sai.c ****             val = base->TCR2;
 338:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 339:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(3U));
 340:../drivers/fsl_sai.c ****             break;
 341:../drivers/fsl_sai.c ****         default:
 342:../drivers/fsl_sai.c ****             break;
 343:../drivers/fsl_sai.c ****     }
 344:../drivers/fsl_sai.c **** }
 345:../drivers/fsl_sai.c **** 
 346:../drivers/fsl_sai.c **** void SAI_RxInit(I2S_Type *base, const sai_config_t *config)
 347:../drivers/fsl_sai.c **** {
 348:../drivers/fsl_sai.c ****     uint32_t val = 0;
 349:../drivers/fsl_sai.c **** 
 350:../drivers/fsl_sai.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 351:../drivers/fsl_sai.c ****     /* Enable SAI clock first. */
 352:../drivers/fsl_sai.c ****     CLOCK_EnableClock(s_saiClock[SAI_GetInstance(base)]);
 353:../drivers/fsl_sai.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 354:../drivers/fsl_sai.c **** 
 355:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
 356:../drivers/fsl_sai.c ****     /* Master clock source setting */
 357:../drivers/fsl_sai.c ****     val = (base->MCR & ~I2S_MCR_MICS_MASK);
 358:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MICS(config->mclkSource));
 359:../drivers/fsl_sai.c **** 
 360:../drivers/fsl_sai.c ****     /* Configure Master clock output enable */
 361:../drivers/fsl_sai.c ****     val = (base->MCR & ~I2S_MCR_MOE_MASK);
 362:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MOE(config->mclkOutputEnable));
 363:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 364:../drivers/fsl_sai.c **** 
 365:../drivers/fsl_sai.c ****     /* Configure audio protocol */
 366:../drivers/fsl_sai.c ****     switch (config->protocol)
 367:../drivers/fsl_sai.c ****     {
 368:../drivers/fsl_sai.c ****         case kSAI_BusLeftJustified:
 369:../drivers/fsl_sai.c ****             base->RCR2 |= I2S_RCR2_BCP_MASK;
 370:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 371:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(31U) | I2S_RCR4_FSE(0U) | I2S_RCR4_FSP(0U)
 372:../drivers/fsl_sai.c ****             break;
 373:../drivers/fsl_sai.c **** 
 374:../drivers/fsl_sai.c ****         case kSAI_BusRightJustified:
 375:../drivers/fsl_sai.c ****             base->RCR2 |= I2S_RCR2_BCP_MASK;
 376:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 377:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(31U) | I2S_RCR4_FSE(0U) | I2S_RCR4_FSP(0U)
 378:../drivers/fsl_sai.c ****             break;
 379:../drivers/fsl_sai.c **** 
 380:../drivers/fsl_sai.c ****         case kSAI_BusI2S:
 381:../drivers/fsl_sai.c ****             base->RCR2 |= I2S_RCR2_BCP_MASK;
 382:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 383:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(31U) | I2S_RCR4_FSE(1U) | I2S_RCR4_FSP(1U)
 384:../drivers/fsl_sai.c ****             break;
 385:../drivers/fsl_sai.c **** 
 386:../drivers/fsl_sai.c ****         case kSAI_BusPCMA:
 387:../drivers/fsl_sai.c ****             base->RCR2 &= ~I2S_RCR2_BCP_MASK;
 388:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 389:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(0U) | I2S_RCR4_FSE(1U) | I2S_RCR4_FSP(0U) 
 390:../drivers/fsl_sai.c ****             break;
 391:../drivers/fsl_sai.c **** 
 392:../drivers/fsl_sai.c ****         case kSAI_BusPCMB:
 393:../drivers/fsl_sai.c ****             base->RCR2 &= ~I2S_RCR2_BCP_MASK;
 394:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 395:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(0U) | I2S_RCR4_FSE(0U) | I2S_RCR4_FSP(0U) 
 396:../drivers/fsl_sai.c ****             break;
 397:../drivers/fsl_sai.c **** 
 398:../drivers/fsl_sai.c ****         default:
 399:../drivers/fsl_sai.c ****             break;
 400:../drivers/fsl_sai.c ****     }
 401:../drivers/fsl_sai.c **** 
 402:../drivers/fsl_sai.c ****     /* Set master or slave */
 403:../drivers/fsl_sai.c ****     if (config->masterSlave == kSAI_Master)
 404:../drivers/fsl_sai.c ****     {
 405:../drivers/fsl_sai.c ****         base->RCR2 |= I2S_RCR2_BCD_MASK;
 406:../drivers/fsl_sai.c ****         base->RCR4 |= I2S_RCR4_FSD_MASK;
 407:../drivers/fsl_sai.c **** 
 408:../drivers/fsl_sai.c ****         /* Bit clock source setting */
 409:../drivers/fsl_sai.c ****         val = base->RCR2 & (~I2S_RCR2_MSEL_MASK);
 410:../drivers/fsl_sai.c ****         base->RCR2 = (val | I2S_RCR2_MSEL(config->bclkSource));
 411:../drivers/fsl_sai.c ****     }
 412:../drivers/fsl_sai.c ****     else
 413:../drivers/fsl_sai.c ****     {
 414:../drivers/fsl_sai.c ****         base->RCR2 &= ~I2S_RCR2_BCD_MASK;
 415:../drivers/fsl_sai.c ****         base->RCR4 &= ~I2S_RCR4_FSD_MASK;
 416:../drivers/fsl_sai.c ****     }
 417:../drivers/fsl_sai.c **** 
 418:../drivers/fsl_sai.c ****     /* Set Sync mode */
 419:../drivers/fsl_sai.c ****     switch (config->syncMode)
 420:../drivers/fsl_sai.c ****     {
 421:../drivers/fsl_sai.c ****         case kSAI_ModeAsync:
 422:../drivers/fsl_sai.c ****             val = base->RCR2;
 423:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 424:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(0U));
 425:../drivers/fsl_sai.c ****             break;
 426:../drivers/fsl_sai.c ****         case kSAI_ModeSync:
 427:../drivers/fsl_sai.c ****             val = base->RCR2;
 428:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 429:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(1U));
 430:../drivers/fsl_sai.c ****             /* If sync with Tx, should set Tx to async mode */
 431:../drivers/fsl_sai.c ****             val = base->TCR2;
 432:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 433:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(0U));
 434:../drivers/fsl_sai.c ****             break;
 435:../drivers/fsl_sai.c ****         case kSAI_ModeSyncWithOtherTx:
 436:../drivers/fsl_sai.c ****             val = base->RCR2;
 437:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 438:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(2U));
 439:../drivers/fsl_sai.c ****             break;
 440:../drivers/fsl_sai.c ****         case kSAI_ModeSyncWithOtherRx:
 441:../drivers/fsl_sai.c ****             val = base->RCR2;
 442:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 443:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(3U));
 444:../drivers/fsl_sai.c ****             break;
 445:../drivers/fsl_sai.c ****         default:
 446:../drivers/fsl_sai.c ****             break;
 447:../drivers/fsl_sai.c ****     }
 448:../drivers/fsl_sai.c **** }
 449:../drivers/fsl_sai.c **** 
 450:../drivers/fsl_sai.c **** void SAI_Deinit(I2S_Type *base)
 451:../drivers/fsl_sai.c **** {
 452:../drivers/fsl_sai.c ****     SAI_TxEnable(base, false);
 453:../drivers/fsl_sai.c ****     SAI_RxEnable(base, false);
 454:../drivers/fsl_sai.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 455:../drivers/fsl_sai.c ****     CLOCK_DisableClock(s_saiClock[SAI_GetInstance(base)]);
 456:../drivers/fsl_sai.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 457:../drivers/fsl_sai.c **** }
 458:../drivers/fsl_sai.c **** 
 459:../drivers/fsl_sai.c **** void SAI_TxGetDefaultConfig(sai_config_t *config)
 460:../drivers/fsl_sai.c **** {
 461:../drivers/fsl_sai.c ****     config->bclkSource = kSAI_BclkSourceMclkDiv;
 462:../drivers/fsl_sai.c ****     config->masterSlave = kSAI_Master;
 463:../drivers/fsl_sai.c ****     config->mclkSource = kSAI_MclkSourceSysclk;
 464:../drivers/fsl_sai.c ****     config->protocol = kSAI_BusLeftJustified;
 465:../drivers/fsl_sai.c ****     config->syncMode = kSAI_ModeAsync;
 466:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
 467:../drivers/fsl_sai.c ****     config->mclkOutputEnable = true;
 468:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 469:../drivers/fsl_sai.c **** }
 470:../drivers/fsl_sai.c **** 
 471:../drivers/fsl_sai.c **** void SAI_RxGetDefaultConfig(sai_config_t *config)
 472:../drivers/fsl_sai.c **** {
 473:../drivers/fsl_sai.c ****     config->bclkSource = kSAI_BclkSourceMclkDiv;
 474:../drivers/fsl_sai.c ****     config->masterSlave = kSAI_Master;
 475:../drivers/fsl_sai.c ****     config->mclkSource = kSAI_MclkSourceSysclk;
 476:../drivers/fsl_sai.c ****     config->protocol = kSAI_BusLeftJustified;
 477:../drivers/fsl_sai.c ****     config->syncMode = kSAI_ModeSync;
 478:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
 479:../drivers/fsl_sai.c ****     config->mclkOutputEnable = true;
 480:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 481:../drivers/fsl_sai.c **** }
 482:../drivers/fsl_sai.c **** 
 483:../drivers/fsl_sai.c **** void SAI_TxReset(I2S_Type *base)
 484:../drivers/fsl_sai.c **** {
 485:../drivers/fsl_sai.c ****     /* Set the software reset and FIFO reset to clear internal state */
 486:../drivers/fsl_sai.c ****     base->TCSR = I2S_TCSR_SR_MASK | I2S_TCSR_FR_MASK;
 487:../drivers/fsl_sai.c **** 
 488:../drivers/fsl_sai.c ****     /* Clear software reset bit, this should be done by software */
 489:../drivers/fsl_sai.c ****     base->TCSR &= ~I2S_TCSR_SR_MASK;
 490:../drivers/fsl_sai.c **** 
 491:../drivers/fsl_sai.c ****     /* Reset all Tx register values */
 492:../drivers/fsl_sai.c ****     base->TCR2 = 0;
 493:../drivers/fsl_sai.c ****     base->TCR3 = 0;
 494:../drivers/fsl_sai.c ****     base->TCR4 = 0;
 495:../drivers/fsl_sai.c ****     base->TCR5 = 0;
 496:../drivers/fsl_sai.c ****     base->TMR = 0;
 497:../drivers/fsl_sai.c **** }
 498:../drivers/fsl_sai.c **** 
 499:../drivers/fsl_sai.c **** void SAI_RxReset(I2S_Type *base)
 500:../drivers/fsl_sai.c **** {
 501:../drivers/fsl_sai.c ****     /* Set the software reset and FIFO reset to clear internal state */
 502:../drivers/fsl_sai.c ****     base->RCSR = I2S_RCSR_SR_MASK | I2S_RCSR_FR_MASK;
 503:../drivers/fsl_sai.c **** 
 504:../drivers/fsl_sai.c ****     /* Clear software reset bit, this should be done by software */
 505:../drivers/fsl_sai.c ****     base->RCSR &= ~I2S_RCSR_SR_MASK;
 506:../drivers/fsl_sai.c **** 
 507:../drivers/fsl_sai.c ****     /* Reset all Rx register values */
 508:../drivers/fsl_sai.c ****     base->RCR2 = 0;
 509:../drivers/fsl_sai.c ****     base->RCR3 = 0;
 510:../drivers/fsl_sai.c ****     base->RCR4 = 0;
 511:../drivers/fsl_sai.c ****     base->RCR5 = 0;
 512:../drivers/fsl_sai.c ****     base->RMR = 0;
 513:../drivers/fsl_sai.c **** }
 514:../drivers/fsl_sai.c **** 
 515:../drivers/fsl_sai.c **** void SAI_TxEnable(I2S_Type *base, bool enable)
 151              		.loc 1 515 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              	.LVL20:
 516:../drivers/fsl_sai.c **** {
 517:../drivers/fsl_sai.c ****     if (enable)
 518:../drivers/fsl_sai.c ****     {
 519:../drivers/fsl_sai.c ****         /* If clock is sync with Rx, should enable RE bit. */
 520:../drivers/fsl_sai.c ****         if (((base->TCR2 & I2S_TCR2_SYNC_MASK) >> I2S_TCR2_SYNC_SHIFT) == 0x1U)
 157              		.loc 1 520 0
 158 0000 8368     		ldr	r3, [r0, #8]
 159 0002 0B49     		ldr	r1, .L12
 160 0004 9B0F     		lsrs	r3, r3, #30
 161 0006 012B     		cmp	r3, #1
 521:../drivers/fsl_sai.c ****         {
 522:../drivers/fsl_sai.c ****             base->RCSR = ((base->RCSR & 0xFFE3FFFFU) | I2S_RCSR_RE_MASK);
 162              		.loc 1 522 0
 163 0008 01BF     		itttt	eq
 164 000a D0F88020 		ldreq	r2, [r0, #128]
 165 000e 0A40     		andeq	r2, r2, r1
 166 0010 42F00042 		orreq	r2, r2, #-2147483648
 167 0014 C0F88020 		streq	r2, [r0, #128]
 523:../drivers/fsl_sai.c ****         }
 524:../drivers/fsl_sai.c ****         base->TCSR = ((base->TCSR & 0xFFE3FFFFU) | I2S_TCSR_TE_MASK);
 168              		.loc 1 524 0
 169 0018 0368     		ldr	r3, [r0]
 170 001a 0B40     		ands	r3, r3, r1
 171 001c 43F00043 		orr	r3, r3, #-2147483648
 172 0020 0360     		str	r3, [r0]
 173              	.LVL21:
 174              	.LBB34:
 175              	.LBB35:
 176              		.file 2 "../drivers/fsl_sai.h"
   1:../drivers/fsl_sai.h **** /*
   2:../drivers/fsl_sai.h ****  * The Clear BSD License
   3:../drivers/fsl_sai.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_sai.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_sai.h ****  * All rights reserved.
   6:../drivers/fsl_sai.h ****  *
   7:../drivers/fsl_sai.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_sai.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_sai.h ****  * that the following conditions are met:
  10:../drivers/fsl_sai.h ****  *
  11:../drivers/fsl_sai.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_sai.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_sai.h ****  *
  14:../drivers/fsl_sai.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_sai.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_sai.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_sai.h ****  *
  18:../drivers/fsl_sai.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_sai.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_sai.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_sai.h ****  *
  22:../drivers/fsl_sai.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_sai.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_sai.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_sai.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_sai.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_sai.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_sai.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_sai.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_sai.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_sai.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_sai.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_sai.h ****  */
  34:../drivers/fsl_sai.h **** 
  35:../drivers/fsl_sai.h **** #ifndef _FSL_SAI_H_
  36:../drivers/fsl_sai.h **** #define _FSL_SAI_H_
  37:../drivers/fsl_sai.h **** 
  38:../drivers/fsl_sai.h **** #include "fsl_common.h"
  39:../drivers/fsl_sai.h **** 
  40:../drivers/fsl_sai.h **** /*!
  41:../drivers/fsl_sai.h ****  * @addtogroup sai
  42:../drivers/fsl_sai.h ****  * @{
  43:../drivers/fsl_sai.h ****  */
  44:../drivers/fsl_sai.h **** 
  45:../drivers/fsl_sai.h **** /*******************************************************************************
  46:../drivers/fsl_sai.h ****  * Definitions
  47:../drivers/fsl_sai.h ****  ******************************************************************************/
  48:../drivers/fsl_sai.h **** 
  49:../drivers/fsl_sai.h **** /*! @name Driver version */
  50:../drivers/fsl_sai.h **** /*@{*/
  51:../drivers/fsl_sai.h **** #define FSL_SAI_DRIVER_VERSION (MAKE_VERSION(2, 1, 3)) /*!< Version 2.1.3 */
  52:../drivers/fsl_sai.h **** /*@}*/
  53:../drivers/fsl_sai.h **** 
  54:../drivers/fsl_sai.h **** /*! @brief SAI return status*/
  55:../drivers/fsl_sai.h **** enum _sai_status_t
  56:../drivers/fsl_sai.h **** {
  57:../drivers/fsl_sai.h ****     kStatus_SAI_TxBusy = MAKE_STATUS(kStatusGroup_SAI, 0),    /*!< SAI Tx is busy. */
  58:../drivers/fsl_sai.h ****     kStatus_SAI_RxBusy = MAKE_STATUS(kStatusGroup_SAI, 1),    /*!< SAI Rx is busy. */
  59:../drivers/fsl_sai.h ****     kStatus_SAI_TxError = MAKE_STATUS(kStatusGroup_SAI, 2),   /*!< SAI Tx FIFO error. */
  60:../drivers/fsl_sai.h ****     kStatus_SAI_RxError = MAKE_STATUS(kStatusGroup_SAI, 3),   /*!< SAI Rx FIFO error. */
  61:../drivers/fsl_sai.h ****     kStatus_SAI_QueueFull = MAKE_STATUS(kStatusGroup_SAI, 4), /*!< SAI transfer queue is full. */
  62:../drivers/fsl_sai.h ****     kStatus_SAI_TxIdle = MAKE_STATUS(kStatusGroup_SAI, 5),    /*!< SAI Tx is idle */
  63:../drivers/fsl_sai.h ****     kStatus_SAI_RxIdle = MAKE_STATUS(kStatusGroup_SAI, 6)     /*!< SAI Rx is idle */
  64:../drivers/fsl_sai.h **** };
  65:../drivers/fsl_sai.h **** 
  66:../drivers/fsl_sai.h **** /*! @brief Define the SAI bus type */
  67:../drivers/fsl_sai.h **** typedef enum _sai_protocol
  68:../drivers/fsl_sai.h **** {
  69:../drivers/fsl_sai.h ****     kSAI_BusLeftJustified = 0x0U, /*!< Uses left justified format.*/
  70:../drivers/fsl_sai.h ****     kSAI_BusRightJustified,       /*!< Uses right justified format. */
  71:../drivers/fsl_sai.h ****     kSAI_BusI2S,                  /*!< Uses I2S format. */
  72:../drivers/fsl_sai.h ****     kSAI_BusPCMA,                 /*!< Uses I2S PCM A format.*/
  73:../drivers/fsl_sai.h ****     kSAI_BusPCMB                  /*!< Uses I2S PCM B format. */
  74:../drivers/fsl_sai.h **** } sai_protocol_t;
  75:../drivers/fsl_sai.h **** 
  76:../drivers/fsl_sai.h **** /*! @brief Master or slave mode */
  77:../drivers/fsl_sai.h **** typedef enum _sai_master_slave
  78:../drivers/fsl_sai.h **** {
  79:../drivers/fsl_sai.h ****     kSAI_Master = 0x0U, /*!< Master mode */
  80:../drivers/fsl_sai.h ****     kSAI_Slave = 0x1U   /*!< Slave mode */
  81:../drivers/fsl_sai.h **** } sai_master_slave_t;
  82:../drivers/fsl_sai.h **** 
  83:../drivers/fsl_sai.h **** /*! @brief Mono or stereo audio format */
  84:../drivers/fsl_sai.h **** typedef enum _sai_mono_stereo
  85:../drivers/fsl_sai.h **** {
  86:../drivers/fsl_sai.h ****     kSAI_Stereo = 0x0U, /*!< Stereo sound. */
  87:../drivers/fsl_sai.h ****     kSAI_MonoRight,     /*!< Only Right channel have sound. */
  88:../drivers/fsl_sai.h ****     kSAI_MonoLeft       /*!< Only left channel have sound. */
  89:../drivers/fsl_sai.h **** } sai_mono_stereo_t;
  90:../drivers/fsl_sai.h **** 
  91:../drivers/fsl_sai.h **** /*! @brief Synchronous or asynchronous mode */
  92:../drivers/fsl_sai.h **** typedef enum _sai_sync_mode
  93:../drivers/fsl_sai.h **** {
  94:../drivers/fsl_sai.h ****     kSAI_ModeAsync = 0x0U,    /*!< Asynchronous mode */
  95:../drivers/fsl_sai.h ****     kSAI_ModeSync,            /*!< Synchronous mode (with receiver or transmit) */
  96:../drivers/fsl_sai.h ****     kSAI_ModeSyncWithOtherTx, /*!< Synchronous with another SAI transmit */
  97:../drivers/fsl_sai.h ****     kSAI_ModeSyncWithOtherRx  /*!< Synchronous with another SAI receiver */
  98:../drivers/fsl_sai.h **** } sai_sync_mode_t;
  99:../drivers/fsl_sai.h **** 
 100:../drivers/fsl_sai.h **** /*! @brief Mater clock source */
 101:../drivers/fsl_sai.h **** typedef enum _sai_mclk_source
 102:../drivers/fsl_sai.h **** {
 103:../drivers/fsl_sai.h ****     kSAI_MclkSourceSysclk = 0x0U, /*!< Master clock from the system clock */
 104:../drivers/fsl_sai.h ****     kSAI_MclkSourceSelect1,       /*!< Master clock from source 1 */
 105:../drivers/fsl_sai.h ****     kSAI_MclkSourceSelect2,       /*!< Master clock from source 2 */
 106:../drivers/fsl_sai.h ****     kSAI_MclkSourceSelect3        /*!< Master clock from source 3 */
 107:../drivers/fsl_sai.h **** } sai_mclk_source_t;
 108:../drivers/fsl_sai.h **** 
 109:../drivers/fsl_sai.h **** /*! @brief Bit clock source */
 110:../drivers/fsl_sai.h **** typedef enum _sai_bclk_source
 111:../drivers/fsl_sai.h **** {
 112:../drivers/fsl_sai.h ****     kSAI_BclkSourceBusclk = 0x0U, /*!< Bit clock using bus clock */
 113:../drivers/fsl_sai.h ****     kSAI_BclkSourceMclkDiv,       /*!< Bit clock using master clock divider */
 114:../drivers/fsl_sai.h ****     kSAI_BclkSourceOtherSai0,     /*!< Bit clock from other SAI device  */
 115:../drivers/fsl_sai.h ****     kSAI_BclkSourceOtherSai1      /*!< Bit clock from other SAI device */
 116:../drivers/fsl_sai.h **** } sai_bclk_source_t;
 117:../drivers/fsl_sai.h **** 
 118:../drivers/fsl_sai.h **** /*! @brief The SAI interrupt enable flag */
 119:../drivers/fsl_sai.h **** enum _sai_interrupt_enable_t
 120:../drivers/fsl_sai.h **** {
 121:../drivers/fsl_sai.h ****     kSAI_WordStartInterruptEnable =
 122:../drivers/fsl_sai.h ****         I2S_TCSR_WSIE_MASK, /*!< Word start flag, means the first word in a frame detected */
 123:../drivers/fsl_sai.h ****     kSAI_SyncErrorInterruptEnable = I2S_TCSR_SEIE_MASK,   /*!< Sync error flag, means the sync erro
 124:../drivers/fsl_sai.h ****     kSAI_FIFOWarningInterruptEnable = I2S_TCSR_FWIE_MASK, /*!< FIFO warning flag, means the FIFO is
 125:../drivers/fsl_sai.h ****     kSAI_FIFOErrorInterruptEnable = I2S_TCSR_FEIE_MASK,   /*!< FIFO error flag */
 126:../drivers/fsl_sai.h **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 127:../drivers/fsl_sai.h ****     kSAI_FIFORequestInterruptEnable = I2S_TCSR_FRIE_MASK, /*!< FIFO request, means reached watermar
 128:../drivers/fsl_sai.h **** #endif                                                    /* FSL_FEATURE_SAI_FIFO_COUNT */
 129:../drivers/fsl_sai.h **** };
 130:../drivers/fsl_sai.h **** 
 131:../drivers/fsl_sai.h **** /*! @brief The DMA request sources */
 132:../drivers/fsl_sai.h **** enum _sai_dma_enable_t
 133:../drivers/fsl_sai.h **** {
 134:../drivers/fsl_sai.h ****     kSAI_FIFOWarningDMAEnable = I2S_TCSR_FWDE_MASK, /*!< FIFO warning caused by the DMA request */
 135:../drivers/fsl_sai.h **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 136:../drivers/fsl_sai.h ****     kSAI_FIFORequestDMAEnable = I2S_TCSR_FRDE_MASK, /*!< FIFO request caused by the DMA request */
 137:../drivers/fsl_sai.h **** #endif                                              /* FSL_FEATURE_SAI_FIFO_COUNT */
 138:../drivers/fsl_sai.h **** };
 139:../drivers/fsl_sai.h **** 
 140:../drivers/fsl_sai.h **** /*! @brief The SAI status flag */
 141:../drivers/fsl_sai.h **** enum _sai_flags
 142:../drivers/fsl_sai.h **** {
 143:../drivers/fsl_sai.h ****     kSAI_WordStartFlag = I2S_TCSR_WSF_MASK, /*!< Word start flag, means the first word in a frame d
 144:../drivers/fsl_sai.h ****     kSAI_SyncErrorFlag = I2S_TCSR_SEF_MASK, /*!< Sync error flag, means the sync error is detected 
 145:../drivers/fsl_sai.h ****     kSAI_FIFOErrorFlag = I2S_TCSR_FEF_MASK, /*!< FIFO error flag */
 146:../drivers/fsl_sai.h **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 147:../drivers/fsl_sai.h ****     kSAI_FIFORequestFlag = I2S_TCSR_FRF_MASK, /*!< FIFO request flag. */
 148:../drivers/fsl_sai.h **** #endif                                        /* FSL_FEATURE_SAI_FIFO_COUNT */
 149:../drivers/fsl_sai.h ****     kSAI_FIFOWarningFlag = I2S_TCSR_FWF_MASK, /*!< FIFO warning flag */
 150:../drivers/fsl_sai.h **** };
 151:../drivers/fsl_sai.h **** 
 152:../drivers/fsl_sai.h **** /*! @brief The reset type */
 153:../drivers/fsl_sai.h **** typedef enum _sai_reset_type
 154:../drivers/fsl_sai.h **** {
 155:../drivers/fsl_sai.h ****     kSAI_ResetTypeSoftware = I2S_TCSR_SR_MASK,          /*!< Software reset, reset the logic state 
 156:../drivers/fsl_sai.h ****     kSAI_ResetTypeFIFO = I2S_TCSR_FR_MASK,              /*!< FIFO reset, reset the FIFO read and wr
 157:../drivers/fsl_sai.h ****     kSAI_ResetAll = I2S_TCSR_SR_MASK | I2S_TCSR_FR_MASK /*!< All reset. */
 158:../drivers/fsl_sai.h **** } sai_reset_type_t;
 159:../drivers/fsl_sai.h **** 
 160:../drivers/fsl_sai.h **** #if defined(FSL_FEATURE_SAI_HAS_FIFO_PACKING) && FSL_FEATURE_SAI_HAS_FIFO_PACKING
 161:../drivers/fsl_sai.h **** /*!
 162:../drivers/fsl_sai.h ****  * @brief The SAI packing mode
 163:../drivers/fsl_sai.h ****  * The mode includes 8 bit and 16 bit packing.
 164:../drivers/fsl_sai.h ****  */
 165:../drivers/fsl_sai.h **** typedef enum _sai_fifo_packing
 166:../drivers/fsl_sai.h **** {
 167:../drivers/fsl_sai.h ****     kSAI_FifoPackingDisabled = 0x0U, /*!< Packing disabled */
 168:../drivers/fsl_sai.h ****     kSAI_FifoPacking8bit = 0x2U,     /*!< 8 bit packing enabled */
 169:../drivers/fsl_sai.h ****     kSAI_FifoPacking16bit = 0x3U     /*!< 16bit packing enabled */
 170:../drivers/fsl_sai.h **** } sai_fifo_packing_t;
 171:../drivers/fsl_sai.h **** #endif /* FSL_FEATURE_SAI_HAS_FIFO_PACKING */
 172:../drivers/fsl_sai.h **** 
 173:../drivers/fsl_sai.h **** /*! @brief SAI user configuration structure */
 174:../drivers/fsl_sai.h **** typedef struct _sai_config
 175:../drivers/fsl_sai.h **** {
 176:../drivers/fsl_sai.h ****     sai_protocol_t protocol;  /*!< Audio bus protocol in SAI */
 177:../drivers/fsl_sai.h ****     sai_sync_mode_t syncMode; /*!< SAI sync mode, control Tx/Rx clock sync */
 178:../drivers/fsl_sai.h **** #if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
 179:../drivers/fsl_sai.h ****     bool mclkOutputEnable;          /*!< Master clock output enable, true means master clock divide
 180:../drivers/fsl_sai.h **** #endif                              /* FSL_FEATURE_SAI_HAS_MCR */
 181:../drivers/fsl_sai.h ****     sai_mclk_source_t mclkSource;   /*!< Master Clock source */
 182:../drivers/fsl_sai.h ****     sai_bclk_source_t bclkSource;   /*!< Bit Clock source */
 183:../drivers/fsl_sai.h ****     sai_master_slave_t masterSlave; /*!< Master or slave */
 184:../drivers/fsl_sai.h **** } sai_config_t;
 185:../drivers/fsl_sai.h **** 
 186:../drivers/fsl_sai.h **** /*!@brief SAI transfer queue size, user can refine it according to use case. */
 187:../drivers/fsl_sai.h **** #define SAI_XFER_QUEUE_SIZE (4)
 188:../drivers/fsl_sai.h **** 
 189:../drivers/fsl_sai.h **** /*! @brief Audio sample rate */
 190:../drivers/fsl_sai.h **** typedef enum _sai_sample_rate
 191:../drivers/fsl_sai.h **** {
 192:../drivers/fsl_sai.h ****     kSAI_SampleRate8KHz = 8000U,     /*!< Sample rate 8000 Hz */
 193:../drivers/fsl_sai.h ****     kSAI_SampleRate11025Hz = 11025U, /*!< Sample rate 11025 Hz */
 194:../drivers/fsl_sai.h ****     kSAI_SampleRate12KHz = 12000U,   /*!< Sample rate 12000 Hz */
 195:../drivers/fsl_sai.h ****     kSAI_SampleRate16KHz = 16000U,   /*!< Sample rate 16000 Hz */
 196:../drivers/fsl_sai.h ****     kSAI_SampleRate22050Hz = 22050U, /*!< Sample rate 22050 Hz */
 197:../drivers/fsl_sai.h ****     kSAI_SampleRate24KHz = 24000U,   /*!< Sample rate 24000 Hz */
 198:../drivers/fsl_sai.h ****     kSAI_SampleRate32KHz = 32000U,   /*!< Sample rate 32000 Hz */
 199:../drivers/fsl_sai.h ****     kSAI_SampleRate44100Hz = 44100U, /*!< Sample rate 44100 Hz */
 200:../drivers/fsl_sai.h ****     kSAI_SampleRate48KHz = 48000U,   /*!< Sample rate 48000 Hz */
 201:../drivers/fsl_sai.h ****     kSAI_SampleRate96KHz = 96000U    /*!< Sample rate 96000 Hz */
 202:../drivers/fsl_sai.h **** } sai_sample_rate_t;
 203:../drivers/fsl_sai.h **** 
 204:../drivers/fsl_sai.h **** /*! @brief Audio word width */
 205:../drivers/fsl_sai.h **** typedef enum _sai_word_width
 206:../drivers/fsl_sai.h **** {
 207:../drivers/fsl_sai.h ****     kSAI_WordWidth8bits = 8U,   /*!< Audio data width 8 bits */
 208:../drivers/fsl_sai.h ****     kSAI_WordWidth16bits = 16U, /*!< Audio data width 16 bits */
 209:../drivers/fsl_sai.h ****     kSAI_WordWidth24bits = 24U, /*!< Audio data width 24 bits */
 210:../drivers/fsl_sai.h ****     kSAI_WordWidth32bits = 32U  /*!< Audio data width 32 bits */
 211:../drivers/fsl_sai.h **** } sai_word_width_t;
 212:../drivers/fsl_sai.h **** 
 213:../drivers/fsl_sai.h **** /*! @brief sai transfer format */
 214:../drivers/fsl_sai.h **** typedef struct _sai_transfer_format
 215:../drivers/fsl_sai.h **** {
 216:../drivers/fsl_sai.h ****     uint32_t sampleRate_Hz;   /*!< Sample rate of audio data */
 217:../drivers/fsl_sai.h ****     uint32_t bitWidth;        /*!< Data length of audio data, usually 8/16/24/32 bits */
 218:../drivers/fsl_sai.h ****     sai_mono_stereo_t stereo; /*!< Mono or stereo */
 219:../drivers/fsl_sai.h ****     uint32_t masterClockHz;   /*!< Master clock frequency in Hz */
 220:../drivers/fsl_sai.h **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 221:../drivers/fsl_sai.h ****     uint8_t watermark;       /*!< Watermark value */
 222:../drivers/fsl_sai.h **** #endif                       /* FSL_FEATURE_SAI_FIFO_COUNT */
 223:../drivers/fsl_sai.h ****     uint8_t channel;         /*!< Data channel used in transfer.*/
 224:../drivers/fsl_sai.h ****     sai_protocol_t protocol; /*!< Which audio protocol used */
 225:../drivers/fsl_sai.h ****     bool isFrameSyncCompact; /*!< True means Frame sync length is configurable according to bitWidt
 226:../drivers/fsl_sai.h ****                                 sync length is 64 times of bit clock. */
 227:../drivers/fsl_sai.h **** } sai_transfer_format_t;
 228:../drivers/fsl_sai.h **** 
 229:../drivers/fsl_sai.h **** /*! @brief SAI transfer structure */
 230:../drivers/fsl_sai.h **** typedef struct _sai_transfer
 231:../drivers/fsl_sai.h **** {
 232:../drivers/fsl_sai.h ****     uint8_t *data;   /*!< Data start address to transfer. */
 233:../drivers/fsl_sai.h ****     size_t dataSize; /*!< Transfer size. */
 234:../drivers/fsl_sai.h **** } sai_transfer_t;
 235:../drivers/fsl_sai.h **** 
 236:../drivers/fsl_sai.h **** typedef struct _sai_handle sai_handle_t;
 237:../drivers/fsl_sai.h **** 
 238:../drivers/fsl_sai.h **** /*! @brief SAI transfer callback prototype */
 239:../drivers/fsl_sai.h **** typedef void (*sai_transfer_callback_t)(I2S_Type *base, sai_handle_t *handle, status_t status, void
 240:../drivers/fsl_sai.h **** 
 241:../drivers/fsl_sai.h **** /*! @brief SAI handle structure */
 242:../drivers/fsl_sai.h **** struct _sai_handle
 243:../drivers/fsl_sai.h **** {
 244:../drivers/fsl_sai.h ****     uint32_t state;                               /*!< Transfer status */
 245:../drivers/fsl_sai.h ****     sai_transfer_callback_t callback;             /*!< Callback function called at transfer event*/
 246:../drivers/fsl_sai.h ****     void *userData;                               /*!< Callback parameter passed to callback functi
 247:../drivers/fsl_sai.h ****     uint8_t bitWidth;                             /*!< Bit width for transfer, 8/16/24/32 bits */
 248:../drivers/fsl_sai.h ****     uint8_t channel;                              /*!< Transfer channel */
 249:../drivers/fsl_sai.h ****     sai_transfer_t saiQueue[SAI_XFER_QUEUE_SIZE]; /*!< Transfer queue storing queued transfer */
 250:../drivers/fsl_sai.h ****     size_t transferSize[SAI_XFER_QUEUE_SIZE];     /*!< Data bytes need to transfer */
 251:../drivers/fsl_sai.h ****     volatile uint8_t queueUser;                   /*!< Index for user to queue transfer */
 252:../drivers/fsl_sai.h ****     volatile uint8_t queueDriver;                 /*!< Index for driver to get the transfer data an
 253:../drivers/fsl_sai.h **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 254:../drivers/fsl_sai.h ****     uint8_t watermark; /*!< Watermark value */
 255:../drivers/fsl_sai.h **** #endif
 256:../drivers/fsl_sai.h **** };
 257:../drivers/fsl_sai.h **** 
 258:../drivers/fsl_sai.h **** /*******************************************************************************
 259:../drivers/fsl_sai.h ****  * API
 260:../drivers/fsl_sai.h ****  ******************************************************************************/
 261:../drivers/fsl_sai.h **** 
 262:../drivers/fsl_sai.h **** #if defined(__cplusplus)
 263:../drivers/fsl_sai.h **** extern "C" {
 264:../drivers/fsl_sai.h **** #endif /*_cplusplus*/
 265:../drivers/fsl_sai.h **** 
 266:../drivers/fsl_sai.h **** /*!
 267:../drivers/fsl_sai.h ****  * @name Initialization and deinitialization
 268:../drivers/fsl_sai.h ****  * @{
 269:../drivers/fsl_sai.h ****  */
 270:../drivers/fsl_sai.h **** 
 271:../drivers/fsl_sai.h **** /*!
 272:../drivers/fsl_sai.h ****  * @brief Initializes the SAI Tx peripheral.
 273:../drivers/fsl_sai.h ****  *
 274:../drivers/fsl_sai.h ****  * Ungates the SAI clock, resets the module, and configures SAI Tx with a configuration structure.
 275:../drivers/fsl_sai.h ****  * The configuration structure can be custom filled or set with default values by
 276:../drivers/fsl_sai.h ****  * SAI_TxGetDefaultConfig().
 277:../drivers/fsl_sai.h ****  *
 278:../drivers/fsl_sai.h ****  * @note  This API should be called at the beginning of the application to use
 279:../drivers/fsl_sai.h ****  * the SAI driver. Otherwise, accessing the SAIM module can cause a hard fault
 280:../drivers/fsl_sai.h ****  * because the clock is not enabled.
 281:../drivers/fsl_sai.h ****  *
 282:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 283:../drivers/fsl_sai.h ****  * @param config SAI configuration structure.
 284:../drivers/fsl_sai.h **** */
 285:../drivers/fsl_sai.h **** void SAI_TxInit(I2S_Type *base, const sai_config_t *config);
 286:../drivers/fsl_sai.h **** 
 287:../drivers/fsl_sai.h **** /*!
 288:../drivers/fsl_sai.h ****  * @brief Initializes the the SAI Rx peripheral.
 289:../drivers/fsl_sai.h ****  *
 290:../drivers/fsl_sai.h ****  * Ungates the SAI clock, resets the module, and configures the SAI Rx with a configuration structu
 291:../drivers/fsl_sai.h ****  * The configuration structure can be custom filled or set with default values by
 292:../drivers/fsl_sai.h ****  * SAI_RxGetDefaultConfig().
 293:../drivers/fsl_sai.h ****  *
 294:../drivers/fsl_sai.h ****  * @note  This API should be called at the beginning of the application to use
 295:../drivers/fsl_sai.h ****  * the SAI driver. Otherwise, accessing the SAI module can cause a hard fault
 296:../drivers/fsl_sai.h ****  * because the clock is not enabled.
 297:../drivers/fsl_sai.h ****  *
 298:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 299:../drivers/fsl_sai.h ****  * @param config SAI configuration structure.
 300:../drivers/fsl_sai.h ****  */
 301:../drivers/fsl_sai.h **** void SAI_RxInit(I2S_Type *base, const sai_config_t *config);
 302:../drivers/fsl_sai.h **** 
 303:../drivers/fsl_sai.h **** /*!
 304:../drivers/fsl_sai.h ****  * @brief  Sets the SAI Tx configuration structure to default values.
 305:../drivers/fsl_sai.h ****  *
 306:../drivers/fsl_sai.h ****  * This API initializes the configuration structure for use in SAI_TxConfig().
 307:../drivers/fsl_sai.h ****  * The initialized structure can remain unchanged in SAI_TxConfig(), or it can be modified
 308:../drivers/fsl_sai.h ****  *  before calling SAI_TxConfig().
 309:../drivers/fsl_sai.h ****  * This is an example.
 310:../drivers/fsl_sai.h ****    @code
 311:../drivers/fsl_sai.h ****    sai_config_t config;
 312:../drivers/fsl_sai.h ****    SAI_TxGetDefaultConfig(&config);
 313:../drivers/fsl_sai.h ****    @endcode
 314:../drivers/fsl_sai.h ****  *
 315:../drivers/fsl_sai.h ****  * @param config pointer to master configuration structure
 316:../drivers/fsl_sai.h ****  */
 317:../drivers/fsl_sai.h **** void SAI_TxGetDefaultConfig(sai_config_t *config);
 318:../drivers/fsl_sai.h **** 
 319:../drivers/fsl_sai.h **** /*!
 320:../drivers/fsl_sai.h ****  * @brief  Sets the SAI Rx configuration structure to default values.
 321:../drivers/fsl_sai.h ****  *
 322:../drivers/fsl_sai.h ****  * This API initializes the configuration structure for use in SAI_RxConfig().
 323:../drivers/fsl_sai.h ****  * The initialized structure can remain unchanged in SAI_RxConfig() or it can be modified
 324:../drivers/fsl_sai.h ****  *  before calling SAI_RxConfig().
 325:../drivers/fsl_sai.h ****  * This is an example.
 326:../drivers/fsl_sai.h ****    @code
 327:../drivers/fsl_sai.h ****    sai_config_t config;
 328:../drivers/fsl_sai.h ****    SAI_RxGetDefaultConfig(&config);
 329:../drivers/fsl_sai.h ****    @endcode
 330:../drivers/fsl_sai.h ****  *
 331:../drivers/fsl_sai.h ****  * @param config pointer to master configuration structure
 332:../drivers/fsl_sai.h ****  */
 333:../drivers/fsl_sai.h **** void SAI_RxGetDefaultConfig(sai_config_t *config);
 334:../drivers/fsl_sai.h **** 
 335:../drivers/fsl_sai.h **** /*!
 336:../drivers/fsl_sai.h ****  * @brief De-initializes the SAI peripheral.
 337:../drivers/fsl_sai.h ****  *
 338:../drivers/fsl_sai.h ****  * This API gates the SAI clock. The SAI module can't operate unless SAI_TxInit
 339:../drivers/fsl_sai.h ****  * or SAI_RxInit is called to enable the clock.
 340:../drivers/fsl_sai.h ****  *
 341:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 342:../drivers/fsl_sai.h **** */
 343:../drivers/fsl_sai.h **** void SAI_Deinit(I2S_Type *base);
 344:../drivers/fsl_sai.h **** 
 345:../drivers/fsl_sai.h **** /*!
 346:../drivers/fsl_sai.h ****  * @brief Resets the SAI Tx.
 347:../drivers/fsl_sai.h ****  *
 348:../drivers/fsl_sai.h ****  * This function enables the software reset and FIFO reset of SAI Tx. After reset, clear the reset 
 349:../drivers/fsl_sai.h ****  *
 350:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 351:../drivers/fsl_sai.h ****  */
 352:../drivers/fsl_sai.h **** void SAI_TxReset(I2S_Type *base);
 353:../drivers/fsl_sai.h **** 
 354:../drivers/fsl_sai.h **** /*!
 355:../drivers/fsl_sai.h ****  * @brief Resets the SAI Rx.
 356:../drivers/fsl_sai.h ****  *
 357:../drivers/fsl_sai.h ****  * This function enables the software reset and FIFO reset of SAI Rx. After reset, clear the reset 
 358:../drivers/fsl_sai.h ****  *
 359:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 360:../drivers/fsl_sai.h ****  */
 361:../drivers/fsl_sai.h **** void SAI_RxReset(I2S_Type *base);
 362:../drivers/fsl_sai.h **** 
 363:../drivers/fsl_sai.h **** /*!
 364:../drivers/fsl_sai.h ****  * @brief Enables/disables the SAI Tx.
 365:../drivers/fsl_sai.h ****  *
 366:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 367:../drivers/fsl_sai.h ****  * @param enable True means enable SAI Tx, false means disable.
 368:../drivers/fsl_sai.h ****  */
 369:../drivers/fsl_sai.h **** void SAI_TxEnable(I2S_Type *base, bool enable);
 370:../drivers/fsl_sai.h **** 
 371:../drivers/fsl_sai.h **** /*!
 372:../drivers/fsl_sai.h ****  * @brief Enables/disables the SAI Rx.
 373:../drivers/fsl_sai.h ****  *
 374:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 375:../drivers/fsl_sai.h ****  * @param enable True means enable SAI Rx, false means disable.
 376:../drivers/fsl_sai.h ****  */
 377:../drivers/fsl_sai.h **** void SAI_RxEnable(I2S_Type *base, bool enable);
 378:../drivers/fsl_sai.h **** 
 379:../drivers/fsl_sai.h **** /*! @} */
 380:../drivers/fsl_sai.h **** 
 381:../drivers/fsl_sai.h **** /*!
 382:../drivers/fsl_sai.h ****  * @name Status
 383:../drivers/fsl_sai.h ****  * @{
 384:../drivers/fsl_sai.h ****  */
 385:../drivers/fsl_sai.h **** 
 386:../drivers/fsl_sai.h **** /*!
 387:../drivers/fsl_sai.h ****  * @brief Gets the SAI Tx status flag state.
 388:../drivers/fsl_sai.h ****  *
 389:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 390:../drivers/fsl_sai.h ****  * @return SAI Tx status flag value. Use the Status Mask to get the status value needed.
 391:../drivers/fsl_sai.h ****  */
 392:../drivers/fsl_sai.h **** static inline uint32_t SAI_TxGetStatusFlag(I2S_Type *base)
 393:../drivers/fsl_sai.h **** {
 394:../drivers/fsl_sai.h ****     return base->TCSR;
 395:../drivers/fsl_sai.h **** }
 396:../drivers/fsl_sai.h **** 
 397:../drivers/fsl_sai.h **** /*!
 398:../drivers/fsl_sai.h ****  * @brief Clears the SAI Tx status flag state.
 399:../drivers/fsl_sai.h ****  *
 400:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 401:../drivers/fsl_sai.h ****  * @param mask State mask. It can be a combination of the following source if defined:
 402:../drivers/fsl_sai.h ****  *        @arg kSAI_WordStartFlag
 403:../drivers/fsl_sai.h ****  *        @arg kSAI_SyncErrorFlag
 404:../drivers/fsl_sai.h ****  *        @arg kSAI_FIFOErrorFlag
 405:../drivers/fsl_sai.h ****  */
 406:../drivers/fsl_sai.h **** static inline void SAI_TxClearStatusFlags(I2S_Type *base, uint32_t mask)
 407:../drivers/fsl_sai.h **** {
 408:../drivers/fsl_sai.h ****     base->TCSR = ((base->TCSR & 0xFFE3FFFFU) | mask);
 177              		.loc 2 408 0
 178 0022 0368     		ldr	r3, [r0]
 179 0024 23F4E013 		bic	r3, r3, #1835008
 180 0028 43F48023 		orr	r3, r3, #262144
 181 002c 0360     		str	r3, [r0]
 182              	.LBE35:
 183              	.LBE34:
 525:../drivers/fsl_sai.c ****         /* Also need to clear the FIFO error flag before start */
 526:../drivers/fsl_sai.c ****         SAI_TxClearStatusFlags(base, kSAI_FIFOErrorFlag);
 527:../drivers/fsl_sai.c ****     }
 528:../drivers/fsl_sai.c ****     else
 529:../drivers/fsl_sai.c ****     {
 530:../drivers/fsl_sai.c ****         /* If RE not sync with TE, than disable TE, otherwise, shall not disable TE */
 531:../drivers/fsl_sai.c ****         if (((base->RCR2 & I2S_RCR2_SYNC_MASK) >> I2S_RCR2_SYNC_SHIFT) != 0x1U)
 532:../drivers/fsl_sai.c ****         {
 533:../drivers/fsl_sai.c ****             /* Should not close RE even sync with Rx */
 534:../drivers/fsl_sai.c ****             base->TCSR = ((base->TCSR & 0xFFE3FFFFU) & (~I2S_TCSR_TE_MASK));
 535:../drivers/fsl_sai.c ****         }
 536:../drivers/fsl_sai.c ****     }
 537:../drivers/fsl_sai.c **** }
 184              		.loc 1 537 0
 185 002e 7047     		bx	lr
 186              	.L13:
 187              		.align	2
 188              	.L12:
 189 0030 FFFFE37F 		.word	2145648639
 190              		.cfi_endproc
 191              	.LFE199:
 193              		.section	.text.SAI_RxEnable.part.1,"ax",%progbits
 194              		.align	1
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu fpv4-sp-d16
 200              	SAI_RxEnable.part.1:
 201              	.LFB200:
 538:../drivers/fsl_sai.c **** 
 539:../drivers/fsl_sai.c **** void SAI_RxEnable(I2S_Type *base, bool enable)
 202              		.loc 1 539 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207              	.LVL22:
 540:../drivers/fsl_sai.c **** {
 541:../drivers/fsl_sai.c ****     if (enable)
 542:../drivers/fsl_sai.c ****     {
 543:../drivers/fsl_sai.c ****         /* If clock is sync with Tx, should enable TE bit. */
 544:../drivers/fsl_sai.c ****         if (((base->RCR2 & I2S_RCR2_SYNC_MASK) >> I2S_RCR2_SYNC_SHIFT) == 0x1U)
 208              		.loc 1 544 0
 209 0000 D0F88830 		ldr	r3, [r0, #136]
 210 0004 0C49     		ldr	r1, .L16
 211 0006 9B0F     		lsrs	r3, r3, #30
 212 0008 012B     		cmp	r3, #1
 545:../drivers/fsl_sai.c ****         {
 546:../drivers/fsl_sai.c ****             base->TCSR = ((base->TCSR & 0xFFE3FFFFU) | I2S_TCSR_TE_MASK);
 213              		.loc 1 546 0
 214 000a 01BF     		itttt	eq
 215 000c 0268     		ldreq	r2, [r0]
 216 000e 0A40     		andeq	r2, r2, r1
 217 0010 42F00042 		orreq	r2, r2, #-2147483648
 218 0014 0260     		streq	r2, [r0]
 547:../drivers/fsl_sai.c ****         }
 548:../drivers/fsl_sai.c ****         base->RCSR = ((base->RCSR & 0xFFE3FFFFU) | I2S_RCSR_RE_MASK);
 219              		.loc 1 548 0
 220 0016 D0F88030 		ldr	r3, [r0, #128]
 221 001a 0B40     		ands	r3, r3, r1
 222 001c 43F00043 		orr	r3, r3, #-2147483648
 223 0020 C0F88030 		str	r3, [r0, #128]
 224              	.LVL23:
 225              	.LBB36:
 226              	.LBB37:
 409:../drivers/fsl_sai.h **** }
 410:../drivers/fsl_sai.h **** 
 411:../drivers/fsl_sai.h **** /*!
 412:../drivers/fsl_sai.h ****  * @brief Gets the SAI Tx status flag state.
 413:../drivers/fsl_sai.h ****  *
 414:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 415:../drivers/fsl_sai.h ****  * @return SAI Rx status flag value. Use the Status Mask to get the status value needed.
 416:../drivers/fsl_sai.h ****  */
 417:../drivers/fsl_sai.h **** static inline uint32_t SAI_RxGetStatusFlag(I2S_Type *base)
 418:../drivers/fsl_sai.h **** {
 419:../drivers/fsl_sai.h ****     return base->RCSR;
 420:../drivers/fsl_sai.h **** }
 421:../drivers/fsl_sai.h **** 
 422:../drivers/fsl_sai.h **** /*!
 423:../drivers/fsl_sai.h ****  * @brief Clears the SAI Rx status flag state.
 424:../drivers/fsl_sai.h ****  *
 425:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 426:../drivers/fsl_sai.h ****  * @param mask State mask. It can be a combination of the following sources if defined.
 427:../drivers/fsl_sai.h ****  *        @arg kSAI_WordStartFlag
 428:../drivers/fsl_sai.h ****  *        @arg kSAI_SyncErrorFlag
 429:../drivers/fsl_sai.h ****  *        @arg kSAI_FIFOErrorFlag
 430:../drivers/fsl_sai.h ****  */
 431:../drivers/fsl_sai.h **** static inline void SAI_RxClearStatusFlags(I2S_Type *base, uint32_t mask)
 432:../drivers/fsl_sai.h **** {
 433:../drivers/fsl_sai.h ****     base->RCSR = ((base->RCSR & 0xFFE3FFFFU) | mask);
 227              		.loc 2 433 0
 228 0024 D0F88030 		ldr	r3, [r0, #128]
 229 0028 23F4E013 		bic	r3, r3, #1835008
 230 002c 43F48023 		orr	r3, r3, #262144
 231 0030 C0F88030 		str	r3, [r0, #128]
 232              	.LBE37:
 233              	.LBE36:
 549:../drivers/fsl_sai.c ****         /* Also need to clear the FIFO error flag before start */
 550:../drivers/fsl_sai.c ****         SAI_RxClearStatusFlags(base, kSAI_FIFOErrorFlag);
 551:../drivers/fsl_sai.c ****     }
 552:../drivers/fsl_sai.c ****     else
 553:../drivers/fsl_sai.c ****     {
 554:../drivers/fsl_sai.c ****         /* While TX is not sync with RX, close RX */
 555:../drivers/fsl_sai.c ****         if (((base->TCR2 & I2S_TCR2_SYNC_MASK) >> I2S_TCR2_SYNC_SHIFT) != 0x1U)
 556:../drivers/fsl_sai.c ****         {
 557:../drivers/fsl_sai.c ****             base->RCSR = ((base->RCSR & 0xFFE3FFFFU) & (~I2S_RCSR_RE_MASK));
 558:../drivers/fsl_sai.c ****         }
 559:../drivers/fsl_sai.c ****     }
 560:../drivers/fsl_sai.c **** }
 234              		.loc 1 560 0
 235 0034 7047     		bx	lr
 236              	.L17:
 237 0036 00BF     		.align	2
 238              	.L16:
 239 0038 FFFFE37F 		.word	2145648639
 240              		.cfi_endproc
 241              	.LFE200:
 243              		.section	.text.SAI_GetInstance,"ax",%progbits
 244              		.align	1
 245              		.global	SAI_GetInstance
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 249              		.fpu fpv4-sp-d16
 251              	SAI_GetInstance:
 252              	.LFB162:
 186:../drivers/fsl_sai.c ****     uint32_t instance;
 253              		.loc 1 186 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258              	.LVL24:
 201:../drivers/fsl_sai.c **** 
 259              		.loc 1 201 0
 260 0000 024B     		ldr	r3, .L19
 261 0002 C01A     		subs	r0, r0, r3
 262              	.LVL25:
 263 0004 18BF     		it	ne
 264 0006 0120     		movne	r0, #1
 265              	.LVL26:
 266 0008 7047     		bx	lr
 267              	.L20:
 268 000a 00BF     		.align	2
 269              	.L19:
 270 000c 00F00240 		.word	1073934336
 271              		.cfi_endproc
 272              	.LFE162:
 274              		.section	.text.SAI_TxInit,"ax",%progbits
 275              		.align	1
 276              		.global	SAI_TxInit
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	SAI_TxInit:
 283              	.LFB165:
 243:../drivers/fsl_sai.c ****     uint32_t val = 0;
 284              		.loc 1 243 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289              	.LVL27:
 290              	.LBB40:
 291              	.LBB41:
 292              		.file 3 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 293              		.loc 3 695 0
 294 0000 444A     		ldr	r2, .L39
 295 0002 1368     		ldr	r3, [r2]
 296 0004 43F40043 		orr	r3, r3, #32768
 297 0008 1360     		str	r3, [r2]
 298              	.LVL28:
 299              	.LBE41:
 300              	.LBE40:
 254:../drivers/fsl_sai.c **** 
 301              		.loc 1 254 0
 302 000a CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 253:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MICS(config->mclkSource));
 303              		.loc 1 253 0
 304 000c D0F80021 		ldr	r2, [r0, #256]
 305              	.LVL29:
 254:../drivers/fsl_sai.c **** 
 306              		.loc 1 254 0
 307 0010 1B06     		lsls	r3, r3, #24
 253:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MICS(config->mclkSource));
 308              		.loc 1 253 0
 309 0012 22F04072 		bic	r2, r2, #50331648
 310              	.LVL30:
 254:../drivers/fsl_sai.c **** 
 311              		.loc 1 254 0
 312 0016 03F04073 		and	r3, r3, #50331648
 313 001a 1343     		orrs	r3, r3, r2
 314 001c C0F80031 		str	r3, [r0, #256]
 257:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MOE(config->mclkOutputEnable));
 315              		.loc 1 257 0
 316 0020 D0F80031 		ldr	r3, [r0, #256]
 317              	.LVL31:
 258:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 318              		.loc 1 258 0
 319 0024 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 257:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MOE(config->mclkOutputEnable));
 320              		.loc 1 257 0
 321 0026 23F08043 		bic	r3, r3, #1073741824
 322              	.LVL32:
 258:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 323              		.loc 1 258 0
 324 002a 43EA8273 		orr	r3, r3, r2, lsl #30
 325              	.LVL33:
 326 002e C0F80031 		str	r3, [r0, #256]
 262:../drivers/fsl_sai.c ****     {
 327              		.loc 1 262 0
 328 0032 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 329 0034 042B     		cmp	r3, #4
 330 0036 0ED8     		bhi	.L22
 331 0038 DFE803F0 		tbb	[pc, r3]
 332              	.L24:
 333 003c 03       		.byte	(.L25-.L24)/2
 334 003d 03       		.byte	(.L25-.L24)/2
 335 003e 28       		.byte	(.L26-.L24)/2
 336 003f 32       		.byte	(.L27-.L24)/2
 337 0040 3C       		.byte	(.L28-.L24)/2
 338 0041 00       		.p2align 1
 339              	.L25:
 271:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 340              		.loc 1 271 0
 341 0042 8368     		ldr	r3, [r0, #8]
 342 0044 43F00073 		orr	r3, r3, #33554432
 343 0048 8360     		str	r3, [r0, #8]
 272:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(31U) | I2S_TCR4_FSE(0U) | I2S_TCR4_FSP(0U)
 344              		.loc 1 272 0
 345 004a C368     		ldr	r3, [r0, #12]
 346 004c 23F01F03 		bic	r3, r3, #31
 347 0050 C360     		str	r3, [r0, #12]
 273:../drivers/fsl_sai.c ****             break;
 348              		.loc 1 273 0
 349 0052 314B     		ldr	r3, .L39+4
 350              	.L37:
 291:../drivers/fsl_sai.c ****             break;
 351              		.loc 1 291 0
 352 0054 0361     		str	r3, [r0, #16]
 353              	.L22:
 299:../drivers/fsl_sai.c ****     {
 354              		.loc 1 299 0
 355 0056 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 356 0058 002B     		cmp	r3, #0
 357 005a 35D1     		bne	.L29
 301:../drivers/fsl_sai.c ****         base->TCR4 |= I2S_TCR4_FSD_MASK;
 358              		.loc 1 301 0
 359 005c 8368     		ldr	r3, [r0, #8]
 360 005e 43F08073 		orr	r3, r3, #16777216
 361 0062 8360     		str	r3, [r0, #8]
 302:../drivers/fsl_sai.c **** 
 362              		.loc 1 302 0
 363 0064 0369     		ldr	r3, [r0, #16]
 364 0066 43F00103 		orr	r3, r3, #1
 365 006a 0361     		str	r3, [r0, #16]
 306:../drivers/fsl_sai.c ****     }
 366              		.loc 1 306 0
 367 006c 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 305:../drivers/fsl_sai.c ****         base->TCR2 = (val | I2S_TCR2_MSEL(config->bclkSource));
 368              		.loc 1 305 0
 369 006e 8268     		ldr	r2, [r0, #8]
 370              	.LVL34:
 306:../drivers/fsl_sai.c ****     }
 371              		.loc 1 306 0
 372 0070 9B06     		lsls	r3, r3, #26
 373 0072 03F04063 		and	r3, r3, #201326592
 305:../drivers/fsl_sai.c ****         base->TCR2 = (val | I2S_TCR2_MSEL(config->bclkSource));
 374              		.loc 1 305 0
 375 0076 22F04062 		bic	r2, r2, #201326592
 376              	.LVL35:
 306:../drivers/fsl_sai.c ****     }
 377              		.loc 1 306 0
 378 007a 1343     		orrs	r3, r3, r2
 379 007c 8360     		str	r3, [r0, #8]
 380              	.LVL36:
 381              	.L30:
 315:../drivers/fsl_sai.c ****     {
 382              		.loc 1 315 0
 383 007e 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 384 0080 032B     		cmp	r3, #3
 385 0082 2ED8     		bhi	.L21
 386 0084 DFE803F0 		tbb	[pc, r3]
 387              	.L33:
 388 0088 29       		.byte	(.L32-.L33)/2
 389 0089 2E       		.byte	(.L34-.L33)/2
 390 008a 3B       		.byte	(.L35-.L33)/2
 391 008b 41       		.byte	(.L36-.L33)/2
 392              		.p2align 1
 393              	.L26:
 277:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 394              		.loc 1 277 0
 395 008c 8368     		ldr	r3, [r0, #8]
 396 008e 43F00073 		orr	r3, r3, #33554432
 397 0092 8360     		str	r3, [r0, #8]
 278:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(31U) | I2S_TCR4_FSE(1U) | I2S_TCR4_FSP(1U)
 398              		.loc 1 278 0
 399 0094 C368     		ldr	r3, [r0, #12]
 400 0096 23F01F03 		bic	r3, r3, #31
 401 009a C360     		str	r3, [r0, #12]
 279:../drivers/fsl_sai.c ****             break;
 402              		.loc 1 279 0
 403 009c 1F4B     		ldr	r3, .L39+8
 404 009e D9E7     		b	.L37
 405              	.L27:
 283:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 406              		.loc 1 283 0
 407 00a0 8368     		ldr	r3, [r0, #8]
 408 00a2 23F00073 		bic	r3, r3, #33554432
 409 00a6 8360     		str	r3, [r0, #8]
 284:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(0U) | I2S_TCR4_FSE(1U) | I2S_TCR4_FSP(0U) 
 410              		.loc 1 284 0
 411 00a8 C368     		ldr	r3, [r0, #12]
 412 00aa 23F01F03 		bic	r3, r3, #31
 413 00ae C360     		str	r3, [r0, #12]
 285:../drivers/fsl_sai.c ****             break;
 414              		.loc 1 285 0
 415 00b0 1B4B     		ldr	r3, .L39+12
 416 00b2 CFE7     		b	.L37
 417              	.L28:
 289:../drivers/fsl_sai.c ****             base->TCR3 &= ~I2S_TCR3_WDFL_MASK;
 418              		.loc 1 289 0
 419 00b4 8368     		ldr	r3, [r0, #8]
 420 00b6 23F00073 		bic	r3, r3, #33554432
 421 00ba 8360     		str	r3, [r0, #8]
 290:../drivers/fsl_sai.c ****             base->TCR4 = I2S_TCR4_MF(1U) | I2S_TCR4_SYWD(0U) | I2S_TCR4_FSE(0U) | I2S_TCR4_FSP(0U) 
 422              		.loc 1 290 0
 423 00bc C368     		ldr	r3, [r0, #12]
 424 00be 23F01F03 		bic	r3, r3, #31
 425 00c2 C360     		str	r3, [r0, #12]
 291:../drivers/fsl_sai.c ****             break;
 426              		.loc 1 291 0
 427 00c4 174B     		ldr	r3, .L39+16
 428 00c6 C5E7     		b	.L37
 429              	.L29:
 310:../drivers/fsl_sai.c ****         base->TCR4 &= ~I2S_TCR4_FSD_MASK;
 430              		.loc 1 310 0
 431 00c8 8368     		ldr	r3, [r0, #8]
 432 00ca 23F08073 		bic	r3, r3, #16777216
 433 00ce 8360     		str	r3, [r0, #8]
 311:../drivers/fsl_sai.c ****     }
 434              		.loc 1 311 0
 435 00d0 0369     		ldr	r3, [r0, #16]
 436 00d2 23F00103 		bic	r3, r3, #1
 437 00d6 0361     		str	r3, [r0, #16]
 438 00d8 D1E7     		b	.L30
 439              	.L32:
 318:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 440              		.loc 1 318 0
 441 00da 8368     		ldr	r3, [r0, #8]
 442              	.LVL37:
 319:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(0U));
 443              		.loc 1 319 0
 444 00dc 23F04043 		bic	r3, r3, #-1073741824
 445              	.LVL38:
 446              	.L38:
 339:../drivers/fsl_sai.c ****             break;
 447              		.loc 1 339 0
 448 00e0 8360     		str	r3, [r0, #8]
 449              	.L21:
 344:../drivers/fsl_sai.c **** 
 450              		.loc 1 344 0
 451 00e2 7047     		bx	lr
 452              	.L34:
 323:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 453              		.loc 1 323 0
 454 00e4 8368     		ldr	r3, [r0, #8]
 455              	.LVL39:
 324:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(1U));
 456              		.loc 1 324 0
 457 00e6 23F04043 		bic	r3, r3, #-1073741824
 458              	.LVL40:
 325:../drivers/fsl_sai.c ****             /* If sync with Rx, should set Rx to async mode */
 459              		.loc 1 325 0
 460 00ea 43F08043 		orr	r3, r3, #1073741824
 461              	.LVL41:
 462 00ee 8360     		str	r3, [r0, #8]
 327:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 463              		.loc 1 327 0
 464 00f0 D0F88830 		ldr	r3, [r0, #136]
 465              	.LVL42:
 328:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(0U));
 466              		.loc 1 328 0
 467 00f4 23F04043 		bic	r3, r3, #-1073741824
 468              	.LVL43:
 329:../drivers/fsl_sai.c ****             break;
 469              		.loc 1 329 0
 470 00f8 C0F88830 		str	r3, [r0, #136]
 330:../drivers/fsl_sai.c ****         case kSAI_ModeSyncWithOtherTx:
 471              		.loc 1 330 0
 472 00fc 7047     		bx	lr
 473              	.LVL44:
 474              	.L35:
 332:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 475              		.loc 1 332 0
 476 00fe 8368     		ldr	r3, [r0, #8]
 477              	.LVL45:
 333:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(2U));
 478              		.loc 1 333 0
 479 0100 23F04043 		bic	r3, r3, #-1073741824
 480              	.LVL46:
 334:../drivers/fsl_sai.c ****             break;
 481              		.loc 1 334 0
 482 0104 43F00043 		orr	r3, r3, #-2147483648
 483              	.LVL47:
 484 0108 EAE7     		b	.L38
 485              	.L36:
 337:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 486              		.loc 1 337 0
 487 010a 8368     		ldr	r3, [r0, #8]
 488              	.LVL48:
 339:../drivers/fsl_sai.c ****             break;
 489              		.loc 1 339 0
 490 010c 43F04043 		orr	r3, r3, #-1073741824
 491              	.LVL49:
 492 0110 E6E7     		b	.L38
 493              	.L40:
 494 0112 00BF     		.align	2
 495              	.L39:
 496 0114 3C800440 		.word	1074036796
 497 0118 101F0100 		.word	73488
 498 011c 1A1F0100 		.word	73498
 499 0120 18000100 		.word	65560
 500 0124 10000100 		.word	65552
 501              		.cfi_endproc
 502              	.LFE165:
 504              		.section	.text.SAI_RxInit,"ax",%progbits
 505              		.align	1
 506              		.global	SAI_RxInit
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu fpv4-sp-d16
 512              	SAI_RxInit:
 513              	.LFB166:
 347:../drivers/fsl_sai.c ****     uint32_t val = 0;
 514              		.loc 1 347 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 519              	.LVL50:
 520              	.LBB44:
 521              	.LBB45:
 522              		.loc 3 695 0
 523 0000 534A     		ldr	r2, .L59
 524 0002 1368     		ldr	r3, [r2]
 525 0004 43F40043 		orr	r3, r3, #32768
 526 0008 1360     		str	r3, [r2]
 527              	.LVL51:
 528              	.LBE45:
 529              	.LBE44:
 358:../drivers/fsl_sai.c **** 
 530              		.loc 1 358 0
 531 000a CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 357:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MICS(config->mclkSource));
 532              		.loc 1 357 0
 533 000c D0F80021 		ldr	r2, [r0, #256]
 534              	.LVL52:
 358:../drivers/fsl_sai.c **** 
 535              		.loc 1 358 0
 536 0010 1B06     		lsls	r3, r3, #24
 357:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MICS(config->mclkSource));
 537              		.loc 1 357 0
 538 0012 22F04072 		bic	r2, r2, #50331648
 539              	.LVL53:
 358:../drivers/fsl_sai.c **** 
 540              		.loc 1 358 0
 541 0016 03F04073 		and	r3, r3, #50331648
 542 001a 1343     		orrs	r3, r3, r2
 543 001c C0F80031 		str	r3, [r0, #256]
 361:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MOE(config->mclkOutputEnable));
 544              		.loc 1 361 0
 545 0020 D0F80031 		ldr	r3, [r0, #256]
 546              	.LVL54:
 362:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 547              		.loc 1 362 0
 548 0024 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 361:../drivers/fsl_sai.c ****     base->MCR = (val | I2S_MCR_MOE(config->mclkOutputEnable));
 549              		.loc 1 361 0
 550 0026 23F08043 		bic	r3, r3, #1073741824
 551              	.LVL55:
 362:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 552              		.loc 1 362 0
 553 002a 43EA8273 		orr	r3, r3, r2, lsl #30
 554              	.LVL56:
 555 002e C0F80031 		str	r3, [r0, #256]
 366:../drivers/fsl_sai.c ****     {
 556              		.loc 1 366 0
 557 0032 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 558 0034 042B     		cmp	r3, #4
 559 0036 13D8     		bhi	.L42
 560 0038 DFE803F0 		tbb	[pc, r3]
 561              	.L44:
 562 003c 03       		.byte	(.L45-.L44)/2
 563 003d 03       		.byte	(.L45-.L44)/2
 564 003e 33       		.byte	(.L46-.L44)/2
 565 003f 41       		.byte	(.L47-.L44)/2
 566 0040 4F       		.byte	(.L48-.L44)/2
 567 0041 00       		.p2align 1
 568              	.L45:
 375:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 569              		.loc 1 375 0
 570 0042 D0F88830 		ldr	r3, [r0, #136]
 571 0046 43F00073 		orr	r3, r3, #33554432
 572 004a C0F88830 		str	r3, [r0, #136]
 376:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(31U) | I2S_RCR4_FSE(0U) | I2S_RCR4_FSP(0U)
 573              		.loc 1 376 0
 574 004e D0F88C30 		ldr	r3, [r0, #140]
 575 0052 23F01F03 		bic	r3, r3, #31
 576 0056 C0F88C30 		str	r3, [r0, #140]
 377:../drivers/fsl_sai.c ****             break;
 577              		.loc 1 377 0
 578 005a 3E4B     		ldr	r3, .L59+4
 579              	.L57:
 395:../drivers/fsl_sai.c ****             break;
 580              		.loc 1 395 0
 581 005c C0F89030 		str	r3, [r0, #144]
 582              	.L42:
 403:../drivers/fsl_sai.c ****     {
 583              		.loc 1 403 0
 584 0060 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 585 0062 002B     		cmp	r3, #0
 586 0064 47D1     		bne	.L49
 405:../drivers/fsl_sai.c ****         base->RCR4 |= I2S_RCR4_FSD_MASK;
 587              		.loc 1 405 0
 588 0066 D0F88830 		ldr	r3, [r0, #136]
 589 006a 43F08073 		orr	r3, r3, #16777216
 590 006e C0F88830 		str	r3, [r0, #136]
 406:../drivers/fsl_sai.c **** 
 591              		.loc 1 406 0
 592 0072 D0F89030 		ldr	r3, [r0, #144]
 593 0076 43F00103 		orr	r3, r3, #1
 594 007a C0F89030 		str	r3, [r0, #144]
 410:../drivers/fsl_sai.c ****     }
 595              		.loc 1 410 0
 596 007e 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 409:../drivers/fsl_sai.c ****         base->RCR2 = (val | I2S_RCR2_MSEL(config->bclkSource));
 597              		.loc 1 409 0
 598 0080 D0F88820 		ldr	r2, [r0, #136]
 599              	.LVL57:
 410:../drivers/fsl_sai.c ****     }
 600              		.loc 1 410 0
 601 0084 9B06     		lsls	r3, r3, #26
 602 0086 03F04063 		and	r3, r3, #201326592
 409:../drivers/fsl_sai.c ****         base->RCR2 = (val | I2S_RCR2_MSEL(config->bclkSource));
 603              		.loc 1 409 0
 604 008a 22F04062 		bic	r2, r2, #201326592
 605              	.LVL58:
 410:../drivers/fsl_sai.c ****     }
 606              		.loc 1 410 0
 607 008e 1343     		orrs	r3, r3, r2
 608 0090 C0F88830 		str	r3, [r0, #136]
 609              	.LVL59:
 610              	.L50:
 419:../drivers/fsl_sai.c ****     {
 611              		.loc 1 419 0
 612 0094 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 613 0096 032B     		cmp	r3, #3
 614 0098 40D8     		bhi	.L41
 615 009a DFE803F0 		tbb	[pc, r3]
 616              	.L53:
 617 009e 39       		.byte	(.L52-.L53)/2
 618 009f 40       		.byte	(.L54-.L53)/2
 619 00a0 4D       		.byte	(.L55-.L53)/2
 620 00a1 54       		.byte	(.L56-.L53)/2
 621              		.p2align 1
 622              	.L46:
 381:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 623              		.loc 1 381 0
 624 00a2 D0F88830 		ldr	r3, [r0, #136]
 625 00a6 43F00073 		orr	r3, r3, #33554432
 626 00aa C0F88830 		str	r3, [r0, #136]
 382:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(31U) | I2S_RCR4_FSE(1U) | I2S_RCR4_FSP(1U)
 627              		.loc 1 382 0
 628 00ae D0F88C30 		ldr	r3, [r0, #140]
 629 00b2 23F01F03 		bic	r3, r3, #31
 630 00b6 C0F88C30 		str	r3, [r0, #140]
 383:../drivers/fsl_sai.c ****             break;
 631              		.loc 1 383 0
 632 00ba 274B     		ldr	r3, .L59+8
 633 00bc CEE7     		b	.L57
 634              	.L47:
 387:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 635              		.loc 1 387 0
 636 00be D0F88830 		ldr	r3, [r0, #136]
 637 00c2 23F00073 		bic	r3, r3, #33554432
 638 00c6 C0F88830 		str	r3, [r0, #136]
 388:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(0U) | I2S_RCR4_FSE(1U) | I2S_RCR4_FSP(0U) 
 639              		.loc 1 388 0
 640 00ca D0F88C30 		ldr	r3, [r0, #140]
 641 00ce 23F01F03 		bic	r3, r3, #31
 642 00d2 C0F88C30 		str	r3, [r0, #140]
 389:../drivers/fsl_sai.c ****             break;
 643              		.loc 1 389 0
 644 00d6 214B     		ldr	r3, .L59+12
 645 00d8 C0E7     		b	.L57
 646              	.L48:
 393:../drivers/fsl_sai.c ****             base->RCR3 &= ~I2S_RCR3_WDFL_MASK;
 647              		.loc 1 393 0
 648 00da D0F88830 		ldr	r3, [r0, #136]
 649 00de 23F00073 		bic	r3, r3, #33554432
 650 00e2 C0F88830 		str	r3, [r0, #136]
 394:../drivers/fsl_sai.c ****             base->RCR4 = I2S_RCR4_MF(1U) | I2S_RCR4_SYWD(0U) | I2S_RCR4_FSE(0U) | I2S_RCR4_FSP(0U) 
 651              		.loc 1 394 0
 652 00e6 D0F88C30 		ldr	r3, [r0, #140]
 653 00ea 23F01F03 		bic	r3, r3, #31
 654 00ee C0F88C30 		str	r3, [r0, #140]
 395:../drivers/fsl_sai.c ****             break;
 655              		.loc 1 395 0
 656 00f2 1B4B     		ldr	r3, .L59+16
 657 00f4 B2E7     		b	.L57
 658              	.L49:
 414:../drivers/fsl_sai.c ****         base->RCR4 &= ~I2S_RCR4_FSD_MASK;
 659              		.loc 1 414 0
 660 00f6 D0F88830 		ldr	r3, [r0, #136]
 661 00fa 23F08073 		bic	r3, r3, #16777216
 662 00fe C0F88830 		str	r3, [r0, #136]
 415:../drivers/fsl_sai.c ****     }
 663              		.loc 1 415 0
 664 0102 D0F89030 		ldr	r3, [r0, #144]
 665 0106 23F00103 		bic	r3, r3, #1
 666 010a C0F89030 		str	r3, [r0, #144]
 667 010e C1E7     		b	.L50
 668              	.L52:
 422:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 669              		.loc 1 422 0
 670 0110 D0F88830 		ldr	r3, [r0, #136]
 671              	.LVL60:
 423:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(0U));
 672              		.loc 1 423 0
 673 0114 23F04043 		bic	r3, r3, #-1073741824
 674              	.LVL61:
 675              	.L58:
 443:../drivers/fsl_sai.c ****             break;
 676              		.loc 1 443 0
 677 0118 C0F88830 		str	r3, [r0, #136]
 678              	.L41:
 448:../drivers/fsl_sai.c **** 
 679              		.loc 1 448 0
 680 011c 7047     		bx	lr
 681              	.L54:
 427:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 682              		.loc 1 427 0
 683 011e D0F88830 		ldr	r3, [r0, #136]
 684              	.LVL62:
 428:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(1U));
 685              		.loc 1 428 0
 686 0122 23F04043 		bic	r3, r3, #-1073741824
 687              	.LVL63:
 429:../drivers/fsl_sai.c ****             /* If sync with Tx, should set Tx to async mode */
 688              		.loc 1 429 0
 689 0126 43F08043 		orr	r3, r3, #1073741824
 690              	.LVL64:
 691 012a C0F88830 		str	r3, [r0, #136]
 431:../drivers/fsl_sai.c ****             val &= ~I2S_TCR2_SYNC_MASK;
 692              		.loc 1 431 0
 693 012e 8368     		ldr	r3, [r0, #8]
 694              	.LVL65:
 432:../drivers/fsl_sai.c ****             base->TCR2 = (val | I2S_TCR2_SYNC(0U));
 695              		.loc 1 432 0
 696 0130 23F04043 		bic	r3, r3, #-1073741824
 697              	.LVL66:
 433:../drivers/fsl_sai.c ****             break;
 698              		.loc 1 433 0
 699 0134 8360     		str	r3, [r0, #8]
 434:../drivers/fsl_sai.c ****         case kSAI_ModeSyncWithOtherTx:
 700              		.loc 1 434 0
 701 0136 7047     		bx	lr
 702              	.LVL67:
 703              	.L55:
 436:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 704              		.loc 1 436 0
 705 0138 D0F88830 		ldr	r3, [r0, #136]
 706              	.LVL68:
 437:../drivers/fsl_sai.c ****             base->RCR2 = (val | I2S_RCR2_SYNC(2U));
 707              		.loc 1 437 0
 708 013c 23F04043 		bic	r3, r3, #-1073741824
 709              	.LVL69:
 438:../drivers/fsl_sai.c ****             break;
 710              		.loc 1 438 0
 711 0140 43F00043 		orr	r3, r3, #-2147483648
 712              	.LVL70:
 713 0144 E8E7     		b	.L58
 714              	.L56:
 441:../drivers/fsl_sai.c ****             val &= ~I2S_RCR2_SYNC_MASK;
 715              		.loc 1 441 0
 716 0146 D0F88830 		ldr	r3, [r0, #136]
 717              	.LVL71:
 443:../drivers/fsl_sai.c ****             break;
 718              		.loc 1 443 0
 719 014a 43F04043 		orr	r3, r3, #-1073741824
 720              	.LVL72:
 721 014e E3E7     		b	.L58
 722              	.L60:
 723              		.align	2
 724              	.L59:
 725 0150 3C800440 		.word	1074036796
 726 0154 101F0100 		.word	73488
 727 0158 1A1F0100 		.word	73498
 728 015c 18000100 		.word	65560
 729 0160 10000100 		.word	65552
 730              		.cfi_endproc
 731              	.LFE166:
 733              		.section	.text.SAI_TxGetDefaultConfig,"ax",%progbits
 734              		.align	1
 735              		.global	SAI_TxGetDefaultConfig
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv4-sp-d16
 741              	SAI_TxGetDefaultConfig:
 742              	.LFB168:
 460:../drivers/fsl_sai.c ****     config->bclkSource = kSAI_BclkSourceMclkDiv;
 743              		.loc 1 460 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748              	.LVL73:
 462:../drivers/fsl_sai.c ****     config->mclkSource = kSAI_MclkSourceSysclk;
 749              		.loc 1 462 0
 750 0000 0023     		movs	r3, #0
 461:../drivers/fsl_sai.c ****     config->masterSlave = kSAI_Master;
 751              		.loc 1 461 0
 752 0002 0122     		movs	r2, #1
 753 0004 0271     		strb	r2, [r0, #4]
 462:../drivers/fsl_sai.c ****     config->mclkSource = kSAI_MclkSourceSysclk;
 754              		.loc 1 462 0
 755 0006 4371     		strb	r3, [r0, #5]
 463:../drivers/fsl_sai.c ****     config->protocol = kSAI_BusLeftJustified;
 756              		.loc 1 463 0
 757 0008 C370     		strb	r3, [r0, #3]
 464:../drivers/fsl_sai.c ****     config->syncMode = kSAI_ModeAsync;
 758              		.loc 1 464 0
 759 000a 0370     		strb	r3, [r0]
 465:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
 760              		.loc 1 465 0
 761 000c 4370     		strb	r3, [r0, #1]
 467:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 762              		.loc 1 467 0
 763 000e 8270     		strb	r2, [r0, #2]
 469:../drivers/fsl_sai.c **** 
 764              		.loc 1 469 0
 765 0010 7047     		bx	lr
 766              		.cfi_endproc
 767              	.LFE168:
 769              		.section	.text.SAI_RxGetDefaultConfig,"ax",%progbits
 770              		.align	1
 771              		.global	SAI_RxGetDefaultConfig
 772              		.syntax unified
 773              		.thumb
 774              		.thumb_func
 775              		.fpu fpv4-sp-d16
 777              	SAI_RxGetDefaultConfig:
 778              	.LFB169:
 472:../drivers/fsl_sai.c ****     config->bclkSource = kSAI_BclkSourceMclkDiv;
 779              		.loc 1 472 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 784              	.LVL74:
 473:../drivers/fsl_sai.c ****     config->masterSlave = kSAI_Master;
 785              		.loc 1 473 0
 786 0000 0123     		movs	r3, #1
 474:../drivers/fsl_sai.c ****     config->mclkSource = kSAI_MclkSourceSysclk;
 787              		.loc 1 474 0
 788 0002 0022     		movs	r2, #0
 473:../drivers/fsl_sai.c ****     config->masterSlave = kSAI_Master;
 789              		.loc 1 473 0
 790 0004 0371     		strb	r3, [r0, #4]
 474:../drivers/fsl_sai.c ****     config->mclkSource = kSAI_MclkSourceSysclk;
 791              		.loc 1 474 0
 792 0006 4271     		strb	r2, [r0, #5]
 475:../drivers/fsl_sai.c ****     config->protocol = kSAI_BusLeftJustified;
 793              		.loc 1 475 0
 794 0008 C270     		strb	r2, [r0, #3]
 476:../drivers/fsl_sai.c ****     config->syncMode = kSAI_ModeSync;
 795              		.loc 1 476 0
 796 000a 0270     		strb	r2, [r0]
 477:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
 797              		.loc 1 477 0
 798 000c 4370     		strb	r3, [r0, #1]
 479:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCR */
 799              		.loc 1 479 0
 800 000e 8370     		strb	r3, [r0, #2]
 481:../drivers/fsl_sai.c **** 
 801              		.loc 1 481 0
 802 0010 7047     		bx	lr
 803              		.cfi_endproc
 804              	.LFE169:
 806              		.section	.text.SAI_TxReset,"ax",%progbits
 807              		.align	1
 808              		.global	SAI_TxReset
 809              		.syntax unified
 810              		.thumb
 811              		.thumb_func
 812              		.fpu fpv4-sp-d16
 814              	SAI_TxReset:
 815              	.LFB170:
 484:../drivers/fsl_sai.c ****     /* Set the software reset and FIFO reset to clear internal state */
 816              		.loc 1 484 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 0, uses_anonymous_args = 0
 820              		@ link register save eliminated.
 821              	.LVL75:
 486:../drivers/fsl_sai.c **** 
 822              		.loc 1 486 0
 823 0000 4FF04073 		mov	r3, #50331648
 824 0004 0360     		str	r3, [r0]
 489:../drivers/fsl_sai.c **** 
 825              		.loc 1 489 0
 826 0006 0368     		ldr	r3, [r0]
 827 0008 23F08073 		bic	r3, r3, #16777216
 828 000c 0360     		str	r3, [r0]
 492:../drivers/fsl_sai.c ****     base->TCR3 = 0;
 829              		.loc 1 492 0
 830 000e 0023     		movs	r3, #0
 831 0010 8360     		str	r3, [r0, #8]
 493:../drivers/fsl_sai.c ****     base->TCR4 = 0;
 832              		.loc 1 493 0
 833 0012 C360     		str	r3, [r0, #12]
 494:../drivers/fsl_sai.c ****     base->TCR5 = 0;
 834              		.loc 1 494 0
 835 0014 0361     		str	r3, [r0, #16]
 495:../drivers/fsl_sai.c ****     base->TMR = 0;
 836              		.loc 1 495 0
 837 0016 4361     		str	r3, [r0, #20]
 496:../drivers/fsl_sai.c **** }
 838              		.loc 1 496 0
 839 0018 0366     		str	r3, [r0, #96]
 497:../drivers/fsl_sai.c **** 
 840              		.loc 1 497 0
 841 001a 7047     		bx	lr
 842              		.cfi_endproc
 843              	.LFE170:
 845              		.section	.text.SAI_RxReset,"ax",%progbits
 846              		.align	1
 847              		.global	SAI_RxReset
 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu fpv4-sp-d16
 853              	SAI_RxReset:
 854              	.LFB171:
 500:../drivers/fsl_sai.c ****     /* Set the software reset and FIFO reset to clear internal state */
 855              		.loc 1 500 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860              	.LVL76:
 502:../drivers/fsl_sai.c **** 
 861              		.loc 1 502 0
 862 0000 4FF04073 		mov	r3, #50331648
 863 0004 C0F88030 		str	r3, [r0, #128]
 505:../drivers/fsl_sai.c **** 
 864              		.loc 1 505 0
 865 0008 D0F88030 		ldr	r3, [r0, #128]
 866 000c 23F08073 		bic	r3, r3, #16777216
 867 0010 C0F88030 		str	r3, [r0, #128]
 508:../drivers/fsl_sai.c ****     base->RCR3 = 0;
 868              		.loc 1 508 0
 869 0014 0023     		movs	r3, #0
 870 0016 C0F88830 		str	r3, [r0, #136]
 509:../drivers/fsl_sai.c ****     base->RCR4 = 0;
 871              		.loc 1 509 0
 872 001a C0F88C30 		str	r3, [r0, #140]
 510:../drivers/fsl_sai.c ****     base->RCR5 = 0;
 873              		.loc 1 510 0
 874 001e C0F89030 		str	r3, [r0, #144]
 511:../drivers/fsl_sai.c ****     base->RMR = 0;
 875              		.loc 1 511 0
 876 0022 C0F89430 		str	r3, [r0, #148]
 512:../drivers/fsl_sai.c **** }
 877              		.loc 1 512 0
 878 0026 C0F8E030 		str	r3, [r0, #224]
 513:../drivers/fsl_sai.c **** 
 879              		.loc 1 513 0
 880 002a 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE171:
 884              		.section	.text.SAI_TxEnable,"ax",%progbits
 885              		.align	1
 886              		.global	SAI_TxEnable
 887              		.syntax unified
 888              		.thumb
 889              		.thumb_func
 890              		.fpu fpv4-sp-d16
 892              	SAI_TxEnable:
 893              	.LFB172:
 516:../drivers/fsl_sai.c ****     if (enable)
 894              		.loc 1 516 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 0
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              		@ link register save eliminated.
 899              	.LVL77:
 517:../drivers/fsl_sai.c ****     {
 900              		.loc 1 517 0
 901 0000 09B1     		cbz	r1, .L66
 902 0002 FFF7FEBF 		b	SAI_TxEnable.part.0
 903              	.LVL78:
 904              	.L66:
 531:../drivers/fsl_sai.c ****         {
 905              		.loc 1 531 0
 906 0006 D0F88830 		ldr	r3, [r0, #136]
 907 000a 9B0F     		lsrs	r3, r3, #30
 908 000c 012B     		cmp	r3, #1
 534:../drivers/fsl_sai.c ****         }
 909              		.loc 1 534 0
 910 000e 1FBF     		itttt	ne
 911 0010 0368     		ldrne	r3, [r0]
 912 0012 23F00043 		bicne	r3, r3, #-2147483648
 913 0016 23F4E013 		bicne	r3, r3, #1835008
 914 001a 0360     		strne	r3, [r0]
 537:../drivers/fsl_sai.c **** 
 915              		.loc 1 537 0
 916 001c 7047     		bx	lr
 917              		.cfi_endproc
 918              	.LFE172:
 920              		.section	.text.SAI_RxEnable,"ax",%progbits
 921              		.align	1
 922              		.global	SAI_RxEnable
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu fpv4-sp-d16
 928              	SAI_RxEnable:
 929              	.LFB173:
 540:../drivers/fsl_sai.c ****     if (enable)
 930              		.loc 1 540 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 935              	.LVL79:
 541:../drivers/fsl_sai.c ****     {
 936              		.loc 1 541 0
 937 0000 09B1     		cbz	r1, .L72
 938 0002 FFF7FEBF 		b	SAI_RxEnable.part.1
 939              	.LVL80:
 940              	.L72:
 555:../drivers/fsl_sai.c ****         {
 941              		.loc 1 555 0
 942 0006 8368     		ldr	r3, [r0, #8]
 943 0008 9B0F     		lsrs	r3, r3, #30
 944 000a 012B     		cmp	r3, #1
 557:../drivers/fsl_sai.c ****         }
 945              		.loc 1 557 0
 946 000c 1FBF     		itttt	ne
 947 000e D0F88030 		ldrne	r3, [r0, #128]
 948 0012 23F00043 		bicne	r3, r3, #-2147483648
 949 0016 23F4E013 		bicne	r3, r3, #1835008
 950 001a C0F88030 		strne	r3, [r0, #128]
 951              		.loc 1 560 0
 952 001e 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE173:
 956              		.section	.text.SAI_Deinit,"ax",%progbits
 957              		.align	1
 958              		.global	SAI_Deinit
 959              		.syntax unified
 960              		.thumb
 961              		.thumb_func
 962              		.fpu fpv4-sp-d16
 964              	SAI_Deinit:
 965              	.LFB167:
 451:../drivers/fsl_sai.c ****     SAI_TxEnable(base, false);
 966              		.loc 1 451 0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 0
 969              		@ frame_needed = 0, uses_anonymous_args = 0
 970              	.LVL81:
 971 0000 10B5     		push	{r4, lr}
 972              		.cfi_def_cfa_offset 8
 973              		.cfi_offset 4, -8
 974              		.cfi_offset 14, -4
 452:../drivers/fsl_sai.c ****     SAI_RxEnable(base, false);
 975              		.loc 1 452 0
 976 0002 0021     		movs	r1, #0
 977 0004 FFF7FEFF 		bl	SAI_TxEnable
 978              	.LVL82:
 453:../drivers/fsl_sai.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 979              		.loc 1 453 0
 980 0008 0021     		movs	r1, #0
 981 000a FFF7FEFF 		bl	SAI_RxEnable
 982              	.LVL83:
 983              	.LBB48:
 984              	.LBB49:
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 985              		.loc 3 706 0
 986 000e 034A     		ldr	r2, .L78
 987 0010 1368     		ldr	r3, [r2]
 988 0012 23F40043 		bic	r3, r3, #32768
 989 0016 1360     		str	r3, [r2]
 990              	.LVL84:
 991              	.LBE49:
 992              	.LBE48:
 457:../drivers/fsl_sai.c **** 
 993              		.loc 1 457 0
 994 0018 10BD     		pop	{r4, pc}
 995              	.L79:
 996 001a 00BF     		.align	2
 997              	.L78:
 998 001c 3C800440 		.word	1074036796
 999              		.cfi_endproc
 1000              	.LFE167:
 1002              		.section	.text.SAI_TxSoftwareReset,"ax",%progbits
 1003              		.align	1
 1004              		.global	SAI_TxSoftwareReset
 1005              		.syntax unified
 1006              		.thumb
 1007              		.thumb_func
 1008              		.fpu fpv4-sp-d16
 1010              	SAI_TxSoftwareReset:
 1011              	.LFB174:
 561:../drivers/fsl_sai.c **** 
 562:../drivers/fsl_sai.c **** void SAI_TxSoftwareReset(I2S_Type *base, sai_reset_type_t type)
 563:../drivers/fsl_sai.c **** {
 1012              		.loc 1 563 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              		@ link register save eliminated.
 1017              	.LVL85:
 564:../drivers/fsl_sai.c ****     base->TCSR |= (uint32_t)type;
 1018              		.loc 1 564 0
 1019 0000 0368     		ldr	r3, [r0]
 1020 0002 1943     		orrs	r1, r1, r3
 1021              	.LVL86:
 1022 0004 0160     		str	r1, [r0]
 565:../drivers/fsl_sai.c **** 
 566:../drivers/fsl_sai.c ****     /* Clear the software reset */
 567:../drivers/fsl_sai.c ****     base->TCSR &= ~I2S_TCSR_SR_MASK;
 1023              		.loc 1 567 0
 1024 0006 0368     		ldr	r3, [r0]
 1025 0008 23F08073 		bic	r3, r3, #16777216
 1026 000c 0360     		str	r3, [r0]
 568:../drivers/fsl_sai.c **** }
 1027              		.loc 1 568 0
 1028 000e 7047     		bx	lr
 1029              		.cfi_endproc
 1030              	.LFE174:
 1032              		.section	.text.SAI_RxSoftwareReset,"ax",%progbits
 1033              		.align	1
 1034              		.global	SAI_RxSoftwareReset
 1035              		.syntax unified
 1036              		.thumb
 1037              		.thumb_func
 1038              		.fpu fpv4-sp-d16
 1040              	SAI_RxSoftwareReset:
 1041              	.LFB175:
 569:../drivers/fsl_sai.c **** 
 570:../drivers/fsl_sai.c **** void SAI_RxSoftwareReset(I2S_Type *base, sai_reset_type_t type)
 571:../drivers/fsl_sai.c **** {
 1042              		.loc 1 571 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 0
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 1046              		@ link register save eliminated.
 1047              	.LVL87:
 572:../drivers/fsl_sai.c ****     base->RCSR |= (uint32_t)type;
 1048              		.loc 1 572 0
 1049 0000 D0F88030 		ldr	r3, [r0, #128]
 1050 0004 1943     		orrs	r1, r1, r3
 1051              	.LVL88:
 1052 0006 C0F88010 		str	r1, [r0, #128]
 573:../drivers/fsl_sai.c **** 
 574:../drivers/fsl_sai.c ****     /* Clear the software reset */
 575:../drivers/fsl_sai.c ****     base->RCSR &= ~I2S_RCSR_SR_MASK;
 1053              		.loc 1 575 0
 1054 000a D0F88030 		ldr	r3, [r0, #128]
 1055 000e 23F08073 		bic	r3, r3, #16777216
 1056 0012 C0F88030 		str	r3, [r0, #128]
 576:../drivers/fsl_sai.c **** }
 1057              		.loc 1 576 0
 1058 0016 7047     		bx	lr
 1059              		.cfi_endproc
 1060              	.LFE175:
 1062              		.section	.text.SAI_TxSetChannelFIFOMask,"ax",%progbits
 1063              		.align	1
 1064              		.global	SAI_TxSetChannelFIFOMask
 1065              		.syntax unified
 1066              		.thumb
 1067              		.thumb_func
 1068              		.fpu fpv4-sp-d16
 1070              	SAI_TxSetChannelFIFOMask:
 1071              	.LFB176:
 577:../drivers/fsl_sai.c **** 
 578:../drivers/fsl_sai.c **** void SAI_TxSetChannelFIFOMask(I2S_Type *base, uint8_t mask)
 579:../drivers/fsl_sai.c **** {
 1072              		.loc 1 579 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 0
 1075              		@ frame_needed = 0, uses_anonymous_args = 0
 1076              		@ link register save eliminated.
 1077              	.LVL89:
 580:../drivers/fsl_sai.c ****     base->TCR3 &= ~I2S_TCR3_TCE_MASK;
 1078              		.loc 1 580 0
 1079 0000 C368     		ldr	r3, [r0, #12]
 1080 0002 23F44033 		bic	r3, r3, #196608
 1081 0006 C360     		str	r3, [r0, #12]
 581:../drivers/fsl_sai.c ****     base->TCR3 |= I2S_TCR3_TCE(mask);
 1082              		.loc 1 581 0
 1083 0008 C368     		ldr	r3, [r0, #12]
 1084 000a 0904     		lsls	r1, r1, #16
 1085              	.LVL90:
 1086 000c 01F44031 		and	r1, r1, #196608
 1087 0010 1943     		orrs	r1, r1, r3
 1088 0012 C160     		str	r1, [r0, #12]
 582:../drivers/fsl_sai.c **** }
 1089              		.loc 1 582 0
 1090 0014 7047     		bx	lr
 1091              		.cfi_endproc
 1092              	.LFE176:
 1094              		.section	.text.SAI_RxSetChannelFIFOMask,"ax",%progbits
 1095              		.align	1
 1096              		.global	SAI_RxSetChannelFIFOMask
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	SAI_RxSetChannelFIFOMask:
 1103              	.LFB177:
 583:../drivers/fsl_sai.c **** 
 584:../drivers/fsl_sai.c **** void SAI_RxSetChannelFIFOMask(I2S_Type *base, uint8_t mask)
 585:../drivers/fsl_sai.c **** {
 1104              		.loc 1 585 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 1109              	.LVL91:
 586:../drivers/fsl_sai.c ****     base->RCR3 &= ~I2S_RCR3_RCE_MASK;
 1110              		.loc 1 586 0
 1111 0000 D0F88C30 		ldr	r3, [r0, #140]
 1112 0004 23F44033 		bic	r3, r3, #196608
 1113 0008 C0F88C30 		str	r3, [r0, #140]
 587:../drivers/fsl_sai.c ****     base->RCR3 |= I2S_RCR3_RCE(mask);
 1114              		.loc 1 587 0
 1115 000c D0F88C30 		ldr	r3, [r0, #140]
 1116 0010 0904     		lsls	r1, r1, #16
 1117              	.LVL92:
 1118 0012 01F44031 		and	r1, r1, #196608
 1119 0016 1943     		orrs	r1, r1, r3
 1120 0018 C0F88C10 		str	r1, [r0, #140]
 588:../drivers/fsl_sai.c **** }
 1121              		.loc 1 588 0
 1122 001c 7047     		bx	lr
 1123              		.cfi_endproc
 1124              	.LFE177:
 1126              		.section	.text.SAI_TxSetFormat,"ax",%progbits
 1127              		.align	1
 1128              		.global	SAI_TxSetFormat
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1132              		.fpu fpv4-sp-d16
 1134              	SAI_TxSetFormat:
 1135              	.LFB178:
 589:../drivers/fsl_sai.c **** 
 590:../drivers/fsl_sai.c **** void SAI_TxSetFormat(I2S_Type *base,
 591:../drivers/fsl_sai.c ****                      sai_transfer_format_t *format,
 592:../drivers/fsl_sai.c ****                      uint32_t mclkSourceClockHz,
 593:../drivers/fsl_sai.c ****                      uint32_t bclkSourceClockHz)
 594:../drivers/fsl_sai.c **** {
 1136              		.loc 1 594 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 0
 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 1140              	.LVL93:
 1141 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1142              		.cfi_def_cfa_offset 24
 1143              		.cfi_offset 3, -24
 1144              		.cfi_offset 4, -20
 1145              		.cfi_offset 5, -16
 1146              		.cfi_offset 6, -12
 1147              		.cfi_offset 7, -8
 1148              		.cfi_offset 14, -4
 1149              		.loc 1 594 0
 1150 0002 1E46     		mov	r6, r3
 595:../drivers/fsl_sai.c ****     uint32_t bclk = 0;
 596:../drivers/fsl_sai.c ****     uint32_t val = 0;
 597:../drivers/fsl_sai.c ****     uint32_t channels = 2U;
 598:../drivers/fsl_sai.c **** 
 599:../drivers/fsl_sai.c ****     if (format->stereo != kSAI_Stereo)
 1151              		.loc 1 599 0
 1152 0004 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 1153              	.LVL94:
 594:../drivers/fsl_sai.c ****     uint32_t bclk = 0;
 1154              		.loc 1 594 0
 1155 0006 0D46     		mov	r5, r1
 597:../drivers/fsl_sai.c **** 
 1156              		.loc 1 597 0
 1157 0008 002B     		cmp	r3, #0
 1158 000a 0B68     		ldr	r3, [r1]
 600:../drivers/fsl_sai.c ****     {
 601:../drivers/fsl_sai.c ****         channels = 1U;
 602:../drivers/fsl_sai.c ****     }
 603:../drivers/fsl_sai.c **** 
 604:../drivers/fsl_sai.c ****     if (format->isFrameSyncCompact)
 1159              		.loc 1 604 0
 1160 000c C97C     		ldrb	r1, [r1, #19]	@ zero_extendqisi2
 1161              	.LVL95:
 594:../drivers/fsl_sai.c ****     uint32_t bclk = 0;
 1162              		.loc 1 594 0
 1163 000e 0446     		mov	r4, r0
 597:../drivers/fsl_sai.c **** 
 1164              		.loc 1 597 0
 1165 0010 14BF     		ite	ne
 1166 0012 0127     		movne	r7, #1
 1167 0014 0227     		moveq	r7, #2
 1168              	.LVL96:
 1169              		.loc 1 604 0
 1170 0016 0029     		cmp	r1, #0
 1171 0018 4AD0     		beq	.L86
 605:../drivers/fsl_sai.c ****     {
 606:../drivers/fsl_sai.c ****         bclk = format->sampleRate_Hz * format->bitWidth * channels;
 1172              		.loc 1 606 0
 1173 001a 6968     		ldr	r1, [r5, #4]
 1174 001c 4B43     		muls	r3, r1, r3
 1175 001e 5F43     		muls	r7, r3, r7
 1176              	.LVL97:
 607:../drivers/fsl_sai.c ****         val = (base->TCR4 & (~I2S_TCR4_SYWD_MASK));
 608:../drivers/fsl_sai.c ****         val |= I2S_TCR4_SYWD(format->bitWidth - 1U);
 1177              		.loc 1 608 0
 1178 0020 0139     		subs	r1, r1, #1
 607:../drivers/fsl_sai.c ****         val = (base->TCR4 & (~I2S_TCR4_SYWD_MASK));
 1179              		.loc 1 607 0
 1180 0022 0369     		ldr	r3, [r0, #16]
 1181              		.loc 1 608 0
 1182 0024 0902     		lsls	r1, r1, #8
 607:../drivers/fsl_sai.c ****         val = (base->TCR4 & (~I2S_TCR4_SYWD_MASK));
 1183              		.loc 1 607 0
 1184 0026 23F4F853 		bic	r3, r3, #7936
 1185              	.LVL98:
 1186              		.loc 1 608 0
 1187 002a 01F4F851 		and	r1, r1, #7936
 1188 002e 1943     		orrs	r1, r1, r3
 1189              	.LVL99:
 609:../drivers/fsl_sai.c ****         base->TCR4 = val;
 1190              		.loc 1 609 0
 1191 0030 0161     		str	r1, [r0, #16]
 1192              	.LVL100:
 1193              	.L87:
 610:../drivers/fsl_sai.c ****     }
 611:../drivers/fsl_sai.c ****     else
 612:../drivers/fsl_sai.c ****     {
 613:../drivers/fsl_sai.c ****         bclk = format->sampleRate_Hz * 32U * 2U;
 614:../drivers/fsl_sai.c ****     }
 615:../drivers/fsl_sai.c **** 
 616:../drivers/fsl_sai.c **** /* Compute the mclk */
 617:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) && (FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER)
 618:../drivers/fsl_sai.c ****     /* Check if master clock divider enabled, then set master clock divider */
 619:../drivers/fsl_sai.c ****     if (base->MCR & I2S_MCR_MOE_MASK)
 1194              		.loc 1 619 0
 1195 0032 D4F80031 		ldr	r3, [r4, #256]
 1196 0036 5900     		lsls	r1, r3, #1
 1197 0038 03D5     		bpl	.L88
 620:../drivers/fsl_sai.c ****     {
 621:../drivers/fsl_sai.c ****         SAI_SetMasterClockDivider(base, format->masterClockHz, mclkSourceClockHz);
 1198              		.loc 1 621 0
 1199 003a E968     		ldr	r1, [r5, #12]
 1200 003c 2046     		mov	r0, r4
 1201              	.LVL101:
 1202 003e FFF7FEFF 		bl	SAI_SetMasterClockDivider
 1203              	.LVL102:
 1204              	.L88:
 622:../drivers/fsl_sai.c ****     }
 623:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER */
 624:../drivers/fsl_sai.c **** 
 625:../drivers/fsl_sai.c ****     /* Set bclk if needed */
 626:../drivers/fsl_sai.c ****     if (base->TCR2 & I2S_TCR2_BCD_MASK)
 1205              		.loc 1 626 0
 1206 0042 A368     		ldr	r3, [r4, #8]
 1207 0044 DB01     		lsls	r3, r3, #7
 1208 0046 0BD5     		bpl	.L89
 627:../drivers/fsl_sai.c ****     {
 628:../drivers/fsl_sai.c ****         base->TCR2 &= ~I2S_TCR2_DIV_MASK;
 1209              		.loc 1 628 0
 1210 0048 A368     		ldr	r3, [r4, #8]
 1211 004a 23F0FF03 		bic	r3, r3, #255
 1212 004e A360     		str	r3, [r4, #8]
 629:../drivers/fsl_sai.c ****         base->TCR2 |= I2S_TCR2_DIV((bclkSourceClockHz / bclk) / 2U - 1U);
 1213              		.loc 1 629 0
 1214 0050 B6FBF7F3 		udiv	r3, r6, r7
 1215 0054 5B08     		lsrs	r3, r3, #1
 1216 0056 A268     		ldr	r2, [r4, #8]
 1217 0058 013B     		subs	r3, r3, #1
 1218 005a DBB2     		uxtb	r3, r3
 1219 005c 1343     		orrs	r3, r3, r2
 1220 005e A360     		str	r3, [r4, #8]
 1221              	.L89:
 630:../drivers/fsl_sai.c ****     }
 631:../drivers/fsl_sai.c **** 
 632:../drivers/fsl_sai.c ****     /* Set bitWidth */
 633:../drivers/fsl_sai.c ****     val = (format->isFrameSyncCompact) ? (format->bitWidth - 1) : 31U;
 1222              		.loc 1 633 0
 1223 0060 EB7C     		ldrb	r3, [r5, #19]	@ zero_extendqisi2
 1224 0062 3BB3     		cbz	r3, .L94
 1225              		.loc 1 633 0 is_stmt 0 discriminator 1
 1226 0064 6B68     		ldr	r3, [r5, #4]
 1227 0066 013B     		subs	r3, r3, #1
 1228              	.L90:
 1229              	.LVL103:
 1230 0068 1906     		lsls	r1, r3, #24
 1231 006a 1A04     		lsls	r2, r3, #16
 1232 006c 02F4F812 		and	r2, r2, #2031616
 1233 0070 01F0F851 		and	r1, r1, #520093696
 1234 0074 1143     		orrs	r1, r1, r2
 634:../drivers/fsl_sai.c ****     if (format->protocol == kSAI_BusRightJustified)
 1235              		.loc 1 634 0 is_stmt 1 discriminator 4
 1236 0076 AA7C     		ldrb	r2, [r5, #18]	@ zero_extendqisi2
 1237 0078 012A     		cmp	r2, #1
 635:../drivers/fsl_sai.c ****     {
 636:../drivers/fsl_sai.c ****         base->TCR5 = I2S_TCR5_WNW(val) | I2S_TCR5_W0W(val) | I2S_TCR5_FBT(val);
 637:../drivers/fsl_sai.c ****     }
 638:../drivers/fsl_sai.c ****     else
 639:../drivers/fsl_sai.c ****     {
 640:../drivers/fsl_sai.c ****         base->TCR5 = I2S_TCR5_WNW(val) | I2S_TCR5_W0W(val) | I2S_TCR5_FBT(format->bitWidth - 1);
 1238              		.loc 1 640 0 discriminator 4
 1239 007a 1CBF     		itt	ne
 1240 007c 6A68     		ldrne	r2, [r5, #4]
 1241 007e 02F1FF33 		addne	r3, r2, #-1
 1242              	.LVL104:
 1243 0082 1B02     		lsls	r3, r3, #8
 1244 0084 03F4F853 		and	r3, r3, #7936
 1245 0088 0B43     		orrs	r3, r3, r1
 1246 008a 6361     		str	r3, [r4, #20]
 641:../drivers/fsl_sai.c ****     }
 642:../drivers/fsl_sai.c **** 
 643:../drivers/fsl_sai.c ****     /* Set mono or stereo */
 644:../drivers/fsl_sai.c ****     base->TMR = (uint32_t)format->stereo;
 1247              		.loc 1 644 0 discriminator 4
 1248 008c 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 1249 008e 2366     		str	r3, [r4, #96]
 645:../drivers/fsl_sai.c **** 
 646:../drivers/fsl_sai.c ****     /* Set data channel */
 647:../drivers/fsl_sai.c ****     base->TCR3 &= ~I2S_TCR3_TCE_MASK;
 1250              		.loc 1 647 0 discriminator 4
 1251 0090 E368     		ldr	r3, [r4, #12]
 1252 0092 23F44033 		bic	r3, r3, #196608
 1253 0096 E360     		str	r3, [r4, #12]
 648:../drivers/fsl_sai.c ****     base->TCR3 |= I2S_TCR3_TCE(1U << format->channel);
 1254              		.loc 1 648 0 discriminator 4
 1255 0098 697C     		ldrb	r1, [r5, #17]	@ zero_extendqisi2
 1256 009a E268     		ldr	r2, [r4, #12]
 1257 009c 4FF48033 		mov	r3, #65536
 1258 00a0 8B40     		lsls	r3, r3, r1
 1259 00a2 03F44033 		and	r3, r3, #196608
 1260 00a6 1343     		orrs	r3, r3, r2
 1261 00a8 E360     		str	r3, [r4, #12]
 649:../drivers/fsl_sai.c **** 
 650:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 651:../drivers/fsl_sai.c ****     /* Set watermark */
 652:../drivers/fsl_sai.c ****     base->TCR1 = format->watermark;
 1262              		.loc 1 652 0 discriminator 4
 1263 00aa 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 1264 00ac 6360     		str	r3, [r4, #4]
 653:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT  */
 654:../drivers/fsl_sai.c **** }
 1265              		.loc 1 654 0 discriminator 4
 1266 00ae F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1267              	.LVL105:
 1268              	.L86:
 613:../drivers/fsl_sai.c ****     }
 1269              		.loc 1 613 0
 1270 00b0 9F01     		lsls	r7, r3, #6
 1271              	.LVL106:
 1272 00b2 BEE7     		b	.L87
 1273              	.LVL107:
 1274              	.L94:
 633:../drivers/fsl_sai.c ****     if (format->protocol == kSAI_BusRightJustified)
 1275              		.loc 1 633 0
 1276 00b4 1F23     		movs	r3, #31
 1277 00b6 D7E7     		b	.L90
 1278              		.cfi_endproc
 1279              	.LFE178:
 1281              		.section	.text.SAI_RxSetFormat,"ax",%progbits
 1282              		.align	1
 1283              		.global	SAI_RxSetFormat
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1287              		.fpu fpv4-sp-d16
 1289              	SAI_RxSetFormat:
 1290              	.LFB179:
 655:../drivers/fsl_sai.c **** 
 656:../drivers/fsl_sai.c **** void SAI_RxSetFormat(I2S_Type *base,
 657:../drivers/fsl_sai.c ****                      sai_transfer_format_t *format,
 658:../drivers/fsl_sai.c ****                      uint32_t mclkSourceClockHz,
 659:../drivers/fsl_sai.c ****                      uint32_t bclkSourceClockHz)
 660:../drivers/fsl_sai.c **** {
 1291              		.loc 1 660 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 0
 1294              		@ frame_needed = 0, uses_anonymous_args = 0
 1295              	.LVL108:
 1296 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1297              		.cfi_def_cfa_offset 24
 1298              		.cfi_offset 3, -24
 1299              		.cfi_offset 4, -20
 1300              		.cfi_offset 5, -16
 1301              		.cfi_offset 6, -12
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304              		.loc 1 660 0
 1305 0002 1E46     		mov	r6, r3
 661:../drivers/fsl_sai.c ****     uint32_t bclk = 0;
 662:../drivers/fsl_sai.c ****     uint32_t val = 0;
 663:../drivers/fsl_sai.c ****     uint32_t channels = 2U;
 664:../drivers/fsl_sai.c **** 
 665:../drivers/fsl_sai.c ****     if (format->stereo != kSAI_Stereo)
 1306              		.loc 1 665 0
 1307 0004 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 1308              	.LVL109:
 660:../drivers/fsl_sai.c ****     uint32_t bclk = 0;
 1309              		.loc 1 660 0
 1310 0006 0D46     		mov	r5, r1
 663:../drivers/fsl_sai.c **** 
 1311              		.loc 1 663 0
 1312 0008 002B     		cmp	r3, #0
 1313 000a 0B68     		ldr	r3, [r1]
 666:../drivers/fsl_sai.c ****     {
 667:../drivers/fsl_sai.c ****         channels = 1U;
 668:../drivers/fsl_sai.c ****     }
 669:../drivers/fsl_sai.c **** 
 670:../drivers/fsl_sai.c ****     if (format->isFrameSyncCompact)
 1314              		.loc 1 670 0
 1315 000c C97C     		ldrb	r1, [r1, #19]	@ zero_extendqisi2
 1316              	.LVL110:
 660:../drivers/fsl_sai.c ****     uint32_t bclk = 0;
 1317              		.loc 1 660 0
 1318 000e 0446     		mov	r4, r0
 663:../drivers/fsl_sai.c **** 
 1319              		.loc 1 663 0
 1320 0010 14BF     		ite	ne
 1321 0012 0127     		movne	r7, #1
 1322 0014 0227     		moveq	r7, #2
 1323              	.LVL111:
 1324              		.loc 1 670 0
 1325 0016 0029     		cmp	r1, #0
 1326 0018 58D0     		beq	.L104
 671:../drivers/fsl_sai.c ****     {
 672:../drivers/fsl_sai.c ****         bclk = format->sampleRate_Hz * format->bitWidth * channels;
 1327              		.loc 1 672 0
 1328 001a 6968     		ldr	r1, [r5, #4]
 1329 001c 4B43     		muls	r3, r1, r3
 1330 001e 5F43     		muls	r7, r3, r7
 1331              	.LVL112:
 673:../drivers/fsl_sai.c ****         val = (base->RCR4 & (~I2S_RCR4_SYWD_MASK));
 674:../drivers/fsl_sai.c ****         val |= I2S_RCR4_SYWD(format->bitWidth - 1U);
 1332              		.loc 1 674 0
 1333 0020 0139     		subs	r1, r1, #1
 673:../drivers/fsl_sai.c ****         val = (base->RCR4 & (~I2S_RCR4_SYWD_MASK));
 1334              		.loc 1 673 0
 1335 0022 D0F89030 		ldr	r3, [r0, #144]
 1336              		.loc 1 674 0
 1337 0026 0902     		lsls	r1, r1, #8
 673:../drivers/fsl_sai.c ****         val = (base->RCR4 & (~I2S_RCR4_SYWD_MASK));
 1338              		.loc 1 673 0
 1339 0028 23F4F853 		bic	r3, r3, #7936
 1340              	.LVL113:
 1341              		.loc 1 674 0
 1342 002c 01F4F851 		and	r1, r1, #7936
 1343 0030 1943     		orrs	r1, r1, r3
 1344              	.LVL114:
 675:../drivers/fsl_sai.c ****         base->RCR4 = val;
 1345              		.loc 1 675 0
 1346 0032 C0F89010 		str	r1, [r0, #144]
 1347              	.LVL115:
 1348              	.L105:
 676:../drivers/fsl_sai.c ****     }
 677:../drivers/fsl_sai.c ****     else
 678:../drivers/fsl_sai.c ****     {
 679:../drivers/fsl_sai.c ****         bclk = format->sampleRate_Hz * 32U * 2U;
 680:../drivers/fsl_sai.c ****     }
 681:../drivers/fsl_sai.c **** 
 682:../drivers/fsl_sai.c **** /* Compute the mclk */
 683:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) && (FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER)
 684:../drivers/fsl_sai.c ****     /* Check if master clock divider enabled */
 685:../drivers/fsl_sai.c ****     if (base->MCR & I2S_MCR_MOE_MASK)
 1349              		.loc 1 685 0
 1350 0036 D4F80031 		ldr	r3, [r4, #256]
 1351 003a 5900     		lsls	r1, r3, #1
 1352 003c 03D5     		bpl	.L106
 686:../drivers/fsl_sai.c ****     {
 687:../drivers/fsl_sai.c ****         SAI_SetMasterClockDivider(base, format->masterClockHz, mclkSourceClockHz);
 1353              		.loc 1 687 0
 1354 003e E968     		ldr	r1, [r5, #12]
 1355 0040 2046     		mov	r0, r4
 1356              	.LVL116:
 1357 0042 FFF7FEFF 		bl	SAI_SetMasterClockDivider
 1358              	.LVL117:
 1359              	.L106:
 688:../drivers/fsl_sai.c ****     }
 689:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER */
 690:../drivers/fsl_sai.c **** 
 691:../drivers/fsl_sai.c ****     /* Set bclk if needed */
 692:../drivers/fsl_sai.c ****     if (base->RCR2 & I2S_RCR2_BCD_MASK)
 1360              		.loc 1 692 0
 1361 0046 D4F88830 		ldr	r3, [r4, #136]
 1362 004a DB01     		lsls	r3, r3, #7
 1363 004c 0FD5     		bpl	.L107
 693:../drivers/fsl_sai.c ****     {
 694:../drivers/fsl_sai.c ****         base->RCR2 &= ~I2S_RCR2_DIV_MASK;
 1364              		.loc 1 694 0
 1365 004e D4F88830 		ldr	r3, [r4, #136]
 1366 0052 23F0FF03 		bic	r3, r3, #255
 1367 0056 C4F88830 		str	r3, [r4, #136]
 695:../drivers/fsl_sai.c ****         base->RCR2 |= I2S_RCR2_DIV((bclkSourceClockHz / bclk) / 2U - 1U);
 1368              		.loc 1 695 0
 1369 005a B6FBF7F3 		udiv	r3, r6, r7
 1370 005e 5B08     		lsrs	r3, r3, #1
 1371 0060 D4F88820 		ldr	r2, [r4, #136]
 1372 0064 013B     		subs	r3, r3, #1
 1373 0066 DBB2     		uxtb	r3, r3
 1374 0068 1343     		orrs	r3, r3, r2
 1375 006a C4F88830 		str	r3, [r4, #136]
 1376              	.L107:
 696:../drivers/fsl_sai.c ****     }
 697:../drivers/fsl_sai.c **** 
 698:../drivers/fsl_sai.c ****     /* Set bitWidth */
 699:../drivers/fsl_sai.c ****     val = (format->isFrameSyncCompact) ? (format->bitWidth - 1) : 31U;
 1377              		.loc 1 699 0
 1378 006e EB7C     		ldrb	r3, [r5, #19]	@ zero_extendqisi2
 1379 0070 73B3     		cbz	r3, .L112
 1380              		.loc 1 699 0 is_stmt 0 discriminator 1
 1381 0072 6B68     		ldr	r3, [r5, #4]
 1382 0074 013B     		subs	r3, r3, #1
 1383              	.L108:
 1384              	.LVL118:
 1385 0076 1906     		lsls	r1, r3, #24
 1386 0078 1A04     		lsls	r2, r3, #16
 1387 007a 02F4F812 		and	r2, r2, #2031616
 1388 007e 01F0F851 		and	r1, r1, #520093696
 1389 0082 1143     		orrs	r1, r1, r2
 700:../drivers/fsl_sai.c ****     if (format->protocol == kSAI_BusRightJustified)
 1390              		.loc 1 700 0 is_stmt 1 discriminator 4
 1391 0084 AA7C     		ldrb	r2, [r5, #18]	@ zero_extendqisi2
 1392 0086 012A     		cmp	r2, #1
 701:../drivers/fsl_sai.c ****     {
 702:../drivers/fsl_sai.c ****         base->RCR5 = I2S_RCR5_WNW(val) | I2S_RCR5_W0W(val) | I2S_RCR5_FBT(val);
 703:../drivers/fsl_sai.c ****     }
 704:../drivers/fsl_sai.c ****     else
 705:../drivers/fsl_sai.c ****     {
 706:../drivers/fsl_sai.c ****         base->RCR5 = I2S_RCR5_WNW(val) | I2S_RCR5_W0W(val) | I2S_RCR5_FBT(format->bitWidth - 1);
 1393              		.loc 1 706 0 discriminator 4
 1394 0088 1CBF     		itt	ne
 1395 008a 6A68     		ldrne	r2, [r5, #4]
 1396 008c 02F1FF33 		addne	r3, r2, #-1
 1397              	.LVL119:
 1398 0090 1B02     		lsls	r3, r3, #8
 1399 0092 03F4F853 		and	r3, r3, #7936
 1400 0096 0B43     		orrs	r3, r3, r1
 1401 0098 C4F89430 		str	r3, [r4, #148]
 707:../drivers/fsl_sai.c ****     }
 708:../drivers/fsl_sai.c **** 
 709:../drivers/fsl_sai.c ****     /* Set mono or stereo */
 710:../drivers/fsl_sai.c ****     base->RMR = (uint32_t)format->stereo;
 1402              		.loc 1 710 0 discriminator 4
 1403 009c 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 1404 009e C4F8E030 		str	r3, [r4, #224]
 711:../drivers/fsl_sai.c **** 
 712:../drivers/fsl_sai.c ****     /* Set data channel */
 713:../drivers/fsl_sai.c ****     base->RCR3 &= ~I2S_RCR3_RCE_MASK;
 1405              		.loc 1 713 0 discriminator 4
 1406 00a2 D4F88C30 		ldr	r3, [r4, #140]
 1407 00a6 23F44033 		bic	r3, r3, #196608
 1408 00aa C4F88C30 		str	r3, [r4, #140]
 714:../drivers/fsl_sai.c ****     base->RCR3 |= I2S_RCR3_RCE(1U << format->channel);
 1409              		.loc 1 714 0 discriminator 4
 1410 00ae 697C     		ldrb	r1, [r5, #17]	@ zero_extendqisi2
 1411 00b0 D4F88C20 		ldr	r2, [r4, #140]
 1412 00b4 4FF48033 		mov	r3, #65536
 1413 00b8 8B40     		lsls	r3, r3, r1
 1414 00ba 03F44033 		and	r3, r3, #196608
 1415 00be 1343     		orrs	r3, r3, r2
 1416 00c0 C4F88C30 		str	r3, [r4, #140]
 715:../drivers/fsl_sai.c **** 
 716:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 717:../drivers/fsl_sai.c ****     /* Set watermark */
 718:../drivers/fsl_sai.c ****     base->RCR1 = format->watermark;
 1417              		.loc 1 718 0 discriminator 4
 1418 00c4 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 1419 00c6 C4F88430 		str	r3, [r4, #132]
 719:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT  */
 720:../drivers/fsl_sai.c **** }
 1420              		.loc 1 720 0 discriminator 4
 1421 00ca F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1422              	.LVL120:
 1423              	.L104:
 679:../drivers/fsl_sai.c ****     }
 1424              		.loc 1 679 0
 1425 00cc 9F01     		lsls	r7, r3, #6
 1426              	.LVL121:
 1427 00ce B2E7     		b	.L105
 1428              	.LVL122:
 1429              	.L112:
 699:../drivers/fsl_sai.c ****     if (format->protocol == kSAI_BusRightJustified)
 1430              		.loc 1 699 0
 1431 00d0 1F23     		movs	r3, #31
 1432 00d2 D0E7     		b	.L108
 1433              		.cfi_endproc
 1434              	.LFE179:
 1436              		.section	.text.SAI_WriteBlocking,"ax",%progbits
 1437              		.align	1
 1438              		.global	SAI_WriteBlocking
 1439              		.syntax unified
 1440              		.thumb
 1441              		.thumb_func
 1442              		.fpu fpv4-sp-d16
 1444              	SAI_WriteBlocking:
 1445              	.LFB180:
 721:../drivers/fsl_sai.c **** 
 722:../drivers/fsl_sai.c **** void SAI_WriteBlocking(I2S_Type *base, uint32_t channel, uint32_t bitWidth, uint8_t *buffer, uint32
 723:../drivers/fsl_sai.c **** {
 1446              		.loc 1 723 0
 1447              		.cfi_startproc
 1448              		@ args = 4, pretend = 0, frame = 0
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450              	.LVL123:
 1451 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1452              		.cfi_def_cfa_offset 20
 1453              		.cfi_offset 4, -20
 1454              		.cfi_offset 5, -16
 1455              		.cfi_offset 6, -12
 1456              		.cfi_offset 7, -8
 1457              		.cfi_offset 14, -4
 1458 0002 C2F3C702 		ubfx	r2, r2, #3, #8
 1459              	.LVL124:
 724:../drivers/fsl_sai.c ****     uint32_t i = 0;
 1460              		.loc 1 724 0
 1461 0006 0025     		movs	r5, #0
 1462              	.LBB52:
 1463              	.LBB53:
 219:../drivers/fsl_sai.c ****         data = 0;
 1464              		.loc 1 219 0
 1465 0008 0831     		adds	r1, r1, #8
 1466              	.LVL125:
 1467              	.L121:
 1468              	.LBE53:
 1469              	.LBE52:
 725:../drivers/fsl_sai.c ****     uint8_t bytesPerWord = bitWidth / 8U;
 726:../drivers/fsl_sai.c **** 
 727:../drivers/fsl_sai.c ****     while (i < size)
 1470              		.loc 1 727 0
 1471 000a 059C     		ldr	r4, [sp, #20]
 1472 000c A542     		cmp	r5, r4
 1473 000e 03EB050C 		add	ip, r3, r5
 1474              	.LVL126:
 1475 0012 03D3     		bcc	.L122
 1476              	.L125:
 728:../drivers/fsl_sai.c ****     {
 729:../drivers/fsl_sai.c ****         /* Wait until it can write data */
 730:../drivers/fsl_sai.c ****         while (!(base->TCSR & I2S_TCSR_FWF_MASK))
 731:../drivers/fsl_sai.c ****         {
 732:../drivers/fsl_sai.c ****         }
 733:../drivers/fsl_sai.c **** 
 734:../drivers/fsl_sai.c ****         SAI_WriteNonBlocking(base, channel, bitWidth, buffer, bytesPerWord);
 735:../drivers/fsl_sai.c ****         buffer += bytesPerWord;
 736:../drivers/fsl_sai.c ****         i += bytesPerWord;
 737:../drivers/fsl_sai.c ****     }
 738:../drivers/fsl_sai.c **** 
 739:../drivers/fsl_sai.c ****     /* Wait until the last data is sent */
 740:../drivers/fsl_sai.c ****     while (!(base->TCSR & I2S_TCSR_FWF_MASK))
 1477              		.loc 1 740 0 discriminator 1
 1478 0014 0368     		ldr	r3, [r0]
 1479 0016 9B03     		lsls	r3, r3, #14
 1480 0018 FCD5     		bpl	.L125
 741:../drivers/fsl_sai.c ****     {
 742:../drivers/fsl_sai.c ****     }
 743:../drivers/fsl_sai.c **** }
 1481              		.loc 1 743 0
 1482 001a F0BD     		pop	{r4, r5, r6, r7, pc}
 1483              	.LVL127:
 1484              	.L122:
 730:../drivers/fsl_sai.c ****         {
 1485              		.loc 1 730 0 discriminator 1
 1486 001c 0468     		ldr	r4, [r0]
 1487 001e A403     		lsls	r4, r4, #14
 1488 0020 FCD5     		bpl	.L122
 1489              	.LVL128:
 1490              	.LBB56:
 1491              	.LBB54:
 207:../drivers/fsl_sai.c ****     uint32_t data = 0;
 1492              		.loc 1 207 0
 1493 0022 0024     		movs	r4, #0
 1494 0024 2646     		mov	r6, r4
 1495              	.LVL129:
 1496              	.L123:
 213:../drivers/fsl_sai.c ****         {
 1497              		.loc 1 213 0
 1498 0026 E7B2     		uxtb	r7, r4
 1499 0028 BA42     		cmp	r2, r7
 1500 002a 03D8     		bhi	.L124
 219:../drivers/fsl_sai.c ****         data = 0;
 1501              		.loc 1 219 0
 1502 002c 40F82160 		str	r6, [r0, r1, lsl #2]
 1503              	.LVL130:
 1504              	.LBE54:
 1505              	.LBE56:
 736:../drivers/fsl_sai.c ****     }
 1506              		.loc 1 736 0
 1507 0030 1544     		add	r5, r5, r2
 1508              	.LVL131:
 1509 0032 EAE7     		b	.L121
 1510              	.LVL132:
 1511              	.L124:
 1512              	.LBB57:
 1513              	.LBB55:
 215:../drivers/fsl_sai.c ****             data |= (temp << (8U * j));
 1514              		.loc 1 215 0
 1515 0034 1CF80470 		ldrb	r7, [ip, r4]	@ zero_extendqisi2
 1516              	.LVL133:
 216:../drivers/fsl_sai.c ****             buffer++;
 1517              		.loc 1 216 0
 1518 0038 4FEAC40E 		lsl	lr, r4, #3
 1519 003c 07FA0EF7 		lsl	r7, r7, lr
 1520              	.LVL134:
 1521 0040 3E43     		orrs	r6, r6, r7
 1522              	.LVL135:
 1523 0042 0134     		adds	r4, r4, #1
 1524              	.LVL136:
 1525 0044 EFE7     		b	.L123
 1526              	.LBE55:
 1527              	.LBE57:
 1528              		.cfi_endproc
 1529              	.LFE180:
 1531              		.section	.text.SAI_ReadBlocking,"ax",%progbits
 1532              		.align	1
 1533              		.global	SAI_ReadBlocking
 1534              		.syntax unified
 1535              		.thumb
 1536              		.thumb_func
 1537              		.fpu fpv4-sp-d16
 1539              	SAI_ReadBlocking:
 1540              	.LFB181:
 744:../drivers/fsl_sai.c **** 
 745:../drivers/fsl_sai.c **** void SAI_ReadBlocking(I2S_Type *base, uint32_t channel, uint32_t bitWidth, uint8_t *buffer, uint32_
 746:../drivers/fsl_sai.c **** {
 1541              		.loc 1 746 0
 1542              		.cfi_startproc
 1543              		@ args = 4, pretend = 0, frame = 0
 1544              		@ frame_needed = 0, uses_anonymous_args = 0
 1545              	.LVL137:
 1546 0000 C2F3C702 		ubfx	r2, r2, #3, #8
 1547              	.LVL138:
 1548 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 1549              		.cfi_def_cfa_offset 20
 1550              		.cfi_offset 4, -20
 1551              		.cfi_offset 5, -16
 1552              		.cfi_offset 6, -12
 1553              		.cfi_offset 7, -8
 1554              		.cfi_offset 14, -4
 1555 0006 9C46     		mov	ip, r3
 1556 0008 C2EB427E 		rsb	lr, r2, r2, lsl #29
 1557 000c C3EB4377 		rsb	r7, r3, r3, lsl #29
 1558              	.LBB60:
 1559              	.LBB61:
 233:../drivers/fsl_sai.c ****         for (j = 0; j < bytesPerWord; j++)
 1560              		.loc 1 233 0
 1561 0010 2831     		adds	r1, r1, #40
 1562              	.LVL139:
 1563              	.L132:
 1564              	.LBE61:
 1565              	.LBE60:
 747:../drivers/fsl_sai.c ****     uint32_t i = 0;
 748:../drivers/fsl_sai.c ****     uint8_t bytesPerWord = bitWidth / 8U;
 749:../drivers/fsl_sai.c **** 
 750:../drivers/fsl_sai.c ****     while (i < size)
 1566              		.loc 1 750 0
 1567 0012 059D     		ldr	r5, [sp, #20]
 1568 0014 A3EB0C04 		sub	r4, r3, ip
 1569 0018 A542     		cmp	r5, r4
 1570 001a 00D8     		bhi	.L133
 751:../drivers/fsl_sai.c ****     {
 752:../drivers/fsl_sai.c ****         /* Wait until data is received */
 753:../drivers/fsl_sai.c ****         while (!(base->RCSR & I2S_RCSR_FWF_MASK))
 754:../drivers/fsl_sai.c ****         {
 755:../drivers/fsl_sai.c ****         }
 756:../drivers/fsl_sai.c **** 
 757:../drivers/fsl_sai.c ****         SAI_ReadNonBlocking(base, channel, bitWidth, buffer, bytesPerWord);
 758:../drivers/fsl_sai.c ****         buffer += bytesPerWord;
 759:../drivers/fsl_sai.c ****         i += bytesPerWord;
 760:../drivers/fsl_sai.c ****     }
 761:../drivers/fsl_sai.c **** }
 1571              		.loc 1 761 0
 1572 001c F0BD     		pop	{r4, r5, r6, r7, pc}
 1573              	.LVL140:
 1574              	.L133:
 753:../drivers/fsl_sai.c ****         {
 1575              		.loc 1 753 0 discriminator 1
 1576 001e D0F88040 		ldr	r4, [r0, #128]
 1577 0022 A403     		lsls	r4, r4, #14
 1578 0024 FBD5     		bpl	.L133
 1579              	.LVL141:
 1580              	.LBB64:
 1581              	.LBB62:
 233:../drivers/fsl_sai.c ****         for (j = 0; j < bytesPerWord; j++)
 1582              		.loc 1 233 0
 1583 0026 50F82150 		ldr	r5, [r0, r1, lsl #2]
 1584              	.LVL142:
 1585 002a 1E46     		mov	r6, r3
 1586              	.LVL143:
 1587              	.L134:
 234:../drivers/fsl_sai.c ****         {
 1588              		.loc 1 234 0
 1589 002c F41A     		subs	r4, r6, r3
 1590 002e E4B2     		uxtb	r4, r4
 1591 0030 A242     		cmp	r2, r4
 1592 0032 02D8     		bhi	.L135
 1593              	.LVL144:
 1594              	.LBE62:
 1595              	.LBE64:
 758:../drivers/fsl_sai.c ****         i += bytesPerWord;
 1596              		.loc 1 758 0
 1597 0034 1344     		add	r3, r3, r2
 1598              	.LVL145:
 1599 0036 7744     		add	r7, r7, lr
 1600 0038 EBE7     		b	.L132
 1601              	.LVL146:
 1602              	.L135:
 1603              	.LBB65:
 1604              	.LBB63:
 236:../drivers/fsl_sai.c ****             buffer++;
 1605              		.loc 1 236 0
 1606 003a F419     		adds	r4, r6, r7
 1607 003c E400     		lsls	r4, r4, #3
 1608 003e 25FA04F4 		lsr	r4, r5, r4
 1609 0042 06F8014B 		strb	r4, [r6], #1
 1610              	.LVL147:
 1611 0046 F1E7     		b	.L134
 1612              	.LBE63:
 1613              	.LBE65:
 1614              		.cfi_endproc
 1615              	.LFE181:
 1617              		.section	.text.SAI_TransferTxCreateHandle,"ax",%progbits
 1618              		.align	1
 1619              		.global	SAI_TransferTxCreateHandle
 1620              		.syntax unified
 1621              		.thumb
 1622              		.thumb_func
 1623              		.fpu fpv4-sp-d16
 1625              	SAI_TransferTxCreateHandle:
 1626              	.LFB182:
 762:../drivers/fsl_sai.c **** 
 763:../drivers/fsl_sai.c **** void SAI_TransferTxCreateHandle(I2S_Type *base, sai_handle_t *handle, sai_transfer_callback_t callb
 764:../drivers/fsl_sai.c **** {
 1627              		.loc 1 764 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              	.LVL148:
 1632 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1633              		.cfi_def_cfa_offset 24
 1634              		.cfi_offset 3, -24
 1635              		.cfi_offset 4, -20
 1636              		.cfi_offset 5, -16
 1637              		.cfi_offset 6, -12
 1638              		.cfi_offset 7, -8
 1639              		.cfi_offset 14, -4
 1640              		.loc 1 764 0
 1641 0002 0C46     		mov	r4, r1
 1642 0004 0746     		mov	r7, r0
 1643 0006 1646     		mov	r6, r2
 765:../drivers/fsl_sai.c ****     assert(handle);
 766:../drivers/fsl_sai.c **** 
 767:../drivers/fsl_sai.c ****     /* Zero the handle */
 768:../drivers/fsl_sai.c ****     memset(handle, 0, sizeof(*handle));
 1644              		.loc 1 768 0
 1645 0008 0021     		movs	r1, #0
 1646              	.LVL149:
 1647 000a 4422     		movs	r2, #68
 1648              	.LVL150:
 1649 000c 2046     		mov	r0, r4
 1650              	.LVL151:
 764:../drivers/fsl_sai.c ****     assert(handle);
 1651              		.loc 1 764 0
 1652 000e 1D46     		mov	r5, r3
 1653              		.loc 1 768 0
 1654 0010 FFF7FEFF 		bl	memset
 1655              	.LVL152:
 769:../drivers/fsl_sai.c **** 
 770:../drivers/fsl_sai.c ****     s_saiHandle[SAI_GetInstance(base)][0] = handle;
 1656              		.loc 1 770 0
 1657 0014 3846     		mov	r0, r7
 1658 0016 FFF7FEFF 		bl	SAI_GetInstance
 1659              	.LVL153:
 1660 001a 064B     		ldr	r3, .L140
 771:../drivers/fsl_sai.c **** 
 772:../drivers/fsl_sai.c ****     handle->callback = callback;
 773:../drivers/fsl_sai.c ****     handle->userData = userData;
 774:../drivers/fsl_sai.c **** 
 775:../drivers/fsl_sai.c ****     /* Set the isr pointer */
 776:../drivers/fsl_sai.c ****     s_saiTxIsr = SAI_TransferTxHandleIRQ;
 1661              		.loc 1 776 0
 1662 001c 064A     		ldr	r2, .L140+4
 770:../drivers/fsl_sai.c **** 
 1663              		.loc 1 770 0
 1664 001e 43F83040 		str	r4, [r3, r0, lsl #3]
 1665              		.loc 1 776 0
 1666 0022 064B     		ldr	r3, .L140+8
 1667 0024 1A60     		str	r2, [r3]
 1668              	.LVL154:
 1669              	.LBB70:
 1670              	.LBB71:
 1671              	.LBB72:
 1672              		.file 4 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 1673              		.loc 4 1676 0
 1674 0026 064B     		ldr	r3, .L140+12
 1675 0028 4FF08052 		mov	r2, #268435456
 1676              	.LBE72:
 1677              	.LBE71:
 1678              	.LBE70:
 773:../drivers/fsl_sai.c **** 
 1679              		.loc 1 773 0
 1680 002c C4E90165 		strd	r6, r5, [r4, #4]
 1681              	.LBB75:
 1682              	.LBB74:
 1683              	.LBB73:
 1684              		.loc 4 1676 0
 1685 0030 1A60     		str	r2, [r3]
 1686              	.LVL155:
 1687              	.LBE73:
 1688              	.LBE74:
 1689              	.LBE75:
 777:../drivers/fsl_sai.c **** 
 778:../drivers/fsl_sai.c ****     /* Enable Tx irq */
 779:../drivers/fsl_sai.c ****     EnableIRQ(s_saiTxIRQ[SAI_GetInstance(base)]);
 780:../drivers/fsl_sai.c **** }
 1690              		.loc 1 780 0
 1691 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1692              	.LVL156:
 1693              	.L141:
 1694              		.align	2
 1695              	.L140:
 1696 0034 00000000 		.word	s_saiHandle
 1697 0038 00000000 		.word	SAI_TransferTxHandleIRQ
 1698 003c 00000000 		.word	.LANCHOR0
 1699 0040 00E100E0 		.word	-536813312
 1700              		.cfi_endproc
 1701              	.LFE182:
 1703              		.section	.text.SAI_TransferRxCreateHandle,"ax",%progbits
 1704              		.align	1
 1705              		.global	SAI_TransferRxCreateHandle
 1706              		.syntax unified
 1707              		.thumb
 1708              		.thumb_func
 1709              		.fpu fpv4-sp-d16
 1711              	SAI_TransferRxCreateHandle:
 1712              	.LFB183:
 781:../drivers/fsl_sai.c **** 
 782:../drivers/fsl_sai.c **** void SAI_TransferRxCreateHandle(I2S_Type *base, sai_handle_t *handle, sai_transfer_callback_t callb
 783:../drivers/fsl_sai.c **** {
 1713              		.loc 1 783 0
 1714              		.cfi_startproc
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 0, uses_anonymous_args = 0
 1717              	.LVL157:
 1718 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1719              		.cfi_def_cfa_offset 24
 1720              		.cfi_offset 3, -24
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726              		.loc 1 783 0
 1727 0002 0C46     		mov	r4, r1
 1728 0004 0746     		mov	r7, r0
 1729 0006 1646     		mov	r6, r2
 784:../drivers/fsl_sai.c ****     assert(handle);
 785:../drivers/fsl_sai.c **** 
 786:../drivers/fsl_sai.c ****     /* Zero the handle */
 787:../drivers/fsl_sai.c ****     memset(handle, 0, sizeof(*handle));
 1730              		.loc 1 787 0
 1731 0008 0021     		movs	r1, #0
 1732              	.LVL158:
 1733 000a 4422     		movs	r2, #68
 1734              	.LVL159:
 1735 000c 2046     		mov	r0, r4
 1736              	.LVL160:
 783:../drivers/fsl_sai.c ****     assert(handle);
 1737              		.loc 1 783 0
 1738 000e 1D46     		mov	r5, r3
 1739              		.loc 1 787 0
 1740 0010 FFF7FEFF 		bl	memset
 1741              	.LVL161:
 788:../drivers/fsl_sai.c **** 
 789:../drivers/fsl_sai.c ****     s_saiHandle[SAI_GetInstance(base)][1] = handle;
 1742              		.loc 1 789 0
 1743 0014 3846     		mov	r0, r7
 1744 0016 FFF7FEFF 		bl	SAI_GetInstance
 1745              	.LVL162:
 1746 001a 074A     		ldr	r2, .L143
 790:../drivers/fsl_sai.c **** 
 791:../drivers/fsl_sai.c ****     handle->callback = callback;
 792:../drivers/fsl_sai.c ****     handle->userData = userData;
 793:../drivers/fsl_sai.c **** 
 794:../drivers/fsl_sai.c ****     /* Set the isr pointer */
 795:../drivers/fsl_sai.c ****     s_saiRxIsr = SAI_TransferRxHandleIRQ;
 1747              		.loc 1 795 0
 1748 001c 074B     		ldr	r3, .L143+4
 789:../drivers/fsl_sai.c **** 
 1749              		.loc 1 789 0
 1750 001e 02EBC000 		add	r0, r2, r0, lsl #3
 1751              		.loc 1 795 0
 1752 0022 074A     		ldr	r2, .L143+8
 1753 0024 1A60     		str	r2, [r3]
 1754              	.LVL163:
 1755              	.LBB80:
 1756              	.LBB81:
 1757              	.LBB82:
 1758              		.loc 4 1676 0
 1759 0026 074B     		ldr	r3, .L143+12
 1760              	.LBE82:
 1761              	.LBE81:
 1762              	.LBE80:
 789:../drivers/fsl_sai.c **** 
 1763              		.loc 1 789 0
 1764 0028 4460     		str	r4, [r0, #4]
 1765              	.LBB87:
 1766              	.LBB85:
 1767              	.LBB83:
 1768              		.loc 4 1676 0
 1769 002a 4FF00052 		mov	r2, #536870912
 1770              	.LBE83:
 1771              	.LBE85:
 1772              	.LBE87:
 792:../drivers/fsl_sai.c **** 
 1773              		.loc 1 792 0
 1774 002e C4E90165 		strd	r6, r5, [r4, #4]
 1775              	.LBB88:
 1776              	.LBB86:
 1777              	.LBB84:
 1778              		.loc 4 1676 0
 1779 0032 1A60     		str	r2, [r3]
 1780              	.LVL164:
 1781              	.LBE84:
 1782              	.LBE86:
 1783              	.LBE88:
 796:../drivers/fsl_sai.c **** 
 797:../drivers/fsl_sai.c ****     /* Enable Rx irq */
 798:../drivers/fsl_sai.c ****     EnableIRQ(s_saiRxIRQ[SAI_GetInstance(base)]);
 799:../drivers/fsl_sai.c **** }
 1784              		.loc 1 799 0
 1785 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1786              	.LVL165:
 1787              	.L144:
 1788 0036 00BF     		.align	2
 1789              	.L143:
 1790 0038 00000000 		.word	s_saiHandle
 1791 003c 00000000 		.word	.LANCHOR1
 1792 0040 00000000 		.word	SAI_TransferRxHandleIRQ
 1793 0044 00E100E0 		.word	-536813312
 1794              		.cfi_endproc
 1795              	.LFE183:
 1797              		.section	.text.SAI_TransferTxSetFormat,"ax",%progbits
 1798              		.align	1
 1799              		.global	SAI_TransferTxSetFormat
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1803              		.fpu fpv4-sp-d16
 1805              	SAI_TransferTxSetFormat:
 1806              	.LFB184:
 800:../drivers/fsl_sai.c **** 
 801:../drivers/fsl_sai.c **** status_t SAI_TransferTxSetFormat(I2S_Type *base,
 802:../drivers/fsl_sai.c ****                                  sai_handle_t *handle,
 803:../drivers/fsl_sai.c ****                                  sai_transfer_format_t *format,
 804:../drivers/fsl_sai.c ****                                  uint32_t mclkSourceClockHz,
 805:../drivers/fsl_sai.c ****                                  uint32_t bclkSourceClockHz)
 806:../drivers/fsl_sai.c **** {
 1807              		.loc 1 806 0
 1808              		.cfi_startproc
 1809              		@ args = 4, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              	.LVL166:
 1812 0000 38B5     		push	{r3, r4, r5, lr}
 1813              		.cfi_def_cfa_offset 16
 1814              		.cfi_offset 3, -16
 1815              		.cfi_offset 4, -12
 1816              		.cfi_offset 5, -8
 1817              		.cfi_offset 14, -4
 1818              		.loc 1 806 0
 1819 0002 0C46     		mov	r4, r1
 1820 0004 1146     		mov	r1, r2
 1821              	.LVL167:
 1822 0006 1A46     		mov	r2, r3
 1823              	.LVL168:
 807:../drivers/fsl_sai.c ****     assert(handle);
 808:../drivers/fsl_sai.c **** 
 809:../drivers/fsl_sai.c ****     if ((mclkSourceClockHz < format->sampleRate_Hz) || (bclkSourceClockHz < format->sampleRate_Hz))
 1824              		.loc 1 809 0
 1825 0008 0D68     		ldr	r5, [r1]
 806:../drivers/fsl_sai.c ****     assert(handle);
 1826              		.loc 1 806 0
 1827 000a 049B     		ldr	r3, [sp, #16]
 1828              	.LVL169:
 1829              		.loc 1 809 0
 1830 000c 9542     		cmp	r5, r2
 1831 000e 0CD8     		bhi	.L148
 1832              		.loc 1 809 0 is_stmt 0 discriminator 1
 1833 0010 9D42     		cmp	r5, r3
 1834 0012 0AD8     		bhi	.L148
 810:../drivers/fsl_sai.c ****     {
 811:../drivers/fsl_sai.c ****         return kStatus_InvalidArgument;
 812:../drivers/fsl_sai.c ****     }
 813:../drivers/fsl_sai.c **** 
 814:../drivers/fsl_sai.c ****     /* Copy format to handle */
 815:../drivers/fsl_sai.c ****     handle->bitWidth = format->bitWidth;
 1835              		.loc 1 815 0 is_stmt 1
 1836 0014 4D68     		ldr	r5, [r1, #4]
 1837 0016 2573     		strb	r5, [r4, #12]
 816:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 817:../drivers/fsl_sai.c ****     handle->watermark = format->watermark;
 1838              		.loc 1 817 0
 1839 0018 0D7C     		ldrb	r5, [r1, #16]	@ zero_extendqisi2
 1840 001a 84F84250 		strb	r5, [r4, #66]
 818:../drivers/fsl_sai.c **** #endif
 819:../drivers/fsl_sai.c ****     handle->channel = format->channel;
 1841              		.loc 1 819 0
 1842 001e 4D7C     		ldrb	r5, [r1, #17]	@ zero_extendqisi2
 1843 0020 6573     		strb	r5, [r4, #13]
 820:../drivers/fsl_sai.c **** 
 821:../drivers/fsl_sai.c ****     SAI_TxSetFormat(base, format, mclkSourceClockHz, bclkSourceClockHz);
 1844              		.loc 1 821 0
 1845 0022 FFF7FEFF 		bl	SAI_TxSetFormat
 1846              	.LVL170:
 822:../drivers/fsl_sai.c **** 
 823:../drivers/fsl_sai.c ****     return kStatus_Success;
 1847              		.loc 1 823 0
 1848 0026 0020     		movs	r0, #0
 1849              	.L145:
 824:../drivers/fsl_sai.c **** }
 1850              		.loc 1 824 0
 1851 0028 38BD     		pop	{r3, r4, r5, pc}
 1852              	.LVL171:
 1853              	.L148:
 811:../drivers/fsl_sai.c ****     }
 1854              		.loc 1 811 0
 1855 002a 0420     		movs	r0, #4
 1856              	.LVL172:
 1857 002c FCE7     		b	.L145
 1858              		.cfi_endproc
 1859              	.LFE184:
 1861              		.section	.text.SAI_TransferRxSetFormat,"ax",%progbits
 1862              		.align	1
 1863              		.global	SAI_TransferRxSetFormat
 1864              		.syntax unified
 1865              		.thumb
 1866              		.thumb_func
 1867              		.fpu fpv4-sp-d16
 1869              	SAI_TransferRxSetFormat:
 1870              	.LFB185:
 825:../drivers/fsl_sai.c **** 
 826:../drivers/fsl_sai.c **** status_t SAI_TransferRxSetFormat(I2S_Type *base,
 827:../drivers/fsl_sai.c ****                                  sai_handle_t *handle,
 828:../drivers/fsl_sai.c ****                                  sai_transfer_format_t *format,
 829:../drivers/fsl_sai.c ****                                  uint32_t mclkSourceClockHz,
 830:../drivers/fsl_sai.c ****                                  uint32_t bclkSourceClockHz)
 831:../drivers/fsl_sai.c **** {
 1871              		.loc 1 831 0
 1872              		.cfi_startproc
 1873              		@ args = 4, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 1875              	.LVL173:
 1876 0000 38B5     		push	{r3, r4, r5, lr}
 1877              		.cfi_def_cfa_offset 16
 1878              		.cfi_offset 3, -16
 1879              		.cfi_offset 4, -12
 1880              		.cfi_offset 5, -8
 1881              		.cfi_offset 14, -4
 1882              		.loc 1 831 0
 1883 0002 0C46     		mov	r4, r1
 1884 0004 1146     		mov	r1, r2
 1885              	.LVL174:
 1886 0006 1A46     		mov	r2, r3
 1887              	.LVL175:
 832:../drivers/fsl_sai.c ****     assert(handle);
 833:../drivers/fsl_sai.c **** 
 834:../drivers/fsl_sai.c ****     if ((mclkSourceClockHz < format->sampleRate_Hz) || (bclkSourceClockHz < format->sampleRate_Hz))
 1888              		.loc 1 834 0
 1889 0008 0D68     		ldr	r5, [r1]
 831:../drivers/fsl_sai.c ****     assert(handle);
 1890              		.loc 1 831 0
 1891 000a 049B     		ldr	r3, [sp, #16]
 1892              	.LVL176:
 1893              		.loc 1 834 0
 1894 000c 9542     		cmp	r5, r2
 1895 000e 0CD8     		bhi	.L152
 1896              		.loc 1 834 0 is_stmt 0 discriminator 1
 1897 0010 9D42     		cmp	r5, r3
 1898 0012 0AD8     		bhi	.L152
 835:../drivers/fsl_sai.c ****     {
 836:../drivers/fsl_sai.c ****         return kStatus_InvalidArgument;
 837:../drivers/fsl_sai.c ****     }
 838:../drivers/fsl_sai.c **** 
 839:../drivers/fsl_sai.c ****     /* Copy format to handle */
 840:../drivers/fsl_sai.c ****     handle->bitWidth = format->bitWidth;
 1899              		.loc 1 840 0 is_stmt 1
 1900 0014 4D68     		ldr	r5, [r1, #4]
 1901 0016 2573     		strb	r5, [r4, #12]
 841:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 842:../drivers/fsl_sai.c ****     handle->watermark = format->watermark;
 1902              		.loc 1 842 0
 1903 0018 0D7C     		ldrb	r5, [r1, #16]	@ zero_extendqisi2
 1904 001a 84F84250 		strb	r5, [r4, #66]
 843:../drivers/fsl_sai.c **** #endif
 844:../drivers/fsl_sai.c ****     handle->channel = format->channel;
 1905              		.loc 1 844 0
 1906 001e 4D7C     		ldrb	r5, [r1, #17]	@ zero_extendqisi2
 1907 0020 6573     		strb	r5, [r4, #13]
 845:../drivers/fsl_sai.c **** 
 846:../drivers/fsl_sai.c ****     SAI_RxSetFormat(base, format, mclkSourceClockHz, bclkSourceClockHz);
 1908              		.loc 1 846 0
 1909 0022 FFF7FEFF 		bl	SAI_RxSetFormat
 1910              	.LVL177:
 847:../drivers/fsl_sai.c **** 
 848:../drivers/fsl_sai.c ****     return kStatus_Success;
 1911              		.loc 1 848 0
 1912 0026 0020     		movs	r0, #0
 1913              	.L149:
 849:../drivers/fsl_sai.c **** }
 1914              		.loc 1 849 0
 1915 0028 38BD     		pop	{r3, r4, r5, pc}
 1916              	.LVL178:
 1917              	.L152:
 836:../drivers/fsl_sai.c ****     }
 1918              		.loc 1 836 0
 1919 002a 0420     		movs	r0, #4
 1920              	.LVL179:
 1921 002c FCE7     		b	.L149
 1922              		.cfi_endproc
 1923              	.LFE185:
 1925              		.section	.text.SAI_TransferSendNonBlocking,"ax",%progbits
 1926              		.align	1
 1927              		.global	SAI_TransferSendNonBlocking
 1928              		.syntax unified
 1929              		.thumb
 1930              		.thumb_func
 1931              		.fpu fpv4-sp-d16
 1933              	SAI_TransferSendNonBlocking:
 1934              	.LFB186:
 850:../drivers/fsl_sai.c **** 
 851:../drivers/fsl_sai.c **** status_t SAI_TransferSendNonBlocking(I2S_Type *base, sai_handle_t *handle, sai_transfer_t *xfer)
 852:../drivers/fsl_sai.c **** {
 1935              		.loc 1 852 0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 0
 1938              		@ frame_needed = 0, uses_anonymous_args = 0
 1939              	.LVL180:
 853:../drivers/fsl_sai.c ****     assert(handle);
 854:../drivers/fsl_sai.c **** 
 855:../drivers/fsl_sai.c ****     /* Check if the queue is full */
 856:../drivers/fsl_sai.c ****     if (handle->saiQueue[handle->queueUser].data)
 1940              		.loc 1 856 0
 1941 0000 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 1942 0004 0233     		adds	r3, r3, #2
 852:../drivers/fsl_sai.c ****     assert(handle);
 1943              		.loc 1 852 0
 1944 0006 70B5     		push	{r4, r5, r6, lr}
 1945              		.cfi_def_cfa_offset 16
 1946              		.cfi_offset 4, -16
 1947              		.cfi_offset 5, -12
 1948              		.cfi_offset 6, -8
 1949              		.cfi_offset 14, -4
 1950              		.loc 1 856 0
 1951 0008 51F83340 		ldr	r4, [r1, r3, lsl #3]
 1952 000c 14BB     		cbnz	r4, .L155
 857:../drivers/fsl_sai.c ****     {
 858:../drivers/fsl_sai.c ****         return kStatus_SAI_QueueFull;
 859:../drivers/fsl_sai.c ****     }
 860:../drivers/fsl_sai.c **** 
 861:../drivers/fsl_sai.c ****     /* Add into queue */
 862:../drivers/fsl_sai.c ****     handle->transferSize[handle->queueUser] = xfer->dataSize;
 1953              		.loc 1 862 0
 1954 000e 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 1955 0012 5668     		ldr	r6, [r2, #4]
 863:../drivers/fsl_sai.c ****     handle->saiQueue[handle->queueUser].data = xfer->data;
 1956              		.loc 1 863 0
 1957 0014 1268     		ldr	r2, [r2]
 1958              	.LVL181:
 862:../drivers/fsl_sai.c ****     handle->saiQueue[handle->queueUser].data = xfer->data;
 1959              		.loc 1 862 0
 1960 0016 0C33     		adds	r3, r3, #12
 1961 0018 41F82360 		str	r6, [r1, r3, lsl #2]
 1962              		.loc 1 863 0
 1963 001c 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 1964 0020 0233     		adds	r3, r3, #2
 1965 0022 41F83320 		str	r2, [r1, r3, lsl #3]
 864:../drivers/fsl_sai.c ****     handle->saiQueue[handle->queueUser].dataSize = xfer->dataSize;
 1966              		.loc 1 864 0
 1967 0026 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 1968 002a 01EBC303 		add	r3, r1, r3, lsl #3
 1969 002e 5E61     		str	r6, [r3, #20]
 865:../drivers/fsl_sai.c ****     handle->queueUser = (handle->queueUser + 1) % SAI_XFER_QUEUE_SIZE;
 1970              		.loc 1 865 0
 1971 0030 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 866:../drivers/fsl_sai.c **** 
 867:../drivers/fsl_sai.c ****     /* Set the state to busy */
 868:../drivers/fsl_sai.c ****     handle->state = kSAI_Busy;
 1972              		.loc 1 868 0
 1973 0034 0C60     		str	r4, [r1]
 1974              	.LVL182:
 865:../drivers/fsl_sai.c ****     handle->queueUser = (handle->queueUser + 1) % SAI_XFER_QUEUE_SIZE;
 1975              		.loc 1 865 0
 1976 0036 0133     		adds	r3, r3, #1
 1977 0038 03F00303 		and	r3, r3, #3
 1978 003c 81F84030 		strb	r3, [r1, #64]
 1979              	.LBB89:
 1980              	.LBB90:
 434:../drivers/fsl_sai.h **** }
 435:../drivers/fsl_sai.h **** 
 436:../drivers/fsl_sai.h **** /*!
 437:../drivers/fsl_sai.h ****  * @brief Do software reset or FIFO reset .
 438:../drivers/fsl_sai.h ****  *
 439:../drivers/fsl_sai.h ****  * FIFO reset means clear all the data in the FIFO, and make the FIFO pointer both to 0.
 440:../drivers/fsl_sai.h ****  * Software reset means claer the Tx internal logic, including the bit clock, frame count etc. But 
 441:../drivers/fsl_sai.h ****  * reset will not clear any configuration registers like TCR1~TCR5.
 442:../drivers/fsl_sai.h ****  * This function will also clear all the error flags such as FIFO error, sync error etc.
 443:../drivers/fsl_sai.h ****  *
 444:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 445:../drivers/fsl_sai.h ****  * @param type Reset type, FIFO reset or software reset
 446:../drivers/fsl_sai.h ****  */
 447:../drivers/fsl_sai.h **** void SAI_TxSoftwareReset(I2S_Type *base, sai_reset_type_t type);
 448:../drivers/fsl_sai.h **** 
 449:../drivers/fsl_sai.h **** /*!
 450:../drivers/fsl_sai.h ****  * @brief Do software reset or FIFO reset .
 451:../drivers/fsl_sai.h ****  *
 452:../drivers/fsl_sai.h ****  * FIFO reset means clear all the data in the FIFO, and make the FIFO pointer both to 0.
 453:../drivers/fsl_sai.h ****  * Software reset means claer the Rx internal logic, including the bit clock, frame count etc. But 
 454:../drivers/fsl_sai.h ****  * reset will not clear any configuration registers like RCR1~RCR5.
 455:../drivers/fsl_sai.h ****  * This function will also clear all the error flags such as FIFO error, sync error etc.
 456:../drivers/fsl_sai.h ****  *
 457:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 458:../drivers/fsl_sai.h ****  * @param type Reset type, FIFO reset or software reset
 459:../drivers/fsl_sai.h ****  */
 460:../drivers/fsl_sai.h **** void SAI_RxSoftwareReset(I2S_Type *base, sai_reset_type_t type);
 461:../drivers/fsl_sai.h **** 
 462:../drivers/fsl_sai.h **** /*!
 463:../drivers/fsl_sai.h ****  * @brief Set the Tx channel FIFO enable mask.
 464:../drivers/fsl_sai.h ****  *
 465:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 466:../drivers/fsl_sai.h ****  * @param mask Channel enable mask, 0 means all channel FIFO disabled, 1 means channel 0 enabled,
 467:../drivers/fsl_sai.h ****  * 3 means both channel 0 and channel 1 enabled.
 468:../drivers/fsl_sai.h ****  */
 469:../drivers/fsl_sai.h **** void SAI_TxSetChannelFIFOMask(I2S_Type *base, uint8_t mask);
 470:../drivers/fsl_sai.h **** 
 471:../drivers/fsl_sai.h **** /*!
 472:../drivers/fsl_sai.h ****  * @brief Set the Rx channel FIFO enable mask.
 473:../drivers/fsl_sai.h ****  *
 474:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 475:../drivers/fsl_sai.h ****  * @param mask Channel enable mask, 0 means all channel FIFO disabled, 1 means channel 0 enabled,
 476:../drivers/fsl_sai.h ****  * 3 means both channel 0 and channel 1 enabled.
 477:../drivers/fsl_sai.h ****  */
 478:../drivers/fsl_sai.h **** void SAI_RxSetChannelFIFOMask(I2S_Type *base, uint8_t mask);
 479:../drivers/fsl_sai.h **** 
 480:../drivers/fsl_sai.h **** /*! @} */
 481:../drivers/fsl_sai.h **** 
 482:../drivers/fsl_sai.h **** /*!
 483:../drivers/fsl_sai.h ****  * @name Interrupts
 484:../drivers/fsl_sai.h ****  * @{
 485:../drivers/fsl_sai.h ****  */
 486:../drivers/fsl_sai.h **** 
 487:../drivers/fsl_sai.h **** /*!
 488:../drivers/fsl_sai.h ****  * @brief Enables the SAI Tx interrupt requests.
 489:../drivers/fsl_sai.h ****  *
 490:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 491:../drivers/fsl_sai.h ****  * @param mask interrupt source
 492:../drivers/fsl_sai.h ****  *     The parameter can be a combination of the following sources if defined.
 493:../drivers/fsl_sai.h ****  *     @arg kSAI_WordStartInterruptEnable
 494:../drivers/fsl_sai.h ****  *     @arg kSAI_SyncErrorInterruptEnable
 495:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOWarningInterruptEnable
 496:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFORequestInterruptEnable
 497:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOErrorInterruptEnable
 498:../drivers/fsl_sai.h ****  */
 499:../drivers/fsl_sai.h **** static inline void SAI_TxEnableInterrupts(I2S_Type *base, uint32_t mask)
 500:../drivers/fsl_sai.h **** {
 501:../drivers/fsl_sai.h ****     base->TCSR = ((base->TCSR & 0xFFE3FFFFU) | mask);
 1981              		.loc 2 501 0
 1982 0040 0368     		ldr	r3, [r0]
 1983 0042 23F4E013 		bic	r3, r3, #1835008
 1984 0046 43F4A063 		orr	r3, r3, #1280
 1985 004a 0360     		str	r3, [r0]
 1986              	.LVL183:
 1987              	.LBE90:
 1988              	.LBE89:
 1989              	.LBB91:
 1990              	.LBB92:
 1991 004c FFF7FEFF 		bl	SAI_TxEnable.part.0
 1992              	.LVL184:
 1993              	.LBE92:
 1994              	.LBE91:
 869:../drivers/fsl_sai.c **** 
 870:../drivers/fsl_sai.c **** /* Enable interrupt */
 871:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 872:../drivers/fsl_sai.c ****     /* Use FIFO request interrupt and fifo error*/
 873:../drivers/fsl_sai.c ****     SAI_TxEnableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFORequestInterruptEnable);
 874:../drivers/fsl_sai.c **** #else
 875:../drivers/fsl_sai.c ****     SAI_TxEnableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFOWarningInterruptEnable);
 876:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT */
 877:../drivers/fsl_sai.c **** 
 878:../drivers/fsl_sai.c ****     /* Enable Tx transfer */
 879:../drivers/fsl_sai.c ****     SAI_TxEnable(base, true);
 880:../drivers/fsl_sai.c **** 
 881:../drivers/fsl_sai.c ****     return kStatus_Success;
 1995              		.loc 1 881 0
 1996 0050 2046     		mov	r0, r4
 1997              	.LVL185:
 1998              	.L153:
 882:../drivers/fsl_sai.c **** }
 1999              		.loc 1 882 0
 2000 0052 70BD     		pop	{r4, r5, r6, pc}
 2001              	.LVL186:
 2002              	.L155:
 858:../drivers/fsl_sai.c ****     }
 2003              		.loc 1 858 0
 2004 0054 4FF4EE60 		mov	r0, #1904
 2005              	.LVL187:
 2006 0058 FBE7     		b	.L153
 2007              		.cfi_endproc
 2008              	.LFE186:
 2010              		.section	.text.SAI_TransferReceiveNonBlocking,"ax",%progbits
 2011              		.align	1
 2012              		.global	SAI_TransferReceiveNonBlocking
 2013              		.syntax unified
 2014              		.thumb
 2015              		.thumb_func
 2016              		.fpu fpv4-sp-d16
 2018              	SAI_TransferReceiveNonBlocking:
 2019              	.LFB187:
 883:../drivers/fsl_sai.c **** 
 884:../drivers/fsl_sai.c **** status_t SAI_TransferReceiveNonBlocking(I2S_Type *base, sai_handle_t *handle, sai_transfer_t *xfer)
 885:../drivers/fsl_sai.c **** {
 2020              		.loc 1 885 0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 0
 2023              		@ frame_needed = 0, uses_anonymous_args = 0
 2024              	.LVL188:
 886:../drivers/fsl_sai.c ****     assert(handle);
 887:../drivers/fsl_sai.c **** 
 888:../drivers/fsl_sai.c ****     /* Check if the queue is full */
 889:../drivers/fsl_sai.c ****     if (handle->saiQueue[handle->queueUser].data)
 2025              		.loc 1 889 0
 2026 0000 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 2027 0004 0233     		adds	r3, r3, #2
 885:../drivers/fsl_sai.c ****     assert(handle);
 2028              		.loc 1 885 0
 2029 0006 70B5     		push	{r4, r5, r6, lr}
 2030              		.cfi_def_cfa_offset 16
 2031              		.cfi_offset 4, -16
 2032              		.cfi_offset 5, -12
 2033              		.cfi_offset 6, -8
 2034              		.cfi_offset 14, -4
 2035              		.loc 1 889 0
 2036 0008 51F83340 		ldr	r4, [r1, r3, lsl #3]
 2037 000c 24BB     		cbnz	r4, .L158
 890:../drivers/fsl_sai.c ****     {
 891:../drivers/fsl_sai.c ****         return kStatus_SAI_QueueFull;
 892:../drivers/fsl_sai.c ****     }
 893:../drivers/fsl_sai.c **** 
 894:../drivers/fsl_sai.c ****     /* Add into queue */
 895:../drivers/fsl_sai.c ****     handle->transferSize[handle->queueUser] = xfer->dataSize;
 2038              		.loc 1 895 0
 2039 000e 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 2040 0012 5668     		ldr	r6, [r2, #4]
 896:../drivers/fsl_sai.c ****     handle->saiQueue[handle->queueUser].data = xfer->data;
 2041              		.loc 1 896 0
 2042 0014 1268     		ldr	r2, [r2]
 2043              	.LVL189:
 895:../drivers/fsl_sai.c ****     handle->saiQueue[handle->queueUser].data = xfer->data;
 2044              		.loc 1 895 0
 2045 0016 0C33     		adds	r3, r3, #12
 2046 0018 41F82360 		str	r6, [r1, r3, lsl #2]
 2047              		.loc 1 896 0
 2048 001c 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 2049 0020 0233     		adds	r3, r3, #2
 2050 0022 41F83320 		str	r2, [r1, r3, lsl #3]
 897:../drivers/fsl_sai.c ****     handle->saiQueue[handle->queueUser].dataSize = xfer->dataSize;
 2051              		.loc 1 897 0
 2052 0026 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 2053 002a 01EBC303 		add	r3, r1, r3, lsl #3
 2054 002e 5E61     		str	r6, [r3, #20]
 898:../drivers/fsl_sai.c ****     handle->queueUser = (handle->queueUser + 1) % SAI_XFER_QUEUE_SIZE;
 2055              		.loc 1 898 0
 2056 0030 91F84030 		ldrb	r3, [r1, #64]	@ zero_extendqisi2
 899:../drivers/fsl_sai.c **** 
 900:../drivers/fsl_sai.c ****     /* Set state to busy */
 901:../drivers/fsl_sai.c ****     handle->state = kSAI_Busy;
 2057              		.loc 1 901 0
 2058 0034 0C60     		str	r4, [r1]
 2059              	.LVL190:
 898:../drivers/fsl_sai.c ****     handle->queueUser = (handle->queueUser + 1) % SAI_XFER_QUEUE_SIZE;
 2060              		.loc 1 898 0
 2061 0036 0133     		adds	r3, r3, #1
 2062 0038 03F00303 		and	r3, r3, #3
 2063 003c 81F84030 		strb	r3, [r1, #64]
 2064              	.LBB93:
 2065              	.LBB94:
 502:../drivers/fsl_sai.h **** }
 503:../drivers/fsl_sai.h **** 
 504:../drivers/fsl_sai.h **** /*!
 505:../drivers/fsl_sai.h ****  * @brief Enables the SAI Rx interrupt requests.
 506:../drivers/fsl_sai.h ****  *
 507:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 508:../drivers/fsl_sai.h ****  * @param mask interrupt source
 509:../drivers/fsl_sai.h ****  *     The parameter can be a combination of the following sources if defined.
 510:../drivers/fsl_sai.h ****  *     @arg kSAI_WordStartInterruptEnable
 511:../drivers/fsl_sai.h ****  *     @arg kSAI_SyncErrorInterruptEnable
 512:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOWarningInterruptEnable
 513:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFORequestInterruptEnable
 514:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOErrorInterruptEnable
 515:../drivers/fsl_sai.h ****  */
 516:../drivers/fsl_sai.h **** static inline void SAI_RxEnableInterrupts(I2S_Type *base, uint32_t mask)
 517:../drivers/fsl_sai.h **** {
 518:../drivers/fsl_sai.h ****     base->RCSR = ((base->RCSR & 0xFFE3FFFFU) | mask);
 2066              		.loc 2 518 0
 2067 0040 D0F88030 		ldr	r3, [r0, #128]
 2068 0044 23F4E013 		bic	r3, r3, #1835008
 2069 0048 43F4A063 		orr	r3, r3, #1280
 2070 004c C0F88030 		str	r3, [r0, #128]
 2071              	.LVL191:
 2072              	.LBE94:
 2073              	.LBE93:
 2074              	.LBB95:
 2075              	.LBB96:
 2076 0050 FFF7FEFF 		bl	SAI_RxEnable.part.1
 2077              	.LVL192:
 2078              	.LBE96:
 2079              	.LBE95:
 902:../drivers/fsl_sai.c **** 
 903:../drivers/fsl_sai.c **** /* Enable interrupt */
 904:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 905:../drivers/fsl_sai.c ****     /* Use FIFO request interrupt and fifo error*/
 906:../drivers/fsl_sai.c ****     SAI_RxEnableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFORequestInterruptEnable);
 907:../drivers/fsl_sai.c **** #else
 908:../drivers/fsl_sai.c ****     SAI_RxEnableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFOWarningInterruptEnable);
 909:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT */
 910:../drivers/fsl_sai.c **** 
 911:../drivers/fsl_sai.c ****     /* Enable Rx transfer */
 912:../drivers/fsl_sai.c ****     SAI_RxEnable(base, true);
 913:../drivers/fsl_sai.c **** 
 914:../drivers/fsl_sai.c ****     return kStatus_Success;
 2080              		.loc 1 914 0
 2081 0054 2046     		mov	r0, r4
 2082              	.LVL193:
 2083              	.L156:
 915:../drivers/fsl_sai.c **** }
 2084              		.loc 1 915 0
 2085 0056 70BD     		pop	{r4, r5, r6, pc}
 2086              	.LVL194:
 2087              	.L158:
 891:../drivers/fsl_sai.c ****     }
 2088              		.loc 1 891 0
 2089 0058 4FF4EE60 		mov	r0, #1904
 2090              	.LVL195:
 2091 005c FBE7     		b	.L156
 2092              		.cfi_endproc
 2093              	.LFE187:
 2095              		.section	.text.SAI_TransferGetSendCount,"ax",%progbits
 2096              		.align	1
 2097              		.global	SAI_TransferGetSendCount
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2101              		.fpu fpv4-sp-d16
 2103              	SAI_TransferGetSendCount:
 2104              	.LFB188:
 916:../drivers/fsl_sai.c **** 
 917:../drivers/fsl_sai.c **** status_t SAI_TransferGetSendCount(I2S_Type *base, sai_handle_t *handle, size_t *count)
 918:../drivers/fsl_sai.c **** {
 2105              		.loc 1 918 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
 2109              	.LVL196:
 919:../drivers/fsl_sai.c ****     assert(handle);
 920:../drivers/fsl_sai.c **** 
 921:../drivers/fsl_sai.c ****     status_t status = kStatus_Success;
 922:../drivers/fsl_sai.c **** 
 923:../drivers/fsl_sai.c ****     if (handle->state != kSAI_Busy)
 2110              		.loc 1 923 0
 2111 0000 0868     		ldr	r0, [r1]
 2112              	.LVL197:
 918:../drivers/fsl_sai.c ****     assert(handle);
 2113              		.loc 1 918 0
 2114 0002 10B5     		push	{r4, lr}
 2115              		.cfi_def_cfa_offset 8
 2116              		.cfi_offset 4, -8
 2117              		.cfi_offset 14, -4
 2118              		.loc 1 923 0
 2119 0004 60B9     		cbnz	r0, .L161
 924:../drivers/fsl_sai.c ****     {
 925:../drivers/fsl_sai.c ****         status = kStatus_NoTransferInProgress;
 926:../drivers/fsl_sai.c ****     }
 927:../drivers/fsl_sai.c ****     else
 928:../drivers/fsl_sai.c ****     {
 929:../drivers/fsl_sai.c ****         *count = (handle->transferSize[handle->queueDriver] - handle->saiQueue[handle->queueDriver]
 2120              		.loc 1 929 0
 2121 0006 91F84130 		ldrb	r3, [r1, #65]	@ zero_extendqisi2
 2122 000a 91F84140 		ldrb	r4, [r1, #65]	@ zero_extendqisi2
 2123 000e 0C33     		adds	r3, r3, #12
 2124 0010 01EBC404 		add	r4, r1, r4, lsl #3
 2125 0014 51F82330 		ldr	r3, [r1, r3, lsl #2]
 2126 0018 6169     		ldr	r1, [r4, #20]
 2127              	.LVL198:
 2128 001a 5B1A     		subs	r3, r3, r1
 2129 001c 1360     		str	r3, [r2]
 2130              	.LVL199:
 2131              	.L159:
 930:../drivers/fsl_sai.c ****     }
 931:../drivers/fsl_sai.c **** 
 932:../drivers/fsl_sai.c ****     return status;
 933:../drivers/fsl_sai.c **** }
 2132              		.loc 1 933 0
 2133 001e 10BD     		pop	{r4, pc}
 2134              	.LVL200:
 2135              	.L161:
 925:../drivers/fsl_sai.c ****     }
 2136              		.loc 1 925 0
 2137 0020 0620     		movs	r0, #6
 2138              	.LVL201:
 932:../drivers/fsl_sai.c **** }
 2139              		.loc 1 932 0
 2140 0022 FCE7     		b	.L159
 2141              		.cfi_endproc
 2142              	.LFE188:
 2144              		.section	.text.SAI_TransferGetReceiveCount,"ax",%progbits
 2145              		.align	1
 2146              		.global	SAI_TransferGetReceiveCount
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2150              		.fpu fpv4-sp-d16
 2152              	SAI_TransferGetReceiveCount:
 2153              	.LFB202:
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 0
 2156              		@ frame_needed = 0, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
 2158 0000 FFF7FEBF 		b	SAI_TransferGetSendCount
 2159              		.cfi_endproc
 2160              	.LFE202:
 2162              		.section	.text.SAI_TransferAbortSend,"ax",%progbits
 2163              		.align	1
 2164              		.global	SAI_TransferAbortSend
 2165              		.syntax unified
 2166              		.thumb
 2167              		.thumb_func
 2168              		.fpu fpv4-sp-d16
 2170              	SAI_TransferAbortSend:
 2171              	.LFB190:
 934:../drivers/fsl_sai.c **** 
 935:../drivers/fsl_sai.c **** status_t SAI_TransferGetReceiveCount(I2S_Type *base, sai_handle_t *handle, size_t *count)
 936:../drivers/fsl_sai.c **** {
 937:../drivers/fsl_sai.c ****     assert(handle);
 938:../drivers/fsl_sai.c **** 
 939:../drivers/fsl_sai.c ****     status_t status = kStatus_Success;
 940:../drivers/fsl_sai.c **** 
 941:../drivers/fsl_sai.c ****     if (handle->state != kSAI_Busy)
 942:../drivers/fsl_sai.c ****     {
 943:../drivers/fsl_sai.c ****         status = kStatus_NoTransferInProgress;
 944:../drivers/fsl_sai.c ****     }
 945:../drivers/fsl_sai.c ****     else
 946:../drivers/fsl_sai.c ****     {
 947:../drivers/fsl_sai.c ****         *count = (handle->transferSize[handle->queueDriver] - handle->saiQueue[handle->queueDriver]
 948:../drivers/fsl_sai.c ****     }
 949:../drivers/fsl_sai.c **** 
 950:../drivers/fsl_sai.c ****     return status;
 951:../drivers/fsl_sai.c **** }
 952:../drivers/fsl_sai.c **** 
 953:../drivers/fsl_sai.c **** void SAI_TransferAbortSend(I2S_Type *base, sai_handle_t *handle)
 954:../drivers/fsl_sai.c **** {
 2172              		.loc 1 954 0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
 2176              	.LVL202:
 2177              		.loc 1 954 0
 2178 0000 38B5     		push	{r3, r4, r5, lr}
 2179              		.cfi_def_cfa_offset 16
 2180              		.cfi_offset 3, -16
 2181              		.cfi_offset 4, -12
 2182              		.cfi_offset 5, -8
 2183              		.cfi_offset 14, -4
 2184              		.loc 1 954 0
 2185 0002 0C46     		mov	r4, r1
 955:../drivers/fsl_sai.c ****     assert(handle);
 956:../drivers/fsl_sai.c **** 
 957:../drivers/fsl_sai.c ****     /* Stop Tx transfer and disable interrupt */
 958:../drivers/fsl_sai.c ****     SAI_TxEnable(base, false);
 2186              		.loc 1 958 0
 2187 0004 0021     		movs	r1, #0
 2188              	.LVL203:
 2189 0006 FFF7FEFF 		bl	SAI_TxEnable
 2190              	.LVL204:
 2191              	.LBB97:
 2192              	.LBB98:
 519:../drivers/fsl_sai.h **** }
 520:../drivers/fsl_sai.h **** 
 521:../drivers/fsl_sai.h **** /*!
 522:../drivers/fsl_sai.h ****  * @brief Disables the SAI Tx interrupt requests.
 523:../drivers/fsl_sai.h ****  *
 524:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 525:../drivers/fsl_sai.h ****  * @param mask interrupt source
 526:../drivers/fsl_sai.h ****  *     The parameter can be a combination of the following sources if defined.
 527:../drivers/fsl_sai.h ****  *     @arg kSAI_WordStartInterruptEnable
 528:../drivers/fsl_sai.h ****  *     @arg kSAI_SyncErrorInterruptEnable
 529:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOWarningInterruptEnable
 530:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFORequestInterruptEnable
 531:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOErrorInterruptEnable
 532:../drivers/fsl_sai.h ****  */
 533:../drivers/fsl_sai.h **** static inline void SAI_TxDisableInterrupts(I2S_Type *base, uint32_t mask)
 534:../drivers/fsl_sai.h **** {
 535:../drivers/fsl_sai.h ****     base->TCSR = ((base->TCSR & 0xFFE3FFFFU) & (~mask));
 2193              		.loc 2 535 0
 2194 000a 0368     		ldr	r3, [r0]
 2195 000c 23F4E013 		bic	r3, r3, #1835008
 2196 0010 23F4A063 		bic	r3, r3, #1280
 2197 0014 0360     		str	r3, [r0]
 2198              	.LVL205:
 2199              	.LBE98:
 2200              	.LBE97:
 959:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 960:../drivers/fsl_sai.c ****     /* Use FIFO request interrupt and fifo error */
 961:../drivers/fsl_sai.c ****     SAI_TxDisableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFORequestInterruptEnable);
 962:../drivers/fsl_sai.c **** #else
 963:../drivers/fsl_sai.c ****     SAI_TxDisableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFOWarningInterruptEnable);
 964:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT */
 965:../drivers/fsl_sai.c **** 
 966:../drivers/fsl_sai.c ****     handle->state = kSAI_Idle;
 2201              		.loc 1 966 0
 2202 0016 2046     		mov	r0, r4
 2203              	.LVL206:
 2204 0018 0123     		movs	r3, #1
 2205 001a 40F8103B 		str	r3, [r0], #16
 967:../drivers/fsl_sai.c **** 
 968:../drivers/fsl_sai.c ****     /* Clear the queue */
 969:../drivers/fsl_sai.c ****     memset(handle->saiQueue, 0, sizeof(sai_transfer_t) * SAI_XFER_QUEUE_SIZE);
 2206              		.loc 1 969 0
 2207 001e 2022     		movs	r2, #32
 2208 0020 0021     		movs	r1, #0
 2209 0022 FFF7FEFF 		bl	memset
 2210              	.LVL207:
 970:../drivers/fsl_sai.c ****     handle->queueDriver = 0;
 2211              		.loc 1 970 0
 2212 0026 0023     		movs	r3, #0
 2213 0028 84F84130 		strb	r3, [r4, #65]
 971:../drivers/fsl_sai.c ****     handle->queueUser = 0;
 2214              		.loc 1 971 0
 2215 002c 84F84030 		strb	r3, [r4, #64]
 972:../drivers/fsl_sai.c **** }
 2216              		.loc 1 972 0
 2217 0030 38BD     		pop	{r3, r4, r5, pc}
 2218              		.cfi_endproc
 2219              	.LFE190:
 2221              		.section	.text.SAI_TransferTxHandleIRQ,"ax",%progbits
 2222              		.align	1
 2223              		.global	SAI_TransferTxHandleIRQ
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2227              		.fpu fpv4-sp-d16
 2229              	SAI_TransferTxHandleIRQ:
 2230              	.LFB194:
 973:../drivers/fsl_sai.c **** 
 974:../drivers/fsl_sai.c **** void SAI_TransferAbortReceive(I2S_Type *base, sai_handle_t *handle)
 975:../drivers/fsl_sai.c **** {
 976:../drivers/fsl_sai.c ****     assert(handle);
 977:../drivers/fsl_sai.c **** 
 978:../drivers/fsl_sai.c ****     /* Stop Tx transfer and disable interrupt */
 979:../drivers/fsl_sai.c ****     SAI_RxEnable(base, false);
 980:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 981:../drivers/fsl_sai.c ****     /* Use FIFO request interrupt and fifo error */
 982:../drivers/fsl_sai.c ****     SAI_RxDisableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFORequestInterruptEnable);
 983:../drivers/fsl_sai.c **** #else
 984:../drivers/fsl_sai.c ****     SAI_RxDisableInterrupts(base, kSAI_FIFOErrorInterruptEnable | kSAI_FIFOWarningInterruptEnable);
 985:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT */
 986:../drivers/fsl_sai.c **** 
 987:../drivers/fsl_sai.c ****     handle->state = kSAI_Idle;
 988:../drivers/fsl_sai.c **** 
 989:../drivers/fsl_sai.c ****     /* Clear the queue */
 990:../drivers/fsl_sai.c ****     memset(handle->saiQueue, 0, sizeof(sai_transfer_t) * SAI_XFER_QUEUE_SIZE);
 991:../drivers/fsl_sai.c ****     handle->queueDriver = 0;
 992:../drivers/fsl_sai.c ****     handle->queueUser = 0;
 993:../drivers/fsl_sai.c **** }
 994:../drivers/fsl_sai.c **** 
 995:../drivers/fsl_sai.c **** void SAI_TransferTerminateSend(I2S_Type *base, sai_handle_t *handle)
 996:../drivers/fsl_sai.c **** {
 997:../drivers/fsl_sai.c ****     assert(handle);
 998:../drivers/fsl_sai.c **** 
 999:../drivers/fsl_sai.c ****     /* Abort the current transfer */
1000:../drivers/fsl_sai.c ****     SAI_TransferAbortSend(base, handle);
1001:../drivers/fsl_sai.c **** 
1002:../drivers/fsl_sai.c ****     /* Clear all the internal information */
1003:../drivers/fsl_sai.c ****     memset(handle->saiQueue, 0U, sizeof(handle->saiQueue));
1004:../drivers/fsl_sai.c ****     memset(handle->transferSize, 0U, sizeof(handle->transferSize));
1005:../drivers/fsl_sai.c ****     handle->queueUser = 0U;
1006:../drivers/fsl_sai.c ****     handle->queueDriver = 0U;
1007:../drivers/fsl_sai.c **** }
1008:../drivers/fsl_sai.c **** 
1009:../drivers/fsl_sai.c **** void SAI_TransferTerminateReceive(I2S_Type *base, sai_handle_t *handle)
1010:../drivers/fsl_sai.c **** {
1011:../drivers/fsl_sai.c ****     assert(handle);
1012:../drivers/fsl_sai.c **** 
1013:../drivers/fsl_sai.c ****     /* Abort the current transfer */
1014:../drivers/fsl_sai.c ****     SAI_TransferAbortReceive(base, handle);
1015:../drivers/fsl_sai.c **** 
1016:../drivers/fsl_sai.c ****     /* Clear all the internal information */
1017:../drivers/fsl_sai.c ****     memset(handle->saiQueue, 0U, sizeof(handle->saiQueue));
1018:../drivers/fsl_sai.c ****     memset(handle->transferSize, 0U, sizeof(handle->transferSize));
1019:../drivers/fsl_sai.c ****     handle->queueUser = 0U;
1020:../drivers/fsl_sai.c ****     handle->queueDriver = 0U;
1021:../drivers/fsl_sai.c **** }
1022:../drivers/fsl_sai.c **** 
1023:../drivers/fsl_sai.c **** void SAI_TransferTxHandleIRQ(I2S_Type *base, sai_handle_t *handle)
1024:../drivers/fsl_sai.c **** {
 2231              		.loc 1 1024 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 0
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
 2235              	.LVL208:
 2236 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2237              		.cfi_def_cfa_offset 32
 2238              		.cfi_offset 4, -32
 2239              		.cfi_offset 5, -28
 2240              		.cfi_offset 6, -24
 2241              		.cfi_offset 7, -20
 2242              		.cfi_offset 8, -16
 2243              		.cfi_offset 9, -12
 2244              		.cfi_offset 10, -8
 2245              		.cfi_offset 14, -4
1025:../drivers/fsl_sai.c ****     assert(handle);
1026:../drivers/fsl_sai.c **** 
1027:../drivers/fsl_sai.c ****     uint8_t *buffer = handle->saiQueue[handle->queueDriver].data;
 2246              		.loc 1 1027 0
 2247 0004 91F84130 		ldrb	r3, [r1, #65]	@ zero_extendqisi2
1028:../drivers/fsl_sai.c ****     uint8_t dataSize = handle->bitWidth / 8U;
 2248              		.loc 1 1028 0
 2249 0008 0F7B     		ldrb	r7, [r1, #12]	@ zero_extendqisi2
1027:../drivers/fsl_sai.c ****     uint8_t dataSize = handle->bitWidth / 8U;
 2250              		.loc 1 1027 0
 2251 000a 0233     		adds	r3, r3, #2
1024:../drivers/fsl_sai.c ****     assert(handle);
 2252              		.loc 1 1024 0
 2253 000c 0546     		mov	r5, r0
1027:../drivers/fsl_sai.c ****     uint8_t dataSize = handle->bitWidth / 8U;
 2254              		.loc 1 1027 0
 2255 000e 51F83360 		ldr	r6, [r1, r3, lsl #3]
 2256              	.LVL209:
1029:../drivers/fsl_sai.c **** 
1030:../drivers/fsl_sai.c ****     /* Handle Error */
1031:../drivers/fsl_sai.c ****     if (base->TCSR & I2S_TCSR_FEF_MASK)
 2257              		.loc 1 1031 0
 2258 0012 0368     		ldr	r3, [r0]
 2259 0014 5A03     		lsls	r2, r3, #13
1024:../drivers/fsl_sai.c ****     assert(handle);
 2260              		.loc 1 1024 0
 2261 0016 0C46     		mov	r4, r1
 2262              		.loc 1 1031 0
 2263 0018 13D5     		bpl	.L166
 2264              	.LVL210:
 2265              	.LBB104:
 2266              	.LBB105:
 408:../drivers/fsl_sai.h **** }
 2267              		.loc 2 408 0
 2268 001a 0268     		ldr	r2, [r0]
 2269 001c 22F4E012 		bic	r2, r2, #1835008
 2270 0020 42F48022 		orr	r2, r2, #262144
 2271 0024 0260     		str	r2, [r0]
 2272              	.LVL211:
 2273              	.LBE105:
 2274              	.LBE104:
1032:../drivers/fsl_sai.c ****     {
1033:../drivers/fsl_sai.c ****         /* Clear FIFO error flag to continue transfer */
1034:../drivers/fsl_sai.c ****         SAI_TxClearStatusFlags(base, kSAI_FIFOErrorFlag);
1035:../drivers/fsl_sai.c **** 
1036:../drivers/fsl_sai.c ****         /* Reset FIFO for safety */
1037:../drivers/fsl_sai.c ****         SAI_TxSoftwareReset(base, kSAI_ResetTypeFIFO);
 2275              		.loc 1 1037 0
 2276 0026 4FF00071 		mov	r1, #33554432
 2277              	.LVL212:
 2278 002a FFF7FEFF 		bl	SAI_TxSoftwareReset
 2279              	.LVL213:
1038:../drivers/fsl_sai.c **** 
1039:../drivers/fsl_sai.c ****         /* Call the callback */
1040:../drivers/fsl_sai.c ****         if (handle->callback)
 2280              		.loc 1 1040 0
 2281 002e D4F80480 		ldr	r8, [r4, #4]
 2282 0032 B8F1000F 		cmp	r8, #0
 2283 0036 04D0     		beq	.L166
1041:../drivers/fsl_sai.c ****         {
1042:../drivers/fsl_sai.c ****             (handle->callback)(base, handle, kStatus_SAI_TxError, handle->userData);
 2284              		.loc 1 1042 0
 2285 0038 A368     		ldr	r3, [r4, #8]
 2286 003a 40F26E72 		movw	r2, #1902
 2287 003e 2146     		mov	r1, r4
 2288 0040 C047     		blx	r8
 2289              	.LVL214:
 2290              	.L166:
1043:../drivers/fsl_sai.c ****         }
1044:../drivers/fsl_sai.c ****     }
1045:../drivers/fsl_sai.c **** 
1046:../drivers/fsl_sai.c **** /* Handle transfer */
1047:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
1048:../drivers/fsl_sai.c ****     if (base->TCSR & I2S_TCSR_FRF_MASK)
 2291              		.loc 1 1048 0
 2292 0042 2B68     		ldr	r3, [r5]
 2293 0044 DB03     		lsls	r3, r3, #15
 2294 0046 34D5     		bpl	.L168
 2295              	.LBB106:
1049:../drivers/fsl_sai.c ****     {
1050:../drivers/fsl_sai.c ****         /* Judge if the data need to transmit is less than space */
1051:../drivers/fsl_sai.c ****         uint8_t size = MIN((handle->saiQueue[handle->queueDriver].dataSize),
 2296              		.loc 1 1051 0
 2297 0048 94F84110 		ldrb	r1, [r4, #65]	@ zero_extendqisi2
 2298 004c 94F84230 		ldrb	r3, [r4, #66]	@ zero_extendqisi2
 2299 0050 04EBC101 		add	r1, r4, r1, lsl #3
 2300 0054 C3F10803 		rsb	r3, r3, #8
 2301              	.LBE106:
1028:../drivers/fsl_sai.c **** 
 2302              		.loc 1 1028 0
 2303 0058 FA08     		lsrs	r2, r7, #3
 2304              	.LBB115:
 2305              		.loc 1 1051 0
 2306 005a 4969     		ldr	r1, [r1, #20]
1052:../drivers/fsl_sai.c ****                            (size_t)((FSL_FEATURE_SAI_FIFO_COUNT - handle->watermark) * dataSize));
1053:../drivers/fsl_sai.c **** 
1054:../drivers/fsl_sai.c ****         /* Copy the data from sai buffer to FIFO */
1055:../drivers/fsl_sai.c ****         SAI_WriteNonBlocking(base, handle->channel, handle->bitWidth, buffer, size);
 2307              		.loc 1 1055 0
 2308 005c 677B     		ldrb	r7, [r4, #13]	@ zero_extendqisi2
 2309              	.LVL215:
1051:../drivers/fsl_sai.c ****                            (size_t)((FSL_FEATURE_SAI_FIFO_COUNT - handle->watermark) * dataSize));
 2310              		.loc 1 1051 0
 2311 005e 03FB02F0 		mul	r0, r3, r2
 2312 0062 8142     		cmp	r1, r0
 2313 0064 38BF     		it	cc
 2314 0066 94F84130 		ldrbcc	r3, [r4, #65]	@ zero_extendqisi2
 2315              		.loc 1 1055 0
 2316 006a 217B     		ldrb	r1, [r4, #12]	@ zero_extendqisi2
1051:../drivers/fsl_sai.c ****                            (size_t)((FSL_FEATURE_SAI_FIFO_COUNT - handle->watermark) * dataSize));
 2317              		.loc 1 1051 0
 2318 006c 38BF     		it	cc
 2319 006e 04EBC303 		addcc	r3, r4, r3, lsl #3
 2320              	.LBB107:
 2321              	.LBB108:
 207:../drivers/fsl_sai.c ****     uint32_t data = 0;
 2322              		.loc 1 207 0
 2323 0072 4FEAD101 		lsr	r1, r1, #3
 2324              	.LBE108:
 2325              	.LBE107:
1051:../drivers/fsl_sai.c ****                            (size_t)((FSL_FEATURE_SAI_FIFO_COUNT - handle->watermark) * dataSize));
 2326              		.loc 1 1051 0
 2327 0076 28BF     		it	cs
 2328 0078 13FB02F3 		smulbbcs	r3, r3, r2
 2329              	.LBB112:
 2330              	.LBB109:
 207:../drivers/fsl_sai.c ****     uint32_t data = 0;
 2331              		.loc 1 207 0
 2332 007c 5FFA81F9 		uxtb	r9, r1
 211:../drivers/fsl_sai.c ****     {
 2333              		.loc 1 211 0
 2334 0080 4FF00000 		mov	r0, #0
 219:../drivers/fsl_sai.c ****         data = 0;
 2335              		.loc 1 219 0
 2336 0084 07F10807 		add	r7, r7, #8
 2337              	.LBE109:
 2338              	.LBE112:
1051:../drivers/fsl_sai.c ****                            (size_t)((FSL_FEATURE_SAI_FIFO_COUNT - handle->watermark) * dataSize));
 2339              		.loc 1 1051 0
 2340 0088 34BF     		ite	cc
 2341 008a 1B7D     		ldrbcc	r3, [r3, #20]	@ zero_extendqisi2
 2342 008c DBB2     		uxtbcs	r3, r3
 2343              	.LVL216:
 2344              	.LBB113:
 2345              	.LBB110:
 211:../drivers/fsl_sai.c ****     {
 2346              		.loc 1 211 0
 2347 008e B3FBF1F8 		udiv	r8, r3, r1
 2348              	.LVL217:
 2349              	.L171:
 2350 0092 4045     		cmp	r0, r8
 2351 0094 48D1     		bne	.L178
 2352              	.LVL218:
 2353              	.LBE110:
 2354              	.LBE113:
1056:../drivers/fsl_sai.c **** 
1057:../drivers/fsl_sai.c ****         /* Update the internal counter */
1058:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].dataSize -= size;
 2355              		.loc 1 1058 0 discriminator 4
 2356 0096 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 2357 009a 04EBC202 		add	r2, r4, r2, lsl #3
 2358 009e 5169     		ldr	r1, [r2, #20]
 2359 00a0 C91A     		subs	r1, r1, r3
 2360 00a2 5161     		str	r1, [r2, #20]
1059:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].data += size;
 2361              		.loc 1 1059 0 discriminator 4
 2362 00a4 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 2363 00a8 04EBC202 		add	r2, r4, r2, lsl #3
 2364 00ac 1169     		ldr	r1, [r2, #16]
 2365 00ae 0B44     		add	r3, r3, r1
 2366              	.LVL219:
 2367 00b0 1361     		str	r3, [r2, #16]
 2368              	.L168:
 2369              	.LBE115:
1060:../drivers/fsl_sai.c ****     }
1061:../drivers/fsl_sai.c **** #else
1062:../drivers/fsl_sai.c ****     if (base->TCSR & I2S_TCSR_FWF_MASK)
1063:../drivers/fsl_sai.c ****     {
1064:../drivers/fsl_sai.c ****         uint8_t size = MIN((handle->saiQueue[handle->queueDriver].dataSize), dataSize);
1065:../drivers/fsl_sai.c **** 
1066:../drivers/fsl_sai.c ****         SAI_WriteNonBlocking(base, handle->channel, handle->bitWidth, buffer, size);
1067:../drivers/fsl_sai.c **** 
1068:../drivers/fsl_sai.c ****         /* Update internal counter */
1069:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].dataSize -= size;
1070:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].data += size;
1071:../drivers/fsl_sai.c ****     }
1072:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT */
1073:../drivers/fsl_sai.c **** 
1074:../drivers/fsl_sai.c ****     /* If finished a blcok, call the callback function */
1075:../drivers/fsl_sai.c ****     if (handle->saiQueue[handle->queueDriver].dataSize == 0U)
 2370              		.loc 1 1075 0
 2371 00b2 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 2372 00b6 04EBC303 		add	r3, r4, r3, lsl #3
 2373 00ba 5A69     		ldr	r2, [r3, #20]
 2374 00bc B2B9     		cbnz	r2, .L175
1076:../drivers/fsl_sai.c ****     {
1077:../drivers/fsl_sai.c ****         memset(&handle->saiQueue[handle->queueDriver], 0, sizeof(sai_transfer_t));
 2375              		.loc 1 1077 0
 2376 00be 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 2377 00c2 0233     		adds	r3, r3, #2
 2378 00c4 04EBC301 		add	r1, r4, r3, lsl #3
 2379 00c8 44F83320 		str	r2, [r4, r3, lsl #3]	@ unaligned
 2380 00cc 4A60     		str	r2, [r1, #4]	@ unaligned
1078:../drivers/fsl_sai.c ****         handle->queueDriver = (handle->queueDriver + 1) % SAI_XFER_QUEUE_SIZE;
 2381              		.loc 1 1078 0
 2382 00ce 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
1079:../drivers/fsl_sai.c ****         if (handle->callback)
 2383              		.loc 1 1079 0
 2384 00d2 6668     		ldr	r6, [r4, #4]
1078:../drivers/fsl_sai.c ****         handle->queueDriver = (handle->queueDriver + 1) % SAI_XFER_QUEUE_SIZE;
 2385              		.loc 1 1078 0
 2386 00d4 0133     		adds	r3, r3, #1
 2387 00d6 03F00303 		and	r3, r3, #3
 2388 00da 84F84130 		strb	r3, [r4, #65]
 2389              		.loc 1 1079 0
 2390 00de 2EB1     		cbz	r6, .L175
1080:../drivers/fsl_sai.c ****         {
1081:../drivers/fsl_sai.c ****             (handle->callback)(base, handle, kStatus_SAI_TxIdle, handle->userData);
 2391              		.loc 1 1081 0
 2392 00e0 A368     		ldr	r3, [r4, #8]
 2393 00e2 40F27172 		movw	r2, #1905
 2394 00e6 2146     		mov	r1, r4
 2395 00e8 2846     		mov	r0, r5
 2396 00ea B047     		blx	r6
 2397              	.LVL220:
 2398              	.L175:
1082:../drivers/fsl_sai.c ****         }
1083:../drivers/fsl_sai.c ****     }
1084:../drivers/fsl_sai.c **** 
1085:../drivers/fsl_sai.c ****     /* If all data finished, just stop the transfer */
1086:../drivers/fsl_sai.c ****     if (handle->saiQueue[handle->queueDriver].data == NULL)
 2399              		.loc 1 1086 0
 2400 00ec 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 2401 00f0 0233     		adds	r3, r3, #2
 2402 00f2 54F83330 		ldr	r3, [r4, r3, lsl #3]
 2403 00f6 D3B9     		cbnz	r3, .L164
1087:../drivers/fsl_sai.c ****     {
1088:../drivers/fsl_sai.c ****         SAI_TransferAbortSend(base, handle);
 2404              		.loc 1 1088 0
 2405 00f8 2146     		mov	r1, r4
 2406 00fa 2846     		mov	r0, r5
1089:../drivers/fsl_sai.c ****     }
1090:../drivers/fsl_sai.c **** }
 2407              		.loc 1 1090 0
 2408 00fc BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2409              		.cfi_remember_state
 2410              		.cfi_restore 14
 2411              		.cfi_restore 10
 2412              		.cfi_restore 9
 2413              		.cfi_restore 8
 2414              		.cfi_restore 7
 2415              		.cfi_restore 6
 2416              		.cfi_restore 5
 2417              		.cfi_restore 4
 2418              		.cfi_def_cfa_offset 0
 2419              	.LVL221:
1088:../drivers/fsl_sai.c ****     }
 2420              		.loc 1 1088 0
 2421 0100 FFF7FEBF 		b	SAI_TransferAbortSend
 2422              	.LVL222:
 2423              	.L172:
 2424              		.cfi_restore_state
 2425              	.LBB116:
 2426              	.LBB114:
 2427              	.LBB111:
 215:../drivers/fsl_sai.c ****             data |= (temp << (8U * j));
 2428              		.loc 1 215 0
 2429 0104 16F802E0 		ldrb	lr, [r6, r2]	@ zero_extendqisi2
 2430              	.LVL223:
 216:../drivers/fsl_sai.c ****             buffer++;
 2431              		.loc 1 216 0
 2432 0108 4FEAC20A 		lsl	r10, r2, #3
 2433 010c 0EFA0AFE 		lsl	lr, lr, r10
 2434              	.LVL224:
 2435 0110 4CEA0E0C 		orr	ip, ip, lr
 2436              	.LVL225:
 2437 0114 0132     		adds	r2, r2, #1
 2438              	.LVL226:
 2439              	.L173:
 213:../drivers/fsl_sai.c ****         {
 2440              		.loc 1 213 0
 2441 0116 5FFA82FE 		uxtb	lr, r2
 2442 011a F145     		cmp	r9, lr
 2443 011c F2D8     		bhi	.L172
 2444 011e 0E44     		add	r6, r6, r1
 219:../drivers/fsl_sai.c ****         data = 0;
 2445              		.loc 1 219 0
 2446 0120 45F827C0 		str	ip, [r5, r7, lsl #2]
 2447              	.LVL227:
 211:../drivers/fsl_sai.c ****     {
 2448              		.loc 1 211 0
 2449 0124 0130     		adds	r0, r0, #1
 2450              	.LVL228:
 2451 0126 B4E7     		b	.L171
 2452              	.LVL229:
 2453              	.L178:
 2454 0128 0022     		movs	r2, #0
 2455 012a 9446     		mov	ip, r2
 2456 012c F3E7     		b	.L173
 2457              	.LVL230:
 2458              	.L164:
 2459              	.LBE111:
 2460              	.LBE114:
 2461              	.LBE116:
 2462              		.loc 1 1090 0
 2463 012e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2464              		.cfi_endproc
 2465              	.LFE194:
 2467              		.section	.text.SAI_TransferAbortReceive,"ax",%progbits
 2468              		.align	1
 2469              		.global	SAI_TransferAbortReceive
 2470              		.syntax unified
 2471              		.thumb
 2472              		.thumb_func
 2473              		.fpu fpv4-sp-d16
 2475              	SAI_TransferAbortReceive:
 2476              	.LFB191:
 975:../drivers/fsl_sai.c ****     assert(handle);
 2477              		.loc 1 975 0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 0
 2480              		@ frame_needed = 0, uses_anonymous_args = 0
 2481              	.LVL231:
 2482 0000 38B5     		push	{r3, r4, r5, lr}
 2483              		.cfi_def_cfa_offset 16
 2484              		.cfi_offset 3, -16
 2485              		.cfi_offset 4, -12
 2486              		.cfi_offset 5, -8
 2487              		.cfi_offset 14, -4
 975:../drivers/fsl_sai.c ****     assert(handle);
 2488              		.loc 1 975 0
 2489 0002 0C46     		mov	r4, r1
 979:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
 2490              		.loc 1 979 0
 2491 0004 0021     		movs	r1, #0
 2492              	.LVL232:
 2493 0006 FFF7FEFF 		bl	SAI_RxEnable
 2494              	.LVL233:
 2495              	.LBB117:
 2496              	.LBB118:
 536:../drivers/fsl_sai.h **** }
 537:../drivers/fsl_sai.h **** 
 538:../drivers/fsl_sai.h **** /*!
 539:../drivers/fsl_sai.h ****  * @brief Disables the SAI Rx interrupt requests.
 540:../drivers/fsl_sai.h ****  *
 541:../drivers/fsl_sai.h ****  * @param base SAI base pointer
 542:../drivers/fsl_sai.h ****  * @param mask interrupt source
 543:../drivers/fsl_sai.h ****  *     The parameter can be a combination of the following sources if defined.
 544:../drivers/fsl_sai.h ****  *     @arg kSAI_WordStartInterruptEnable
 545:../drivers/fsl_sai.h ****  *     @arg kSAI_SyncErrorInterruptEnable
 546:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOWarningInterruptEnable
 547:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFORequestInterruptEnable
 548:../drivers/fsl_sai.h ****  *     @arg kSAI_FIFOErrorInterruptEnable
 549:../drivers/fsl_sai.h ****  */
 550:../drivers/fsl_sai.h **** static inline void SAI_RxDisableInterrupts(I2S_Type *base, uint32_t mask)
 551:../drivers/fsl_sai.h **** {
 552:../drivers/fsl_sai.h ****     base->RCSR = ((base->RCSR & 0xFFE3FFFFU) & (~mask));
 2497              		.loc 2 552 0
 2498 000a D0F88030 		ldr	r3, [r0, #128]
 2499 000e 23F4E013 		bic	r3, r3, #1835008
 2500 0012 23F4A063 		bic	r3, r3, #1280
 2501 0016 C0F88030 		str	r3, [r0, #128]
 2502              	.LVL234:
 2503              	.LBE118:
 2504              	.LBE117:
 987:../drivers/fsl_sai.c **** 
 2505              		.loc 1 987 0
 2506 001a 2046     		mov	r0, r4
 2507              	.LVL235:
 2508 001c 0123     		movs	r3, #1
 2509 001e 40F8103B 		str	r3, [r0], #16
 990:../drivers/fsl_sai.c ****     handle->queueDriver = 0;
 2510              		.loc 1 990 0
 2511 0022 2022     		movs	r2, #32
 2512 0024 0021     		movs	r1, #0
 2513 0026 FFF7FEFF 		bl	memset
 2514              	.LVL236:
 991:../drivers/fsl_sai.c ****     handle->queueUser = 0;
 2515              		.loc 1 991 0
 2516 002a 0023     		movs	r3, #0
 2517 002c 84F84130 		strb	r3, [r4, #65]
 992:../drivers/fsl_sai.c **** }
 2518              		.loc 1 992 0
 2519 0030 84F84030 		strb	r3, [r4, #64]
 993:../drivers/fsl_sai.c **** 
 2520              		.loc 1 993 0
 2521 0034 38BD     		pop	{r3, r4, r5, pc}
 2522              		.cfi_endproc
 2523              	.LFE191:
 2525              		.section	.text.SAI_TransferRxHandleIRQ,"ax",%progbits
 2526              		.align	1
 2527              		.global	SAI_TransferRxHandleIRQ
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	SAI_TransferRxHandleIRQ:
 2534              	.LFB195:
1091:../drivers/fsl_sai.c **** 
1092:../drivers/fsl_sai.c **** void SAI_TransferRxHandleIRQ(I2S_Type *base, sai_handle_t *handle)
1093:../drivers/fsl_sai.c **** {
 2535              		.loc 1 1093 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 0
 2538              		@ frame_needed = 0, uses_anonymous_args = 0
 2539              	.LVL237:
 2540 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2541              		.cfi_def_cfa_offset 40
 2542              		.cfi_offset 3, -40
 2543              		.cfi_offset 4, -36
 2544              		.cfi_offset 5, -32
 2545              		.cfi_offset 6, -28
 2546              		.cfi_offset 7, -24
 2547              		.cfi_offset 8, -20
 2548              		.cfi_offset 9, -16
 2549              		.cfi_offset 10, -12
 2550              		.cfi_offset 11, -8
 2551              		.cfi_offset 14, -4
1094:../drivers/fsl_sai.c ****     assert(handle);
1095:../drivers/fsl_sai.c **** 
1096:../drivers/fsl_sai.c ****     uint8_t *buffer = handle->saiQueue[handle->queueDriver].data;
 2552              		.loc 1 1096 0
 2553 0004 91F84130 		ldrb	r3, [r1, #65]	@ zero_extendqisi2
1097:../drivers/fsl_sai.c ****     uint8_t dataSize = handle->bitWidth / 8U;
 2554              		.loc 1 1097 0
 2555 0008 0F7B     		ldrb	r7, [r1, #12]	@ zero_extendqisi2
1096:../drivers/fsl_sai.c ****     uint8_t dataSize = handle->bitWidth / 8U;
 2556              		.loc 1 1096 0
 2557 000a 0233     		adds	r3, r3, #2
1093:../drivers/fsl_sai.c ****     assert(handle);
 2558              		.loc 1 1093 0
 2559 000c 0546     		mov	r5, r0
1096:../drivers/fsl_sai.c ****     uint8_t dataSize = handle->bitWidth / 8U;
 2560              		.loc 1 1096 0
 2561 000e 51F83360 		ldr	r6, [r1, r3, lsl #3]
 2562              	.LVL238:
1098:../drivers/fsl_sai.c **** 
1099:../drivers/fsl_sai.c ****     /* Handle Error */
1100:../drivers/fsl_sai.c ****     if (base->RCSR & I2S_RCSR_FEF_MASK)
 2563              		.loc 1 1100 0
 2564 0012 D0F88030 		ldr	r3, [r0, #128]
 2565 0016 5A03     		lsls	r2, r3, #13
1093:../drivers/fsl_sai.c ****     assert(handle);
 2566              		.loc 1 1093 0
 2567 0018 0C46     		mov	r4, r1
 2568              		.loc 1 1100 0
 2569 001a 15D5     		bpl	.L191
 2570              	.LVL239:
 2571              	.LBB124:
 2572              	.LBB125:
 433:../drivers/fsl_sai.h **** }
 2573              		.loc 2 433 0
 2574 001c D0F88030 		ldr	r3, [r0, #128]
 2575 0020 23F4E013 		bic	r3, r3, #1835008
 2576 0024 43F48023 		orr	r3, r3, #262144
 2577 0028 C0F88030 		str	r3, [r0, #128]
 2578              	.LVL240:
 2579              	.LBE125:
 2580              	.LBE124:
1101:../drivers/fsl_sai.c ****     {
1102:../drivers/fsl_sai.c ****         /* Clear FIFO error flag to continue transfer */
1103:../drivers/fsl_sai.c ****         SAI_RxClearStatusFlags(base, kSAI_FIFOErrorFlag);
1104:../drivers/fsl_sai.c **** 
1105:../drivers/fsl_sai.c ****         /* Reset FIFO for safety */
1106:../drivers/fsl_sai.c ****         SAI_RxSoftwareReset(base, kSAI_ResetTypeFIFO);
 2581              		.loc 1 1106 0
 2582 002c 4FF00071 		mov	r1, #33554432
 2583              	.LVL241:
 2584 0030 FFF7FEFF 		bl	SAI_RxSoftwareReset
 2585              	.LVL242:
1107:../drivers/fsl_sai.c **** 
1108:../drivers/fsl_sai.c ****         /* Call the callback */
1109:../drivers/fsl_sai.c ****         if (handle->callback)
 2586              		.loc 1 1109 0
 2587 0034 D4F80480 		ldr	r8, [r4, #4]
 2588 0038 B8F1000F 		cmp	r8, #0
 2589 003c 04D0     		beq	.L191
1110:../drivers/fsl_sai.c ****         {
1111:../drivers/fsl_sai.c ****             (handle->callback)(base, handle, kStatus_SAI_RxError, handle->userData);
 2590              		.loc 1 1111 0
 2591 003e A368     		ldr	r3, [r4, #8]
 2592 0040 40F26F72 		movw	r2, #1903
 2593 0044 2146     		mov	r1, r4
 2594 0046 C047     		blx	r8
 2595              	.LVL243:
 2596              	.L191:
1112:../drivers/fsl_sai.c ****         }
1113:../drivers/fsl_sai.c ****     }
1114:../drivers/fsl_sai.c **** 
1115:../drivers/fsl_sai.c **** /* Handle transfer */
1116:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
1117:../drivers/fsl_sai.c ****     if (base->RCSR & I2S_RCSR_FRF_MASK)
 2597              		.loc 1 1117 0
 2598 0048 D5F88030 		ldr	r3, [r5, #128]
 2599 004c DB03     		lsls	r3, r3, #15
 2600 004e 34D5     		bpl	.L193
 2601              	.LBB126:
1118:../drivers/fsl_sai.c ****     {
1119:../drivers/fsl_sai.c ****         /* Judge if the data need to transmit is less than space */
1120:../drivers/fsl_sai.c ****         uint8_t size = MIN((handle->saiQueue[handle->queueDriver].dataSize), (handle->watermark * d
 2602              		.loc 1 1120 0
 2603 0050 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 2604 0054 94F84230 		ldrb	r3, [r4, #66]	@ zero_extendqisi2
1121:../drivers/fsl_sai.c **** 
1122:../drivers/fsl_sai.c ****         /* Copy the data from sai buffer to FIFO */
1123:../drivers/fsl_sai.c ****         SAI_ReadNonBlocking(base, handle->channel, handle->bitWidth, buffer, size);
 2605              		.loc 1 1123 0
 2606 0058 94F80DE0 		ldrb	lr, [r4, #13]	@ zero_extendqisi2
1120:../drivers/fsl_sai.c **** 
 2607              		.loc 1 1120 0
 2608 005c 04EBC202 		add	r2, r4, r2, lsl #3
 2609              	.LBE126:
1097:../drivers/fsl_sai.c **** 
 2610              		.loc 1 1097 0
 2611 0060 FF08     		lsrs	r7, r7, #3
 2612              	.LVL244:
 2613              	.LBB133:
1120:../drivers/fsl_sai.c **** 
 2614              		.loc 1 1120 0
 2615 0062 5269     		ldr	r2, [r2, #20]
 2616 0064 13FB07F3 		smulbb	r3, r3, r7
 2617 0068 9A42     		cmp	r2, r3
 2618 006a 38BF     		it	cc
 2619 006c 94F84130 		ldrbcc	r3, [r4, #65]	@ zero_extendqisi2
 2620              		.loc 1 1123 0
 2621 0070 227B     		ldrb	r2, [r4, #12]	@ zero_extendqisi2
1120:../drivers/fsl_sai.c **** 
 2622              		.loc 1 1120 0
 2623 0072 38BF     		it	cc
 2624 0074 04EBC303 		addcc	r3, r4, r3, lsl #3
 2625              	.LBB127:
 2626              	.LBB128:
 228:../drivers/fsl_sai.c ****     uint32_t data = 0;
 2627              		.loc 1 228 0
 2628 0078 4FEAD202 		lsr	r2, r2, #3
 2629 007c 5FFA82F9 		uxtb	r9, r2
 2630 0080 C2EB427A 		rsb	r10, r2, r2, lsl #29
 2631 0084 C6EB467C 		rsb	ip, r6, r6, lsl #29
 231:../drivers/fsl_sai.c ****     {
 2632              		.loc 1 231 0
 2633 0088 4FF00007 		mov	r7, #0
 233:../drivers/fsl_sai.c ****         for (j = 0; j < bytesPerWord; j++)
 2634              		.loc 1 233 0
 2635 008c 0EF1280E 		add	lr, lr, #40
 2636              	.LBE128:
 2637              	.LBE127:
1120:../drivers/fsl_sai.c **** 
 2638              		.loc 1 1120 0
 2639 0090 34BF     		ite	cc
 2640 0092 1B7D     		ldrbcc	r3, [r3, #20]	@ zero_extendqisi2
 2641 0094 DBB2     		uxtbcs	r3, r3
 2642              	.LVL245:
 2643              	.LBB131:
 2644              	.LBB129:
 231:../drivers/fsl_sai.c ****     {
 2645              		.loc 1 231 0
 2646 0096 B3FBF2F8 		udiv	r8, r3, r2
 2647              	.LVL246:
 2648              	.L196:
 2649 009a 4745     		cmp	r7, r8
 2650 009c 36D1     		bne	.L199
 2651              	.LVL247:
 2652              	.LBE129:
 2653              	.LBE131:
1124:../drivers/fsl_sai.c **** 
1125:../drivers/fsl_sai.c ****         /* Update the internal counter */
1126:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].dataSize -= size;
 2654              		.loc 1 1126 0 discriminator 4
 2655 009e 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 2656 00a2 04EBC202 		add	r2, r4, r2, lsl #3
 2657 00a6 5169     		ldr	r1, [r2, #20]
 2658 00a8 C91A     		subs	r1, r1, r3
 2659 00aa 5161     		str	r1, [r2, #20]
1127:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].data += size;
 2660              		.loc 1 1127 0 discriminator 4
 2661 00ac 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 2662 00b0 04EBC202 		add	r2, r4, r2, lsl #3
 2663 00b4 1169     		ldr	r1, [r2, #16]
 2664 00b6 0B44     		add	r3, r3, r1
 2665              	.LVL248:
 2666 00b8 1361     		str	r3, [r2, #16]
 2667              	.L193:
 2668              	.LBE133:
1128:../drivers/fsl_sai.c ****     }
1129:../drivers/fsl_sai.c **** #else
1130:../drivers/fsl_sai.c ****     if (base->RCSR & I2S_RCSR_FWF_MASK)
1131:../drivers/fsl_sai.c ****     {
1132:../drivers/fsl_sai.c ****         uint8_t size = MIN((handle->saiQueue[handle->queueDriver].dataSize), dataSize);
1133:../drivers/fsl_sai.c **** 
1134:../drivers/fsl_sai.c ****         SAI_ReadNonBlocking(base, handle->channel, handle->bitWidth, buffer, size);
1135:../drivers/fsl_sai.c **** 
1136:../drivers/fsl_sai.c ****         /* Update internal state */
1137:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].dataSize -= size;
1138:../drivers/fsl_sai.c ****         handle->saiQueue[handle->queueDriver].data += size;
1139:../drivers/fsl_sai.c ****     }
1140:../drivers/fsl_sai.c **** #endif /* FSL_FEATURE_SAI_FIFO_COUNT */
1141:../drivers/fsl_sai.c **** 
1142:../drivers/fsl_sai.c ****     /* If finished a blcok, call the callback function */
1143:../drivers/fsl_sai.c ****     if (handle->saiQueue[handle->queueDriver].dataSize == 0U)
 2669              		.loc 1 1143 0
 2670 00ba 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 2671 00be 04EBC303 		add	r3, r4, r3, lsl #3
 2672 00c2 5A69     		ldr	r2, [r3, #20]
 2673 00c4 B2B9     		cbnz	r2, .L201
1144:../drivers/fsl_sai.c ****     {
1145:../drivers/fsl_sai.c ****         memset(&handle->saiQueue[handle->queueDriver], 0, sizeof(sai_transfer_t));
 2674              		.loc 1 1145 0
 2675 00c6 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 2676 00ca 0233     		adds	r3, r3, #2
 2677 00cc 04EBC301 		add	r1, r4, r3, lsl #3
 2678 00d0 44F83320 		str	r2, [r4, r3, lsl #3]	@ unaligned
 2679 00d4 4A60     		str	r2, [r1, #4]	@ unaligned
1146:../drivers/fsl_sai.c ****         handle->queueDriver = (handle->queueDriver + 1) % SAI_XFER_QUEUE_SIZE;
 2680              		.loc 1 1146 0
 2681 00d6 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
1147:../drivers/fsl_sai.c ****         if (handle->callback)
 2682              		.loc 1 1147 0
 2683 00da 6668     		ldr	r6, [r4, #4]
1146:../drivers/fsl_sai.c ****         handle->queueDriver = (handle->queueDriver + 1) % SAI_XFER_QUEUE_SIZE;
 2684              		.loc 1 1146 0
 2685 00dc 0133     		adds	r3, r3, #1
 2686 00de 03F00303 		and	r3, r3, #3
 2687 00e2 84F84130 		strb	r3, [r4, #65]
 2688              		.loc 1 1147 0
 2689 00e6 2EB1     		cbz	r6, .L201
1148:../drivers/fsl_sai.c ****         {
1149:../drivers/fsl_sai.c ****             (handle->callback)(base, handle, kStatus_SAI_RxIdle, handle->userData);
 2690              		.loc 1 1149 0
 2691 00e8 A368     		ldr	r3, [r4, #8]
 2692 00ea 40F27272 		movw	r2, #1906
 2693 00ee 2146     		mov	r1, r4
 2694 00f0 2846     		mov	r0, r5
 2695 00f2 B047     		blx	r6
 2696              	.LVL249:
 2697              	.L201:
1150:../drivers/fsl_sai.c ****         }
1151:../drivers/fsl_sai.c ****     }
1152:../drivers/fsl_sai.c **** 
1153:../drivers/fsl_sai.c ****     /* If all data finished, just stop the transfer */
1154:../drivers/fsl_sai.c ****     if (handle->saiQueue[handle->queueDriver].data == NULL)
 2698              		.loc 1 1154 0
 2699 00f4 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 2700 00f8 0233     		adds	r3, r3, #2
 2701 00fa 54F83330 		ldr	r3, [r4, r3, lsl #3]
 2702 00fe C3B9     		cbnz	r3, .L189
1155:../drivers/fsl_sai.c ****     {
1156:../drivers/fsl_sai.c ****         SAI_TransferAbortReceive(base, handle);
 2703              		.loc 1 1156 0
 2704 0100 2146     		mov	r1, r4
 2705 0102 2846     		mov	r0, r5
1157:../drivers/fsl_sai.c ****     }
1158:../drivers/fsl_sai.c **** }
 2706              		.loc 1 1158 0
 2707 0104 BDE8F84F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2708              		.cfi_remember_state
 2709              		.cfi_restore 14
 2710              		.cfi_restore 11
 2711              		.cfi_restore 10
 2712              		.cfi_restore 9
 2713              		.cfi_restore 8
 2714              		.cfi_restore 7
 2715              		.cfi_restore 6
 2716              		.cfi_restore 5
 2717              		.cfi_restore 4
 2718              		.cfi_restore 3
 2719              		.cfi_def_cfa_offset 0
 2720              	.LVL250:
1156:../drivers/fsl_sai.c ****     }
 2721              		.loc 1 1156 0
 2722 0108 FFF7FEBF 		b	SAI_TransferAbortReceive
 2723              	.LVL251:
 2724              	.L199:
 2725              		.cfi_restore_state
 2726              	.LBB134:
 2727              	.LBB132:
 2728              	.LBB130:
 233:../drivers/fsl_sai.c ****         for (j = 0; j < bytesPerWord; j++)
 2729              		.loc 1 233 0
 2730 010c 55F82EB0 		ldr	fp, [r5, lr, lsl #2]
 2731              	.LVL252:
 2732 0110 3046     		mov	r0, r6
 2733              	.LVL253:
 2734              	.L197:
 234:../drivers/fsl_sai.c ****         {
 2735              		.loc 1 234 0
 2736 0112 811B     		subs	r1, r0, r6
 2737 0114 C9B2     		uxtb	r1, r1
 2738 0116 8945     		cmp	r9, r1
 2739 0118 03D8     		bhi	.L198
 2740 011a 1644     		add	r6, r6, r2
 2741              	.LVL254:
 231:../drivers/fsl_sai.c ****     {
 2742              		.loc 1 231 0
 2743 011c 0137     		adds	r7, r7, #1
 2744              	.LVL255:
 2745 011e D444     		add	ip, ip, r10
 2746 0120 BBE7     		b	.L196
 2747              	.LVL256:
 2748              	.L198:
 236:../drivers/fsl_sai.c ****             buffer++;
 2749              		.loc 1 236 0
 2750 0122 00EB0C01 		add	r1, r0, ip
 2751 0126 C900     		lsls	r1, r1, #3
 2752 0128 2BFA01F1 		lsr	r1, fp, r1
 2753 012c 00F8011B 		strb	r1, [r0], #1
 2754              	.LVL257:
 2755 0130 EFE7     		b	.L197
 2756              	.LVL258:
 2757              	.L189:
 2758              	.LBE130:
 2759              	.LBE132:
 2760              	.LBE134:
 2761              		.loc 1 1158 0
 2762 0132 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2763              		.cfi_endproc
 2764              	.LFE195:
 2766              		.section	.text.SAI_TransferTerminateSend,"ax",%progbits
 2767              		.align	1
 2768              		.global	SAI_TransferTerminateSend
 2769              		.syntax unified
 2770              		.thumb
 2771              		.thumb_func
 2772              		.fpu fpv4-sp-d16
 2774              	SAI_TransferTerminateSend:
 2775              	.LFB192:
 996:../drivers/fsl_sai.c ****     assert(handle);
 2776              		.loc 1 996 0
 2777              		.cfi_startproc
 2778              		@ args = 0, pretend = 0, frame = 0
 2779              		@ frame_needed = 0, uses_anonymous_args = 0
 2780              	.LVL259:
 2781 0000 10B5     		push	{r4, lr}
 2782              		.cfi_def_cfa_offset 8
 2783              		.cfi_offset 4, -8
 2784              		.cfi_offset 14, -4
 996:../drivers/fsl_sai.c ****     assert(handle);
 2785              		.loc 1 996 0
 2786 0002 0C46     		mov	r4, r1
1000:../drivers/fsl_sai.c **** 
 2787              		.loc 1 1000 0
 2788 0004 FFF7FEFF 		bl	SAI_TransferAbortSend
 2789              	.LVL260:
1003:../drivers/fsl_sai.c ****     memset(handle->transferSize, 0U, sizeof(handle->transferSize));
 2790              		.loc 1 1003 0
 2791 0008 2022     		movs	r2, #32
 2792 000a 0021     		movs	r1, #0
 2793 000c 04F11000 		add	r0, r4, #16
 2794 0010 FFF7FEFF 		bl	memset
 2795              	.LVL261:
1004:../drivers/fsl_sai.c ****     handle->queueUser = 0U;
 2796              		.loc 1 1004 0
 2797 0014 1022     		movs	r2, #16
 2798 0016 0021     		movs	r1, #0
 2799 0018 04F13000 		add	r0, r4, #48
 2800 001c FFF7FEFF 		bl	memset
 2801              	.LVL262:
1005:../drivers/fsl_sai.c ****     handle->queueDriver = 0U;
 2802              		.loc 1 1005 0
 2803 0020 0023     		movs	r3, #0
 2804 0022 84F84030 		strb	r3, [r4, #64]
1006:../drivers/fsl_sai.c **** }
 2805              		.loc 1 1006 0
 2806 0026 84F84130 		strb	r3, [r4, #65]
1007:../drivers/fsl_sai.c **** 
 2807              		.loc 1 1007 0
 2808 002a 10BD     		pop	{r4, pc}
 2809              		.cfi_endproc
 2810              	.LFE192:
 2812              		.section	.text.SAI_TransferTerminateReceive,"ax",%progbits
 2813              		.align	1
 2814              		.global	SAI_TransferTerminateReceive
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2818              		.fpu fpv4-sp-d16
 2820              	SAI_TransferTerminateReceive:
 2821              	.LFB193:
1010:../drivers/fsl_sai.c ****     assert(handle);
 2822              		.loc 1 1010 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 2826              	.LVL263:
 2827 0000 10B5     		push	{r4, lr}
 2828              		.cfi_def_cfa_offset 8
 2829              		.cfi_offset 4, -8
 2830              		.cfi_offset 14, -4
1010:../drivers/fsl_sai.c ****     assert(handle);
 2831              		.loc 1 1010 0
 2832 0002 0C46     		mov	r4, r1
1014:../drivers/fsl_sai.c **** 
 2833              		.loc 1 1014 0
 2834 0004 FFF7FEFF 		bl	SAI_TransferAbortReceive
 2835              	.LVL264:
1017:../drivers/fsl_sai.c ****     memset(handle->transferSize, 0U, sizeof(handle->transferSize));
 2836              		.loc 1 1017 0
 2837 0008 2022     		movs	r2, #32
 2838 000a 0021     		movs	r1, #0
 2839 000c 04F11000 		add	r0, r4, #16
 2840 0010 FFF7FEFF 		bl	memset
 2841              	.LVL265:
1018:../drivers/fsl_sai.c ****     handle->queueUser = 0U;
 2842              		.loc 1 1018 0
 2843 0014 1022     		movs	r2, #16
 2844 0016 0021     		movs	r1, #0
 2845 0018 04F13000 		add	r0, r4, #48
 2846 001c FFF7FEFF 		bl	memset
 2847              	.LVL266:
1019:../drivers/fsl_sai.c ****     handle->queueDriver = 0U;
 2848              		.loc 1 1019 0
 2849 0020 0023     		movs	r3, #0
 2850 0022 84F84030 		strb	r3, [r4, #64]
1020:../drivers/fsl_sai.c **** }
 2851              		.loc 1 1020 0
 2852 0026 84F84130 		strb	r3, [r4, #65]
1021:../drivers/fsl_sai.c **** 
 2853              		.loc 1 1021 0
 2854 002a 10BD     		pop	{r4, pc}
 2855              		.cfi_endproc
 2856              	.LFE193:
 2858              		.section	.text.I2S0_DriverIRQHandler,"ax",%progbits
 2859              		.align	1
 2860              		.global	I2S0_DriverIRQHandler
 2861              		.syntax unified
 2862              		.thumb
 2863              		.thumb_func
 2864              		.fpu fpv4-sp-d16
 2866              	I2S0_DriverIRQHandler:
 2867              	.LFB196:
1159:../drivers/fsl_sai.c **** 
1160:../drivers/fsl_sai.c **** #if defined(I2S0)
1161:../drivers/fsl_sai.c **** void I2S0_DriverIRQHandler(void)
1162:../drivers/fsl_sai.c **** {
 2868              		.loc 1 1162 0
 2869              		.cfi_startproc
 2870              		@ args = 0, pretend = 0, frame = 0
 2871              		@ frame_needed = 0, uses_anonymous_args = 0
 2872 0000 10B5     		push	{r4, lr}
 2873              		.cfi_def_cfa_offset 8
 2874              		.cfi_offset 4, -8
 2875              		.cfi_offset 14, -4
1163:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
1164:../drivers/fsl_sai.c ****     if ((s_saiHandle[0][1]) && ((I2S0->RCSR & kSAI_FIFORequestFlag) || (I2S0->RCSR & kSAI_FIFOError
 2876              		.loc 1 1164 0
 2877 0002 174C     		ldr	r4, .L240
 2878 0004 6168     		ldr	r1, [r4, #4]
 2879 0006 A1B1     		cbz	r1, .L216
 2880              		.loc 1 1164 0 is_stmt 0 discriminator 1
 2881 0008 164B     		ldr	r3, .L240+4
 2882 000a D3F88020 		ldr	r2, [r3, #128]
 2883 000e D203     		lsls	r2, r2, #15
 2884 0010 03D4     		bmi	.L217
 2885              		.loc 1 1164 0 discriminator 3
 2886 0012 D3F88020 		ldr	r2, [r3, #128]
 2887 0016 5003     		lsls	r0, r2, #13
 2888 0018 0BD5     		bpl	.L216
 2889              	.L217:
1165:../drivers/fsl_sai.c ****         ((I2S0->RCSR & kSAI_FIFORequestInterruptEnable) || (I2S0->RCSR & kSAI_FIFOErrorInterruptEna
 2890              		.loc 1 1165 0 is_stmt 1 discriminator 4
 2891 001a D3F88020 		ldr	r2, [r3, #128]
1164:../drivers/fsl_sai.c ****         ((I2S0->RCSR & kSAI_FIFORequestInterruptEnable) || (I2S0->RCSR & kSAI_FIFOErrorInterruptEna
 2892              		.loc 1 1164 0 discriminator 4
 2893 001e D205     		lsls	r2, r2, #23
 2894 0020 03D4     		bmi	.L218
 2895              		.loc 1 1165 0
 2896 0022 D3F88030 		ldr	r3, [r3, #128]
 2897 0026 5B05     		lsls	r3, r3, #21
 2898 0028 03D5     		bpl	.L216
 2899              	.L218:
1166:../drivers/fsl_sai.c **** #else
1167:../drivers/fsl_sai.c ****     if ((s_saiHandle[0][1]) && ((I2S0->RCSR & kSAI_FIFOWarningFlag) || (I2S0->RCSR & kSAI_FIFOError
1168:../drivers/fsl_sai.c ****         ((I2S0->RCSR & kSAI_FIFOWarningInterruptEnable) || (I2S0->RCSR & kSAI_FIFOErrorInterruptEna
1169:../drivers/fsl_sai.c **** #endif
1170:../drivers/fsl_sai.c ****     {
1171:../drivers/fsl_sai.c ****         s_saiRxIsr(I2S0, s_saiHandle[0][1]);
 2900              		.loc 1 1171 0
 2901 002a 0F4B     		ldr	r3, .L240+8
 2902 002c 0D48     		ldr	r0, .L240+4
 2903 002e 1B68     		ldr	r3, [r3]
 2904 0030 9847     		blx	r3
 2905              	.LVL267:
 2906              	.L216:
1172:../drivers/fsl_sai.c ****     }
1173:../drivers/fsl_sai.c **** #if defined(FSL_FEATURE_SAI_FIFO_COUNT) && (FSL_FEATURE_SAI_FIFO_COUNT > 1)
1174:../drivers/fsl_sai.c ****     if ((s_saiHandle[0][0]) && ((I2S0->TCSR & kSAI_FIFORequestFlag) || (I2S0->TCSR & kSAI_FIFOError
 2907              		.loc 1 1174 0
 2908 0032 2168     		ldr	r1, [r4]
 2909 0034 81B1     		cbz	r1, .L219
 2910              		.loc 1 1174 0 is_stmt 0 discriminator 1
 2911 0036 0B4B     		ldr	r3, .L240+4
 2912 0038 1A68     		ldr	r2, [r3]
 2913 003a D403     		lsls	r4, r2, #15
 2914 003c 02D4     		bmi	.L220
 2915              		.loc 1 1174 0 discriminator 3
 2916 003e 1A68     		ldr	r2, [r3]
 2917 0040 5003     		lsls	r0, r2, #13
 2918 0042 09D5     		bpl	.L219
 2919              	.L220:
1175:../drivers/fsl_sai.c ****         ((I2S0->TCSR & kSAI_FIFORequestInterruptEnable) || (I2S0->TCSR & kSAI_FIFOErrorInterruptEna
 2920              		.loc 1 1175 0 is_stmt 1 discriminator 4
 2921 0044 1A68     		ldr	r2, [r3]
1174:../drivers/fsl_sai.c ****         ((I2S0->TCSR & kSAI_FIFORequestInterruptEnable) || (I2S0->TCSR & kSAI_FIFOErrorInterruptEna
 2922              		.loc 1 1174 0 discriminator 4
 2923 0046 D205     		lsls	r2, r2, #23
 2924 0048 02D4     		bmi	.L221
 2925              		.loc 1 1175 0
 2926 004a 1B68     		ldr	r3, [r3]
 2927 004c 5B05     		lsls	r3, r3, #21
 2928 004e 03D5     		bpl	.L219
 2929              	.L221:
1176:../drivers/fsl_sai.c **** #else
1177:../drivers/fsl_sai.c ****     if ((s_saiHandle[0][0]) && ((I2S0->TCSR & kSAI_FIFOWarningFlag) || (I2S0->TCSR & kSAI_FIFOError
1178:../drivers/fsl_sai.c ****         ((I2S0->TCSR & kSAI_FIFOWarningInterruptEnable) || (I2S0->TCSR & kSAI_FIFOErrorInterruptEna
1179:../drivers/fsl_sai.c **** #endif
1180:../drivers/fsl_sai.c ****     {
1181:../drivers/fsl_sai.c ****         s_saiTxIsr(I2S0, s_saiHandle[0][0]);
 2930              		.loc 1 1181 0
 2931 0050 064B     		ldr	r3, .L240+12
 2932 0052 0448     		ldr	r0, .L240+4
 2933 0054 1B68     		ldr	r3, [r3]
 2934 0056 9847     		blx	r3
 2935              	.LVL268:
 2936              	.L219:
 2937              	.LBB135:
 2938              	.LBB136:
 2939              		.file 5 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2940              		.loc 5 833 0
 2941              		.syntax unified
 2942              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2943 0058 BFF34F8F 		dsb 0xF
 2944              	@ 0 "" 2
 2945              		.thumb
 2946              		.syntax unified
 2947              	.LBE136:
 2948              	.LBE135:
1182:../drivers/fsl_sai.c ****     }
1183:../drivers/fsl_sai.c **** /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1184:../drivers/fsl_sai.c ****   exception return operation might vector to incorrect interrupt */
1185:../drivers/fsl_sai.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1186:../drivers/fsl_sai.c ****     __DSB();
1187:../drivers/fsl_sai.c **** #endif
1188:../drivers/fsl_sai.c **** }
 2949              		.loc 1 1188 0
 2950 005c 10BD     		pop	{r4, pc}
 2951              	.L241:
 2952 005e 00BF     		.align	2
 2953              	.L240:
 2954 0060 00000000 		.word	s_saiHandle
 2955 0064 00F00240 		.word	1073934336
 2956 0068 00000000 		.word	.LANCHOR1
 2957 006c 00000000 		.word	.LANCHOR0
 2958              		.cfi_endproc
 2959              	.LFE196:
 2961              		.section	.text.I2S0_Tx_DriverIRQHandler,"ax",%progbits
 2962              		.align	1
 2963              		.global	I2S0_Tx_DriverIRQHandler
 2964              		.syntax unified
 2965              		.thumb
 2966              		.thumb_func
 2967              		.fpu fpv4-sp-d16
 2969              	I2S0_Tx_DriverIRQHandler:
 2970              	.LFB197:
1189:../drivers/fsl_sai.c **** 
1190:../drivers/fsl_sai.c **** void I2S0_Tx_DriverIRQHandler(void)
1191:../drivers/fsl_sai.c **** {
 2971              		.loc 1 1191 0
 2972              		.cfi_startproc
 2973              		@ args = 0, pretend = 0, frame = 0
 2974              		@ frame_needed = 0, uses_anonymous_args = 0
 2975 0000 08B5     		push	{r3, lr}
 2976              		.cfi_def_cfa_offset 8
 2977              		.cfi_offset 3, -8
 2978              		.cfi_offset 14, -4
1192:../drivers/fsl_sai.c ****     assert(s_saiHandle[0][0]);
1193:../drivers/fsl_sai.c ****     s_saiTxIsr(I2S0, s_saiHandle[0][0]);
 2979              		.loc 1 1193 0
 2980 0002 044A     		ldr	r2, .L243
 2981 0004 044B     		ldr	r3, .L243+4
 2982 0006 1168     		ldr	r1, [r2]
 2983 0008 1B68     		ldr	r3, [r3]
 2984 000a 0448     		ldr	r0, .L243+8
 2985 000c 9847     		blx	r3
 2986              	.LVL269:
 2987              	.LBB137:
 2988              	.LBB138:
 2989              		.loc 5 833 0
 2990              		.syntax unified
 2991              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2992 000e BFF34F8F 		dsb 0xF
 2993              	@ 0 "" 2
 2994              		.thumb
 2995              		.syntax unified
 2996              	.LBE138:
 2997              	.LBE137:
1194:../drivers/fsl_sai.c **** /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1195:../drivers/fsl_sai.c ****   exception return operation might vector to incorrect interrupt */
1196:../drivers/fsl_sai.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1197:../drivers/fsl_sai.c ****     __DSB();
1198:../drivers/fsl_sai.c **** #endif
1199:../drivers/fsl_sai.c **** }
 2998              		.loc 1 1199 0
 2999 0012 08BD     		pop	{r3, pc}
 3000              	.L244:
 3001              		.align	2
 3002              	.L243:
 3003 0014 00000000 		.word	s_saiHandle
 3004 0018 00000000 		.word	.LANCHOR0
 3005 001c 00F00240 		.word	1073934336
 3006              		.cfi_endproc
 3007              	.LFE197:
 3009              		.section	.text.I2S0_Rx_DriverIRQHandler,"ax",%progbits
 3010              		.align	1
 3011              		.global	I2S0_Rx_DriverIRQHandler
 3012              		.syntax unified
 3013              		.thumb
 3014              		.thumb_func
 3015              		.fpu fpv4-sp-d16
 3017              	I2S0_Rx_DriverIRQHandler:
 3018              	.LFB198:
1200:../drivers/fsl_sai.c **** 
1201:../drivers/fsl_sai.c **** void I2S0_Rx_DriverIRQHandler(void)
1202:../drivers/fsl_sai.c **** {
 3019              		.loc 1 1202 0
 3020              		.cfi_startproc
 3021              		@ args = 0, pretend = 0, frame = 0
 3022              		@ frame_needed = 0, uses_anonymous_args = 0
 3023 0000 08B5     		push	{r3, lr}
 3024              		.cfi_def_cfa_offset 8
 3025              		.cfi_offset 3, -8
 3026              		.cfi_offset 14, -4
1203:../drivers/fsl_sai.c ****     assert(s_saiHandle[0][1]);
1204:../drivers/fsl_sai.c ****     s_saiRxIsr(I2S0, s_saiHandle[0][1]);
 3027              		.loc 1 1204 0
 3028 0002 044A     		ldr	r2, .L246
 3029 0004 044B     		ldr	r3, .L246+4
 3030 0006 5168     		ldr	r1, [r2, #4]
 3031 0008 1B68     		ldr	r3, [r3]
 3032 000a 0448     		ldr	r0, .L246+8
 3033 000c 9847     		blx	r3
 3034              	.LVL270:
 3035              	.LBB139:
 3036              	.LBB140:
 3037              		.loc 5 833 0
 3038              		.syntax unified
 3039              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 3040 000e BFF34F8F 		dsb 0xF
 3041              	@ 0 "" 2
 3042              		.thumb
 3043              		.syntax unified
 3044              	.LBE140:
 3045              	.LBE139:
1205:../drivers/fsl_sai.c **** /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
1206:../drivers/fsl_sai.c ****   exception return operation might vector to incorrect interrupt */
1207:../drivers/fsl_sai.c **** #if defined __CORTEX_M && (__CORTEX_M == 4U)
1208:../drivers/fsl_sai.c ****     __DSB();
1209:../drivers/fsl_sai.c **** #endif
1210:../drivers/fsl_sai.c **** }
 3046              		.loc 1 1210 0
 3047 0012 08BD     		pop	{r3, pc}
 3048              	.L247:
 3049              		.align	2
 3050              	.L246:
 3051 0014 00000000 		.word	s_saiHandle
 3052 0018 00000000 		.word	.LANCHOR1
 3053 001c 00F00240 		.word	1073934336
 3054              		.cfi_endproc
 3055              	.LFE198:
 3057              		.comm	s_saiHandle,8,4
 3058              		.section	.bss.s_saiRxIsr,"aw",%nobits
 3059              		.align	2
 3060              		.set	.LANCHOR1,. + 0
 3063              	s_saiRxIsr:
 3064 0000 00000000 		.space	4
 3065              		.section	.bss.s_saiTxIsr,"aw",%nobits
 3066              		.align	2
 3067              		.set	.LANCHOR0,. + 0
 3070              	s_saiTxIsr:
 3071 0000 00000000 		.space	4
 3072              		.text
 3073              	.Letext0:
 3074              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 3075              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3076              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 3077              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 3078              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 3079              		.file 11 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 3080              		.file 12 "../CMSIS/MK64F12.h"
 3081              		.file 13 "../CMSIS/system_MK64F12.h"
 3082              		.file 14 "../drivers/fsl_common.h"
 3083              		.file 15 "<built-in>"
