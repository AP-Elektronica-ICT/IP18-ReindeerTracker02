   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_cmp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CMP_Init,"ax",%progbits
  18              		.align	1
  19              		.global	CMP_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	CMP_Init:
  26              	.LFB151:
  27              		.file 1 "../drivers/fsl_cmp.c"
   1:../drivers/fsl_cmp.c **** /*
   2:../drivers/fsl_cmp.c ****  * The Clear BSD License
   3:../drivers/fsl_cmp.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_cmp.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_cmp.c ****  * All rights reserved.
   6:../drivers/fsl_cmp.c ****  *
   7:../drivers/fsl_cmp.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_cmp.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_cmp.c ****  * that the following conditions are met:
  10:../drivers/fsl_cmp.c ****  *
  11:../drivers/fsl_cmp.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_cmp.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_cmp.c ****  *
  14:../drivers/fsl_cmp.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_cmp.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_cmp.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_cmp.c ****  *
  18:../drivers/fsl_cmp.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_cmp.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_cmp.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_cmp.c ****  *
  22:../drivers/fsl_cmp.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_cmp.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_cmp.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_cmp.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_cmp.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_cmp.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_cmp.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_cmp.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_cmp.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_cmp.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_cmp.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_cmp.c ****  */
  34:../drivers/fsl_cmp.c **** 
  35:../drivers/fsl_cmp.c **** #include "fsl_cmp.h"
  36:../drivers/fsl_cmp.c **** 
  37:../drivers/fsl_cmp.c **** /*******************************************************************************
  38:../drivers/fsl_cmp.c ****  * Prototypes
  39:../drivers/fsl_cmp.c ****  ******************************************************************************/
  40:../drivers/fsl_cmp.c **** /*!
  41:../drivers/fsl_cmp.c ****  * @brief Get instance number for CMP module.
  42:../drivers/fsl_cmp.c ****  *
  43:../drivers/fsl_cmp.c ****  * @param base CMP peripheral base address
  44:../drivers/fsl_cmp.c ****  */
  45:../drivers/fsl_cmp.c **** static uint32_t CMP_GetInstance(CMP_Type *base);
  46:../drivers/fsl_cmp.c **** 
  47:../drivers/fsl_cmp.c **** /*******************************************************************************
  48:../drivers/fsl_cmp.c ****  * Variables
  49:../drivers/fsl_cmp.c ****  ******************************************************************************/
  50:../drivers/fsl_cmp.c **** /*! @brief Pointers to CMP bases for each instance. */
  51:../drivers/fsl_cmp.c **** static CMP_Type *const s_cmpBases[] = CMP_BASE_PTRS;
  52:../drivers/fsl_cmp.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  53:../drivers/fsl_cmp.c **** /*! @brief Pointers to CMP clocks for each instance. */
  54:../drivers/fsl_cmp.c **** static const clock_ip_name_t s_cmpClocks[] = CMP_CLOCKS;
  55:../drivers/fsl_cmp.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  56:../drivers/fsl_cmp.c **** 
  57:../drivers/fsl_cmp.c **** /*******************************************************************************
  58:../drivers/fsl_cmp.c ****  * Codes
  59:../drivers/fsl_cmp.c ****  ******************************************************************************/
  60:../drivers/fsl_cmp.c **** static uint32_t CMP_GetInstance(CMP_Type *base)
  61:../drivers/fsl_cmp.c **** {
  62:../drivers/fsl_cmp.c ****     uint32_t instance;
  63:../drivers/fsl_cmp.c **** 
  64:../drivers/fsl_cmp.c ****     /* Find the instance index from base address mappings. */
  65:../drivers/fsl_cmp.c ****     for (instance = 0; instance < ARRAY_SIZE(s_cmpBases); instance++)
  66:../drivers/fsl_cmp.c ****     {
  67:../drivers/fsl_cmp.c ****         if (s_cmpBases[instance] == base)
  68:../drivers/fsl_cmp.c ****         {
  69:../drivers/fsl_cmp.c ****             break;
  70:../drivers/fsl_cmp.c ****         }
  71:../drivers/fsl_cmp.c ****     }
  72:../drivers/fsl_cmp.c **** 
  73:../drivers/fsl_cmp.c ****     assert(instance < ARRAY_SIZE(s_cmpBases));
  74:../drivers/fsl_cmp.c **** 
  75:../drivers/fsl_cmp.c ****     return instance;
  76:../drivers/fsl_cmp.c **** }
  77:../drivers/fsl_cmp.c **** 
  78:../drivers/fsl_cmp.c **** void CMP_Init(CMP_Type *base, const cmp_config_t *config)
  79:../drivers/fsl_cmp.c **** {
  28              		.loc 1 79 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33              	.LBB14:
  34              	.LBB15:
  67:../drivers/fsl_cmp.c ****         {
  35              		.loc 1 67 0
  36 0000 244B     		ldr	r3, .L25
  37 0002 9842     		cmp	r0, r3
  38              	.LBE15:
  39              	.LBE14:
  40              		.loc 1 79 0
  41 0004 30B5     		push	{r4, r5, lr}
  42              		.cfi_def_cfa_offset 12
  43              		.cfi_offset 4, -12
  44              		.cfi_offset 5, -8
  45              		.cfi_offset 14, -4
  46              	.LBB18:
  47              	.LBB16:
  67:../drivers/fsl_cmp.c ****         {
  48              		.loc 1 67 0
  49 0006 3CD0     		beq	.L9
  50              	.LVL1:
  51 0008 0833     		adds	r3, r3, #8
  52 000a 9842     		cmp	r0, r3
  53 000c 3BD0     		beq	.L10
  54              	.LVL2:
  65:../drivers/fsl_cmp.c ****     {
  55              		.loc 1 65 0
  56 000e 0833     		adds	r3, r3, #8
  57 0010 9842     		cmp	r0, r3
  58 0012 0CBF     		ite	eq
  59 0014 0223     		moveq	r3, #2
  60 0016 0323     		movne	r3, #3
  61              	.LVL3:
  62              	.L2:
  63              	.LBE16:
  64              	.LBE18:
  80:../drivers/fsl_cmp.c ****     assert(NULL != config);
  81:../drivers/fsl_cmp.c **** 
  82:../drivers/fsl_cmp.c ****     uint8_t tmp8;
  83:../drivers/fsl_cmp.c **** 
  84:../drivers/fsl_cmp.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
  85:../drivers/fsl_cmp.c ****     /* Enable the clock. */
  86:../drivers/fsl_cmp.c ****     CLOCK_EnableClock(s_cmpClocks[CMP_GetInstance(base)]);
  65              		.loc 1 86 0
  66 0018 1F4A     		ldr	r2, .L25+4
  67 001a 52F82340 		ldr	r4, [r2, r3, lsl #2]
  68              	.LVL4:
  69              	.LBB19:
  70              	.LBB20:
  71              		.file 2 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
  72              		.loc 2 694 0
  73 001e 230C     		lsrs	r3, r4, #16
  74 0020 03F18043 		add	r3, r3, #1073741824
  75 0024 03F58E23 		add	r3, r3, #290816
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
  76              		.loc 2 695 0
  77 0028 A4B2     		uxth	r4, r4
  78              	.LVL5:
  79 002a 1D68     		ldr	r5, [r3]
  80 002c 0122     		movs	r2, #1
  81 002e A240     		lsls	r2, r2, r4
  82 0030 2A43     		orrs	r2, r2, r5
  83 0032 1A60     		str	r2, [r3]
  84              	.LVL6:
  85              	.LBE20:
  86              	.LBE19:
  87              	.LBB21:
  88              	.LBB22:
  89              		.file 3 "../drivers/fsl_cmp.h"
   1:../drivers/fsl_cmp.h **** /*
   2:../drivers/fsl_cmp.h ****  * The Clear BSD License
   3:../drivers/fsl_cmp.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_cmp.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_cmp.h ****  * All rights reserved.
   6:../drivers/fsl_cmp.h ****  *
   7:../drivers/fsl_cmp.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_cmp.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_cmp.h ****  * that the following conditions are met:
  10:../drivers/fsl_cmp.h ****  *
  11:../drivers/fsl_cmp.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_cmp.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_cmp.h ****  *
  14:../drivers/fsl_cmp.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_cmp.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_cmp.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_cmp.h ****  *
  18:../drivers/fsl_cmp.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_cmp.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_cmp.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_cmp.h ****  *
  22:../drivers/fsl_cmp.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_cmp.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_cmp.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_cmp.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_cmp.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_cmp.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_cmp.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_cmp.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_cmp.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_cmp.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_cmp.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_cmp.h ****  */
  34:../drivers/fsl_cmp.h **** 
  35:../drivers/fsl_cmp.h **** #ifndef _FSL_CMP_H_
  36:../drivers/fsl_cmp.h **** #define _FSL_CMP_H_
  37:../drivers/fsl_cmp.h **** 
  38:../drivers/fsl_cmp.h **** #include "fsl_common.h"
  39:../drivers/fsl_cmp.h **** 
  40:../drivers/fsl_cmp.h **** /*!
  41:../drivers/fsl_cmp.h ****  * @addtogroup cmp
  42:../drivers/fsl_cmp.h ****  * @{
  43:../drivers/fsl_cmp.h ****  */
  44:../drivers/fsl_cmp.h **** 
  45:../drivers/fsl_cmp.h **** 
  46:../drivers/fsl_cmp.h **** /*******************************************************************************
  47:../drivers/fsl_cmp.h ****  * Definitions
  48:../drivers/fsl_cmp.h ****  ******************************************************************************/
  49:../drivers/fsl_cmp.h **** 
  50:../drivers/fsl_cmp.h **** /*! @name Driver version */
  51:../drivers/fsl_cmp.h **** /*@{*/
  52:../drivers/fsl_cmp.h **** /*! @brief CMP driver version 2.0.0. */
  53:../drivers/fsl_cmp.h **** #define FSL_CMP_DRIVER_VERSION (MAKE_VERSION(2, 0, 0))
  54:../drivers/fsl_cmp.h **** /*@}*/
  55:../drivers/fsl_cmp.h **** 
  56:../drivers/fsl_cmp.h **** /*!
  57:../drivers/fsl_cmp.h **** * @brief Interrupt enable/disable mask.
  58:../drivers/fsl_cmp.h **** */
  59:../drivers/fsl_cmp.h **** enum _cmp_interrupt_enable
  60:../drivers/fsl_cmp.h **** {
  61:../drivers/fsl_cmp.h ****     kCMP_OutputRisingInterruptEnable = CMP_SCR_IER_MASK,  /*!< Comparator interrupt enable rising. 
  62:../drivers/fsl_cmp.h ****     kCMP_OutputFallingInterruptEnable = CMP_SCR_IEF_MASK, /*!< Comparator interrupt enable falling.
  63:../drivers/fsl_cmp.h **** };
  64:../drivers/fsl_cmp.h **** 
  65:../drivers/fsl_cmp.h **** /*!
  66:../drivers/fsl_cmp.h ****  * @brief Status flags' mask.
  67:../drivers/fsl_cmp.h ****  */
  68:../drivers/fsl_cmp.h **** enum _cmp_status_flags
  69:../drivers/fsl_cmp.h **** {
  70:../drivers/fsl_cmp.h ****     kCMP_OutputRisingEventFlag = CMP_SCR_CFR_MASK,  /*!< Rising-edge on the comparison output has o
  71:../drivers/fsl_cmp.h ****     kCMP_OutputFallingEventFlag = CMP_SCR_CFF_MASK, /*!< Falling-edge on the comparison output has 
  72:../drivers/fsl_cmp.h ****     kCMP_OutputAssertEventFlag = CMP_SCR_COUT_MASK, /*!< Return the current value of the analog com
  73:../drivers/fsl_cmp.h **** };
  74:../drivers/fsl_cmp.h **** 
  75:../drivers/fsl_cmp.h **** /*!
  76:../drivers/fsl_cmp.h ****  * @brief CMP Hysteresis mode.
  77:../drivers/fsl_cmp.h ****  */
  78:../drivers/fsl_cmp.h **** typedef enum _cmp_hysteresis_mode
  79:../drivers/fsl_cmp.h **** {
  80:../drivers/fsl_cmp.h ****     kCMP_HysteresisLevel0 = 0U, /*!< Hysteresis level 0. */
  81:../drivers/fsl_cmp.h ****     kCMP_HysteresisLevel1 = 1U, /*!< Hysteresis level 1. */
  82:../drivers/fsl_cmp.h ****     kCMP_HysteresisLevel2 = 2U, /*!< Hysteresis level 2. */
  83:../drivers/fsl_cmp.h ****     kCMP_HysteresisLevel3 = 3U, /*!< Hysteresis level 3. */
  84:../drivers/fsl_cmp.h **** } cmp_hysteresis_mode_t;
  85:../drivers/fsl_cmp.h **** 
  86:../drivers/fsl_cmp.h **** /*!
  87:../drivers/fsl_cmp.h ****  * @brief CMP Voltage Reference source.
  88:../drivers/fsl_cmp.h ****  */
  89:../drivers/fsl_cmp.h **** typedef enum _cmp_reference_voltage_source
  90:../drivers/fsl_cmp.h **** {
  91:../drivers/fsl_cmp.h ****     kCMP_VrefSourceVin1 = 0U, /*!< Vin1 is selected as a resistor ladder network supply reference V
  92:../drivers/fsl_cmp.h ****     kCMP_VrefSourceVin2 = 1U, /*!< Vin2 is selected as a resistor ladder network supply reference V
  93:../drivers/fsl_cmp.h **** } cmp_reference_voltage_source_t;
  94:../drivers/fsl_cmp.h **** 
  95:../drivers/fsl_cmp.h **** /*!
  96:../drivers/fsl_cmp.h ****  * @brief Configures the comparator.
  97:../drivers/fsl_cmp.h ****  */
  98:../drivers/fsl_cmp.h **** typedef struct _cmp_config
  99:../drivers/fsl_cmp.h **** {
 100:../drivers/fsl_cmp.h ****     bool enableCmp;                       /*!< Enable the CMP module. */
 101:../drivers/fsl_cmp.h ****     cmp_hysteresis_mode_t hysteresisMode; /*!< CMP Hysteresis mode. */
 102:../drivers/fsl_cmp.h ****     bool enableHighSpeed;                 /*!< Enable High-speed (HS) comparison mode. */
 103:../drivers/fsl_cmp.h ****     bool enableInvertOutput;              /*!< Enable the inverted comparator output. */
 104:../drivers/fsl_cmp.h ****     bool useUnfilteredOutput;             /*!< Set the compare output(COUT) to equal COUTA(true) or
 105:../drivers/fsl_cmp.h ****     bool enablePinOut;                    /*!< The comparator output is available on the associated
 106:../drivers/fsl_cmp.h **** #if defined(FSL_FEATURE_CMP_HAS_TRIGGER_MODE) && FSL_FEATURE_CMP_HAS_TRIGGER_MODE
 107:../drivers/fsl_cmp.h ****     bool enableTriggerMode; /*!< Enable the trigger mode. */
 108:../drivers/fsl_cmp.h **** #endif                      /* FSL_FEATURE_CMP_HAS_TRIGGER_MODE */
 109:../drivers/fsl_cmp.h **** } cmp_config_t;
 110:../drivers/fsl_cmp.h **** 
 111:../drivers/fsl_cmp.h **** /*!
 112:../drivers/fsl_cmp.h ****  * @brief Configures the filter.
 113:../drivers/fsl_cmp.h ****  */
 114:../drivers/fsl_cmp.h **** typedef struct _cmp_filter_config
 115:../drivers/fsl_cmp.h **** {
 116:../drivers/fsl_cmp.h **** #if defined(FSL_FEATURE_CMP_HAS_EXTERNAL_SAMPLE_SUPPORT) && FSL_FEATURE_CMP_HAS_EXTERNAL_SAMPLE_SUP
 117:../drivers/fsl_cmp.h ****     bool enableSample;    /*!< Using the external SAMPLE as a sampling clock input or using a divid
 118:../drivers/fsl_cmp.h **** #endif                    /* FSL_FEATURE_CMP_HAS_EXTERNAL_SAMPLE_SUPPORT */
 119:../drivers/fsl_cmp.h ****     uint8_t filterCount;  /*!< Filter Sample Count. Available range is 1-7; 0 disables the filter.*
 120:../drivers/fsl_cmp.h ****     uint8_t filterPeriod; /*!< Filter Sample Period. The divider to the bus clock. Available range 
 121:../drivers/fsl_cmp.h **** } cmp_filter_config_t;
 122:../drivers/fsl_cmp.h **** 
 123:../drivers/fsl_cmp.h **** /*!
 124:../drivers/fsl_cmp.h ****  * @brief Configures the internal DAC.
 125:../drivers/fsl_cmp.h ****  */
 126:../drivers/fsl_cmp.h **** typedef struct _cmp_dac_config
 127:../drivers/fsl_cmp.h **** {
 128:../drivers/fsl_cmp.h ****     cmp_reference_voltage_source_t referenceVoltageSource; /*!< Supply voltage reference source. */
 129:../drivers/fsl_cmp.h ****     uint8_t DACValue;                                      /*!< Value for the DAC Output Voltage. A
 130:../drivers/fsl_cmp.h **** } cmp_dac_config_t;
 131:../drivers/fsl_cmp.h **** 
 132:../drivers/fsl_cmp.h **** #if defined(__cplusplus)
 133:../drivers/fsl_cmp.h **** extern "C" {
 134:../drivers/fsl_cmp.h **** #endif
 135:../drivers/fsl_cmp.h **** 
 136:../drivers/fsl_cmp.h **** /*******************************************************************************
 137:../drivers/fsl_cmp.h ****  * API
 138:../drivers/fsl_cmp.h ****  ******************************************************************************/
 139:../drivers/fsl_cmp.h **** 
 140:../drivers/fsl_cmp.h **** /*!
 141:../drivers/fsl_cmp.h ****  * @name Initialization
 142:../drivers/fsl_cmp.h ****  * @{
 143:../drivers/fsl_cmp.h ****  */
 144:../drivers/fsl_cmp.h **** 
 145:../drivers/fsl_cmp.h **** /*!
 146:../drivers/fsl_cmp.h ****  * @brief Initializes the CMP.
 147:../drivers/fsl_cmp.h ****  *
 148:../drivers/fsl_cmp.h ****  * This function initializes the CMP module. The operations included are as follows.
 149:../drivers/fsl_cmp.h ****  * - Enabling the clock for CMP module.
 150:../drivers/fsl_cmp.h ****  * - Configuring the comparator.
 151:../drivers/fsl_cmp.h ****  * - Enabling the CMP module.
 152:../drivers/fsl_cmp.h ****  * Note that for some devices, multiple CMP instances share the same clock gate. In this case, to e
 153:../drivers/fsl_cmp.h ****  * any instance enables all CMPs. See the appropriate MCU reference manual for the clock assignment
 154:../drivers/fsl_cmp.h ****  *
 155:../drivers/fsl_cmp.h ****  * @param base   CMP peripheral base address.
 156:../drivers/fsl_cmp.h ****  * @param config Pointer to the configuration structure.
 157:../drivers/fsl_cmp.h ****  */
 158:../drivers/fsl_cmp.h **** void CMP_Init(CMP_Type *base, const cmp_config_t *config);
 159:../drivers/fsl_cmp.h **** 
 160:../drivers/fsl_cmp.h **** /*!
 161:../drivers/fsl_cmp.h ****  * @brief De-initializes the CMP module.
 162:../drivers/fsl_cmp.h ****  *
 163:../drivers/fsl_cmp.h ****  * This function de-initializes the CMP module. The operations included are as follows.
 164:../drivers/fsl_cmp.h ****  * - Disabling the CMP module.
 165:../drivers/fsl_cmp.h ****  * - Disabling the clock for CMP module.
 166:../drivers/fsl_cmp.h ****  *
 167:../drivers/fsl_cmp.h ****  * This function disables the clock for the CMP.
 168:../drivers/fsl_cmp.h ****  * Note that for some devices, multiple CMP instances share the same clock gate. In this case, befo
 169:../drivers/fsl_cmp.h ****  * clock for the CMP, ensure that all the CMP instances are not used.
 170:../drivers/fsl_cmp.h ****  *
 171:../drivers/fsl_cmp.h ****  * @param base CMP peripheral base address.
 172:../drivers/fsl_cmp.h ****  */
 173:../drivers/fsl_cmp.h **** void CMP_Deinit(CMP_Type *base);
 174:../drivers/fsl_cmp.h **** 
 175:../drivers/fsl_cmp.h **** /*!
 176:../drivers/fsl_cmp.h ****  * @brief Enables/disables the CMP module.
 177:../drivers/fsl_cmp.h ****  *
 178:../drivers/fsl_cmp.h ****  * @param base CMP peripheral base address.
 179:../drivers/fsl_cmp.h ****  * @param enable Enables or disables the module.
 180:../drivers/fsl_cmp.h ****  */
 181:../drivers/fsl_cmp.h **** static inline void CMP_Enable(CMP_Type *base, bool enable)
 182:../drivers/fsl_cmp.h **** {
 183:../drivers/fsl_cmp.h ****     if (enable)
 184:../drivers/fsl_cmp.h ****     {
 185:../drivers/fsl_cmp.h ****         base->CR1 |= CMP_CR1_EN_MASK;
 186:../drivers/fsl_cmp.h ****     }
 187:../drivers/fsl_cmp.h ****     else
 188:../drivers/fsl_cmp.h ****     {
 189:../drivers/fsl_cmp.h ****         base->CR1 &= ~CMP_CR1_EN_MASK;
  90              		.loc 3 189 0
  91 0034 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  92 0036 03F0FE03 		and	r3, r3, #254
  93 003a 4370     		strb	r3, [r0, #1]
  94              	.LVL7:
  95              	.LBE22:
  96              	.LBE21:
  87:../drivers/fsl_cmp.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
  88:../drivers/fsl_cmp.c **** 
  89:../drivers/fsl_cmp.c ****     /* Configure. */
  90:../drivers/fsl_cmp.c ****     CMP_Enable(base, false); /* Disable the CMP module during configuring. */
  91:../drivers/fsl_cmp.c ****     /* CMPx_CR1. */
  92:../drivers/fsl_cmp.c ****     tmp8 = base->CR1 & ~(CMP_CR1_PMODE_MASK | CMP_CR1_INV_MASK | CMP_CR1_COS_MASK | CMP_CR1_OPE_MAS
  97              		.loc 1 92 0
  98 003c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  93:../drivers/fsl_cmp.c ****     if (config->enableHighSpeed)
  99              		.loc 1 93 0
 100 003e 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
  92:../drivers/fsl_cmp.c ****     if (config->enableHighSpeed)
 101              		.loc 1 92 0
 102 0040 03F0E103 		and	r3, r3, #225
 103              	.LVL8:
 104              		.loc 1 93 0
 105 0044 0AB1     		cbz	r2, .L3
  94:../drivers/fsl_cmp.c ****     {
  95:../drivers/fsl_cmp.c ****         tmp8 |= CMP_CR1_PMODE_MASK;
 106              		.loc 1 95 0
 107 0046 43F01003 		orr	r3, r3, #16
 108              	.LVL9:
 109              	.L3:
  96:../drivers/fsl_cmp.c ****     }
  97:../drivers/fsl_cmp.c ****     if (config->enableInvertOutput)
 110              		.loc 1 97 0
 111 004a CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 112 004c 0AB1     		cbz	r2, .L4
  98:../drivers/fsl_cmp.c ****     {
  99:../drivers/fsl_cmp.c ****         tmp8 |= CMP_CR1_INV_MASK;
 113              		.loc 1 99 0
 114 004e 43F00803 		orr	r3, r3, #8
 115              	.LVL10:
 116              	.L4:
 100:../drivers/fsl_cmp.c ****     }
 101:../drivers/fsl_cmp.c ****     if (config->useUnfilteredOutput)
 117              		.loc 1 101 0
 118 0052 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 119 0054 0AB1     		cbz	r2, .L5
 102:../drivers/fsl_cmp.c ****     {
 103:../drivers/fsl_cmp.c ****         tmp8 |= CMP_CR1_COS_MASK;
 120              		.loc 1 103 0
 121 0056 43F00403 		orr	r3, r3, #4
 122              	.LVL11:
 123              	.L5:
 104:../drivers/fsl_cmp.c ****     }
 105:../drivers/fsl_cmp.c ****     if (config->enablePinOut)
 124              		.loc 1 105 0
 125 005a 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 126 005c 0AB1     		cbz	r2, .L6
 106:../drivers/fsl_cmp.c ****     {
 107:../drivers/fsl_cmp.c ****         tmp8 |= CMP_CR1_OPE_MASK;
 127              		.loc 1 107 0
 128 005e 43F00203 		orr	r3, r3, #2
 129              	.LVL12:
 130              	.L6:
 108:../drivers/fsl_cmp.c ****     }
 109:../drivers/fsl_cmp.c **** #if defined(FSL_FEATURE_CMP_HAS_TRIGGER_MODE) && FSL_FEATURE_CMP_HAS_TRIGGER_MODE
 110:../drivers/fsl_cmp.c ****     if (config->enableTriggerMode)
 111:../drivers/fsl_cmp.c ****     {
 112:../drivers/fsl_cmp.c ****         tmp8 |= CMP_CR1_TRIGM_MASK;
 113:../drivers/fsl_cmp.c ****     }
 114:../drivers/fsl_cmp.c ****     else
 115:../drivers/fsl_cmp.c ****     {
 116:../drivers/fsl_cmp.c ****         tmp8 &= ~CMP_CR1_TRIGM_MASK;
 117:../drivers/fsl_cmp.c ****     }
 118:../drivers/fsl_cmp.c **** #endif /* FSL_FEATURE_CMP_HAS_TRIGGER_MODE */
 119:../drivers/fsl_cmp.c ****     base->CR1 = tmp8;
 131              		.loc 1 119 0
 132 0062 4370     		strb	r3, [r0, #1]
 120:../drivers/fsl_cmp.c **** 
 121:../drivers/fsl_cmp.c ****     /* CMPx_CR0. */
 122:../drivers/fsl_cmp.c ****     tmp8 = base->CR0 & ~CMP_CR0_HYSTCTR_MASK;
 133              		.loc 1 122 0
 134 0064 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135              	.LVL13:
 123:../drivers/fsl_cmp.c ****     tmp8 |= CMP_CR0_HYSTCTR(config->hysteresisMode);
 136              		.loc 1 123 0
 137 0066 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 122:../drivers/fsl_cmp.c ****     tmp8 |= CMP_CR0_HYSTCTR(config->hysteresisMode);
 138              		.loc 1 122 0
 139 0068 03F0FC03 		and	r3, r3, #252
 140              	.LVL14:
 141              		.loc 1 123 0
 142 006c 02F00302 		and	r2, r2, #3
 143 0070 1343     		orrs	r3, r3, r2
 144              	.LVL15:
 124:../drivers/fsl_cmp.c ****     base->CR0 = tmp8;
 145              		.loc 1 124 0
 146 0072 0370     		strb	r3, [r0]
 147              	.LVL16:
 148              	.LBB23:
 149              	.LBB24:
 183:../drivers/fsl_cmp.h ****     {
 150              		.loc 3 183 0
 151 0074 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 152              	.LVL17:
 153 0076 43B1     		cbz	r3, .L7
 185:../drivers/fsl_cmp.h ****     }
 154              		.loc 3 185 0
 155 0078 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 156 007a 43F00103 		orr	r3, r3, #1
 157              	.L24:
 158              		.loc 3 189 0
 159 007e 4370     		strb	r3, [r0, #1]
 160              	.LVL18:
 161 0080 30BD     		pop	{r4, r5, pc}
 162              	.LVL19:
 163              	.L9:
 164              	.LBE24:
 165              	.LBE23:
 166              	.LBB26:
 167              	.LBB17:
  65:../drivers/fsl_cmp.c ****     {
 168              		.loc 1 65 0
 169 0082 0023     		movs	r3, #0
 170 0084 C8E7     		b	.L2
 171              	.LVL20:
 172              	.L10:
 173 0086 0123     		movs	r3, #1
 174 0088 C6E7     		b	.L2
 175              	.LVL21:
 176              	.L7:
 177              	.LBE17:
 178              	.LBE26:
 179              	.LBB27:
 180              	.LBB25:
 181              		.loc 3 189 0
 182 008a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 183 008c 03F0FE03 		and	r3, r3, #254
 184 0090 F5E7     		b	.L24
 185              	.L26:
 186 0092 00BF     		.align	2
 187              	.L25:
 188 0094 00300740 		.word	1074212864
 189 0098 00000000 		.word	.LANCHOR0
 190              	.LBE25:
 191              	.LBE27:
 192              		.cfi_endproc
 193              	.LFE151:
 195              		.section	.text.CMP_Deinit,"ax",%progbits
 196              		.align	1
 197              		.global	CMP_Deinit
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	CMP_Deinit:
 204              	.LFB152:
 125:../drivers/fsl_cmp.c **** 
 126:../drivers/fsl_cmp.c ****     CMP_Enable(base, config->enableCmp); /* Enable the CMP module after configured or not. */
 127:../drivers/fsl_cmp.c **** }
 128:../drivers/fsl_cmp.c **** 
 129:../drivers/fsl_cmp.c **** void CMP_Deinit(CMP_Type *base)
 130:../drivers/fsl_cmp.c **** {
 205              		.loc 1 130 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210              	.LVL22:
 211              	.LBB34:
 212              	.LBB35:
 213              		.loc 3 189 0
 214 0000 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 215 0002 03F0FE03 		and	r3, r3, #254
 216 0006 4370     		strb	r3, [r0, #1]
 217              	.LVL23:
 218              	.LBE35:
 219              	.LBE34:
 220              	.LBB36:
 221              	.LBB37:
  67:../drivers/fsl_cmp.c ****         {
 222              		.loc 1 67 0
 223 0008 0F4B     		ldr	r3, .L32
 224 000a 9842     		cmp	r0, r3
 225 000c 18D0     		beq	.L29
 226              	.LVL24:
 227 000e 0833     		adds	r3, r3, #8
 228 0010 9842     		cmp	r0, r3
 229 0012 17D0     		beq	.L30
 230              	.LVL25:
  65:../drivers/fsl_cmp.c ****     {
 231              		.loc 1 65 0
 232 0014 0833     		adds	r3, r3, #8
 233 0016 9842     		cmp	r0, r3
 234 0018 0CBF     		ite	eq
 235 001a 0220     		moveq	r0, #2
 236 001c 0320     		movne	r0, #3
 237              	.LVL26:
 238              	.L28:
 239              	.LBE37:
 240              	.LBE36:
 131:../drivers/fsl_cmp.c ****     /* Disable the CMP module. */
 132:../drivers/fsl_cmp.c ****     CMP_Enable(base, false);
 133:../drivers/fsl_cmp.c **** 
 134:../drivers/fsl_cmp.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 135:../drivers/fsl_cmp.c ****     /* Disable the clock. */
 136:../drivers/fsl_cmp.c ****     CLOCK_DisableClock(s_cmpClocks[CMP_GetInstance(base)]);
 241              		.loc 1 136 0
 242 001e 0B4B     		ldr	r3, .L32+4
 243 0020 53F82020 		ldr	r2, [r3, r0, lsl #2]
 244              	.LVL27:
 245              	.LBB39:
 246              	.LBB40:
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 247              		.loc 2 705 0
 248 0024 130C     		lsrs	r3, r2, #16
 249 0026 03F18043 		add	r3, r3, #1073741824
 250 002a 03F58E23 		add	r3, r3, #290816
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 251              		.loc 2 706 0
 252 002e 92B2     		uxth	r2, r2
 253              	.LVL28:
 254 0030 1968     		ldr	r1, [r3]
 255 0032 0120     		movs	r0, #1
 256              	.LVL29:
 257 0034 00FA02F2 		lsl	r2, r0, r2
 258 0038 21EA0202 		bic	r2, r1, r2
 259 003c 1A60     		str	r2, [r3]
 260 003e 7047     		bx	lr
 261              	.LVL30:
 262              	.L29:
 263              	.LBE40:
 264              	.LBE39:
 265              	.LBB41:
 266              	.LBB38:
  65:../drivers/fsl_cmp.c ****     {
 267              		.loc 1 65 0
 268 0040 0020     		movs	r0, #0
 269              	.LVL31:
 270 0042 ECE7     		b	.L28
 271              	.LVL32:
 272              	.L30:
 273 0044 0120     		movs	r0, #1
 274              	.LVL33:
 275 0046 EAE7     		b	.L28
 276              	.L33:
 277              		.align	2
 278              	.L32:
 279 0048 00300740 		.word	1074212864
 280 004c 00000000 		.word	.LANCHOR0
 281              	.LBE38:
 282              	.LBE41:
 283              		.cfi_endproc
 284              	.LFE152:
 286              		.section	.text.CMP_GetDefaultConfig,"ax",%progbits
 287              		.align	1
 288              		.global	CMP_GetDefaultConfig
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	CMP_GetDefaultConfig:
 295              	.LFB153:
 137:../drivers/fsl_cmp.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 138:../drivers/fsl_cmp.c **** }
 139:../drivers/fsl_cmp.c **** 
 140:../drivers/fsl_cmp.c **** void CMP_GetDefaultConfig(cmp_config_t *config)
 141:../drivers/fsl_cmp.c **** {
 296              		.loc 1 141 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.LVL34:
 142:../drivers/fsl_cmp.c ****     assert(NULL != config);
 143:../drivers/fsl_cmp.c **** 
 144:../drivers/fsl_cmp.c ****     config->enableCmp = true; /* Enable the CMP module after initialization. */
 302              		.loc 1 144 0
 303 0000 0123     		movs	r3, #1
 304 0002 0370     		strb	r3, [r0]
 145:../drivers/fsl_cmp.c ****     config->hysteresisMode = kCMP_HysteresisLevel0;
 305              		.loc 1 145 0
 306 0004 0023     		movs	r3, #0
 307 0006 4370     		strb	r3, [r0, #1]
 146:../drivers/fsl_cmp.c ****     config->enableHighSpeed = false;
 308              		.loc 1 146 0
 309 0008 8370     		strb	r3, [r0, #2]
 147:../drivers/fsl_cmp.c ****     config->enableInvertOutput = false;
 310              		.loc 1 147 0
 311 000a C370     		strb	r3, [r0, #3]
 148:../drivers/fsl_cmp.c ****     config->useUnfilteredOutput = false;
 312              		.loc 1 148 0
 313 000c 0371     		strb	r3, [r0, #4]
 149:../drivers/fsl_cmp.c ****     config->enablePinOut = false;
 314              		.loc 1 149 0
 315 000e 4371     		strb	r3, [r0, #5]
 316 0010 7047     		bx	lr
 317              		.cfi_endproc
 318              	.LFE153:
 320              		.section	.text.CMP_SetInputChannels,"ax",%progbits
 321              		.align	1
 322              		.global	CMP_SetInputChannels
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu fpv4-sp-d16
 328              	CMP_SetInputChannels:
 329              	.LFB154:
 150:../drivers/fsl_cmp.c **** #if defined(FSL_FEATURE_CMP_HAS_TRIGGER_MODE) && FSL_FEATURE_CMP_HAS_TRIGGER_MODE
 151:../drivers/fsl_cmp.c ****     config->enableTriggerMode = false;
 152:../drivers/fsl_cmp.c **** #endif /* FSL_FEATURE_CMP_HAS_TRIGGER_MODE */
 153:../drivers/fsl_cmp.c **** }
 154:../drivers/fsl_cmp.c **** 
 155:../drivers/fsl_cmp.c **** void CMP_SetInputChannels(CMP_Type *base, uint8_t positiveChannel, uint8_t negativeChannel)
 156:../drivers/fsl_cmp.c **** {
 330              		.loc 1 156 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 335              	.LVL35:
 157:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->MUXCR;
 336              		.loc 1 157 0
 337 0000 4379     		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 338              	.LVL36:
 158:../drivers/fsl_cmp.c **** 
 159:../drivers/fsl_cmp.c ****     tmp8 &= ~(CMP_MUXCR_PSEL_MASK | CMP_MUXCR_MSEL_MASK);
 160:../drivers/fsl_cmp.c ****     tmp8 |= CMP_MUXCR_PSEL(positiveChannel) | CMP_MUXCR_MSEL(negativeChannel);
 339              		.loc 1 160 0
 340 0002 C900     		lsls	r1, r1, #3
 341              	.LVL37:
 342 0004 01F03801 		and	r1, r1, #56
 343 0008 02F00702 		and	r2, r2, #7
 344              	.LVL38:
 159:../drivers/fsl_cmp.c ****     tmp8 |= CMP_MUXCR_PSEL(positiveChannel) | CMP_MUXCR_MSEL(negativeChannel);
 345              		.loc 1 159 0
 346 000c 03F0C003 		and	r3, r3, #192
 347              	.LVL39:
 348              		.loc 1 160 0
 349 0010 1143     		orrs	r1, r1, r2
 350 0012 0B43     		orrs	r3, r3, r1
 351              	.LVL40:
 161:../drivers/fsl_cmp.c ****     base->MUXCR = tmp8;
 352              		.loc 1 161 0
 353 0014 4371     		strb	r3, [r0, #5]
 354 0016 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE154:
 358              		.section	.text.CMP_EnableDMA,"ax",%progbits
 359              		.align	1
 360              		.global	CMP_EnableDMA
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu fpv4-sp-d16
 366              	CMP_EnableDMA:
 367              	.LFB155:
 162:../drivers/fsl_cmp.c **** }
 163:../drivers/fsl_cmp.c **** 
 164:../drivers/fsl_cmp.c **** #if defined(FSL_FEATURE_CMP_HAS_DMA) && FSL_FEATURE_CMP_HAS_DMA
 165:../drivers/fsl_cmp.c **** void CMP_EnableDMA(CMP_Type *base, bool enable)
 166:../drivers/fsl_cmp.c **** {
 368              		.loc 1 166 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373              	.LVL41:
 167:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 374              		.loc 1 167 0
 375 0000 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 376 0002 DBB2     		uxtb	r3, r3
 377              	.LVL42:
 168:../drivers/fsl_cmp.c **** 
 169:../drivers/fsl_cmp.c ****     if (enable)
 378              		.loc 1 169 0
 379 0004 29B1     		cbz	r1, .L37
 167:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 380              		.loc 1 167 0
 381 0006 03F0F903 		and	r3, r3, #249
 382              	.LVL43:
 170:../drivers/fsl_cmp.c ****     {
 171:../drivers/fsl_cmp.c ****         tmp8 |= CMP_SCR_DMAEN_MASK;
 383              		.loc 1 171 0
 384 000a 43F04003 		orr	r3, r3, #64
 385              	.LVL44:
 386              	.L38:
 172:../drivers/fsl_cmp.c ****     }
 173:../drivers/fsl_cmp.c ****     else
 174:../drivers/fsl_cmp.c ****     {
 175:../drivers/fsl_cmp.c ****         tmp8 &= ~CMP_SCR_DMAEN_MASK;
 176:../drivers/fsl_cmp.c ****     }
 177:../drivers/fsl_cmp.c ****     base->SCR = tmp8;
 387              		.loc 1 177 0
 388 000e C370     		strb	r3, [r0, #3]
 389 0010 7047     		bx	lr
 390              	.LVL45:
 391              	.L37:
 175:../drivers/fsl_cmp.c ****     }
 392              		.loc 1 175 0
 393 0012 03F0B903 		and	r3, r3, #185
 394              	.LVL46:
 395 0016 FAE7     		b	.L38
 396              		.cfi_endproc
 397              	.LFE155:
 399              		.section	.text.CMP_SetFilterConfig,"ax",%progbits
 400              		.align	1
 401              		.global	CMP_SetFilterConfig
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu fpv4-sp-d16
 407              	CMP_SetFilterConfig:
 408              	.LFB156:
 178:../drivers/fsl_cmp.c **** }
 179:../drivers/fsl_cmp.c **** #endif /* FSL_FEATURE_CMP_HAS_DMA */
 180:../drivers/fsl_cmp.c **** 
 181:../drivers/fsl_cmp.c **** void CMP_SetFilterConfig(CMP_Type *base, const cmp_filter_config_t *config)
 182:../drivers/fsl_cmp.c **** {
 409              		.loc 1 182 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414              	.LVL47:
 183:../drivers/fsl_cmp.c ****     assert(NULL != config);
 184:../drivers/fsl_cmp.c **** 
 185:../drivers/fsl_cmp.c ****     uint8_t tmp8;
 186:../drivers/fsl_cmp.c **** 
 187:../drivers/fsl_cmp.c **** #if defined(FSL_FEATURE_CMP_HAS_EXTERNAL_SAMPLE_SUPPORT) && FSL_FEATURE_CMP_HAS_EXTERNAL_SAMPLE_SUP
 188:../drivers/fsl_cmp.c ****     /* Choose the clock source for sampling. */
 189:../drivers/fsl_cmp.c ****     if (config->enableSample)
 415              		.loc 1 189 0
 416 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 417 0002 7BB1     		cbz	r3, .L40
 190:../drivers/fsl_cmp.c ****     {
 191:../drivers/fsl_cmp.c ****         base->CR1 |= CMP_CR1_SE_MASK; /* Choose the external SAMPLE clock. */
 418              		.loc 1 191 0
 419 0004 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 420 0006 43F08003 		orr	r3, r3, #128
 421              	.L42:
 192:../drivers/fsl_cmp.c ****     }
 193:../drivers/fsl_cmp.c ****     else
 194:../drivers/fsl_cmp.c ****     {
 195:../drivers/fsl_cmp.c ****         base->CR1 &= ~CMP_CR1_SE_MASK; /* Choose the internal divided bus clock. */
 422              		.loc 1 195 0
 423 000a 4370     		strb	r3, [r0, #1]
 196:../drivers/fsl_cmp.c ****     }
 197:../drivers/fsl_cmp.c **** #endif /* FSL_FEATURE_CMP_HAS_EXTERNAL_SAMPLE_SUPPORT */
 198:../drivers/fsl_cmp.c ****     /* Set the filter count. */
 199:../drivers/fsl_cmp.c ****     tmp8 = base->CR0 & ~CMP_CR0_FILTER_CNT_MASK;
 200:../drivers/fsl_cmp.c ****     tmp8 |= CMP_CR0_FILTER_CNT(config->filterCount);
 424              		.loc 1 200 0
 425 000c 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 199:../drivers/fsl_cmp.c ****     tmp8 |= CMP_CR0_FILTER_CNT(config->filterCount);
 426              		.loc 1 199 0
 427 000e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 428              		.loc 1 200 0
 429 0010 1201     		lsls	r2, r2, #4
 199:../drivers/fsl_cmp.c ****     tmp8 |= CMP_CR0_FILTER_CNT(config->filterCount);
 430              		.loc 1 199 0
 431 0012 03F08F03 		and	r3, r3, #143
 432              	.LVL48:
 433              		.loc 1 200 0
 434 0016 02F07002 		and	r2, r2, #112
 435 001a 1343     		orrs	r3, r3, r2
 436              	.LVL49:
 201:../drivers/fsl_cmp.c ****     base->CR0 = tmp8;
 437              		.loc 1 201 0
 438 001c 0370     		strb	r3, [r0]
 202:../drivers/fsl_cmp.c ****     /* Set the filter period. It is used as the divider to bus clock. */
 203:../drivers/fsl_cmp.c ****     base->FPR = CMP_FPR_FILT_PER(config->filterPeriod);
 439              		.loc 1 203 0
 440 001e 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 441              	.LVL50:
 442 0020 8370     		strb	r3, [r0, #2]
 443              	.LVL51:
 444 0022 7047     		bx	lr
 445              	.L40:
 195:../drivers/fsl_cmp.c ****     }
 446              		.loc 1 195 0
 447 0024 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 448 0026 03F07F03 		and	r3, r3, #127
 449 002a EEE7     		b	.L42
 450              		.cfi_endproc
 451              	.LFE156:
 453              		.section	.text.CMP_SetDACConfig,"ax",%progbits
 454              		.align	1
 455              		.global	CMP_SetDACConfig
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu fpv4-sp-d16
 461              	CMP_SetDACConfig:
 462              	.LFB157:
 204:../drivers/fsl_cmp.c **** }
 205:../drivers/fsl_cmp.c **** 
 206:../drivers/fsl_cmp.c **** void CMP_SetDACConfig(CMP_Type *base, const cmp_dac_config_t *config)
 207:../drivers/fsl_cmp.c **** {
 463              		.loc 1 207 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL52:
 208:../drivers/fsl_cmp.c ****     uint8_t tmp8 = 0U;
 209:../drivers/fsl_cmp.c **** 
 210:../drivers/fsl_cmp.c ****     if (NULL == config)
 469              		.loc 1 210 0
 470 0000 09B9     		cbnz	r1, .L44
 211:../drivers/fsl_cmp.c ****     {
 212:../drivers/fsl_cmp.c ****         /* Passing "NULL" as input parameter means no available configuration. So the DAC feature i
 213:../drivers/fsl_cmp.c ****         base->DACCR = 0U;
 471              		.loc 1 213 0
 472 0002 0171     		strb	r1, [r0, #4]
 214:../drivers/fsl_cmp.c ****         return;
 473              		.loc 1 214 0
 474 0004 7047     		bx	lr
 475              	.L44:
 476              	.LVL53:
 215:../drivers/fsl_cmp.c ****     }
 216:../drivers/fsl_cmp.c ****     /* CMPx_DACCR. */
 217:../drivers/fsl_cmp.c ****     tmp8 |= CMP_DACCR_DACEN_MASK; /* Enable the internal DAC. */
 218:../drivers/fsl_cmp.c ****     if (kCMP_VrefSourceVin2 == config->referenceVoltageSource)
 477              		.loc 1 218 0
 478 0006 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 219:../drivers/fsl_cmp.c ****     {
 220:../drivers/fsl_cmp.c ****         tmp8 |= CMP_DACCR_VRSEL_MASK;
 221:../drivers/fsl_cmp.c ****     }
 222:../drivers/fsl_cmp.c ****     tmp8 |= CMP_DACCR_VOSEL(config->DACValue);
 479              		.loc 1 222 0
 480 0008 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 218:../drivers/fsl_cmp.c ****     {
 481              		.loc 1 218 0
 482 000a 012B     		cmp	r3, #1
 220:../drivers/fsl_cmp.c ****     }
 483              		.loc 1 220 0
 484 000c 14BF     		ite	ne
 485 000e 8023     		movne	r3, #128
 486 0010 C023     		moveq	r3, #192
 487              	.LVL54:
 488              		.loc 1 222 0
 489 0012 02F03F02 		and	r2, r2, #63
 490 0016 1343     		orrs	r3, r3, r2
 491              	.LVL55:
 223:../drivers/fsl_cmp.c **** 
 224:../drivers/fsl_cmp.c ****     base->DACCR = tmp8;
 492              		.loc 1 224 0
 493 0018 0371     		strb	r3, [r0, #4]
 494 001a 7047     		bx	lr
 495              		.cfi_endproc
 496              	.LFE157:
 498              		.section	.text.CMP_EnableInterrupts,"ax",%progbits
 499              		.align	1
 500              		.global	CMP_EnableInterrupts
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu fpv4-sp-d16
 506              	CMP_EnableInterrupts:
 507              	.LFB158:
 225:../drivers/fsl_cmp.c **** }
 226:../drivers/fsl_cmp.c **** 
 227:../drivers/fsl_cmp.c **** void CMP_EnableInterrupts(CMP_Type *base, uint32_t mask)
 228:../drivers/fsl_cmp.c **** {
 508              		.loc 1 228 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513              	.LVL56:
 229:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 514              		.loc 1 229 0
 515 0000 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 230:../drivers/fsl_cmp.c **** 
 231:../drivers/fsl_cmp.c ****     if (0U != (kCMP_OutputRisingInterruptEnable & mask))
 516              		.loc 1 231 0
 517 0002 CA06     		lsls	r2, r1, #27
 229:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 518              		.loc 1 229 0
 519 0004 03F0F903 		and	r3, r3, #249
 520              	.LVL57:
 232:../drivers/fsl_cmp.c ****     {
 233:../drivers/fsl_cmp.c ****         tmp8 |= CMP_SCR_IER_MASK;
 521              		.loc 1 233 0
 522 0008 48BF     		it	mi
 523 000a 43F01003 		orrmi	r3, r3, #16
 524              	.LVL58:
 234:../drivers/fsl_cmp.c ****     }
 235:../drivers/fsl_cmp.c ****     if (0U != (kCMP_OutputFallingInterruptEnable & mask))
 525              		.loc 1 235 0
 526 000e 0A07     		lsls	r2, r1, #28
 236:../drivers/fsl_cmp.c ****     {
 237:../drivers/fsl_cmp.c ****         tmp8 |= CMP_SCR_IEF_MASK;
 527              		.loc 1 237 0
 528 0010 48BF     		it	mi
 529 0012 43F00803 		orrmi	r3, r3, #8
 530              	.LVL59:
 238:../drivers/fsl_cmp.c ****     }
 239:../drivers/fsl_cmp.c ****     base->SCR = tmp8;
 531              		.loc 1 239 0
 532 0016 C370     		strb	r3, [r0, #3]
 533 0018 7047     		bx	lr
 534              		.cfi_endproc
 535              	.LFE158:
 537              		.section	.text.CMP_DisableInterrupts,"ax",%progbits
 538              		.align	1
 539              		.global	CMP_DisableInterrupts
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu fpv4-sp-d16
 545              	CMP_DisableInterrupts:
 546              	.LFB159:
 240:../drivers/fsl_cmp.c **** }
 241:../drivers/fsl_cmp.c **** 
 242:../drivers/fsl_cmp.c **** void CMP_DisableInterrupts(CMP_Type *base, uint32_t mask)
 243:../drivers/fsl_cmp.c **** {
 547              		.loc 1 243 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 552              	.LVL60:
 244:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 553              		.loc 1 244 0
 554 0000 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 245:../drivers/fsl_cmp.c **** 
 246:../drivers/fsl_cmp.c ****     if (0U != (kCMP_OutputRisingInterruptEnable & mask))
 555              		.loc 1 246 0
 556 0002 CA06     		lsls	r2, r1, #27
 244:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 557              		.loc 1 244 0
 558 0004 DBB2     		uxtb	r3, r3
 559              	.LVL61:
 247:../drivers/fsl_cmp.c ****     {
 248:../drivers/fsl_cmp.c ****         tmp8 &= ~CMP_SCR_IER_MASK;
 560              		.loc 1 248 0
 561 0006 4CBF     		ite	mi
 562 0008 03F0E903 		andmi	r3, r3, #233
 563              	.LVL62:
 244:../drivers/fsl_cmp.c **** 
 564              		.loc 1 244 0
 565 000c 03F0F903 		andpl	r3, r3, #249
 566              	.LVL63:
 249:../drivers/fsl_cmp.c ****     }
 250:../drivers/fsl_cmp.c ****     if (0U != (kCMP_OutputFallingInterruptEnable & mask))
 567              		.loc 1 250 0
 568 0010 0A07     		lsls	r2, r1, #28
 251:../drivers/fsl_cmp.c ****     {
 252:../drivers/fsl_cmp.c ****         tmp8 &= ~CMP_SCR_IEF_MASK;
 569              		.loc 1 252 0
 570 0012 48BF     		it	mi
 571 0014 03F0F703 		andmi	r3, r3, #247
 572              	.LVL64:
 253:../drivers/fsl_cmp.c ****     }
 254:../drivers/fsl_cmp.c ****     base->SCR = tmp8;
 573              		.loc 1 254 0
 574 0018 C370     		strb	r3, [r0, #3]
 575 001a 7047     		bx	lr
 576              		.cfi_endproc
 577              	.LFE159:
 579              		.section	.text.CMP_GetStatusFlags,"ax",%progbits
 580              		.align	1
 581              		.global	CMP_GetStatusFlags
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu fpv4-sp-d16
 587              	CMP_GetStatusFlags:
 588              	.LFB160:
 255:../drivers/fsl_cmp.c **** }
 256:../drivers/fsl_cmp.c **** 
 257:../drivers/fsl_cmp.c **** uint32_t CMP_GetStatusFlags(CMP_Type *base)
 258:../drivers/fsl_cmp.c **** {
 589              		.loc 1 258 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 594              	.LVL65:
 259:../drivers/fsl_cmp.c ****     uint32_t ret32 = 0U;
 260:../drivers/fsl_cmp.c **** 
 261:../drivers/fsl_cmp.c ****     if (0U != (CMP_SCR_CFR_MASK & base->SCR))
 595              		.loc 1 261 0
 596 0000 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 262:../drivers/fsl_cmp.c ****     {
 263:../drivers/fsl_cmp.c ****         ret32 |= kCMP_OutputRisingEventFlag;
 264:../drivers/fsl_cmp.c ****     }
 265:../drivers/fsl_cmp.c ****     if (0U != (CMP_SCR_CFF_MASK & base->SCR))
 597              		.loc 1 265 0
 598 0002 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 599 0004 9107     		lsls	r1, r2, #30
 266:../drivers/fsl_cmp.c ****     {
 267:../drivers/fsl_cmp.c ****         ret32 |= kCMP_OutputFallingEventFlag;
 268:../drivers/fsl_cmp.c ****     }
 269:../drivers/fsl_cmp.c ****     if (0U != (CMP_SCR_COUT_MASK & base->SCR))
 600              		.loc 1 269 0
 601 0006 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 263:../drivers/fsl_cmp.c ****     }
 602              		.loc 1 263 0
 603 0008 03F00403 		and	r3, r3, #4
 604              	.LVL66:
 267:../drivers/fsl_cmp.c ****     }
 605              		.loc 1 267 0
 606 000c 48BF     		it	mi
 607 000e 43F00203 		orrmi	r3, r3, #2
 608              	.LVL67:
 609              		.loc 1 269 0
 610 0012 D207     		lsls	r2, r2, #31
 270:../drivers/fsl_cmp.c ****     {
 271:../drivers/fsl_cmp.c ****         ret32 |= kCMP_OutputAssertEventFlag;
 611              		.loc 1 271 0
 612 0014 48BF     		it	mi
 613 0016 43F00103 		orrmi	r3, r3, #1
 614              	.LVL68:
 272:../drivers/fsl_cmp.c ****     }
 273:../drivers/fsl_cmp.c ****     return ret32;
 274:../drivers/fsl_cmp.c **** }
 615              		.loc 1 274 0
 616 001a 1846     		mov	r0, r3
 617              	.LVL69:
 618 001c 7047     		bx	lr
 619              		.cfi_endproc
 620              	.LFE160:
 622              		.section	.text.CMP_ClearStatusFlags,"ax",%progbits
 623              		.align	1
 624              		.global	CMP_ClearStatusFlags
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 628              		.fpu fpv4-sp-d16
 630              	CMP_ClearStatusFlags:
 631              	.LFB161:
 275:../drivers/fsl_cmp.c **** 
 276:../drivers/fsl_cmp.c **** void CMP_ClearStatusFlags(CMP_Type *base, uint32_t mask)
 277:../drivers/fsl_cmp.c **** {
 632              		.loc 1 277 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LVL70:
 278:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 638              		.loc 1 278 0
 639 0000 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 279:../drivers/fsl_cmp.c **** 
 280:../drivers/fsl_cmp.c ****     if (0U != (kCMP_OutputRisingEventFlag & mask))
 640              		.loc 1 280 0
 641 0002 4A07     		lsls	r2, r1, #29
 278:../drivers/fsl_cmp.c ****     uint8_t tmp8 = base->SCR & ~(CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK); /* To avoid change the w1c b
 642              		.loc 1 278 0
 643 0004 03F0F903 		and	r3, r3, #249
 644              	.LVL71:
 281:../drivers/fsl_cmp.c ****     {
 282:../drivers/fsl_cmp.c ****         tmp8 |= CMP_SCR_CFR_MASK;
 645              		.loc 1 282 0
 646 0008 48BF     		it	mi
 647 000a 43F00403 		orrmi	r3, r3, #4
 648              	.LVL72:
 283:../drivers/fsl_cmp.c ****     }
 284:../drivers/fsl_cmp.c ****     if (0U != (kCMP_OutputFallingEventFlag & mask))
 649              		.loc 1 284 0
 650 000e 8A07     		lsls	r2, r1, #30
 285:../drivers/fsl_cmp.c ****     {
 286:../drivers/fsl_cmp.c ****         tmp8 |= CMP_SCR_CFF_MASK;
 651              		.loc 1 286 0
 652 0010 48BF     		it	mi
 653 0012 43F00203 		orrmi	r3, r3, #2
 654              	.LVL73:
 287:../drivers/fsl_cmp.c ****     }
 288:../drivers/fsl_cmp.c ****     base->SCR = tmp8;
 655              		.loc 1 288 0
 656 0016 C370     		strb	r3, [r0, #3]
 657 0018 7047     		bx	lr
 658              		.cfi_endproc
 659              	.LFE161:
 661              		.section	.rodata.s_cmpClocks,"a",%progbits
 662              		.align	2
 663              		.set	.LANCHOR0,. + 0
 666              	s_cmpClocks:
 667 0000 13003410 		.word	271843347
 668 0004 13003410 		.word	271843347
 669 0008 13003410 		.word	271843347
 670              		.text
 671              	.Letext0:
 672              		.file 4 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 673              		.file 5 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 674              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 675              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 676              		.file 8 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 677              		.file 9 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 678              		.file 10 "../CMSIS/core_cm4.h"
 679              		.file 11 "../CMSIS/system_MK64F12.h"
 680              		.file 12 "../CMSIS/MK64F12.h"
