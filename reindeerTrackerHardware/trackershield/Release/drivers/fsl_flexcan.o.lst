   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsl_flexcan.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLEXCAN_EnterFreezeMode,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	FLEXCAN_EnterFreezeMode:
  25              	.LFB158:
  26              		.file 1 "../drivers/fsl_flexcan.c"
   1:../drivers/fsl_flexcan.c **** /*
   2:../drivers/fsl_flexcan.c ****  * The Clear BSD License
   3:../drivers/fsl_flexcan.c ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_flexcan.c ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_flexcan.c ****  * All rights reserved.
   6:../drivers/fsl_flexcan.c ****  *
   7:../drivers/fsl_flexcan.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_flexcan.c ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_flexcan.c ****  * that the following conditions are met:
  10:../drivers/fsl_flexcan.c ****  *
  11:../drivers/fsl_flexcan.c ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_flexcan.c ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_flexcan.c ****  *
  14:../drivers/fsl_flexcan.c ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_flexcan.c ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_flexcan.c ****  *   other materials provided with the distribution.
  17:../drivers/fsl_flexcan.c ****  *
  18:../drivers/fsl_flexcan.c ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_flexcan.c ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_flexcan.c ****  *   software without specific prior written permission.
  21:../drivers/fsl_flexcan.c ****  *
  22:../drivers/fsl_flexcan.c ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_flexcan.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_flexcan.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_flexcan.c ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_flexcan.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_flexcan.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_flexcan.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_flexcan.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_flexcan.c ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_flexcan.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_flexcan.c ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_flexcan.c ****  */
  34:../drivers/fsl_flexcan.c **** 
  35:../drivers/fsl_flexcan.c **** #include "fsl_flexcan.h"
  36:../drivers/fsl_flexcan.c **** 
  37:../drivers/fsl_flexcan.c **** /*******************************************************************************
  38:../drivers/fsl_flexcan.c ****  * Definitons
  39:../drivers/fsl_flexcan.c ****  ******************************************************************************/
  40:../drivers/fsl_flexcan.c **** 
  41:../drivers/fsl_flexcan.c **** #define FLEXCAN_TIME_QUANTA_NUM (10)
  42:../drivers/fsl_flexcan.c **** 
  43:../drivers/fsl_flexcan.c **** /*! @brief FlexCAN Internal State. */
  44:../drivers/fsl_flexcan.c **** enum _flexcan_state
  45:../drivers/fsl_flexcan.c **** {
  46:../drivers/fsl_flexcan.c ****     kFLEXCAN_StateIdle = 0x0,     /*!< MB/RxFIFO idle.*/
  47:../drivers/fsl_flexcan.c ****     kFLEXCAN_StateRxData = 0x1,   /*!< MB receiving.*/
  48:../drivers/fsl_flexcan.c ****     kFLEXCAN_StateRxRemote = 0x2, /*!< MB receiving remote reply.*/
  49:../drivers/fsl_flexcan.c ****     kFLEXCAN_StateTxData = 0x3,   /*!< MB transmitting.*/
  50:../drivers/fsl_flexcan.c ****     kFLEXCAN_StateTxRemote = 0x4, /*!< MB transmitting remote request.*/
  51:../drivers/fsl_flexcan.c ****     kFLEXCAN_StateRxFifo = 0x5,   /*!< RxFIFO receiving.*/
  52:../drivers/fsl_flexcan.c **** };
  53:../drivers/fsl_flexcan.c **** 
  54:../drivers/fsl_flexcan.c **** /*! @brief FlexCAN message buffer CODE for Rx buffers. */
  55:../drivers/fsl_flexcan.c **** enum _flexcan_mb_code_rx
  56:../drivers/fsl_flexcan.c **** {
  57:../drivers/fsl_flexcan.c ****     kFLEXCAN_RxMbInactive = 0x0, /*!< MB is not active.*/
  58:../drivers/fsl_flexcan.c ****     kFLEXCAN_RxMbFull = 0x2,     /*!< MB is full.*/
  59:../drivers/fsl_flexcan.c ****     kFLEXCAN_RxMbEmpty = 0x4,    /*!< MB is active and empty.*/
  60:../drivers/fsl_flexcan.c ****     kFLEXCAN_RxMbOverrun = 0x6,  /*!< MB is overwritten into a full buffer.*/
  61:../drivers/fsl_flexcan.c ****     kFLEXCAN_RxMbBusy = 0x8,     /*!< FlexCAN is updating the contents of the MB.*/
  62:../drivers/fsl_flexcan.c ****                                  /*!  The CPU must not access the MB.*/
  63:../drivers/fsl_flexcan.c ****     kFLEXCAN_RxMbRanswer = 0xA,  /*!< A frame was configured to recognize a Remote Request Frame */
  64:../drivers/fsl_flexcan.c ****                                  /*!  and transmit a Response Frame in return.*/
  65:../drivers/fsl_flexcan.c ****     kFLEXCAN_RxMbNotUsed = 0xF,  /*!< Not used.*/
  66:../drivers/fsl_flexcan.c **** };
  67:../drivers/fsl_flexcan.c **** 
  68:../drivers/fsl_flexcan.c **** /*! @brief FlexCAN message buffer CODE FOR Tx buffers. */
  69:../drivers/fsl_flexcan.c **** enum _flexcan_mb_code_tx
  70:../drivers/fsl_flexcan.c **** {
  71:../drivers/fsl_flexcan.c ****     kFLEXCAN_TxMbInactive = 0x8,     /*!< MB is not active.*/
  72:../drivers/fsl_flexcan.c ****     kFLEXCAN_TxMbAbort = 0x9,        /*!< MB is aborted.*/
  73:../drivers/fsl_flexcan.c ****     kFLEXCAN_TxMbDataOrRemote = 0xC, /*!< MB is a TX Data Frame(when MB RTR = 0) or */
  74:../drivers/fsl_flexcan.c ****                                      /*!< MB is a TX Remote Request Frame (when MB RTR = 1).*/
  75:../drivers/fsl_flexcan.c ****     kFLEXCAN_TxMbTanswer = 0xE,      /*!< MB is a TX Response Request Frame from */
  76:../drivers/fsl_flexcan.c ****                                      /*!  an incoming Remote Request Frame.*/
  77:../drivers/fsl_flexcan.c ****     kFLEXCAN_TxMbNotUsed = 0xF,      /*!< Not used.*/
  78:../drivers/fsl_flexcan.c **** };
  79:../drivers/fsl_flexcan.c **** 
  80:../drivers/fsl_flexcan.c **** /* Typedef for interrupt handler. */
  81:../drivers/fsl_flexcan.c **** typedef void (*flexcan_isr_t)(CAN_Type *base, flexcan_handle_t *handle);
  82:../drivers/fsl_flexcan.c **** 
  83:../drivers/fsl_flexcan.c **** /*******************************************************************************
  84:../drivers/fsl_flexcan.c ****  * Prototypes
  85:../drivers/fsl_flexcan.c ****  ******************************************************************************/
  86:../drivers/fsl_flexcan.c **** 
  87:../drivers/fsl_flexcan.c **** /*!
  88:../drivers/fsl_flexcan.c ****  * @brief Get the FlexCAN instance from peripheral base address.
  89:../drivers/fsl_flexcan.c ****  *
  90:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
  91:../drivers/fsl_flexcan.c ****  * @return FlexCAN instance.
  92:../drivers/fsl_flexcan.c ****  */
  93:../drivers/fsl_flexcan.c **** uint32_t FLEXCAN_GetInstance(CAN_Type *base);
  94:../drivers/fsl_flexcan.c **** 
  95:../drivers/fsl_flexcan.c **** /*!
  96:../drivers/fsl_flexcan.c ****  * @brief Enter FlexCAN Freeze Mode.
  97:../drivers/fsl_flexcan.c ****  *
  98:../drivers/fsl_flexcan.c ****  * This function makes the FlexCAN work under Freeze Mode.
  99:../drivers/fsl_flexcan.c ****  *
 100:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 101:../drivers/fsl_flexcan.c ****  */
 102:../drivers/fsl_flexcan.c **** static void FLEXCAN_EnterFreezeMode(CAN_Type *base);
 103:../drivers/fsl_flexcan.c **** 
 104:../drivers/fsl_flexcan.c **** /*!
 105:../drivers/fsl_flexcan.c ****  * @brief Exit FlexCAN Freeze Mode.
 106:../drivers/fsl_flexcan.c ****  *
 107:../drivers/fsl_flexcan.c ****  * This function makes the FlexCAN leave Freeze Mode.
 108:../drivers/fsl_flexcan.c ****  *
 109:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 110:../drivers/fsl_flexcan.c ****  */
 111:../drivers/fsl_flexcan.c **** static void FLEXCAN_ExitFreezeMode(CAN_Type *base);
 112:../drivers/fsl_flexcan.c **** 
 113:../drivers/fsl_flexcan.c **** #if !defined(NDEBUG)
 114:../drivers/fsl_flexcan.c **** /*!
 115:../drivers/fsl_flexcan.c ****  * @brief Check if Message Buffer is occupied by Rx FIFO.
 116:../drivers/fsl_flexcan.c ****  *
 117:../drivers/fsl_flexcan.c ****  * This function check if Message Buffer is occupied by Rx FIFO.
 118:../drivers/fsl_flexcan.c ****  *
 119:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 120:../drivers/fsl_flexcan.c ****  * @param mbIdx The FlexCAN Message Buffer index.
 121:../drivers/fsl_flexcan.c ****  */
 122:../drivers/fsl_flexcan.c **** static bool FLEXCAN_IsMbOccupied(CAN_Type *base, uint8_t mbIdx);
 123:../drivers/fsl_flexcan.c **** #endif
 124:../drivers/fsl_flexcan.c **** 
 125:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641) && FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641)
 126:../drivers/fsl_flexcan.c **** /*!
 127:../drivers/fsl_flexcan.c ****  * @brief Get the first valid Message buffer ID of give FlexCAN instance.
 128:../drivers/fsl_flexcan.c ****  *
 129:../drivers/fsl_flexcan.c ****  * This function is a helper function for Errata 5641 workaround.
 130:../drivers/fsl_flexcan.c ****  *
 131:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 132:../drivers/fsl_flexcan.c ****  * @return The first valid Message Buffer Number.
 133:../drivers/fsl_flexcan.c ****  */
 134:../drivers/fsl_flexcan.c **** static uint32_t FLEXCAN_GetFirstValidMb(CAN_Type *base);
 135:../drivers/fsl_flexcan.c **** #endif
 136:../drivers/fsl_flexcan.c **** 
 137:../drivers/fsl_flexcan.c **** /*!
 138:../drivers/fsl_flexcan.c ****  * @brief Check if Message Buffer interrupt is enabled.
 139:../drivers/fsl_flexcan.c ****  *
 140:../drivers/fsl_flexcan.c ****  * This function check if Message Buffer interrupt is enabled.
 141:../drivers/fsl_flexcan.c ****  *
 142:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 143:../drivers/fsl_flexcan.c ****  * @param mbIdx The FlexCAN Message Buffer index.
 144:../drivers/fsl_flexcan.c ****  */
 145:../drivers/fsl_flexcan.c **** static bool FLEXCAN_IsMbIntEnabled(CAN_Type *base, uint8_t mbIdx);
 146:../drivers/fsl_flexcan.c **** 
 147:../drivers/fsl_flexcan.c **** /*!
 148:../drivers/fsl_flexcan.c ****  * @brief Reset the FlexCAN Instance.
 149:../drivers/fsl_flexcan.c ****  *
 150:../drivers/fsl_flexcan.c ****  * Restores the FlexCAN module to reset state, notice that this function
 151:../drivers/fsl_flexcan.c ****  * will set all the registers to reset state so the FlexCAN module can not work
 152:../drivers/fsl_flexcan.c ****  * after calling this API.
 153:../drivers/fsl_flexcan.c ****  *
 154:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 155:../drivers/fsl_flexcan.c **** */
 156:../drivers/fsl_flexcan.c **** static void FLEXCAN_Reset(CAN_Type *base);
 157:../drivers/fsl_flexcan.c **** 
 158:../drivers/fsl_flexcan.c **** /*!
 159:../drivers/fsl_flexcan.c ****  * @brief Set Baud Rate of FlexCAN.
 160:../drivers/fsl_flexcan.c ****  *
 161:../drivers/fsl_flexcan.c ****  * This function set the baud rate of FlexCAN.
 162:../drivers/fsl_flexcan.c ****  *
 163:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 164:../drivers/fsl_flexcan.c ****  * @param sourceClock_Hz Source Clock in Hz.
 165:../drivers/fsl_flexcan.c ****  * @param baudRate_Bps Baud Rate in Bps.
 166:../drivers/fsl_flexcan.c ****  * @param timingConfig FlexCAN timingConfig.
 167:../drivers/fsl_flexcan.c ****  */
 168:../drivers/fsl_flexcan.c **** static void FLEXCAN_SetBaudRate(CAN_Type *base, uint32_t sourceClock_Hz, uint32_t baudRate_Bps, fle
 169:../drivers/fsl_flexcan.c **** 
 170:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 171:../drivers/fsl_flexcan.c **** /*!
 172:../drivers/fsl_flexcan.c ****  * @brief Set Baud Rate of FlexCAN FD frame.
 173:../drivers/fsl_flexcan.c ****  *
 174:../drivers/fsl_flexcan.c ****  * This function set the baud rate of FlexCAN FD frame.
 175:../drivers/fsl_flexcan.c ****  *
 176:../drivers/fsl_flexcan.c ****  * @param base FlexCAN peripheral base address.
 177:../drivers/fsl_flexcan.c ****  * @param sourceClock_Hz Source Clock in Hz.
 178:../drivers/fsl_flexcan.c ****  * @param baudRateFD_Bps FD frame Baud Rate in Bps.
 179:../drivers/fsl_flexcan.c ****  * @param timingConfig FlexCAN timingConfig.
 180:../drivers/fsl_flexcan.c ****  */
 181:../drivers/fsl_flexcan.c **** static void FLEXCAN_SetFDBaudRate(CAN_Type *base, uint32_t sourceClock_Hz, uint32_t baudRateFD_Bps,
 182:../drivers/fsl_flexcan.c **** #endif
 183:../drivers/fsl_flexcan.c **** 
 184:../drivers/fsl_flexcan.c **** /*******************************************************************************
 185:../drivers/fsl_flexcan.c ****  * Variables
 186:../drivers/fsl_flexcan.c ****  ******************************************************************************/
 187:../drivers/fsl_flexcan.c **** 
 188:../drivers/fsl_flexcan.c **** /* Array of FlexCAN peripheral base address. */
 189:../drivers/fsl_flexcan.c **** static CAN_Type *const s_flexcanBases[] = CAN_BASE_PTRS;
 190:../drivers/fsl_flexcan.c **** 
 191:../drivers/fsl_flexcan.c **** /* Array of FlexCAN IRQ number. */
 192:../drivers/fsl_flexcan.c **** static const IRQn_Type s_flexcanRxWarningIRQ[] = CAN_Rx_Warning_IRQS;
 193:../drivers/fsl_flexcan.c **** static const IRQn_Type s_flexcanTxWarningIRQ[] = CAN_Tx_Warning_IRQS;
 194:../drivers/fsl_flexcan.c **** static const IRQn_Type s_flexcanWakeUpIRQ[] = CAN_Wake_Up_IRQS;
 195:../drivers/fsl_flexcan.c **** static const IRQn_Type s_flexcanErrorIRQ[] = CAN_Error_IRQS;
 196:../drivers/fsl_flexcan.c **** static const IRQn_Type s_flexcanBusOffIRQ[] = CAN_Bus_Off_IRQS;
 197:../drivers/fsl_flexcan.c **** static const IRQn_Type s_flexcanMbIRQ[] = CAN_ORed_Message_buffer_IRQS;
 198:../drivers/fsl_flexcan.c **** 
 199:../drivers/fsl_flexcan.c **** /* Array of FlexCAN handle. */
 200:../drivers/fsl_flexcan.c **** static flexcan_handle_t *s_flexcanHandle[ARRAY_SIZE(s_flexcanBases)];
 201:../drivers/fsl_flexcan.c **** 
 202:../drivers/fsl_flexcan.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 203:../drivers/fsl_flexcan.c **** /* Array of FlexCAN clock name. */
 204:../drivers/fsl_flexcan.c **** static const clock_ip_name_t s_flexcanClock[] = FLEXCAN_CLOCKS;
 205:../drivers/fsl_flexcan.c **** #if defined(FLEXCAN_PERIPH_CLOCKS)
 206:../drivers/fsl_flexcan.c **** /* Array of FlexCAN serial clock name. */
 207:../drivers/fsl_flexcan.c **** static const clock_ip_name_t s_flexcanPeriphClock[] = FLEXCAN_PERIPH_CLOCKS;
 208:../drivers/fsl_flexcan.c **** #endif /* FLEXCAN_PERIPH_CLOCKS */
 209:../drivers/fsl_flexcan.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 210:../drivers/fsl_flexcan.c **** 
 211:../drivers/fsl_flexcan.c **** /* FlexCAN ISR for transactional APIs. */
 212:../drivers/fsl_flexcan.c **** static flexcan_isr_t s_flexcanIsr;
 213:../drivers/fsl_flexcan.c **** 
 214:../drivers/fsl_flexcan.c **** /*******************************************************************************
 215:../drivers/fsl_flexcan.c ****  * Code
 216:../drivers/fsl_flexcan.c ****  ******************************************************************************/
 217:../drivers/fsl_flexcan.c **** 
 218:../drivers/fsl_flexcan.c **** uint32_t FLEXCAN_GetInstance(CAN_Type *base)
 219:../drivers/fsl_flexcan.c **** {
 220:../drivers/fsl_flexcan.c ****     uint32_t instance;
 221:../drivers/fsl_flexcan.c **** 
 222:../drivers/fsl_flexcan.c ****     /* Find the instance index from base address mappings. */
 223:../drivers/fsl_flexcan.c ****     for (instance = 0; instance < ARRAY_SIZE(s_flexcanBases); instance++)
 224:../drivers/fsl_flexcan.c ****     {
 225:../drivers/fsl_flexcan.c ****         if (s_flexcanBases[instance] == base)
 226:../drivers/fsl_flexcan.c ****         {
 227:../drivers/fsl_flexcan.c ****             break;
 228:../drivers/fsl_flexcan.c ****         }
 229:../drivers/fsl_flexcan.c ****     }
 230:../drivers/fsl_flexcan.c **** 
 231:../drivers/fsl_flexcan.c ****     assert(instance < ARRAY_SIZE(s_flexcanBases));
 232:../drivers/fsl_flexcan.c **** 
 233:../drivers/fsl_flexcan.c ****     return instance;
 234:../drivers/fsl_flexcan.c **** }
 235:../drivers/fsl_flexcan.c **** 
 236:../drivers/fsl_flexcan.c **** static void FLEXCAN_EnterFreezeMode(CAN_Type *base)
 237:../drivers/fsl_flexcan.c **** {
  27              		.loc 1 237 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 238:../drivers/fsl_flexcan.c ****     /* Set Freeze, Halt bits. */
 239:../drivers/fsl_flexcan.c ****     base->MCR |= CAN_MCR_HALT_MASK;
  33              		.loc 1 239 0
  34 0000 0368     		ldr	r3, [r0]
  35 0002 43F08053 		orr	r3, r3, #268435456
  36 0006 0360     		str	r3, [r0]
  37              	.L2:
 240:../drivers/fsl_flexcan.c **** 
 241:../drivers/fsl_flexcan.c ****     /* Wait until the FlexCAN Module enter freeze mode. */
 242:../drivers/fsl_flexcan.c ****     while (!(base->MCR & CAN_MCR_FRZACK_MASK))
  38              		.loc 1 242 0 discriminator 1
  39 0008 0368     		ldr	r3, [r0]
  40 000a DB01     		lsls	r3, r3, #7
  41 000c FCD5     		bpl	.L2
 243:../drivers/fsl_flexcan.c ****     {
 244:../drivers/fsl_flexcan.c ****     }
 245:../drivers/fsl_flexcan.c **** }
  42              		.loc 1 245 0
  43 000e 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE158:
  47              		.section	.text.FLEXCAN_ExitFreezeMode,"ax",%progbits
  48              		.align	1
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu fpv4-sp-d16
  54              	FLEXCAN_ExitFreezeMode:
  55              	.LFB159:
 246:../drivers/fsl_flexcan.c **** 
 247:../drivers/fsl_flexcan.c **** static void FLEXCAN_ExitFreezeMode(CAN_Type *base)
 248:../drivers/fsl_flexcan.c **** {
  56              		.loc 1 248 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61              	.LVL1:
 249:../drivers/fsl_flexcan.c ****     /* Clear Freeze, Halt bits. */
 250:../drivers/fsl_flexcan.c ****     base->MCR &= ~CAN_MCR_HALT_MASK;
  62              		.loc 1 250 0
  63 0000 0368     		ldr	r3, [r0]
  64 0002 23F08053 		bic	r3, r3, #268435456
  65 0006 0360     		str	r3, [r0]
  66              	.L6:
 251:../drivers/fsl_flexcan.c **** 
 252:../drivers/fsl_flexcan.c ****     /* Wait until the FlexCAN Module exit freeze mode. */
 253:../drivers/fsl_flexcan.c ****     while (base->MCR & CAN_MCR_FRZACK_MASK)
  67              		.loc 1 253 0 discriminator 1
  68 0008 0368     		ldr	r3, [r0]
  69 000a DB01     		lsls	r3, r3, #7
  70 000c FCD4     		bmi	.L6
 254:../drivers/fsl_flexcan.c ****     {
 255:../drivers/fsl_flexcan.c ****     }
 256:../drivers/fsl_flexcan.c **** }
  71              		.loc 1 256 0
  72 000e 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE159:
  76              		.section	.text.FLEXCAN_Reset,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu fpv4-sp-d16
  83              	FLEXCAN_Reset:
  84              	.LFB161:
 257:../drivers/fsl_flexcan.c **** 
 258:../drivers/fsl_flexcan.c **** #if !defined(NDEBUG)
 259:../drivers/fsl_flexcan.c **** static bool FLEXCAN_IsMbOccupied(CAN_Type *base, uint8_t mbIdx)
 260:../drivers/fsl_flexcan.c **** {
 261:../drivers/fsl_flexcan.c ****     uint8_t lastOccupiedMb;
 262:../drivers/fsl_flexcan.c **** 
 263:../drivers/fsl_flexcan.c ****     /* Is Rx FIFO enabled? */
 264:../drivers/fsl_flexcan.c ****     if (base->MCR & CAN_MCR_RFEN_MASK)
 265:../drivers/fsl_flexcan.c ****     {
 266:../drivers/fsl_flexcan.c ****         /* Get RFFN value. */
 267:../drivers/fsl_flexcan.c ****         lastOccupiedMb = ((base->CTRL2 & CAN_CTRL2_RFFN_MASK) >> CAN_CTRL2_RFFN_SHIFT);
 268:../drivers/fsl_flexcan.c ****         /* Calculate the number of last Message Buffer occupied by Rx FIFO. */
 269:../drivers/fsl_flexcan.c ****         lastOccupiedMb = ((lastOccupiedMb + 1) * 2) + 5;
 270:../drivers/fsl_flexcan.c **** 
 271:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641) && FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641)
 272:../drivers/fsl_flexcan.c ****         if (mbIdx <= (lastOccupiedMb + 1))
 273:../drivers/fsl_flexcan.c **** #else
 274:../drivers/fsl_flexcan.c ****         if (mbIdx <= lastOccupiedMb)
 275:../drivers/fsl_flexcan.c **** #endif
 276:../drivers/fsl_flexcan.c ****         {
 277:../drivers/fsl_flexcan.c ****             return true;
 278:../drivers/fsl_flexcan.c ****         }
 279:../drivers/fsl_flexcan.c ****         else
 280:../drivers/fsl_flexcan.c ****         {
 281:../drivers/fsl_flexcan.c ****             return false;
 282:../drivers/fsl_flexcan.c ****         }
 283:../drivers/fsl_flexcan.c ****     }
 284:../drivers/fsl_flexcan.c ****     else
 285:../drivers/fsl_flexcan.c ****     {
 286:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641) && FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641)
 287:../drivers/fsl_flexcan.c ****         if (0 == mbIdx)
 288:../drivers/fsl_flexcan.c ****         {
 289:../drivers/fsl_flexcan.c ****             return true;
 290:../drivers/fsl_flexcan.c ****         }
 291:../drivers/fsl_flexcan.c ****         else
 292:../drivers/fsl_flexcan.c ****         {
 293:../drivers/fsl_flexcan.c ****             return false;
 294:../drivers/fsl_flexcan.c ****         }
 295:../drivers/fsl_flexcan.c **** #else
 296:../drivers/fsl_flexcan.c ****         return false;
 297:../drivers/fsl_flexcan.c **** #endif
 298:../drivers/fsl_flexcan.c ****     }
 299:../drivers/fsl_flexcan.c **** }
 300:../drivers/fsl_flexcan.c **** #endif
 301:../drivers/fsl_flexcan.c **** 
 302:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641) && FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641)
 303:../drivers/fsl_flexcan.c **** static uint32_t FLEXCAN_GetFirstValidMb(CAN_Type *base)
 304:../drivers/fsl_flexcan.c **** {
 305:../drivers/fsl_flexcan.c ****     uint32_t firstValidMbNum;
 306:../drivers/fsl_flexcan.c **** 
 307:../drivers/fsl_flexcan.c ****     if (base->MCR & CAN_MCR_RFEN_MASK)
 308:../drivers/fsl_flexcan.c ****     {
 309:../drivers/fsl_flexcan.c ****         firstValidMbNum = ((base->CTRL2 & CAN_CTRL2_RFFN_MASK) >> CAN_CTRL2_RFFN_SHIFT);
 310:../drivers/fsl_flexcan.c ****         firstValidMbNum = ((firstValidMbNum + 1) * 2) + 6;
 311:../drivers/fsl_flexcan.c ****     }
 312:../drivers/fsl_flexcan.c ****     else
 313:../drivers/fsl_flexcan.c ****     {
 314:../drivers/fsl_flexcan.c ****         firstValidMbNum = 0;
 315:../drivers/fsl_flexcan.c ****     }
 316:../drivers/fsl_flexcan.c **** 
 317:../drivers/fsl_flexcan.c ****     return firstValidMbNum;
 318:../drivers/fsl_flexcan.c **** }
 319:../drivers/fsl_flexcan.c **** #endif
 320:../drivers/fsl_flexcan.c **** 
 321:../drivers/fsl_flexcan.c **** static bool FLEXCAN_IsMbIntEnabled(CAN_Type *base, uint8_t mbIdx)
 322:../drivers/fsl_flexcan.c **** {
 323:../drivers/fsl_flexcan.c ****     /* Assertion. */
 324:../drivers/fsl_flexcan.c ****     assert(mbIdx < FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base));
 325:../drivers/fsl_flexcan.c **** 
 326:../drivers/fsl_flexcan.c **** #if (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER > 0)
 327:../drivers/fsl_flexcan.c ****     if (mbIdx < 32)
 328:../drivers/fsl_flexcan.c ****     {
 329:../drivers/fsl_flexcan.c **** #endif
 330:../drivers/fsl_flexcan.c ****         if (base->IMASK1 & ((uint32_t)(1 << mbIdx)))
 331:../drivers/fsl_flexcan.c ****         {
 332:../drivers/fsl_flexcan.c ****             return true;
 333:../drivers/fsl_flexcan.c ****         }
 334:../drivers/fsl_flexcan.c ****         else
 335:../drivers/fsl_flexcan.c ****         {
 336:../drivers/fsl_flexcan.c ****             return false;
 337:../drivers/fsl_flexcan.c ****         }
 338:../drivers/fsl_flexcan.c **** #if (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER > 0)
 339:../drivers/fsl_flexcan.c ****     }
 340:../drivers/fsl_flexcan.c ****     else
 341:../drivers/fsl_flexcan.c ****     {
 342:../drivers/fsl_flexcan.c ****         if (base->IMASK2 & ((uint32_t)(1 << (mbIdx - 32))))
 343:../drivers/fsl_flexcan.c ****         {
 344:../drivers/fsl_flexcan.c ****             return true;
 345:../drivers/fsl_flexcan.c ****         }
 346:../drivers/fsl_flexcan.c ****         else
 347:../drivers/fsl_flexcan.c ****         {
 348:../drivers/fsl_flexcan.c ****             return false;
 349:../drivers/fsl_flexcan.c ****         }
 350:../drivers/fsl_flexcan.c ****     }
 351:../drivers/fsl_flexcan.c **** #endif
 352:../drivers/fsl_flexcan.c **** }
 353:../drivers/fsl_flexcan.c **** 
 354:../drivers/fsl_flexcan.c **** static void FLEXCAN_Reset(CAN_Type *base)
 355:../drivers/fsl_flexcan.c **** {
  85              		.loc 1 355 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL2:
  91              	.L9:
 356:../drivers/fsl_flexcan.c ****     /* The module must should be first exit from low power
 357:../drivers/fsl_flexcan.c ****      * mode, and then soft reset can be applied.
 358:../drivers/fsl_flexcan.c ****      */
 359:../drivers/fsl_flexcan.c ****     assert(!(base->MCR & CAN_MCR_MDIS_MASK));
 360:../drivers/fsl_flexcan.c **** 
 361:../drivers/fsl_flexcan.c ****     uint8_t i;
 362:../drivers/fsl_flexcan.c **** 
 363:../drivers/fsl_flexcan.c **** #if (FSL_FEATURE_FLEXCAN_HAS_DOZE_MODE_SUPPORT != 0)
 364:../drivers/fsl_flexcan.c ****     /* De-assert DOZE Enable Bit. */
 365:../drivers/fsl_flexcan.c ****     base->MCR &= ~CAN_MCR_DOZE_MASK;
 366:../drivers/fsl_flexcan.c **** #endif
 367:../drivers/fsl_flexcan.c **** 
 368:../drivers/fsl_flexcan.c ****     /* Wait until FlexCAN exit from any Low Power Mode. */
 369:../drivers/fsl_flexcan.c ****     while (base->MCR & CAN_MCR_LPMACK_MASK)
  92              		.loc 1 369 0 discriminator 1
  93 0000 0368     		ldr	r3, [r0]
  94 0002 DB02     		lsls	r3, r3, #11
  95 0004 FCD4     		bmi	.L9
 370:../drivers/fsl_flexcan.c ****     {
 371:../drivers/fsl_flexcan.c ****     }
 372:../drivers/fsl_flexcan.c **** 
 373:../drivers/fsl_flexcan.c ****     /* Assert Soft Reset Signal. */
 374:../drivers/fsl_flexcan.c ****     base->MCR |= CAN_MCR_SOFTRST_MASK;
  96              		.loc 1 374 0
  97 0006 0368     		ldr	r3, [r0]
  98 0008 43F00073 		orr	r3, r3, #33554432
  99 000c 0360     		str	r3, [r0]
 100              	.L10:
 375:../drivers/fsl_flexcan.c ****     /* Wait until FlexCAN reset completes. */
 376:../drivers/fsl_flexcan.c ****     while (base->MCR & CAN_MCR_SOFTRST_MASK)
 101              		.loc 1 376 0 discriminator 1
 102 000e 0368     		ldr	r3, [r0]
 103 0010 13F00073 		ands	r3, r3, #33554432
 104 0014 FBD1     		bne	.L10
 377:../drivers/fsl_flexcan.c ****     {
 378:../drivers/fsl_flexcan.c ****     }
 379:../drivers/fsl_flexcan.c **** 
 380:../drivers/fsl_flexcan.c **** /* Reset MCR rigister. */
 381:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_GLITCH_FILTER) && FSL_FEATURE_FLEXCAN_HAS_GLITCH_FILTER)
 382:../drivers/fsl_flexcan.c ****     base->MCR |= CAN_MCR_WRNEN_MASK | CAN_MCR_WAKSRC_MASK |
 105              		.loc 1 382 0
 106 0016 0268     		ldr	r2, [r0]
 107 0018 42F42012 		orr	r2, r2, #2621440
 108 001c 42F00F02 		orr	r2, r2, #15
 109 0020 0260     		str	r2, [r0]
 383:../drivers/fsl_flexcan.c ****                  CAN_MCR_MAXMB(FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base) - 1);
 384:../drivers/fsl_flexcan.c **** #else
 385:../drivers/fsl_flexcan.c ****     base->MCR |= CAN_MCR_WRNEN_MASK | CAN_MCR_MAXMB(FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMB
 386:../drivers/fsl_flexcan.c **** #endif
 387:../drivers/fsl_flexcan.c **** 
 388:../drivers/fsl_flexcan.c ****     /* Reset CTRL1 and CTRL2 rigister. */
 389:../drivers/fsl_flexcan.c ****     base->CTRL1 = CAN_CTRL1_SMP_MASK;
 110              		.loc 1 389 0
 111 0022 8022     		movs	r2, #128
 112 0024 4260     		str	r2, [r0, #4]
 390:../drivers/fsl_flexcan.c ****     base->CTRL2 = CAN_CTRL2_TASD(0x16) | CAN_CTRL2_RRS_MASK | CAN_CTRL2_EACEN_MASK;
 113              		.loc 1 390 0
 114 0026 4FF43302 		mov	r2, #11730944
 115 002a 4263     		str	r2, [r0, #52]
 116              	.LVL3:
 391:../drivers/fsl_flexcan.c **** 
 392:../drivers/fsl_flexcan.c ****     /* Clean all individual Rx Mask of Message Buffers. */
 393:../drivers/fsl_flexcan.c ****     for (i = 0; i < FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base); i++)
 394:../drivers/fsl_flexcan.c ****     {
 395:../drivers/fsl_flexcan.c ****         base->RXIMR[i] = 0x3FFFFFFF;
 117              		.loc 1 395 0
 118 002c 6FF04042 		mvn	r2, #-1073741824
 119              	.LVL4:
 120              	.L11:
 121              		.loc 1 395 0 is_stmt 0 discriminator 3
 122 0030 03F50871 		add	r1, r3, #544
 123 0034 0133     		adds	r3, r3, #1
 124              	.LVL5:
 393:../drivers/fsl_flexcan.c ****     {
 125              		.loc 1 393 0 is_stmt 1 discriminator 3
 126 0036 102B     		cmp	r3, #16
 127              		.loc 1 395 0 discriminator 3
 128 0038 40F82120 		str	r2, [r0, r1, lsl #2]
 393:../drivers/fsl_flexcan.c ****     {
 129              		.loc 1 393 0 discriminator 3
 130 003c F8D1     		bne	.L11
 396:../drivers/fsl_flexcan.c ****     }
 397:../drivers/fsl_flexcan.c **** 
 398:../drivers/fsl_flexcan.c ****     /* Clean Global Mask of Message Buffers. */
 399:../drivers/fsl_flexcan.c ****     base->RXMGMASK = 0x3FFFFFFF;
 400:../drivers/fsl_flexcan.c ****     /* Clean Global Mask of Message Buffer 14. */
 401:../drivers/fsl_flexcan.c ****     base->RX14MASK = 0x3FFFFFFF;
 402:../drivers/fsl_flexcan.c ****     /* Clean Global Mask of Message Buffer 15. */
 403:../drivers/fsl_flexcan.c ****     base->RX15MASK = 0x3FFFFFFF;
 404:../drivers/fsl_flexcan.c ****     /* Clean Global Mask of Rx FIFO. */
 405:../drivers/fsl_flexcan.c ****     base->RXFGMASK = 0x3FFFFFFF;
 131              		.loc 1 405 0
 132 003e 0023     		movs	r3, #0
 399:../drivers/fsl_flexcan.c ****     /* Clean Global Mask of Message Buffer 14. */
 133              		.loc 1 399 0
 134 0040 0261     		str	r2, [r0, #16]
 406:../drivers/fsl_flexcan.c **** 
 407:../drivers/fsl_flexcan.c ****     /* Clean all Message Buffer CS fields. */
 408:../drivers/fsl_flexcan.c ****     for (i = 0; i < FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base); i++)
 409:../drivers/fsl_flexcan.c ****     {
 410:../drivers/fsl_flexcan.c ****         base->MB[i].CS = 0x0;
 135              		.loc 1 410 0
 136 0042 1946     		mov	r1, r3
 401:../drivers/fsl_flexcan.c ****     /* Clean Global Mask of Message Buffer 15. */
 137              		.loc 1 401 0
 138 0044 4261     		str	r2, [r0, #20]
 403:../drivers/fsl_flexcan.c ****     /* Clean Global Mask of Rx FIFO. */
 139              		.loc 1 403 0
 140 0046 8261     		str	r2, [r0, #24]
 405:../drivers/fsl_flexcan.c **** 
 141              		.loc 1 405 0
 142 0048 8264     		str	r2, [r0, #72]
 143              	.LVL6:
 144              	.L12:
 145              		.loc 1 410 0 discriminator 3
 146 004a 03F10802 		add	r2, r3, #8
 147 004e 1201     		lsls	r2, r2, #4
 148 0050 0133     		adds	r3, r3, #1
 149              	.LVL7:
 408:../drivers/fsl_flexcan.c ****     {
 150              		.loc 1 408 0 discriminator 3
 151 0052 102B     		cmp	r3, #16
 152              		.loc 1 410 0 discriminator 3
 153 0054 8150     		str	r1, [r0, r2]
 408:../drivers/fsl_flexcan.c ****     {
 154              		.loc 1 408 0 discriminator 3
 155 0056 F8D1     		bne	.L12
 411:../drivers/fsl_flexcan.c ****     }
 412:../drivers/fsl_flexcan.c **** }
 156              		.loc 1 412 0
 157 0058 7047     		bx	lr
 158              		.cfi_endproc
 159              	.LFE161:
 161              		.section	.text.FLEXCAN_GetInstance,"ax",%progbits
 162              		.align	1
 163              		.global	FLEXCAN_GetInstance
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	FLEXCAN_GetInstance:
 170              	.LFB157:
 219:../drivers/fsl_flexcan.c ****     uint32_t instance;
 171              		.loc 1 219 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176              	.LVL8:
 234:../drivers/fsl_flexcan.c **** 
 177              		.loc 1 234 0
 178 0000 024B     		ldr	r3, .L18
 179 0002 C01A     		subs	r0, r0, r3
 180              	.LVL9:
 181 0004 18BF     		it	ne
 182 0006 0120     		movne	r0, #1
 183              	.LVL10:
 184 0008 7047     		bx	lr
 185              	.L19:
 186 000a 00BF     		.align	2
 187              	.L18:
 188 000c 00400240 		.word	1073889280
 189              		.cfi_endproc
 190              	.LFE157:
 192              		.section	.text.FLEXCAN_Deinit,"ax",%progbits
 193              		.align	1
 194              		.global	FLEXCAN_Deinit
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu fpv4-sp-d16
 200              	FLEXCAN_Deinit:
 201              	.LFB164:
 413:../drivers/fsl_flexcan.c **** 
 414:../drivers/fsl_flexcan.c **** static void FLEXCAN_SetBaudRate(CAN_Type *base, uint32_t sourceClock_Hz, uint32_t baudRate_Bps, fle
 415:../drivers/fsl_flexcan.c **** {
 416:../drivers/fsl_flexcan.c ****     /* FlexCAN timing setting formula:
 417:../drivers/fsl_flexcan.c ****      * quantum = 1 + (PSEG1 + 1) + (PSEG2 + 1) + (PROPSEG + 1);
 418:../drivers/fsl_flexcan.c ****      */
 419:../drivers/fsl_flexcan.c ****     uint32_t quantum = 1 + (timingConfig.phaseSeg1 + 1) + (timingConfig.phaseSeg2 + 1) + (timingCon
 420:../drivers/fsl_flexcan.c ****     uint32_t priDiv = baudRate_Bps * quantum;
 421:../drivers/fsl_flexcan.c **** 
 422:../drivers/fsl_flexcan.c ****     /* Assertion: Desired baud rate is too high. */
 423:../drivers/fsl_flexcan.c ****     assert(baudRate_Bps <= 1000000U);
 424:../drivers/fsl_flexcan.c ****     /* Assertion: Source clock should greater than baud rate * quantum. */
 425:../drivers/fsl_flexcan.c ****     assert(priDiv <= sourceClock_Hz);
 426:../drivers/fsl_flexcan.c **** 
 427:../drivers/fsl_flexcan.c ****     if (0 == priDiv)
 428:../drivers/fsl_flexcan.c ****     {
 429:../drivers/fsl_flexcan.c ****         priDiv = 1;
 430:../drivers/fsl_flexcan.c ****     }
 431:../drivers/fsl_flexcan.c **** 
 432:../drivers/fsl_flexcan.c ****     priDiv = (sourceClock_Hz / priDiv) - 1;
 433:../drivers/fsl_flexcan.c **** 
 434:../drivers/fsl_flexcan.c ****     /* Desired baud rate is too low. */
 435:../drivers/fsl_flexcan.c ****     if (priDiv > 0xFF)
 436:../drivers/fsl_flexcan.c ****     {
 437:../drivers/fsl_flexcan.c ****         priDiv = 0xFF;
 438:../drivers/fsl_flexcan.c ****     }
 439:../drivers/fsl_flexcan.c **** 
 440:../drivers/fsl_flexcan.c ****     timingConfig.preDivider = priDiv;
 441:../drivers/fsl_flexcan.c **** 
 442:../drivers/fsl_flexcan.c ****     /* Update actual timing characteristic. */
 443:../drivers/fsl_flexcan.c ****     FLEXCAN_SetTimingConfig(base, &timingConfig);
 444:../drivers/fsl_flexcan.c **** }
 445:../drivers/fsl_flexcan.c **** 
 446:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 447:../drivers/fsl_flexcan.c **** static void FLEXCAN_SetFDBaudRate(CAN_Type *base, uint32_t sourceClock_Hz, uint32_t baudRateFD_Bps,
 448:../drivers/fsl_flexcan.c **** {
 449:../drivers/fsl_flexcan.c ****     /* FlexCAN timing setting formula:
 450:../drivers/fsl_flexcan.c ****      * quantum = 1 + (PSEG1 + 1) + (PSEG2 + 1) + (PROPSEG + 1);
 451:../drivers/fsl_flexcan.c ****      */
 452:../drivers/fsl_flexcan.c ****     uint32_t quantum = 1 + (timingConfig.phaseSeg1 + 1) + (timingConfig.phaseSeg2 + 1) + (timingCon
 453:../drivers/fsl_flexcan.c ****     uint32_t priDiv = baudRateFD_Bps * quantum;
 454:../drivers/fsl_flexcan.c **** 
 455:../drivers/fsl_flexcan.c ****     /* Assertion: Desired baud rate is too high. */
 456:../drivers/fsl_flexcan.c ****     assert(baudRateFD_Bps <= 1000000U);
 457:../drivers/fsl_flexcan.c ****     /* Assertion: Source clock should greater than baud rate * FLEXCAN_TIME_QUANTA_NUM. */
 458:../drivers/fsl_flexcan.c ****     assert(priDiv <= sourceClock_Hz);
 459:../drivers/fsl_flexcan.c **** 
 460:../drivers/fsl_flexcan.c ****     if (0 == priDiv)
 461:../drivers/fsl_flexcan.c ****     {
 462:../drivers/fsl_flexcan.c ****         priDiv = 1;
 463:../drivers/fsl_flexcan.c ****     }
 464:../drivers/fsl_flexcan.c **** 
 465:../drivers/fsl_flexcan.c ****     priDiv = (sourceClock_Hz / priDiv) - 1;
 466:../drivers/fsl_flexcan.c **** 
 467:../drivers/fsl_flexcan.c ****     /* Desired baud rate is too low. */
 468:../drivers/fsl_flexcan.c ****     if (priDiv > 0xFF)
 469:../drivers/fsl_flexcan.c ****     {
 470:../drivers/fsl_flexcan.c ****         priDiv = 0xFF;
 471:../drivers/fsl_flexcan.c ****     }
 472:../drivers/fsl_flexcan.c **** 
 473:../drivers/fsl_flexcan.c ****     timingConfig.preDivider = priDiv;
 474:../drivers/fsl_flexcan.c **** 
 475:../drivers/fsl_flexcan.c ****     /* Update actual timing characteristic. */
 476:../drivers/fsl_flexcan.c ****     FLEXCAN_SetFDTimingConfig(base, &timingConfig);
 477:../drivers/fsl_flexcan.c **** }
 478:../drivers/fsl_flexcan.c **** #endif
 479:../drivers/fsl_flexcan.c **** 
 480:../drivers/fsl_flexcan.c **** void FLEXCAN_Init(CAN_Type *base, const flexcan_config_t *config, uint32_t sourceClock_Hz)
 481:../drivers/fsl_flexcan.c **** {
 482:../drivers/fsl_flexcan.c ****     uint32_t mcrTemp;
 483:../drivers/fsl_flexcan.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 484:../drivers/fsl_flexcan.c ****     uint32_t instance;
 485:../drivers/fsl_flexcan.c **** #endif
 486:../drivers/fsl_flexcan.c **** 
 487:../drivers/fsl_flexcan.c ****     /* Assertion. */
 488:../drivers/fsl_flexcan.c ****     assert(config);
 489:../drivers/fsl_flexcan.c ****     assert((config->maxMbNum > 0) && (config->maxMbNum <= FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MA
 490:../drivers/fsl_flexcan.c **** 
 491:../drivers/fsl_flexcan.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 492:../drivers/fsl_flexcan.c ****     instance = FLEXCAN_GetInstance(base);
 493:../drivers/fsl_flexcan.c ****     /* Enable FlexCAN clock. */
 494:../drivers/fsl_flexcan.c ****     CLOCK_EnableClock(s_flexcanClock[instance]);
 495:../drivers/fsl_flexcan.c **** #if defined(FLEXCAN_PERIPH_CLOCKS)
 496:../drivers/fsl_flexcan.c ****     /* Enable FlexCAN serial clock. */
 497:../drivers/fsl_flexcan.c ****     CLOCK_EnableClock(s_flexcanPeriphClock[instance]);
 498:../drivers/fsl_flexcan.c **** #endif /* FLEXCAN_PERIPH_CLOCKS */
 499:../drivers/fsl_flexcan.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 500:../drivers/fsl_flexcan.c **** 
 501:../drivers/fsl_flexcan.c **** #if (!defined(FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE)) || !FSL_FEATURE_FLEXCAN_SUPPORT_E
 502:../drivers/fsl_flexcan.c ****     /* Disable FlexCAN Module. */
 503:../drivers/fsl_flexcan.c ****     FLEXCAN_Enable(base, false);
 504:../drivers/fsl_flexcan.c **** 
 505:../drivers/fsl_flexcan.c ****     /* Protocol-Engine clock source selection, This bit must be set
 506:../drivers/fsl_flexcan.c ****      * when FlexCAN Module in Disable Mode.
 507:../drivers/fsl_flexcan.c ****      */
 508:../drivers/fsl_flexcan.c ****     base->CTRL1 = (kFLEXCAN_ClkSrcOsc == config->clkSrc) ? base->CTRL1 & ~CAN_CTRL1_CLKSRC_MASK :
 509:../drivers/fsl_flexcan.c ****                                                            base->CTRL1 | CAN_CTRL1_CLKSRC_MASK;
 510:../drivers/fsl_flexcan.c **** #endif /* FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE */
 511:../drivers/fsl_flexcan.c **** 
 512:../drivers/fsl_flexcan.c ****     /* Enable FlexCAN Module for configuartion. */
 513:../drivers/fsl_flexcan.c ****     FLEXCAN_Enable(base, true);
 514:../drivers/fsl_flexcan.c **** 
 515:../drivers/fsl_flexcan.c ****     /* Reset to known status. */
 516:../drivers/fsl_flexcan.c ****     FLEXCAN_Reset(base);
 517:../drivers/fsl_flexcan.c **** 
 518:../drivers/fsl_flexcan.c ****     /* Save current MCR value and enable to enter Freeze mode(enabled by default). */
 519:../drivers/fsl_flexcan.c ****     mcrTemp = base->MCR;
 520:../drivers/fsl_flexcan.c **** 
 521:../drivers/fsl_flexcan.c ****     /* Set the maximum number of Message Buffers */
 522:../drivers/fsl_flexcan.c ****     mcrTemp = (mcrTemp & ~CAN_MCR_MAXMB_MASK) | CAN_MCR_MAXMB(config->maxMbNum - 1);
 523:../drivers/fsl_flexcan.c **** 
 524:../drivers/fsl_flexcan.c ****     /* Enable Loop Back Mode? */
 525:../drivers/fsl_flexcan.c ****     base->CTRL1 = (config->enableLoopBack) ? base->CTRL1 | CAN_CTRL1_LPB_MASK : base->CTRL1 & ~CAN_
 526:../drivers/fsl_flexcan.c **** 
 527:../drivers/fsl_flexcan.c ****     /* Enable Self Wake Up Mode? */
 528:../drivers/fsl_flexcan.c ****     mcrTemp = (config->enableSelfWakeup) ? mcrTemp | CAN_MCR_SLFWAK_MASK : mcrTemp & ~CAN_MCR_SLFWA
 529:../drivers/fsl_flexcan.c **** 
 530:../drivers/fsl_flexcan.c ****     /* Enable Individual Rx Masking? */
 531:../drivers/fsl_flexcan.c ****     mcrTemp = (config->enableIndividMask) ? mcrTemp | CAN_MCR_IRMQ_MASK : mcrTemp & ~CAN_MCR_IRMQ_M
 532:../drivers/fsl_flexcan.c **** 
 533:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_DOZE_MODE_SUPPORT) && FSL_FEATURE_FLEXCAN_HAS_DOZE_MODE_SUPPOR
 534:../drivers/fsl_flexcan.c ****     /* Enable Doze Mode? */
 535:../drivers/fsl_flexcan.c ****     mcrTemp = (config->enableDoze) ? mcrTemp | CAN_MCR_DOZE_MASK : mcrTemp & ~CAN_MCR_DOZE_MASK;
 536:../drivers/fsl_flexcan.c **** #endif
 537:../drivers/fsl_flexcan.c **** 
 538:../drivers/fsl_flexcan.c ****     /* Save MCR Configuation. */
 539:../drivers/fsl_flexcan.c ****     base->MCR = mcrTemp;
 540:../drivers/fsl_flexcan.c **** 
 541:../drivers/fsl_flexcan.c ****     /* Baud Rate Configuration.*/
 542:../drivers/fsl_flexcan.c ****     FLEXCAN_SetBaudRate(base, sourceClock_Hz, config->baudRate, config->timingConfig);
 543:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 544:../drivers/fsl_flexcan.c ****     FLEXCAN_SetFDBaudRate(base, sourceClock_Hz, config->baudRateFD, config->timingConfig);
 545:../drivers/fsl_flexcan.c **** #endif
 546:../drivers/fsl_flexcan.c **** }
 547:../drivers/fsl_flexcan.c **** 
 548:../drivers/fsl_flexcan.c **** void FLEXCAN_Deinit(CAN_Type *base)
 549:../drivers/fsl_flexcan.c **** {
 202              		.loc 1 549 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              	.LVL11:
 207 0000 10B5     		push	{r4, lr}
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 4, -8
 210              		.cfi_offset 14, -4
 211              		.loc 1 549 0
 212 0002 0446     		mov	r4, r0
 550:../drivers/fsl_flexcan.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 551:../drivers/fsl_flexcan.c ****     uint32_t instance;
 552:../drivers/fsl_flexcan.c **** #endif
 553:../drivers/fsl_flexcan.c ****     /* Reset all Register Contents. */
 554:../drivers/fsl_flexcan.c ****     FLEXCAN_Reset(base);
 213              		.loc 1 554 0
 214 0004 FFF7FEFF 		bl	FLEXCAN_Reset
 215              	.LVL12:
 216              	.LBB56:
 217              	.LBB57:
 218              		.file 2 "../drivers/fsl_flexcan.h"
   1:../drivers/fsl_flexcan.h **** /*
   2:../drivers/fsl_flexcan.h ****  * The Clear BSD License
   3:../drivers/fsl_flexcan.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_flexcan.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_flexcan.h ****  * All rights reserved.
   6:../drivers/fsl_flexcan.h ****  *
   7:../drivers/fsl_flexcan.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_flexcan.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_flexcan.h ****  * that the following conditions are met:
  10:../drivers/fsl_flexcan.h ****  *
  11:../drivers/fsl_flexcan.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_flexcan.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_flexcan.h ****  *
  14:../drivers/fsl_flexcan.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_flexcan.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_flexcan.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_flexcan.h ****  *
  18:../drivers/fsl_flexcan.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_flexcan.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_flexcan.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_flexcan.h ****  *
  22:../drivers/fsl_flexcan.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_flexcan.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_flexcan.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_flexcan.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_flexcan.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_flexcan.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_flexcan.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_flexcan.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_flexcan.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_flexcan.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_flexcan.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_flexcan.h ****  */
  34:../drivers/fsl_flexcan.h **** #ifndef _FSL_FLEXCAN_H_
  35:../drivers/fsl_flexcan.h **** #define _FSL_FLEXCAN_H_
  36:../drivers/fsl_flexcan.h **** 
  37:../drivers/fsl_flexcan.h **** #include "fsl_common.h"
  38:../drivers/fsl_flexcan.h **** 
  39:../drivers/fsl_flexcan.h **** /*!
  40:../drivers/fsl_flexcan.h ****  * @addtogroup flexcan_driver
  41:../drivers/fsl_flexcan.h ****  * @{
  42:../drivers/fsl_flexcan.h ****  */
  43:../drivers/fsl_flexcan.h **** 
  44:../drivers/fsl_flexcan.h **** /******************************************************************************
  45:../drivers/fsl_flexcan.h ****  * Definitions
  46:../drivers/fsl_flexcan.h ****  *****************************************************************************/
  47:../drivers/fsl_flexcan.h **** 
  48:../drivers/fsl_flexcan.h **** /*! @name Driver version */
  49:../drivers/fsl_flexcan.h **** /*@{*/
  50:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN driver version 2.2.0. */
  51:../drivers/fsl_flexcan.h **** #define FLEXCAN_DRIVER_VERSION (MAKE_VERSION(2, 2, 0))
  52:../drivers/fsl_flexcan.h **** /*@}*/
  53:../drivers/fsl_flexcan.h **** 
  54:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Frame ID helper macro. */
  55:../drivers/fsl_flexcan.h **** #define FLEXCAN_ID_STD(id) \
  56:../drivers/fsl_flexcan.h ****     (((uint32_t)(((uint32_t)(id)) << CAN_ID_STD_SHIFT)) & CAN_ID_STD_MASK) /*!< Standard Frame ID h
  57:../drivers/fsl_flexcan.h **** #define FLEXCAN_ID_EXT(id)                                \
  58:../drivers/fsl_flexcan.h ****     (((uint32_t)(((uint32_t)(id)) << CAN_ID_EXT_SHIFT)) & \
  59:../drivers/fsl_flexcan.h ****      (CAN_ID_EXT_MASK | CAN_ID_STD_MASK)) /*!< Extend Frame ID helper macro. */
  60:../drivers/fsl_flexcan.h **** 
  61:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Rx Message Buffer Mask helper macro. */
  62:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_MB_STD_MASK(id, rtr, ide)                                   \
  63:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 31) | (uint32_t)((uint32_t)(ide) << 30)) | \
  64:../drivers/fsl_flexcan.h ****      FLEXCAN_ID_STD(id)) /*!< Standard Rx Message Buffer Mask helper macro. */
  65:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_MB_EXT_MASK(id, rtr, ide)                                   \
  66:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 31) | (uint32_t)((uint32_t)(ide) << 30)) | \
  67:../drivers/fsl_flexcan.h ****      FLEXCAN_ID_EXT(id)) /*!< Extend Rx Message Buffer Mask helper macro. */
  68:../drivers/fsl_flexcan.h **** 
  69:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Rx FIFO Mask helper macro. */
  70:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_MASK_TYPE_A(id, rtr, ide)                          \
  71:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 31) | (uint32_t)((uint32_t)(ide) << 30)) | \
  72:../drivers/fsl_flexcan.h ****      (FLEXCAN_ID_STD(id) << 1)) /*!< Standard Rx FIFO Mask helper macro Type A helper macro. */
  73:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_MASK_TYPE_B_HIGH(id, rtr, ide)                     \
  74:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 31) | (uint32_t)((uint32_t)(ide) << 30)) | \
  75:../drivers/fsl_flexcan.h ****      (((uint32_t)(id) & 0x7FF) << 19)) /*!< Standard Rx FIFO Mask helper macro Type B upper part he
  76:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_MASK_TYPE_B_LOW(id, rtr, ide)                      \
  77:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 15) | (uint32_t)((uint32_t)(ide) << 14)) | \
  78:../drivers/fsl_flexcan.h ****      (((uint32_t)(id) & 0x7FF) << 3)) /*!< Standard Rx FIFO Mask helper macro Type B lower part hel
  79:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_HIGH(id) \
  80:../drivers/fsl_flexcan.h ****     (((uint32_t)(id) & 0x7F8) << 21) /*!< Standard Rx FIFO Mask helper macro Type C upper part help
  81:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_MID_HIGH(id) \
  82:../drivers/fsl_flexcan.h ****     (((uint32_t)(id) & 0x7F8) << 13) /*!< Standard Rx FIFO Mask helper macro Type C mid-upper part 
  83:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_MID_LOW(id) \
  84:../drivers/fsl_flexcan.h ****     (((uint32_t)(id) & 0x7F8) << 5) /*!< Standard Rx FIFO Mask helper macro Type C mid-lower part h
  85:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_LOW(id) \
  86:../drivers/fsl_flexcan.h ****     (((uint32_t)(id) & 0x7F8) >> 3) /*!< Standard Rx FIFO Mask helper macro Type C lower part helpe
  87:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_MASK_TYPE_A(id, rtr, ide)                          \
  88:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 31) | (uint32_t)((uint32_t)(ide) << 30)) | \
  89:../drivers/fsl_flexcan.h ****      (FLEXCAN_ID_EXT(id) << 1)) /*!< Extend Rx FIFO Mask helper macro Type A helper macro. */
  90:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_MASK_TYPE_B_HIGH(id, rtr, ide)                        \
  91:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 31) | (uint32_t)((uint32_t)(ide) << 30)) | \
  92:../drivers/fsl_flexcan.h ****      ((FLEXCAN_ID_EXT(id) & 0x1FFF8000) << 1)) /*!< Extend Rx FIFO Mask helper macro Type B upper p
  93:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_MASK_TYPE_B_LOW(id, rtr, ide)                      \
  94:../drivers/fsl_flexcan.h ****     (((uint32_t)((uint32_t)(rtr) << 15) | (uint32_t)((uint32_t)(ide) << 14)) | \
  95:../drivers/fsl_flexcan.h ****      ((FLEXCAN_ID_EXT(id) & 0x1FFF8000) >>                                     \
  96:../drivers/fsl_flexcan.h ****       15)) /*!< Extend Rx FIFO Mask helper macro Type B lower part helper macro. */
  97:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_HIGH(id) \
  98:../drivers/fsl_flexcan.h ****     ((FLEXCAN_ID_EXT(id) & 0x1FE00000) << 3) /*!< Extend Rx FIFO Mask helper macro Type C upper par
  99:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_MID_HIGH(id) \
 100:../drivers/fsl_flexcan.h ****     ((FLEXCAN_ID_EXT(id) & 0x1FE00000) >>            \
 101:../drivers/fsl_flexcan.h ****      5) /*!< Extend Rx FIFO Mask helper macro Type C mid-upper part helper macro. */
 102:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_MID_LOW(id) \
 103:../drivers/fsl_flexcan.h ****     ((FLEXCAN_ID_EXT(id) & 0x1FE00000) >>           \
 104:../drivers/fsl_flexcan.h ****      13) /*!< Extend Rx FIFO Mask helper macro Type C mid-lower part helper macro. */
 105:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_LOW(id) \
 106:../drivers/fsl_flexcan.h ****     ((FLEXCAN_ID_EXT(id) & 0x1FE00000) >> 21) /*!< Extend Rx FIFO Mask helper macro Type C lower pa
 107:../drivers/fsl_flexcan.h **** 
 108:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Rx FIFO Filter helper macro. */
 109:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_FILTER_TYPE_A(id, rtr, ide) \
 110:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_STD_MASK_TYPE_A(id, rtr, ide) /*!< Standard Rx FIFO Filter helper macro Type A 
 111:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_FILTER_TYPE_B_HIGH(id, rtr, ide) \
 112:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_STD_MASK_TYPE_B_HIGH(                    \
 113:../drivers/fsl_flexcan.h ****         id, rtr, ide) /*!< Standard Rx FIFO Filter helper macro Type B upper part helper macro. */
 114:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_FILTER_TYPE_B_LOW(id, rtr, ide) \
 115:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_STD_MASK_TYPE_B_LOW(                    \
 116:../drivers/fsl_flexcan.h ****         id, rtr, ide) /*!< Standard Rx FIFO Filter helper macro Type B lower part helper macro. */
 117:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_FILTER_TYPE_C_HIGH(id) \
 118:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_HIGH(          \
 119:../drivers/fsl_flexcan.h ****         id) /*!< Standard Rx FIFO Filter helper macro Type C upper part helper macro. */
 120:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_FILTER_TYPE_C_MID_HIGH(id) \
 121:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_MID_HIGH(          \
 122:../drivers/fsl_flexcan.h ****         id) /*!< Standard Rx FIFO Filter helper macro Type C mid-upper part helper macro. */
 123:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_FILTER_TYPE_C_MID_LOW(id) \
 124:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_MID_LOW(          \
 125:../drivers/fsl_flexcan.h ****         id) /*!< Standard Rx FIFO Filter helper macro Type C mid-lower part helper macro. */
 126:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_STD_FILTER_TYPE_C_LOW(id)                                                  
 127:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_STD_MASK_TYPE_C_LOW(id) /*!< Standard Rx FIFO Filter helper macro Type C lower 
 128:../drivers/fsl_flexcan.h ****                                                */
 129:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_FILTER_TYPE_A(id, rtr, ide) \
 130:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_EXT_MASK_TYPE_A(id, rtr, ide) /*!< Extend Rx FIFO Filter helper macro Type A he
 131:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_FILTER_TYPE_B_HIGH(id, rtr, ide) \
 132:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_EXT_MASK_TYPE_B_HIGH(                    \
 133:../drivers/fsl_flexcan.h ****         id, rtr, ide) /*!< Extend Rx FIFO Filter helper macro Type B upper part helper macro. */
 134:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_FILTER_TYPE_B_LOW(id, rtr, ide) \
 135:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_EXT_MASK_TYPE_B_LOW(                    \
 136:../drivers/fsl_flexcan.h ****         id, rtr, ide) /*!< Extend Rx FIFO Filter helper macro Type B lower part helper macro. */
 137:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_FILTER_TYPE_C_HIGH(id)                                                 
 138:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_HIGH(id) /*!< Extend Rx FIFO Filter helper macro Type C upper p
 139:../drivers/fsl_flexcan.h ****                                                 */
 140:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_FILTER_TYPE_C_MID_HIGH(id) \
 141:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_MID_HIGH(          \
 142:../drivers/fsl_flexcan.h ****         id) /*!< Extend Rx FIFO Filter helper macro Type C mid-upper part helper macro. */
 143:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_FILTER_TYPE_C_MID_LOW(id) \
 144:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_MID_LOW(          \
 145:../drivers/fsl_flexcan.h ****         id) /*!< Extend Rx FIFO Filter helper macro Type C mid-lower part helper macro. */
 146:../drivers/fsl_flexcan.h **** #define FLEXCAN_RX_FIFO_EXT_FILTER_TYPE_C_LOW(id) \
 147:../drivers/fsl_flexcan.h ****     FLEXCAN_RX_FIFO_EXT_MASK_TYPE_C_LOW(id) /*!< Extend Rx FIFO Filter helper macro Type C lower pa
 148:../drivers/fsl_flexcan.h **** 
 149:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN transfer status. */
 150:../drivers/fsl_flexcan.h **** enum _flexcan_status
 151:../drivers/fsl_flexcan.h **** {
 152:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_TxBusy = MAKE_STATUS(kStatusGroup_FLEXCAN, 0), /*!< Tx Message Buffer is Busy. 
 153:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_TxIdle = MAKE_STATUS(kStatusGroup_FLEXCAN, 1), /*!< Tx Message Buffer is Idle. 
 154:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_TxSwitchToRx = MAKE_STATUS(
 155:../drivers/fsl_flexcan.h ****         kStatusGroup_FLEXCAN, 2), /*!< Remote Message is send out and Message buffer changed to Rec
 156:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_RxBusy = MAKE_STATUS(kStatusGroup_FLEXCAN, 3),         /*!< Rx Message Buffer i
 157:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_RxIdle = MAKE_STATUS(kStatusGroup_FLEXCAN, 4),         /*!< Rx Message Buffer i
 158:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_RxOverflow = MAKE_STATUS(kStatusGroup_FLEXCAN, 5),     /*!< Rx Message Buffer i
 159:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_RxFifoBusy = MAKE_STATUS(kStatusGroup_FLEXCAN, 6),     /*!< Rx Message FIFO is 
 160:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_RxFifoIdle = MAKE_STATUS(kStatusGroup_FLEXCAN, 7),     /*!< Rx Message FIFO is 
 161:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_RxFifoOverflow = MAKE_STATUS(kStatusGroup_FLEXCAN, 8), /*!< Rx Message FIFO is 
 162:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_RxFifoWarning = MAKE_STATUS(kStatusGroup_FLEXCAN, 9),  /*!< Rx Message FIFO is 
 163:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_ErrorStatus = MAKE_STATUS(kStatusGroup_FLEXCAN, 10),   /*!< FlexCAN Module Erro
 164:../drivers/fsl_flexcan.h ****     kStatus_FLEXCAN_UnHandled = MAKE_STATUS(kStatusGroup_FLEXCAN, 11),     /*!< UnHadled Interrupt 
 165:../drivers/fsl_flexcan.h **** };
 166:../drivers/fsl_flexcan.h **** 
 167:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN frame format. */
 168:../drivers/fsl_flexcan.h **** typedef enum _flexcan_frame_format
 169:../drivers/fsl_flexcan.h **** {
 170:../drivers/fsl_flexcan.h ****     kFLEXCAN_FrameFormatStandard = 0x0U, /*!< Standard frame format attribute. */
 171:../drivers/fsl_flexcan.h ****     kFLEXCAN_FrameFormatExtend = 0x1U,   /*!< Extend frame format attribute. */
 172:../drivers/fsl_flexcan.h **** } flexcan_frame_format_t;
 173:../drivers/fsl_flexcan.h **** 
 174:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN frame type. */
 175:../drivers/fsl_flexcan.h **** typedef enum _flexcan_frame_type
 176:../drivers/fsl_flexcan.h **** {
 177:../drivers/fsl_flexcan.h ****     kFLEXCAN_FrameTypeData = 0x0U,   /*!< Data frame type attribute. */
 178:../drivers/fsl_flexcan.h ****     kFLEXCAN_FrameTypeRemote = 0x1U, /*!< Remote frame type attribute. */
 179:../drivers/fsl_flexcan.h **** } flexcan_frame_type_t;
 180:../drivers/fsl_flexcan.h **** 
 181:../drivers/fsl_flexcan.h **** #if (!defined(FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE)) || !FSL_FEATURE_FLEXCAN_SUPPORT_E
 182:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN clock source. */
 183:../drivers/fsl_flexcan.h **** typedef enum _flexcan_clock_source
 184:../drivers/fsl_flexcan.h **** {
 185:../drivers/fsl_flexcan.h ****     kFLEXCAN_ClkSrcOsc = 0x0U,  /*!< FlexCAN Protocol Engine clock from Oscillator. */
 186:../drivers/fsl_flexcan.h ****     kFLEXCAN_ClkSrcPeri = 0x1U, /*!< FlexCAN Protocol Engine clock from Peripheral Clock. */
 187:../drivers/fsl_flexcan.h **** } flexcan_clock_source_t;
 188:../drivers/fsl_flexcan.h **** #endif /* FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE */
 189:../drivers/fsl_flexcan.h **** 
 190:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Rx Fifo Filter type. */
 191:../drivers/fsl_flexcan.h **** typedef enum _flexcan_rx_fifo_filter_type
 192:../drivers/fsl_flexcan.h **** {
 193:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoFilterTypeA = 0x0U, /*!< One full ID (standard and extended) per ID Filter eleme
 194:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoFilterTypeB =
 195:../drivers/fsl_flexcan.h ****         0x1U, /*!< Two full standard IDs or two partial 14-bit ID slices per ID Filter Table elemen
 196:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoFilterTypeC =
 197:../drivers/fsl_flexcan.h ****         0x2U, /*!< Four partial 8-bit Standard or extended ID slices per ID Filter Table element. *
 198:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoFilterTypeD = 0x3U, /*!< All frames rejected. */
 199:../drivers/fsl_flexcan.h **** } flexcan_rx_fifo_filter_type_t;
 200:../drivers/fsl_flexcan.h **** 
 201:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 202:../drivers/fsl_flexcan.h **** /*!
 203:../drivers/fsl_flexcan.h ****  * @brief FlexCAN Message Buffer Data Size.
 204:../drivers/fsl_flexcan.h ****  */
 205:../drivers/fsl_flexcan.h **** typedef enum _flexcan_mb_size
 206:../drivers/fsl_flexcan.h **** {
 207:../drivers/fsl_flexcan.h ****     kFLEXCAN_8BperMB = 0x0U,  /*!< Selects 8 bytes per Message Buffer. */
 208:../drivers/fsl_flexcan.h ****     kFLEXCAN_16BperMB = 0x1U, /*!< Selects 16 bytes per Message Buffer. */
 209:../drivers/fsl_flexcan.h ****     kFLEXCAN_32BperMB = 0x2U, /*!< Selects 32 bytes per Message Buffer. */
 210:../drivers/fsl_flexcan.h ****     kFLEXCAN_64BperMB = 0x3U, /*!< Selects 64 bytes per Message Buffer. */
 211:../drivers/fsl_flexcan.h **** } flexcan_mb_size_t;
 212:../drivers/fsl_flexcan.h **** #endif
 213:../drivers/fsl_flexcan.h **** 
 214:../drivers/fsl_flexcan.h **** /*!
 215:../drivers/fsl_flexcan.h ****  * @brief FlexCAN Rx FIFO priority.
 216:../drivers/fsl_flexcan.h ****  *
 217:../drivers/fsl_flexcan.h ****  * The matching process starts from the Rx MB(or Rx FIFO) with higher priority.
 218:../drivers/fsl_flexcan.h ****  * If no MB(or Rx FIFO filter) is satisfied, the matching process goes on with
 219:../drivers/fsl_flexcan.h ****  * the Rx FIFO(or Rx MB) with lower priority.
 220:../drivers/fsl_flexcan.h ****  */
 221:../drivers/fsl_flexcan.h **** typedef enum _flexcan_rx_fifo_priority
 222:../drivers/fsl_flexcan.h **** {
 223:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoPrioLow = 0x0U,  /*!< Matching process start from Rx Message Buffer first*/
 224:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoPrioHigh = 0x1U, /*!< Matching process start from Rx FIFO first*/
 225:../drivers/fsl_flexcan.h **** } flexcan_rx_fifo_priority_t;
 226:../drivers/fsl_flexcan.h **** 
 227:../drivers/fsl_flexcan.h **** /*!
 228:../drivers/fsl_flexcan.h ****  * @brief FlexCAN interrupt configuration structure, default settings all disabled.
 229:../drivers/fsl_flexcan.h ****  *
 230:../drivers/fsl_flexcan.h ****  * This structure contains the settings for all of the FlexCAN Module interrupt configurations.
 231:../drivers/fsl_flexcan.h ****  * Note: FlexCAN Message Buffers and Rx FIFO have their own interrupts.
 232:../drivers/fsl_flexcan.h ****  */
 233:../drivers/fsl_flexcan.h **** enum _flexcan_interrupt_enable
 234:../drivers/fsl_flexcan.h **** {
 235:../drivers/fsl_flexcan.h ****     kFLEXCAN_BusOffInterruptEnable = CAN_CTRL1_BOFFMSK_MASK,    /*!< Bus Off interrupt. */
 236:../drivers/fsl_flexcan.h ****     kFLEXCAN_ErrorInterruptEnable = CAN_CTRL1_ERRMSK_MASK,      /*!< Error interrupt. */
 237:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxWarningInterruptEnable = CAN_CTRL1_RWRNMSK_MASK, /*!< Rx Warning interrupt. */
 238:../drivers/fsl_flexcan.h ****     kFLEXCAN_TxWarningInterruptEnable = CAN_CTRL1_TWRNMSK_MASK, /*!< Tx Warning interrupt. */
 239:../drivers/fsl_flexcan.h ****     kFLEXCAN_WakeUpInterruptEnable = CAN_MCR_WAKMSK_MASK,       /*!< Wake Up interrupt. */
 240:../drivers/fsl_flexcan.h **** };
 241:../drivers/fsl_flexcan.h **** 
 242:../drivers/fsl_flexcan.h **** /*!
 243:../drivers/fsl_flexcan.h ****  * @brief FlexCAN status flags.
 244:../drivers/fsl_flexcan.h ****  *
 245:../drivers/fsl_flexcan.h ****  * This provides constants for the FlexCAN status flags for use in the FlexCAN functions.
 246:../drivers/fsl_flexcan.h ****  * Note: The CPU read action clears FlEXCAN_ErrorFlag, therefore user need to
 247:../drivers/fsl_flexcan.h ****  * read FlEXCAN_ErrorFlag and distinguish which error is occur using
 248:../drivers/fsl_flexcan.h ****  * @ref _flexcan_error_flags enumerations.
 249:../drivers/fsl_flexcan.h ****  */
 250:../drivers/fsl_flexcan.h **** enum _flexcan_flags
 251:../drivers/fsl_flexcan.h **** {
 252:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 253:../drivers/fsl_flexcan.h ****     kFLEXCAN_FDErrorIntFlag = CAN_ESR1_ERRINT_FAST_MASK,    /*!< Error Overrun Status. */
 254:../drivers/fsl_flexcan.h ****     kFLEXCAN_BusoffDoneIntFlag = CAN_ESR1_BOFFDONEINT_MASK, /*!< Error Overrun Status. */
 255:../drivers/fsl_flexcan.h **** #endif
 256:../drivers/fsl_flexcan.h ****     kFLEXCAN_SynchFlag = CAN_ESR1_SYNCH_MASK,              /*!< CAN Synchronization Status. */
 257:../drivers/fsl_flexcan.h ****     kFLEXCAN_TxWarningIntFlag = CAN_ESR1_TWRNINT_MASK,     /*!< Tx Warning Interrupt Flag. */
 258:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxWarningIntFlag = CAN_ESR1_RWRNINT_MASK,     /*!< Rx Warning Interrupt Flag. */
 259:../drivers/fsl_flexcan.h ****     kFLEXCAN_TxErrorWarningFlag = CAN_ESR1_TXWRN_MASK,     /*!< Tx Error Warning Status. */
 260:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxErrorWarningFlag = CAN_ESR1_RXWRN_MASK,     /*!< Rx Error Warning Status. */
 261:../drivers/fsl_flexcan.h ****     kFLEXCAN_IdleFlag = CAN_ESR1_IDLE_MASK,                /*!< CAN IDLE Status Flag. */
 262:../drivers/fsl_flexcan.h ****     kFLEXCAN_FaultConfinementFlag = CAN_ESR1_FLTCONF_MASK, /*!< Fault Confinement State Flag. */
 263:../drivers/fsl_flexcan.h ****     kFLEXCAN_TransmittingFlag = CAN_ESR1_TX_MASK,          /*!< FlexCAN In Transmission Status. */
 264:../drivers/fsl_flexcan.h ****     kFLEXCAN_ReceivingFlag = CAN_ESR1_RX_MASK,             /*!< FlexCAN In Reception Status. */
 265:../drivers/fsl_flexcan.h ****     kFLEXCAN_BusOffIntFlag = CAN_ESR1_BOFFINT_MASK,        /*!< Bus Off Interrupt Flag. */
 266:../drivers/fsl_flexcan.h ****     kFLEXCAN_ErrorIntFlag = CAN_ESR1_ERRINT_MASK,          /*!< Error Interrupt Flag. */
 267:../drivers/fsl_flexcan.h ****     kFLEXCAN_WakeUpIntFlag = CAN_ESR1_WAKINT_MASK,         /*!< Wake-Up Interrupt Flag. */
 268:../drivers/fsl_flexcan.h ****     kFLEXCAN_ErrorFlag =                                   /*!< All FlexCAN Error Status. */
 269:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 270:../drivers/fsl_flexcan.h ****     CAN_ESR1_STFERR_FAST_MASK | CAN_ESR1_FRMERR_FAST_MASK | CAN_ESR1_CRCERR_FAST_MASK | CAN_ESR1_BI
 271:../drivers/fsl_flexcan.h ****     CAN_ESR1_BIT1ERR_FAST_MASK | CAN_ESR1_ERROVR_MASK |
 272:../drivers/fsl_flexcan.h **** #endif
 273:../drivers/fsl_flexcan.h ****     CAN_ESR1_BIT1ERR_MASK | CAN_ESR1_BIT0ERR_MASK | CAN_ESR1_ACKERR_MASK | CAN_ESR1_CRCERR_MASK | C
 274:../drivers/fsl_flexcan.h ****     CAN_ESR1_STFERR_MASK,
 275:../drivers/fsl_flexcan.h **** };
 276:../drivers/fsl_flexcan.h **** 
 277:../drivers/fsl_flexcan.h **** /*!
 278:../drivers/fsl_flexcan.h ****  * @brief FlexCAN error status flags.
 279:../drivers/fsl_flexcan.h ****  *
 280:../drivers/fsl_flexcan.h ****  * The FlexCAN Error Status enumerations is used to report current error of the FlexCAN bus.
 281:../drivers/fsl_flexcan.h ****  * This enumerations should be used with KFLEXCAN_ErrorFlag in @ref _flexcan_flags enumerations
 282:../drivers/fsl_flexcan.h ****  * to ditermine which error is generated.
 283:../drivers/fsl_flexcan.h ****  */
 284:../drivers/fsl_flexcan.h **** enum _flexcan_error_flags
 285:../drivers/fsl_flexcan.h **** {
 286:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 287:../drivers/fsl_flexcan.h ****     kFLEXCAN_FDStuffingError = CAN_ESR1_STFERR_FAST_MASK, /*!< Stuffing Error. */
 288:../drivers/fsl_flexcan.h ****     kFLEXCAN_FDFormError = CAN_ESR1_FRMERR_FAST_MASK,     /*!< Form Error. */
 289:../drivers/fsl_flexcan.h ****     kFLEXCAN_FDCrcError = CAN_ESR1_CRCERR_FAST_MASK,      /*!< Cyclic Redundancy Check Error. */
 290:../drivers/fsl_flexcan.h ****     kFLEXCAN_FDBit0Error = CAN_ESR1_BIT0ERR_FAST_MASK,    /*!< Unable to send dominant bit. */
 291:../drivers/fsl_flexcan.h ****     kFLEXCAN_FDBit1Error = CAN_ESR1_BIT1ERR_FAST_MASK,    /*!< Unable to send recessive bit. */
 292:../drivers/fsl_flexcan.h ****     kFLEXCAN_OverrunError = CAN_ESR1_ERROVR_MASK,         /*!< Error Overrun Status. */
 293:../drivers/fsl_flexcan.h **** #endif
 294:../drivers/fsl_flexcan.h ****     kFLEXCAN_StuffingError = CAN_ESR1_STFERR_MASK, /*!< Stuffing Error. */
 295:../drivers/fsl_flexcan.h ****     kFLEXCAN_FormError = CAN_ESR1_FRMERR_MASK,     /*!< Form Error. */
 296:../drivers/fsl_flexcan.h ****     kFLEXCAN_CrcError = CAN_ESR1_CRCERR_MASK,      /*!< Cyclic Redundancy Check Error. */
 297:../drivers/fsl_flexcan.h ****     kFLEXCAN_AckError = CAN_ESR1_ACKERR_MASK,      /*!< Received no ACK on transmission. */
 298:../drivers/fsl_flexcan.h ****     kFLEXCAN_Bit0Error = CAN_ESR1_BIT0ERR_MASK,    /*!< Unable to send dominant bit. */
 299:../drivers/fsl_flexcan.h ****     kFLEXCAN_Bit1Error = CAN_ESR1_BIT1ERR_MASK,    /*!< Unable to send recessive bit. */
 300:../drivers/fsl_flexcan.h **** };
 301:../drivers/fsl_flexcan.h **** 
 302:../drivers/fsl_flexcan.h **** /*!
 303:../drivers/fsl_flexcan.h ****  * @brief FlexCAN Rx FIFO status flags.
 304:../drivers/fsl_flexcan.h ****  *
 305:../drivers/fsl_flexcan.h ****  * The FlexCAN Rx FIFO Status enumerations are used to determine the status of the
 306:../drivers/fsl_flexcan.h ****  * Rx FIFO. Because Rx FIFO occupy the MB0 ~ MB7 (Rx Fifo filter also occupies
 307:../drivers/fsl_flexcan.h ****  * more Message Buffer space), Rx FIFO status flags are mapped to the corresponding
 308:../drivers/fsl_flexcan.h ****  * Message Buffer status flags.
 309:../drivers/fsl_flexcan.h ****  */
 310:../drivers/fsl_flexcan.h **** enum _flexcan_rx_fifo_flags
 311:../drivers/fsl_flexcan.h **** {
 312:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoOverflowFlag = CAN_IFLAG1_BUF7I_MASK, /*!< Rx FIFO overflow flag. */
 313:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoWarningFlag = CAN_IFLAG1_BUF6I_MASK,  /*!< Rx FIFO almost full flag. */
 314:../drivers/fsl_flexcan.h ****     kFLEXCAN_RxFifoFrameAvlFlag = CAN_IFLAG1_BUF5I_MASK, /*!< Frames available in Rx FIFO flag. */
 315:../drivers/fsl_flexcan.h **** };
 316:../drivers/fsl_flexcan.h **** 
 317:../drivers/fsl_flexcan.h **** #if defined(__CC_ARM)
 318:../drivers/fsl_flexcan.h **** #pragma anon_unions
 319:../drivers/fsl_flexcan.h **** #endif
 320:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN message frame structure. */
 321:../drivers/fsl_flexcan.h **** typedef struct _flexcan_frame
 322:../drivers/fsl_flexcan.h **** {
 323:../drivers/fsl_flexcan.h ****     struct
 324:../drivers/fsl_flexcan.h ****     {
 325:../drivers/fsl_flexcan.h ****         uint32_t timestamp : 16; /*!< FlexCAN internal Free-Running Counter Time Stamp. */
 326:../drivers/fsl_flexcan.h ****         uint32_t length : 4;     /*!< CAN frame payload length in bytes(Range: 0~8). */
 327:../drivers/fsl_flexcan.h ****         uint32_t type : 1;       /*!< CAN Frame Type(DATA or REMOTE). */
 328:../drivers/fsl_flexcan.h ****         uint32_t format : 1;     /*!< CAN Frame Identifier(STD or EXT format). */
 329:../drivers/fsl_flexcan.h ****         uint32_t : 1;            /*!< Reserved. */
 330:../drivers/fsl_flexcan.h ****         uint32_t idhit : 9;      /*!< CAN Rx FIFO filter hit id(This value is only used in Rx FIFO 
 331:../drivers/fsl_flexcan.h ****     };
 332:../drivers/fsl_flexcan.h ****     struct
 333:../drivers/fsl_flexcan.h ****     {
 334:../drivers/fsl_flexcan.h ****         uint32_t id : 29; /*!< CAN Frame Identifier, should be set using FLEXCAN_ID_EXT() or FLEXCA
 335:../drivers/fsl_flexcan.h ****         uint32_t : 3;     /*!< Reserved. */
 336:../drivers/fsl_flexcan.h ****     };
 337:../drivers/fsl_flexcan.h ****     union
 338:../drivers/fsl_flexcan.h ****     {
 339:../drivers/fsl_flexcan.h ****         struct
 340:../drivers/fsl_flexcan.h ****         {
 341:../drivers/fsl_flexcan.h ****             uint32_t dataWord0; /*!< CAN Frame payload word0. */
 342:../drivers/fsl_flexcan.h ****             uint32_t dataWord1; /*!< CAN Frame payload word1. */
 343:../drivers/fsl_flexcan.h ****         };
 344:../drivers/fsl_flexcan.h ****         struct
 345:../drivers/fsl_flexcan.h ****         {
 346:../drivers/fsl_flexcan.h ****             uint8_t dataByte3; /*!< CAN Frame payload byte3. */
 347:../drivers/fsl_flexcan.h ****             uint8_t dataByte2; /*!< CAN Frame payload byte2. */
 348:../drivers/fsl_flexcan.h ****             uint8_t dataByte1; /*!< CAN Frame payload byte1. */
 349:../drivers/fsl_flexcan.h ****             uint8_t dataByte0; /*!< CAN Frame payload byte0. */
 350:../drivers/fsl_flexcan.h ****             uint8_t dataByte7; /*!< CAN Frame payload byte7. */
 351:../drivers/fsl_flexcan.h ****             uint8_t dataByte6; /*!< CAN Frame payload byte6. */
 352:../drivers/fsl_flexcan.h ****             uint8_t dataByte5; /*!< CAN Frame payload byte5. */
 353:../drivers/fsl_flexcan.h ****             uint8_t dataByte4; /*!< CAN Frame payload byte4. */
 354:../drivers/fsl_flexcan.h ****         };
 355:../drivers/fsl_flexcan.h ****     };
 356:../drivers/fsl_flexcan.h **** } flexcan_frame_t;
 357:../drivers/fsl_flexcan.h **** 
 358:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 359:../drivers/fsl_flexcan.h **** /*! @brief CAN FDmessage frame structure. */
 360:../drivers/fsl_flexcan.h **** typedef struct _flexcan_fd_frame
 361:../drivers/fsl_flexcan.h **** {
 362:../drivers/fsl_flexcan.h ****     struct
 363:../drivers/fsl_flexcan.h ****     {
 364:../drivers/fsl_flexcan.h ****         uint32_t timestamp : 16; /*!< FlexCAN internal Free-Running Counter Time Stamp. */
 365:../drivers/fsl_flexcan.h ****         uint32_t length : 4;     /*!< CAN frame payload length in bytes(Range: 0~8). */
 366:../drivers/fsl_flexcan.h ****         uint32_t type : 1;       /*!< CAN Frame Type(DATA or REMOTE). */
 367:../drivers/fsl_flexcan.h ****         uint32_t format : 1;     /*!< CAN Frame Identifier(STD or EXT format). */
 368:../drivers/fsl_flexcan.h ****         uint32_t srr : 1;        /*!< Substitute Remote request. */
 369:../drivers/fsl_flexcan.h ****         uint32_t : 1;
 370:../drivers/fsl_flexcan.h ****         uint32_t code : 4;       /*!< Message Buffer Code. */
 371:../drivers/fsl_flexcan.h ****         uint32_t : 1;
 372:../drivers/fsl_flexcan.h ****         uint32_t esi : 1;        /*!< Error State Indicator. */
 373:../drivers/fsl_flexcan.h ****         uint32_t brs : 1;        /*!< Bit Rate Switch. */
 374:../drivers/fsl_flexcan.h ****         uint32_t edl : 1;        /*!< Extended Data Length. */
 375:../drivers/fsl_flexcan.h ****     };
 376:../drivers/fsl_flexcan.h ****     struct
 377:../drivers/fsl_flexcan.h ****     {
 378:../drivers/fsl_flexcan.h ****         uint32_t id : 29; /*!< CAN Frame Identifier, should be set using FLEXCAN_ID_EXT() or FLEXCA
 379:../drivers/fsl_flexcan.h ****         uint32_t : 3;     /*!< Reserved. */
 380:../drivers/fsl_flexcan.h ****     };
 381:../drivers/fsl_flexcan.h ****     union
 382:../drivers/fsl_flexcan.h ****     {
 383:../drivers/fsl_flexcan.h ****         struct
 384:../drivers/fsl_flexcan.h ****         {
 385:../drivers/fsl_flexcan.h ****             uint32_t dataWord[16]; /*!< CAN FD Frame payload, 16 double word maximum. */
 386:../drivers/fsl_flexcan.h ****         };
 387:../drivers/fsl_flexcan.h ****         struct
 388:../drivers/fsl_flexcan.h ****         {
 389:../drivers/fsl_flexcan.h ****             uint8_t dataByte3; /*!< CAN Frame payload byte3. */
 390:../drivers/fsl_flexcan.h ****             uint8_t dataByte2; /*!< CAN Frame payload byte2. */
 391:../drivers/fsl_flexcan.h ****             uint8_t dataByte1; /*!< CAN Frame payload byte1. */
 392:../drivers/fsl_flexcan.h ****             uint8_t dataByte0; /*!< CAN Frame payload byte0. */
 393:../drivers/fsl_flexcan.h ****             uint8_t dataByte7; /*!< CAN Frame payload byte7. */
 394:../drivers/fsl_flexcan.h ****             uint8_t dataByte6; /*!< CAN Frame payload byte6. */
 395:../drivers/fsl_flexcan.h ****             uint8_t dataByte5; /*!< CAN Frame payload byte5. */
 396:../drivers/fsl_flexcan.h ****             uint8_t dataByte4; /*!< CAN Frame payload byte4. */
 397:../drivers/fsl_flexcan.h ****         };
 398:../drivers/fsl_flexcan.h ****     };
 399:../drivers/fsl_flexcan.h **** } flexcan_fd_frame_t;
 400:../drivers/fsl_flexcan.h **** #endif
 401:../drivers/fsl_flexcan.h **** 
 402:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN protocol timing characteristic configuration structure. */
 403:../drivers/fsl_flexcan.h **** typedef struct _flexcan_timing_config
 404:../drivers/fsl_flexcan.h **** {
 405:../drivers/fsl_flexcan.h ****     uint16_t preDivider; /*!< Clock Pre-scaler Division Factor. */
 406:../drivers/fsl_flexcan.h ****     uint8_t rJumpwidth;  /*!< Re-sync Jump Width. */
 407:../drivers/fsl_flexcan.h ****     uint8_t phaseSeg1;   /*!< Phase Segment 1. */
 408:../drivers/fsl_flexcan.h ****     uint8_t phaseSeg2;   /*!< Phase Segment 2. */
 409:../drivers/fsl_flexcan.h ****     uint8_t propSeg;     /*!< Propagation Segment. */
 410:../drivers/fsl_flexcan.h **** } flexcan_timing_config_t;
 411:../drivers/fsl_flexcan.h **** 
 412:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN module configuration structure. */
 413:../drivers/fsl_flexcan.h **** typedef struct _flexcan_config
 414:../drivers/fsl_flexcan.h **** {
 415:../drivers/fsl_flexcan.h ****     uint32_t baudRate; /*!< FlexCAN baud rate in bps. */
 416:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 417:../drivers/fsl_flexcan.h ****     uint32_t baudRateFD; /*!< FlexCAN FD baud rate in bps. */
 418:../drivers/fsl_flexcan.h **** #endif
 419:../drivers/fsl_flexcan.h **** #if (!defined(FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE)) || !FSL_FEATURE_FLEXCAN_SUPPORT_E
 420:../drivers/fsl_flexcan.h ****     flexcan_clock_source_t clkSrc; /*!< Clock source for FlexCAN Protocol Engine. */
 421:../drivers/fsl_flexcan.h **** #endif                             /* FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE */
 422:../drivers/fsl_flexcan.h ****     uint8_t maxMbNum;              /*!< The maximum number of Message Buffers used by user. */
 423:../drivers/fsl_flexcan.h ****     bool enableLoopBack;           /*!< Enable or Disable Loop Back Self Test Mode. */
 424:../drivers/fsl_flexcan.h ****     bool enableSelfWakeup;         /*!< Enable or Disable Self Wakeup Mode. */
 425:../drivers/fsl_flexcan.h ****     bool enableIndividMask;        /*!< Enable or Disable Rx Individual Mask. */
 426:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_DOZE_MODE_SUPPORT) && FSL_FEATURE_FLEXCAN_HAS_DOZE_MODE_SUPPOR
 427:../drivers/fsl_flexcan.h ****     bool enableDoze; /*!< Enable or Disable Doze Mode. */
 428:../drivers/fsl_flexcan.h **** #endif
 429:../drivers/fsl_flexcan.h ****     flexcan_timing_config_t timingConfig;       /* Protocol timing . */
 430:../drivers/fsl_flexcan.h **** } flexcan_config_t;
 431:../drivers/fsl_flexcan.h **** 
 432:../drivers/fsl_flexcan.h **** /*!
 433:../drivers/fsl_flexcan.h ****  * @brief FlexCAN Receive Message Buffer configuration structure
 434:../drivers/fsl_flexcan.h ****  *
 435:../drivers/fsl_flexcan.h ****  * This structure is used as the parameter of FLEXCAN_SetRxMbConfig() function.
 436:../drivers/fsl_flexcan.h ****  * The FLEXCAN_SetRxMbConfig() function is used to configure FlexCAN Receive
 437:../drivers/fsl_flexcan.h ****  * Message Buffer. The function abort previous receiving process, clean the
 438:../drivers/fsl_flexcan.h ****  * Message Buffer and activate the Rx Message Buffer using given Message Buffer
 439:../drivers/fsl_flexcan.h ****  * setting.
 440:../drivers/fsl_flexcan.h ****  */
 441:../drivers/fsl_flexcan.h **** typedef struct _flexcan_rx_mb_config
 442:../drivers/fsl_flexcan.h **** {
 443:../drivers/fsl_flexcan.h ****     uint32_t id;                   /*!< CAN Message Buffer Frame Identifier, should be set using
 444:../drivers/fsl_flexcan.h ****                                         FLEXCAN_ID_EXT() or FLEXCAN_ID_STD() macro. */
 445:../drivers/fsl_flexcan.h ****     flexcan_frame_format_t format; /*!< CAN Frame Identifier format(Standard of Extend). */
 446:../drivers/fsl_flexcan.h ****     flexcan_frame_type_t type;     /*!< CAN Frame Type(Data or Remote). */
 447:../drivers/fsl_flexcan.h **** } flexcan_rx_mb_config_t;
 448:../drivers/fsl_flexcan.h **** 
 449:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Rx FIFO configuration structure. */
 450:../drivers/fsl_flexcan.h **** typedef struct _flexcan_rx_fifo_config
 451:../drivers/fsl_flexcan.h **** {
 452:../drivers/fsl_flexcan.h ****     uint32_t *idFilterTable;                    /*!< Pointer to the FlexCAN Rx FIFO identifier filt
 453:../drivers/fsl_flexcan.h ****     uint8_t idFilterNum;                        /*!< The quantity of filter elements. */
 454:../drivers/fsl_flexcan.h ****     flexcan_rx_fifo_filter_type_t idFilterType; /*!< The FlexCAN Rx FIFO Filter type. */
 455:../drivers/fsl_flexcan.h ****     flexcan_rx_fifo_priority_t priority;        /*!< The FlexCAN Rx FIFO receive priority. */
 456:../drivers/fsl_flexcan.h **** } flexcan_rx_fifo_config_t;
 457:../drivers/fsl_flexcan.h **** 
 458:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Message Buffer transfer. */
 459:../drivers/fsl_flexcan.h **** typedef struct _flexcan_mb_transfer
 460:../drivers/fsl_flexcan.h **** {
 461:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 462:../drivers/fsl_flexcan.h ****     flexcan_fd_frame_t *framefd;
 463:../drivers/fsl_flexcan.h **** #endif
 464:../drivers/fsl_flexcan.h ****     flexcan_frame_t *frame; /*!< The buffer of CAN Message to be transfer. */
 465:../drivers/fsl_flexcan.h ****     uint8_t mbIdx;          /*!< The index of Message buffer used to transfer Message. */
 466:../drivers/fsl_flexcan.h **** } flexcan_mb_transfer_t;
 467:../drivers/fsl_flexcan.h **** 
 468:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN Rx FIFO transfer. */
 469:../drivers/fsl_flexcan.h **** typedef struct _flexcan_fifo_transfer
 470:../drivers/fsl_flexcan.h **** {
 471:../drivers/fsl_flexcan.h ****     flexcan_frame_t *frame; /*!< The buffer of CAN Message to be received from Rx FIFO. */
 472:../drivers/fsl_flexcan.h **** } flexcan_fifo_transfer_t;
 473:../drivers/fsl_flexcan.h **** 
 474:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN handle structure definition. */
 475:../drivers/fsl_flexcan.h **** typedef struct _flexcan_handle flexcan_handle_t;
 476:../drivers/fsl_flexcan.h **** 
 477:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN transfer callback function.
 478:../drivers/fsl_flexcan.h ****  *
 479:../drivers/fsl_flexcan.h ****  *  The FlexCAN transfer callback returns a value from the underlying layer.
 480:../drivers/fsl_flexcan.h ****  *  If the status equals to kStatus_FLEXCAN_ErrorStatus, the result parameter is the Content of
 481:../drivers/fsl_flexcan.h ****  *  FlexCAN status register which can be used to get the working status(or error status) of FlexCAN
 482:../drivers/fsl_flexcan.h ****  *  If the status equals to other FlexCAN Message Buffer transfer status, the result is the index o
 483:../drivers/fsl_flexcan.h ****  *  Message Buffer that generate transfer event.
 484:../drivers/fsl_flexcan.h ****  *  If the status equals to other FlexCAN Message Buffer transfer status, the result is meaningless
 485:../drivers/fsl_flexcan.h ****  *  Ignored.
 486:../drivers/fsl_flexcan.h ****  */
 487:../drivers/fsl_flexcan.h **** typedef void (*flexcan_transfer_callback_t)(
 488:../drivers/fsl_flexcan.h ****     CAN_Type *base, flexcan_handle_t *handle, status_t status, uint32_t result, void *userData);
 489:../drivers/fsl_flexcan.h **** 
 490:../drivers/fsl_flexcan.h **** /*! @brief FlexCAN handle structure. */
 491:../drivers/fsl_flexcan.h **** struct _flexcan_handle
 492:../drivers/fsl_flexcan.h **** {
 493:../drivers/fsl_flexcan.h ****     flexcan_transfer_callback_t callback; /*!< Callback function. */
 494:../drivers/fsl_flexcan.h ****     void *userData;                       /*!< FlexCAN callback function parameter.*/
 495:../drivers/fsl_flexcan.h ****     flexcan_frame_t *volatile mbFrameBuf[CAN_WORD1_COUNT];
 496:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 497:../drivers/fsl_flexcan.h ****     flexcan_fd_frame_t *volatile mbFDFrameBuf[CAN_WORD1_COUNT];
 498:../drivers/fsl_flexcan.h **** #endif
 499:../drivers/fsl_flexcan.h ****     /*!< The buffer for received data from Message Buffers. */
 500:../drivers/fsl_flexcan.h ****     flexcan_frame_t *volatile rxFifoFrameBuf;  /*!< The buffer for received data from Rx FIFO. */
 501:../drivers/fsl_flexcan.h ****     volatile uint8_t mbState[CAN_WORD1_COUNT]; /*!< Message Buffer transfer state. */
 502:../drivers/fsl_flexcan.h ****     volatile uint8_t rxFifoState;              /*!< Rx FIFO transfer state. */
 503:../drivers/fsl_flexcan.h **** };
 504:../drivers/fsl_flexcan.h **** 
 505:../drivers/fsl_flexcan.h **** /******************************************************************************
 506:../drivers/fsl_flexcan.h ****  * API
 507:../drivers/fsl_flexcan.h ****  *****************************************************************************/
 508:../drivers/fsl_flexcan.h **** 
 509:../drivers/fsl_flexcan.h **** #if defined(__cplusplus)
 510:../drivers/fsl_flexcan.h **** extern "C" {
 511:../drivers/fsl_flexcan.h **** #endif
 512:../drivers/fsl_flexcan.h **** 
 513:../drivers/fsl_flexcan.h **** /*!
 514:../drivers/fsl_flexcan.h ****  * @name Initialization and deinitialization
 515:../drivers/fsl_flexcan.h ****  * @{
 516:../drivers/fsl_flexcan.h ****  */
 517:../drivers/fsl_flexcan.h **** 
 518:../drivers/fsl_flexcan.h **** /*!
 519:../drivers/fsl_flexcan.h ****  * @brief Initializes a FlexCAN instance.
 520:../drivers/fsl_flexcan.h ****  *
 521:../drivers/fsl_flexcan.h ****  * This function initializes the FlexCAN module with user-defined settings.
 522:../drivers/fsl_flexcan.h ****  * This example shows how to set up the flexcan_config_t parameters and how
 523:../drivers/fsl_flexcan.h ****  * to call the FLEXCAN_Init function by passing in these parameters.
 524:../drivers/fsl_flexcan.h ****  *  @code
 525:../drivers/fsl_flexcan.h ****  *   flexcan_config_t flexcanConfig;
 526:../drivers/fsl_flexcan.h ****  *   flexcanConfig.clkSrc            = kFLEXCAN_ClkSrcOsc;
 527:../drivers/fsl_flexcan.h ****  *   flexcanConfig.baudRate          = 1000000U;
 528:../drivers/fsl_flexcan.h ****  *   flexcanConfig.maxMbNum          = 16;
 529:../drivers/fsl_flexcan.h ****  *   flexcanConfig.enableLoopBack    = false;
 530:../drivers/fsl_flexcan.h ****  *   flexcanConfig.enableSelfWakeup  = false;
 531:../drivers/fsl_flexcan.h ****  *   flexcanConfig.enableIndividMask = false;
 532:../drivers/fsl_flexcan.h ****  *   flexcanConfig.enableDoze        = false;
 533:../drivers/fsl_flexcan.h ****  *   flexcanConfig.timingConfig      = timingConfig;
 534:../drivers/fsl_flexcan.h ****  *   FLEXCAN_Init(CAN0, &flexcanConfig, 8000000UL);
 535:../drivers/fsl_flexcan.h ****  *   @endcode
 536:../drivers/fsl_flexcan.h ****  *
 537:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 538:../drivers/fsl_flexcan.h ****  * @param config Pointer to the user-defined configuration structure.
 539:../drivers/fsl_flexcan.h ****  * @param sourceClock_Hz FlexCAN Protocol Engine clock source frequency in Hz.
 540:../drivers/fsl_flexcan.h ****  */
 541:../drivers/fsl_flexcan.h **** void FLEXCAN_Init(CAN_Type *base, const flexcan_config_t *config, uint32_t sourceClock_Hz);
 542:../drivers/fsl_flexcan.h **** 
 543:../drivers/fsl_flexcan.h **** /*!
 544:../drivers/fsl_flexcan.h ****  * @brief De-initializes a FlexCAN instance.
 545:../drivers/fsl_flexcan.h ****  *
 546:../drivers/fsl_flexcan.h ****  * This function disables the FlexCAN module clock and sets all register values
 547:../drivers/fsl_flexcan.h ****  * to the reset value.
 548:../drivers/fsl_flexcan.h ****  *
 549:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 550:../drivers/fsl_flexcan.h ****  */
 551:../drivers/fsl_flexcan.h **** void FLEXCAN_Deinit(CAN_Type *base);
 552:../drivers/fsl_flexcan.h **** 
 553:../drivers/fsl_flexcan.h **** /*!
 554:../drivers/fsl_flexcan.h ****  * @brief Gets the default configuration structure.
 555:../drivers/fsl_flexcan.h ****  *
 556:../drivers/fsl_flexcan.h ****  * This function initializes the FlexCAN configuration structure to default values. The default
 557:../drivers/fsl_flexcan.h ****  * values are as follows.
 558:../drivers/fsl_flexcan.h ****  *   flexcanConfig->clkSrc            = KFLEXCAN_ClkSrcOsc;
 559:../drivers/fsl_flexcan.h ****  *   flexcanConfig->baudRate          = 1000000U;
 560:../drivers/fsl_flexcan.h ****  *   flexcanConfig->maxMbNum          = 16;
 561:../drivers/fsl_flexcan.h ****  *   flexcanConfig->enableLoopBack    = false;
 562:../drivers/fsl_flexcan.h ****  *   flexcanConfig->enableSelfWakeup  = false;
 563:../drivers/fsl_flexcan.h ****  *   flexcanConfig->enableIndividMask = false;
 564:../drivers/fsl_flexcan.h ****  *   flexcanConfig->enableDoze        = false;
 565:../drivers/fsl_flexcan.h ****  *   flexcanConfig.timingConfig       = timingConfig;
 566:../drivers/fsl_flexcan.h ****  *
 567:../drivers/fsl_flexcan.h ****  * @param config Pointer to the FlexCAN configuration structure.
 568:../drivers/fsl_flexcan.h ****  */
 569:../drivers/fsl_flexcan.h **** void FLEXCAN_GetDefaultConfig(flexcan_config_t *config);
 570:../drivers/fsl_flexcan.h **** 
 571:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 572:../drivers/fsl_flexcan.h **** /*!
 573:../drivers/fsl_flexcan.h ****  * @brief Sets the FlexCAN FD protocol characteristic.
 574:../drivers/fsl_flexcan.h ****  *
 575:../drivers/fsl_flexcan.h ****  * This function gives user settings to CAN FD characteristic.
 576:../drivers/fsl_flexcan.h ****  *
 577:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 578:../drivers/fsl_flexcan.h ****  * @param dataSize Quantity of data bytes allocated for the message payload.
 579:../drivers/fsl_flexcan.h ****  * @param brs Enable/Disable the effect of bit rate switch during data phase of Tx messages.
 580:../drivers/fsl_flexcan.h ****  */
 581:../drivers/fsl_flexcan.h **** void FLEXCAN_FDEnable(CAN_Type *base, flexcan_mb_size_t dataSize, bool brs);
 582:../drivers/fsl_flexcan.h **** #endif
 583:../drivers/fsl_flexcan.h **** 
 584:../drivers/fsl_flexcan.h **** /* @} */
 585:../drivers/fsl_flexcan.h **** 
 586:../drivers/fsl_flexcan.h **** /*!
 587:../drivers/fsl_flexcan.h ****  * @name Configuration.
 588:../drivers/fsl_flexcan.h ****  * @{
 589:../drivers/fsl_flexcan.h ****  */
 590:../drivers/fsl_flexcan.h **** 
 591:../drivers/fsl_flexcan.h **** /*!
 592:../drivers/fsl_flexcan.h ****  * @brief Sets the FlexCAN protocol timing characteristic.
 593:../drivers/fsl_flexcan.h ****  *
 594:../drivers/fsl_flexcan.h ****  * This function gives user settings to CAN bus timing characteristic.
 595:../drivers/fsl_flexcan.h ****  * The function is for an experienced user. For less experienced users, call
 596:../drivers/fsl_flexcan.h ****  * the FLEXCAN_Init() and fill the baud rate field with a desired value.
 597:../drivers/fsl_flexcan.h ****  * This provides the default timing characteristics to the module.
 598:../drivers/fsl_flexcan.h ****  *
 599:../drivers/fsl_flexcan.h ****  * Note that calling FLEXCAN_SetTimingConfig() overrides the baud rate set
 600:../drivers/fsl_flexcan.h ****  * in FLEXCAN_Init().
 601:../drivers/fsl_flexcan.h ****  *
 602:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 603:../drivers/fsl_flexcan.h ****  * @param config Pointer to the timing configuration structure.
 604:../drivers/fsl_flexcan.h ****  */
 605:../drivers/fsl_flexcan.h **** void FLEXCAN_SetTimingConfig(CAN_Type *base, const flexcan_timing_config_t *config);
 606:../drivers/fsl_flexcan.h **** 
 607:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 608:../drivers/fsl_flexcan.h **** /*!
 609:../drivers/fsl_flexcan.h ****  * @brief Sets the FlexCAN FD protocol timing characteristic.
 610:../drivers/fsl_flexcan.h ****  *
 611:../drivers/fsl_flexcan.h ****  * This function gives user settings to CAN bus timing characteristic.
 612:../drivers/fsl_flexcan.h ****  * The function is for an experienced user. For less experienced users, call
 613:../drivers/fsl_flexcan.h ****  * the FLEXCAN_Init() and fill the baud rate field with a desired value.
 614:../drivers/fsl_flexcan.h ****  * This provides the default timing characteristics to the module.
 615:../drivers/fsl_flexcan.h ****  *
 616:../drivers/fsl_flexcan.h ****  * Note that calling FLEXCAN_SetFDTimingConfig() overrides the baud rate set
 617:../drivers/fsl_flexcan.h ****  * in FLEXCAN_Init().
 618:../drivers/fsl_flexcan.h ****  *
 619:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 620:../drivers/fsl_flexcan.h ****  * @param config Pointer to the timing configuration structure.
 621:../drivers/fsl_flexcan.h ****  */
 622:../drivers/fsl_flexcan.h **** void FLEXCAN_SetFDTimingConfig(CAN_Type *base, const flexcan_timing_config_t *config);
 623:../drivers/fsl_flexcan.h **** #endif
 624:../drivers/fsl_flexcan.h **** 
 625:../drivers/fsl_flexcan.h **** /*!
 626:../drivers/fsl_flexcan.h ****  * @brief Sets the FlexCAN receive message buffer global mask.
 627:../drivers/fsl_flexcan.h ****  *
 628:../drivers/fsl_flexcan.h ****  * This function sets the global mask for the FlexCAN message buffer in a matching process.
 629:../drivers/fsl_flexcan.h ****  * The configuration is only effective when the Rx individual mask is disabled in the FLEXCAN_Init(
 630:../drivers/fsl_flexcan.h ****  *
 631:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 632:../drivers/fsl_flexcan.h ****  * @param mask Rx Message Buffer Global Mask value.
 633:../drivers/fsl_flexcan.h ****  */
 634:../drivers/fsl_flexcan.h **** void FLEXCAN_SetRxMbGlobalMask(CAN_Type *base, uint32_t mask);
 635:../drivers/fsl_flexcan.h **** 
 636:../drivers/fsl_flexcan.h **** /*!
 637:../drivers/fsl_flexcan.h ****  * @brief Sets the FlexCAN receive FIFO global mask.
 638:../drivers/fsl_flexcan.h ****  *
 639:../drivers/fsl_flexcan.h ****  * This function sets the global mask for FlexCAN FIFO in a matching process.
 640:../drivers/fsl_flexcan.h ****  *
 641:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 642:../drivers/fsl_flexcan.h ****  * @param mask Rx Fifo Global Mask value.
 643:../drivers/fsl_flexcan.h ****  */
 644:../drivers/fsl_flexcan.h **** void FLEXCAN_SetRxFifoGlobalMask(CAN_Type *base, uint32_t mask);
 645:../drivers/fsl_flexcan.h **** 
 646:../drivers/fsl_flexcan.h **** /*!
 647:../drivers/fsl_flexcan.h ****  * @brief Sets the FlexCAN receive individual mask.
 648:../drivers/fsl_flexcan.h ****  *
 649:../drivers/fsl_flexcan.h ****  * This function sets the individual mask for the FlexCAN matching process.
 650:../drivers/fsl_flexcan.h ****  * The configuration is only effective when the Rx individual mask is enabled in the FLEXCAN_Init()
 651:../drivers/fsl_flexcan.h ****  * If the Rx FIFO is disabled, the individual mask is applied to the corresponding Message Buffer.
 652:../drivers/fsl_flexcan.h ****  * If the Rx FIFO is enabled, the individual mask for Rx FIFO occupied Message Buffer is applied to
 653:../drivers/fsl_flexcan.h ****  * the Rx Filter with the same index. Note that only the first 32
 654:../drivers/fsl_flexcan.h ****  * individual masks can be used as the Rx FIFO filter mask.
 655:../drivers/fsl_flexcan.h ****  *
 656:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 657:../drivers/fsl_flexcan.h ****  * @param maskIdx The Index of individual Mask.
 658:../drivers/fsl_flexcan.h ****  * @param mask Rx Individual Mask value.
 659:../drivers/fsl_flexcan.h ****  */
 660:../drivers/fsl_flexcan.h **** void FLEXCAN_SetRxIndividualMask(CAN_Type *base, uint8_t maskIdx, uint32_t mask);
 661:../drivers/fsl_flexcan.h **** 
 662:../drivers/fsl_flexcan.h **** /*!
 663:../drivers/fsl_flexcan.h ****  * @brief Configures a FlexCAN transmit message buffer.
 664:../drivers/fsl_flexcan.h ****  *
 665:../drivers/fsl_flexcan.h ****  * This function aborts the previous transmission, cleans the Message Buffer, and
 666:../drivers/fsl_flexcan.h ****  * configures it as a Transmit Message Buffer.
 667:../drivers/fsl_flexcan.h ****  *
 668:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 669:../drivers/fsl_flexcan.h ****  * @param mbIdx The Message Buffer index.
 670:../drivers/fsl_flexcan.h ****  * @param enable Enable/disable Tx Message Buffer.
 671:../drivers/fsl_flexcan.h ****  *               - true: Enable Tx Message Buffer.
 672:../drivers/fsl_flexcan.h ****  *               - false: Disable Tx Message Buffer.
 673:../drivers/fsl_flexcan.h ****  */
 674:../drivers/fsl_flexcan.h **** void FLEXCAN_SetTxMbConfig(CAN_Type *base, uint8_t mbIdx, bool enable);
 675:../drivers/fsl_flexcan.h **** 
 676:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 677:../drivers/fsl_flexcan.h **** /*!
 678:../drivers/fsl_flexcan.h ****  * @brief Configures a FlexCAN transmit message buffer.
 679:../drivers/fsl_flexcan.h ****  *
 680:../drivers/fsl_flexcan.h ****  * This function aborts the previous transmission, cleans the Message Buffer, and
 681:../drivers/fsl_flexcan.h ****  * configures it as a Transmit Message Buffer.
 682:../drivers/fsl_flexcan.h ****  *
 683:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 684:../drivers/fsl_flexcan.h ****  * @param mbIdx The Message Buffer index.
 685:../drivers/fsl_flexcan.h ****  * @param enable Enable/disable Tx Message Buffer.
 686:../drivers/fsl_flexcan.h ****  *               - true: Enable Tx Message Buffer.
 687:../drivers/fsl_flexcan.h ****  *               - false: Disable Tx Message Buffer.
 688:../drivers/fsl_flexcan.h ****  */
 689:../drivers/fsl_flexcan.h **** void FLEXCAN_SetFDTxMbConfig(CAN_Type *base, uint8_t mbIdx, bool enable);
 690:../drivers/fsl_flexcan.h **** #endif
 691:../drivers/fsl_flexcan.h **** 
 692:../drivers/fsl_flexcan.h **** /*!
 693:../drivers/fsl_flexcan.h ****  * @brief Configures a FlexCAN Receive Message Buffer.
 694:../drivers/fsl_flexcan.h ****  *
 695:../drivers/fsl_flexcan.h ****  * This function cleans a FlexCAN build-in Message Buffer and configures it
 696:../drivers/fsl_flexcan.h ****  * as a Receive Message Buffer.
 697:../drivers/fsl_flexcan.h ****  *
 698:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 699:../drivers/fsl_flexcan.h ****  * @param mbIdx The Message Buffer index.
 700:../drivers/fsl_flexcan.h ****  * @param config Pointer to the FlexCAN Message Buffer configuration structure.
 701:../drivers/fsl_flexcan.h ****  * @param enable Enable/disable Rx Message Buffer.
 702:../drivers/fsl_flexcan.h ****  *               - true: Enable Rx Message Buffer.
 703:../drivers/fsl_flexcan.h ****  *               - false: Disable Rx Message Buffer.
 704:../drivers/fsl_flexcan.h ****  */
 705:../drivers/fsl_flexcan.h **** void FLEXCAN_SetRxMbConfig(CAN_Type *base, uint8_t mbIdx, const flexcan_rx_mb_config_t *config, boo
 706:../drivers/fsl_flexcan.h **** 
 707:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 708:../drivers/fsl_flexcan.h **** /*!
 709:../drivers/fsl_flexcan.h ****  * @brief Configures a FlexCAN Receive Message Buffer.
 710:../drivers/fsl_flexcan.h ****  *
 711:../drivers/fsl_flexcan.h ****  * This function cleans a FlexCAN build-in Message Buffer and configures it
 712:../drivers/fsl_flexcan.h ****  * as a Receive Message Buffer.
 713:../drivers/fsl_flexcan.h ****  *
 714:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 715:../drivers/fsl_flexcan.h ****  * @param mbIdx The Message Buffer index.
 716:../drivers/fsl_flexcan.h ****  * @param config Pointer to the FlexCAN Message Buffer configuration structure.
 717:../drivers/fsl_flexcan.h ****  * @param enable Enable/disable Rx Message Buffer.
 718:../drivers/fsl_flexcan.h ****  *               - true: Enable Rx Message Buffer.
 719:../drivers/fsl_flexcan.h ****  *               - false: Disable Rx Message Buffer.
 720:../drivers/fsl_flexcan.h ****  */
 721:../drivers/fsl_flexcan.h **** void FLEXCAN_SetFDRxMbConfig(CAN_Type *base, uint8_t mbIdx, const flexcan_rx_mb_config_t *config, b
 722:../drivers/fsl_flexcan.h **** #endif
 723:../drivers/fsl_flexcan.h **** 
 724:../drivers/fsl_flexcan.h **** /*!
 725:../drivers/fsl_flexcan.h ****  * @brief Configures the FlexCAN Rx FIFO.
 726:../drivers/fsl_flexcan.h ****  *
 727:../drivers/fsl_flexcan.h ****  * This function configures the Rx FIFO with given Rx FIFO configuration.
 728:../drivers/fsl_flexcan.h ****  *
 729:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 730:../drivers/fsl_flexcan.h ****  * @param config Pointer to the FlexCAN Rx FIFO configuration structure.
 731:../drivers/fsl_flexcan.h ****  * @param enable Enable/disable Rx FIFO.
 732:../drivers/fsl_flexcan.h ****  *               - true: Enable Rx FIFO.
 733:../drivers/fsl_flexcan.h ****  *               - false: Disable Rx FIFO.
 734:../drivers/fsl_flexcan.h ****  */
 735:../drivers/fsl_flexcan.h **** void FLEXCAN_SetRxFifoConfig(CAN_Type *base, const flexcan_rx_fifo_config_t *config, bool enable);
 736:../drivers/fsl_flexcan.h **** 
 737:../drivers/fsl_flexcan.h **** /* @} */
 738:../drivers/fsl_flexcan.h **** 
 739:../drivers/fsl_flexcan.h **** /*!
 740:../drivers/fsl_flexcan.h ****  * @name Status
 741:../drivers/fsl_flexcan.h ****  * @{
 742:../drivers/fsl_flexcan.h ****  */
 743:../drivers/fsl_flexcan.h **** 
 744:../drivers/fsl_flexcan.h **** /*!
 745:../drivers/fsl_flexcan.h ****  * @brief Gets the FlexCAN module interrupt flags.
 746:../drivers/fsl_flexcan.h ****  *
 747:../drivers/fsl_flexcan.h ****  * This function gets all FlexCAN status flags. The flags are returned as the logical
 748:../drivers/fsl_flexcan.h ****  * OR value of the enumerators @ref _flexcan_flags. To check the specific status,
 749:../drivers/fsl_flexcan.h ****  * compare the return value with enumerators in @ref _flexcan_flags.
 750:../drivers/fsl_flexcan.h ****  *
 751:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 752:../drivers/fsl_flexcan.h ****  * @return FlexCAN status flags which are ORed by the enumerators in the _flexcan_flags.
 753:../drivers/fsl_flexcan.h ****  */
 754:../drivers/fsl_flexcan.h **** static inline uint32_t FLEXCAN_GetStatusFlags(CAN_Type *base)
 755:../drivers/fsl_flexcan.h **** {
 756:../drivers/fsl_flexcan.h ****     return base->ESR1;
 757:../drivers/fsl_flexcan.h **** }
 758:../drivers/fsl_flexcan.h **** 
 759:../drivers/fsl_flexcan.h **** /*!
 760:../drivers/fsl_flexcan.h ****  * @brief Clears status flags with the provided mask.
 761:../drivers/fsl_flexcan.h ****  *
 762:../drivers/fsl_flexcan.h ****  * This function clears the FlexCAN status flags with a provided mask. An automatically cleared fla
 763:../drivers/fsl_flexcan.h ****  * can't be cleared by this function.
 764:../drivers/fsl_flexcan.h ****  *
 765:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 766:../drivers/fsl_flexcan.h ****  * @param mask The status flags to be cleared, it is logical OR value of @ref _flexcan_flags.
 767:../drivers/fsl_flexcan.h ****  */
 768:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_ClearStatusFlags(CAN_Type *base, uint32_t mask)
 769:../drivers/fsl_flexcan.h **** {
 770:../drivers/fsl_flexcan.h ****     /* Write 1 to clear status flag. */
 771:../drivers/fsl_flexcan.h ****     base->ESR1 = mask;
 772:../drivers/fsl_flexcan.h **** }
 773:../drivers/fsl_flexcan.h **** 
 774:../drivers/fsl_flexcan.h **** /*!
 775:../drivers/fsl_flexcan.h ****  * @brief Gets the FlexCAN Bus Error Counter value.
 776:../drivers/fsl_flexcan.h ****  *
 777:../drivers/fsl_flexcan.h ****  * This function gets the FlexCAN Bus Error Counter value for both Tx and
 778:../drivers/fsl_flexcan.h ****  * Rx direction. These values may be needed in the upper layer error handling.
 779:../drivers/fsl_flexcan.h ****  *
 780:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 781:../drivers/fsl_flexcan.h ****  * @param txErrBuf Buffer to store Tx Error Counter value.
 782:../drivers/fsl_flexcan.h ****  * @param rxErrBuf Buffer to store Rx Error Counter value.
 783:../drivers/fsl_flexcan.h ****  */
 784:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_GetBusErrCount(CAN_Type *base, uint8_t *txErrBuf, uint8_t *rxErrBuf)
 785:../drivers/fsl_flexcan.h **** {
 786:../drivers/fsl_flexcan.h ****     if (txErrBuf)
 787:../drivers/fsl_flexcan.h ****     {
 788:../drivers/fsl_flexcan.h ****         *txErrBuf = (uint8_t)((base->ECR & CAN_ECR_TXERRCNT_MASK) >> CAN_ECR_TXERRCNT_SHIFT);
 789:../drivers/fsl_flexcan.h ****     }
 790:../drivers/fsl_flexcan.h **** 
 791:../drivers/fsl_flexcan.h ****     if (rxErrBuf)
 792:../drivers/fsl_flexcan.h ****     {
 793:../drivers/fsl_flexcan.h ****         *rxErrBuf = (uint8_t)((base->ECR & CAN_ECR_RXERRCNT_MASK) >> CAN_ECR_RXERRCNT_SHIFT);
 794:../drivers/fsl_flexcan.h ****     }
 795:../drivers/fsl_flexcan.h **** }
 796:../drivers/fsl_flexcan.h **** 
 797:../drivers/fsl_flexcan.h **** /*!
 798:../drivers/fsl_flexcan.h ****  * @brief Gets the FlexCAN Message Buffer interrupt flags.
 799:../drivers/fsl_flexcan.h ****  *
 800:../drivers/fsl_flexcan.h ****  * This function gets the interrupt flags of a given Message Buffers.
 801:../drivers/fsl_flexcan.h ****  *
 802:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 803:../drivers/fsl_flexcan.h ****  * @param mask The ORed FlexCAN Message Buffer mask.
 804:../drivers/fsl_flexcan.h ****  * @return The status of given Message Buffers.
 805:../drivers/fsl_flexcan.h ****  */
 806:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 807:../drivers/fsl_flexcan.h **** static inline uint64_t FLEXCAN_GetMbStatusFlags(CAN_Type *base, uint64_t mask)
 808:../drivers/fsl_flexcan.h **** #else
 809:../drivers/fsl_flexcan.h **** static inline uint32_t FLEXCAN_GetMbStatusFlags(CAN_Type *base, uint32_t mask)
 810:../drivers/fsl_flexcan.h **** #endif
 811:../drivers/fsl_flexcan.h **** {
 812:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 813:../drivers/fsl_flexcan.h ****     return ((((uint64_t)base->IFLAG1) & mask) | ((((uint64_t)base->IFLAG2) << 32) & mask));
 814:../drivers/fsl_flexcan.h **** #else
 815:../drivers/fsl_flexcan.h ****     return (base->IFLAG1 & mask);
 816:../drivers/fsl_flexcan.h **** #endif
 817:../drivers/fsl_flexcan.h **** }
 818:../drivers/fsl_flexcan.h **** 
 819:../drivers/fsl_flexcan.h **** /*!
 820:../drivers/fsl_flexcan.h ****  * @brief Clears the FlexCAN Message Buffer interrupt flags.
 821:../drivers/fsl_flexcan.h ****  *
 822:../drivers/fsl_flexcan.h ****  * This function clears the interrupt flags of a given Message Buffers.
 823:../drivers/fsl_flexcan.h ****  *
 824:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 825:../drivers/fsl_flexcan.h ****  * @param mask The ORed FlexCAN Message Buffer mask.
 826:../drivers/fsl_flexcan.h ****  */
 827:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 828:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_ClearMbStatusFlags(CAN_Type *base, uint64_t mask)
 829:../drivers/fsl_flexcan.h **** #else
 830:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_ClearMbStatusFlags(CAN_Type *base, uint32_t mask)
 831:../drivers/fsl_flexcan.h **** #endif
 832:../drivers/fsl_flexcan.h **** {
 833:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 834:../drivers/fsl_flexcan.h ****     base->IFLAG1 = (uint32_t)(mask & 0xFFFFFFFFU);
 835:../drivers/fsl_flexcan.h ****     base->IFLAG2 = (uint32_t)(mask >> 32);
 836:../drivers/fsl_flexcan.h **** #else
 837:../drivers/fsl_flexcan.h ****     base->IFLAG1 = mask;
 838:../drivers/fsl_flexcan.h **** #endif
 839:../drivers/fsl_flexcan.h **** }
 840:../drivers/fsl_flexcan.h **** 
 841:../drivers/fsl_flexcan.h **** /* @} */
 842:../drivers/fsl_flexcan.h **** 
 843:../drivers/fsl_flexcan.h **** /*!
 844:../drivers/fsl_flexcan.h ****  * @name Interrupts
 845:../drivers/fsl_flexcan.h ****  * @{
 846:../drivers/fsl_flexcan.h ****  */
 847:../drivers/fsl_flexcan.h **** 
 848:../drivers/fsl_flexcan.h **** /*!
 849:../drivers/fsl_flexcan.h ****  * @brief Enables FlexCAN interrupts according to the provided mask.
 850:../drivers/fsl_flexcan.h ****  *
 851:../drivers/fsl_flexcan.h ****  * This function enables the FlexCAN interrupts according to the provided mask. The mask
 852:../drivers/fsl_flexcan.h ****  * is a logical OR of enumeration members, see @ref _flexcan_interrupt_enable.
 853:../drivers/fsl_flexcan.h ****  *
 854:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 855:../drivers/fsl_flexcan.h ****  * @param mask The interrupts to enable. Logical OR of @ref _flexcan_interrupt_enable.
 856:../drivers/fsl_flexcan.h ****  */
 857:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_EnableInterrupts(CAN_Type *base, uint32_t mask)
 858:../drivers/fsl_flexcan.h **** {
 859:../drivers/fsl_flexcan.h ****     /* Solve Wake Up Interrupt. */
 860:../drivers/fsl_flexcan.h ****     if (mask & kFLEXCAN_WakeUpInterruptEnable)
 861:../drivers/fsl_flexcan.h ****     {
 862:../drivers/fsl_flexcan.h ****         base->MCR |= CAN_MCR_WAKMSK_MASK;
 863:../drivers/fsl_flexcan.h ****     }
 864:../drivers/fsl_flexcan.h **** 
 865:../drivers/fsl_flexcan.h ****     /* Solve others. */
 866:../drivers/fsl_flexcan.h ****     base->CTRL1 |= (mask & (~((uint32_t)kFLEXCAN_WakeUpInterruptEnable)));
 867:../drivers/fsl_flexcan.h **** }
 868:../drivers/fsl_flexcan.h **** 
 869:../drivers/fsl_flexcan.h **** /*!
 870:../drivers/fsl_flexcan.h ****  * @brief Disables FlexCAN interrupts according to the provided mask.
 871:../drivers/fsl_flexcan.h ****  *
 872:../drivers/fsl_flexcan.h ****  * This function disables the FlexCAN interrupts according to the provided mask. The mask
 873:../drivers/fsl_flexcan.h ****  * is a logical OR of enumeration members, see @ref _flexcan_interrupt_enable.
 874:../drivers/fsl_flexcan.h ****  *
 875:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 876:../drivers/fsl_flexcan.h ****  * @param mask The interrupts to disable. Logical OR of @ref _flexcan_interrupt_enable.
 877:../drivers/fsl_flexcan.h ****  */
 878:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_DisableInterrupts(CAN_Type *base, uint32_t mask)
 879:../drivers/fsl_flexcan.h **** {
 880:../drivers/fsl_flexcan.h ****     /* Solve Wake Up Interrupt. */
 881:../drivers/fsl_flexcan.h ****     if (mask & kFLEXCAN_WakeUpInterruptEnable)
 882:../drivers/fsl_flexcan.h ****     {
 883:../drivers/fsl_flexcan.h ****         base->MCR &= ~CAN_MCR_WAKMSK_MASK;
 884:../drivers/fsl_flexcan.h ****     }
 885:../drivers/fsl_flexcan.h **** 
 886:../drivers/fsl_flexcan.h ****     /* Solve others. */
 887:../drivers/fsl_flexcan.h ****     base->CTRL1 &= ~(mask & (~((uint32_t)kFLEXCAN_WakeUpInterruptEnable)));
 888:../drivers/fsl_flexcan.h **** }
 889:../drivers/fsl_flexcan.h **** 
 890:../drivers/fsl_flexcan.h **** /*!
 891:../drivers/fsl_flexcan.h ****  * @brief Enables FlexCAN Message Buffer interrupts.
 892:../drivers/fsl_flexcan.h ****  *
 893:../drivers/fsl_flexcan.h ****  * This function enables the interrupts of given Message Buffers.
 894:../drivers/fsl_flexcan.h ****  *
 895:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 896:../drivers/fsl_flexcan.h ****  * @param mask The ORed FlexCAN Message Buffer mask.
 897:../drivers/fsl_flexcan.h ****  */
 898:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 899:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_EnableMbInterrupts(CAN_Type *base, uint64_t mask)
 900:../drivers/fsl_flexcan.h **** #else
 901:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_EnableMbInterrupts(CAN_Type *base, uint32_t mask)
 902:../drivers/fsl_flexcan.h **** #endif
 903:../drivers/fsl_flexcan.h **** {
 904:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 905:../drivers/fsl_flexcan.h ****     base->IMASK1 |= (uint32_t)(mask & 0xFFFFFFFFU);
 906:../drivers/fsl_flexcan.h ****     base->IMASK2 |= (uint32_t)(mask >> 32);
 907:../drivers/fsl_flexcan.h **** #else
 908:../drivers/fsl_flexcan.h ****     base->IMASK1 |= mask;
 909:../drivers/fsl_flexcan.h **** #endif
 910:../drivers/fsl_flexcan.h **** }
 911:../drivers/fsl_flexcan.h **** 
 912:../drivers/fsl_flexcan.h **** /*!
 913:../drivers/fsl_flexcan.h ****  * @brief Disables FlexCAN Message Buffer interrupts.
 914:../drivers/fsl_flexcan.h ****  *
 915:../drivers/fsl_flexcan.h ****  * This function disables the interrupts of given Message Buffers.
 916:../drivers/fsl_flexcan.h ****  *
 917:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 918:../drivers/fsl_flexcan.h ****  * @param mask The ORed FlexCAN Message Buffer mask.
 919:../drivers/fsl_flexcan.h ****  */
 920:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 921:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_DisableMbInterrupts(CAN_Type *base, uint64_t mask)
 922:../drivers/fsl_flexcan.h **** #else
 923:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_DisableMbInterrupts(CAN_Type *base, uint32_t mask)
 924:../drivers/fsl_flexcan.h **** #endif
 925:../drivers/fsl_flexcan.h **** {
 926:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
 927:../drivers/fsl_flexcan.h ****     base->IMASK1 &= ~((uint32_t)(mask & 0xFFFFFFFFU));
 928:../drivers/fsl_flexcan.h ****     base->IMASK2 &= ~((uint32_t)(mask >> 32));
 929:../drivers/fsl_flexcan.h **** #else
 930:../drivers/fsl_flexcan.h ****     base->IMASK1 &= ~mask;
 931:../drivers/fsl_flexcan.h **** #endif
 932:../drivers/fsl_flexcan.h **** }
 933:../drivers/fsl_flexcan.h **** 
 934:../drivers/fsl_flexcan.h **** /* @} */
 935:../drivers/fsl_flexcan.h **** 
 936:../drivers/fsl_flexcan.h **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_RX_FIFO_DMA) && FSL_FEATURE_FLEXCAN_HAS_RX_FIFO_DMA)
 937:../drivers/fsl_flexcan.h **** /*!
 938:../drivers/fsl_flexcan.h ****  * @name DMA Control
 939:../drivers/fsl_flexcan.h ****  * @{
 940:../drivers/fsl_flexcan.h ****  */
 941:../drivers/fsl_flexcan.h **** 
 942:../drivers/fsl_flexcan.h **** /*!
 943:../drivers/fsl_flexcan.h ****  * @brief Enables or disables the FlexCAN Rx FIFO DMA request.
 944:../drivers/fsl_flexcan.h ****  *
 945:../drivers/fsl_flexcan.h ****  * This function enables or disables the DMA feature of FlexCAN build-in Rx FIFO.
 946:../drivers/fsl_flexcan.h ****  *
 947:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 948:../drivers/fsl_flexcan.h ****  * @param enable true to enable, false to disable.
 949:../drivers/fsl_flexcan.h ****  */
 950:../drivers/fsl_flexcan.h **** void FLEXCAN_EnableRxFifoDMA(CAN_Type *base, bool enable);
 951:../drivers/fsl_flexcan.h **** 
 952:../drivers/fsl_flexcan.h **** /*!
 953:../drivers/fsl_flexcan.h ****  * @brief Gets the Rx FIFO Head address.
 954:../drivers/fsl_flexcan.h ****  *
 955:../drivers/fsl_flexcan.h ****  * This function returns the FlexCAN Rx FIFO Head address, which is mainly used for the DMA/eDMA us
 956:../drivers/fsl_flexcan.h ****  *
 957:../drivers/fsl_flexcan.h ****  * @param base FlexCAN peripheral base address.
 958:../drivers/fsl_flexcan.h ****  * @return FlexCAN Rx FIFO Head address.
 959:../drivers/fsl_flexcan.h ****  */
 960:../drivers/fsl_flexcan.h **** static inline uint32_t FLEXCAN_GetRxFifoHeadAddr(CAN_Type *base)
 961:../drivers/fsl_flexcan.h **** {
 962:../drivers/fsl_flexcan.h ****     return (uint32_t) & (base->MB[0].CS);
 963:../drivers/fsl_flexcan.h **** }
 964:../drivers/fsl_flexcan.h **** 
 965:../drivers/fsl_flexcan.h **** /* @} */
 966:../drivers/fsl_flexcan.h **** #endif /* FSL_FEATURE_FLEXCAN_HAS_RX_FIFO_DMA */
 967:../drivers/fsl_flexcan.h **** 
 968:../drivers/fsl_flexcan.h **** /*!
 969:../drivers/fsl_flexcan.h ****  * @name Bus Operations
 970:../drivers/fsl_flexcan.h ****  * @{
 971:../drivers/fsl_flexcan.h ****  */
 972:../drivers/fsl_flexcan.h **** 
 973:../drivers/fsl_flexcan.h **** /*!
 974:../drivers/fsl_flexcan.h ****  * @brief Enables or disables the FlexCAN module operation.
 975:../drivers/fsl_flexcan.h ****  *
 976:../drivers/fsl_flexcan.h ****  * This function enables or disables the FlexCAN module.
 977:../drivers/fsl_flexcan.h ****  *
 978:../drivers/fsl_flexcan.h ****  * @param base FlexCAN base pointer.
 979:../drivers/fsl_flexcan.h ****  * @param enable true to enable, false to disable.
 980:../drivers/fsl_flexcan.h ****  */
 981:../drivers/fsl_flexcan.h **** static inline void FLEXCAN_Enable(CAN_Type *base, bool enable)
 982:../drivers/fsl_flexcan.h **** {
 983:../drivers/fsl_flexcan.h ****     if (enable)
 984:../drivers/fsl_flexcan.h ****     {
 985:../drivers/fsl_flexcan.h ****         base->MCR &= ~CAN_MCR_MDIS_MASK;
 986:../drivers/fsl_flexcan.h **** 
 987:../drivers/fsl_flexcan.h ****         /* Wait FlexCAN exit from low-power mode. */
 988:../drivers/fsl_flexcan.h ****         while (base->MCR & CAN_MCR_LPMACK_MASK)
 989:../drivers/fsl_flexcan.h ****         {
 990:../drivers/fsl_flexcan.h ****         }
 991:../drivers/fsl_flexcan.h ****     }
 992:../drivers/fsl_flexcan.h ****     else
 993:../drivers/fsl_flexcan.h ****     {
 994:../drivers/fsl_flexcan.h ****         base->MCR |= CAN_MCR_MDIS_MASK;
 219              		.loc 2 994 0
 220 0008 0368     		ldr	r3, [r0]
 221 000a 43F00043 		orr	r3, r3, #-2147483648
 222 000e 0360     		str	r3, [r0]
 223              	.L21:
 995:../drivers/fsl_flexcan.h **** 
 996:../drivers/fsl_flexcan.h ****         /* Wait FlexCAN enter low-power mode. */
 997:../drivers/fsl_flexcan.h ****         while (!(base->MCR & CAN_MCR_LPMACK_MASK))
 224              		.loc 2 997 0
 225 0010 2368     		ldr	r3, [r4]
 226 0012 DB02     		lsls	r3, r3, #11
 227 0014 FCD5     		bpl	.L21
 228              	.LVL13:
 229              	.LBE57:
 230              	.LBE56:
 231              	.LBB58:
 232              	.LBB59:
 233              		.file 3 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 696:../drivers/fsl_clock.h **** }
 697:../drivers/fsl_clock.h **** 
 698:../drivers/fsl_clock.h **** /*!
 699:../drivers/fsl_clock.h ****  * @brief Disable the clock for specific IP.
 700:../drivers/fsl_clock.h ****  *
 701:../drivers/fsl_clock.h ****  * @param name  Which clock to disable, see \ref clock_ip_name_t.
 702:../drivers/fsl_clock.h ****  */
 703:../drivers/fsl_clock.h **** static inline void CLOCK_DisableClock(clock_ip_name_t name)
 704:../drivers/fsl_clock.h **** {
 705:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 706:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 234              		.loc 3 706 0
 235 0016 034A     		ldr	r2, .L24
 236 0018 1368     		ldr	r3, [r2]
 237 001a 23F01003 		bic	r3, r3, #16
 238 001e 1360     		str	r3, [r2]
 239              	.LVL14:
 240 0020 10BD     		pop	{r4, pc}
 241              	.L25:
 242 0022 00BF     		.align	2
 243              	.L24:
 244 0024 3C800440 		.word	1074036796
 245              	.LBE59:
 246              	.LBE58:
 247              		.cfi_endproc
 248              	.LFE164:
 250              		.section	.text.FLEXCAN_GetDefaultConfig,"ax",%progbits
 251              		.align	1
 252              		.global	FLEXCAN_GetDefaultConfig
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu fpv4-sp-d16
 258              	FLEXCAN_GetDefaultConfig:
 259              	.LFB165:
 555:../drivers/fsl_flexcan.c **** 
 556:../drivers/fsl_flexcan.c ****     /* Disable FlexCAN module. */
 557:../drivers/fsl_flexcan.c ****     FLEXCAN_Enable(base, false);
 558:../drivers/fsl_flexcan.c **** 
 559:../drivers/fsl_flexcan.c **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
 560:../drivers/fsl_flexcan.c ****     instance = FLEXCAN_GetInstance(base);
 561:../drivers/fsl_flexcan.c **** #if defined(FLEXCAN_PERIPH_CLOCKS)
 562:../drivers/fsl_flexcan.c ****     /* Disable FlexCAN serial clock. */
 563:../drivers/fsl_flexcan.c ****     CLOCK_DisableClock(s_flexcanPeriphClock[instance]);
 564:../drivers/fsl_flexcan.c **** #endif /* FLEXCAN_PERIPH_CLOCKS */
 565:../drivers/fsl_flexcan.c ****     /* Disable FlexCAN clock. */
 566:../drivers/fsl_flexcan.c ****     CLOCK_DisableClock(s_flexcanClock[instance]);
 567:../drivers/fsl_flexcan.c **** #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
 568:../drivers/fsl_flexcan.c **** }
 569:../drivers/fsl_flexcan.c **** 
 570:../drivers/fsl_flexcan.c **** void FLEXCAN_GetDefaultConfig(flexcan_config_t *config)
 571:../drivers/fsl_flexcan.c **** {
 260              		.loc 1 571 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265              	.LVL15:
 572:../drivers/fsl_flexcan.c ****     /* Assertion. */
 573:../drivers/fsl_flexcan.c ****     assert(config);
 574:../drivers/fsl_flexcan.c **** 
 575:../drivers/fsl_flexcan.c ****     /* Initialize FlexCAN Module config struct with default value. */
 576:../drivers/fsl_flexcan.c **** #if (!defined(FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE)) || !FSL_FEATURE_FLEXCAN_SUPPORT_E
 577:../drivers/fsl_flexcan.c ****     config->clkSrc = kFLEXCAN_ClkSrcOsc;
 266              		.loc 1 577 0
 267 0000 0023     		movs	r3, #0
 268 0002 0371     		strb	r3, [r0, #4]
 578:../drivers/fsl_flexcan.c **** #endif /* FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE */
 579:../drivers/fsl_flexcan.c ****     config->baudRate = 1000000U;
 580:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 581:../drivers/fsl_flexcan.c ****     config->baudRateFD = 1000000U;
 582:../drivers/fsl_flexcan.c **** #endif
 583:../drivers/fsl_flexcan.c ****     config->maxMbNum = 16;
 584:../drivers/fsl_flexcan.c ****     config->enableLoopBack = false;
 269              		.loc 1 584 0
 270 0004 8371     		strb	r3, [r0, #6]
 585:../drivers/fsl_flexcan.c ****     config->enableSelfWakeup = false;
 271              		.loc 1 585 0
 272 0006 C371     		strb	r3, [r0, #7]
 586:../drivers/fsl_flexcan.c ****     config->enableIndividMask = false;
 273              		.loc 1 586 0
 274 0008 0372     		strb	r3, [r0, #8]
 587:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_DOZE_MODE_SUPPORT) && FSL_FEATURE_FLEXCAN_HAS_DOZE_MODE_SUPPOR
 588:../drivers/fsl_flexcan.c ****     config->enableDoze = false;
 589:../drivers/fsl_flexcan.c **** #endif
 590:../drivers/fsl_flexcan.c ****     /* Default protocol timing configuration, time quantum is 10. */
 591:../drivers/fsl_flexcan.c ****     config->timingConfig.phaseSeg1 = 3;
 275              		.loc 1 591 0
 276 000a 0323     		movs	r3, #3
 579:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 277              		.loc 1 579 0
 278 000c 054A     		ldr	r2, .L27
 279              		.loc 1 591 0
 280 000e 4373     		strb	r3, [r0, #13]
 592:../drivers/fsl_flexcan.c ****     config->timingConfig.phaseSeg2 = 2;
 281              		.loc 1 592 0
 282 0010 0223     		movs	r3, #2
 579:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 283              		.loc 1 579 0
 284 0012 0260     		str	r2, [r0]
 285              		.loc 1 592 0
 286 0014 8373     		strb	r3, [r0, #14]
 583:../drivers/fsl_flexcan.c ****     config->enableLoopBack = false;
 287              		.loc 1 583 0
 288 0016 1022     		movs	r2, #16
 593:../drivers/fsl_flexcan.c ****     config->timingConfig.propSeg = 1;
 289              		.loc 1 593 0
 290 0018 0123     		movs	r3, #1
 583:../drivers/fsl_flexcan.c ****     config->enableLoopBack = false;
 291              		.loc 1 583 0
 292 001a 4271     		strb	r2, [r0, #5]
 293              		.loc 1 593 0
 294 001c C373     		strb	r3, [r0, #15]
 594:../drivers/fsl_flexcan.c ****     config->timingConfig.rJumpwidth = 1;
 295              		.loc 1 594 0
 296 001e 0373     		strb	r3, [r0, #12]
 297 0020 7047     		bx	lr
 298              	.L28:
 299 0022 00BF     		.align	2
 300              	.L27:
 301 0024 40420F00 		.word	1000000
 302              		.cfi_endproc
 303              	.LFE165:
 305              		.section	.text.FLEXCAN_SetTimingConfig,"ax",%progbits
 306              		.align	1
 307              		.global	FLEXCAN_SetTimingConfig
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
 311              		.fpu fpv4-sp-d16
 313              	FLEXCAN_SetTimingConfig:
 314              	.LFB166:
 595:../drivers/fsl_flexcan.c **** }
 596:../drivers/fsl_flexcan.c **** 
 597:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 598:../drivers/fsl_flexcan.c **** void FLEXCAN_FDEnable(CAN_Type *base, flexcan_mb_size_t dataSize, bool brs)
 599:../drivers/fsl_flexcan.c **** {
 600:../drivers/fsl_flexcan.c ****     if (brs)
 601:../drivers/fsl_flexcan.c ****     {
 602:../drivers/fsl_flexcan.c ****         base->FDCTRL &= CAN_FDCTRL_FDRATE_MASK;
 603:../drivers/fsl_flexcan.c ****     }
 604:../drivers/fsl_flexcan.c ****     else
 605:../drivers/fsl_flexcan.c ****     {
 606:../drivers/fsl_flexcan.c ****         base->FDCTRL &= ~CAN_FDCTRL_FDRATE_MASK;
 607:../drivers/fsl_flexcan.c ****     }
 608:../drivers/fsl_flexcan.c ****     /* Enter Freeze Mode. */
 609:../drivers/fsl_flexcan.c ****     FLEXCAN_EnterFreezeMode(base);
 610:../drivers/fsl_flexcan.c ****     base->MCR |= CAN_MCR_FDEN_MASK;
 611:../drivers/fsl_flexcan.c ****     base->FDCTRL |= CAN_FDCTRL_MBDSR0(dataSize);
 612:../drivers/fsl_flexcan.c ****     /* Exit Freeze Mode. */
 613:../drivers/fsl_flexcan.c ****     FLEXCAN_ExitFreezeMode(base);
 614:../drivers/fsl_flexcan.c **** }
 615:../drivers/fsl_flexcan.c **** #endif
 616:../drivers/fsl_flexcan.c **** 
 617:../drivers/fsl_flexcan.c **** void FLEXCAN_SetTimingConfig(CAN_Type *base, const flexcan_timing_config_t *config)
 618:../drivers/fsl_flexcan.c **** {
 315              		.loc 1 618 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319              	.LVL16:
 320 0000 10B5     		push	{r4, lr}
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 4, -8
 323              		.cfi_offset 14, -4
 324              		.loc 1 618 0
 325 0002 0246     		mov	r2, r0
 619:../drivers/fsl_flexcan.c ****     /* Assertion. */
 620:../drivers/fsl_flexcan.c ****     assert(config);
 621:../drivers/fsl_flexcan.c **** 
 622:../drivers/fsl_flexcan.c ****     /* Enter Freeze Mode. */
 623:../drivers/fsl_flexcan.c ****     FLEXCAN_EnterFreezeMode(base);
 326              		.loc 1 623 0
 327 0004 FFF7FEFF 		bl	FLEXCAN_EnterFreezeMode
 328              	.LVL17:
 624:../drivers/fsl_flexcan.c **** 
 625:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 626:../drivers/fsl_flexcan.c ****     /* Cleaning previous Timing Setting. */
 627:../drivers/fsl_flexcan.c ****     base->CBT &= ~(CAN_CBT_EPRESDIV_MASK | CAN_CBT_ERJW_MASK | CAN_CBT_EPSEG1_MASK | CAN_CBT_EPSEG2
 628:../drivers/fsl_flexcan.c ****                    CAN_CBT_EPROPSEG_MASK);
 629:../drivers/fsl_flexcan.c **** 
 630:../drivers/fsl_flexcan.c ****     /* Updating Timing Setting according to configuration structure. */
 631:../drivers/fsl_flexcan.c ****     base->CBT |=
 632:../drivers/fsl_flexcan.c ****         (CAN_CBT_EPRESDIV(config->preDivider) | CAN_CBT_ERJW(config->rJumpwidth) | CAN_CBT_EPSEG1(c
 633:../drivers/fsl_flexcan.c ****          CAN_CBT_EPSEG2(config->phaseSeg2) | CAN_CBT_EPROPSEG(config->propSeg));
 634:../drivers/fsl_flexcan.c **** #else
 635:../drivers/fsl_flexcan.c ****     /* Cleaning previous Timing Setting. */
 636:../drivers/fsl_flexcan.c ****     base->CTRL1 &= ~(CAN_CTRL1_PRESDIV_MASK | CAN_CTRL1_RJW_MASK | CAN_CTRL1_PSEG1_MASK | CAN_CTRL1
 329              		.loc 1 636 0
 330 0008 4368     		ldr	r3, [r0, #4]
 637:../drivers/fsl_flexcan.c ****                      CAN_CTRL1_PROPSEG_MASK);
 638:../drivers/fsl_flexcan.c **** 
 639:../drivers/fsl_flexcan.c ****     /* Updating Timing Setting according to configuration structure. */
 640:../drivers/fsl_flexcan.c ****     base->CTRL1 |=
 641:../drivers/fsl_flexcan.c ****         (CAN_CTRL1_PRESDIV(config->preDivider) | CAN_CTRL1_RJW(config->rJumpwidth) |
 331              		.loc 1 641 0
 332 000a 0C88     		ldrh	r4, [r1]
 636:../drivers/fsl_flexcan.c ****                      CAN_CTRL1_PROPSEG_MASK);
 333              		.loc 1 636 0
 334 000c 23F00703 		bic	r3, r3, #7
 335 0010 1B04     		lsls	r3, r3, #16
 336 0012 1B0C     		lsrs	r3, r3, #16
 337 0014 4360     		str	r3, [r0, #4]
 642:../drivers/fsl_flexcan.c ****          CAN_CTRL1_PSEG1(config->phaseSeg1) | CAN_CTRL1_PSEG2(config->phaseSeg2) | CAN_CTRL1_PROPSE
 338              		.loc 1 642 0
 339 0016 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 640:../drivers/fsl_flexcan.c ****         (CAN_CTRL1_PRESDIV(config->preDivider) | CAN_CTRL1_RJW(config->rJumpwidth) |
 340              		.loc 1 640 0
 341 0018 4068     		ldr	r0, [r0, #4]
 342              	.LVL18:
 343              		.loc 1 642 0
 344 001a 03F00703 		and	r3, r3, #7
 640:../drivers/fsl_flexcan.c ****         (CAN_CTRL1_PRESDIV(config->preDivider) | CAN_CTRL1_RJW(config->rJumpwidth) |
 345              		.loc 1 640 0
 346 001e 43EA0463 		orr	r3, r3, r4, lsl #24
 347 0022 0343     		orrs	r3, r3, r0
 641:../drivers/fsl_flexcan.c ****          CAN_CTRL1_PSEG1(config->phaseSeg1) | CAN_CTRL1_PSEG2(config->phaseSeg2) | CAN_CTRL1_PROPSE
 348              		.loc 1 641 0
 349 0024 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 350 0026 8005     		lsls	r0, r0, #22
 351 0028 00F44000 		and	r0, r0, #12582912
 640:../drivers/fsl_flexcan.c ****         (CAN_CTRL1_PRESDIV(config->preDivider) | CAN_CTRL1_RJW(config->rJumpwidth) |
 352              		.loc 1 640 0
 353 002c 0343     		orrs	r3, r3, r0
 354              		.loc 1 642 0
 355 002e C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 356 0030 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 357              	.LVL19:
 358 0032 C004     		lsls	r0, r0, #19
 359 0034 00F46010 		and	r0, r0, #3670016
 360 0038 0904     		lsls	r1, r1, #16
 640:../drivers/fsl_flexcan.c ****         (CAN_CTRL1_PRESDIV(config->preDivider) | CAN_CTRL1_RJW(config->rJumpwidth) |
 361              		.loc 1 640 0
 362 003a 0343     		orrs	r3, r3, r0
 363              		.loc 1 642 0
 364 003c 01F4E021 		and	r1, r1, #458752
 640:../drivers/fsl_flexcan.c ****         (CAN_CTRL1_PRESDIV(config->preDivider) | CAN_CTRL1_RJW(config->rJumpwidth) |
 365              		.loc 1 640 0
 366 0040 0B43     		orrs	r3, r3, r1
 367 0042 5360     		str	r3, [r2, #4]
 643:../drivers/fsl_flexcan.c **** #endif
 644:../drivers/fsl_flexcan.c **** 
 645:../drivers/fsl_flexcan.c ****     /* Exit Freeze Mode. */
 646:../drivers/fsl_flexcan.c ****     FLEXCAN_ExitFreezeMode(base);
 368              		.loc 1 646 0
 369 0044 1046     		mov	r0, r2
 647:../drivers/fsl_flexcan.c **** }
 370              		.loc 1 647 0
 371 0046 BDE81040 		pop	{r4, lr}
 372              		.cfi_restore 14
 373              		.cfi_restore 4
 374              		.cfi_def_cfa_offset 0
 646:../drivers/fsl_flexcan.c **** }
 375              		.loc 1 646 0
 376 004a FFF7FEBF 		b	FLEXCAN_ExitFreezeMode
 377              	.LVL20:
 378              		.cfi_endproc
 379              	.LFE166:
 381              		.section	.text.FLEXCAN_Init,"ax",%progbits
 382              		.align	1
 383              		.global	FLEXCAN_Init
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu fpv4-sp-d16
 389              	FLEXCAN_Init:
 390              	.LFB163:
 481:../drivers/fsl_flexcan.c ****     uint32_t mcrTemp;
 391              		.loc 1 481 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              	.LVL21:
 396 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 397              		.cfi_def_cfa_offset 24
 398              		.cfi_offset 4, -16
 399              		.cfi_offset 5, -12
 400              		.cfi_offset 6, -8
 401              		.cfi_offset 14, -4
 481:../drivers/fsl_flexcan.c ****     uint32_t mcrTemp;
 402              		.loc 1 481 0
 403 0002 1646     		mov	r6, r2
 404              	.LBB70:
 405              	.LBB71:
 695:../drivers/fsl_clock.h **** }
 406              		.loc 3 695 0
 407 0004 314A     		ldr	r2, .L45
 408              	.LVL22:
 409 0006 1368     		ldr	r3, [r2]
 410 0008 43F01003 		orr	r3, r3, #16
 411 000c 1360     		str	r3, [r2]
 412              	.LVL23:
 413              	.LBE71:
 414              	.LBE70:
 415              	.LBB72:
 416              	.LBB73:
 994:../drivers/fsl_flexcan.h **** 
 417              		.loc 2 994 0
 418 000e 0368     		ldr	r3, [r0]
 419 0010 43F00043 		orr	r3, r3, #-2147483648
 420              	.LBE73:
 421              	.LBE72:
 481:../drivers/fsl_flexcan.c ****     uint32_t mcrTemp;
 422              		.loc 1 481 0
 423 0014 0446     		mov	r4, r0
 424 0016 0D46     		mov	r5, r1
 425              	.LBB75:
 426              	.LBB74:
 994:../drivers/fsl_flexcan.h **** 
 427              		.loc 2 994 0
 428 0018 0360     		str	r3, [r0]
 429              	.L31:
 430              		.loc 2 997 0
 431 001a 2368     		ldr	r3, [r4]
 432 001c DA02     		lsls	r2, r3, #11
 433 001e FCD5     		bpl	.L31
 434              	.LVL24:
 435              	.LBE74:
 436              	.LBE75:
 508:../drivers/fsl_flexcan.c ****                                                            base->CTRL1 | CAN_CTRL1_CLKSRC_MASK;
 437              		.loc 1 508 0
 438 0020 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 439 0022 002B     		cmp	r3, #0
 440 0024 44D1     		bne	.L32
 508:../drivers/fsl_flexcan.c ****                                                            base->CTRL1 | CAN_CTRL1_CLKSRC_MASK;
 441              		.loc 1 508 0 is_stmt 0 discriminator 1
 442 0026 6368     		ldr	r3, [r4, #4]
 443 0028 23F40053 		bic	r3, r3, #8192
 444              	.L33:
 508:../drivers/fsl_flexcan.c ****                                                            base->CTRL1 | CAN_CTRL1_CLKSRC_MASK;
 445              		.loc 1 508 0 discriminator 4
 446 002c 6360     		str	r3, [r4, #4]
 447              	.LVL25:
 448              	.LBB76:
 449              	.LBB77:
 450              	.LBB78:
 985:../drivers/fsl_flexcan.h **** 
 451              		.loc 2 985 0 is_stmt 1 discriminator 4
 452 002e 2368     		ldr	r3, [r4]
 453 0030 23F00043 		bic	r3, r3, #-2147483648
 454 0034 2360     		str	r3, [r4]
 455              	.L34:
 988:../drivers/fsl_flexcan.h ****         {
 456              		.loc 2 988 0
 457 0036 2368     		ldr	r3, [r4]
 458 0038 DB02     		lsls	r3, r3, #11
 459 003a FCD4     		bmi	.L34
 460              	.LVL26:
 461              	.LBE78:
 462              	.LBE77:
 463              	.LBE76:
 516:../drivers/fsl_flexcan.c **** 
 464              		.loc 1 516 0 discriminator 4
 465 003c 2046     		mov	r0, r4
 466              	.LVL27:
 467 003e FFF7FEFF 		bl	FLEXCAN_Reset
 468              	.LVL28:
 522:../drivers/fsl_flexcan.c **** 
 469              		.loc 1 522 0 discriminator 4
 470 0042 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 519:../drivers/fsl_flexcan.c **** 
 471              		.loc 1 519 0 discriminator 4
 472 0044 2268     		ldr	r2, [r4]
 473              	.LVL29:
 522:../drivers/fsl_flexcan.c **** 
 474              		.loc 1 522 0 discriminator 4
 475 0046 013B     		subs	r3, r3, #1
 476 0048 22F07F02 		bic	r2, r2, #127
 477              	.LVL30:
 478 004c 03F07F03 		and	r3, r3, #127
 479 0050 1343     		orrs	r3, r3, r2
 480              	.LVL31:
 525:../drivers/fsl_flexcan.c **** 
 481              		.loc 1 525 0 discriminator 4
 482 0052 AA79     		ldrb	r2, [r5, #6]	@ zero_extendqisi2
 483 0054 82B3     		cbz	r2, .L35
 484              	.LVL32:
 525:../drivers/fsl_flexcan.c **** 
 485              		.loc 1 525 0 is_stmt 0 discriminator 1
 486 0056 6268     		ldr	r2, [r4, #4]
 487 0058 42F48052 		orr	r2, r2, #4096
 488              	.L36:
 525:../drivers/fsl_flexcan.c **** 
 489              		.loc 1 525 0 discriminator 4
 490 005c 6260     		str	r2, [r4, #4]
 528:../drivers/fsl_flexcan.c **** 
 491              		.loc 1 528 0 is_stmt 1 discriminator 4
 492 005e EA79     		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 493 0060 72B3     		cbz	r2, .L37
 528:../drivers/fsl_flexcan.c **** 
 494              		.loc 1 528 0 is_stmt 0 discriminator 1
 495 0062 43F48003 		orr	r3, r3, #4194304
 496              	.LVL33:
 497              	.L38:
 531:../drivers/fsl_flexcan.c **** 
 498              		.loc 1 531 0 is_stmt 1 discriminator 4
 499 0066 2A7A     		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 500 0068 6AB3     		cbz	r2, .L39
 531:../drivers/fsl_flexcan.c **** 
 501              		.loc 1 531 0 is_stmt 0 discriminator 1
 502 006a 43F48033 		orr	r3, r3, #65536
 503              	.LVL34:
 504              	.L40:
 542:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 505              		.loc 1 542 0 is_stmt 1 discriminator 4
 506 006e 2A68     		ldr	r2, [r5]
 507              	.LVL35:
 508 0070 55F80A0F 		ldr	r0, [r5, #10]!	@ unaligned
 509              	.LVL36:
 539:../drivers/fsl_flexcan.c **** 
 510              		.loc 1 539 0 discriminator 4
 511 0074 2360     		str	r3, [r4]
 512 0076 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 513              	.LVL37:
 514 0078 ADF80430 		strh	r3, [sp, #4]	@ unaligned
 515              	.LVL38:
 516              	.LBB79:
 517              	.LBB80:
 419:../drivers/fsl_flexcan.c ****     uint32_t priDiv = baudRate_Bps * quantum;
 518              		.loc 1 419 0 discriminator 4
 519 007c 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 520 0080 0090     		str	r0, [sp]
 521              	.LVL39:
 522 0082 03EB1060 		add	r0, r3, r0, lsr #24
 523 0086 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 524 008a 1844     		add	r0, r0, r3
 525 008c 0430     		adds	r0, r0, #4
 526              	.LVL40:
 429:../drivers/fsl_flexcan.c ****     }
 527              		.loc 1 429 0 discriminator 4
 528 008e 5043     		muls	r0, r2, r0
 529              	.LVL41:
 530 0090 08BF     		it	eq
 531 0092 0120     		moveq	r0, #1
 532              	.LVL42:
 432:../drivers/fsl_flexcan.c **** 
 533              		.loc 1 432 0 discriminator 4
 534 0094 B6FBF0F6 		udiv	r6, r6, r0
 535              	.LVL43:
 536 0098 013E     		subs	r6, r6, #1
 537              	.LVL44:
 440:../drivers/fsl_flexcan.c **** 
 538              		.loc 1 440 0 discriminator 4
 539 009a FF2E     		cmp	r6, #255
 540 009c 28BF     		it	cs
 541 009e FF26     		movcs	r6, #255
 542              	.LVL45:
 443:../drivers/fsl_flexcan.c **** }
 543              		.loc 1 443 0 discriminator 4
 544 00a0 6946     		mov	r1, sp
 545 00a2 2046     		mov	r0, r4
 546              	.LVL46:
 440:../drivers/fsl_flexcan.c **** 
 547              		.loc 1 440 0 discriminator 4
 548 00a4 ADF80060 		strh	r6, [sp]	@ movhi
 549              	.LVL47:
 443:../drivers/fsl_flexcan.c **** }
 550              		.loc 1 443 0 discriminator 4
 551 00a8 FFF7FEFF 		bl	FLEXCAN_SetTimingConfig
 552              	.LVL48:
 553              	.LBE80:
 554              	.LBE79:
 546:../drivers/fsl_flexcan.c **** 
 555              		.loc 1 546 0 discriminator 4
 556 00ac 02B0     		add	sp, sp, #8
 557              		.cfi_remember_state
 558              		.cfi_def_cfa_offset 16
 559              		@ sp needed
 560 00ae 70BD     		pop	{r4, r5, r6, pc}
 561              	.LVL49:
 562              	.L32:
 563              		.cfi_restore_state
 509:../drivers/fsl_flexcan.c **** #endif /* FSL_FEATURE_FLEXCAN_SUPPORT_ENGINE_CLK_SEL_REMOVE */
 564              		.loc 1 509 0 discriminator 2
 565 00b0 6368     		ldr	r3, [r4, #4]
 508:../drivers/fsl_flexcan.c ****                                                            base->CTRL1 | CAN_CTRL1_CLKSRC_MASK;
 566              		.loc 1 508 0 discriminator 2
 567 00b2 43F40053 		orr	r3, r3, #8192
 568 00b6 B9E7     		b	.L33
 569              	.LVL50:
 570              	.L35:
 525:../drivers/fsl_flexcan.c **** 
 571              		.loc 1 525 0 discriminator 2
 572 00b8 6268     		ldr	r2, [r4, #4]
 573 00ba 22F48052 		bic	r2, r2, #4096
 574 00be CDE7     		b	.L36
 575              	.L37:
 528:../drivers/fsl_flexcan.c **** 
 576              		.loc 1 528 0 discriminator 2
 577 00c0 23F48003 		bic	r3, r3, #4194304
 578              	.LVL51:
 579 00c4 CFE7     		b	.L38
 580              	.LVL52:
 581              	.L39:
 531:../drivers/fsl_flexcan.c **** 
 582              		.loc 1 531 0 discriminator 2
 583 00c6 23F48033 		bic	r3, r3, #65536
 584              	.LVL53:
 585 00ca D0E7     		b	.L40
 586              	.L46:
 587              		.align	2
 588              	.L45:
 589 00cc 3C800440 		.word	1074036796
 590              		.cfi_endproc
 591              	.LFE163:
 593              		.section	.text.FLEXCAN_SetRxMbGlobalMask,"ax",%progbits
 594              		.align	1
 595              		.global	FLEXCAN_SetRxMbGlobalMask
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu fpv4-sp-d16
 601              	FLEXCAN_SetRxMbGlobalMask:
 602              	.LFB167:
 648:../drivers/fsl_flexcan.c **** 
 649:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 650:../drivers/fsl_flexcan.c **** void FLEXCAN_SetFDTimingConfig(CAN_Type *base, const flexcan_timing_config_t *config)
 651:../drivers/fsl_flexcan.c **** {
 652:../drivers/fsl_flexcan.c ****     /* Assertion. */
 653:../drivers/fsl_flexcan.c ****     assert(config);
 654:../drivers/fsl_flexcan.c **** 
 655:../drivers/fsl_flexcan.c ****     /* Enter Freeze Mode. */
 656:../drivers/fsl_flexcan.c ****     FLEXCAN_EnterFreezeMode(base);
 657:../drivers/fsl_flexcan.c **** 
 658:../drivers/fsl_flexcan.c ****     /* Cleaning previous Timing Setting. */
 659:../drivers/fsl_flexcan.c ****     base->FDCBT &= ~(CAN_FDCBT_FPRESDIV_MASK | CAN_FDCBT_FRJW_MASK | CAN_FDCBT_FPSEG1_MASK | CAN_FD
 660:../drivers/fsl_flexcan.c ****                      CAN_FDCBT_FPROPSEG_MASK);
 661:../drivers/fsl_flexcan.c **** 
 662:../drivers/fsl_flexcan.c ****     /* Updating Timing Setting according to configuration structure. */
 663:../drivers/fsl_flexcan.c ****     base->FDCBT |= (CAN_FDCBT_FPRESDIV(config->preDivider) | CAN_FDCBT_FRJW(config->rJumpwidth) |
 664:../drivers/fsl_flexcan.c ****                     CAN_FDCBT_FPSEG1(config->phaseSeg1) | CAN_FDCBT_FPSEG2(config->phaseSeg2) |
 665:../drivers/fsl_flexcan.c ****                     CAN_FDCBT_FPROPSEG(config->propSeg));
 666:../drivers/fsl_flexcan.c **** 
 667:../drivers/fsl_flexcan.c ****     /* Exit Freeze Mode. */
 668:../drivers/fsl_flexcan.c ****     FLEXCAN_ExitFreezeMode(base);
 669:../drivers/fsl_flexcan.c **** }
 670:../drivers/fsl_flexcan.c **** #endif
 671:../drivers/fsl_flexcan.c **** 
 672:../drivers/fsl_flexcan.c **** void FLEXCAN_SetRxMbGlobalMask(CAN_Type *base, uint32_t mask)
 673:../drivers/fsl_flexcan.c **** {
 603              		.loc 1 673 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              	.LVL54:
 608 0000 08B5     		push	{r3, lr}
 609              		.cfi_def_cfa_offset 8
 610              		.cfi_offset 3, -8
 611              		.cfi_offset 14, -4
 674:../drivers/fsl_flexcan.c ****     /* Enter Freeze Mode. */
 675:../drivers/fsl_flexcan.c ****     FLEXCAN_EnterFreezeMode(base);
 612              		.loc 1 675 0
 613 0002 FFF7FEFF 		bl	FLEXCAN_EnterFreezeMode
 614              	.LVL55:
 676:../drivers/fsl_flexcan.c **** 
 677:../drivers/fsl_flexcan.c ****     /* Setting Rx Message Buffer Global Mask value. */
 678:../drivers/fsl_flexcan.c ****     base->RXMGMASK = mask;
 679:../drivers/fsl_flexcan.c ****     base->RX14MASK = mask;
 680:../drivers/fsl_flexcan.c ****     base->RX15MASK = mask;
 681:../drivers/fsl_flexcan.c **** 
 682:../drivers/fsl_flexcan.c ****     /* Exit Freeze Mode. */
 683:../drivers/fsl_flexcan.c ****     FLEXCAN_ExitFreezeMode(base);
 684:../drivers/fsl_flexcan.c **** }
 615              		.loc 1 684 0
 616 0006 BDE80840 		pop	{r3, lr}
 617              		.cfi_restore 14
 618              		.cfi_restore 3
 619              		.cfi_def_cfa_offset 0
 678:../drivers/fsl_flexcan.c ****     base->RX14MASK = mask;
 620              		.loc 1 678 0
 621 000a 0161     		str	r1, [r0, #16]
 679:../drivers/fsl_flexcan.c ****     base->RX15MASK = mask;
 622              		.loc 1 679 0
 623 000c 4161     		str	r1, [r0, #20]
 680:../drivers/fsl_flexcan.c **** 
 624              		.loc 1 680 0
 625 000e 8161     		str	r1, [r0, #24]
 683:../drivers/fsl_flexcan.c **** }
 626              		.loc 1 683 0
 627 0010 FFF7FEBF 		b	FLEXCAN_ExitFreezeMode
 628              	.LVL56:
 629              		.cfi_endproc
 630              	.LFE167:
 632              		.section	.text.FLEXCAN_SetRxFifoGlobalMask,"ax",%progbits
 633              		.align	1
 634              		.global	FLEXCAN_SetRxFifoGlobalMask
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu fpv4-sp-d16
 640              	FLEXCAN_SetRxFifoGlobalMask:
 641              	.LFB168:
 685:../drivers/fsl_flexcan.c **** 
 686:../drivers/fsl_flexcan.c **** void FLEXCAN_SetRxFifoGlobalMask(CAN_Type *base, uint32_t mask)
 687:../drivers/fsl_flexcan.c **** {
 642              		.loc 1 687 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              	.LVL57:
 647 0000 08B5     		push	{r3, lr}
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 3, -8
 650              		.cfi_offset 14, -4
 688:../drivers/fsl_flexcan.c ****     /* Enter Freeze Mode. */
 689:../drivers/fsl_flexcan.c ****     FLEXCAN_EnterFreezeMode(base);
 651              		.loc 1 689 0
 652 0002 FFF7FEFF 		bl	FLEXCAN_EnterFreezeMode
 653              	.LVL58:
 690:../drivers/fsl_flexcan.c **** 
 691:../drivers/fsl_flexcan.c ****     /* Setting Rx FIFO Global Mask value. */
 692:../drivers/fsl_flexcan.c ****     base->RXFGMASK = mask;
 693:../drivers/fsl_flexcan.c **** 
 694:../drivers/fsl_flexcan.c ****     /* Exit Freeze Mode. */
 695:../drivers/fsl_flexcan.c ****     FLEXCAN_ExitFreezeMode(base);
 696:../drivers/fsl_flexcan.c **** }
 654              		.loc 1 696 0
 655 0006 BDE80840 		pop	{r3, lr}
 656              		.cfi_restore 14
 657              		.cfi_restore 3
 658              		.cfi_def_cfa_offset 0
 692:../drivers/fsl_flexcan.c **** 
 659              		.loc 1 692 0
 660 000a 8164     		str	r1, [r0, #72]
 695:../drivers/fsl_flexcan.c **** }
 661              		.loc 1 695 0
 662 000c FFF7FEBF 		b	FLEXCAN_ExitFreezeMode
 663              	.LVL59:
 664              		.cfi_endproc
 665              	.LFE168:
 667              		.section	.text.FLEXCAN_SetRxIndividualMask,"ax",%progbits
 668              		.align	1
 669              		.global	FLEXCAN_SetRxIndividualMask
 670              		.syntax unified
 671              		.thumb
 672              		.thumb_func
 673              		.fpu fpv4-sp-d16
 675              	FLEXCAN_SetRxIndividualMask:
 676              	.LFB169:
 697:../drivers/fsl_flexcan.c **** 
 698:../drivers/fsl_flexcan.c **** void FLEXCAN_SetRxIndividualMask(CAN_Type *base, uint8_t maskIdx, uint32_t mask)
 699:../drivers/fsl_flexcan.c **** {
 677              		.loc 1 699 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681              	.LVL60:
 682 0000 10B5     		push	{r4, lr}
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 4, -8
 685              		.cfi_offset 14, -4
 700:../drivers/fsl_flexcan.c ****     assert(maskIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
 701:../drivers/fsl_flexcan.c **** 
 702:../drivers/fsl_flexcan.c ****     /* Enter Freeze Mode. */
 703:../drivers/fsl_flexcan.c ****     FLEXCAN_EnterFreezeMode(base);
 686              		.loc 1 703 0
 687 0002 FFF7FEFF 		bl	FLEXCAN_EnterFreezeMode
 688              	.LVL61:
 704:../drivers/fsl_flexcan.c **** 
 705:../drivers/fsl_flexcan.c ****     /* Setting Rx Individual Mask value. */
 706:../drivers/fsl_flexcan.c ****     base->RXIMR[maskIdx] = mask;
 689              		.loc 1 706 0
 690 0006 01F50871 		add	r1, r1, #544
 691              	.LVL62:
 707:../drivers/fsl_flexcan.c **** 
 708:../drivers/fsl_flexcan.c ****     /* Exit Freeze Mode. */
 709:../drivers/fsl_flexcan.c ****     FLEXCAN_ExitFreezeMode(base);
 710:../drivers/fsl_flexcan.c **** }
 692              		.loc 1 710 0
 693 000a BDE81040 		pop	{r4, lr}
 694              		.cfi_restore 14
 695              		.cfi_restore 4
 696              		.cfi_def_cfa_offset 0
 706:../drivers/fsl_flexcan.c **** 
 697              		.loc 1 706 0
 698 000e 40F82120 		str	r2, [r0, r1, lsl #2]
 709:../drivers/fsl_flexcan.c **** }
 699              		.loc 1 709 0
 700 0012 FFF7FEBF 		b	FLEXCAN_ExitFreezeMode
 701              	.LVL63:
 702              		.cfi_endproc
 703              	.LFE169:
 705              		.section	.text.FLEXCAN_SetTxMbConfig,"ax",%progbits
 706              		.align	1
 707              		.global	FLEXCAN_SetTxMbConfig
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu fpv4-sp-d16
 713              	FLEXCAN_SetTxMbConfig:
 714              	.LFB170:
 711:../drivers/fsl_flexcan.c **** 
 712:../drivers/fsl_flexcan.c **** void FLEXCAN_SetTxMbConfig(CAN_Type *base, uint8_t mbIdx, bool enable)
 713:../drivers/fsl_flexcan.c **** {
 715              		.loc 1 713 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              	.LVL64:
 720 0000 10B5     		push	{r4, lr}
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 4, -8
 723              		.cfi_offset 14, -4
 724 0002 01F10803 		add	r3, r1, #8
 714:../drivers/fsl_flexcan.c ****     /* Assertion. */
 715:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
 716:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
 717:../drivers/fsl_flexcan.c **** 
 718:../drivers/fsl_flexcan.c ****     /* Inactivate Message Buffer. */
 719:../drivers/fsl_flexcan.c ****     if (enable)
 725              		.loc 1 719 0
 726 0006 72B1     		cbz	r2, .L51
 720:../drivers/fsl_flexcan.c ****     {
 721:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
 727              		.loc 1 721 0
 728 0008 1A01     		lsls	r2, r3, #4
 729              	.LVL65:
 730 000a 4FF00064 		mov	r4, #134217728
 731 000e 8450     		str	r4, [r0, r2]
 732              	.L52:
 722:../drivers/fsl_flexcan.c ****     }
 723:../drivers/fsl_flexcan.c ****     else
 724:../drivers/fsl_flexcan.c ****     {
 725:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].CS = 0;
 726:../drivers/fsl_flexcan.c ****     }
 727:../drivers/fsl_flexcan.c **** 
 728:../drivers/fsl_flexcan.c ****     /* Clean Message Buffer content. */
 729:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].ID = 0x0;
 733              		.loc 1 729 0
 734 0010 00EB0313 		add	r3, r0, r3, lsl #4
 730:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 735              		.loc 1 730 0
 736 0014 00EB0110 		add	r0, r0, r1, lsl #4
 737              	.LVL66:
 729:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 738              		.loc 1 729 0
 739 0018 0022     		movs	r2, #0
 740 001a 5A60     		str	r2, [r3, #4]
 741              		.loc 1 730 0
 742 001c C0F88820 		str	r2, [r0, #136]
 731:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 743              		.loc 1 731 0
 744 0020 C0F88C20 		str	r2, [r0, #140]
 745 0024 10BD     		pop	{r4, pc}
 746              	.LVL67:
 747              	.L51:
 725:../drivers/fsl_flexcan.c ****     }
 748              		.loc 1 725 0
 749 0026 1C01     		lsls	r4, r3, #4
 750 0028 0251     		str	r2, [r0, r4]
 751 002a F1E7     		b	.L52
 752              		.cfi_endproc
 753              	.LFE170:
 755              		.section	.text.FLEXCAN_SetRxMbConfig,"ax",%progbits
 756              		.align	1
 757              		.global	FLEXCAN_SetRxMbConfig
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 761              		.fpu fpv4-sp-d16
 763              	FLEXCAN_SetRxMbConfig:
 764              	.LFB171:
 732:../drivers/fsl_flexcan.c **** }
 733:../drivers/fsl_flexcan.c **** 
 734:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 735:../drivers/fsl_flexcan.c **** void FLEXCAN_SetFDTxMbConfig(CAN_Type *base, uint8_t mbIdx, bool enable)
 736:../drivers/fsl_flexcan.c **** {
 737:../drivers/fsl_flexcan.c ****     /* Assertion. */
 738:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
 739:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
 740:../drivers/fsl_flexcan.c ****     uint8_t cnt = 0;
 741:../drivers/fsl_flexcan.c ****     uint32_t dataSize;
 742:../drivers/fsl_flexcan.c ****     dataSize = (base->FDCTRL & CAN_FDCTRL_MBDSR0_MASK) >> CAN_FDCTRL_MBDSR0_SHIFT;
 743:../drivers/fsl_flexcan.c **** 
 744:../drivers/fsl_flexcan.c ****     /* Inactivate Message Buffer. */
 745:../drivers/fsl_flexcan.c ****     if (enable)
 746:../drivers/fsl_flexcan.c ****     {
 747:../drivers/fsl_flexcan.c ****         switch (dataSize)
 748:../drivers/fsl_flexcan.c ****         {
 749:../drivers/fsl_flexcan.c ****             case kFLEXCAN_8BperMB:
 750:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
 751:../drivers/fsl_flexcan.c ****                 break;
 752:../drivers/fsl_flexcan.c ****             case kFLEXCAN_16BperMB:
 753:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
 754:../drivers/fsl_flexcan.c ****                 break;
 755:../drivers/fsl_flexcan.c ****             case kFLEXCAN_32BperMB:
 756:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
 757:../drivers/fsl_flexcan.c ****                 break;
 758:../drivers/fsl_flexcan.c ****             case kFLEXCAN_64BperMB:
 759:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
 760:../drivers/fsl_flexcan.c ****                 break;
 761:../drivers/fsl_flexcan.c ****             default:
 762:../drivers/fsl_flexcan.c ****                 break;
 763:../drivers/fsl_flexcan.c ****         }
 764:../drivers/fsl_flexcan.c ****     }
 765:../drivers/fsl_flexcan.c ****     else
 766:../drivers/fsl_flexcan.c ****     {
 767:../drivers/fsl_flexcan.c ****         switch (dataSize)
 768:../drivers/fsl_flexcan.c ****         {
 769:../drivers/fsl_flexcan.c ****             case kFLEXCAN_8BperMB:
 770:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].CS = 0;
 771:../drivers/fsl_flexcan.c ****                 break;
 772:../drivers/fsl_flexcan.c ****             case kFLEXCAN_16BperMB:
 773:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].CS = 0;
 774:../drivers/fsl_flexcan.c ****                 break;
 775:../drivers/fsl_flexcan.c ****             case kFLEXCAN_32BperMB:
 776:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].CS = 0;
 777:../drivers/fsl_flexcan.c ****                 break;
 778:../drivers/fsl_flexcan.c ****             case kFLEXCAN_64BperMB:
 779:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].CS = 0;
 780:../drivers/fsl_flexcan.c ****                 break;
 781:../drivers/fsl_flexcan.c ****             default:
 782:../drivers/fsl_flexcan.c ****                 break;
 783:../drivers/fsl_flexcan.c ****         }
 784:../drivers/fsl_flexcan.c ****     }
 785:../drivers/fsl_flexcan.c **** 
 786:../drivers/fsl_flexcan.c ****     /* Clean ID and Message Buffer content. */
 787:../drivers/fsl_flexcan.c ****     switch (dataSize)
 788:../drivers/fsl_flexcan.c ****     {
 789:../drivers/fsl_flexcan.c ****         case kFLEXCAN_8BperMB:
 790:../drivers/fsl_flexcan.c ****             base->MB_8B[mbIdx].ID = 0x0;
 791:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 2; cnt++)
 792:../drivers/fsl_flexcan.c ****             {
 793:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].WORD[cnt] = 0x0;
 794:../drivers/fsl_flexcan.c ****             }
 795:../drivers/fsl_flexcan.c ****             break;
 796:../drivers/fsl_flexcan.c ****         case kFLEXCAN_16BperMB:
 797:../drivers/fsl_flexcan.c ****             base->MB_16B[mbIdx].ID = 0x0;
 798:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 4; cnt++)
 799:../drivers/fsl_flexcan.c ****             {
 800:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].WORD[cnt] = 0x0;
 801:../drivers/fsl_flexcan.c ****             }
 802:../drivers/fsl_flexcan.c ****             break;
 803:../drivers/fsl_flexcan.c ****         case kFLEXCAN_32BperMB:
 804:../drivers/fsl_flexcan.c ****             base->MB_32B[mbIdx].ID = 0x0;
 805:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 8; cnt++)
 806:../drivers/fsl_flexcan.c ****             {
 807:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].WORD[cnt] = 0x0;
 808:../drivers/fsl_flexcan.c ****             }
 809:../drivers/fsl_flexcan.c ****             break;
 810:../drivers/fsl_flexcan.c ****         case kFLEXCAN_64BperMB:
 811:../drivers/fsl_flexcan.c ****             base->MB_64B[mbIdx].ID = 0x0;
 812:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 16; cnt++)
 813:../drivers/fsl_flexcan.c ****             {
 814:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].WORD[cnt] = 0x0;
 815:../drivers/fsl_flexcan.c ****             }
 816:../drivers/fsl_flexcan.c ****             break;
 817:../drivers/fsl_flexcan.c ****         default:
 818:../drivers/fsl_flexcan.c ****             break;
 819:../drivers/fsl_flexcan.c ****     }
 820:../drivers/fsl_flexcan.c **** }
 821:../drivers/fsl_flexcan.c **** #endif
 822:../drivers/fsl_flexcan.c **** 
 823:../drivers/fsl_flexcan.c **** void FLEXCAN_SetRxMbConfig(CAN_Type *base, uint8_t mbIdx, const flexcan_rx_mb_config_t *config, boo
 824:../drivers/fsl_flexcan.c **** {
 765              		.loc 1 824 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              	.LVL68:
 770 0000 30B5     		push	{r4, r5, lr}
 771              		.cfi_def_cfa_offset 12
 772              		.cfi_offset 4, -12
 773              		.cfi_offset 5, -8
 774              		.cfi_offset 14, -4
 775 0002 00EB0114 		add	r4, r0, r1, lsl #4
 825:../drivers/fsl_flexcan.c ****     /* Assertion. */
 826:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
 827:../drivers/fsl_flexcan.c ****     assert(((config) || (false == enable)));
 828:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
 829:../drivers/fsl_flexcan.c **** 
 830:../drivers/fsl_flexcan.c ****     uint32_t cs_temp = 0;
 831:../drivers/fsl_flexcan.c **** 
 832:../drivers/fsl_flexcan.c ****     /* Inactivate Message Buffer. */
 833:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].CS = 0;
 776              		.loc 1 833 0
 777 0006 0025     		movs	r5, #0
 778 0008 C4F88050 		str	r5, [r4, #128]
 834:../drivers/fsl_flexcan.c **** 
 835:../drivers/fsl_flexcan.c ****     /* Clean Message Buffer content. */
 836:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].ID = 0x0;
 779              		.loc 1 836 0
 780 000c C4F88450 		str	r5, [r4, #132]
 837:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 781              		.loc 1 837 0
 782 0010 C4F88850 		str	r5, [r4, #136]
 838:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 783              		.loc 1 838 0
 784 0014 C4F88C50 		str	r5, [r4, #140]
 839:../drivers/fsl_flexcan.c **** 
 840:../drivers/fsl_flexcan.c ****     if (enable)
 785              		.loc 1 840 0
 786 0018 8BB1     		cbz	r3, .L53
 841:../drivers/fsl_flexcan.c ****     {
 842:../drivers/fsl_flexcan.c ****         /* Setup Message Buffer ID. */
 843:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].ID = config->id;
 787              		.loc 1 843 0
 788 001a 1368     		ldr	r3, [r2]
 789              	.LVL69:
 790 001c C4F88430 		str	r3, [r4, #132]
 844:../drivers/fsl_flexcan.c **** 
 845:../drivers/fsl_flexcan.c ****         /* Setup Message Buffer format. */
 846:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameFormatExtend == config->format)
 791              		.loc 1 846 0
 792 0020 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 847:../drivers/fsl_flexcan.c ****         {
 848:../drivers/fsl_flexcan.c ****             cs_temp |= CAN_CS_IDE_MASK;
 849:../drivers/fsl_flexcan.c ****         }
 850:../drivers/fsl_flexcan.c **** 
 851:../drivers/fsl_flexcan.c ****         /* Setup Message Buffer type. */
 852:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameTypeRemote == config->type)
 793              		.loc 1 852 0
 794 0022 5279     		ldrb	r2, [r2, #5]	@ zero_extendqisi2
 795              	.LVL70:
 848:../drivers/fsl_flexcan.c ****         }
 796              		.loc 1 848 0
 797 0024 012B     		cmp	r3, #1
 798 0026 0CBF     		ite	eq
 799 0028 4FF40013 		moveq	r3, #2097152
 800 002c 2B46     		movne	r3, r5
 801              	.LVL71:
 802              		.loc 1 852 0
 803 002e 012A     		cmp	r2, #1
 853:../drivers/fsl_flexcan.c ****         {
 854:../drivers/fsl_flexcan.c ****             cs_temp |= CAN_CS_RTR_MASK;
 804              		.loc 1 854 0
 805 0030 08BF     		it	eq
 806 0032 43F48013 		orreq	r3, r3, #1048576
 807              	.LVL72:
 855:../drivers/fsl_flexcan.c ****         }
 856:../drivers/fsl_flexcan.c **** 
 857:../drivers/fsl_flexcan.c ****         /* Activate Rx Message Buffer. */
 858:../drivers/fsl_flexcan.c ****         cs_temp |= CAN_CS_CODE(kFLEXCAN_RxMbEmpty);
 808              		.loc 1 858 0
 809 0036 43F08063 		orr	r3, r3, #67108864
 810              	.LVL73:
 859:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].CS = cs_temp;
 811              		.loc 1 859 0
 812 003a C4F88030 		str	r3, [r4, #128]
 813              	.LVL74:
 814              	.L53:
 815 003e 30BD     		pop	{r4, r5, pc}
 816              		.cfi_endproc
 817              	.LFE171:
 819              		.section	.text.FLEXCAN_SetRxFifoConfig,"ax",%progbits
 820              		.align	1
 821              		.global	FLEXCAN_SetRxFifoConfig
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 825              		.fpu fpv4-sp-d16
 827              	FLEXCAN_SetRxFifoConfig:
 828              	.LFB172:
 860:../drivers/fsl_flexcan.c ****     }
 861:../drivers/fsl_flexcan.c **** }
 862:../drivers/fsl_flexcan.c **** 
 863:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 864:../drivers/fsl_flexcan.c **** void FLEXCAN_SetFDRxMbConfig(CAN_Type *base, uint8_t mbIdx, const flexcan_rx_mb_config_t *config, b
 865:../drivers/fsl_flexcan.c **** {
 866:../drivers/fsl_flexcan.c ****     /* Assertion. */
 867:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
 868:../drivers/fsl_flexcan.c ****     assert(((config) || (false == enable)));
 869:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
 870:../drivers/fsl_flexcan.c **** 
 871:../drivers/fsl_flexcan.c ****     uint32_t cs_temp = 0;
 872:../drivers/fsl_flexcan.c ****     uint8_t cnt = 0;
 873:../drivers/fsl_flexcan.c ****     uint32_t dataSize;
 874:../drivers/fsl_flexcan.c ****     dataSize = (base->FDCTRL & CAN_FDCTRL_MBDSR0_MASK) >> CAN_FDCTRL_MBDSR0_SHIFT;
 875:../drivers/fsl_flexcan.c **** 
 876:../drivers/fsl_flexcan.c ****     /* Inactivate Message Buffer and clean ID, Message Buffer content. */
 877:../drivers/fsl_flexcan.c ****     switch (dataSize)
 878:../drivers/fsl_flexcan.c ****     {
 879:../drivers/fsl_flexcan.c ****         case kFLEXCAN_8BperMB:
 880:../drivers/fsl_flexcan.c ****             base->MB_8B[mbIdx].CS = 0;
 881:../drivers/fsl_flexcan.c ****             base->MB_8B[mbIdx].ID = 0x0;
 882:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 2; cnt++)
 883:../drivers/fsl_flexcan.c ****             {
 884:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].WORD[cnt] = 0x0;
 885:../drivers/fsl_flexcan.c ****             }
 886:../drivers/fsl_flexcan.c ****             break;
 887:../drivers/fsl_flexcan.c ****         case kFLEXCAN_16BperMB:
 888:../drivers/fsl_flexcan.c ****             base->MB_16B[mbIdx].CS = 0;
 889:../drivers/fsl_flexcan.c ****             base->MB_16B[mbIdx].ID = 0x0;
 890:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 4; cnt++)
 891:../drivers/fsl_flexcan.c ****             {
 892:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].WORD[cnt] = 0x0;
 893:../drivers/fsl_flexcan.c ****             }
 894:../drivers/fsl_flexcan.c ****             break;
 895:../drivers/fsl_flexcan.c ****         case kFLEXCAN_32BperMB:
 896:../drivers/fsl_flexcan.c ****             base->MB_32B[mbIdx].CS = 0;
 897:../drivers/fsl_flexcan.c ****             base->MB_32B[mbIdx].ID = 0x0;
 898:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 8; cnt++)
 899:../drivers/fsl_flexcan.c ****             {
 900:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].WORD[cnt] = 0x0;
 901:../drivers/fsl_flexcan.c ****             }
 902:../drivers/fsl_flexcan.c ****             break;
 903:../drivers/fsl_flexcan.c ****         case kFLEXCAN_64BperMB:
 904:../drivers/fsl_flexcan.c ****             base->MB_64B[mbIdx].CS = 0;
 905:../drivers/fsl_flexcan.c ****             base->MB_64B[mbIdx].ID = 0x0;
 906:../drivers/fsl_flexcan.c ****             for (cnt = 0; cnt < 16; cnt++)
 907:../drivers/fsl_flexcan.c ****             {
 908:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].WORD[cnt] = 0x0;
 909:../drivers/fsl_flexcan.c ****             }
 910:../drivers/fsl_flexcan.c ****             break;
 911:../drivers/fsl_flexcan.c ****         default:
 912:../drivers/fsl_flexcan.c ****             break;
 913:../drivers/fsl_flexcan.c ****     }
 914:../drivers/fsl_flexcan.c **** 
 915:../drivers/fsl_flexcan.c ****     if (enable)
 916:../drivers/fsl_flexcan.c ****     {
 917:../drivers/fsl_flexcan.c ****         /* Setup Message Buffer ID. */
 918:../drivers/fsl_flexcan.c ****         switch (dataSize)
 919:../drivers/fsl_flexcan.c ****         {
 920:../drivers/fsl_flexcan.c ****             case kFLEXCAN_8BperMB:
 921:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].ID = config->id;
 922:../drivers/fsl_flexcan.c ****                 break;
 923:../drivers/fsl_flexcan.c ****             case kFLEXCAN_16BperMB:
 924:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].ID = config->id;
 925:../drivers/fsl_flexcan.c ****                 break;
 926:../drivers/fsl_flexcan.c ****             case kFLEXCAN_32BperMB:
 927:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].ID = config->id;
 928:../drivers/fsl_flexcan.c ****                 break;
 929:../drivers/fsl_flexcan.c ****             case kFLEXCAN_64BperMB:
 930:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].ID = config->id;
 931:../drivers/fsl_flexcan.c ****                 break;
 932:../drivers/fsl_flexcan.c ****             default:
 933:../drivers/fsl_flexcan.c ****                 break;
 934:../drivers/fsl_flexcan.c ****         }
 935:../drivers/fsl_flexcan.c **** 
 936:../drivers/fsl_flexcan.c ****         /* Setup Message Buffer format. */
 937:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameFormatExtend == config->format)
 938:../drivers/fsl_flexcan.c ****         {
 939:../drivers/fsl_flexcan.c ****             cs_temp |= CAN_CS_IDE_MASK;
 940:../drivers/fsl_flexcan.c ****         }
 941:../drivers/fsl_flexcan.c **** 
 942:../drivers/fsl_flexcan.c ****         /* Activate Rx Message Buffer. */
 943:../drivers/fsl_flexcan.c ****         cs_temp |= CAN_CS_CODE(kFLEXCAN_RxMbEmpty);
 944:../drivers/fsl_flexcan.c ****         switch (dataSize)
 945:../drivers/fsl_flexcan.c ****         {
 946:../drivers/fsl_flexcan.c ****             case kFLEXCAN_8BperMB:
 947:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].CS = cs_temp;
 948:../drivers/fsl_flexcan.c ****                 break;
 949:../drivers/fsl_flexcan.c ****             case kFLEXCAN_16BperMB:
 950:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].CS = cs_temp;
 951:../drivers/fsl_flexcan.c ****                 break;
 952:../drivers/fsl_flexcan.c ****             case kFLEXCAN_32BperMB:
 953:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].CS = cs_temp;
 954:../drivers/fsl_flexcan.c ****                 break;
 955:../drivers/fsl_flexcan.c ****             case kFLEXCAN_64BperMB:
 956:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].CS = cs_temp;
 957:../drivers/fsl_flexcan.c ****                 break;
 958:../drivers/fsl_flexcan.c ****             default:
 959:../drivers/fsl_flexcan.c ****                 break;
 960:../drivers/fsl_flexcan.c ****         }
 961:../drivers/fsl_flexcan.c ****     }
 962:../drivers/fsl_flexcan.c **** }
 963:../drivers/fsl_flexcan.c **** #endif
 964:../drivers/fsl_flexcan.c **** 
 965:../drivers/fsl_flexcan.c **** void FLEXCAN_SetRxFifoConfig(CAN_Type *base, const flexcan_rx_fifo_config_t *config, bool enable)
 966:../drivers/fsl_flexcan.c **** {
 829              		.loc 1 966 0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              	.LVL75:
 834 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 835              		.cfi_def_cfa_offset 24
 836              		.cfi_offset 3, -24
 837              		.cfi_offset 4, -20
 838              		.cfi_offset 5, -16
 839              		.cfi_offset 6, -12
 840              		.cfi_offset 7, -8
 841              		.cfi_offset 14, -4
 842              		.loc 1 966 0
 843 0002 0446     		mov	r4, r0
 967:../drivers/fsl_flexcan.c ****     /* Assertion. */
 968:../drivers/fsl_flexcan.c ****     assert((config) || (false == enable));
 969:../drivers/fsl_flexcan.c **** 
 970:../drivers/fsl_flexcan.c ****     volatile uint32_t *idFilterRegion = (volatile uint32_t *)(&base->MB[6].CS);
 844              		.loc 1 970 0
 845 0004 00F1E005 		add	r5, r0, #224
 846              	.LVL76:
 971:../drivers/fsl_flexcan.c ****     uint8_t setup_mb, i, rffn = 0;
 972:../drivers/fsl_flexcan.c **** 
 973:../drivers/fsl_flexcan.c ****     /* Enter Freeze Mode. */
 974:../drivers/fsl_flexcan.c ****     FLEXCAN_EnterFreezeMode(base);
 847              		.loc 1 974 0
 848 0008 FFF7FEFF 		bl	FLEXCAN_EnterFreezeMode
 849              	.LVL77:
 975:../drivers/fsl_flexcan.c **** 
 976:../drivers/fsl_flexcan.c ****     if (enable)
 850              		.loc 1 976 0
 851 000c 002A     		cmp	r2, #0
 852 000e 35D0     		beq	.L62
 977:../drivers/fsl_flexcan.c ****     {
 978:../drivers/fsl_flexcan.c ****         assert(config->idFilterNum <= 128);
 979:../drivers/fsl_flexcan.c **** 
 980:../drivers/fsl_flexcan.c ****         /* Get the setup_mb value. */
 981:../drivers/fsl_flexcan.c ****         setup_mb = (base->MCR & CAN_MCR_MAXMB_MASK) >> CAN_MCR_MAXMB_SHIFT;
 982:../drivers/fsl_flexcan.c ****         setup_mb = (setup_mb < FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base)) ?
 983:../drivers/fsl_flexcan.c ****                        setup_mb :
 984:../drivers/fsl_flexcan.c ****                        FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base);
 985:../drivers/fsl_flexcan.c **** 
 986:../drivers/fsl_flexcan.c ****         /* Determine RFFN value. */
 987:../drivers/fsl_flexcan.c ****         for (i = 0; i <= 0xF; i++)
 988:../drivers/fsl_flexcan.c ****         {
 989:../drivers/fsl_flexcan.c ****             if ((8 * (i + 1)) >= config->idFilterNum)
 853              		.loc 1 989 0
 854 0010 0F79     		ldrb	r7, [r1, #4]	@ zero_extendqisi2
 981:../drivers/fsl_flexcan.c ****         setup_mb = (setup_mb < FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base)) ?
 855              		.loc 1 981 0
 856 0012 0368     		ldr	r3, [r0]
 857              	.LVL78:
 858              		.loc 1 989 0
 859 0014 0020     		movs	r0, #0
 860              	.LVL79:
 861              	.L65:
 862 0016 461C     		adds	r6, r0, #1
 863 0018 B7EBC60F 		cmp	r7, r6, lsl #3
 864 001c C3B2     		uxtb	r3, r0
 865              	.LVL80:
 866 001e 28DC     		bgt	.L63
 867              	.LVL81:
 990:../drivers/fsl_flexcan.c ****             {
 991:../drivers/fsl_flexcan.c ****                 rffn = i;
 992:../drivers/fsl_flexcan.c ****                 assert(((setup_mb - 8) - (2 * rffn)) > 0);
 993:../drivers/fsl_flexcan.c **** 
 994:../drivers/fsl_flexcan.c ****                 base->CTRL2 = (base->CTRL2 & ~CAN_CTRL2_RFFN_MASK) | CAN_CTRL2_RFFN(rffn);
 868              		.loc 1 994 0
 869 0020 666B     		ldr	r6, [r4, #52]
 870 0022 0006     		lsls	r0, r0, #24
 871 0024 00F07060 		and	r0, r0, #251658240
 872 0028 26F07066 		bic	r6, r6, #251658240
 873 002c 3043     		orrs	r0, r0, r6
 874 002e 6063     		str	r0, [r4, #52]
 875              	.LVL82:
 876              	.L64:
 995:../drivers/fsl_flexcan.c ****                 break;
 996:../drivers/fsl_flexcan.c ****             }
 997:../drivers/fsl_flexcan.c ****         }
 998:../drivers/fsl_flexcan.c ****     }
 999:../drivers/fsl_flexcan.c ****     else
1000:../drivers/fsl_flexcan.c ****     {
1001:../drivers/fsl_flexcan.c ****         rffn = (base->CTRL2 & CAN_CTRL2_RFFN_MASK) >> CAN_CTRL2_RFFN_SHIFT;
1002:../drivers/fsl_flexcan.c ****     }
1003:../drivers/fsl_flexcan.c **** 
1004:../drivers/fsl_flexcan.c ****     /* Clean ID filter table occuyied Message Buffer Region. */
1005:../drivers/fsl_flexcan.c ****     rffn = (rffn + 1) * 8;
 877              		.loc 1 1005 0
 878 0030 0133     		adds	r3, r3, #1
 879              	.LVL83:
 880 0032 DB00     		lsls	r3, r3, #3
 881 0034 0020     		movs	r0, #0
 882 0036 03F0F803 		and	r3, r3, #248
 883              	.LVL84:
1006:../drivers/fsl_flexcan.c ****     for (i = 0; i < rffn; i++)
1007:../drivers/fsl_flexcan.c ****     {
1008:../drivers/fsl_flexcan.c ****         idFilterRegion[i] = 0x0;
 884              		.loc 1 1008 0
 885 003a 0746     		mov	r7, r0
 886              	.LVL85:
 887              	.L66:
 888              		.loc 1 1008 0 is_stmt 0 discriminator 3
 889 003c 45F82070 		str	r7, [r5, r0, lsl #2]
 890              	.LVL86:
 891 0040 0130     		adds	r0, r0, #1
 892              	.LVL87:
1006:../drivers/fsl_flexcan.c ****     for (i = 0; i < rffn; i++)
 893              		.loc 1 1006 0 is_stmt 1 discriminator 3
 894 0042 C6B2     		uxtb	r6, r0
 895 0044 B342     		cmp	r3, r6
 896 0046 F9D8     		bhi	.L66
1009:../drivers/fsl_flexcan.c ****     }
1010:../drivers/fsl_flexcan.c **** 
1011:../drivers/fsl_flexcan.c ****     if (enable)
 897              		.loc 1 1011 0
 898 0048 002A     		cmp	r2, #0
 899 004a 4DD0     		beq	.L67
1012:../drivers/fsl_flexcan.c ****     {
1013:../drivers/fsl_flexcan.c ****         /* Disable unused Rx FIFO Filter. */
1014:../drivers/fsl_flexcan.c ****         for (i = config->idFilterNum; i < rffn; i++)
 900              		.loc 1 1014 0
 901 004c 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 902              	.LVL88:
1015:../drivers/fsl_flexcan.c ****         {
1016:../drivers/fsl_flexcan.c ****             idFilterRegion[i] = 0xFFFFFFFFU;
 903              		.loc 1 1016 0
 904 004e 4FF0FF37 		mov	r7, #-1
 905 0052 05EB8006 		add	r6, r5, r0, lsl #2
1014:../drivers/fsl_flexcan.c ****         {
 906              		.loc 1 1014 0
 907 0056 0246     		mov	r2, r0
 908              	.LVL89:
 909              	.L68:
1014:../drivers/fsl_flexcan.c ****         {
 910              		.loc 1 1014 0 is_stmt 0 discriminator 1
 911 0058 9A42     		cmp	r2, r3
 912 005a 13D3     		bcc	.L69
 913 005c 0023     		movs	r3, #0
 914              	.LVL90:
 915              	.L70:
1017:../drivers/fsl_flexcan.c ****         }
1018:../drivers/fsl_flexcan.c **** 
1019:../drivers/fsl_flexcan.c ****         /* Copy ID filter table to Message Buffer Region. */
1020:../drivers/fsl_flexcan.c ****         for (i = 0; i < config->idFilterNum; i++)
 916              		.loc 1 1020 0 is_stmt 1 discriminator 1
 917 005e DAB2     		uxtb	r2, r3
 918 0060 9042     		cmp	r0, r2
 919 0062 14D8     		bhi	.L71
1021:../drivers/fsl_flexcan.c ****         {
1022:../drivers/fsl_flexcan.c ****             idFilterRegion[i] = config->idFilterTable[i];
1023:../drivers/fsl_flexcan.c ****         }
1024:../drivers/fsl_flexcan.c **** 
1025:../drivers/fsl_flexcan.c ****         /* Setup ID Fitlter Type. */
1026:../drivers/fsl_flexcan.c ****         switch (config->idFilterType)
 920              		.loc 1 1026 0
 921 0064 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 922              	.LVL91:
 923 0066 032B     		cmp	r3, #3
 924 0068 1CD8     		bhi	.L72
 925 006a DFE803F0 		tbb	[pc, r3]
 926              	.LVL92:
 927              	.L74:
 928 006e 17       		.byte	(.L73-.L74)/2
 929 006f 2D       		.byte	(.L75-.L74)/2
 930 0070 33       		.byte	(.L76-.L74)/2
 931 0071 39       		.byte	(.L77-.L74)/2
 932              		.p2align 1
 933              	.L63:
 987:../drivers/fsl_flexcan.c ****         {
 934              		.loc 1 987 0 discriminator 2
 935 0072 102E     		cmp	r6, #16
 936 0074 3046     		mov	r0, r6
 937 0076 CED1     		bne	.L65
 938              	.LVL93:
 971:../drivers/fsl_flexcan.c **** 
 939              		.loc 1 971 0
 940 0078 0023     		movs	r3, #0
 941 007a D9E7     		b	.L64
 942              	.LVL94:
 943              	.L62:
1001:../drivers/fsl_flexcan.c ****     }
 944              		.loc 1 1001 0
 945 007c 436B     		ldr	r3, [r0, #52]
 946 007e C3F30363 		ubfx	r3, r3, #24, #4
 947              	.LVL95:
 948 0082 D5E7     		b	.L64
 949              	.LVL96:
 950              	.L69:
1014:../drivers/fsl_flexcan.c ****         {
 951              		.loc 1 1014 0 discriminator 3
 952 0084 0132     		adds	r2, r2, #1
 953              	.LVL97:
1016:../drivers/fsl_flexcan.c ****         }
 954              		.loc 1 1016 0 discriminator 3
 955 0086 46F8047B 		str	r7, [r6], #4
1014:../drivers/fsl_flexcan.c ****         {
 956              		.loc 1 1014 0 discriminator 3
 957 008a D2B2     		uxtb	r2, r2
 958              	.LVL98:
 959 008c E4E7     		b	.L68
 960              	.LVL99:
 961              	.L71:
1022:../drivers/fsl_flexcan.c ****         }
 962              		.loc 1 1022 0 discriminator 3
 963 008e 0A68     		ldr	r2, [r1]
 964 0090 52F82320 		ldr	r2, [r2, r3, lsl #2]
 965 0094 45F82320 		str	r2, [r5, r3, lsl #2]
 966              	.LVL100:
 967 0098 0133     		adds	r3, r3, #1
 968              	.LVL101:
 969 009a E0E7     		b	.L70
 970              	.L73:
1027:../drivers/fsl_flexcan.c ****         {
1028:../drivers/fsl_flexcan.c ****             case kFLEXCAN_RxFifoFilterTypeA:
1029:../drivers/fsl_flexcan.c ****                 base->MCR = (base->MCR & ~CAN_MCR_IDAM_MASK) | CAN_MCR_IDAM(0x0);
 971              		.loc 1 1029 0
 972 009c 2368     		ldr	r3, [r4]
 973 009e 23F44073 		bic	r3, r3, #768
 974              	.L83:
1030:../drivers/fsl_flexcan.c ****                 break;
1031:../drivers/fsl_flexcan.c ****             case kFLEXCAN_RxFifoFilterTypeB:
1032:../drivers/fsl_flexcan.c ****                 base->MCR = (base->MCR & ~CAN_MCR_IDAM_MASK) | CAN_MCR_IDAM(0x1);
1033:../drivers/fsl_flexcan.c ****                 break;
1034:../drivers/fsl_flexcan.c ****             case kFLEXCAN_RxFifoFilterTypeC:
1035:../drivers/fsl_flexcan.c ****                 base->MCR = (base->MCR & ~CAN_MCR_IDAM_MASK) | CAN_MCR_IDAM(0x2);
1036:../drivers/fsl_flexcan.c ****                 break;
1037:../drivers/fsl_flexcan.c ****             case kFLEXCAN_RxFifoFilterTypeD:
1038:../drivers/fsl_flexcan.c ****                 /* All frames rejected. */
1039:../drivers/fsl_flexcan.c ****                 base->MCR = (base->MCR & ~CAN_MCR_IDAM_MASK) | CAN_MCR_IDAM(0x3);
 975              		.loc 1 1039 0
 976 00a2 2360     		str	r3, [r4]
 977              	.L72:
1040:../drivers/fsl_flexcan.c ****                 break;
1041:../drivers/fsl_flexcan.c ****             default:
1042:../drivers/fsl_flexcan.c ****                 break;
1043:../drivers/fsl_flexcan.c ****         }
1044:../drivers/fsl_flexcan.c **** 
1045:../drivers/fsl_flexcan.c ****         /* Setting Message Reception Priority. */
1046:../drivers/fsl_flexcan.c ****         base->CTRL2 = (config->priority == kFLEXCAN_RxFifoPrioHigh) ? base->CTRL2 & ~CAN_CTRL2_MRP_
 978              		.loc 1 1046 0
 979 00a4 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 980 00a6 012B     		cmp	r3, #1
 981 00a8 636B     		ldr	r3, [r4, #52]
 982 00aa 0CBF     		ite	eq
 983 00ac 23F48023 		biceq	r3, r3, #262144
 984 00b0 43F48023 		orrne	r3, r3, #262144
 985 00b4 6363     		str	r3, [r4, #52]
1047:../drivers/fsl_flexcan.c ****                                                                       base->CTRL2 | CAN_CTRL2_MRP_M
1048:../drivers/fsl_flexcan.c **** 
1049:../drivers/fsl_flexcan.c ****         /* Enable Rx Message FIFO. */
1050:../drivers/fsl_flexcan.c ****         base->MCR |= CAN_MCR_RFEN_MASK;
 986              		.loc 1 1050 0
 987 00b6 2368     		ldr	r3, [r4]
 988 00b8 43F00053 		orr	r3, r3, #536870912
 989 00bc 2360     		str	r3, [r4]
 990              	.L80:
1051:../drivers/fsl_flexcan.c ****     }
1052:../drivers/fsl_flexcan.c ****     else
1053:../drivers/fsl_flexcan.c ****     {
1054:../drivers/fsl_flexcan.c ****         /* Disable Rx Message FIFO. */
1055:../drivers/fsl_flexcan.c ****         base->MCR &= ~CAN_MCR_RFEN_MASK;
1056:../drivers/fsl_flexcan.c **** 
1057:../drivers/fsl_flexcan.c ****         /* Clean MB0 ~ MB5. */
1058:../drivers/fsl_flexcan.c ****         FLEXCAN_SetRxMbConfig(base, 0, NULL, false);
1059:../drivers/fsl_flexcan.c ****         FLEXCAN_SetRxMbConfig(base, 1, NULL, false);
1060:../drivers/fsl_flexcan.c ****         FLEXCAN_SetRxMbConfig(base, 2, NULL, false);
1061:../drivers/fsl_flexcan.c ****         FLEXCAN_SetRxMbConfig(base, 3, NULL, false);
1062:../drivers/fsl_flexcan.c ****         FLEXCAN_SetRxMbConfig(base, 4, NULL, false);
1063:../drivers/fsl_flexcan.c ****         FLEXCAN_SetRxMbConfig(base, 5, NULL, false);
1064:../drivers/fsl_flexcan.c ****     }
1065:../drivers/fsl_flexcan.c **** 
1066:../drivers/fsl_flexcan.c ****     /* Exit Freeze Mode. */
1067:../drivers/fsl_flexcan.c ****     FLEXCAN_ExitFreezeMode(base);
 991              		.loc 1 1067 0
 992 00be 2046     		mov	r0, r4
1068:../drivers/fsl_flexcan.c **** }
 993              		.loc 1 1068 0
 994 00c0 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 995              		.cfi_remember_state
 996              		.cfi_restore 14
 997              		.cfi_restore 7
 998              		.cfi_restore 6
 999              		.cfi_restore 5
 1000              		.cfi_restore 4
 1001              		.cfi_restore 3
 1002              		.cfi_def_cfa_offset 0
 1003              	.LVL102:
1067:../drivers/fsl_flexcan.c **** }
 1004              		.loc 1 1067 0
 1005 00c4 FFF7FEBF 		b	FLEXCAN_ExitFreezeMode
 1006              	.LVL103:
 1007              	.L75:
 1008              		.cfi_restore_state
1032:../drivers/fsl_flexcan.c ****                 break;
 1009              		.loc 1 1032 0
 1010 00c8 2368     		ldr	r3, [r4]
 1011 00ca 23F44073 		bic	r3, r3, #768
 1012 00ce 43F48073 		orr	r3, r3, #256
 1013 00d2 E6E7     		b	.L83
 1014              	.L76:
1035:../drivers/fsl_flexcan.c ****                 break;
 1015              		.loc 1 1035 0
 1016 00d4 2368     		ldr	r3, [r4]
 1017 00d6 23F44073 		bic	r3, r3, #768
 1018 00da 43F40073 		orr	r3, r3, #512
 1019 00de E0E7     		b	.L83
 1020              	.L77:
1039:../drivers/fsl_flexcan.c ****                 break;
 1021              		.loc 1 1039 0
 1022 00e0 2368     		ldr	r3, [r4]
 1023 00e2 43F44073 		orr	r3, r3, #768
 1024 00e6 DCE7     		b	.L83
 1025              	.LVL104:
 1026              	.L67:
1055:../drivers/fsl_flexcan.c **** 
 1027              		.loc 1 1055 0
 1028 00e8 2368     		ldr	r3, [r4]
 1029              	.LVL105:
 1030 00ea 23F00053 		bic	r3, r3, #536870912
 1031 00ee 2360     		str	r3, [r4]
 1032              	.LVL106:
 1033              	.LBB81:
 1034              	.LBB82:
 833:../drivers/fsl_flexcan.c **** 
 1035              		.loc 1 833 0
 1036 00f0 C4F88020 		str	r2, [r4, #128]
 836:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 1037              		.loc 1 836 0
 1038 00f4 C4F88420 		str	r2, [r4, #132]
 837:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 1039              		.loc 1 837 0
 1040 00f8 C4F88820 		str	r2, [r4, #136]
 838:../drivers/fsl_flexcan.c **** 
 1041              		.loc 1 838 0
 1042 00fc C4F88C20 		str	r2, [r4, #140]
 1043              	.LVL107:
 1044              	.LBE82:
 1045              	.LBE81:
 1046              	.LBB83:
 1047              	.LBB84:
 833:../drivers/fsl_flexcan.c **** 
 1048              		.loc 1 833 0
 1049 0100 C4F89020 		str	r2, [r4, #144]
 836:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 1050              		.loc 1 836 0
 1051 0104 C4F89420 		str	r2, [r4, #148]
 837:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 1052              		.loc 1 837 0
 1053 0108 C4F89820 		str	r2, [r4, #152]
 838:../drivers/fsl_flexcan.c **** 
 1054              		.loc 1 838 0
 1055 010c C4F89C20 		str	r2, [r4, #156]
 1056              	.LVL108:
 1057              	.LBE84:
 1058              	.LBE83:
 1059              	.LBB85:
 1060              	.LBB86:
 833:../drivers/fsl_flexcan.c **** 
 1061              		.loc 1 833 0
 1062 0110 C4F8A020 		str	r2, [r4, #160]
 836:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 1063              		.loc 1 836 0
 1064 0114 C4F8A420 		str	r2, [r4, #164]
 837:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 1065              		.loc 1 837 0
 1066 0118 C4F8A820 		str	r2, [r4, #168]
 838:../drivers/fsl_flexcan.c **** 
 1067              		.loc 1 838 0
 1068 011c C4F8AC20 		str	r2, [r4, #172]
 1069              	.LVL109:
 1070              	.LBE86:
 1071              	.LBE85:
 1072              	.LBB87:
 1073              	.LBB88:
 833:../drivers/fsl_flexcan.c **** 
 1074              		.loc 1 833 0
 1075 0120 C4F8B020 		str	r2, [r4, #176]
 836:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 1076              		.loc 1 836 0
 1077 0124 C4F8B420 		str	r2, [r4, #180]
 837:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 1078              		.loc 1 837 0
 1079 0128 C4F8B820 		str	r2, [r4, #184]
 838:../drivers/fsl_flexcan.c **** 
 1080              		.loc 1 838 0
 1081 012c C4F8BC20 		str	r2, [r4, #188]
 1082              	.LVL110:
 1083              	.LBE88:
 1084              	.LBE87:
 1085              	.LBB89:
 1086              	.LBB90:
 833:../drivers/fsl_flexcan.c **** 
 1087              		.loc 1 833 0
 1088 0130 C4F8C020 		str	r2, [r4, #192]
 836:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 1089              		.loc 1 836 0
 1090 0134 C4F8C420 		str	r2, [r4, #196]
 837:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 1091              		.loc 1 837 0
 1092 0138 C4F8C820 		str	r2, [r4, #200]
 838:../drivers/fsl_flexcan.c **** 
 1093              		.loc 1 838 0
 1094 013c C4F8CC20 		str	r2, [r4, #204]
 1095              	.LVL111:
 1096              	.LBE90:
 1097              	.LBE89:
 1098              	.LBB91:
 1099              	.LBB92:
 833:../drivers/fsl_flexcan.c **** 
 1100              		.loc 1 833 0
 1101 0140 C4F8D020 		str	r2, [r4, #208]
 836:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 1102              		.loc 1 836 0
 1103 0144 C4F8D420 		str	r2, [r4, #212]
 837:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 1104              		.loc 1 837 0
 1105 0148 C4F8D820 		str	r2, [r4, #216]
 838:../drivers/fsl_flexcan.c **** 
 1106              		.loc 1 838 0
 1107 014c C4F8DC20 		str	r2, [r4, #220]
 1108 0150 B5E7     		b	.L80
 1109              	.LBE92:
 1110              	.LBE91:
 1111              		.cfi_endproc
 1112              	.LFE172:
 1114              		.section	.text.FLEXCAN_WriteTxMb,"ax",%progbits
 1115              		.align	1
 1116              		.global	FLEXCAN_WriteTxMb
 1117              		.syntax unified
 1118              		.thumb
 1119              		.thumb_func
 1120              		.fpu fpv4-sp-d16
 1122              	FLEXCAN_WriteTxMb:
 1123              	.LFB173:
1069:../drivers/fsl_flexcan.c **** 
1070:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_RX_FIFO_DMA) && FSL_FEATURE_FLEXCAN_HAS_RX_FIFO_DMA)
1071:../drivers/fsl_flexcan.c **** void FLEXCAN_EnableRxFifoDMA(CAN_Type *base, bool enable)
1072:../drivers/fsl_flexcan.c **** {
1073:../drivers/fsl_flexcan.c ****     if (enable)
1074:../drivers/fsl_flexcan.c ****     {
1075:../drivers/fsl_flexcan.c ****         /* Enter Freeze Mode. */
1076:../drivers/fsl_flexcan.c ****         FLEXCAN_EnterFreezeMode(base);
1077:../drivers/fsl_flexcan.c **** 
1078:../drivers/fsl_flexcan.c ****         /* Enable FlexCAN DMA. */
1079:../drivers/fsl_flexcan.c ****         base->MCR |= CAN_MCR_DMA_MASK;
1080:../drivers/fsl_flexcan.c **** 
1081:../drivers/fsl_flexcan.c ****         /* Exit Freeze Mode. */
1082:../drivers/fsl_flexcan.c ****         FLEXCAN_ExitFreezeMode(base);
1083:../drivers/fsl_flexcan.c ****     }
1084:../drivers/fsl_flexcan.c ****     else
1085:../drivers/fsl_flexcan.c ****     {
1086:../drivers/fsl_flexcan.c ****         /* Enter Freeze Mode. */
1087:../drivers/fsl_flexcan.c ****         FLEXCAN_EnterFreezeMode(base);
1088:../drivers/fsl_flexcan.c **** 
1089:../drivers/fsl_flexcan.c ****         /* Disable FlexCAN DMA. */
1090:../drivers/fsl_flexcan.c ****         base->MCR &= ~CAN_MCR_DMA_MASK;
1091:../drivers/fsl_flexcan.c **** 
1092:../drivers/fsl_flexcan.c ****         /* Exit Freeze Mode. */
1093:../drivers/fsl_flexcan.c ****         FLEXCAN_ExitFreezeMode(base);
1094:../drivers/fsl_flexcan.c ****     }
1095:../drivers/fsl_flexcan.c **** }
1096:../drivers/fsl_flexcan.c **** #endif /* FSL_FEATURE_FLEXCAN_HAS_RX_FIFO_DMA */
1097:../drivers/fsl_flexcan.c **** 
1098:../drivers/fsl_flexcan.c **** status_t FLEXCAN_WriteTxMb(CAN_Type *base, uint8_t mbIdx, const flexcan_frame_t *txFrame)
1099:../drivers/fsl_flexcan.c **** {
 1124              		.loc 1 1099 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 0
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
 1128              	.LVL112:
 1129 0000 30B5     		push	{r4, r5, lr}
 1130              		.cfi_def_cfa_offset 12
 1131              		.cfi_offset 4, -12
 1132              		.cfi_offset 5, -8
 1133              		.cfi_offset 14, -4
 1134 0002 00EB0114 		add	r4, r0, r1, lsl #4
1100:../drivers/fsl_flexcan.c ****     /* Assertion. */
1101:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1102:../drivers/fsl_flexcan.c ****     assert(txFrame);
1103:../drivers/fsl_flexcan.c ****     assert(txFrame->length <= 8);
1104:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1105:../drivers/fsl_flexcan.c **** 
1106:../drivers/fsl_flexcan.c ****     uint32_t cs_temp = 0;
1107:../drivers/fsl_flexcan.c **** 
1108:../drivers/fsl_flexcan.c ****     /* Check if Message Buffer is available. */
1109:../drivers/fsl_flexcan.c ****     if (CAN_CS_CODE(kFLEXCAN_TxMbDataOrRemote) != (base->MB[mbIdx].CS & CAN_CS_CODE_MASK))
 1135              		.loc 1 1109 0
 1136 0006 D4F88030 		ldr	r3, [r4, #128]
 1137 000a 03F07063 		and	r3, r3, #251658240
 1138 000e B3F1406F 		cmp	r3, #201326592
 1139 0012 2AD0     		beq	.L88
1110:../drivers/fsl_flexcan.c ****     {
1111:../drivers/fsl_flexcan.c ****         /* Inactive Tx Message Buffer. */
1112:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].CS = (base->MB[mbIdx].CS & ~CAN_CS_CODE_MASK) | CAN_CS_CODE(kFLEXCAN_TxMbIn
 1140              		.loc 1 1112 0
 1141 0014 D4F88030 		ldr	r3, [r4, #128]
1113:../drivers/fsl_flexcan.c **** 
1114:../drivers/fsl_flexcan.c ****         /* Fill Message ID field. */
1115:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].ID = txFrame->id;
1116:../drivers/fsl_flexcan.c **** 
1117:../drivers/fsl_flexcan.c ****         /* Fill Message Format field. */
1118:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameFormatExtend == txFrame->format)
 1142              		.loc 1 1118 0
 1143 0018 9578     		ldrb	r5, [r2, #2]	@ zero_extendqisi2
1112:../drivers/fsl_flexcan.c **** 
 1144              		.loc 1 1112 0
 1145 001a 23F07063 		bic	r3, r3, #251658240
 1146 001e 43F00063 		orr	r3, r3, #134217728
 1147 0022 C4F88030 		str	r3, [r4, #128]
1115:../drivers/fsl_flexcan.c **** 
 1148              		.loc 1 1115 0
 1149 0026 5368     		ldr	r3, [r2, #4]
1119:../drivers/fsl_flexcan.c ****         {
1120:../drivers/fsl_flexcan.c ****             cs_temp |= CAN_CS_SRR_MASK | CAN_CS_IDE_MASK;
 1150              		.loc 1 1120 0
 1151 0028 15F0200F 		tst	r5, #32
1115:../drivers/fsl_flexcan.c **** 
 1152              		.loc 1 1115 0
 1153 002c C3F31C03 		ubfx	r3, r3, #0, #29
 1154 0030 C4F88430 		str	r3, [r4, #132]
 1155              		.loc 1 1120 0
 1156 0034 14BF     		ite	ne
 1157 0036 4FF4C003 		movne	r3, #6291456
 1158 003a 0023     		moveq	r3, #0
 1159              	.LVL113:
1121:../drivers/fsl_flexcan.c ****         }
1122:../drivers/fsl_flexcan.c **** 
1123:../drivers/fsl_flexcan.c ****         /* Fill Message Type field. */
1124:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameTypeRemote == txFrame->type)
 1160              		.loc 1 1124 0
 1161 003c 15F0100F 		tst	r5, #16
1125:../drivers/fsl_flexcan.c ****         {
1126:../drivers/fsl_flexcan.c ****             cs_temp |= CAN_CS_RTR_MASK;
1127:../drivers/fsl_flexcan.c ****         }
1128:../drivers/fsl_flexcan.c **** 
1129:../drivers/fsl_flexcan.c ****         cs_temp |= CAN_CS_CODE(kFLEXCAN_TxMbDataOrRemote) | CAN_CS_DLC(txFrame->length);
1130:../drivers/fsl_flexcan.c **** 
1131:../drivers/fsl_flexcan.c ****         /* Load Message Payload. */
1132:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].WORD0 = txFrame->dataWord0;
 1162              		.loc 1 1132 0
 1163 0040 00EB0110 		add	r0, r0, r1, lsl #4
 1164              	.LVL114:
1126:../drivers/fsl_flexcan.c ****         }
 1165              		.loc 1 1126 0
 1166 0044 18BF     		it	ne
 1167 0046 43F48013 		orrne	r3, r3, #1048576
 1168              	.LVL115:
1129:../drivers/fsl_flexcan.c **** 
 1169              		.loc 1 1129 0
 1170 004a 05F00F05 		and	r5, r5, #15
 1171 004e 43EA0543 		orr	r3, r3, r5, lsl #16
 1172              	.LVL116:
 1173              		.loc 1 1132 0
 1174 0052 9568     		ldr	r5, [r2, #8]
 1175 0054 C0F88850 		str	r5, [r0, #136]
 1176              	.LVL117:
1133:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].WORD1 = txFrame->dataWord1;
 1177              		.loc 1 1133 0
 1178 0058 D268     		ldr	r2, [r2, #12]
 1179              	.LVL118:
 1180 005a C0F88C20 		str	r2, [r0, #140]
1129:../drivers/fsl_flexcan.c **** 
 1181              		.loc 1 1129 0
 1182 005e 43F04063 		orr	r3, r3, #201326592
 1183              	.LVL119:
1134:../drivers/fsl_flexcan.c **** 
1135:../drivers/fsl_flexcan.c ****         /* Activate Tx Message Buffer. */
1136:../drivers/fsl_flexcan.c ****         base->MB[mbIdx].CS = cs_temp;
 1184              		.loc 1 1136 0
 1185 0062 C4F88030 		str	r3, [r4, #128]
1137:../drivers/fsl_flexcan.c **** 
1138:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641) && FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641)
1139:../drivers/fsl_flexcan.c ****         base->MB[FLEXCAN_GetFirstValidMb(base)].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
1140:../drivers/fsl_flexcan.c ****         base->MB[FLEXCAN_GetFirstValidMb(base)].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
1141:../drivers/fsl_flexcan.c **** #endif
1142:../drivers/fsl_flexcan.c **** 
1143:../drivers/fsl_flexcan.c ****         return kStatus_Success;
 1186              		.loc 1 1143 0
 1187 0066 0020     		movs	r0, #0
 1188 0068 30BD     		pop	{r4, r5, pc}
 1189              	.LVL120:
 1190              	.L88:
1144:../drivers/fsl_flexcan.c ****     }
1145:../drivers/fsl_flexcan.c ****     else
1146:../drivers/fsl_flexcan.c ****     {
1147:../drivers/fsl_flexcan.c ****         /* Tx Message Buffer is activated, return immediately. */
1148:../drivers/fsl_flexcan.c ****         return kStatus_Fail;
 1191              		.loc 1 1148 0
 1192 006a 0120     		movs	r0, #1
 1193              	.LVL121:
1149:../drivers/fsl_flexcan.c ****     }
1150:../drivers/fsl_flexcan.c **** }
 1194              		.loc 1 1150 0
 1195 006c 30BD     		pop	{r4, r5, pc}
 1196              		.cfi_endproc
 1197              	.LFE173:
 1199              		.section	.text.FLEXCAN_ReadRxMb,"ax",%progbits
 1200              		.align	1
 1201              		.global	FLEXCAN_ReadRxMb
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1205              		.fpu fpv4-sp-d16
 1207              	FLEXCAN_ReadRxMb:
 1208              	.LFB174:
1151:../drivers/fsl_flexcan.c **** 
1152:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
1153:../drivers/fsl_flexcan.c **** status_t FLEXCAN_WriteFDTxMb(CAN_Type *base, uint8_t mbIdx, const flexcan_fd_frame_t *txFrame)
1154:../drivers/fsl_flexcan.c **** {
1155:../drivers/fsl_flexcan.c ****     /* Assertion. */
1156:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1157:../drivers/fsl_flexcan.c ****     assert(txFrame);
1158:../drivers/fsl_flexcan.c ****     assert(txFrame->length <= 15);
1159:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1160:../drivers/fsl_flexcan.c **** 
1161:../drivers/fsl_flexcan.c ****     uint32_t cs_temp = 0;
1162:../drivers/fsl_flexcan.c ****     uint8_t cnt = 0;
1163:../drivers/fsl_flexcan.c ****     uint32_t can_cs = 0;
1164:../drivers/fsl_flexcan.c ****     uint32_t dataSize;
1165:../drivers/fsl_flexcan.c ****     dataSize = (base->FDCTRL & CAN_FDCTRL_MBDSR0_MASK) >> CAN_FDCTRL_MBDSR0_SHIFT;
1166:../drivers/fsl_flexcan.c **** 
1167:../drivers/fsl_flexcan.c ****     switch (dataSize)
1168:../drivers/fsl_flexcan.c ****     {
1169:../drivers/fsl_flexcan.c ****         case kFLEXCAN_8BperMB:
1170:../drivers/fsl_flexcan.c ****             can_cs = base->MB_8B[mbIdx].CS;
1171:../drivers/fsl_flexcan.c ****             break;
1172:../drivers/fsl_flexcan.c ****         case kFLEXCAN_16BperMB:
1173:../drivers/fsl_flexcan.c ****             can_cs = base->MB_16B[mbIdx].CS;
1174:../drivers/fsl_flexcan.c ****             break;
1175:../drivers/fsl_flexcan.c ****         case kFLEXCAN_32BperMB:
1176:../drivers/fsl_flexcan.c ****             can_cs = base->MB_32B[mbIdx].CS;
1177:../drivers/fsl_flexcan.c ****             break;
1178:../drivers/fsl_flexcan.c ****         case kFLEXCAN_64BperMB:
1179:../drivers/fsl_flexcan.c ****             can_cs = base->MB_64B[mbIdx].CS;
1180:../drivers/fsl_flexcan.c ****             break;
1181:../drivers/fsl_flexcan.c ****         default:
1182:../drivers/fsl_flexcan.c ****             break;
1183:../drivers/fsl_flexcan.c ****     }
1184:../drivers/fsl_flexcan.c ****     /* Check if Message Buffer is available. */
1185:../drivers/fsl_flexcan.c ****     if (CAN_CS_CODE(kFLEXCAN_TxMbDataOrRemote) != (can_cs & CAN_CS_CODE_MASK))
1186:../drivers/fsl_flexcan.c ****     {
1187:../drivers/fsl_flexcan.c ****         /* Inactive Tx Message Buffer and Fill Message ID field. */
1188:../drivers/fsl_flexcan.c ****         switch (dataSize)
1189:../drivers/fsl_flexcan.c ****         {
1190:../drivers/fsl_flexcan.c ****             case kFLEXCAN_8BperMB:
1191:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].CS = (can_cs & ~CAN_CS_CODE_MASK) | CAN_CS_CODE(kFLEXCAN_TxMbIna
1192:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].ID = txFrame->id;
1193:../drivers/fsl_flexcan.c ****                 break;
1194:../drivers/fsl_flexcan.c ****             case kFLEXCAN_16BperMB:
1195:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].CS = (can_cs & ~CAN_CS_CODE_MASK) | CAN_CS_CODE(kFLEXCAN_TxMbIn
1196:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].ID = txFrame->id;
1197:../drivers/fsl_flexcan.c ****                 break;
1198:../drivers/fsl_flexcan.c ****             case kFLEXCAN_32BperMB:
1199:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].CS = (can_cs & ~CAN_CS_CODE_MASK) | CAN_CS_CODE(kFLEXCAN_TxMbIn
1200:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].ID = txFrame->id;
1201:../drivers/fsl_flexcan.c ****                 break;
1202:../drivers/fsl_flexcan.c ****             case kFLEXCAN_64BperMB:
1203:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].CS = (can_cs & ~CAN_CS_CODE_MASK) | CAN_CS_CODE(kFLEXCAN_TxMbIn
1204:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].ID = txFrame->id;
1205:../drivers/fsl_flexcan.c ****                 break;
1206:../drivers/fsl_flexcan.c ****             default:
1207:../drivers/fsl_flexcan.c ****                 break;
1208:../drivers/fsl_flexcan.c ****         }
1209:../drivers/fsl_flexcan.c **** 
1210:../drivers/fsl_flexcan.c ****         /* Fill Message Format field. */
1211:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameFormatExtend == txFrame->format)
1212:../drivers/fsl_flexcan.c ****         {
1213:../drivers/fsl_flexcan.c ****             cs_temp |= CAN_CS_SRR_MASK | CAN_CS_IDE_MASK;
1214:../drivers/fsl_flexcan.c ****         }
1215:../drivers/fsl_flexcan.c **** 
1216:../drivers/fsl_flexcan.c ****         cs_temp |= CAN_CS_CODE(kFLEXCAN_TxMbDataOrRemote) | CAN_CS_DLC(txFrame->length) | CAN_CS_ED
1217:../drivers/fsl_flexcan.c **** 
1218:../drivers/fsl_flexcan.c ****         /* Load Message Payload and Activate Tx Message Buffer. */
1219:../drivers/fsl_flexcan.c ****         switch (dataSize)
1220:../drivers/fsl_flexcan.c ****         {
1221:../drivers/fsl_flexcan.c ****             case kFLEXCAN_8BperMB:
1222:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 2; cnt++)
1223:../drivers/fsl_flexcan.c ****                 {
1224:../drivers/fsl_flexcan.c ****                     base->MB_8B[mbIdx].WORD[cnt] = txFrame->dataWord[cnt];
1225:../drivers/fsl_flexcan.c ****                 }
1226:../drivers/fsl_flexcan.c ****                 base->MB_8B[mbIdx].CS = cs_temp;
1227:../drivers/fsl_flexcan.c ****                 break;
1228:../drivers/fsl_flexcan.c ****             case kFLEXCAN_16BperMB:
1229:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 4; cnt++)
1230:../drivers/fsl_flexcan.c ****                 {
1231:../drivers/fsl_flexcan.c ****                     base->MB_16B[mbIdx].WORD[cnt] = txFrame->dataWord[cnt];
1232:../drivers/fsl_flexcan.c ****                 }
1233:../drivers/fsl_flexcan.c ****                 base->MB_16B[mbIdx].CS = cs_temp;
1234:../drivers/fsl_flexcan.c ****                 break;
1235:../drivers/fsl_flexcan.c ****             case kFLEXCAN_32BperMB:
1236:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 8; cnt++)
1237:../drivers/fsl_flexcan.c ****                 {
1238:../drivers/fsl_flexcan.c ****                     base->MB_32B[mbIdx].WORD[cnt] = txFrame->dataWord[cnt];
1239:../drivers/fsl_flexcan.c ****                 }
1240:../drivers/fsl_flexcan.c ****                 base->MB_32B[mbIdx].CS = cs_temp;
1241:../drivers/fsl_flexcan.c ****                 break;
1242:../drivers/fsl_flexcan.c ****             case kFLEXCAN_64BperMB:
1243:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 16; cnt++)
1244:../drivers/fsl_flexcan.c ****                 {
1245:../drivers/fsl_flexcan.c ****                     base->MB_64B[mbIdx].WORD[cnt] = txFrame->dataWord[cnt];
1246:../drivers/fsl_flexcan.c ****                 }
1247:../drivers/fsl_flexcan.c ****                 base->MB_64B[mbIdx].CS = cs_temp;
1248:../drivers/fsl_flexcan.c ****                 break;
1249:../drivers/fsl_flexcan.c ****             default:
1250:../drivers/fsl_flexcan.c ****                 break;
1251:../drivers/fsl_flexcan.c ****         }
1252:../drivers/fsl_flexcan.c **** 
1253:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641) && FSL_FEATURE_FLEXCAN_HAS_ERRATA_5641)
1254:../drivers/fsl_flexcan.c ****         base->MB[FLEXCAN_GetFirstValidMb(base)].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
1255:../drivers/fsl_flexcan.c ****         base->MB[FLEXCAN_GetFirstValidMb(base)].CS = CAN_CS_CODE(kFLEXCAN_TxMbInactive);
1256:../drivers/fsl_flexcan.c **** #endif
1257:../drivers/fsl_flexcan.c **** 
1258:../drivers/fsl_flexcan.c ****         return kStatus_Success;
1259:../drivers/fsl_flexcan.c ****     }
1260:../drivers/fsl_flexcan.c ****     else
1261:../drivers/fsl_flexcan.c ****     {
1262:../drivers/fsl_flexcan.c ****         /* Tx Message Buffer is activated, return immediately. */
1263:../drivers/fsl_flexcan.c ****         return kStatus_Fail;
1264:../drivers/fsl_flexcan.c ****     }
1265:../drivers/fsl_flexcan.c **** }
1266:../drivers/fsl_flexcan.c **** #endif
1267:../drivers/fsl_flexcan.c **** 
1268:../drivers/fsl_flexcan.c **** status_t FLEXCAN_ReadRxMb(CAN_Type *base, uint8_t mbIdx, flexcan_frame_t *rxFrame)
1269:../drivers/fsl_flexcan.c **** {
 1209              		.loc 1 1269 0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213              	.LVL122:
 1214 0000 00EB0113 		add	r3, r0, r1, lsl #4
 1215 0004 70B5     		push	{r4, r5, r6, lr}
 1216              		.cfi_def_cfa_offset 16
 1217              		.cfi_offset 4, -16
 1218              		.cfi_offset 5, -12
 1219              		.cfi_offset 6, -8
 1220              		.cfi_offset 14, -4
1270:../drivers/fsl_flexcan.c ****     /* Assertion. */
1271:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1272:../drivers/fsl_flexcan.c ****     assert(rxFrame);
1273:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1274:../drivers/fsl_flexcan.c **** 
1275:../drivers/fsl_flexcan.c ****     uint32_t cs_temp;
1276:../drivers/fsl_flexcan.c ****     uint8_t rx_code;
1277:../drivers/fsl_flexcan.c **** 
1278:../drivers/fsl_flexcan.c ****     /* Read CS field of Rx Message Buffer to lock Message Buffer. */
1279:../drivers/fsl_flexcan.c ****     cs_temp = base->MB[mbIdx].CS;
 1221              		.loc 1 1279 0
 1222 0006 D3F88040 		ldr	r4, [r3, #128]
 1223              	.LVL123:
1280:../drivers/fsl_flexcan.c ****     /* Get Rx Message Buffer Code field. */
1281:../drivers/fsl_flexcan.c ****     rx_code = (cs_temp & CAN_CS_CODE_MASK) >> CAN_CS_CODE_SHIFT;
 1224              		.loc 1 1281 0
 1225 000a 250E     		lsrs	r5, r4, #24
 1226              	.LVL124:
1282:../drivers/fsl_flexcan.c **** 
1283:../drivers/fsl_flexcan.c ****     /* Check to see if Rx Message Buffer is full. */
1284:../drivers/fsl_flexcan.c ****     if ((kFLEXCAN_RxMbFull == rx_code) || (kFLEXCAN_RxMbOverrun == rx_code))
 1227              		.loc 1 1284 0
 1228 000c 05F00B06 		and	r6, r5, #11
 1229 0010 022E     		cmp	r6, #2
 1230 0012 23D1     		bne	.L94
1285:../drivers/fsl_flexcan.c ****     {
1286:../drivers/fsl_flexcan.c ****         /* Store Message ID. */
1287:../drivers/fsl_flexcan.c ****         rxFrame->id = base->MB[mbIdx].ID & (CAN_ID_EXT_MASK | CAN_ID_STD_MASK);
 1231              		.loc 1 1287 0
 1232 0014 D3F88460 		ldr	r6, [r3, #132]
 1233 0018 5368     		ldr	r3, [r2, #4]
 1234 001a 66F31C03 		bfi	r3, r6, #0, #29
 1235 001e 5360     		str	r3, [r2, #4]
1288:../drivers/fsl_flexcan.c **** 
1289:../drivers/fsl_flexcan.c ****         /* Get the message ID and format. */
1290:../drivers/fsl_flexcan.c ****         rxFrame->format = (cs_temp & CAN_CS_IDE_MASK) ? kFLEXCAN_FrameFormatExtend : kFLEXCAN_Frame
 1236              		.loc 1 1290 0
 1237 0020 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1238 0022 C4F34056 		ubfx	r6, r4, #21, #1
 1239 0026 66F34513 		bfi	r3, r6, #5, #1
1291:../drivers/fsl_flexcan.c **** 
1292:../drivers/fsl_flexcan.c ****         /* Get the message type. */
1293:../drivers/fsl_flexcan.c ****         rxFrame->type = (cs_temp & CAN_CS_RTR_MASK) ? kFLEXCAN_FrameTypeRemote : kFLEXCAN_FrameType
 1240              		.loc 1 1293 0
 1241 002a C4F30056 		ubfx	r6, r4, #20, #1
1294:../drivers/fsl_flexcan.c **** 
1295:../drivers/fsl_flexcan.c ****         /* Get the message length. */
1296:../drivers/fsl_flexcan.c ****         rxFrame->length = (cs_temp & CAN_CS_DLC_MASK) >> CAN_CS_DLC_SHIFT;
1297:../drivers/fsl_flexcan.c **** 
1298:../drivers/fsl_flexcan.c ****         /* Store Message Payload. */
1299:../drivers/fsl_flexcan.c ****         rxFrame->dataWord0 = base->MB[mbIdx].WORD0;
 1242              		.loc 1 1299 0
 1243 002e 00EB0111 		add	r1, r0, r1, lsl #4
 1244              	.LVL125:
1293:../drivers/fsl_flexcan.c **** 
 1245              		.loc 1 1293 0
 1246 0032 66F30413 		bfi	r3, r6, #4, #1
1296:../drivers/fsl_flexcan.c **** 
 1247              		.loc 1 1296 0
 1248 0036 240C     		lsrs	r4, r4, #16
 1249              	.LVL126:
 1250 0038 64F30303 		bfi	r3, r4, #0, #4
 1251 003c 9370     		strb	r3, [r2, #2]
 1252              		.loc 1 1299 0
 1253 003e D1F88830 		ldr	r3, [r1, #136]
 1254 0042 9360     		str	r3, [r2, #8]
1300:../drivers/fsl_flexcan.c ****         rxFrame->dataWord1 = base->MB[mbIdx].WORD1;
 1255              		.loc 1 1300 0
 1256 0044 D1F88C30 		ldr	r3, [r1, #140]
 1257 0048 D360     		str	r3, [r2, #12]
1301:../drivers/fsl_flexcan.c **** 
1302:../drivers/fsl_flexcan.c ****         /* Read free-running timer to unlock Rx Message Buffer. */
1303:../drivers/fsl_flexcan.c ****         (void)base->TIMER;
1304:../drivers/fsl_flexcan.c **** 
1305:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_RxMbFull == rx_code)
 1258              		.loc 1 1305 0
 1259 004a 05F00F05 		and	r5, r5, #15
 1260              	.LVL127:
 1261 004e 022D     		cmp	r5, #2
1303:../drivers/fsl_flexcan.c **** 
 1262              		.loc 1 1303 0
 1263 0050 8368     		ldr	r3, [r0, #8]
1306:../drivers/fsl_flexcan.c ****         {
1307:../drivers/fsl_flexcan.c ****             return kStatus_Success;
1308:../drivers/fsl_flexcan.c ****         }
1309:../drivers/fsl_flexcan.c ****         else
1310:../drivers/fsl_flexcan.c ****         {
1311:../drivers/fsl_flexcan.c ****             return kStatus_FLEXCAN_RxOverflow;
 1264              		.loc 1 1311 0
 1265 0052 41F2B940 		movw	r0, #5305
 1266              	.LVL128:
 1267 0056 08BF     		it	eq
 1268 0058 0020     		moveq	r0, #0
 1269 005a 70BD     		pop	{r4, r5, r6, pc}
 1270              	.LVL129:
 1271              	.L94:
1312:../drivers/fsl_flexcan.c ****         }
1313:../drivers/fsl_flexcan.c ****     }
1314:../drivers/fsl_flexcan.c ****     else
1315:../drivers/fsl_flexcan.c ****     {
1316:../drivers/fsl_flexcan.c ****         /* Read free-running timer to unlock Rx Message Buffer. */
1317:../drivers/fsl_flexcan.c ****         (void)base->TIMER;
 1272              		.loc 1 1317 0
 1273 005c 8368     		ldr	r3, [r0, #8]
1318:../drivers/fsl_flexcan.c **** 
1319:../drivers/fsl_flexcan.c ****         return kStatus_Fail;
 1274              		.loc 1 1319 0
 1275 005e 0120     		movs	r0, #1
 1276              	.LVL130:
1320:../drivers/fsl_flexcan.c ****     }
1321:../drivers/fsl_flexcan.c **** }
 1277              		.loc 1 1321 0
 1278 0060 70BD     		pop	{r4, r5, r6, pc}
 1279              		.cfi_endproc
 1280              	.LFE174:
 1282              		.section	.text.FLEXCAN_ReadRxFifo,"ax",%progbits
 1283              		.align	1
 1284              		.global	FLEXCAN_ReadRxFifo
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	FLEXCAN_ReadRxFifo:
 1291              	.LFB175:
1322:../drivers/fsl_flexcan.c **** 
1323:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
1324:../drivers/fsl_flexcan.c **** status_t FLEXCAN_ReadFDRxMb(CAN_Type *base, uint8_t mbIdx, flexcan_fd_frame_t *rxFrame)
1325:../drivers/fsl_flexcan.c **** {
1326:../drivers/fsl_flexcan.c ****     /* Assertion. */
1327:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1328:../drivers/fsl_flexcan.c ****     assert(rxFrame);
1329:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1330:../drivers/fsl_flexcan.c **** 
1331:../drivers/fsl_flexcan.c ****     uint32_t cs_temp;
1332:../drivers/fsl_flexcan.c ****     uint8_t rx_code;
1333:../drivers/fsl_flexcan.c ****     uint8_t cnt = 0;
1334:../drivers/fsl_flexcan.c ****     uint32_t can_id = 0;
1335:../drivers/fsl_flexcan.c ****     uint32_t dataSize;
1336:../drivers/fsl_flexcan.c ****     dataSize = (base->FDCTRL & CAN_FDCTRL_MBDSR0_MASK) >> CAN_FDCTRL_MBDSR0_SHIFT;
1337:../drivers/fsl_flexcan.c **** 
1338:../drivers/fsl_flexcan.c ****     /* Read CS field of Rx Message Buffer to lock Message Buffer. */
1339:../drivers/fsl_flexcan.c ****     switch (dataSize)
1340:../drivers/fsl_flexcan.c ****     {
1341:../drivers/fsl_flexcan.c ****         case kFLEXCAN_8BperMB:
1342:../drivers/fsl_flexcan.c ****             cs_temp = base->MB_8B[mbIdx].CS;
1343:../drivers/fsl_flexcan.c ****             can_id = base->MB_8B[mbIdx].ID;
1344:../drivers/fsl_flexcan.c ****             break;
1345:../drivers/fsl_flexcan.c ****         case kFLEXCAN_16BperMB:
1346:../drivers/fsl_flexcan.c ****             cs_temp = base->MB_16B[mbIdx].CS;
1347:../drivers/fsl_flexcan.c ****             can_id = base->MB_16B[mbIdx].ID;
1348:../drivers/fsl_flexcan.c ****             break;
1349:../drivers/fsl_flexcan.c ****         case kFLEXCAN_32BperMB:
1350:../drivers/fsl_flexcan.c ****             cs_temp = base->MB_32B[mbIdx].CS;
1351:../drivers/fsl_flexcan.c ****             can_id = base->MB_32B[mbIdx].ID;
1352:../drivers/fsl_flexcan.c ****             break;
1353:../drivers/fsl_flexcan.c ****         case kFLEXCAN_64BperMB:
1354:../drivers/fsl_flexcan.c ****             cs_temp = base->MB_64B[mbIdx].CS;
1355:../drivers/fsl_flexcan.c ****             can_id = base->MB_64B[mbIdx].ID;
1356:../drivers/fsl_flexcan.c ****             break;
1357:../drivers/fsl_flexcan.c ****         default:
1358:../drivers/fsl_flexcan.c ****             break;
1359:../drivers/fsl_flexcan.c ****     }
1360:../drivers/fsl_flexcan.c ****     /* Get Rx Message Buffer Code field. */
1361:../drivers/fsl_flexcan.c ****     rx_code = (cs_temp & CAN_CS_CODE_MASK) >> CAN_CS_CODE_SHIFT;
1362:../drivers/fsl_flexcan.c **** 
1363:../drivers/fsl_flexcan.c ****     /* Check to see if Rx Message Buffer is full. */
1364:../drivers/fsl_flexcan.c ****     if ((kFLEXCAN_RxMbFull == rx_code) || (kFLEXCAN_RxMbOverrun == rx_code))
1365:../drivers/fsl_flexcan.c ****     {
1366:../drivers/fsl_flexcan.c ****         /* Store Message ID. */
1367:../drivers/fsl_flexcan.c ****         rxFrame->id = can_id & (CAN_ID_EXT_MASK | CAN_ID_STD_MASK);
1368:../drivers/fsl_flexcan.c **** 
1369:../drivers/fsl_flexcan.c ****         /* Get the message ID and format. */
1370:../drivers/fsl_flexcan.c ****         rxFrame->format = (cs_temp & CAN_CS_IDE_MASK) ? kFLEXCAN_FrameFormatExtend : kFLEXCAN_Frame
1371:../drivers/fsl_flexcan.c **** 
1372:../drivers/fsl_flexcan.c ****         /* Get the message type. */
1373:../drivers/fsl_flexcan.c ****         rxFrame->type = (cs_temp & CAN_CS_RTR_MASK) ? kFLEXCAN_FrameTypeRemote : kFLEXCAN_FrameType
1374:../drivers/fsl_flexcan.c **** 
1375:../drivers/fsl_flexcan.c ****         /* Get the message length. */
1376:../drivers/fsl_flexcan.c ****         rxFrame->length = (cs_temp & CAN_CS_DLC_MASK) >> CAN_CS_DLC_SHIFT;
1377:../drivers/fsl_flexcan.c **** 
1378:../drivers/fsl_flexcan.c ****         /* Store Message Payload. */
1379:../drivers/fsl_flexcan.c ****         switch (dataSize)
1380:../drivers/fsl_flexcan.c ****         {
1381:../drivers/fsl_flexcan.c ****             case kFLEXCAN_8BperMB:
1382:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 2; cnt++)
1383:../drivers/fsl_flexcan.c ****                 {
1384:../drivers/fsl_flexcan.c ****                     rxFrame->dataWord[cnt] = base->MB_8B[mbIdx].WORD[cnt];
1385:../drivers/fsl_flexcan.c ****                 }
1386:../drivers/fsl_flexcan.c ****                 break;
1387:../drivers/fsl_flexcan.c ****             case kFLEXCAN_16BperMB:
1388:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 4; cnt++)
1389:../drivers/fsl_flexcan.c ****                 {
1390:../drivers/fsl_flexcan.c ****                     rxFrame->dataWord[cnt] = base->MB_16B[mbIdx].WORD[cnt];
1391:../drivers/fsl_flexcan.c ****                 }
1392:../drivers/fsl_flexcan.c ****                 break;
1393:../drivers/fsl_flexcan.c ****             case kFLEXCAN_32BperMB:
1394:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 8; cnt++)
1395:../drivers/fsl_flexcan.c ****                 {
1396:../drivers/fsl_flexcan.c ****                     rxFrame->dataWord[cnt] = base->MB_32B[mbIdx].WORD[cnt];
1397:../drivers/fsl_flexcan.c ****                 }
1398:../drivers/fsl_flexcan.c ****                 break;
1399:../drivers/fsl_flexcan.c ****             case kFLEXCAN_64BperMB:
1400:../drivers/fsl_flexcan.c ****                 for (cnt = 0; cnt < 16; cnt++)
1401:../drivers/fsl_flexcan.c ****                 {
1402:../drivers/fsl_flexcan.c ****                     rxFrame->dataWord[cnt] = base->MB_64B[mbIdx].WORD[cnt];
1403:../drivers/fsl_flexcan.c ****                 }
1404:../drivers/fsl_flexcan.c ****                 break;
1405:../drivers/fsl_flexcan.c ****             default:
1406:../drivers/fsl_flexcan.c ****                 break;
1407:../drivers/fsl_flexcan.c ****         }
1408:../drivers/fsl_flexcan.c **** 
1409:../drivers/fsl_flexcan.c ****         /* Read free-running timer to unlock Rx Message Buffer. */
1410:../drivers/fsl_flexcan.c ****         (void)base->TIMER;
1411:../drivers/fsl_flexcan.c **** 
1412:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_RxMbFull == rx_code)
1413:../drivers/fsl_flexcan.c ****         {
1414:../drivers/fsl_flexcan.c ****             return kStatus_Success;
1415:../drivers/fsl_flexcan.c ****         }
1416:../drivers/fsl_flexcan.c ****         else
1417:../drivers/fsl_flexcan.c ****         {
1418:../drivers/fsl_flexcan.c ****             return kStatus_FLEXCAN_RxOverflow;
1419:../drivers/fsl_flexcan.c ****         }
1420:../drivers/fsl_flexcan.c ****     }
1421:../drivers/fsl_flexcan.c ****     else
1422:../drivers/fsl_flexcan.c ****     {
1423:../drivers/fsl_flexcan.c ****         /* Read free-running timer to unlock Rx Message Buffer. */
1424:../drivers/fsl_flexcan.c ****         (void)base->TIMER;
1425:../drivers/fsl_flexcan.c **** 
1426:../drivers/fsl_flexcan.c ****         return kStatus_Fail;
1427:../drivers/fsl_flexcan.c ****     }
1428:../drivers/fsl_flexcan.c **** }
1429:../drivers/fsl_flexcan.c **** #endif
1430:../drivers/fsl_flexcan.c **** 
1431:../drivers/fsl_flexcan.c **** status_t FLEXCAN_ReadRxFifo(CAN_Type *base, flexcan_frame_t *rxFrame)
1432:../drivers/fsl_flexcan.c **** {
 1292              		.loc 1 1432 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 1296              	.LVL131:
1433:../drivers/fsl_flexcan.c ****     /* Assertion. */
1434:../drivers/fsl_flexcan.c ****     assert(rxFrame);
1435:../drivers/fsl_flexcan.c **** 
1436:../drivers/fsl_flexcan.c ****     uint32_t cs_temp;
1437:../drivers/fsl_flexcan.c **** 
1438:../drivers/fsl_flexcan.c ****     /* Check if Rx FIFO is Enabled. */
1439:../drivers/fsl_flexcan.c ****     if (base->MCR & CAN_MCR_RFEN_MASK)
 1297              		.loc 1 1439 0
 1298 0000 0368     		ldr	r3, [r0]
 1299 0002 9B00     		lsls	r3, r3, #2
1432:../drivers/fsl_flexcan.c ****     /* Assertion. */
 1300              		.loc 1 1432 0
 1301 0004 10B5     		push	{r4, lr}
 1302              		.cfi_def_cfa_offset 8
 1303              		.cfi_offset 4, -8
 1304              		.cfi_offset 14, -4
 1305              		.loc 1 1439 0
 1306 0006 23D5     		bpl	.L99
 1307              	.LVL132:
 1308              	.LBB95:
 1309              	.LBB96:
1440:../drivers/fsl_flexcan.c ****     {
1441:../drivers/fsl_flexcan.c ****         /* Read CS field of Rx Message Buffer to lock Message Buffer. */
1442:../drivers/fsl_flexcan.c ****         cs_temp = base->MB[0].CS;
 1310              		.loc 1 1442 0
 1311 0008 D0F88020 		ldr	r2, [r0, #128]
 1312              	.LVL133:
1443:../drivers/fsl_flexcan.c **** 
1444:../drivers/fsl_flexcan.c ****         /* Read data from Rx FIFO output port. */
1445:../drivers/fsl_flexcan.c ****         /* Store Message ID. */
1446:../drivers/fsl_flexcan.c ****         rxFrame->id = base->MB[0].ID & (CAN_ID_EXT_MASK | CAN_ID_STD_MASK);
 1313              		.loc 1 1446 0
 1314 000c 4B68     		ldr	r3, [r1, #4]
 1315 000e D0F88440 		ldr	r4, [r0, #132]
 1316 0012 64F31C03 		bfi	r3, r4, #0, #29
 1317 0016 4B60     		str	r3, [r1, #4]
1447:../drivers/fsl_flexcan.c **** 
1448:../drivers/fsl_flexcan.c ****         /* Get the message ID and format. */
1449:../drivers/fsl_flexcan.c ****         rxFrame->format = (cs_temp & CAN_CS_IDE_MASK) ? kFLEXCAN_FrameFormatExtend : kFLEXCAN_Frame
 1318              		.loc 1 1449 0
 1319 0018 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 1320 001a C2F34054 		ubfx	r4, r2, #21, #1
 1321 001e 64F34513 		bfi	r3, r4, #5, #1
1450:../drivers/fsl_flexcan.c **** 
1451:../drivers/fsl_flexcan.c ****         /* Get the message type. */
1452:../drivers/fsl_flexcan.c ****         rxFrame->type = (cs_temp & CAN_CS_RTR_MASK) ? kFLEXCAN_FrameTypeRemote : kFLEXCAN_FrameType
 1322              		.loc 1 1452 0
 1323 0022 C2F30054 		ubfx	r4, r2, #20, #1
 1324 0026 64F30413 		bfi	r3, r4, #4, #1
1453:../drivers/fsl_flexcan.c **** 
1454:../drivers/fsl_flexcan.c ****         /* Get the message length. */
1455:../drivers/fsl_flexcan.c ****         rxFrame->length = (cs_temp & CAN_CS_DLC_MASK) >> CAN_CS_DLC_SHIFT;
 1325              		.loc 1 1455 0
 1326 002a 120C     		lsrs	r2, r2, #16
 1327              	.LVL134:
 1328 002c 62F30303 		bfi	r3, r2, #0, #4
 1329 0030 8B70     		strb	r3, [r1, #2]
1456:../drivers/fsl_flexcan.c **** 
1457:../drivers/fsl_flexcan.c ****         /* Store Message Payload. */
1458:../drivers/fsl_flexcan.c ****         rxFrame->dataWord0 = base->MB[0].WORD0;
 1330              		.loc 1 1458 0
 1331 0032 D0F88830 		ldr	r3, [r0, #136]
 1332 0036 8B60     		str	r3, [r1, #8]
1459:../drivers/fsl_flexcan.c ****         rxFrame->dataWord1 = base->MB[0].WORD1;
 1333              		.loc 1 1459 0
 1334 0038 D0F88C30 		ldr	r3, [r0, #140]
 1335 003c CB60     		str	r3, [r1, #12]
1460:../drivers/fsl_flexcan.c **** 
1461:../drivers/fsl_flexcan.c ****         /* Store ID Filter Hit Index. */
1462:../drivers/fsl_flexcan.c ****         rxFrame->idhit = (uint8_t)(base->RXFIR & CAN_RXFIR_IDHIT_MASK);
 1336              		.loc 1 1462 0
 1337 003e C36C     		ldr	r3, [r0, #76]
 1338 0040 4A88     		ldrh	r2, [r1, #2]
 1339 0042 DBB2     		uxtb	r3, r3
 1340 0044 63F3CF12 		bfi	r2, r3, #7, #9
 1341 0048 4A80     		strh	r2, [r1, #2]	@ movhi
1463:../drivers/fsl_flexcan.c **** 
1464:../drivers/fsl_flexcan.c ****         /* Read free-running timer to unlock Rx Message Buffer. */
1465:../drivers/fsl_flexcan.c ****         (void)base->TIMER;
 1342              		.loc 1 1465 0
 1343 004a 8368     		ldr	r3, [r0, #8]
 1344              	.LVL135:
 1345 004c 0020     		movs	r0, #0
 1346              	.LVL136:
 1347 004e 10BD     		pop	{r4, pc}
 1348              	.LVL137:
 1349              	.L99:
 1350              	.LBE96:
 1351              	.LBE95:
1466:../drivers/fsl_flexcan.c **** 
1467:../drivers/fsl_flexcan.c ****         return kStatus_Success;
1468:../drivers/fsl_flexcan.c ****     }
1469:../drivers/fsl_flexcan.c ****     else
1470:../drivers/fsl_flexcan.c ****     {
1471:../drivers/fsl_flexcan.c ****         return kStatus_Fail;
 1352              		.loc 1 1471 0
 1353 0050 0120     		movs	r0, #1
 1354              	.LVL138:
1472:../drivers/fsl_flexcan.c ****     }
1473:../drivers/fsl_flexcan.c **** }
 1355              		.loc 1 1473 0
 1356 0052 10BD     		pop	{r4, pc}
 1357              		.cfi_endproc
 1358              	.LFE175:
 1360              		.section	.text.FLEXCAN_TransferSendBlocking,"ax",%progbits
 1361              		.align	1
 1362              		.global	FLEXCAN_TransferSendBlocking
 1363              		.syntax unified
 1364              		.thumb
 1365              		.thumb_func
 1366              		.fpu fpv4-sp-d16
 1368              	FLEXCAN_TransferSendBlocking:
 1369              	.LFB176:
1474:../drivers/fsl_flexcan.c **** 
1475:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferSendBlocking(CAN_Type *base, uint8_t mbIdx, flexcan_frame_t *txFrame)
1476:../drivers/fsl_flexcan.c **** {
 1370              		.loc 1 1476 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374              	.LVL139:
 1375 0000 38B5     		push	{r3, r4, r5, lr}
 1376              		.cfi_def_cfa_offset 16
 1377              		.cfi_offset 3, -16
 1378              		.cfi_offset 4, -12
 1379              		.cfi_offset 5, -8
 1380              		.cfi_offset 14, -4
 1381              		.loc 1 1476 0
 1382 0002 0D46     		mov	r5, r1
 1383 0004 0446     		mov	r4, r0
1477:../drivers/fsl_flexcan.c ****     /* Write Tx Message Buffer to initiate a data sending. */
1478:../drivers/fsl_flexcan.c ****     if (kStatus_Success == FLEXCAN_WriteTxMb(base, mbIdx, txFrame))
 1384              		.loc 1 1478 0
 1385 0006 FFF7FEFF 		bl	FLEXCAN_WriteTxMb
 1386              	.LVL140:
 1387 000a 0121     		movs	r1, #1
 1388              	.LVL141:
 1389 000c 28B9     		cbnz	r0, .L103
1479:../drivers/fsl_flexcan.c ****     {
1480:../drivers/fsl_flexcan.c ****         /* Wait until CAN Message send out. */
1481:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1482:../drivers/fsl_flexcan.c ****         while (!FLEXCAN_GetMbStatusFlags(base, (uint64_t)1 << mbIdx))
1483:../drivers/fsl_flexcan.c **** #else
1484:../drivers/fsl_flexcan.c ****         while (!FLEXCAN_GetMbStatusFlags(base, 1 << mbIdx))
 1390              		.loc 1 1484 0
 1391 000e A940     		lsls	r1, r1, r5
 1392              	.L102:
 1393              	.LVL142:
 1394              	.LBB97:
 1395              	.LBB98:
 815:../drivers/fsl_flexcan.h **** #endif
 1396              		.loc 2 815 0 discriminator 1
 1397 0010 236B     		ldr	r3, [r4, #48]
 1398              	.LVL143:
 1399              	.LBE98:
 1400              	.LBE97:
 1401              		.loc 1 1484 0 discriminator 1
 1402 0012 1942     		tst	r1, r3
 1403 0014 FCD0     		beq	.L102
 1404              	.LVL144:
 1405              	.LBB99:
 1406              	.LBB100:
 837:../drivers/fsl_flexcan.h **** #endif
 1407              		.loc 2 837 0
 1408 0016 2163     		str	r1, [r4, #48]
 1409              	.LVL145:
 1410              	.LBE100:
 1411              	.LBE99:
1485:../drivers/fsl_flexcan.c **** #endif
1486:../drivers/fsl_flexcan.c ****         {
1487:../drivers/fsl_flexcan.c ****         }
1488:../drivers/fsl_flexcan.c **** 
1489:../drivers/fsl_flexcan.c ****         /* Clean Tx Message Buffer Flag. */
1490:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1491:../drivers/fsl_flexcan.c ****         FLEXCAN_ClearMbStatusFlags(base, (uint64_t)1 << mbIdx);
1492:../drivers/fsl_flexcan.c **** #else
1493:../drivers/fsl_flexcan.c ****         FLEXCAN_ClearMbStatusFlags(base, 1 << mbIdx);
1494:../drivers/fsl_flexcan.c **** #endif
1495:../drivers/fsl_flexcan.c **** 
1496:../drivers/fsl_flexcan.c ****         return kStatus_Success;
 1412              		.loc 1 1496 0
 1413 0018 38BD     		pop	{r3, r4, r5, pc}
 1414              	.LVL146:
 1415              	.L103:
1497:../drivers/fsl_flexcan.c ****     }
1498:../drivers/fsl_flexcan.c ****     else
1499:../drivers/fsl_flexcan.c ****     {
1500:../drivers/fsl_flexcan.c ****         return kStatus_Fail;
 1416              		.loc 1 1500 0
 1417 001a 0846     		mov	r0, r1
1501:../drivers/fsl_flexcan.c ****     }
1502:../drivers/fsl_flexcan.c **** }
 1418              		.loc 1 1502 0
 1419 001c 38BD     		pop	{r3, r4, r5, pc}
 1420              		.cfi_endproc
 1421              	.LFE176:
 1423              		.section	.text.FLEXCAN_TransferReceiveBlocking,"ax",%progbits
 1424              		.align	1
 1425              		.global	FLEXCAN_TransferReceiveBlocking
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1429              		.fpu fpv4-sp-d16
 1431              	FLEXCAN_TransferReceiveBlocking:
 1432              	.LFB177:
1503:../drivers/fsl_flexcan.c **** 
1504:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferReceiveBlocking(CAN_Type *base, uint8_t mbIdx, flexcan_frame_t *rxFrame)
1505:../drivers/fsl_flexcan.c **** {
 1433              		.loc 1 1505 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437              		@ link register save eliminated.
 1438              	.LVL147:
 1439 0000 10B4     		push	{r4}
 1440              		.cfi_def_cfa_offset 4
 1441              		.cfi_offset 4, -4
1506:../drivers/fsl_flexcan.c ****     /* Wait until Rx Message Buffer non-empty. */
1507:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1508:../drivers/fsl_flexcan.c ****     while (!FLEXCAN_GetMbStatusFlags(base, (uint64_t)1 << mbIdx))
1509:../drivers/fsl_flexcan.c **** #else
1510:../drivers/fsl_flexcan.c ****     while (!FLEXCAN_GetMbStatusFlags(base, 1 << mbIdx))
 1442              		.loc 1 1510 0
 1443 0002 0123     		movs	r3, #1
 1444 0004 8B40     		lsls	r3, r3, r1
 1445              	.L107:
 1446              	.LVL148:
 1447              	.LBB101:
 1448              	.LBB102:
 815:../drivers/fsl_flexcan.h **** #endif
 1449              		.loc 2 815 0 discriminator 1
 1450 0006 046B     		ldr	r4, [r0, #48]
 1451              	.LVL149:
 1452              	.LBE102:
 1453              	.LBE101:
 1454              		.loc 1 1510 0 discriminator 1
 1455 0008 2342     		tst	r3, r4
 1456 000a FCD0     		beq	.L107
 1457              	.LVL150:
 1458              	.LBB103:
 1459              	.LBB104:
 837:../drivers/fsl_flexcan.h **** #endif
 1460              		.loc 2 837 0
 1461 000c 0363     		str	r3, [r0, #48]
 1462              	.LVL151:
 1463              	.LBE104:
 1464              	.LBE103:
1511:../drivers/fsl_flexcan.c **** #endif
1512:../drivers/fsl_flexcan.c ****     {
1513:../drivers/fsl_flexcan.c ****     }
1514:../drivers/fsl_flexcan.c **** 
1515:../drivers/fsl_flexcan.c ****     /* Clean Rx Message Buffer Flag. */
1516:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1517:../drivers/fsl_flexcan.c ****     FLEXCAN_ClearMbStatusFlags(base, (uint64_t)1 << mbIdx);
1518:../drivers/fsl_flexcan.c **** #else
1519:../drivers/fsl_flexcan.c ****     FLEXCAN_ClearMbStatusFlags(base, 1 << mbIdx);
1520:../drivers/fsl_flexcan.c **** #endif
1521:../drivers/fsl_flexcan.c **** 
1522:../drivers/fsl_flexcan.c ****     /* Read Received CAN Message. */
1523:../drivers/fsl_flexcan.c ****     return FLEXCAN_ReadRxMb(base, mbIdx, rxFrame);
1524:../drivers/fsl_flexcan.c **** }
 1465              		.loc 1 1524 0
 1466 000e 5DF8044B 		ldr	r4, [sp], #4
 1467              		.cfi_restore 4
 1468              		.cfi_def_cfa_offset 0
1523:../drivers/fsl_flexcan.c **** }
 1469              		.loc 1 1523 0
 1470 0012 FFF7FEBF 		b	FLEXCAN_ReadRxMb
 1471              	.LVL152:
 1472              		.cfi_endproc
 1473              	.LFE177:
 1475              		.section	.text.FLEXCAN_TransferReceiveFifoBlocking,"ax",%progbits
 1476              		.align	1
 1477              		.global	FLEXCAN_TransferReceiveFifoBlocking
 1478              		.syntax unified
 1479              		.thumb
 1480              		.thumb_func
 1481              		.fpu fpv4-sp-d16
 1483              	FLEXCAN_TransferReceiveFifoBlocking:
 1484              	.LFB178:
1525:../drivers/fsl_flexcan.c **** 
1526:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
1527:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferFDSendBlocking(CAN_Type *base, uint8_t mbIdx, flexcan_fd_frame_t *txFrame)
1528:../drivers/fsl_flexcan.c **** {
1529:../drivers/fsl_flexcan.c ****     /* Write Tx Message Buffer to initiate a data sending. */
1530:../drivers/fsl_flexcan.c ****     if (kStatus_Success == FLEXCAN_WriteFDTxMb(base, mbIdx, txFrame))
1531:../drivers/fsl_flexcan.c ****     {
1532:../drivers/fsl_flexcan.c ****         /* Wait until CAN Message send out. */
1533:../drivers/fsl_flexcan.c ****         while (!FLEXCAN_GetMbStatusFlags(base, 1 << mbIdx))
1534:../drivers/fsl_flexcan.c ****         {
1535:../drivers/fsl_flexcan.c ****         }
1536:../drivers/fsl_flexcan.c **** 
1537:../drivers/fsl_flexcan.c ****         /* Clean Tx Message Buffer Flag. */
1538:../drivers/fsl_flexcan.c ****         FLEXCAN_ClearMbStatusFlags(base, 1 << mbIdx);
1539:../drivers/fsl_flexcan.c **** 
1540:../drivers/fsl_flexcan.c ****         return kStatus_Success;
1541:../drivers/fsl_flexcan.c ****     }
1542:../drivers/fsl_flexcan.c ****     else
1543:../drivers/fsl_flexcan.c ****     {
1544:../drivers/fsl_flexcan.c ****         return kStatus_Fail;
1545:../drivers/fsl_flexcan.c ****     }
1546:../drivers/fsl_flexcan.c **** }
1547:../drivers/fsl_flexcan.c **** 
1548:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferFDReceiveBlocking(CAN_Type *base, uint8_t mbIdx, flexcan_fd_frame_t *rxFra
1549:../drivers/fsl_flexcan.c **** {
1550:../drivers/fsl_flexcan.c ****     /* Wait until Rx Message Buffer non-empty. */
1551:../drivers/fsl_flexcan.c ****     while (!FLEXCAN_GetMbStatusFlags(base, 1 << mbIdx))
1552:../drivers/fsl_flexcan.c ****     {
1553:../drivers/fsl_flexcan.c ****     }
1554:../drivers/fsl_flexcan.c **** 
1555:../drivers/fsl_flexcan.c ****     /* Clean Rx Message Buffer Flag. */
1556:../drivers/fsl_flexcan.c ****     FLEXCAN_ClearMbStatusFlags(base, 1 << mbIdx);
1557:../drivers/fsl_flexcan.c **** 
1558:../drivers/fsl_flexcan.c ****     /* Read Received CAN Message. */
1559:../drivers/fsl_flexcan.c ****     return FLEXCAN_ReadFDRxMb(base, mbIdx, rxFrame);
1560:../drivers/fsl_flexcan.c **** }
1561:../drivers/fsl_flexcan.c **** #endif
1562:../drivers/fsl_flexcan.c **** 
1563:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferReceiveFifoBlocking(CAN_Type *base, flexcan_frame_t *rxFrame)
1564:../drivers/fsl_flexcan.c **** {
 1485              		.loc 1 1564 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 0
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
 1489              	.LVL153:
 1490 0000 10B5     		push	{r4, lr}
 1491              		.cfi_def_cfa_offset 8
 1492              		.cfi_offset 4, -8
 1493              		.cfi_offset 14, -4
 1494 0002 0446     		mov	r4, r0
 1495              	.L111:
 1496              	.LVL154:
 1497              	.LBB105:
 1498              	.LBB106:
 815:../drivers/fsl_flexcan.h **** #endif
 1499              		.loc 2 815 0 discriminator 1
 1500 0004 236B     		ldr	r3, [r4, #48]
 1501              	.LVL155:
 1502              	.LBE106:
 1503              	.LBE105:
1565:../drivers/fsl_flexcan.c ****     status_t rxFifoStatus;
1566:../drivers/fsl_flexcan.c **** 
1567:../drivers/fsl_flexcan.c ****     /* Wait until Rx FIFO non-empty. */
1568:../drivers/fsl_flexcan.c ****     while (!FLEXCAN_GetMbStatusFlags(base, kFLEXCAN_RxFifoFrameAvlFlag))
 1504              		.loc 1 1568 0 discriminator 1
 1505 0006 9B06     		lsls	r3, r3, #26
 1506 0008 FCD5     		bpl	.L111
1569:../drivers/fsl_flexcan.c ****     {
1570:../drivers/fsl_flexcan.c ****     }
1571:../drivers/fsl_flexcan.c **** 
1572:../drivers/fsl_flexcan.c ****     /*  */
1573:../drivers/fsl_flexcan.c ****     rxFifoStatus = FLEXCAN_ReadRxFifo(base, rxFrame);
 1507              		.loc 1 1573 0
 1508 000a 2046     		mov	r0, r4
 1509              	.LVL156:
 1510 000c FFF7FEFF 		bl	FLEXCAN_ReadRxFifo
 1511              	.LVL157:
 1512              	.LBB107:
 1513              	.LBB108:
 837:../drivers/fsl_flexcan.h **** #endif
 1514              		.loc 2 837 0
 1515 0010 2023     		movs	r3, #32
 1516 0012 2363     		str	r3, [r4, #48]
 1517              	.LVL158:
 1518              	.LBE108:
 1519              	.LBE107:
1574:../drivers/fsl_flexcan.c **** 
1575:../drivers/fsl_flexcan.c ****     /* Clean Rx Fifo available flag. */
1576:../drivers/fsl_flexcan.c ****     FLEXCAN_ClearMbStatusFlags(base, kFLEXCAN_RxFifoFrameAvlFlag);
1577:../drivers/fsl_flexcan.c **** 
1578:../drivers/fsl_flexcan.c ****     return rxFifoStatus;
1579:../drivers/fsl_flexcan.c **** }
 1520              		.loc 1 1579 0
 1521 0014 10BD     		pop	{r4, pc}
 1522              		.cfi_endproc
 1523              	.LFE178:
 1525              		.section	.text.FLEXCAN_TransferCreateHandle,"ax",%progbits
 1526              		.align	1
 1527              		.global	FLEXCAN_TransferCreateHandle
 1528              		.syntax unified
 1529              		.thumb
 1530              		.thumb_func
 1531              		.fpu fpv4-sp-d16
 1533              	FLEXCAN_TransferCreateHandle:
 1534              	.LFB179:
1580:../drivers/fsl_flexcan.c **** 
1581:../drivers/fsl_flexcan.c **** void FLEXCAN_TransferCreateHandle(CAN_Type *base,
1582:../drivers/fsl_flexcan.c ****                                   flexcan_handle_t *handle,
1583:../drivers/fsl_flexcan.c ****                                   flexcan_transfer_callback_t callback,
1584:../drivers/fsl_flexcan.c ****                                   void *userData)
1585:../drivers/fsl_flexcan.c **** {
 1535              		.loc 1 1585 0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 0
 1538              		@ frame_needed = 0, uses_anonymous_args = 0
 1539              	.LVL159:
 1540 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1541              		.cfi_def_cfa_offset 24
 1542              		.cfi_offset 3, -24
 1543              		.cfi_offset 4, -20
 1544              		.cfi_offset 5, -16
 1545              		.cfi_offset 6, -12
 1546              		.cfi_offset 7, -8
 1547              		.cfi_offset 14, -4
 1548              		.loc 1 1585 0
 1549 0002 0D46     		mov	r5, r1
 1550 0004 0446     		mov	r4, r0
 1551 0006 1646     		mov	r6, r2
1586:../drivers/fsl_flexcan.c ****     assert(handle);
1587:../drivers/fsl_flexcan.c **** 
1588:../drivers/fsl_flexcan.c ****     uint8_t instance;
1589:../drivers/fsl_flexcan.c **** 
1590:../drivers/fsl_flexcan.c ****     /* Clean FlexCAN transfer handle. */
1591:../drivers/fsl_flexcan.c ****     memset(handle, 0, sizeof(*handle));
 1552              		.loc 1 1591 0
 1553 0008 0021     		movs	r1, #0
 1554              	.LVL160:
 1555 000a 6022     		movs	r2, #96
 1556              	.LVL161:
 1557 000c 2846     		mov	r0, r5
 1558              	.LVL162:
1585:../drivers/fsl_flexcan.c ****     assert(handle);
 1559              		.loc 1 1585 0
 1560 000e 1F46     		mov	r7, r3
 1561              		.loc 1 1591 0
 1562 0010 FFF7FEFF 		bl	memset
 1563              	.LVL163:
1592:../drivers/fsl_flexcan.c **** 
1593:../drivers/fsl_flexcan.c ****     /* Get instance from peripheral base address. */
1594:../drivers/fsl_flexcan.c ****     instance = FLEXCAN_GetInstance(base);
 1564              		.loc 1 1594 0
 1565 0014 2046     		mov	r0, r4
 1566 0016 FFF7FEFF 		bl	FLEXCAN_GetInstance
 1567              	.LVL164:
1595:../drivers/fsl_flexcan.c **** 
1596:../drivers/fsl_flexcan.c ****     /* Save the context in global variables to support the double weak mechanism. */
1597:../drivers/fsl_flexcan.c ****     s_flexcanHandle[instance] = handle;
 1568              		.loc 1 1597 0
 1569 001a 164B     		ldr	r3, .L118
1598:../drivers/fsl_flexcan.c **** 
1599:../drivers/fsl_flexcan.c ****     /* Register Callback function. */
1600:../drivers/fsl_flexcan.c ****     handle->callback = callback;
1601:../drivers/fsl_flexcan.c ****     handle->userData = userData;
1602:../drivers/fsl_flexcan.c **** 
1603:../drivers/fsl_flexcan.c ****     s_flexcanIsr = FLEXCAN_TransferHandleIRQ;
 1570              		.loc 1 1603 0
 1571 001c 164A     		ldr	r2, .L118+4
1597:../drivers/fsl_flexcan.c **** 
 1572              		.loc 1 1597 0
 1573 001e C0B2     		uxtb	r0, r0
 1574 0020 43F82050 		str	r5, [r3, r0, lsl #2]
 1575              		.loc 1 1603 0
 1576 0024 154B     		ldr	r3, .L118+8
1601:../drivers/fsl_flexcan.c **** 
 1577              		.loc 1 1601 0
 1578 0026 85E8C000 		stm	r5, {r6, r7}
 1579              		.loc 1 1603 0
 1580 002a 1A60     		str	r2, [r3]
 1581              	.LBB137:
 1582              	.LBB138:
 862:../drivers/fsl_flexcan.h ****     }
 1583              		.loc 2 862 0
 1584 002c 2368     		ldr	r3, [r4]
 1585              	.LBE138:
 1586              	.LBE137:
1604:../drivers/fsl_flexcan.c **** 
1605:../drivers/fsl_flexcan.c ****     /* We Enable Error & Status interrupt here, because this interrupt just
1606:../drivers/fsl_flexcan.c ****      * report current status of FlexCAN module through Callback function.
1607:../drivers/fsl_flexcan.c ****      * It is insignificance without a available callback function.
1608:../drivers/fsl_flexcan.c ****      */
1609:../drivers/fsl_flexcan.c ****     if (handle->callback != NULL)
 1587              		.loc 1 1609 0
 1588 002e D6B1     		cbz	r6, .L115
 1589              	.LVL165:
 1590              	.LBB140:
 1591              	.LBB139:
 862:../drivers/fsl_flexcan.h ****     }
 1592              		.loc 2 862 0
 1593 0030 43F08063 		orr	r3, r3, #67108864
 1594 0034 2360     		str	r3, [r4]
 866:../drivers/fsl_flexcan.h **** }
 1595              		.loc 2 866 0
 1596 0036 6368     		ldr	r3, [r4, #4]
 1597 0038 43F44C43 		orr	r3, r3, #52224
 1598              	.LVL166:
 1599              	.L117:
 1600              	.LBE139:
 1601              	.LBE140:
 1602              	.LBB141:
 1603              	.LBB142:
 887:../drivers/fsl_flexcan.h **** }
 1604              		.loc 2 887 0
 1605 003c 6360     		str	r3, [r4, #4]
 1606              	.LVL167:
 1607              	.LBE142:
 1608              	.LBE141:
 1609              	.LBB144:
 1610              	.LBB145:
 1611              	.LBB146:
 1612              		.file 4 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
 1613              		.loc 4 1676 0
 1614 003e 104B     		ldr	r3, .L118+12
 1615 0040 4FF40042 		mov	r2, #32768
 1616 0044 9A60     		str	r2, [r3, #8]
 1617              	.LVL168:
 1618              	.LBE146:
 1619              	.LBE145:
 1620              	.LBE144:
 1621              	.LBB147:
 1622              	.LBB148:
 1623              	.LBB149:
 1624 0046 4FF48042 		mov	r2, #16384
 1625 004a 9A60     		str	r2, [r3, #8]
 1626              	.LVL169:
 1627              	.LBE149:
 1628              	.LBE148:
 1629              	.LBE147:
 1630              	.LBB150:
 1631              	.LBB151:
 1632              	.LBB152:
 1633 004c 4FF48032 		mov	r2, #65536
 1634 0050 9A60     		str	r2, [r3, #8]
 1635              	.LVL170:
 1636              	.LBE152:
 1637              	.LBE151:
 1638              	.LBE150:
 1639              	.LBB153:
 1640              	.LBB154:
 1641              	.LBB155:
 1642 0052 4FF40052 		mov	r2, #8192
 1643 0056 9A60     		str	r2, [r3, #8]
 1644              	.LVL171:
 1645              	.LBE155:
 1646              	.LBE154:
 1647              	.LBE153:
 1648              	.LBB156:
 1649              	.LBB157:
 1650              	.LBB158:
 1651 0058 4FF48052 		mov	r2, #4096
 1652 005c 9A60     		str	r2, [r3, #8]
 1653              	.LVL172:
 1654              	.LBE158:
 1655              	.LBE157:
 1656              	.LBE156:
 1657              	.LBB159:
 1658              	.LBB160:
 1659              	.LBB161:
 1660 005e 4FF40062 		mov	r2, #2048
 1661 0062 9A60     		str	r2, [r3, #8]
 1662              	.LVL173:
 1663 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1664              	.LVL174:
 1665              	.L115:
 1666              	.LBE161:
 1667              	.LBE160:
 1668              	.LBE159:
 1669              	.LBB162:
 1670              	.LBB143:
 883:../drivers/fsl_flexcan.h ****     }
 1671              		.loc 2 883 0
 1672 0066 23F08063 		bic	r3, r3, #67108864
 1673 006a 2360     		str	r3, [r4]
 887:../drivers/fsl_flexcan.h **** }
 1674              		.loc 2 887 0
 1675 006c 6368     		ldr	r3, [r4, #4]
 1676 006e 23F44C43 		bic	r3, r3, #52224
 1677 0072 E3E7     		b	.L117
 1678              	.L119:
 1679              		.align	2
 1680              	.L118:
 1681 0074 00000000 		.word	.LANCHOR0
 1682 0078 00000000 		.word	FLEXCAN_TransferHandleIRQ
 1683 007c 00000000 		.word	.LANCHOR1
 1684 0080 00E100E0 		.word	-536813312
 1685              	.LBE143:
 1686              	.LBE162:
 1687              		.cfi_endproc
 1688              	.LFE179:
 1690              		.section	.text.FLEXCAN_TransferSendNonBlocking,"ax",%progbits
 1691              		.align	1
 1692              		.global	FLEXCAN_TransferSendNonBlocking
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
 1696              		.fpu fpv4-sp-d16
 1698              	FLEXCAN_TransferSendNonBlocking:
 1699              	.LFB180:
1610:../drivers/fsl_flexcan.c ****     {
1611:../drivers/fsl_flexcan.c ****         FLEXCAN_EnableInterrupts(base, kFLEXCAN_BusOffInterruptEnable | kFLEXCAN_ErrorInterruptEnab
1612:../drivers/fsl_flexcan.c ****                                            kFLEXCAN_RxWarningInterruptEnable | kFLEXCAN_TxWarningIn
1613:../drivers/fsl_flexcan.c ****                                            kFLEXCAN_WakeUpInterruptEnable);
1614:../drivers/fsl_flexcan.c ****     }
1615:../drivers/fsl_flexcan.c ****     else
1616:../drivers/fsl_flexcan.c ****     {
1617:../drivers/fsl_flexcan.c ****         FLEXCAN_DisableInterrupts(base, kFLEXCAN_BusOffInterruptEnable | kFLEXCAN_ErrorInterruptEna
1618:../drivers/fsl_flexcan.c ****                                             kFLEXCAN_RxWarningInterruptEnable | kFLEXCAN_TxWarningI
1619:../drivers/fsl_flexcan.c ****                                             kFLEXCAN_WakeUpInterruptEnable);
1620:../drivers/fsl_flexcan.c ****     }
1621:../drivers/fsl_flexcan.c **** 
1622:../drivers/fsl_flexcan.c ****     /* Enable interrupts in NVIC. */
1623:../drivers/fsl_flexcan.c ****     EnableIRQ((IRQn_Type)(s_flexcanRxWarningIRQ[instance]));
1624:../drivers/fsl_flexcan.c ****     EnableIRQ((IRQn_Type)(s_flexcanTxWarningIRQ[instance]));
1625:../drivers/fsl_flexcan.c ****     EnableIRQ((IRQn_Type)(s_flexcanWakeUpIRQ[instance]));
1626:../drivers/fsl_flexcan.c ****     EnableIRQ((IRQn_Type)(s_flexcanErrorIRQ[instance]));
1627:../drivers/fsl_flexcan.c ****     EnableIRQ((IRQn_Type)(s_flexcanBusOffIRQ[instance]));
1628:../drivers/fsl_flexcan.c ****     EnableIRQ((IRQn_Type)(s_flexcanMbIRQ[instance]));
1629:../drivers/fsl_flexcan.c **** }
1630:../drivers/fsl_flexcan.c **** 
1631:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferSendNonBlocking(CAN_Type *base, flexcan_handle_t *handle, flexcan_mb_trans
1632:../drivers/fsl_flexcan.c **** {
 1700              		.loc 1 1632 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              	.LVL175:
 1705 0000 70B5     		push	{r4, r5, r6, lr}
 1706              		.cfi_def_cfa_offset 16
 1707              		.cfi_offset 4, -16
 1708              		.cfi_offset 5, -12
 1709              		.cfi_offset 6, -8
 1710              		.cfi_offset 14, -4
 1711              		.loc 1 1632 0
 1712 0002 0C46     		mov	r4, r1
1633:../drivers/fsl_flexcan.c ****     /* Assertion. */
1634:../drivers/fsl_flexcan.c ****     assert(handle);
1635:../drivers/fsl_flexcan.c ****     assert(xfer);
1636:../drivers/fsl_flexcan.c ****     assert(xfer->mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1637:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, xfer->mbIdx));
1638:../drivers/fsl_flexcan.c **** 
1639:../drivers/fsl_flexcan.c ****     /* Check if Message Buffer is idle. */
1640:../drivers/fsl_flexcan.c ****     if (kFLEXCAN_StateIdle == handle->mbState[xfer->mbIdx])
 1713              		.loc 1 1640 0
 1714 0004 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1715              	.LVL176:
 1716 0006 6318     		adds	r3, r4, r1
1632:../drivers/fsl_flexcan.c ****     /* Assertion. */
 1717              		.loc 1 1632 0
 1718 0008 1646     		mov	r6, r2
 1719              		.loc 1 1640 0
 1720 000a 93F84C20 		ldrb	r2, [r3, #76]	@ zero_extendqisi2
 1721              	.LVL177:
1632:../drivers/fsl_flexcan.c ****     /* Assertion. */
 1722              		.loc 1 1632 0
 1723 000e 0546     		mov	r5, r0
 1724              		.loc 1 1640 0
 1725 0010 F2B9     		cbnz	r2, .L125
1641:../drivers/fsl_flexcan.c ****     {
1642:../drivers/fsl_flexcan.c ****         /* Distinguish transmit type. */
1643:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameTypeRemote == xfer->frame->type)
 1726              		.loc 1 1643 0
 1727 0012 3268     		ldr	r2, [r6]
 1728 0014 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 1729              	.LVL178:
 1730 0016 C006     		lsls	r0, r0, #27
1644:../drivers/fsl_flexcan.c ****         {
1645:../drivers/fsl_flexcan.c ****             handle->mbState[xfer->mbIdx] = kFLEXCAN_StateTxRemote;
 1731              		.loc 1 1645 0
 1732 0018 43BF     		ittte	mi
 1733 001a 0420     		movmi	r0, #4
 1734 001c 83F84C00 		strbmi	r0, [r3, #76]
1646:../drivers/fsl_flexcan.c **** 
1647:../drivers/fsl_flexcan.c ****             /* Register user Frame buffer to receive remote Frame. */
1648:../drivers/fsl_flexcan.c ****             handle->mbFrameBuf[xfer->mbIdx] = xfer->frame;
 1735              		.loc 1 1648 0
 1736 0020 8B1C     		addmi	r3, r1, #2
1649:../drivers/fsl_flexcan.c ****         }
1650:../drivers/fsl_flexcan.c ****         else
1651:../drivers/fsl_flexcan.c ****         {
1652:../drivers/fsl_flexcan.c ****             handle->mbState[xfer->mbIdx] = kFLEXCAN_StateTxData;
 1737              		.loc 1 1652 0
 1738 0022 0320     		movpl	r0, #3
 1739 0024 54BF     		ite	pl
 1740 0026 83F84C00 		strbpl	r0, [r3, #76]
1648:../drivers/fsl_flexcan.c ****         }
 1741              		.loc 1 1648 0
 1742 002a 44F82320 		strmi	r2, [r4, r3, lsl #2]
1653:../drivers/fsl_flexcan.c ****         }
1654:../drivers/fsl_flexcan.c **** 
1655:../drivers/fsl_flexcan.c ****         if (kStatus_Success == FLEXCAN_WriteTxMb(base, xfer->mbIdx, xfer->frame))
 1743              		.loc 1 1655 0
 1744 002e 2846     		mov	r0, r5
 1745 0030 FFF7FEFF 		bl	FLEXCAN_WriteTxMb
 1746              	.LVL179:
 1747 0034 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 1748 0036 28B9     		cbnz	r0, .L124
 1749              	.LVL180:
 1750              	.LBB163:
 1751              	.LBB164:
 908:../drivers/fsl_flexcan.h **** #endif
 1752              		.loc 2 908 0
 1753 0038 AA6A     		ldr	r2, [r5, #40]
 1754              	.LBE164:
 1755              	.LBE163:
1656:../drivers/fsl_flexcan.c ****         {
1657:../drivers/fsl_flexcan.c ****             /* Enable Message Buffer Interrupt. */
1658:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1659:../drivers/fsl_flexcan.c ****             FLEXCAN_EnableMbInterrupts(base, (uint64_t)1 << xfer->mbIdx);
1660:../drivers/fsl_flexcan.c **** #else
1661:../drivers/fsl_flexcan.c ****             FLEXCAN_EnableMbInterrupts(base, 1 << xfer->mbIdx);
 1756              		.loc 1 1661 0
 1757 003a 0124     		movs	r4, #1
 1758              	.LVL181:
 1759 003c 9C40     		lsls	r4, r4, r3
 1760              	.LBB166:
 1761              	.LBB165:
 908:../drivers/fsl_flexcan.h **** #endif
 1762              		.loc 2 908 0
 1763 003e 1443     		orrs	r4, r4, r2
 1764 0040 AC62     		str	r4, [r5, #40]
 1765              	.LVL182:
 1766              	.LBE165:
 1767              	.LBE166:
1662:../drivers/fsl_flexcan.c **** #endif
1663:../drivers/fsl_flexcan.c **** 
1664:../drivers/fsl_flexcan.c ****             return kStatus_Success;
 1768              		.loc 1 1664 0
 1769 0042 70BD     		pop	{r4, r5, r6, pc}
 1770              	.LVL183:
 1771              	.L124:
1665:../drivers/fsl_flexcan.c ****         }
1666:../drivers/fsl_flexcan.c ****         else
1667:../drivers/fsl_flexcan.c ****         {
1668:../drivers/fsl_flexcan.c ****             handle->mbState[xfer->mbIdx] = kFLEXCAN_StateIdle;
 1772              		.loc 1 1668 0
 1773 0044 1C44     		add	r4, r4, r3
 1774              	.LVL184:
 1775 0046 0023     		movs	r3, #0
 1776 0048 84F84C30 		strb	r3, [r4, #76]
1669:../drivers/fsl_flexcan.c ****             return kStatus_Fail;
 1777              		.loc 1 1669 0
 1778 004c 0120     		movs	r0, #1
 1779 004e 70BD     		pop	{r4, r5, r6, pc}
 1780              	.LVL185:
 1781              	.L125:
1670:../drivers/fsl_flexcan.c ****         }
1671:../drivers/fsl_flexcan.c ****     }
1672:../drivers/fsl_flexcan.c ****     else
1673:../drivers/fsl_flexcan.c ****     {
1674:../drivers/fsl_flexcan.c ****         return kStatus_FLEXCAN_TxBusy;
 1782              		.loc 1 1674 0
 1783 0050 41F2B440 		movw	r0, #5300
 1784              	.LVL186:
1675:../drivers/fsl_flexcan.c ****     }
1676:../drivers/fsl_flexcan.c **** }
 1785              		.loc 1 1676 0
 1786 0054 70BD     		pop	{r4, r5, r6, pc}
 1787              		.cfi_endproc
 1788              	.LFE180:
 1790              		.section	.text.FLEXCAN_TransferReceiveNonBlocking,"ax",%progbits
 1791              		.align	1
 1792              		.global	FLEXCAN_TransferReceiveNonBlocking
 1793              		.syntax unified
 1794              		.thumb
 1795              		.thumb_func
 1796              		.fpu fpv4-sp-d16
 1798              	FLEXCAN_TransferReceiveNonBlocking:
 1799              	.LFB181:
1677:../drivers/fsl_flexcan.c **** 
1678:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferReceiveNonBlocking(CAN_Type *base, flexcan_handle_t *handle, flexcan_mb_tr
1679:../drivers/fsl_flexcan.c **** {
 1800              		.loc 1 1679 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804              	.LVL187:
 1805 0000 70B5     		push	{r4, r5, r6, lr}
 1806              		.cfi_def_cfa_offset 16
 1807              		.cfi_offset 4, -16
 1808              		.cfi_offset 5, -12
 1809              		.cfi_offset 6, -8
 1810              		.cfi_offset 14, -4
1680:../drivers/fsl_flexcan.c ****     /* Assertion. */
1681:../drivers/fsl_flexcan.c ****     assert(handle);
1682:../drivers/fsl_flexcan.c ****     assert(xfer);
1683:../drivers/fsl_flexcan.c ****     assert(xfer->mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1684:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, xfer->mbIdx));
1685:../drivers/fsl_flexcan.c **** 
1686:../drivers/fsl_flexcan.c ****     /* Check if Message Buffer is idle. */
1687:../drivers/fsl_flexcan.c ****     if (kFLEXCAN_StateIdle == handle->mbState[xfer->mbIdx])
 1811              		.loc 1 1687 0
 1812 0002 1579     		ldrb	r5, [r2, #4]	@ zero_extendqisi2
 1813 0004 4E19     		adds	r6, r1, r5
 1814 0006 96F84C30 		ldrb	r3, [r6, #76]	@ zero_extendqisi2
 1815 000a 03F0FF04 		and	r4, r3, #255
 1816 000e 63B9     		cbnz	r3, .L128
1688:../drivers/fsl_flexcan.c ****     {
1689:../drivers/fsl_flexcan.c ****         handle->mbState[xfer->mbIdx] = kFLEXCAN_StateRxData;
 1817              		.loc 1 1689 0
 1818 0010 0123     		movs	r3, #1
 1819 0012 86F84C30 		strb	r3, [r6, #76]
1690:../drivers/fsl_flexcan.c **** 
1691:../drivers/fsl_flexcan.c ****         /* Register Message Buffer. */
1692:../drivers/fsl_flexcan.c ****         handle->mbFrameBuf[xfer->mbIdx] = xfer->frame;
 1820              		.loc 1 1692 0
 1821 0016 1668     		ldr	r6, [r2]
 1822 0018 AA1C     		adds	r2, r5, #2
 1823              	.LVL188:
1693:../drivers/fsl_flexcan.c **** 
1694:../drivers/fsl_flexcan.c ****         /* Enable Message Buffer Interrupt. */
1695:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1696:../drivers/fsl_flexcan.c ****         FLEXCAN_EnableMbInterrupts(base, (uint64_t)1 << xfer->mbIdx);
1697:../drivers/fsl_flexcan.c **** #else
1698:../drivers/fsl_flexcan.c ****         FLEXCAN_EnableMbInterrupts(base, 1 << xfer->mbIdx);
 1824              		.loc 1 1698 0
 1825 001a AB40     		lsls	r3, r3, r5
1692:../drivers/fsl_flexcan.c **** 
 1826              		.loc 1 1692 0
 1827 001c 41F82260 		str	r6, [r1, r2, lsl #2]
 1828              	.LVL189:
 1829              	.LBB167:
 1830              	.LBB168:
 908:../drivers/fsl_flexcan.h **** #endif
 1831              		.loc 2 908 0
 1832 0020 826A     		ldr	r2, [r0, #40]
 1833 0022 1343     		orrs	r3, r3, r2
 1834              	.LVL190:
 1835 0024 8362     		str	r3, [r0, #40]
 1836              	.LVL191:
 1837              	.LBE168:
 1838              	.LBE167:
1699:../drivers/fsl_flexcan.c **** #endif
1700:../drivers/fsl_flexcan.c **** 
1701:../drivers/fsl_flexcan.c ****         return kStatus_Success;
 1839              		.loc 1 1701 0
 1840 0026 2046     		mov	r0, r4
 1841              	.LVL192:
 1842 0028 70BD     		pop	{r4, r5, r6, pc}
 1843              	.LVL193:
 1844              	.L128:
1702:../drivers/fsl_flexcan.c ****     }
1703:../drivers/fsl_flexcan.c ****     else
1704:../drivers/fsl_flexcan.c ****     {
1705:../drivers/fsl_flexcan.c ****         return kStatus_FLEXCAN_RxBusy;
 1845              		.loc 1 1705 0
 1846 002a 41F2B740 		movw	r0, #5303
 1847              	.LVL194:
1706:../drivers/fsl_flexcan.c ****     }
1707:../drivers/fsl_flexcan.c **** }
 1848              		.loc 1 1707 0
 1849 002e 70BD     		pop	{r4, r5, r6, pc}
 1850              		.cfi_endproc
 1851              	.LFE181:
 1853              		.section	.text.FLEXCAN_TransferReceiveFifoNonBlocking,"ax",%progbits
 1854              		.align	1
 1855              		.global	FLEXCAN_TransferReceiveFifoNonBlocking
 1856              		.syntax unified
 1857              		.thumb
 1858              		.thumb_func
 1859              		.fpu fpv4-sp-d16
 1861              	FLEXCAN_TransferReceiveFifoNonBlocking:
 1862              	.LFB182:
1708:../drivers/fsl_flexcan.c **** 
1709:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
1710:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferFDSendNonBlocking(CAN_Type *base, flexcan_handle_t *handle, flexcan_mb_tra
1711:../drivers/fsl_flexcan.c **** {
1712:../drivers/fsl_flexcan.c ****     /* Assertion. */
1713:../drivers/fsl_flexcan.c ****     assert(handle);
1714:../drivers/fsl_flexcan.c ****     assert(xfer);
1715:../drivers/fsl_flexcan.c ****     assert(xfer->mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1716:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, xfer->mbIdx));
1717:../drivers/fsl_flexcan.c **** 
1718:../drivers/fsl_flexcan.c ****     /* Check if Message Buffer is idle. */
1719:../drivers/fsl_flexcan.c ****     if (kFLEXCAN_StateIdle == handle->mbState[xfer->mbIdx])
1720:../drivers/fsl_flexcan.c ****     {
1721:../drivers/fsl_flexcan.c ****         /* Distinguish transmit type. */
1722:../drivers/fsl_flexcan.c ****         if (kFLEXCAN_FrameTypeRemote == xfer->frame->type)
1723:../drivers/fsl_flexcan.c ****         {
1724:../drivers/fsl_flexcan.c ****             handle->mbState[xfer->mbIdx] = kFLEXCAN_StateTxRemote;
1725:../drivers/fsl_flexcan.c **** 
1726:../drivers/fsl_flexcan.c ****             /* Register user Frame buffer to receive remote Frame. */
1727:../drivers/fsl_flexcan.c ****             handle->mbFDFrameBuf[xfer->mbIdx] = xfer->framefd;
1728:../drivers/fsl_flexcan.c ****         }
1729:../drivers/fsl_flexcan.c ****         else
1730:../drivers/fsl_flexcan.c ****         {
1731:../drivers/fsl_flexcan.c ****             handle->mbState[xfer->mbIdx] = kFLEXCAN_StateTxData;
1732:../drivers/fsl_flexcan.c ****         }
1733:../drivers/fsl_flexcan.c **** 
1734:../drivers/fsl_flexcan.c ****         if (kStatus_Success == FLEXCAN_WriteFDTxMb(base, xfer->mbIdx, xfer->framefd))
1735:../drivers/fsl_flexcan.c ****         {
1736:../drivers/fsl_flexcan.c ****             /* Enable Message Buffer Interrupt. */
1737:../drivers/fsl_flexcan.c ****             FLEXCAN_EnableMbInterrupts(base, 1 << xfer->mbIdx);
1738:../drivers/fsl_flexcan.c **** 
1739:../drivers/fsl_flexcan.c ****             return kStatus_Success;
1740:../drivers/fsl_flexcan.c ****         }
1741:../drivers/fsl_flexcan.c ****         else
1742:../drivers/fsl_flexcan.c ****         {
1743:../drivers/fsl_flexcan.c ****             handle->mbState[xfer->mbIdx] = kFLEXCAN_StateIdle;
1744:../drivers/fsl_flexcan.c ****             return kStatus_Fail;
1745:../drivers/fsl_flexcan.c ****         }
1746:../drivers/fsl_flexcan.c ****     }
1747:../drivers/fsl_flexcan.c ****     else
1748:../drivers/fsl_flexcan.c ****     {
1749:../drivers/fsl_flexcan.c ****         return kStatus_FLEXCAN_TxBusy;
1750:../drivers/fsl_flexcan.c ****     }
1751:../drivers/fsl_flexcan.c **** }
1752:../drivers/fsl_flexcan.c **** 
1753:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferFDReceiveNonBlocking(CAN_Type *base, flexcan_handle_t *handle, flexcan_mb_
1754:../drivers/fsl_flexcan.c **** {
1755:../drivers/fsl_flexcan.c ****     /* Assertion. */
1756:../drivers/fsl_flexcan.c ****     assert(handle);
1757:../drivers/fsl_flexcan.c ****     assert(xfer);
1758:../drivers/fsl_flexcan.c ****     assert(xfer->mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1759:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, xfer->mbIdx));
1760:../drivers/fsl_flexcan.c **** 
1761:../drivers/fsl_flexcan.c ****     /* Check if Message Buffer is idle. */
1762:../drivers/fsl_flexcan.c ****     if (kFLEXCAN_StateIdle == handle->mbState[xfer->mbIdx])
1763:../drivers/fsl_flexcan.c ****     {
1764:../drivers/fsl_flexcan.c ****         handle->mbState[xfer->mbIdx] = kFLEXCAN_StateRxData;
1765:../drivers/fsl_flexcan.c **** 
1766:../drivers/fsl_flexcan.c ****         /* Register Message Buffer. */
1767:../drivers/fsl_flexcan.c ****         handle->mbFDFrameBuf[xfer->mbIdx] = xfer->framefd;
1768:../drivers/fsl_flexcan.c **** 
1769:../drivers/fsl_flexcan.c ****         /* Enable Message Buffer Interrupt. */
1770:../drivers/fsl_flexcan.c ****         FLEXCAN_EnableMbInterrupts(base, 1 << xfer->mbIdx);
1771:../drivers/fsl_flexcan.c **** 
1772:../drivers/fsl_flexcan.c ****         return kStatus_Success;
1773:../drivers/fsl_flexcan.c ****     }
1774:../drivers/fsl_flexcan.c ****     else
1775:../drivers/fsl_flexcan.c ****     {
1776:../drivers/fsl_flexcan.c ****         return kStatus_FLEXCAN_RxBusy;
1777:../drivers/fsl_flexcan.c ****     }
1778:../drivers/fsl_flexcan.c **** }
1779:../drivers/fsl_flexcan.c **** #endif
1780:../drivers/fsl_flexcan.c **** 
1781:../drivers/fsl_flexcan.c **** status_t FLEXCAN_TransferReceiveFifoNonBlocking(CAN_Type *base, flexcan_handle_t *handle, flexcan_f
1782:../drivers/fsl_flexcan.c **** {
 1863              		.loc 1 1782 0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867              	.LVL195:
 1868 0000 10B5     		push	{r4, lr}
 1869              		.cfi_def_cfa_offset 8
 1870              		.cfi_offset 4, -8
 1871              		.cfi_offset 14, -4
1783:../drivers/fsl_flexcan.c ****     /* Assertion. */
1784:../drivers/fsl_flexcan.c ****     assert(handle);
1785:../drivers/fsl_flexcan.c ****     assert(xfer);
1786:../drivers/fsl_flexcan.c **** 
1787:../drivers/fsl_flexcan.c ****     /* Check if Message Buffer is idle. */
1788:../drivers/fsl_flexcan.c ****     if (kFLEXCAN_StateIdle == handle->rxFifoState)
 1872              		.loc 1 1788 0
 1873 0002 91F85C40 		ldrb	r4, [r1, #92]	@ zero_extendqisi2
 1874 0006 04F0FF03 		and	r3, r4, #255
 1875 000a 54B9     		cbnz	r4, .L131
1789:../drivers/fsl_flexcan.c ****     {
1790:../drivers/fsl_flexcan.c ****         handle->rxFifoState = kFLEXCAN_StateRxFifo;
 1876              		.loc 1 1790 0
 1877 000c 0524     		movs	r4, #5
 1878 000e 81F85C40 		strb	r4, [r1, #92]
1791:../drivers/fsl_flexcan.c **** 
1792:../drivers/fsl_flexcan.c ****         /* Register Message Buffer. */
1793:../drivers/fsl_flexcan.c ****         handle->rxFifoFrameBuf = xfer->frame;
 1879              		.loc 1 1793 0
 1880 0012 1268     		ldr	r2, [r2]
 1881              	.LVL196:
 1882 0014 8A64     		str	r2, [r1, #72]
 1883              	.LVL197:
 1884              	.LBB169:
 1885              	.LBB170:
 908:../drivers/fsl_flexcan.h **** #endif
 1886              		.loc 2 908 0
 1887 0016 826A     		ldr	r2, [r0, #40]
 1888 0018 42F0E002 		orr	r2, r2, #224
 1889 001c 8262     		str	r2, [r0, #40]
 1890              	.LVL198:
 1891              	.LBE170:
 1892              	.LBE169:
1794:../drivers/fsl_flexcan.c **** 
1795:../drivers/fsl_flexcan.c ****         /* Enable Message Buffer Interrupt. */
1796:../drivers/fsl_flexcan.c ****         FLEXCAN_EnableMbInterrupts(
1797:../drivers/fsl_flexcan.c ****             base, kFLEXCAN_RxFifoOverflowFlag | kFLEXCAN_RxFifoWarningFlag | kFLEXCAN_RxFifoFrameAv
1798:../drivers/fsl_flexcan.c **** 
1799:../drivers/fsl_flexcan.c ****         return kStatus_Success;
 1893              		.loc 1 1799 0
 1894 001e 1846     		mov	r0, r3
 1895              	.LVL199:
 1896 0020 10BD     		pop	{r4, pc}
 1897              	.LVL200:
 1898              	.L131:
1800:../drivers/fsl_flexcan.c ****     }
1801:../drivers/fsl_flexcan.c ****     else
1802:../drivers/fsl_flexcan.c ****     {
1803:../drivers/fsl_flexcan.c ****         return kStatus_FLEXCAN_RxFifoBusy;
 1899              		.loc 1 1803 0
 1900 0022 41F2BA40 		movw	r0, #5306
 1901              	.LVL201:
1804:../drivers/fsl_flexcan.c ****     }
1805:../drivers/fsl_flexcan.c **** }
 1902              		.loc 1 1805 0
 1903 0026 10BD     		pop	{r4, pc}
 1904              		.cfi_endproc
 1905              	.LFE182:
 1907              		.section	.text.FLEXCAN_TransferAbortSend,"ax",%progbits
 1908              		.align	1
 1909              		.global	FLEXCAN_TransferAbortSend
 1910              		.syntax unified
 1911              		.thumb
 1912              		.thumb_func
 1913              		.fpu fpv4-sp-d16
 1915              	FLEXCAN_TransferAbortSend:
 1916              	.LFB183:
1806:../drivers/fsl_flexcan.c **** 
1807:../drivers/fsl_flexcan.c **** void FLEXCAN_TransferAbortSend(CAN_Type *base, flexcan_handle_t *handle, uint8_t mbIdx)
1808:../drivers/fsl_flexcan.c **** {
 1917              		.loc 1 1808 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921              	.LVL202:
 1922              	.LBB171:
 1923              	.LBB172:
 930:../drivers/fsl_flexcan.h **** #endif
 1924              		.loc 2 930 0
 1925 0000 836A     		ldr	r3, [r0, #40]
 1926              	.LBE172:
 1927              	.LBE171:
 1928              		.loc 1 1808 0
 1929 0002 30B5     		push	{r4, r5, lr}
 1930              		.cfi_def_cfa_offset 12
 1931              		.cfi_offset 4, -12
 1932              		.cfi_offset 5, -8
 1933              		.cfi_offset 14, -4
1809:../drivers/fsl_flexcan.c ****     /* Assertion. */
1810:../drivers/fsl_flexcan.c ****     assert(handle);
1811:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1812:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1813:../drivers/fsl_flexcan.c **** 
1814:../drivers/fsl_flexcan.c ****     /* Disable Message Buffer Interrupt. */
1815:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1816:../drivers/fsl_flexcan.c ****     FLEXCAN_DisableMbInterrupts(base, (uint64_t)1 << mbIdx);
1817:../drivers/fsl_flexcan.c **** #else
1818:../drivers/fsl_flexcan.c ****     FLEXCAN_DisableMbInterrupts(base, 1 << mbIdx);
 1934              		.loc 1 1818 0
 1935 0004 0124     		movs	r4, #1
 1936 0006 9440     		lsls	r4, r4, r2
 1937              	.LVL203:
 1938              	.LBB175:
 1939              	.LBB173:
 930:../drivers/fsl_flexcan.h **** #endif
 1940              		.loc 2 930 0
 1941 0008 23EA0403 		bic	r3, r3, r4
 1942              	.LBE173:
 1943              	.LBE175:
1819:../drivers/fsl_flexcan.c **** #endif
1820:../drivers/fsl_flexcan.c **** 
1821:../drivers/fsl_flexcan.c ****     /* Un-register handle. */
1822:../drivers/fsl_flexcan.c ****     handle->mbFrameBuf[mbIdx] = 0x0;
 1944              		.loc 1 1822 0
 1945 000c 941C     		adds	r4, r2, #2
 1946              	.LVL204:
 1947              	.LBB176:
 1948              	.LBB174:
 930:../drivers/fsl_flexcan.h **** #endif
 1949              		.loc 2 930 0
 1950 000e 8362     		str	r3, [r0, #40]
 1951              	.LVL205:
 1952              	.LBE174:
 1953              	.LBE176:
 1954              		.loc 1 1822 0
 1955 0010 0023     		movs	r3, #0
 1956 0012 41F82430 		str	r3, [r1, r4, lsl #2]
 1957              	.LVL206:
 1958 0016 00EB0214 		add	r4, r0, r2, lsl #4
1823:../drivers/fsl_flexcan.c **** 
1824:../drivers/fsl_flexcan.c ****     /* Clean Message Buffer. */
1825:../drivers/fsl_flexcan.c ****     FLEXCAN_SetTxMbConfig(base, mbIdx, true);
1826:../drivers/fsl_flexcan.c **** 
1827:../drivers/fsl_flexcan.c ****     handle->mbState[mbIdx] = kFLEXCAN_StateIdle;
 1959              		.loc 1 1827 0
 1960 001a 0A44     		add	r2, r2, r1
 1961              	.LVL207:
 1962              	.LBB177:
 1963              	.LBB178:
 721:../drivers/fsl_flexcan.c ****     }
 1964              		.loc 1 721 0
 1965 001c 4FF00065 		mov	r5, #134217728
 1966 0020 C4F88050 		str	r5, [r4, #128]
 729:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD0 = 0x0;
 1967              		.loc 1 729 0
 1968 0024 C4F88430 		str	r3, [r4, #132]
 730:../drivers/fsl_flexcan.c ****     base->MB[mbIdx].WORD1 = 0x0;
 1969              		.loc 1 730 0
 1970 0028 C4F88830 		str	r3, [r4, #136]
 731:../drivers/fsl_flexcan.c **** }
 1971              		.loc 1 731 0
 1972 002c C4F88C30 		str	r3, [r4, #140]
 1973              	.LVL208:
 1974              	.LBE178:
 1975              	.LBE177:
 1976              		.loc 1 1827 0
 1977 0030 82F84C30 		strb	r3, [r2, #76]
 1978 0034 30BD     		pop	{r4, r5, pc}
 1979              		.cfi_endproc
 1980              	.LFE183:
 1982              		.section	.text.FLEXCAN_TransferAbortReceive,"ax",%progbits
 1983              		.align	1
 1984              		.global	FLEXCAN_TransferAbortReceive
 1985              		.syntax unified
 1986              		.thumb
 1987              		.thumb_func
 1988              		.fpu fpv4-sp-d16
 1990              	FLEXCAN_TransferAbortReceive:
 1991              	.LFB184:
1828:../drivers/fsl_flexcan.c **** }
1829:../drivers/fsl_flexcan.c **** 
1830:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
1831:../drivers/fsl_flexcan.c **** void FLEXCAN_TransferFDAbortSend(CAN_Type *base, flexcan_handle_t *handle, uint8_t mbIdx)
1832:../drivers/fsl_flexcan.c **** {
1833:../drivers/fsl_flexcan.c ****     /* Assertion. */
1834:../drivers/fsl_flexcan.c ****     assert(handle);
1835:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1836:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1837:../drivers/fsl_flexcan.c **** 
1838:../drivers/fsl_flexcan.c ****     /* Disable Message Buffer Interrupt. */
1839:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1840:../drivers/fsl_flexcan.c ****     FLEXCAN_DisableMbInterrupts(base, (uint64_t)1 << mbIdx);
1841:../drivers/fsl_flexcan.c **** #else
1842:../drivers/fsl_flexcan.c ****     FLEXCAN_DisableMbInterrupts(base, 1 << mbIdx);
1843:../drivers/fsl_flexcan.c **** #endif
1844:../drivers/fsl_flexcan.c **** 
1845:../drivers/fsl_flexcan.c ****     /* Un-register handle. */
1846:../drivers/fsl_flexcan.c ****     handle->mbFDFrameBuf[mbIdx] = 0x0;
1847:../drivers/fsl_flexcan.c **** 
1848:../drivers/fsl_flexcan.c ****     /* Clean Message Buffer. */
1849:../drivers/fsl_flexcan.c ****     FLEXCAN_SetFDTxMbConfig(base, mbIdx, true);
1850:../drivers/fsl_flexcan.c **** 
1851:../drivers/fsl_flexcan.c ****     handle->mbState[mbIdx] = kFLEXCAN_StateIdle;
1852:../drivers/fsl_flexcan.c **** }
1853:../drivers/fsl_flexcan.c **** 
1854:../drivers/fsl_flexcan.c **** void FLEXCAN_TransferFDAbortReceive(CAN_Type *base, flexcan_handle_t *handle, uint8_t mbIdx)
1855:../drivers/fsl_flexcan.c **** {
1856:../drivers/fsl_flexcan.c ****     /* Assertion. */
1857:../drivers/fsl_flexcan.c ****     assert(handle);
1858:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1859:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1860:../drivers/fsl_flexcan.c **** 
1861:../drivers/fsl_flexcan.c ****     /* Disable Message Buffer Interrupt. */
1862:../drivers/fsl_flexcan.c ****     FLEXCAN_DisableMbInterrupts(base, 1 << mbIdx);
1863:../drivers/fsl_flexcan.c **** 
1864:../drivers/fsl_flexcan.c ****     /* Un-register handle. */
1865:../drivers/fsl_flexcan.c ****     handle->mbFDFrameBuf[mbIdx] = 0x0;
1866:../drivers/fsl_flexcan.c ****     handle->mbState[mbIdx] = kFLEXCAN_StateIdle;
1867:../drivers/fsl_flexcan.c **** }
1868:../drivers/fsl_flexcan.c **** #endif
1869:../drivers/fsl_flexcan.c **** 
1870:../drivers/fsl_flexcan.c **** void FLEXCAN_TransferAbortReceive(CAN_Type *base, flexcan_handle_t *handle, uint8_t mbIdx)
1871:../drivers/fsl_flexcan.c **** {
 1992              		.loc 1 1871 0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 0, uses_anonymous_args = 0
 1996              	.LVL209:
 1997              	.LBB179:
 1998              	.LBB180:
 930:../drivers/fsl_flexcan.h **** #endif
 1999              		.loc 2 930 0
 2000 0000 836A     		ldr	r3, [r0, #40]
 2001              	.LBE180:
 2002              	.LBE179:
 2003              		.loc 1 1871 0
 2004 0002 10B5     		push	{r4, lr}
 2005              		.cfi_def_cfa_offset 8
 2006              		.cfi_offset 4, -8
 2007              		.cfi_offset 14, -4
1872:../drivers/fsl_flexcan.c ****     /* Assertion. */
1873:../drivers/fsl_flexcan.c ****     assert(handle);
1874:../drivers/fsl_flexcan.c ****     assert(mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK));
1875:../drivers/fsl_flexcan.c ****     assert(!FLEXCAN_IsMbOccupied(base, mbIdx));
1876:../drivers/fsl_flexcan.c **** 
1877:../drivers/fsl_flexcan.c ****     /* Disable Message Buffer Interrupt. */
1878:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1879:../drivers/fsl_flexcan.c ****     FLEXCAN_DisableMbInterrupts(base, (uint64_t)1 << mbIdx);
1880:../drivers/fsl_flexcan.c **** #else
1881:../drivers/fsl_flexcan.c ****     FLEXCAN_DisableMbInterrupts(base, 1 << mbIdx);
 2008              		.loc 1 1881 0
 2009 0004 0124     		movs	r4, #1
 2010 0006 9440     		lsls	r4, r4, r2
 2011              	.LVL210:
 2012              	.LBB182:
 2013              	.LBB181:
 930:../drivers/fsl_flexcan.h **** #endif
 2014              		.loc 2 930 0
 2015 0008 23EA0403 		bic	r3, r3, r4
 2016 000c 8362     		str	r3, [r0, #40]
 2017              	.LVL211:
 2018              	.LBE181:
 2019              	.LBE182:
1882:../drivers/fsl_flexcan.c **** #endif
1883:../drivers/fsl_flexcan.c **** 
1884:../drivers/fsl_flexcan.c ****     /* Un-register handle. */
1885:../drivers/fsl_flexcan.c ****     handle->mbFrameBuf[mbIdx] = 0x0;
 2020              		.loc 1 1885 0
 2021 000e 901C     		adds	r0, r2, #2
 2022              	.LVL212:
 2023 0010 0023     		movs	r3, #0
 2024 0012 41F82030 		str	r3, [r1, r0, lsl #2]
1886:../drivers/fsl_flexcan.c ****     handle->mbState[mbIdx] = kFLEXCAN_StateIdle;
 2025              		.loc 1 1886 0
 2026 0016 1144     		add	r1, r1, r2
 2027              	.LVL213:
 2028 0018 81F84C30 		strb	r3, [r1, #76]
 2029 001c 10BD     		pop	{r4, pc}
 2030              		.cfi_endproc
 2031              	.LFE184:
 2033              		.section	.text.FLEXCAN_TransferAbortReceiveFifo,"ax",%progbits
 2034              		.align	1
 2035              		.global	FLEXCAN_TransferAbortReceiveFifo
 2036              		.syntax unified
 2037              		.thumb
 2038              		.thumb_func
 2039              		.fpu fpv4-sp-d16
 2041              	FLEXCAN_TransferAbortReceiveFifo:
 2042              	.LFB185:
1887:../drivers/fsl_flexcan.c **** }
1888:../drivers/fsl_flexcan.c **** 
1889:../drivers/fsl_flexcan.c **** void FLEXCAN_TransferAbortReceiveFifo(CAN_Type *base, flexcan_handle_t *handle)
1890:../drivers/fsl_flexcan.c **** {
 2043              		.loc 1 1890 0
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 0
 2046              		@ frame_needed = 0, uses_anonymous_args = 0
 2047              		@ link register save eliminated.
 2048              	.LVL214:
1891:../drivers/fsl_flexcan.c ****     /* Assertion. */
1892:../drivers/fsl_flexcan.c ****     assert(handle);
1893:../drivers/fsl_flexcan.c **** 
1894:../drivers/fsl_flexcan.c ****     /* Check if Rx FIFO is enabled. */
1895:../drivers/fsl_flexcan.c ****     if (base->MCR & CAN_MCR_RFEN_MASK)
 2049              		.loc 1 1895 0
 2050 0000 0368     		ldr	r3, [r0]
 2051 0002 9B00     		lsls	r3, r3, #2
 2052 0004 05D5     		bpl	.L135
 2053              	.LVL215:
 2054              	.LBB183:
 2055              	.LBB184:
 930:../drivers/fsl_flexcan.h **** #endif
 2056              		.loc 2 930 0
 2057 0006 836A     		ldr	r3, [r0, #40]
 2058 0008 23F0E003 		bic	r3, r3, #224
 2059 000c 8362     		str	r3, [r0, #40]
 2060              	.LVL216:
 2061              	.LBE184:
 2062              	.LBE183:
1896:../drivers/fsl_flexcan.c ****     {
1897:../drivers/fsl_flexcan.c ****         /* Disable Rx Message FIFO Interrupts. */
1898:../drivers/fsl_flexcan.c ****         FLEXCAN_DisableMbInterrupts(
1899:../drivers/fsl_flexcan.c ****             base, kFLEXCAN_RxFifoOverflowFlag | kFLEXCAN_RxFifoWarningFlag | kFLEXCAN_RxFifoFrameAv
1900:../drivers/fsl_flexcan.c **** 
1901:../drivers/fsl_flexcan.c ****         /* Un-register handle. */
1902:../drivers/fsl_flexcan.c ****         handle->rxFifoFrameBuf = 0x0;
 2063              		.loc 1 1902 0
 2064 000e 0023     		movs	r3, #0
 2065 0010 8B64     		str	r3, [r1, #72]
 2066              	.L135:
1903:../drivers/fsl_flexcan.c ****     }
1904:../drivers/fsl_flexcan.c **** 
1905:../drivers/fsl_flexcan.c ****     handle->rxFifoState = kFLEXCAN_StateIdle;
 2067              		.loc 1 1905 0
 2068 0012 0023     		movs	r3, #0
 2069 0014 81F85C30 		strb	r3, [r1, #92]
 2070 0018 7047     		bx	lr
 2071              		.cfi_endproc
 2072              	.LFE185:
 2074              		.section	.text.FLEXCAN_TransferHandleIRQ,"ax",%progbits
 2075              		.align	1
 2076              		.global	FLEXCAN_TransferHandleIRQ
 2077              		.syntax unified
 2078              		.thumb
 2079              		.thumb_func
 2080              		.fpu fpv4-sp-d16
 2082              	FLEXCAN_TransferHandleIRQ:
 2083              	.LFB186:
1906:../drivers/fsl_flexcan.c **** }
1907:../drivers/fsl_flexcan.c **** 
1908:../drivers/fsl_flexcan.c **** void FLEXCAN_TransferHandleIRQ(CAN_Type *base, flexcan_handle_t *handle)
1909:../drivers/fsl_flexcan.c **** {
 2084              		.loc 1 1909 0
 2085              		.cfi_startproc
 2086              		@ args = 0, pretend = 0, frame = 8
 2087              		@ frame_needed = 0, uses_anonymous_args = 0
 2088              	.LVL217:
 2089 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2090              		.cfi_def_cfa_offset 36
 2091              		.cfi_offset 4, -36
 2092              		.cfi_offset 5, -32
 2093              		.cfi_offset 6, -28
 2094              		.cfi_offset 7, -24
 2095              		.cfi_offset 8, -20
 2096              		.cfi_offset 9, -16
 2097              		.cfi_offset 10, -12
 2098              		.cfi_offset 11, -8
 2099              		.cfi_offset 14, -4
1910:../drivers/fsl_flexcan.c ****     /* Assertion. */
1911:../drivers/fsl_flexcan.c ****     assert(handle);
1912:../drivers/fsl_flexcan.c **** 
1913:../drivers/fsl_flexcan.c ****     status_t status = kStatus_FLEXCAN_UnHandled;
1914:../drivers/fsl_flexcan.c ****     uint32_t result;
1915:../drivers/fsl_flexcan.c **** 
1916:../drivers/fsl_flexcan.c ****     /* Store Current FlexCAN Module Error and Status. */
1917:../drivers/fsl_flexcan.c ****     result = base->ESR1;
 2100              		.loc 1 1917 0
 2101 0004 046A     		ldr	r4, [r0, #32]
 2102              	.LVL218:
1918:../drivers/fsl_flexcan.c **** 
1919:../drivers/fsl_flexcan.c ****     do
1920:../drivers/fsl_flexcan.c ****     {
1921:../drivers/fsl_flexcan.c ****         /* Solve FlexCAN Error and Status Interrupt. */
1922:../drivers/fsl_flexcan.c ****         if (result & (kFLEXCAN_TxWarningIntFlag | kFLEXCAN_RxWarningIntFlag | kFLEXCAN_BusOffIntFla
 2103              		.loc 1 1922 0
 2104 0006 DFF81091 		ldr	r9, .L178
1909:../drivers/fsl_flexcan.c ****     /* Assertion. */
 2105              		.loc 1 1909 0
 2106 000a 85B0     		sub	sp, sp, #20
 2107              		.cfi_def_cfa_offset 56
1909:../drivers/fsl_flexcan.c ****     /* Assertion. */
 2108              		.loc 1 1909 0
 2109 000c 0646     		mov	r6, r0
 2110 000e 0F46     		mov	r7, r1
1923:../drivers/fsl_flexcan.c ****                       kFLEXCAN_ErrorIntFlag | kFLEXCAN_WakeUpIntFlag))
1924:../drivers/fsl_flexcan.c ****         {
1925:../drivers/fsl_flexcan.c ****             status = kStatus_FLEXCAN_ErrorStatus;
1926:../drivers/fsl_flexcan.c **** 
1927:../drivers/fsl_flexcan.c ****             /* Clear FlexCAN Error and Status Interrupt. */
1928:../drivers/fsl_flexcan.c ****             FLEXCAN_ClearStatusFlags(base, kFLEXCAN_TxWarningIntFlag | kFLEXCAN_RxWarningIntFlag |
1929:../drivers/fsl_flexcan.c ****                                                kFLEXCAN_BusOffIntFlag | kFLEXCAN_ErrorIntFlag | kFL
1930:../drivers/fsl_flexcan.c ****         }
1931:../drivers/fsl_flexcan.c ****         /* Solve FlexCAN Rx FIFO & Message Buffer Interrupt. */
1932:../drivers/fsl_flexcan.c ****         else
1933:../drivers/fsl_flexcan.c ****         {
1934:../drivers/fsl_flexcan.c ****             /* For this implementation, we solve the Message with lowest MB index first. */
1935:../drivers/fsl_flexcan.c ****             for (result = 0; result < FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base); res
1936:../drivers/fsl_flexcan.c ****             {
1937:../drivers/fsl_flexcan.c ****                 /* Get the lowest unhandled Message Buffer */
1938:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
1939:../drivers/fsl_flexcan.c ****                 if ((FLEXCAN_GetMbStatusFlags(base, (uint64_t)1 << result)) && (FLEXCAN_IsMbIntEnab
1940:../drivers/fsl_flexcan.c **** #else
1941:../drivers/fsl_flexcan.c ****                 if ((FLEXCAN_GetMbStatusFlags(base, 1 << result)) && (FLEXCAN_IsMbIntEnabled(base, 
 2111              		.loc 1 1941 0
 2112 0010 4FF0010A 		mov	r10, #1
1942:../drivers/fsl_flexcan.c **** #endif
1943:../drivers/fsl_flexcan.c ****                 {
1944:../drivers/fsl_flexcan.c ****                     break;
1945:../drivers/fsl_flexcan.c ****                 }
1946:../drivers/fsl_flexcan.c ****             }
1947:../drivers/fsl_flexcan.c **** 
1948:../drivers/fsl_flexcan.c ****             /* Does not find Message to deal with. */
1949:../drivers/fsl_flexcan.c ****             if (result == FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(base))
1950:../drivers/fsl_flexcan.c ****             {
1951:../drivers/fsl_flexcan.c ****                 break;
1952:../drivers/fsl_flexcan.c ****             }
1953:../drivers/fsl_flexcan.c **** 
1954:../drivers/fsl_flexcan.c ****             /* Solve Rx FIFO interrupt. */
1955:../drivers/fsl_flexcan.c ****             if ((kFLEXCAN_StateIdle != handle->rxFifoState) && ((1 << result) <= kFLEXCAN_RxFifoOve
1956:../drivers/fsl_flexcan.c ****             {
1957:../drivers/fsl_flexcan.c ****                 switch (1 << result)
1958:../drivers/fsl_flexcan.c ****                 {
1959:../drivers/fsl_flexcan.c ****                     case kFLEXCAN_RxFifoOverflowFlag:
1960:../drivers/fsl_flexcan.c ****                         status = kStatus_FLEXCAN_RxFifoOverflow;
1961:../drivers/fsl_flexcan.c ****                         break;
1962:../drivers/fsl_flexcan.c **** 
1963:../drivers/fsl_flexcan.c ****                     case kFLEXCAN_RxFifoWarningFlag:
1964:../drivers/fsl_flexcan.c ****                         status = kStatus_FLEXCAN_RxFifoWarning;
1965:../drivers/fsl_flexcan.c ****                         break;
1966:../drivers/fsl_flexcan.c **** 
1967:../drivers/fsl_flexcan.c ****                     case kFLEXCAN_RxFifoFrameAvlFlag:
1968:../drivers/fsl_flexcan.c ****                         status = FLEXCAN_ReadRxFifo(base, handle->rxFifoFrameBuf);
1969:../drivers/fsl_flexcan.c ****                         if (kStatus_Success == status)
1970:../drivers/fsl_flexcan.c ****                         {
1971:../drivers/fsl_flexcan.c ****                             status = kStatus_FLEXCAN_RxFifoIdle;
1972:../drivers/fsl_flexcan.c ****                         }
1973:../drivers/fsl_flexcan.c ****                         FLEXCAN_TransferAbortReceiveFifo(base, handle);
1974:../drivers/fsl_flexcan.c ****                         break;
1975:../drivers/fsl_flexcan.c **** 
1976:../drivers/fsl_flexcan.c ****                     default:
1977:../drivers/fsl_flexcan.c ****                         status = kStatus_FLEXCAN_UnHandled;
1978:../drivers/fsl_flexcan.c ****                         break;
1979:../drivers/fsl_flexcan.c ****                 }
1980:../drivers/fsl_flexcan.c ****             }
1981:../drivers/fsl_flexcan.c ****             else
1982:../drivers/fsl_flexcan.c ****             {
1983:../drivers/fsl_flexcan.c ****                 /* Get current State of Message Buffer. */
1984:../drivers/fsl_flexcan.c ****                 switch (handle->mbState[result])
1985:../drivers/fsl_flexcan.c ****                 {
1986:../drivers/fsl_flexcan.c ****                     /* Solve Rx Data Frame. */
1987:../drivers/fsl_flexcan.c ****                     case kFLEXCAN_StateRxData:
1988:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
1989:../drivers/fsl_flexcan.c ****                         status = FLEXCAN_ReadFDRxMb(base, result, handle->mbFDFrameBuf[result]);
1990:../drivers/fsl_flexcan.c **** #else
1991:../drivers/fsl_flexcan.c ****                         status = FLEXCAN_ReadRxMb(base, result, handle->mbFrameBuf[result]);
1992:../drivers/fsl_flexcan.c **** #endif
1993:../drivers/fsl_flexcan.c ****                         if (kStatus_Success == status)
1994:../drivers/fsl_flexcan.c ****                         {
1995:../drivers/fsl_flexcan.c ****                             status = kStatus_FLEXCAN_RxIdle;
1996:../drivers/fsl_flexcan.c ****                         }
1997:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
1998:../drivers/fsl_flexcan.c ****                         FLEXCAN_TransferFDAbortReceive(base, handle, result);
1999:../drivers/fsl_flexcan.c **** #else
2000:../drivers/fsl_flexcan.c ****                         FLEXCAN_TransferAbortReceive(base, handle, result);
2001:../drivers/fsl_flexcan.c **** #endif
2002:../drivers/fsl_flexcan.c ****                         break;
2003:../drivers/fsl_flexcan.c **** 
2004:../drivers/fsl_flexcan.c ****                     /* Solve Rx Remote Frame. */
2005:../drivers/fsl_flexcan.c ****                     case kFLEXCAN_StateRxRemote:
2006:../drivers/fsl_flexcan.c ****                         status = FLEXCAN_ReadRxMb(base, result, handle->mbFrameBuf[result]);
2007:../drivers/fsl_flexcan.c ****                         if (kStatus_Success == status)
2008:../drivers/fsl_flexcan.c ****                         {
2009:../drivers/fsl_flexcan.c ****                             status = kStatus_FLEXCAN_RxIdle;
2010:../drivers/fsl_flexcan.c ****                         }
2011:../drivers/fsl_flexcan.c ****                         FLEXCAN_TransferAbortReceive(base, handle, result);
2012:../drivers/fsl_flexcan.c ****                         break;
2013:../drivers/fsl_flexcan.c **** 
2014:../drivers/fsl_flexcan.c ****                     /* Solve Tx Data Frame. */
2015:../drivers/fsl_flexcan.c ****                     case kFLEXCAN_StateTxData:
2016:../drivers/fsl_flexcan.c ****                         status = kStatus_FLEXCAN_TxIdle;
2017:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
2018:../drivers/fsl_flexcan.c ****                         FLEXCAN_TransferFDAbortSend(base, handle, result);
2019:../drivers/fsl_flexcan.c **** #else
2020:../drivers/fsl_flexcan.c ****                         FLEXCAN_TransferAbortSend(base, handle, result);
2021:../drivers/fsl_flexcan.c **** #endif
2022:../drivers/fsl_flexcan.c ****                         break;
2023:../drivers/fsl_flexcan.c **** 
2024:../drivers/fsl_flexcan.c ****                     /* Solve Tx Remote Frame. */
2025:../drivers/fsl_flexcan.c ****                     case kFLEXCAN_StateTxRemote:
2026:../drivers/fsl_flexcan.c ****                         handle->mbState[result] = kFLEXCAN_StateRxRemote;
 2113              		.loc 1 2026 0
 2114 0014 4FF0020B 		mov	fp, #2
 2115              	.LVL219:
 2116              	.L140:
1922:../drivers/fsl_flexcan.c ****                       kFLEXCAN_ErrorIntFlag | kFLEXCAN_WakeUpIntFlag))
 2117              		.loc 1 1922 0
 2118 0018 14EA0903 		ands	r3, r4, r9
 2119 001c 17D0     		beq	.L141
 2120              	.LVL220:
 2121              	.LBB195:
 2122              	.LBB196:
 771:../drivers/fsl_flexcan.h **** }
 2123              		.loc 2 771 0
 2124 001e C6F82090 		str	r9, [r6, #32]
 2125              	.LBE196:
 2126              	.LBE195:
1925:../drivers/fsl_flexcan.c **** 
 2127              		.loc 1 1925 0
 2128 0022 41F2BE45 		movw	r5, #5310
 2129              	.LVL221:
 2130              	.L142:
2027:../drivers/fsl_flexcan.c ****                         status = kStatus_FLEXCAN_TxSwitchToRx;
2028:../drivers/fsl_flexcan.c ****                         break;
2029:../drivers/fsl_flexcan.c **** 
2030:../drivers/fsl_flexcan.c ****                     default:
2031:../drivers/fsl_flexcan.c ****                         status = kStatus_FLEXCAN_UnHandled;
2032:../drivers/fsl_flexcan.c ****                         break;
2033:../drivers/fsl_flexcan.c ****                 }
2034:../drivers/fsl_flexcan.c ****             }
2035:../drivers/fsl_flexcan.c **** 
2036:../drivers/fsl_flexcan.c ****             /* Clear resolved Message Buffer IRQ. */
2037:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
2038:../drivers/fsl_flexcan.c ****             FLEXCAN_ClearMbStatusFlags(base, (uint64_t)1 << result);
2039:../drivers/fsl_flexcan.c **** #else
2040:../drivers/fsl_flexcan.c ****             FLEXCAN_ClearMbStatusFlags(base, 1 << result);
2041:../drivers/fsl_flexcan.c **** #endif
2042:../drivers/fsl_flexcan.c ****         }
2043:../drivers/fsl_flexcan.c **** 
2044:../drivers/fsl_flexcan.c ****         /* Calling Callback Function if has one. */
2045:../drivers/fsl_flexcan.c ****         if (handle->callback != NULL)
 2131              		.loc 1 2045 0
 2132 0026 D7F80080 		ldr	r8, [r7]
 2133 002a B8F1000F 		cmp	r8, #0
 2134 002e 06D0     		beq	.L159
2046:../drivers/fsl_flexcan.c ****         {
2047:../drivers/fsl_flexcan.c ****             handle->callback(base, handle, status, result, handle->userData);
 2135              		.loc 1 2047 0
 2136 0030 7B68     		ldr	r3, [r7, #4]
 2137 0032 0093     		str	r3, [sp]
 2138 0034 2A46     		mov	r2, r5
 2139 0036 2346     		mov	r3, r4
 2140 0038 3946     		mov	r1, r7
 2141 003a 3046     		mov	r0, r6
 2142 003c C047     		blx	r8
 2143              	.LVL222:
 2144              	.L159:
2048:../drivers/fsl_flexcan.c ****         }
2049:../drivers/fsl_flexcan.c **** 
2050:../drivers/fsl_flexcan.c ****         /* Reset return status */
2051:../drivers/fsl_flexcan.c ****         status = kStatus_FLEXCAN_UnHandled;
2052:../drivers/fsl_flexcan.c **** 
2053:../drivers/fsl_flexcan.c ****         /* Store Current FlexCAN Module Error and Status. */
2054:../drivers/fsl_flexcan.c ****         result = base->ESR1;
 2145              		.loc 1 2054 0
 2146 003e 346A     		ldr	r4, [r6, #32]
 2147              	.LVL223:
 2148              	.LBB197:
 2149              	.LBB198:
 815:../drivers/fsl_flexcan.h **** #endif
 2150              		.loc 2 815 0
 2151 0040 336B     		ldr	r3, [r6, #48]
 2152              	.LVL224:
 2153              	.LBE198:
 2154              	.LBE197:
2055:../drivers/fsl_flexcan.c ****     }
2056:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_EXTENDED_FLAG_REGISTER)) && (FSL_FEATURE_FLEXCAN_HAS_EXTENDED_
2057:../drivers/fsl_flexcan.c ****     while ((0 != FLEXCAN_GetMbStatusFlags(base, 0xFFFFFFFFFFFFFFFFU)) ||
2058:../drivers/fsl_flexcan.c ****            (0 != (result & (kFLEXCAN_TxWarningIntFlag | kFLEXCAN_RxWarningIntFlag | kFLEXCAN_BusOff
2059:../drivers/fsl_flexcan.c ****                             kFLEXCAN_ErrorIntFlag | kFLEXCAN_WakeUpIntFlag))));
2060:../drivers/fsl_flexcan.c **** #else
2061:../drivers/fsl_flexcan.c ****     while ((0 != FLEXCAN_GetMbStatusFlags(base, 0xFFFFFFFFU)) ||
2062:../drivers/fsl_flexcan.c ****            (0 != (result & (kFLEXCAN_TxWarningIntFlag | kFLEXCAN_RxWarningIntFlag | kFLEXCAN_BusOff
2063:../drivers/fsl_flexcan.c ****                             kFLEXCAN_ErrorIntFlag | kFLEXCAN_WakeUpIntFlag))));
 2155              		.loc 1 2063 0
 2156 0042 002B     		cmp	r3, #0
 2157 0044 E8D1     		bne	.L140
2061:../drivers/fsl_flexcan.c ****            (0 != (result & (kFLEXCAN_TxWarningIntFlag | kFLEXCAN_RxWarningIntFlag | kFLEXCAN_BusOff
 2158              		.loc 1 2061 0
 2159 0046 14EA090F 		tst	r4, r9
 2160 004a E5D1     		bne	.L140
 2161 004c 0DE0     		b	.L139
 2162              	.L141:
 2163 004e 1C46     		mov	r4, r3
 2164              	.LVL225:
 2165              	.L145:
 2166              	.LBB199:
 2167              	.LBB200:
 815:../drivers/fsl_flexcan.h **** #endif
 2168              		.loc 2 815 0
 2169 0050 336B     		ldr	r3, [r6, #48]
 2170              	.LBE200:
 2171              	.LBE199:
1941:../drivers/fsl_flexcan.c **** #endif
 2172              		.loc 1 1941 0
 2173 0052 0AFA04F8 		lsl	r8, r10, r4
 2174              	.LVL226:
 2175 0056 18EA030F 		tst	r8, r3
 2176 005a 03D0     		beq	.L143
 2177              	.LVL227:
 2178              	.LBB201:
 2179              	.LBB202:
 330:../drivers/fsl_flexcan.c ****         {
 2180              		.loc 1 330 0 discriminator 1
 2181 005c B36A     		ldr	r3, [r6, #40]
 2182 005e 18EA030F 		tst	r8, r3
 2183 0062 05D1     		bne	.L144
 2184              	.LVL228:
 2185              	.L143:
 2186              	.LBE202:
 2187              	.LBE201:
1935:../drivers/fsl_flexcan.c ****             {
 2188              		.loc 1 1935 0 discriminator 2
 2189 0064 0134     		adds	r4, r4, #1
 2190              	.LVL229:
 2191 0066 102C     		cmp	r4, #16
 2192 0068 F2D1     		bne	.L145
 2193              	.L139:
2064:../drivers/fsl_flexcan.c **** #endif
2065:../drivers/fsl_flexcan.c **** }
 2194              		.loc 1 2065 0
 2195 006a 05B0     		add	sp, sp, #20
 2196              		.cfi_remember_state
 2197              		.cfi_def_cfa_offset 36
 2198              		@ sp needed
 2199 006c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2200              	.LVL230:
 2201              	.L144:
 2202              		.cfi_restore_state
1955:../drivers/fsl_flexcan.c ****             {
 2203              		.loc 1 1955 0
 2204 0070 97F85C30 		ldrb	r3, [r7, #92]	@ zero_extendqisi2
 2205 0074 F3B1     		cbz	r3, .L146
1955:../drivers/fsl_flexcan.c ****             {
 2206              		.loc 1 1955 0 is_stmt 0 discriminator 1
 2207 0076 B8F1800F 		cmp	r8, #128
 2208 007a 1BDC     		bgt	.L146
1957:../drivers/fsl_flexcan.c ****                 {
 2209              		.loc 1 1957 0 is_stmt 1
 2210 007c B8F1400F 		cmp	r8, #64
 2211 0080 44D0     		beq	.L162
 2212 0082 B8F1800F 		cmp	r8, #128
 2213 0086 10D0     		beq	.L149
 2214 0088 B8F1200F 		cmp	r8, #32
 2215 008c 41D1     		bne	.L164
1968:../drivers/fsl_flexcan.c ****                         if (kStatus_Success == status)
 2216              		.loc 1 1968 0
 2217 008e B96C     		ldr	r1, [r7, #72]
 2218 0090 3046     		mov	r0, r6
 2219 0092 FFF7FEFF 		bl	FLEXCAN_ReadRxFifo
 2220              	.LVL231:
1971:../drivers/fsl_flexcan.c ****                         }
 2221              		.loc 1 1971 0
 2222 0096 41F2BB45 		movw	r5, #5307
 2223 009a 0028     		cmp	r0, #0
 2224 009c 18BF     		it	ne
 2225 009e 0546     		movne	r5, r0
 2226              	.LVL232:
1973:../drivers/fsl_flexcan.c ****                         break;
 2227              		.loc 1 1973 0
 2228 00a0 3946     		mov	r1, r7
 2229 00a2 3046     		mov	r0, r6
 2230 00a4 FFF7FEFF 		bl	FLEXCAN_TransferAbortReceiveFifo
 2231              	.LVL233:
1974:../drivers/fsl_flexcan.c **** 
 2232              		.loc 1 1974 0
 2233 00a8 01E0     		b	.L148
 2234              	.LVL234:
 2235              	.L149:
1960:../drivers/fsl_flexcan.c ****                         break;
 2236              		.loc 1 1960 0
 2237 00aa 41F2BC45 		movw	r5, #5308
 2238              	.LVL235:
 2239              	.L148:
 2240              	.LBB203:
 2241              	.LBB204:
 837:../drivers/fsl_flexcan.h **** #endif
 2242              		.loc 2 837 0
 2243 00ae C6F83080 		str	r8, [r6, #48]
 2244 00b2 B8E7     		b	.L142
 2245              	.LVL236:
 2246              	.L146:
 2247              	.LBE204:
 2248              	.LBE203:
1984:../drivers/fsl_flexcan.c ****                 {
 2249              		.loc 1 1984 0
 2250 00b4 3A19     		adds	r2, r7, r4
 2251 00b6 92F84C30 		ldrb	r3, [r2, #76]	@ zero_extendqisi2
 2252 00ba 013B     		subs	r3, r3, #1
 2253 00bc 032B     		cmp	r3, #3
 2254 00be 28D8     		bhi	.L164
 2255 00c0 DFE803F0 		tbb	[pc, r3]
 2256              	.L153:
 2257 00c4 02       		.byte	(.L154-.L153)/2
 2258 00c5 02       		.byte	(.L154-.L153)/2
 2259 00c6 17       		.byte	(.L155-.L153)/2
 2260 00c7 1F       		.byte	(.L156-.L153)/2
 2261              		.p2align 1
 2262              	.L154:
2006:../drivers/fsl_flexcan.c ****                         if (kStatus_Success == status)
 2263              		.loc 1 2006 0
 2264 00c8 A21C     		adds	r2, r4, #2
 2265 00ca E3B2     		uxtb	r3, r4
 2266 00cc 57F82220 		ldr	r2, [r7, r2, lsl #2]
 2267 00d0 0393     		str	r3, [sp, #12]
 2268 00d2 1946     		mov	r1, r3
 2269 00d4 3046     		mov	r0, r6
 2270 00d6 FFF7FEFF 		bl	FLEXCAN_ReadRxMb
 2271              	.LVL237:
2011:../drivers/fsl_flexcan.c ****                         break;
 2272              		.loc 1 2011 0
 2273 00da 039B     		ldr	r3, [sp, #12]
2009:../drivers/fsl_flexcan.c ****                         }
 2274              		.loc 1 2009 0
 2275 00dc 41F2B845 		movw	r5, #5304
 2276 00e0 0028     		cmp	r0, #0
 2277 00e2 18BF     		it	ne
 2278 00e4 0546     		movne	r5, r0
 2279              	.LVL238:
2011:../drivers/fsl_flexcan.c ****                         break;
 2280              		.loc 1 2011 0
 2281 00e6 1A46     		mov	r2, r3
 2282 00e8 3946     		mov	r1, r7
 2283 00ea 3046     		mov	r0, r6
 2284 00ec FFF7FEFF 		bl	FLEXCAN_TransferAbortReceive
 2285              	.LVL239:
2012:../drivers/fsl_flexcan.c **** 
 2286              		.loc 1 2012 0
 2287 00f0 DDE7     		b	.L148
 2288              	.LVL240:
 2289              	.L155:
2020:../drivers/fsl_flexcan.c **** #endif
 2290              		.loc 1 2020 0
 2291 00f2 E2B2     		uxtb	r2, r4
 2292 00f4 3946     		mov	r1, r7
 2293 00f6 3046     		mov	r0, r6
 2294 00f8 FFF7FEFF 		bl	FLEXCAN_TransferAbortSend
 2295              	.LVL241:
2016:../drivers/fsl_flexcan.c **** #if (defined(FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_RATE) && FSL_FEATURE_FLEXCAN_HAS_FLEXIBLE_DATA_R
 2296              		.loc 1 2016 0
 2297 00fc 41F2B545 		movw	r5, #5301
2022:../drivers/fsl_flexcan.c **** 
 2298              		.loc 1 2022 0
 2299 0100 D5E7     		b	.L148
 2300              	.LVL242:
 2301              	.L156:
2026:../drivers/fsl_flexcan.c ****                         status = kStatus_FLEXCAN_TxSwitchToRx;
 2302              		.loc 1 2026 0
 2303 0102 82F84CB0 		strb	fp, [r2, #76]
 2304              	.LVL243:
2027:../drivers/fsl_flexcan.c ****                         break;
 2305              		.loc 1 2027 0
 2306 0106 41F2B645 		movw	r5, #5302
2028:../drivers/fsl_flexcan.c **** 
 2307              		.loc 1 2028 0
 2308 010a D0E7     		b	.L148
 2309              	.LVL244:
 2310              	.L162:
1964:../drivers/fsl_flexcan.c ****                         break;
 2311              		.loc 1 1964 0
 2312 010c 41F2BD45 		movw	r5, #5309
 2313 0110 CDE7     		b	.L148
 2314              	.L164:
2031:../drivers/fsl_flexcan.c ****                         break;
 2315              		.loc 1 2031 0
 2316 0112 41F2BF45 		movw	r5, #5311
 2317 0116 CAE7     		b	.L148
 2318              	.L179:
 2319              		.align	2
 2320              	.L178:
 2321 0118 07000300 		.word	196615
 2322              		.cfi_endproc
 2323              	.LFE186:
 2325              		.section	.text.CAN0_DriverIRQHandler,"ax",%progbits
 2326              		.align	1
 2327              		.global	CAN0_DriverIRQHandler
 2328              		.syntax unified
 2329              		.thumb
 2330              		.thumb_func
 2331              		.fpu fpv4-sp-d16
 2333              	CAN0_DriverIRQHandler:
 2334              	.LFB187:
2066:../drivers/fsl_flexcan.c **** 
2067:../drivers/fsl_flexcan.c **** #if defined(CAN0)
2068:../drivers/fsl_flexcan.c **** void CAN0_DriverIRQHandler(void)
2069:../drivers/fsl_flexcan.c **** {
 2335              		.loc 1 2069 0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 0
 2338              		@ frame_needed = 0, uses_anonymous_args = 0
 2339 0000 08B5     		push	{r3, lr}
 2340              		.cfi_def_cfa_offset 8
 2341              		.cfi_offset 3, -8
 2342              		.cfi_offset 14, -4
2070:../drivers/fsl_flexcan.c ****     assert(s_flexcanHandle[0]);
2071:../drivers/fsl_flexcan.c **** 
2072:../drivers/fsl_flexcan.c ****     s_flexcanIsr(CAN0, s_flexcanHandle[0]);
 2343              		.loc 1 2072 0
 2344 0002 044A     		ldr	r2, .L181
 2345 0004 044B     		ldr	r3, .L181+4
 2346 0006 1168     		ldr	r1, [r2]
 2347 0008 1B68     		ldr	r3, [r3]
 2348 000a 0448     		ldr	r0, .L181+8
 2349 000c 9847     		blx	r3
 2350              	.LVL245:
 2351              	.LBB205:
 2352              	.LBB206:
 2353              		.file 5 "../CMSIS/cmsis_gcc.h"
   1:../CMSIS/cmsis_gcc.h **** /**************************************************************************//**
   2:../CMSIS/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../CMSIS/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../CMSIS/cmsis_gcc.h ****  * @version  V5.0.2
   5:../CMSIS/cmsis_gcc.h ****  * @date     13. February 2017
   6:../CMSIS/cmsis_gcc.h ****  ******************************************************************************/
   7:../CMSIS/cmsis_gcc.h **** /*
   8:../CMSIS/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/cmsis_gcc.h ****  *
  10:../CMSIS/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/cmsis_gcc.h ****  *
  12:../CMSIS/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../CMSIS/cmsis_gcc.h ****  *
  16:../CMSIS/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/cmsis_gcc.h ****  *
  18:../CMSIS/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/cmsis_gcc.h ****  * limitations under the License.
  23:../CMSIS/cmsis_gcc.h ****  */
  24:../CMSIS/cmsis_gcc.h **** 
  25:../CMSIS/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../CMSIS/cmsis_gcc.h **** 
  28:../CMSIS/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../CMSIS/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../CMSIS/cmsis_gcc.h **** 
  34:../CMSIS/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../CMSIS/cmsis_gcc.h **** #ifndef __has_builtin
  36:../CMSIS/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../CMSIS/cmsis_gcc.h **** #endif
  38:../CMSIS/cmsis_gcc.h **** 
  39:../CMSIS/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../CMSIS/cmsis_gcc.h **** #ifndef   __ASM
  41:../CMSIS/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../CMSIS/cmsis_gcc.h **** #endif
  43:../CMSIS/cmsis_gcc.h **** #ifndef   __INLINE
  44:../CMSIS/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../CMSIS/cmsis_gcc.h **** #endif
  46:../CMSIS/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../CMSIS/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../CMSIS/cmsis_gcc.h **** #endif
  49:../CMSIS/cmsis_gcc.h **** #ifndef   __NO_RETURN
  50:../CMSIS/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((noreturn))
  51:../CMSIS/cmsis_gcc.h **** #endif
  52:../CMSIS/cmsis_gcc.h **** #ifndef   __USED
  53:../CMSIS/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  54:../CMSIS/cmsis_gcc.h **** #endif
  55:../CMSIS/cmsis_gcc.h **** #ifndef   __WEAK
  56:../CMSIS/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  57:../CMSIS/cmsis_gcc.h **** #endif
  58:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED
  59:../CMSIS/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  60:../CMSIS/cmsis_gcc.h **** #endif
  61:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  62:../CMSIS/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  63:../CMSIS/cmsis_gcc.h **** #endif
  64:../CMSIS/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  65:../CMSIS/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  66:../CMSIS/cmsis_gcc.h **** #endif
  67:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  68:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  69:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  70:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  71:../CMSIS/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  72:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  73:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  74:../CMSIS/cmsis_gcc.h **** #endif
  75:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  76:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  77:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  78:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  79:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  80:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  81:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  82:../CMSIS/cmsis_gcc.h **** #endif
  83:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  84:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  85:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  86:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  87:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  88:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  89:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  90:../CMSIS/cmsis_gcc.h **** #endif
  91:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  92:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
  93:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  94:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  95:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  96:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  97:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  98:../CMSIS/cmsis_gcc.h **** #endif
  99:../CMSIS/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 100:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic push
 101:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 102:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 103:../CMSIS/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 104:../CMSIS/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 105:../CMSIS/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 106:../CMSIS/cmsis_gcc.h **** #endif
 107:../CMSIS/cmsis_gcc.h **** #ifndef   __ALIGNED
 108:../CMSIS/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 109:../CMSIS/cmsis_gcc.h **** #endif
 110:../CMSIS/cmsis_gcc.h **** #ifndef   __RESTRICT
 111:../CMSIS/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 112:../CMSIS/cmsis_gcc.h **** #endif
 113:../CMSIS/cmsis_gcc.h **** 
 114:../CMSIS/cmsis_gcc.h **** 
 115:../CMSIS/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 116:../CMSIS/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 117:../CMSIS/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 118:../CMSIS/cmsis_gcc.h ****   @{
 119:../CMSIS/cmsis_gcc.h ****  */
 120:../CMSIS/cmsis_gcc.h **** 
 121:../CMSIS/cmsis_gcc.h **** /**
 122:../CMSIS/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 123:../CMSIS/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 124:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 125:../CMSIS/cmsis_gcc.h ****  */
 126:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
 127:../CMSIS/cmsis_gcc.h **** {
 128:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 129:../CMSIS/cmsis_gcc.h **** }
 130:../CMSIS/cmsis_gcc.h **** 
 131:../CMSIS/cmsis_gcc.h **** 
 132:../CMSIS/cmsis_gcc.h **** /**
 133:../CMSIS/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 134:../CMSIS/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 135:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 136:../CMSIS/cmsis_gcc.h ****  */
 137:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
 138:../CMSIS/cmsis_gcc.h **** {
 139:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 140:../CMSIS/cmsis_gcc.h **** }
 141:../CMSIS/cmsis_gcc.h **** 
 142:../CMSIS/cmsis_gcc.h **** 
 143:../CMSIS/cmsis_gcc.h **** /**
 144:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register
 145:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 146:../CMSIS/cmsis_gcc.h ****   \return               Control Register value
 147:../CMSIS/cmsis_gcc.h ****  */
 148:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 149:../CMSIS/cmsis_gcc.h **** {
 150:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 151:../CMSIS/cmsis_gcc.h **** 
 152:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 153:../CMSIS/cmsis_gcc.h ****   return(result);
 154:../CMSIS/cmsis_gcc.h **** }
 155:../CMSIS/cmsis_gcc.h **** 
 156:../CMSIS/cmsis_gcc.h **** 
 157:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 158:../CMSIS/cmsis_gcc.h **** /**
 159:../CMSIS/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 160:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 161:../CMSIS/cmsis_gcc.h ****   \return               non-secure Control Register value
 162:../CMSIS/cmsis_gcc.h ****  */
 163:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 164:../CMSIS/cmsis_gcc.h **** {
 165:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 166:../CMSIS/cmsis_gcc.h **** 
 167:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 168:../CMSIS/cmsis_gcc.h ****   return(result);
 169:../CMSIS/cmsis_gcc.h **** }
 170:../CMSIS/cmsis_gcc.h **** #endif
 171:../CMSIS/cmsis_gcc.h **** 
 172:../CMSIS/cmsis_gcc.h **** 
 173:../CMSIS/cmsis_gcc.h **** /**
 174:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register
 175:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 176:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 177:../CMSIS/cmsis_gcc.h ****  */
 178:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 179:../CMSIS/cmsis_gcc.h **** {
 180:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 181:../CMSIS/cmsis_gcc.h **** }
 182:../CMSIS/cmsis_gcc.h **** 
 183:../CMSIS/cmsis_gcc.h **** 
 184:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 185:../CMSIS/cmsis_gcc.h **** /**
 186:../CMSIS/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 187:../CMSIS/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 188:../CMSIS/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 189:../CMSIS/cmsis_gcc.h ****  */
 190:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 191:../CMSIS/cmsis_gcc.h **** {
 192:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 193:../CMSIS/cmsis_gcc.h **** }
 194:../CMSIS/cmsis_gcc.h **** #endif
 195:../CMSIS/cmsis_gcc.h **** 
 196:../CMSIS/cmsis_gcc.h **** 
 197:../CMSIS/cmsis_gcc.h **** /**
 198:../CMSIS/cmsis_gcc.h ****   \brief   Get IPSR Register
 199:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 200:../CMSIS/cmsis_gcc.h ****   \return               IPSR Register value
 201:../CMSIS/cmsis_gcc.h ****  */
 202:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 203:../CMSIS/cmsis_gcc.h **** {
 204:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 205:../CMSIS/cmsis_gcc.h **** 
 206:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 207:../CMSIS/cmsis_gcc.h ****   return(result);
 208:../CMSIS/cmsis_gcc.h **** }
 209:../CMSIS/cmsis_gcc.h **** 
 210:../CMSIS/cmsis_gcc.h **** 
 211:../CMSIS/cmsis_gcc.h **** /**
 212:../CMSIS/cmsis_gcc.h ****   \brief   Get APSR Register
 213:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 214:../CMSIS/cmsis_gcc.h ****   \return               APSR Register value
 215:../CMSIS/cmsis_gcc.h ****  */
 216:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 217:../CMSIS/cmsis_gcc.h **** {
 218:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 219:../CMSIS/cmsis_gcc.h **** 
 220:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 221:../CMSIS/cmsis_gcc.h ****   return(result);
 222:../CMSIS/cmsis_gcc.h **** }
 223:../CMSIS/cmsis_gcc.h **** 
 224:../CMSIS/cmsis_gcc.h **** 
 225:../CMSIS/cmsis_gcc.h **** /**
 226:../CMSIS/cmsis_gcc.h ****   \brief   Get xPSR Register
 227:../CMSIS/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 228:../CMSIS/cmsis_gcc.h ****   \return               xPSR Register value
 229:../CMSIS/cmsis_gcc.h ****  */
 230:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 231:../CMSIS/cmsis_gcc.h **** {
 232:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 233:../CMSIS/cmsis_gcc.h **** 
 234:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 235:../CMSIS/cmsis_gcc.h ****   return(result);
 236:../CMSIS/cmsis_gcc.h **** }
 237:../CMSIS/cmsis_gcc.h **** 
 238:../CMSIS/cmsis_gcc.h **** 
 239:../CMSIS/cmsis_gcc.h **** /**
 240:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 241:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 242:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 243:../CMSIS/cmsis_gcc.h ****  */
 244:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 245:../CMSIS/cmsis_gcc.h **** {
 246:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 247:../CMSIS/cmsis_gcc.h **** 
 248:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 249:../CMSIS/cmsis_gcc.h ****   return(result);
 250:../CMSIS/cmsis_gcc.h **** }
 251:../CMSIS/cmsis_gcc.h **** 
 252:../CMSIS/cmsis_gcc.h **** 
 253:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 254:../CMSIS/cmsis_gcc.h **** /**
 255:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 256:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 257:../CMSIS/cmsis_gcc.h ****   \return               PSP Register value
 258:../CMSIS/cmsis_gcc.h ****  */
 259:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 260:../CMSIS/cmsis_gcc.h **** {
 261:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 262:../CMSIS/cmsis_gcc.h **** 
 263:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 264:../CMSIS/cmsis_gcc.h ****   return(result);
 265:../CMSIS/cmsis_gcc.h **** }
 266:../CMSIS/cmsis_gcc.h **** #endif
 267:../CMSIS/cmsis_gcc.h **** 
 268:../CMSIS/cmsis_gcc.h **** 
 269:../CMSIS/cmsis_gcc.h **** /**
 270:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 271:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 272:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 273:../CMSIS/cmsis_gcc.h ****  */
 274:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 275:../CMSIS/cmsis_gcc.h **** {
 276:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 277:../CMSIS/cmsis_gcc.h **** }
 278:../CMSIS/cmsis_gcc.h **** 
 279:../CMSIS/cmsis_gcc.h **** 
 280:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 281:../CMSIS/cmsis_gcc.h **** /**
 282:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 283:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 284:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 285:../CMSIS/cmsis_gcc.h ****  */
 286:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 287:../CMSIS/cmsis_gcc.h **** {
 288:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 289:../CMSIS/cmsis_gcc.h **** }
 290:../CMSIS/cmsis_gcc.h **** #endif
 291:../CMSIS/cmsis_gcc.h **** 
 292:../CMSIS/cmsis_gcc.h **** 
 293:../CMSIS/cmsis_gcc.h **** /**
 294:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 295:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 296:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 297:../CMSIS/cmsis_gcc.h ****  */
 298:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 299:../CMSIS/cmsis_gcc.h **** {
 300:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 301:../CMSIS/cmsis_gcc.h **** 
 302:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 303:../CMSIS/cmsis_gcc.h ****   return(result);
 304:../CMSIS/cmsis_gcc.h **** }
 305:../CMSIS/cmsis_gcc.h **** 
 306:../CMSIS/cmsis_gcc.h **** 
 307:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 308:../CMSIS/cmsis_gcc.h **** /**
 309:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 310:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 311:../CMSIS/cmsis_gcc.h ****   \return               MSP Register value
 312:../CMSIS/cmsis_gcc.h ****  */
 313:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 314:../CMSIS/cmsis_gcc.h **** {
 315:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 316:../CMSIS/cmsis_gcc.h **** 
 317:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 318:../CMSIS/cmsis_gcc.h ****   return(result);
 319:../CMSIS/cmsis_gcc.h **** }
 320:../CMSIS/cmsis_gcc.h **** #endif
 321:../CMSIS/cmsis_gcc.h **** 
 322:../CMSIS/cmsis_gcc.h **** 
 323:../CMSIS/cmsis_gcc.h **** /**
 324:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 325:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 326:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 327:../CMSIS/cmsis_gcc.h ****  */
 328:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 329:../CMSIS/cmsis_gcc.h **** {
 330:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 331:../CMSIS/cmsis_gcc.h **** }
 332:../CMSIS/cmsis_gcc.h **** 
 333:../CMSIS/cmsis_gcc.h **** 
 334:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 335:../CMSIS/cmsis_gcc.h **** /**
 336:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 337:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 338:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 339:../CMSIS/cmsis_gcc.h ****  */
 340:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 341:../CMSIS/cmsis_gcc.h **** {
 342:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 343:../CMSIS/cmsis_gcc.h **** }
 344:../CMSIS/cmsis_gcc.h **** #endif
 345:../CMSIS/cmsis_gcc.h **** 
 346:../CMSIS/cmsis_gcc.h **** 
 347:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 348:../CMSIS/cmsis_gcc.h **** /**
 349:../CMSIS/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 350:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 351:../CMSIS/cmsis_gcc.h ****   \return               SP Register value
 352:../CMSIS/cmsis_gcc.h ****  */
 353:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_SP_NS(void)
 354:../CMSIS/cmsis_gcc.h **** {
 355:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 356:../CMSIS/cmsis_gcc.h **** 
 357:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 358:../CMSIS/cmsis_gcc.h ****   return(result);
 359:../CMSIS/cmsis_gcc.h **** }
 360:../CMSIS/cmsis_gcc.h **** 
 361:../CMSIS/cmsis_gcc.h **** 
 362:../CMSIS/cmsis_gcc.h **** /**
 363:../CMSIS/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 364:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 365:../CMSIS/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 366:../CMSIS/cmsis_gcc.h ****  */
 367:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 368:../CMSIS/cmsis_gcc.h **** {
 369:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 370:../CMSIS/cmsis_gcc.h **** }
 371:../CMSIS/cmsis_gcc.h **** #endif
 372:../CMSIS/cmsis_gcc.h **** 
 373:../CMSIS/cmsis_gcc.h **** 
 374:../CMSIS/cmsis_gcc.h **** /**
 375:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask
 376:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 377:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 378:../CMSIS/cmsis_gcc.h ****  */
 379:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 380:../CMSIS/cmsis_gcc.h **** {
 381:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 382:../CMSIS/cmsis_gcc.h **** 
 383:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:../CMSIS/cmsis_gcc.h ****   return(result);
 385:../CMSIS/cmsis_gcc.h **** }
 386:../CMSIS/cmsis_gcc.h **** 
 387:../CMSIS/cmsis_gcc.h **** 
 388:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 389:../CMSIS/cmsis_gcc.h **** /**
 390:../CMSIS/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 391:../CMSIS/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 392:../CMSIS/cmsis_gcc.h ****   \return               Priority Mask value
 393:../CMSIS/cmsis_gcc.h ****  */
 394:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 395:../CMSIS/cmsis_gcc.h **** {
 396:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 397:../CMSIS/cmsis_gcc.h **** 
 398:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 399:../CMSIS/cmsis_gcc.h ****   return(result);
 400:../CMSIS/cmsis_gcc.h **** }
 401:../CMSIS/cmsis_gcc.h **** #endif
 402:../CMSIS/cmsis_gcc.h **** 
 403:../CMSIS/cmsis_gcc.h **** 
 404:../CMSIS/cmsis_gcc.h **** /**
 405:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask
 406:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 407:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 408:../CMSIS/cmsis_gcc.h ****  */
 409:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 410:../CMSIS/cmsis_gcc.h **** {
 411:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 412:../CMSIS/cmsis_gcc.h **** }
 413:../CMSIS/cmsis_gcc.h **** 
 414:../CMSIS/cmsis_gcc.h **** 
 415:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 416:../CMSIS/cmsis_gcc.h **** /**
 417:../CMSIS/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 418:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 419:../CMSIS/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 420:../CMSIS/cmsis_gcc.h ****  */
 421:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 422:../CMSIS/cmsis_gcc.h **** {
 423:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 424:../CMSIS/cmsis_gcc.h **** }
 425:../CMSIS/cmsis_gcc.h **** #endif
 426:../CMSIS/cmsis_gcc.h **** 
 427:../CMSIS/cmsis_gcc.h **** 
 428:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 429:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 430:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 431:../CMSIS/cmsis_gcc.h **** /**
 432:../CMSIS/cmsis_gcc.h ****   \brief   Enable FIQ
 433:../CMSIS/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 434:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 435:../CMSIS/cmsis_gcc.h ****  */
 436:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 437:../CMSIS/cmsis_gcc.h **** {
 438:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 439:../CMSIS/cmsis_gcc.h **** }
 440:../CMSIS/cmsis_gcc.h **** 
 441:../CMSIS/cmsis_gcc.h **** 
 442:../CMSIS/cmsis_gcc.h **** /**
 443:../CMSIS/cmsis_gcc.h ****   \brief   Disable FIQ
 444:../CMSIS/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 445:../CMSIS/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 446:../CMSIS/cmsis_gcc.h ****  */
 447:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 448:../CMSIS/cmsis_gcc.h **** {
 449:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 450:../CMSIS/cmsis_gcc.h **** }
 451:../CMSIS/cmsis_gcc.h **** 
 452:../CMSIS/cmsis_gcc.h **** 
 453:../CMSIS/cmsis_gcc.h **** /**
 454:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority
 455:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 456:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 457:../CMSIS/cmsis_gcc.h ****  */
 458:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 459:../CMSIS/cmsis_gcc.h **** {
 460:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 461:../CMSIS/cmsis_gcc.h **** 
 462:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 463:../CMSIS/cmsis_gcc.h ****   return(result);
 464:../CMSIS/cmsis_gcc.h **** }
 465:../CMSIS/cmsis_gcc.h **** 
 466:../CMSIS/cmsis_gcc.h **** 
 467:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 468:../CMSIS/cmsis_gcc.h **** /**
 469:../CMSIS/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 470:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 471:../CMSIS/cmsis_gcc.h ****   \return               Base Priority register value
 472:../CMSIS/cmsis_gcc.h ****  */
 473:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 474:../CMSIS/cmsis_gcc.h **** {
 475:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 476:../CMSIS/cmsis_gcc.h **** 
 477:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 478:../CMSIS/cmsis_gcc.h ****   return(result);
 479:../CMSIS/cmsis_gcc.h **** }
 480:../CMSIS/cmsis_gcc.h **** #endif
 481:../CMSIS/cmsis_gcc.h **** 
 482:../CMSIS/cmsis_gcc.h **** 
 483:../CMSIS/cmsis_gcc.h **** /**
 484:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority
 485:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 486:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 487:../CMSIS/cmsis_gcc.h ****  */
 488:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 489:../CMSIS/cmsis_gcc.h **** {
 490:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 491:../CMSIS/cmsis_gcc.h **** }
 492:../CMSIS/cmsis_gcc.h **** 
 493:../CMSIS/cmsis_gcc.h **** 
 494:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 495:../CMSIS/cmsis_gcc.h **** /**
 496:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 497:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 498:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 499:../CMSIS/cmsis_gcc.h ****  */
 500:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 501:../CMSIS/cmsis_gcc.h **** {
 502:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 503:../CMSIS/cmsis_gcc.h **** }
 504:../CMSIS/cmsis_gcc.h **** #endif
 505:../CMSIS/cmsis_gcc.h **** 
 506:../CMSIS/cmsis_gcc.h **** 
 507:../CMSIS/cmsis_gcc.h **** /**
 508:../CMSIS/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 509:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 510:../CMSIS/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 511:../CMSIS/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 512:../CMSIS/cmsis_gcc.h ****  */
 513:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 514:../CMSIS/cmsis_gcc.h **** {
 515:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 516:../CMSIS/cmsis_gcc.h **** }
 517:../CMSIS/cmsis_gcc.h **** 
 518:../CMSIS/cmsis_gcc.h **** 
 519:../CMSIS/cmsis_gcc.h **** /**
 520:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask
 521:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 522:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 523:../CMSIS/cmsis_gcc.h ****  */
 524:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 525:../CMSIS/cmsis_gcc.h **** {
 526:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 527:../CMSIS/cmsis_gcc.h **** 
 528:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 529:../CMSIS/cmsis_gcc.h ****   return(result);
 530:../CMSIS/cmsis_gcc.h **** }
 531:../CMSIS/cmsis_gcc.h **** 
 532:../CMSIS/cmsis_gcc.h **** 
 533:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 534:../CMSIS/cmsis_gcc.h **** /**
 535:../CMSIS/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 536:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 537:../CMSIS/cmsis_gcc.h ****   \return               Fault Mask register value
 538:../CMSIS/cmsis_gcc.h ****  */
 539:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 540:../CMSIS/cmsis_gcc.h **** {
 541:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 542:../CMSIS/cmsis_gcc.h **** 
 543:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 544:../CMSIS/cmsis_gcc.h ****   return(result);
 545:../CMSIS/cmsis_gcc.h **** }
 546:../CMSIS/cmsis_gcc.h **** #endif
 547:../CMSIS/cmsis_gcc.h **** 
 548:../CMSIS/cmsis_gcc.h **** 
 549:../CMSIS/cmsis_gcc.h **** /**
 550:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask
 551:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 552:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 553:../CMSIS/cmsis_gcc.h ****  */
 554:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 555:../CMSIS/cmsis_gcc.h **** {
 556:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 557:../CMSIS/cmsis_gcc.h **** }
 558:../CMSIS/cmsis_gcc.h **** 
 559:../CMSIS/cmsis_gcc.h **** 
 560:../CMSIS/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 561:../CMSIS/cmsis_gcc.h **** /**
 562:../CMSIS/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 563:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 564:../CMSIS/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 565:../CMSIS/cmsis_gcc.h ****  */
 566:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 567:../CMSIS/cmsis_gcc.h **** {
 568:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 569:../CMSIS/cmsis_gcc.h **** }
 570:../CMSIS/cmsis_gcc.h **** #endif
 571:../CMSIS/cmsis_gcc.h **** 
 572:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 573:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 574:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 575:../CMSIS/cmsis_gcc.h **** 
 576:../CMSIS/cmsis_gcc.h **** 
 577:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 578:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 579:../CMSIS/cmsis_gcc.h **** 
 580:../CMSIS/cmsis_gcc.h **** /**
 581:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 582:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 583:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 584:../CMSIS/cmsis_gcc.h ****  */
 585:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 586:../CMSIS/cmsis_gcc.h **** {
 587:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 588:../CMSIS/cmsis_gcc.h **** 
 589:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 590:../CMSIS/cmsis_gcc.h ****   return(result);
 591:../CMSIS/cmsis_gcc.h **** }
 592:../CMSIS/cmsis_gcc.h **** 
 593:../CMSIS/cmsis_gcc.h **** 
 594:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 595:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 596:../CMSIS/cmsis_gcc.h **** /**
 597:../CMSIS/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 598:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 599:../CMSIS/cmsis_gcc.h ****   \return               PSPLIM Register value
 600:../CMSIS/cmsis_gcc.h ****  */
 601:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 602:../CMSIS/cmsis_gcc.h **** {
 603:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 604:../CMSIS/cmsis_gcc.h **** 
 605:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 606:../CMSIS/cmsis_gcc.h ****   return(result);
 607:../CMSIS/cmsis_gcc.h **** }
 608:../CMSIS/cmsis_gcc.h **** #endif
 609:../CMSIS/cmsis_gcc.h **** 
 610:../CMSIS/cmsis_gcc.h **** 
 611:../CMSIS/cmsis_gcc.h **** /**
 612:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 613:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 614:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 615:../CMSIS/cmsis_gcc.h ****  */
 616:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 617:../CMSIS/cmsis_gcc.h **** {
 618:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 619:../CMSIS/cmsis_gcc.h **** }
 620:../CMSIS/cmsis_gcc.h **** 
 621:../CMSIS/cmsis_gcc.h **** 
 622:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 623:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 624:../CMSIS/cmsis_gcc.h **** /**
 625:../CMSIS/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 626:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 627:../CMSIS/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 628:../CMSIS/cmsis_gcc.h ****  */
 629:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 630:../CMSIS/cmsis_gcc.h **** {
 631:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 632:../CMSIS/cmsis_gcc.h **** }
 633:../CMSIS/cmsis_gcc.h **** #endif
 634:../CMSIS/cmsis_gcc.h **** 
 635:../CMSIS/cmsis_gcc.h **** 
 636:../CMSIS/cmsis_gcc.h **** /**
 637:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 638:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 639:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 640:../CMSIS/cmsis_gcc.h ****  */
 641:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 642:../CMSIS/cmsis_gcc.h **** {
 643:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 644:../CMSIS/cmsis_gcc.h **** 
 645:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 646:../CMSIS/cmsis_gcc.h **** 
 647:../CMSIS/cmsis_gcc.h ****   return(result);
 648:../CMSIS/cmsis_gcc.h **** }
 649:../CMSIS/cmsis_gcc.h **** 
 650:../CMSIS/cmsis_gcc.h **** 
 651:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 652:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 653:../CMSIS/cmsis_gcc.h **** /**
 654:../CMSIS/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 655:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 656:../CMSIS/cmsis_gcc.h ****   \return               MSPLIM Register value
 657:../CMSIS/cmsis_gcc.h ****  */
 658:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 659:../CMSIS/cmsis_gcc.h **** {
 660:../CMSIS/cmsis_gcc.h ****   register uint32_t result;
 661:../CMSIS/cmsis_gcc.h **** 
 662:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 663:../CMSIS/cmsis_gcc.h ****   return(result);
 664:../CMSIS/cmsis_gcc.h **** }
 665:../CMSIS/cmsis_gcc.h **** #endif
 666:../CMSIS/cmsis_gcc.h **** 
 667:../CMSIS/cmsis_gcc.h **** 
 668:../CMSIS/cmsis_gcc.h **** /**
 669:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 670:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 671:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 672:../CMSIS/cmsis_gcc.h ****  */
 673:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 674:../CMSIS/cmsis_gcc.h **** {
 675:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 676:../CMSIS/cmsis_gcc.h **** }
 677:../CMSIS/cmsis_gcc.h **** 
 678:../CMSIS/cmsis_gcc.h **** 
 679:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 680:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 681:../CMSIS/cmsis_gcc.h **** /**
 682:../CMSIS/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 683:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 684:../CMSIS/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 685:../CMSIS/cmsis_gcc.h ****  */
 686:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 687:../CMSIS/cmsis_gcc.h **** {
 688:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 689:../CMSIS/cmsis_gcc.h **** }
 690:../CMSIS/cmsis_gcc.h **** #endif
 691:../CMSIS/cmsis_gcc.h **** 
 692:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 693:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 694:../CMSIS/cmsis_gcc.h **** 
 695:../CMSIS/cmsis_gcc.h **** 
 696:../CMSIS/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 697:../CMSIS/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 698:../CMSIS/cmsis_gcc.h **** 
 699:../CMSIS/cmsis_gcc.h **** /**
 700:../CMSIS/cmsis_gcc.h ****   \brief   Get FPSCR
 701:../CMSIS/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 702:../CMSIS/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 703:../CMSIS/cmsis_gcc.h ****  */
 704:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 705:../CMSIS/cmsis_gcc.h **** {
 706:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 707:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 708:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 709:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 710:../CMSIS/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 711:../CMSIS/cmsis_gcc.h **** #else
 712:../CMSIS/cmsis_gcc.h ****   uint32_t result;
 713:../CMSIS/cmsis_gcc.h **** 
 714:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 715:../CMSIS/cmsis_gcc.h ****   return(result);
 716:../CMSIS/cmsis_gcc.h **** #endif
 717:../CMSIS/cmsis_gcc.h **** #else
 718:../CMSIS/cmsis_gcc.h ****   return(0U);
 719:../CMSIS/cmsis_gcc.h **** #endif
 720:../CMSIS/cmsis_gcc.h **** }
 721:../CMSIS/cmsis_gcc.h **** 
 722:../CMSIS/cmsis_gcc.h **** 
 723:../CMSIS/cmsis_gcc.h **** /**
 724:../CMSIS/cmsis_gcc.h ****   \brief   Set FPSCR
 725:../CMSIS/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 726:../CMSIS/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 727:../CMSIS/cmsis_gcc.h ****  */
 728:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 729:../CMSIS/cmsis_gcc.h **** {
 730:../CMSIS/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 731:../CMSIS/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 732:../CMSIS/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >=
 733:../CMSIS/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 734:../CMSIS/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 735:../CMSIS/cmsis_gcc.h **** #else
 736:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 737:../CMSIS/cmsis_gcc.h **** #endif
 738:../CMSIS/cmsis_gcc.h **** #else
 739:../CMSIS/cmsis_gcc.h ****   (void)fpscr;
 740:../CMSIS/cmsis_gcc.h **** #endif
 741:../CMSIS/cmsis_gcc.h **** }
 742:../CMSIS/cmsis_gcc.h **** 
 743:../CMSIS/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 744:../CMSIS/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 745:../CMSIS/cmsis_gcc.h **** 
 746:../CMSIS/cmsis_gcc.h **** 
 747:../CMSIS/cmsis_gcc.h **** 
 748:../CMSIS/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 749:../CMSIS/cmsis_gcc.h **** 
 750:../CMSIS/cmsis_gcc.h **** 
 751:../CMSIS/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 752:../CMSIS/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 753:../CMSIS/cmsis_gcc.h ****   Access to dedicated instructions
 754:../CMSIS/cmsis_gcc.h ****   @{
 755:../CMSIS/cmsis_gcc.h **** */
 756:../CMSIS/cmsis_gcc.h **** 
 757:../CMSIS/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 758:../CMSIS/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 759:../CMSIS/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 760:../CMSIS/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 761:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 762:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 763:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 764:../CMSIS/cmsis_gcc.h **** #else
 765:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 766:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 767:../CMSIS/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 768:../CMSIS/cmsis_gcc.h **** #endif
 769:../CMSIS/cmsis_gcc.h **** 
 770:../CMSIS/cmsis_gcc.h **** /**
 771:../CMSIS/cmsis_gcc.h ****   \brief   No Operation
 772:../CMSIS/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 773:../CMSIS/cmsis_gcc.h ****  */
 774:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 775:../CMSIS/cmsis_gcc.h **** //{
 776:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("nop");
 777:../CMSIS/cmsis_gcc.h **** //}
 778:../CMSIS/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 779:../CMSIS/cmsis_gcc.h **** 
 780:../CMSIS/cmsis_gcc.h **** /**
 781:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Interrupt
 782:../CMSIS/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 783:../CMSIS/cmsis_gcc.h ****  */
 784:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 785:../CMSIS/cmsis_gcc.h **** //{
 786:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 787:../CMSIS/cmsis_gcc.h **** //}
 788:../CMSIS/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 789:../CMSIS/cmsis_gcc.h **** 
 790:../CMSIS/cmsis_gcc.h **** 
 791:../CMSIS/cmsis_gcc.h **** /**
 792:../CMSIS/cmsis_gcc.h ****   \brief   Wait For Event
 793:../CMSIS/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 794:../CMSIS/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 795:../CMSIS/cmsis_gcc.h ****  */
 796:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 797:../CMSIS/cmsis_gcc.h **** //{
 798:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 799:../CMSIS/cmsis_gcc.h **** //}
 800:../CMSIS/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 801:../CMSIS/cmsis_gcc.h **** 
 802:../CMSIS/cmsis_gcc.h **** 
 803:../CMSIS/cmsis_gcc.h **** /**
 804:../CMSIS/cmsis_gcc.h ****   \brief   Send Event
 805:../CMSIS/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 806:../CMSIS/cmsis_gcc.h ****  */
 807:../CMSIS/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 808:../CMSIS/cmsis_gcc.h **** //{
 809:../CMSIS/cmsis_gcc.h **** //  __ASM volatile ("sev");
 810:../CMSIS/cmsis_gcc.h **** //}
 811:../CMSIS/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 812:../CMSIS/cmsis_gcc.h **** 
 813:../CMSIS/cmsis_gcc.h **** 
 814:../CMSIS/cmsis_gcc.h **** /**
 815:../CMSIS/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 816:../CMSIS/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 817:../CMSIS/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 818:../CMSIS/cmsis_gcc.h ****            after the instruction has been completed.
 819:../CMSIS/cmsis_gcc.h ****  */
 820:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 821:../CMSIS/cmsis_gcc.h **** {
 822:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 823:../CMSIS/cmsis_gcc.h **** }
 824:../CMSIS/cmsis_gcc.h **** 
 825:../CMSIS/cmsis_gcc.h **** 
 826:../CMSIS/cmsis_gcc.h **** /**
 827:../CMSIS/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 828:../CMSIS/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 829:../CMSIS/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 830:../CMSIS/cmsis_gcc.h ****  */
 831:../CMSIS/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 832:../CMSIS/cmsis_gcc.h **** {
 833:../CMSIS/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2354              		.loc 5 833 0
 2355              		.syntax unified
 2356              	@ 833 "../CMSIS/cmsis_gcc.h" 1
 2357 000e BFF34F8F 		dsb 0xF
 2358              	@ 0 "" 2
 2359              		.thumb
 2360              		.syntax unified
 2361 0012 08BD     		pop	{r3, pc}
 2362              	.L182:
 2363              		.align	2
 2364              	.L181:
 2365 0014 00000000 		.word	.LANCHOR0
 2366 0018 00000000 		.word	.LANCHOR1
 2367 001c 00400240 		.word	1073889280
 2368              	.LBE206:
 2369              	.LBE205:
 2370              		.cfi_endproc
 2371              	.LFE187:
 2373              		.section	.bss.s_flexcanHandle,"aw",%nobits
 2374              		.align	2
 2375              		.set	.LANCHOR0,. + 0
 2378              	s_flexcanHandle:
 2379 0000 00000000 		.space	4
 2380              		.section	.bss.s_flexcanIsr,"aw",%nobits
 2381              		.align	2
 2382              		.set	.LANCHOR1,. + 0
 2385              	s_flexcanIsr:
 2386 0000 00000000 		.space	4
 2387              		.text
 2388              	.Letext0:
 2389              		.file 6 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 2390              		.file 7 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 2391              		.file 8 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 2392              		.file 9 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 2393              		.file 10 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef
 2394              		.file 11 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 2395              		.file 12 "../CMSIS/MK64F12.h"
 2396              		.file 13 "../CMSIS/system_MK64F12.h"
 2397              		.file 14 "../drivers/fsl_common.h"
