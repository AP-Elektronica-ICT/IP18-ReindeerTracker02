   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.initTimer,"ax",%progbits
  18              		.align	1
  19              		.global	initTimer
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	initTimer:
  26              	.LFB221:
  27              		.file 1 "../source/main.c"
   1:../source/main.c **** /**
   2:../source/main.c ****  * This is template for main module created by New Kinetis SDK 2.x Project Wizard. Enjoy!
   3:../source/main.c ****  **/
   4:../source/main.c **** 
   5:../source/main.c **** #include "board.h"
   6:../source/main.c **** #include "pin_mux.h"
   7:../source/main.c **** #include "clock_config.h"
   8:../source/main.c **** 
   9:../source/main.c **** #include "fsl_gpio.h"
  10:../source/main.c **** #include "fsl_uart.h"
  11:../source/main.c **** #include "fsl_port.h"
  12:../source/main.c **** #include "fsl_common.h"
  13:../source/main.c **** #include "fsl_i2c.h"
  14:../source/main.c **** #include "fsl_smc.h"
  15:../source/main.c **** #include "fsl_lptmr.h"
  16:../source/main.c **** #include "fsl_dspi.h"
  17:../source/main.c **** #include "at_func.h"
  18:../source/main.c **** 
  19:../source/main.c **** #include <stdio.h>
  20:../source/main.c **** #include <stdlib.h>
  21:../source/main.c **** 
  22:../source/main.c **** #include "acc_func.h"
  23:../source/main.c **** #include "i2c_func.h"
  24:../source/main.c **** #include "adc_func.h"
  25:../source/main.c **** #include "fsl_rtc.h"
  26:../source/main.c **** #include "gps_func.h"
  27:../source/main.c **** #include "ubx_func.h"
  28:../source/main.c **** #include "nbiot_func.h"
  29:../source/main.c **** #include "timing.h"
  30:../source/main.c **** 
  31:../source/main.c **** #define RESPONSE_TIMEOUT_NORMAL_VALUE 2000
  32:../source/main.c **** 
  33:../source/main.c **** lptmr_config_t lptmr_config;
  34:../source/main.c **** smc_power_mode_vlls_config_t smc_power_mode_vlls_config;
  35:../source/main.c **** uart_config_t uart_config;
  36:../source/main.c **** 
  37:../source/main.c **** volatile uint8_t wake = 2;
  38:../source/main.c **** volatile uint8_t UART3_strReady = 0;
  39:../source/main.c **** volatile uint16_t UART3_bufPtr = 0;
  40:../source/main.c **** 
  41:../source/main.c **** char UART3_recBuf[500]; 	//buffer for receiving NB IoT module data
  42:../source/main.c **** 
  43:../source/main.c **** static char PC_recBuf[500];	//buffer for receiving from PC terminal
  44:../source/main.c **** volatile uint16_t PC_bufPtr = 0;
  45:../source/main.c **** volatile uint8_t PC_strReady = 0;
  46:../source/main.c **** 
  47:../source/main.c **** char GPS_recBuf[600];	//buffer for receiving from PC terminal
  48:../source/main.c **** volatile uint16_t GPS_bufPtr = 0;
  49:../source/main.c **** volatile uint8_t GPS_strReady = 0;
  50:../source/main.c **** uint8_t streamGps = 0;
  51:../source/main.c **** 
  52:../source/main.c **** char parsedLat[15];
  53:../source/main.c **** char parsedLon[15];
  54:../source/main.c **** 
  55:../source/main.c **** volatile uint32_t moduleResponseTimeout = RESPONSE_TIMEOUT_NORMAL_VALUE; //timeout variable for wai
  56:../source/main.c **** 
  57:../source/main.c **** uint32_t ms_ticks; //millisecond ticks value for the delay_ms function
  58:../source/main.c **** /*
  59:../source/main.c ****  void delay_ms(uint32_t del)
  60:../source/main.c ****  {
  61:../source/main.c ****  for (; del > 0; del--)
  62:../source/main.c ****  {
  63:../source/main.c ****  for(uint32_t t = 0; t<ms_ticks;t++)
  64:../source/main.c ****  {
  65:../source/main.c ****  __asm("nop");
  66:../source/main.c ****  }
  67:../source/main.c ****  }
  68:../source/main.c ****  }
  69:../source/main.c ****  */
  70:../source/main.c **** 
  71:../source/main.c **** void initTimer() {
  28              		.loc 1 71 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 3, -16
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  72:../source/main.c **** 
  73:../source/main.c **** 	/*
  74:../source/main.c **** 	 * Init dead reindeer timer. LPTIMER interrupt will wake up MCU after a certain time, IF accelerom
  75:../source/main.c **** 	 * has not waked it earlier (and reset the timer)
  76:../source/main.c **** 	 */
  77:../source/main.c **** 
  78:../source/main.c **** 	LPTMR_GetDefaultConfig(&lptmr_config);
  38              		.loc 1 78 0
  39 0002 0B4C     		ldr	r4, .L2
  79:../source/main.c **** 	lptmr_config.bypassPrescaler = true;
  80:../source/main.c **** 	lptmr_config.value = kLPTMR_Prescale_Glitch_0;
  81:../source/main.c **** 	lptmr_config.prescalerClockSource = kLPTMR_PrescalerClock_1;
  82:../source/main.c **** 	EnableIRQ(LPTMR0_IRQn);
  83:../source/main.c **** 	LPTMR_Init(LPTMR0, &lptmr_config);
  40              		.loc 1 83 0
  41 0004 0B4D     		ldr	r5, .L2+4
  78:../source/main.c **** 	lptmr_config.bypassPrescaler = true;
  42              		.loc 1 78 0
  43 0006 2046     		mov	r0, r4
  44 0008 FFF7FEFF 		bl	LPTMR_GetDefaultConfig
  45              	.LVL0:
  79:../source/main.c **** 	lptmr_config.bypassPrescaler = true;
  46              		.loc 1 79 0
  47 000c 0123     		movs	r3, #1
  48 000e 2371     		strb	r3, [r4, #4]
  81:../source/main.c **** 	EnableIRQ(LPTMR0_IRQn);
  49              		.loc 1 81 0
  50 0010 6371     		strb	r3, [r4, #5]
  51              	.LVL1:
  80:../source/main.c **** 	lptmr_config.prescalerClockSource = kLPTMR_PrescalerClock_1;
  52              		.loc 1 80 0
  53 0012 0022     		movs	r2, #0
  54              	.LBB64:
  55              	.LBB65:
  56              	.LBB66:
  57              		.file 2 "../CMSIS/core_cm4.h"
   1:../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/core_cm4.h ****  * @version  V5.0.2
   5:../CMSIS/core_cm4.h ****  * @date     19. April 2017
   6:../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/core_cm4.h **** /*
   8:../CMSIS/core_cm4.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:../CMSIS/core_cm4.h ****  *
  10:../CMSIS/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/core_cm4.h ****  *
  12:../CMSIS/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/core_cm4.h ****  *
  16:../CMSIS/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/core_cm4.h ****  *
  18:../CMSIS/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/core_cm4.h ****  */
  24:../CMSIS/core_cm4.h **** 
  25:../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/core_cm4.h **** #endif
  30:../CMSIS/core_cm4.h **** 
  31:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/core_cm4.h **** 
  34:../CMSIS/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/core_cm4.h **** 
  36:../CMSIS/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/core_cm4.h ****  extern "C" {
  38:../CMSIS/core_cm4.h **** #endif
  39:../CMSIS/core_cm4.h **** 
  40:../CMSIS/core_cm4.h **** /**
  41:../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/core_cm4.h **** 
  44:../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/core_cm4.h **** 
  47:../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/core_cm4.h **** 
  50:../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/core_cm4.h ****  */
  53:../CMSIS/core_cm4.h **** 
  54:../CMSIS/core_cm4.h **** 
  55:../CMSIS/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/core_cm4.h **** /**
  59:../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/core_cm4.h ****   @{
  61:../CMSIS/core_cm4.h ****  */
  62:../CMSIS/core_cm4.h **** 
  63:../CMSIS/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/core_cm4.h ****  
  65:../CMSIS/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/core_cm4.h **** 
  71:../CMSIS/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/core_cm4.h **** 
  73:../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/core_cm4.h **** */
  76:../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/core_cm4.h ****     #else
  81:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/core_cm4.h ****     #endif
  84:../CMSIS/core_cm4.h ****   #else
  85:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/core_cm4.h ****   #endif
  87:../CMSIS/core_cm4.h **** 
  88:../CMSIS/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/core_cm4.h ****     #else
  93:../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/core_cm4.h ****     #endif
  96:../CMSIS/core_cm4.h ****   #else
  97:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/core_cm4.h ****   #endif
  99:../CMSIS/core_cm4.h **** 
 100:../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/core_cm4.h ****     #else
 105:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/core_cm4.h ****     #endif
 108:../CMSIS/core_cm4.h ****   #else
 109:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/core_cm4.h ****   #endif
 111:../CMSIS/core_cm4.h **** 
 112:../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/core_cm4.h ****     #else
 117:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/core_cm4.h ****     #endif
 120:../CMSIS/core_cm4.h ****   #else
 121:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/core_cm4.h ****   #endif
 123:../CMSIS/core_cm4.h **** 
 124:../CMSIS/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/core_cm4.h ****     #else
 129:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/core_cm4.h ****     #endif
 132:../CMSIS/core_cm4.h ****   #else
 133:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/core_cm4.h ****   #endif
 135:../CMSIS/core_cm4.h **** 
 136:../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/core_cm4.h ****     #else
 141:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/core_cm4.h ****     #endif
 144:../CMSIS/core_cm4.h ****   #else
 145:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/core_cm4.h ****   #endif
 147:../CMSIS/core_cm4.h **** 
 148:../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/core_cm4.h ****     #else
 153:../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/core_cm4.h ****     #endif
 156:../CMSIS/core_cm4.h ****   #else
 157:../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/core_cm4.h ****   #endif
 159:../CMSIS/core_cm4.h **** 
 160:../CMSIS/core_cm4.h **** #endif
 161:../CMSIS/core_cm4.h **** 
 162:../CMSIS/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/core_cm4.h **** 
 164:../CMSIS/core_cm4.h **** 
 165:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/core_cm4.h **** }
 167:../CMSIS/core_cm4.h **** #endif
 168:../CMSIS/core_cm4.h **** 
 169:../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/core_cm4.h **** 
 171:../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/core_cm4.h **** 
 173:../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/core_cm4.h **** 
 176:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/core_cm4.h ****  extern "C" {
 178:../CMSIS/core_cm4.h **** #endif
 179:../CMSIS/core_cm4.h **** 
 180:../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/core_cm4.h ****   #endif
 186:../CMSIS/core_cm4.h **** 
 187:../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/core_cm4.h ****   #endif
 191:../CMSIS/core_cm4.h **** 
 192:../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/core_cm4.h ****   #endif
 196:../CMSIS/core_cm4.h **** 
 197:../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/core_cm4.h ****   #endif
 201:../CMSIS/core_cm4.h **** 
 202:../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/core_cm4.h ****   #endif
 206:../CMSIS/core_cm4.h **** #endif
 207:../CMSIS/core_cm4.h **** 
 208:../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/core_cm4.h **** /**
 210:../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/core_cm4.h **** 
 212:../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/core_cm4.h **** */
 216:../CMSIS/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/core_cm4.h **** #else
 219:../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/core_cm4.h **** #endif
 221:../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/core_cm4.h **** 
 224:../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/core_cm4.h **** 
 229:../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/core_cm4.h **** 
 231:../CMSIS/core_cm4.h **** 
 232:../CMSIS/core_cm4.h **** 
 233:../CMSIS/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/core_cm4.h ****   Core Register contain:
 236:../CMSIS/core_cm4.h ****   - Core Register
 237:../CMSIS/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/core_cm4.h **** /**
 245:../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/core_cm4.h **** */
 248:../CMSIS/core_cm4.h **** 
 249:../CMSIS/core_cm4.h **** /**
 250:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/core_cm4.h ****   @{
 254:../CMSIS/core_cm4.h ****  */
 255:../CMSIS/core_cm4.h **** 
 256:../CMSIS/core_cm4.h **** /**
 257:../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/core_cm4.h ****  */
 259:../CMSIS/core_cm4.h **** typedef union
 260:../CMSIS/core_cm4.h **** {
 261:../CMSIS/core_cm4.h ****   struct
 262:../CMSIS/core_cm4.h ****   {
 263:../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/core_cm4.h **** } APSR_Type;
 274:../CMSIS/core_cm4.h **** 
 275:../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/core_cm4.h **** 
 279:../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/core_cm4.h **** 
 282:../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/core_cm4.h **** 
 285:../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/core_cm4.h **** 
 288:../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/core_cm4.h **** 
 291:../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/core_cm4.h **** 
 294:../CMSIS/core_cm4.h **** 
 295:../CMSIS/core_cm4.h **** /**
 296:../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/core_cm4.h ****  */
 298:../CMSIS/core_cm4.h **** typedef union
 299:../CMSIS/core_cm4.h **** {
 300:../CMSIS/core_cm4.h ****   struct
 301:../CMSIS/core_cm4.h ****   {
 302:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/core_cm4.h **** 
 308:../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/core_cm4.h **** 
 312:../CMSIS/core_cm4.h **** 
 313:../CMSIS/core_cm4.h **** /**
 314:../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/core_cm4.h ****  */
 316:../CMSIS/core_cm4.h **** typedef union
 317:../CMSIS/core_cm4.h **** {
 318:../CMSIS/core_cm4.h ****   struct
 319:../CMSIS/core_cm4.h ****   {
 320:../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/core_cm4.h **** 
 336:../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/core_cm4.h **** 
 340:../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/core_cm4.h **** 
 343:../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/core_cm4.h **** 
 346:../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/core_cm4.h **** 
 349:../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/core_cm4.h **** 
 352:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/core_cm4.h **** 
 355:../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/core_cm4.h **** 
 358:../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/core_cm4.h **** 
 361:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/core_cm4.h **** 
 364:../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/core_cm4.h **** 
 367:../CMSIS/core_cm4.h **** 
 368:../CMSIS/core_cm4.h **** /**
 369:../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/core_cm4.h ****  */
 371:../CMSIS/core_cm4.h **** typedef union
 372:../CMSIS/core_cm4.h **** {
 373:../CMSIS/core_cm4.h ****   struct
 374:../CMSIS/core_cm4.h ****   {
 375:../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/core_cm4.h **** 
 383:../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/core_cm4.h **** 
 387:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/core_cm4.h **** 
 390:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/core_cm4.h **** 
 393:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/core_cm4.h **** 
 395:../CMSIS/core_cm4.h **** 
 396:../CMSIS/core_cm4.h **** /**
 397:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/core_cm4.h ****   @{
 401:../CMSIS/core_cm4.h ****  */
 402:../CMSIS/core_cm4.h **** 
 403:../CMSIS/core_cm4.h **** /**
 404:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/core_cm4.h ****  */
 406:../CMSIS/core_cm4.h **** typedef struct
 407:../CMSIS/core_cm4.h **** {
 408:../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/core_cm4.h **** 
 423:../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/core_cm4.h **** 
 427:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/core_cm4.h **** 
 429:../CMSIS/core_cm4.h **** 
 430:../CMSIS/core_cm4.h **** /**
 431:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/core_cm4.h ****   @{
 435:../CMSIS/core_cm4.h ****  */
 436:../CMSIS/core_cm4.h **** 
 437:../CMSIS/core_cm4.h **** /**
 438:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/core_cm4.h ****  */
 440:../CMSIS/core_cm4.h **** typedef struct
 441:../CMSIS/core_cm4.h **** {
 442:../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/core_cm4.h **** } SCB_Type;
 464:../CMSIS/core_cm4.h **** 
 465:../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/core_cm4.h **** 
 469:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/core_cm4.h **** 
 472:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/core_cm4.h **** 
 475:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/core_cm4.h **** 
 478:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/core_cm4.h **** 
 481:../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/core_cm4.h **** 
 485:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/core_cm4.h **** 
 488:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/core_cm4.h **** 
 491:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/core_cm4.h **** 
 494:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/core_cm4.h **** 
 497:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/core_cm4.h **** 
 500:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/core_cm4.h **** 
 503:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/core_cm4.h **** 
 506:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/core_cm4.h **** 
 509:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/core_cm4.h **** 
 512:../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/core_cm4.h **** 
 516:../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/core_cm4.h **** 
 520:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/core_cm4.h **** 
 523:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/core_cm4.h **** 
 526:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/core_cm4.h **** 
 529:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/core_cm4.h **** 
 532:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/core_cm4.h **** 
 535:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/core_cm4.h **** 
 538:../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/core_cm4.h **** 
 542:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/core_cm4.h **** 
 545:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/core_cm4.h **** 
 548:../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/core_cm4.h **** 
 552:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/core_cm4.h **** 
 555:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/core_cm4.h **** 
 558:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/core_cm4.h **** 
 561:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/core_cm4.h **** 
 564:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/core_cm4.h **** 
 567:../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/core_cm4.h **** 
 571:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/core_cm4.h **** 
 574:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/core_cm4.h **** 
 577:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/core_cm4.h **** 
 580:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/core_cm4.h **** 
 583:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/core_cm4.h **** 
 586:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/core_cm4.h **** 
 589:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/core_cm4.h **** 
 592:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/core_cm4.h **** 
 595:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/core_cm4.h **** 
 598:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/core_cm4.h **** 
 601:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/core_cm4.h **** 
 604:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/core_cm4.h **** 
 607:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/core_cm4.h **** 
 610:../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/core_cm4.h **** 
 614:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/core_cm4.h **** 
 617:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/core_cm4.h **** 
 620:../CMSIS/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/core_cm4.h **** 
 624:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/core_cm4.h **** 
 627:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/core_cm4.h **** 
 630:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/core_cm4.h **** 
 633:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/core_cm4.h **** 
 636:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/core_cm4.h **** 
 639:../CMSIS/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/core_cm4.h **** 
 643:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/core_cm4.h **** 
 646:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/core_cm4.h **** 
 649:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/core_cm4.h **** 
 652:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/core_cm4.h **** 
 655:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/core_cm4.h **** 
 658:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/core_cm4.h **** 
 661:../CMSIS/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/core_cm4.h **** 
 665:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/core_cm4.h **** 
 668:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/core_cm4.h **** 
 671:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/core_cm4.h **** 
 674:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/core_cm4.h **** 
 677:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/core_cm4.h **** 
 680:../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/core_cm4.h **** 
 684:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/core_cm4.h **** 
 687:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/core_cm4.h **** 
 690:../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/core_cm4.h **** 
 694:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/core_cm4.h **** 
 697:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/core_cm4.h **** 
 700:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/core_cm4.h **** 
 703:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/core_cm4.h **** 
 706:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/core_cm4.h **** 
 708:../CMSIS/core_cm4.h **** 
 709:../CMSIS/core_cm4.h **** /**
 710:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/core_cm4.h ****   @{
 714:../CMSIS/core_cm4.h ****  */
 715:../CMSIS/core_cm4.h **** 
 716:../CMSIS/core_cm4.h **** /**
 717:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/core_cm4.h ****  */
 719:../CMSIS/core_cm4.h **** typedef struct
 720:../CMSIS/core_cm4.h **** {
 721:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/core_cm4.h **** 
 726:../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/core_cm4.h **** 
 730:../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/core_cm4.h **** 
 734:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/core_cm4.h **** 
 737:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/core_cm4.h **** 
 740:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/core_cm4.h **** 
 743:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/core_cm4.h **** 
 746:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/core_cm4.h **** 
 748:../CMSIS/core_cm4.h **** 
 749:../CMSIS/core_cm4.h **** /**
 750:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/core_cm4.h ****   @{
 754:../CMSIS/core_cm4.h ****  */
 755:../CMSIS/core_cm4.h **** 
 756:../CMSIS/core_cm4.h **** /**
 757:../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/core_cm4.h ****  */
 759:../CMSIS/core_cm4.h **** typedef struct
 760:../CMSIS/core_cm4.h **** {
 761:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/core_cm4.h **** 
 767:../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/core_cm4.h **** 
 771:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/core_cm4.h **** 
 774:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/core_cm4.h **** 
 777:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/core_cm4.h **** 
 780:../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/core_cm4.h **** 
 784:../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/core_cm4.h **** 
 788:../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/core_cm4.h **** 
 792:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/core_cm4.h **** 
 795:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/core_cm4.h **** 
 798:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/core_cm4.h **** 
 800:../CMSIS/core_cm4.h **** 
 801:../CMSIS/core_cm4.h **** /**
 802:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/core_cm4.h ****   @{
 806:../CMSIS/core_cm4.h ****  */
 807:../CMSIS/core_cm4.h **** 
 808:../CMSIS/core_cm4.h **** /**
 809:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/core_cm4.h ****  */
 811:../CMSIS/core_cm4.h **** typedef struct
 812:../CMSIS/core_cm4.h **** {
 813:../CMSIS/core_cm4.h ****   __OM  union
 814:../CMSIS/core_cm4.h ****   {
 815:../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/core_cm4.h **** } ITM_Type;
 846:../CMSIS/core_cm4.h **** 
 847:../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 850:../CMSIS/core_cm4.h **** 
 851:../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/core_cm4.h **** 
 855:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/core_cm4.h **** 
 858:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/core_cm4.h **** 
 861:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/core_cm4.h **** 
 864:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/core_cm4.h **** 
 867:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/core_cm4.h **** 
 870:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/core_cm4.h **** 
 873:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/core_cm4.h **** 
 876:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/core_cm4.h **** 
 879:../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/core_cm4.h **** 
 883:../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/core_cm4.h **** 
 887:../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/core_cm4.h **** 
 891:../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/core_cm4.h **** 
 895:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/core_cm4.h **** 
 898:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/core_cm4.h **** 
 901:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/core_cm4.h **** 
 903:../CMSIS/core_cm4.h **** 
 904:../CMSIS/core_cm4.h **** /**
 905:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/core_cm4.h ****   @{
 909:../CMSIS/core_cm4.h ****  */
 910:../CMSIS/core_cm4.h **** 
 911:../CMSIS/core_cm4.h **** /**
 912:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/core_cm4.h ****  */
 914:../CMSIS/core_cm4.h **** typedef struct
 915:../CMSIS/core_cm4.h **** {
 916:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/core_cm4.h **** } DWT_Type;
 940:../CMSIS/core_cm4.h **** 
 941:../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/core_cm4.h **** 
 945:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/core_cm4.h **** 
 948:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/core_cm4.h **** 
 951:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/core_cm4.h **** 
 954:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/core_cm4.h **** 
 957:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/core_cm4.h **** 
 960:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/core_cm4.h **** 
 963:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/core_cm4.h **** 
 966:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/core_cm4.h **** 
 969:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/core_cm4.h **** 
 972:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/core_cm4.h **** 
 975:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/core_cm4.h **** 
 978:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/core_cm4.h **** 
 981:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/core_cm4.h **** 
 984:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/core_cm4.h **** 
 987:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/core_cm4.h **** 
 990:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/core_cm4.h **** 
 993:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/core_cm4.h **** 
 996:../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/core_cm4.h **** 
1000:../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/core_cm4.h **** 
1004:../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/core_cm4.h **** 
1008:../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/core_cm4.h **** 
1012:../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/core_cm4.h **** 
1016:../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/core_cm4.h **** 
1020:../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/core_cm4.h **** 
1024:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/core_cm4.h **** 
1027:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/core_cm4.h **** 
1030:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/core_cm4.h **** 
1033:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/core_cm4.h **** 
1036:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/core_cm4.h **** 
1039:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/core_cm4.h **** 
1042:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/core_cm4.h **** 
1045:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/core_cm4.h **** 
1048:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/core_cm4.h **** 
1050:../CMSIS/core_cm4.h **** 
1051:../CMSIS/core_cm4.h **** /**
1052:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/core_cm4.h ****   @{
1056:../CMSIS/core_cm4.h ****  */
1057:../CMSIS/core_cm4.h **** 
1058:../CMSIS/core_cm4.h **** /**
1059:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/core_cm4.h ****  */
1061:../CMSIS/core_cm4.h **** typedef struct
1062:../CMSIS/core_cm4.h **** {
1063:../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1075:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/core_cm4.h **** } TPI_Type;
1088:../CMSIS/core_cm4.h **** 
1089:../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/core_cm4.h **** 
1093:../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/core_cm4.h **** 
1097:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/core_cm4.h **** 
1101:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/core_cm4.h **** 
1104:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/core_cm4.h **** 
1107:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/core_cm4.h **** 
1110:../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/core_cm4.h **** 
1114:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/core_cm4.h **** 
1117:../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/core_cm4.h **** 
1121:../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/core_cm4.h **** 
1125:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/core_cm4.h **** 
1128:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/core_cm4.h **** 
1131:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/core_cm4.h **** 
1134:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/core_cm4.h **** 
1137:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/core_cm4.h **** 
1140:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/core_cm4.h **** 
1143:../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1145:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1146:../CMSIS/core_cm4.h **** 
1147:../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1148:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1149:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1150:../CMSIS/core_cm4.h **** 
1151:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1152:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1153:../CMSIS/core_cm4.h **** 
1154:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1155:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1156:../CMSIS/core_cm4.h **** 
1157:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1158:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1159:../CMSIS/core_cm4.h **** 
1160:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1161:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1162:../CMSIS/core_cm4.h **** 
1163:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1164:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1165:../CMSIS/core_cm4.h **** 
1166:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1167:../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1168:../CMSIS/core_cm4.h **** 
1169:../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1170:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1171:../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1172:../CMSIS/core_cm4.h **** 
1173:../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1174:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1175:../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1176:../CMSIS/core_cm4.h **** 
1177:../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1178:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1179:../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1180:../CMSIS/core_cm4.h **** 
1181:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1182:../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1183:../CMSIS/core_cm4.h **** 
1184:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1185:../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1186:../CMSIS/core_cm4.h **** 
1187:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1188:../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1189:../CMSIS/core_cm4.h **** 
1190:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1191:../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1192:../CMSIS/core_cm4.h **** 
1193:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1194:../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1195:../CMSIS/core_cm4.h **** 
1196:../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1197:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1198:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1199:../CMSIS/core_cm4.h **** 
1200:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1201:../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1202:../CMSIS/core_cm4.h **** 
1203:../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1204:../CMSIS/core_cm4.h **** 
1205:../CMSIS/core_cm4.h **** 
1206:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1207:../CMSIS/core_cm4.h **** /**
1208:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1209:../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1210:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1211:../CMSIS/core_cm4.h ****   @{
1212:../CMSIS/core_cm4.h ****  */
1213:../CMSIS/core_cm4.h **** 
1214:../CMSIS/core_cm4.h **** /**
1215:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1216:../CMSIS/core_cm4.h ****  */
1217:../CMSIS/core_cm4.h **** typedef struct
1218:../CMSIS/core_cm4.h **** {
1219:../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1220:../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1221:../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1222:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1223:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1224:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1225:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1226:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1227:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1228:../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1229:../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1230:../CMSIS/core_cm4.h **** } MPU_Type;
1231:../CMSIS/core_cm4.h **** 
1232:../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1233:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1234:../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1235:../CMSIS/core_cm4.h **** 
1236:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1237:../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1238:../CMSIS/core_cm4.h **** 
1239:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1240:../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1241:../CMSIS/core_cm4.h **** 
1242:../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1243:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1244:../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1245:../CMSIS/core_cm4.h **** 
1246:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1247:../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1248:../CMSIS/core_cm4.h **** 
1249:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1250:../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1251:../CMSIS/core_cm4.h **** 
1252:../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1253:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1254:../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1255:../CMSIS/core_cm4.h **** 
1256:../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1257:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1258:../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1259:../CMSIS/core_cm4.h **** 
1260:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1261:../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1262:../CMSIS/core_cm4.h **** 
1263:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1264:../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1265:../CMSIS/core_cm4.h **** 
1266:../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1267:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1268:../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1269:../CMSIS/core_cm4.h **** 
1270:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1271:../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1272:../CMSIS/core_cm4.h **** 
1273:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1274:../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1275:../CMSIS/core_cm4.h **** 
1276:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1277:../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1278:../CMSIS/core_cm4.h **** 
1279:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1280:../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1281:../CMSIS/core_cm4.h **** 
1282:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1283:../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1284:../CMSIS/core_cm4.h **** 
1285:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1286:../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1287:../CMSIS/core_cm4.h **** 
1288:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1289:../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1290:../CMSIS/core_cm4.h **** 
1291:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1292:../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1293:../CMSIS/core_cm4.h **** 
1294:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1295:../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1296:../CMSIS/core_cm4.h **** 
1297:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1298:../CMSIS/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1299:../CMSIS/core_cm4.h **** 
1300:../CMSIS/core_cm4.h **** 
1301:../CMSIS/core_cm4.h **** /**
1302:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1303:../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1304:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1305:../CMSIS/core_cm4.h ****   @{
1306:../CMSIS/core_cm4.h ****  */
1307:../CMSIS/core_cm4.h **** 
1308:../CMSIS/core_cm4.h **** /**
1309:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1310:../CMSIS/core_cm4.h ****  */
1311:../CMSIS/core_cm4.h **** typedef struct
1312:../CMSIS/core_cm4.h **** {
1313:../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1314:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1315:../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1316:../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1317:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1318:../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1319:../CMSIS/core_cm4.h **** } FPU_Type;
1320:../CMSIS/core_cm4.h **** 
1321:../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1322:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1323:../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1324:../CMSIS/core_cm4.h **** 
1325:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1326:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1327:../CMSIS/core_cm4.h **** 
1328:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1329:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1330:../CMSIS/core_cm4.h **** 
1331:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1332:../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1333:../CMSIS/core_cm4.h **** 
1334:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1335:../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1336:../CMSIS/core_cm4.h **** 
1337:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1338:../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1339:../CMSIS/core_cm4.h **** 
1340:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1341:../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1342:../CMSIS/core_cm4.h **** 
1343:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1344:../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1345:../CMSIS/core_cm4.h **** 
1346:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1347:../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1348:../CMSIS/core_cm4.h **** 
1349:../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1350:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1351:../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1352:../CMSIS/core_cm4.h **** 
1353:../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1354:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1355:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1356:../CMSIS/core_cm4.h **** 
1357:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1358:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1359:../CMSIS/core_cm4.h **** 
1360:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1361:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1362:../CMSIS/core_cm4.h **** 
1363:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1364:../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1365:../CMSIS/core_cm4.h **** 
1366:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1367:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1368:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1369:../CMSIS/core_cm4.h **** 
1370:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1371:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1372:../CMSIS/core_cm4.h **** 
1373:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1374:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1375:../CMSIS/core_cm4.h **** 
1376:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1377:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1378:../CMSIS/core_cm4.h **** 
1379:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1380:../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1381:../CMSIS/core_cm4.h **** 
1382:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1383:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1384:../CMSIS/core_cm4.h **** 
1385:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1386:../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1387:../CMSIS/core_cm4.h **** 
1388:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1389:../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1390:../CMSIS/core_cm4.h **** 
1391:../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1392:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1393:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1394:../CMSIS/core_cm4.h **** 
1395:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1396:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1397:../CMSIS/core_cm4.h **** 
1398:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1399:../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1400:../CMSIS/core_cm4.h **** 
1401:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1402:../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1403:../CMSIS/core_cm4.h **** 
1404:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1405:../CMSIS/core_cm4.h **** 
1406:../CMSIS/core_cm4.h **** 
1407:../CMSIS/core_cm4.h **** /**
1408:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1409:../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1410:../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1411:../CMSIS/core_cm4.h ****   @{
1412:../CMSIS/core_cm4.h ****  */
1413:../CMSIS/core_cm4.h **** 
1414:../CMSIS/core_cm4.h **** /**
1415:../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1416:../CMSIS/core_cm4.h ****  */
1417:../CMSIS/core_cm4.h **** typedef struct
1418:../CMSIS/core_cm4.h **** {
1419:../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1420:../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1421:../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1422:../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1423:../CMSIS/core_cm4.h **** } CoreDebug_Type;
1424:../CMSIS/core_cm4.h **** 
1425:../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1426:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1427:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1428:../CMSIS/core_cm4.h **** 
1429:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1430:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1431:../CMSIS/core_cm4.h **** 
1432:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1433:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1434:../CMSIS/core_cm4.h **** 
1435:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1436:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1437:../CMSIS/core_cm4.h **** 
1438:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1439:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1440:../CMSIS/core_cm4.h **** 
1441:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1442:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1443:../CMSIS/core_cm4.h **** 
1444:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1445:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1446:../CMSIS/core_cm4.h **** 
1447:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1448:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1449:../CMSIS/core_cm4.h **** 
1450:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1451:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1452:../CMSIS/core_cm4.h **** 
1453:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1454:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1455:../CMSIS/core_cm4.h **** 
1456:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1457:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1458:../CMSIS/core_cm4.h **** 
1459:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1460:../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1461:../CMSIS/core_cm4.h **** 
1462:../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1463:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1464:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1465:../CMSIS/core_cm4.h **** 
1466:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1467:../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1468:../CMSIS/core_cm4.h **** 
1469:../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1470:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1471:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1472:../CMSIS/core_cm4.h **** 
1473:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1474:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1475:../CMSIS/core_cm4.h **** 
1476:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1477:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1478:../CMSIS/core_cm4.h **** 
1479:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1480:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1481:../CMSIS/core_cm4.h **** 
1482:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1483:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1484:../CMSIS/core_cm4.h **** 
1485:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1486:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1487:../CMSIS/core_cm4.h **** 
1488:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1489:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1490:../CMSIS/core_cm4.h **** 
1491:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1492:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1493:../CMSIS/core_cm4.h **** 
1494:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1495:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1496:../CMSIS/core_cm4.h **** 
1497:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1498:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1499:../CMSIS/core_cm4.h **** 
1500:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1501:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1502:../CMSIS/core_cm4.h **** 
1503:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1504:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1505:../CMSIS/core_cm4.h **** 
1506:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1507:../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1508:../CMSIS/core_cm4.h **** 
1509:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1510:../CMSIS/core_cm4.h **** 
1511:../CMSIS/core_cm4.h **** 
1512:../CMSIS/core_cm4.h **** /**
1513:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1514:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1515:../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1516:../CMSIS/core_cm4.h ****   @{
1517:../CMSIS/core_cm4.h ****  */
1518:../CMSIS/core_cm4.h **** 
1519:../CMSIS/core_cm4.h **** /**
1520:../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1521:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1522:../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1523:../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1524:../CMSIS/core_cm4.h **** */
1525:../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1526:../CMSIS/core_cm4.h **** 
1527:../CMSIS/core_cm4.h **** /**
1528:../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1529:../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1532:../CMSIS/core_cm4.h **** */
1533:../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1534:../CMSIS/core_cm4.h **** 
1535:../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1536:../CMSIS/core_cm4.h **** 
1537:../CMSIS/core_cm4.h **** 
1538:../CMSIS/core_cm4.h **** /**
1539:../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1540:../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1541:../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1542:../CMSIS/core_cm4.h ****   @{
1543:../CMSIS/core_cm4.h ****  */
1544:../CMSIS/core_cm4.h **** 
1545:../CMSIS/core_cm4.h **** /* Memory mapping of Core Hardware */
1546:../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1547:../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1548:../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1549:../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1550:../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1551:../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1552:../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1553:../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1554:../CMSIS/core_cm4.h **** 
1555:../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1556:../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1557:../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1558:../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1559:../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1560:../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1561:../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1562:../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1563:../CMSIS/core_cm4.h **** 
1564:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1565:../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1566:../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1567:../CMSIS/core_cm4.h **** #endif
1568:../CMSIS/core_cm4.h **** 
1569:../CMSIS/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1570:../CMSIS/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1571:../CMSIS/core_cm4.h **** 
1572:../CMSIS/core_cm4.h **** /*@} */
1573:../CMSIS/core_cm4.h **** 
1574:../CMSIS/core_cm4.h **** 
1575:../CMSIS/core_cm4.h **** 
1576:../CMSIS/core_cm4.h **** /*******************************************************************************
1577:../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1578:../CMSIS/core_cm4.h ****   Core Function Interface contains:
1579:../CMSIS/core_cm4.h ****   - Core NVIC Functions
1580:../CMSIS/core_cm4.h ****   - Core SysTick Functions
1581:../CMSIS/core_cm4.h ****   - Core Debug Functions
1582:../CMSIS/core_cm4.h ****   - Core Register Access Functions
1583:../CMSIS/core_cm4.h ****  ******************************************************************************/
1584:../CMSIS/core_cm4.h **** /**
1585:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1586:../CMSIS/core_cm4.h **** */
1587:../CMSIS/core_cm4.h **** 
1588:../CMSIS/core_cm4.h **** 
1589:../CMSIS/core_cm4.h **** 
1590:../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1591:../CMSIS/core_cm4.h **** /**
1592:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1593:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1594:../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1595:../CMSIS/core_cm4.h ****   @{
1596:../CMSIS/core_cm4.h ****  */
1597:../CMSIS/core_cm4.h **** 
1598:../CMSIS/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1599:../CMSIS/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1600:../CMSIS/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1601:../CMSIS/core_cm4.h ****   #endif
1602:../CMSIS/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1603:../CMSIS/core_cm4.h **** #else
1604:../CMSIS/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1605:../CMSIS/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1606:../CMSIS/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1607:../CMSIS/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1608:../CMSIS/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1609:../CMSIS/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1610:../CMSIS/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1611:../CMSIS/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1612:../CMSIS/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1613:../CMSIS/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1614:../CMSIS/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1615:../CMSIS/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1616:../CMSIS/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1617:../CMSIS/core_cm4.h **** 
1618:../CMSIS/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1619:../CMSIS/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1620:../CMSIS/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1621:../CMSIS/core_cm4.h ****   #endif
1622:../CMSIS/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1623:../CMSIS/core_cm4.h **** #else
1624:../CMSIS/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1625:../CMSIS/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1626:../CMSIS/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1627:../CMSIS/core_cm4.h **** 
1628:../CMSIS/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1629:../CMSIS/core_cm4.h **** 
1630:../CMSIS/core_cm4.h **** 
1631:../CMSIS/core_cm4.h **** 
1632:../CMSIS/core_cm4.h **** /**
1633:../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1634:../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1635:../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1636:../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1637:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1638:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1639:../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1640:../CMSIS/core_cm4.h ****  */
1641:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1642:../CMSIS/core_cm4.h **** {
1643:../CMSIS/core_cm4.h ****   uint32_t reg_value;
1644:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1645:../CMSIS/core_cm4.h **** 
1646:../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1647:../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1648:../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1649:../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1650:../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1651:../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1652:../CMSIS/core_cm4.h **** }
1653:../CMSIS/core_cm4.h **** 
1654:../CMSIS/core_cm4.h **** 
1655:../CMSIS/core_cm4.h **** /**
1656:../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1657:../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1658:../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1659:../CMSIS/core_cm4.h ****  */
1660:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1661:../CMSIS/core_cm4.h **** {
1662:../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1663:../CMSIS/core_cm4.h **** }
1664:../CMSIS/core_cm4.h **** 
1665:../CMSIS/core_cm4.h **** 
1666:../CMSIS/core_cm4.h **** /**
1667:../CMSIS/core_cm4.h ****   \brief   Enable Interrupt
1668:../CMSIS/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1669:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1670:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1671:../CMSIS/core_cm4.h ****  */
1672:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1673:../CMSIS/core_cm4.h **** {
1674:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1675:../CMSIS/core_cm4.h ****   {
1676:../CMSIS/core_cm4.h ****     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
  58              		.loc 2 1676 0
  59 0014 084B     		ldr	r3, .L2+8
  60              	.LBE66:
  61              	.LBE65:
  62              	.LBE64:
  80:../source/main.c **** 	lptmr_config.prescalerClockSource = kLPTMR_PrescalerClock_1;
  63              		.loc 1 80 0
  64 0016 A271     		strb	r2, [r4, #6]
  65              	.LBB69:
  66              	.LBB68:
  67              	.LBB67:
  68              		.loc 2 1676 0
  69 0018 4FF08062 		mov	r2, #67108864
  70 001c 5A60     		str	r2, [r3, #4]
  71              	.LVL2:
  72              	.LBE67:
  73              	.LBE68:
  74              	.LBE69:
  75              		.loc 1 83 0
  76 001e 2146     		mov	r1, r4
  77 0020 2846     		mov	r0, r5
  78 0022 FFF7FEFF 		bl	LPTMR_Init
  79              	.LVL3:
  80              	.LBB70:
  81              	.LBB71:
  82              		.file 3 "../drivers/fsl_lptmr.h"
   1:../drivers/fsl_lptmr.h **** /*
   2:../drivers/fsl_lptmr.h ****  * The Clear BSD License
   3:../drivers/fsl_lptmr.h ****  * Copyright (c) 2016, Freescale Semiconductor, Inc.
   4:../drivers/fsl_lptmr.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_lptmr.h ****  * All rights reserved.
   6:../drivers/fsl_lptmr.h ****  *
   7:../drivers/fsl_lptmr.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_lptmr.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_lptmr.h ****  * that the following conditions are met:
  10:../drivers/fsl_lptmr.h ****  *
  11:../drivers/fsl_lptmr.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_lptmr.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_lptmr.h ****  *
  14:../drivers/fsl_lptmr.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_lptmr.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_lptmr.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_lptmr.h ****  *
  18:../drivers/fsl_lptmr.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_lptmr.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_lptmr.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_lptmr.h ****  *
  22:../drivers/fsl_lptmr.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_lptmr.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_lptmr.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_lptmr.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_lptmr.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_lptmr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_lptmr.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_lptmr.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_lptmr.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_lptmr.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_lptmr.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_lptmr.h ****  */
  34:../drivers/fsl_lptmr.h **** #ifndef _FSL_LPTMR_H_
  35:../drivers/fsl_lptmr.h **** #define _FSL_LPTMR_H_
  36:../drivers/fsl_lptmr.h **** 
  37:../drivers/fsl_lptmr.h **** #include "fsl_common.h"
  38:../drivers/fsl_lptmr.h **** 
  39:../drivers/fsl_lptmr.h **** /*!
  40:../drivers/fsl_lptmr.h ****  * @addtogroup lptmr
  41:../drivers/fsl_lptmr.h ****  * @{
  42:../drivers/fsl_lptmr.h ****  */
  43:../drivers/fsl_lptmr.h **** 
  44:../drivers/fsl_lptmr.h **** /*******************************************************************************
  45:../drivers/fsl_lptmr.h ****  * Definitions
  46:../drivers/fsl_lptmr.h ****  ******************************************************************************/
  47:../drivers/fsl_lptmr.h **** 
  48:../drivers/fsl_lptmr.h **** /*! @name Driver version */
  49:../drivers/fsl_lptmr.h **** /*@{*/
  50:../drivers/fsl_lptmr.h **** #define FSL_LPTMR_DRIVER_VERSION (MAKE_VERSION(2, 0, 1)) /*!< Version 2.0.1 */
  51:../drivers/fsl_lptmr.h **** /*@}*/
  52:../drivers/fsl_lptmr.h **** 
  53:../drivers/fsl_lptmr.h **** /*! @brief LPTMR pin selection used in pulse counter mode.*/
  54:../drivers/fsl_lptmr.h **** typedef enum _lptmr_pin_select
  55:../drivers/fsl_lptmr.h **** {
  56:../drivers/fsl_lptmr.h ****     kLPTMR_PinSelectInput_0 = 0x0U, /*!< Pulse counter input 0 is selected */
  57:../drivers/fsl_lptmr.h ****     kLPTMR_PinSelectInput_1 = 0x1U, /*!< Pulse counter input 1 is selected */
  58:../drivers/fsl_lptmr.h ****     kLPTMR_PinSelectInput_2 = 0x2U, /*!< Pulse counter input 2 is selected */
  59:../drivers/fsl_lptmr.h ****     kLPTMR_PinSelectInput_3 = 0x3U  /*!< Pulse counter input 3 is selected */
  60:../drivers/fsl_lptmr.h **** } lptmr_pin_select_t;
  61:../drivers/fsl_lptmr.h **** 
  62:../drivers/fsl_lptmr.h **** /*! @brief LPTMR pin polarity used in pulse counter mode.*/
  63:../drivers/fsl_lptmr.h **** typedef enum _lptmr_pin_polarity
  64:../drivers/fsl_lptmr.h **** {
  65:../drivers/fsl_lptmr.h ****     kLPTMR_PinPolarityActiveHigh = 0x0U, /*!< Pulse Counter input source is active-high */
  66:../drivers/fsl_lptmr.h ****     kLPTMR_PinPolarityActiveLow = 0x1U   /*!< Pulse Counter input source is active-low */
  67:../drivers/fsl_lptmr.h **** } lptmr_pin_polarity_t;
  68:../drivers/fsl_lptmr.h **** 
  69:../drivers/fsl_lptmr.h **** /*! @brief LPTMR timer mode selection.*/
  70:../drivers/fsl_lptmr.h **** typedef enum _lptmr_timer_mode
  71:../drivers/fsl_lptmr.h **** {
  72:../drivers/fsl_lptmr.h ****     kLPTMR_TimerModeTimeCounter = 0x0U, /*!< Time Counter mode */
  73:../drivers/fsl_lptmr.h ****     kLPTMR_TimerModePulseCounter = 0x1U /*!< Pulse Counter mode */
  74:../drivers/fsl_lptmr.h **** } lptmr_timer_mode_t;
  75:../drivers/fsl_lptmr.h **** 
  76:../drivers/fsl_lptmr.h **** /*! @brief LPTMR prescaler/glitch filter values*/
  77:../drivers/fsl_lptmr.h **** typedef enum _lptmr_prescaler_glitch_value
  78:../drivers/fsl_lptmr.h **** {
  79:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_0 = 0x0U,  /*!< Prescaler divide 2, glitch filter does not support this 
  80:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_1 = 0x1U,  /*!< Prescaler divide 4, glitch filter 2 */
  81:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_2 = 0x2U,  /*!< Prescaler divide 8, glitch filter 4 */
  82:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_3 = 0x3U,  /*!< Prescaler divide 16, glitch filter 8 */
  83:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_4 = 0x4U,  /*!< Prescaler divide 32, glitch filter 16 */
  84:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_5 = 0x5U,  /*!< Prescaler divide 64, glitch filter 32 */
  85:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_6 = 0x6U,  /*!< Prescaler divide 128, glitch filter 64 */
  86:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_7 = 0x7U,  /*!< Prescaler divide 256, glitch filter 128 */
  87:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_8 = 0x8U,  /*!< Prescaler divide 512, glitch filter 256 */
  88:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_9 = 0x9U,  /*!< Prescaler divide 1024, glitch filter 512*/
  89:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_10 = 0xAU, /*!< Prescaler divide 2048 glitch filter 1024 */
  90:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_11 = 0xBU, /*!< Prescaler divide 4096, glitch filter 2048 */
  91:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_12 = 0xCU, /*!< Prescaler divide 8192, glitch filter 4096 */
  92:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_13 = 0xDU, /*!< Prescaler divide 16384, glitch filter 8192 */
  93:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_14 = 0xEU, /*!< Prescaler divide 32768, glitch filter 16384 */
  94:../drivers/fsl_lptmr.h ****     kLPTMR_Prescale_Glitch_15 = 0xFU  /*!< Prescaler divide 65536, glitch filter 32768 */
  95:../drivers/fsl_lptmr.h **** } lptmr_prescaler_glitch_value_t;
  96:../drivers/fsl_lptmr.h **** 
  97:../drivers/fsl_lptmr.h **** /*!
  98:../drivers/fsl_lptmr.h ****  * @brief LPTMR prescaler/glitch filter clock select.
  99:../drivers/fsl_lptmr.h ****  * @note Clock connections are SoC-specific
 100:../drivers/fsl_lptmr.h ****  */
 101:../drivers/fsl_lptmr.h **** typedef enum _lptmr_prescaler_clock_select
 102:../drivers/fsl_lptmr.h **** {
 103:../drivers/fsl_lptmr.h ****     kLPTMR_PrescalerClock_0 = 0x0U, /*!< Prescaler/glitch filter clock 0 selected. */
 104:../drivers/fsl_lptmr.h ****     kLPTMR_PrescalerClock_1 = 0x1U, /*!< Prescaler/glitch filter clock 1 selected. */
 105:../drivers/fsl_lptmr.h ****     kLPTMR_PrescalerClock_2 = 0x2U, /*!< Prescaler/glitch filter clock 2 selected. */
 106:../drivers/fsl_lptmr.h ****     kLPTMR_PrescalerClock_3 = 0x3U, /*!< Prescaler/glitch filter clock 3 selected. */
 107:../drivers/fsl_lptmr.h **** } lptmr_prescaler_clock_select_t;
 108:../drivers/fsl_lptmr.h **** 
 109:../drivers/fsl_lptmr.h **** /*! @brief List of the LPTMR interrupts */
 110:../drivers/fsl_lptmr.h **** typedef enum _lptmr_interrupt_enable
 111:../drivers/fsl_lptmr.h **** {
 112:../drivers/fsl_lptmr.h ****     kLPTMR_TimerInterruptEnable = LPTMR_CSR_TIE_MASK, /*!< Timer interrupt enable */
 113:../drivers/fsl_lptmr.h **** } lptmr_interrupt_enable_t;
 114:../drivers/fsl_lptmr.h **** 
 115:../drivers/fsl_lptmr.h **** /*! @brief List of the LPTMR status flags */
 116:../drivers/fsl_lptmr.h **** typedef enum _lptmr_status_flags
 117:../drivers/fsl_lptmr.h **** {
 118:../drivers/fsl_lptmr.h ****     kLPTMR_TimerCompareFlag = LPTMR_CSR_TCF_MASK, /*!< Timer compare flag */
 119:../drivers/fsl_lptmr.h **** } lptmr_status_flags_t;
 120:../drivers/fsl_lptmr.h **** 
 121:../drivers/fsl_lptmr.h **** /*!
 122:../drivers/fsl_lptmr.h ****  * @brief LPTMR config structure
 123:../drivers/fsl_lptmr.h ****  *
 124:../drivers/fsl_lptmr.h ****  * This structure holds the configuration settings for the LPTMR peripheral. To initialize this
 125:../drivers/fsl_lptmr.h ****  * structure to reasonable defaults, call the LPTMR_GetDefaultConfig() function and pass a
 126:../drivers/fsl_lptmr.h ****  * pointer to your configuration structure instance.
 127:../drivers/fsl_lptmr.h ****  *
 128:../drivers/fsl_lptmr.h ****  * The configuration struct can be made constant so it resides in flash.
 129:../drivers/fsl_lptmr.h ****  */
 130:../drivers/fsl_lptmr.h **** typedef struct _lptmr_config
 131:../drivers/fsl_lptmr.h **** {
 132:../drivers/fsl_lptmr.h ****     lptmr_timer_mode_t timerMode;     /*!< Time counter mode or pulse counter mode */
 133:../drivers/fsl_lptmr.h ****     lptmr_pin_select_t pinSelect;     /*!< LPTMR pulse input pin select; used only in pulse counter
 134:../drivers/fsl_lptmr.h ****     lptmr_pin_polarity_t pinPolarity; /*!< LPTMR pulse input pin polarity; used only in pulse count
 135:../drivers/fsl_lptmr.h ****     bool enableFreeRunning;           /*!< True: enable free running, counter is reset on overflow
 136:../drivers/fsl_lptmr.h ****                                            False: counter is reset when the compare flag is set */
 137:../drivers/fsl_lptmr.h ****     bool bypassPrescaler;             /*!< True: bypass prescaler; false: use clock from prescaler 
 138:../drivers/fsl_lptmr.h ****     lptmr_prescaler_clock_select_t prescalerClockSource; /*!< LPTMR clock source */
 139:../drivers/fsl_lptmr.h ****     lptmr_prescaler_glitch_value_t value;                /*!< Prescaler or glitch filter value */
 140:../drivers/fsl_lptmr.h **** } lptmr_config_t;
 141:../drivers/fsl_lptmr.h **** 
 142:../drivers/fsl_lptmr.h **** /*******************************************************************************
 143:../drivers/fsl_lptmr.h ****  * API
 144:../drivers/fsl_lptmr.h ****  ******************************************************************************/
 145:../drivers/fsl_lptmr.h **** 
 146:../drivers/fsl_lptmr.h **** #if defined(__cplusplus)
 147:../drivers/fsl_lptmr.h **** extern "C" {
 148:../drivers/fsl_lptmr.h **** #endif
 149:../drivers/fsl_lptmr.h **** 
 150:../drivers/fsl_lptmr.h **** /*!
 151:../drivers/fsl_lptmr.h ****  * @name Initialization and deinitialization
 152:../drivers/fsl_lptmr.h ****  * @{
 153:../drivers/fsl_lptmr.h ****  */
 154:../drivers/fsl_lptmr.h **** 
 155:../drivers/fsl_lptmr.h **** /*!
 156:../drivers/fsl_lptmr.h ****  * @brief Ungates the LPTMR clock and configures the peripheral for a basic operation.
 157:../drivers/fsl_lptmr.h ****  *
 158:../drivers/fsl_lptmr.h ****  * @note This API should be called at the beginning of the application using the LPTMR driver.
 159:../drivers/fsl_lptmr.h ****  *
 160:../drivers/fsl_lptmr.h ****  * @param base   LPTMR peripheral base address
 161:../drivers/fsl_lptmr.h ****  * @param config A pointer to the LPTMR configuration structure.
 162:../drivers/fsl_lptmr.h ****  */
 163:../drivers/fsl_lptmr.h **** void LPTMR_Init(LPTMR_Type *base, const lptmr_config_t *config);
 164:../drivers/fsl_lptmr.h **** 
 165:../drivers/fsl_lptmr.h **** /*!
 166:../drivers/fsl_lptmr.h ****  * @brief Gates the LPTMR clock.
 167:../drivers/fsl_lptmr.h ****  *
 168:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 169:../drivers/fsl_lptmr.h ****  */
 170:../drivers/fsl_lptmr.h **** void LPTMR_Deinit(LPTMR_Type *base);
 171:../drivers/fsl_lptmr.h **** 
 172:../drivers/fsl_lptmr.h **** /*!
 173:../drivers/fsl_lptmr.h ****  * @brief Fills in the LPTMR configuration structure with default settings.
 174:../drivers/fsl_lptmr.h ****  *
 175:../drivers/fsl_lptmr.h ****  * The default values are as follows.
 176:../drivers/fsl_lptmr.h ****  * @code
 177:../drivers/fsl_lptmr.h ****  *    config->timerMode = kLPTMR_TimerModeTimeCounter;
 178:../drivers/fsl_lptmr.h ****  *    config->pinSelect = kLPTMR_PinSelectInput_0;
 179:../drivers/fsl_lptmr.h ****  *    config->pinPolarity = kLPTMR_PinPolarityActiveHigh;
 180:../drivers/fsl_lptmr.h ****  *    config->enableFreeRunning = false;
 181:../drivers/fsl_lptmr.h ****  *    config->bypassPrescaler = true;
 182:../drivers/fsl_lptmr.h ****  *    config->prescalerClockSource = kLPTMR_PrescalerClock_1;
 183:../drivers/fsl_lptmr.h ****  *    config->value = kLPTMR_Prescale_Glitch_0;
 184:../drivers/fsl_lptmr.h ****  * @endcode
 185:../drivers/fsl_lptmr.h ****  * @param config A pointer to the LPTMR configuration structure.
 186:../drivers/fsl_lptmr.h ****  */
 187:../drivers/fsl_lptmr.h **** void LPTMR_GetDefaultConfig(lptmr_config_t *config);
 188:../drivers/fsl_lptmr.h **** 
 189:../drivers/fsl_lptmr.h **** /*! @}*/
 190:../drivers/fsl_lptmr.h **** 
 191:../drivers/fsl_lptmr.h **** /*!
 192:../drivers/fsl_lptmr.h ****  * @name Interrupt Interface
 193:../drivers/fsl_lptmr.h ****  * @{
 194:../drivers/fsl_lptmr.h ****  */
 195:../drivers/fsl_lptmr.h **** 
 196:../drivers/fsl_lptmr.h **** /*!
 197:../drivers/fsl_lptmr.h ****  * @brief Enables the selected LPTMR interrupts.
 198:../drivers/fsl_lptmr.h ****  *
 199:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 200:../drivers/fsl_lptmr.h ****  * @param mask The interrupts to enable. This is a logical OR of members of the
 201:../drivers/fsl_lptmr.h ****  *             enumeration ::lptmr_interrupt_enable_t
 202:../drivers/fsl_lptmr.h ****  */
 203:../drivers/fsl_lptmr.h **** static inline void LPTMR_EnableInterrupts(LPTMR_Type *base, uint32_t mask)
 204:../drivers/fsl_lptmr.h **** {
 205:../drivers/fsl_lptmr.h ****     uint32_t reg = base->CSR;
 206:../drivers/fsl_lptmr.h **** 
 207:../drivers/fsl_lptmr.h ****     /* Clear the TCF bit so that we don't clear this w1c bit when writing back */
 208:../drivers/fsl_lptmr.h ****     reg &= ~(LPTMR_CSR_TCF_MASK);
 209:../drivers/fsl_lptmr.h ****     reg |= mask;
 210:../drivers/fsl_lptmr.h ****     base->CSR = reg;
 211:../drivers/fsl_lptmr.h **** }
 212:../drivers/fsl_lptmr.h **** 
 213:../drivers/fsl_lptmr.h **** /*!
 214:../drivers/fsl_lptmr.h ****  * @brief Disables the selected LPTMR interrupts.
 215:../drivers/fsl_lptmr.h ****  *
 216:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 217:../drivers/fsl_lptmr.h ****  * @param mask The interrupts to disable. This is a logical OR of members of the
 218:../drivers/fsl_lptmr.h ****  *             enumeration ::lptmr_interrupt_enable_t.
 219:../drivers/fsl_lptmr.h ****  */
 220:../drivers/fsl_lptmr.h **** static inline void LPTMR_DisableInterrupts(LPTMR_Type *base, uint32_t mask)
 221:../drivers/fsl_lptmr.h **** {
 222:../drivers/fsl_lptmr.h ****     uint32_t reg = base->CSR;
 223:../drivers/fsl_lptmr.h **** 
 224:../drivers/fsl_lptmr.h ****     /* Clear the TCF bit so that we don't clear this w1c bit when writing back */
 225:../drivers/fsl_lptmr.h ****     reg &= ~(LPTMR_CSR_TCF_MASK);
 226:../drivers/fsl_lptmr.h ****     reg &= ~mask;
 227:../drivers/fsl_lptmr.h ****     base->CSR = reg;
 228:../drivers/fsl_lptmr.h **** }
 229:../drivers/fsl_lptmr.h **** 
 230:../drivers/fsl_lptmr.h **** /*!
 231:../drivers/fsl_lptmr.h ****  * @brief Gets the enabled LPTMR interrupts.
 232:../drivers/fsl_lptmr.h ****  *
 233:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 234:../drivers/fsl_lptmr.h ****  *
 235:../drivers/fsl_lptmr.h ****  * @return The enabled interrupts. This is the logical OR of members of the
 236:../drivers/fsl_lptmr.h ****  *         enumeration ::lptmr_interrupt_enable_t
 237:../drivers/fsl_lptmr.h ****  */
 238:../drivers/fsl_lptmr.h **** static inline uint32_t LPTMR_GetEnabledInterrupts(LPTMR_Type *base)
 239:../drivers/fsl_lptmr.h **** {
 240:../drivers/fsl_lptmr.h ****     return (base->CSR & LPTMR_CSR_TIE_MASK);
 241:../drivers/fsl_lptmr.h **** }
 242:../drivers/fsl_lptmr.h **** 
 243:../drivers/fsl_lptmr.h **** /*! @}*/
 244:../drivers/fsl_lptmr.h **** 
 245:../drivers/fsl_lptmr.h **** #if defined(FSL_FEATURE_LPTMR_HAS_CSR_TDRE) && (FSL_FEATURE_LPTMR_HAS_CSR_TDRE)
 246:../drivers/fsl_lptmr.h **** /*!
 247:../drivers/fsl_lptmr.h ****  * @brief Enable or disable timer DMA request
 248:../drivers/fsl_lptmr.h ****  *
 249:../drivers/fsl_lptmr.h ****  * @param base base LPTMR peripheral base address
 250:../drivers/fsl_lptmr.h ****  * @param enable Switcher of timer DMA feature. "true" means to enable, "false" means to disable.
 251:../drivers/fsl_lptmr.h ****  */
 252:../drivers/fsl_lptmr.h **** static inline void LPTMR_EnableTimerDMA(LPTMR_Type *base, bool enable)
 253:../drivers/fsl_lptmr.h **** {
 254:../drivers/fsl_lptmr.h ****     if(enable)
 255:../drivers/fsl_lptmr.h ****     {
 256:../drivers/fsl_lptmr.h ****         base->CSR |= LPTMR_CSR_TDRE_MASK;
 257:../drivers/fsl_lptmr.h ****     }
 258:../drivers/fsl_lptmr.h ****     else
 259:../drivers/fsl_lptmr.h ****     {
 260:../drivers/fsl_lptmr.h ****         base->CSR &= ~(LPTMR_CSR_TDRE_MASK);
 261:../drivers/fsl_lptmr.h ****     }
 262:../drivers/fsl_lptmr.h **** }
 263:../drivers/fsl_lptmr.h **** #endif /* FSL_FEATURE_LPTMR_HAS_CSR_TDRE */
 264:../drivers/fsl_lptmr.h **** 
 265:../drivers/fsl_lptmr.h **** /*!
 266:../drivers/fsl_lptmr.h ****  * @name Status Interface
 267:../drivers/fsl_lptmr.h ****  * @{
 268:../drivers/fsl_lptmr.h ****  */
 269:../drivers/fsl_lptmr.h **** 
 270:../drivers/fsl_lptmr.h **** /*!
 271:../drivers/fsl_lptmr.h ****  * @brief Gets the LPTMR status flags.
 272:../drivers/fsl_lptmr.h ****  *
 273:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 274:../drivers/fsl_lptmr.h ****  *
 275:../drivers/fsl_lptmr.h ****  * @return The status flags. This is the logical OR of members of the
 276:../drivers/fsl_lptmr.h ****  *         enumeration ::lptmr_status_flags_t
 277:../drivers/fsl_lptmr.h ****  */
 278:../drivers/fsl_lptmr.h **** static inline uint32_t LPTMR_GetStatusFlags(LPTMR_Type *base)
 279:../drivers/fsl_lptmr.h **** {
 280:../drivers/fsl_lptmr.h ****     return (base->CSR & LPTMR_CSR_TCF_MASK);
 281:../drivers/fsl_lptmr.h **** }
 282:../drivers/fsl_lptmr.h **** 
 283:../drivers/fsl_lptmr.h **** /*!
 284:../drivers/fsl_lptmr.h ****  * @brief  Clears the LPTMR status flags.
 285:../drivers/fsl_lptmr.h ****  *
 286:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 287:../drivers/fsl_lptmr.h ****  * @param mask The status flags to clear. This is a logical OR of members of the
 288:../drivers/fsl_lptmr.h ****  *             enumeration ::lptmr_status_flags_t.
 289:../drivers/fsl_lptmr.h ****  */
 290:../drivers/fsl_lptmr.h **** static inline void LPTMR_ClearStatusFlags(LPTMR_Type *base, uint32_t mask)
 291:../drivers/fsl_lptmr.h **** {
 292:../drivers/fsl_lptmr.h ****     base->CSR |= mask;
 293:../drivers/fsl_lptmr.h **** }
 294:../drivers/fsl_lptmr.h **** 
 295:../drivers/fsl_lptmr.h **** /*! @}*/
 296:../drivers/fsl_lptmr.h **** 
 297:../drivers/fsl_lptmr.h **** /*!
 298:../drivers/fsl_lptmr.h ****  * @name Read and write the timer period
 299:../drivers/fsl_lptmr.h ****  * @{
 300:../drivers/fsl_lptmr.h ****  */
 301:../drivers/fsl_lptmr.h **** 
 302:../drivers/fsl_lptmr.h **** /*!
 303:../drivers/fsl_lptmr.h ****  * @brief Sets the timer period in units of count.
 304:../drivers/fsl_lptmr.h ****  *
 305:../drivers/fsl_lptmr.h ****  * Timers counts from 0 until it equals the count value set here. The count value is written to
 306:../drivers/fsl_lptmr.h ****  * the CMR register.
 307:../drivers/fsl_lptmr.h ****  *
 308:../drivers/fsl_lptmr.h ****  * @note
 309:../drivers/fsl_lptmr.h ****  * 1. The TCF flag is set with the CNR equals the count provided here and then increments.
 310:../drivers/fsl_lptmr.h ****  * 2. Call the utility macros provided in the fsl_common.h to convert to ticks.
 311:../drivers/fsl_lptmr.h ****  *
 312:../drivers/fsl_lptmr.h ****  * @param base  LPTMR peripheral base address
 313:../drivers/fsl_lptmr.h ****  * @param ticks A timer period in units of ticks, which should be equal or greater than 1.
 314:../drivers/fsl_lptmr.h ****  */
 315:../drivers/fsl_lptmr.h **** static inline void LPTMR_SetTimerPeriod(LPTMR_Type *base, uint32_t ticks)
 316:../drivers/fsl_lptmr.h **** {
 317:../drivers/fsl_lptmr.h ****     assert(ticks > 0);
 318:../drivers/fsl_lptmr.h ****     base->CMR = ticks - 1;
  83              		.loc 3 318 0
  84 0026 41F65733 		movw	r3, #6999
  85 002a AB60     		str	r3, [r5, #8]
  86              	.LVL4:
  87              	.LBE71:
  88              	.LBE70:
  84:../source/main.c **** 	LPTMR_SetTimerPeriod(LPTMR0, 7000);  // 3000 for 20hz data rat
  85:../source/main.c **** }
  89              		.loc 1 85 0
  90 002c 38BD     		pop	{r3, r4, r5, pc}
  91              	.L3:
  92 002e 00BF     		.align	2
  93              	.L2:
  94 0030 00000000 		.word	lptmr_config
  95 0034 00000440 		.word	1074003968
  96 0038 00E100E0 		.word	-536813312
  97              		.cfi_endproc
  98              	.LFE221:
 100              		.section	.text.initUART,"ax",%progbits
 101              		.align	1
 102              		.global	initUART
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu fpv4-sp-d16
 108              	initUART:
 109              	.LFB222:
  86:../source/main.c **** 
  87:../source/main.c **** /*
  88:../source/main.c ****  *
  89:../source/main.c ****  * Init all needed UART buses. UART3 for NB-IoT, UART0 for PC, UART2 for GPS
  90:../source/main.c ****  */
  91:../source/main.c **** 
  92:../source/main.c **** void initUART() {
 110              		.loc 1 92 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 115              		.cfi_def_cfa_offset 24
 116              		.cfi_offset 3, -24
 117              		.cfi_offset 4, -20
 118              		.cfi_offset 5, -16
 119              		.cfi_offset 6, -12
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
  93:../source/main.c **** 
  94:../source/main.c **** 	uint32_t uartClkSrcFreq = BOARD_DEBUG_UART_CLK_FREQ; //get MCU clock frequency for setting correct
 122              		.loc 1 94 0
 123 0002 FFF7FEFF 		bl	CLOCK_GetCoreSysClkFreq
 124              	.LVL5:
  95:../source/main.c **** 
  96:../source/main.c **** 	UART_GetDefaultConfig(&uart_config);
 125              		.loc 1 96 0
 126 0006 174C     		ldr	r4, .L5
  97:../source/main.c **** 	uart_config.baudRate_Bps = 9600;
  98:../source/main.c **** 	uart_config.enableTx = true;
  99:../source/main.c **** 	uart_config.enableRx = true;
 100:../source/main.c **** 
 101:../source/main.c **** 	UART_Init(UART3, &uart_config, uartClkSrcFreq); //Init UART3 for NBiot
 127              		.loc 1 101 0
 128 0008 174E     		ldr	r6, .L5+4
 102:../source/main.c **** 
 103:../source/main.c **** 	UART_Init(UART2, &uart_config, uartClkSrcFreq); //UART2 for GPS with same settings!
 129              		.loc 1 103 0
 130 000a 184D     		ldr	r5, .L5+8
  94:../source/main.c **** 
 131              		.loc 1 94 0
 132 000c 0746     		mov	r7, r0
 133              	.LVL6:
  96:../source/main.c **** 	uart_config.baudRate_Bps = 9600;
 134              		.loc 1 96 0
 135 000e 2046     		mov	r0, r4
 136              	.LVL7:
 137 0010 FFF7FEFF 		bl	UART_GetDefaultConfig
 138              	.LVL8:
  97:../source/main.c **** 	uart_config.enableTx = true;
 139              		.loc 1 97 0
 140 0014 4FF41653 		mov	r3, #9600
 141 0018 2360     		str	r3, [r4]
 101:../source/main.c **** 
 142              		.loc 1 101 0
 143 001a 2146     		mov	r1, r4
  98:../source/main.c **** 	uart_config.enableRx = true;
 144              		.loc 1 98 0
 145 001c 0123     		movs	r3, #1
 101:../source/main.c **** 
 146              		.loc 1 101 0
 147 001e 3A46     		mov	r2, r7
 148 0020 3046     		mov	r0, r6
  98:../source/main.c **** 	uart_config.enableRx = true;
 149              		.loc 1 98 0
 150 0022 E372     		strb	r3, [r4, #11]
  99:../source/main.c **** 
 151              		.loc 1 99 0
 152 0024 2373     		strb	r3, [r4, #12]
 101:../source/main.c **** 
 153              		.loc 1 101 0
 154 0026 FFF7FEFF 		bl	UART_Init
 155              	.LVL9:
 156              		.loc 1 103 0
 157 002a 3A46     		mov	r2, r7
 158 002c 2146     		mov	r1, r4
 159 002e 2846     		mov	r0, r5
 160 0030 FFF7FEFF 		bl	UART_Init
 161              	.LVL10:
 162              	.LBB84:
 163              	.LBB85:
 164              	.LBB86:
 165              		.loc 2 1676 0
 166 0034 0E4C     		ldr	r4, .L5+12
 167              	.LBE86:
 168              	.LBE85:
 169              	.LBE84:
 104:../source/main.c **** 
 105:../source/main.c **** 	UART_EnableInterrupts(UART3, kUART_RxDataRegFullInterruptEnable); //enable UART3 receive interrupt
 170              		.loc 1 105 0
 171 0036 4FF40051 		mov	r1, #8192
 172 003a 3046     		mov	r0, r6
 173 003c FFF7FEFF 		bl	UART_EnableInterrupts
 174              	.LVL11:
 175              	.LBB89:
 176              	.LBB88:
 177              	.LBB87:
 178              		.loc 2 1676 0
 179 0040 2023     		movs	r3, #32
 180 0042 6360     		str	r3, [r4, #4]
 181              	.LVL12:
 182              	.LBE87:
 183              	.LBE88:
 184              	.LBE89:
 106:../source/main.c **** 
 107:../source/main.c **** 	EnableIRQ(UART3_RX_TX_IRQn);
 108:../source/main.c **** 
 109:../source/main.c **** 	UART_EnableInterrupts(UART2, kUART_RxDataRegFullInterruptEnable); //enable UART3 receive interrupt
 185              		.loc 1 109 0
 186 0044 4FF40051 		mov	r1, #8192
 187 0048 2846     		mov	r0, r5
 188 004a FFF7FEFF 		bl	UART_EnableInterrupts
 189              	.LVL13:
 190              	.LBB90:
 191              	.LBB91:
 192              	.LBB92:
 193              		.loc 2 1676 0
 194 004e 0823     		movs	r3, #8
 195 0050 6360     		str	r3, [r4, #4]
 196              	.LVL14:
 197              	.LBE92:
 198              	.LBE91:
 199              	.LBE90:
 110:../source/main.c **** 	EnableIRQ(UART2_RX_TX_IRQn);
 111:../source/main.c **** 
 112:../source/main.c **** 	UART_EnableInterrupts(UART0, kUART_RxDataRegFullInterruptEnable); //enable UART0 receive interrupt
 200              		.loc 1 112 0
 201 0052 4FF40051 		mov	r1, #8192
 202 0056 0748     		ldr	r0, .L5+16
 203 0058 FFF7FEFF 		bl	UART_EnableInterrupts
 204              	.LVL15:
 205              	.LBB93:
 206              	.LBB94:
 207              	.LBB95:
 208              		.loc 2 1676 0
 209 005c 4FF00043 		mov	r3, #-2147483648
 210 0060 2360     		str	r3, [r4]
 211              	.LVL16:
 212              	.LBE95:
 213              	.LBE94:
 214              	.LBE93:
 113:../source/main.c **** 	EnableIRQ(UART0_RX_TX_IRQn);
 114:../source/main.c **** 
 115:../source/main.c **** }
 215              		.loc 1 115 0
 216 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 217              	.LVL17:
 218              	.L6:
 219              		.align	2
 220              	.L5:
 221 0064 00000000 		.word	uart_config
 222 0068 00D00640 		.word	1074188288
 223 006c 00C00640 		.word	1074184192
 224 0070 00E100E0 		.word	-536813312
 225 0074 00A00640 		.word	1074176000
 226              		.cfi_endproc
 227              	.LFE222:
 229              		.section	.text.UART3_send,"ax",%progbits
 230              		.align	1
 231              		.global	UART3_send
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu fpv4-sp-d16
 237              	UART3_send:
 238              	.LFB223:
 116:../source/main.c **** 
 117:../source/main.c **** /*
 118:../source/main.c ****  * Send data to NBiot with UART3
 119:../source/main.c ****  * String to be sent is pointed by *data
 120:../source/main.c ****  *
 121:../source/main.c ****  */
 122:../source/main.c **** 
 123:../source/main.c **** void UART3_send(char *data) {
 239              		.loc 1 123 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244              	.LVL18:
 124:../source/main.c **** 
 125:../source/main.c **** 	char c = *data++; //assign c a character from the string and post-increment string pointer
 245              		.loc 1 125 0
 246 0000 90F90030 		ldrsb	r3, [r0]
 126:../source/main.c **** 
 127:../source/main.c **** 	while (c) { //loop until c is zero which means string has ended and no more chars has to be sent
 128:../source/main.c **** 
 129:../source/main.c **** 		while (!((UART3->S1) & 0x80)) {
 247              		.loc 1 129 0
 248 0004 0549     		ldr	r1, .L12
 125:../source/main.c **** 
 249              		.loc 1 125 0
 250 0006 421C     		adds	r2, r0, #1
 251              	.LVL19:
 252              	.L8:
 127:../source/main.c **** 
 253              		.loc 1 127 0
 254 0008 03B9     		cbnz	r3, .L9
 130:../source/main.c **** 		} //wait until UART3 Transmission Complete flag rises, so we can send new char
 131:../source/main.c **** 		UART3->D = c; //write new character to transmit buffer
 132:../source/main.c **** 		c = *data++; //assign next character to c and post-increment string pointer
 133:../source/main.c **** 	}
 134:../source/main.c **** }
 255              		.loc 1 134 0
 256 000a 7047     		bx	lr
 257              	.L9:
 129:../source/main.c **** 		} //wait until UART3 Transmission Complete flag rises, so we can send new char
 258              		.loc 1 129 0 discriminator 1
 259 000c 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 260 000e 0006     		lsls	r0, r0, #24
 261 0010 FCD5     		bpl	.L9
 131:../source/main.c **** 		c = *data++; //assign next character to c and post-increment string pointer
 262              		.loc 1 131 0
 263 0012 DBB2     		uxtb	r3, r3
 264 0014 CB71     		strb	r3, [r1, #7]
 132:../source/main.c **** 	}
 265              		.loc 1 132 0
 266 0016 12F9013B 		ldrsb	r3, [r2], #1
 267              	.LVL20:
 268 001a F5E7     		b	.L8
 269              	.L13:
 270              		.align	2
 271              	.L12:
 272 001c 00D00640 		.word	1074188288
 273              		.cfi_endproc
 274              	.LFE223:
 276              		.section	.text.UART3_receive,"ax",%progbits
 277              		.align	1
 278              		.global	UART3_receive
 279              		.syntax unified
 280              		.thumb
 281              		.thumb_func
 282              		.fpu fpv4-sp-d16
 284              	UART3_receive:
 285              	.LFB224:
 135:../source/main.c **** 
 136:../source/main.c **** uint8_t UART3_receive() {
 286              		.loc 1 136 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290 0000 10B5     		push	{r4, lr}
 291              		.cfi_def_cfa_offset 8
 292              		.cfi_offset 4, -8
 293              		.cfi_offset 14, -4
 137:../source/main.c **** 
 138:../source/main.c **** 	if (UART3_strReady) {
 294              		.loc 1 138 0
 295 0002 084B     		ldr	r3, .L17
 296 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 297 0006 0024     		movs	r4, #0
 298 0008 02F0FF00 		and	r0, r2, #255
 299 000c 4AB1     		cbz	r2, .L15
 139:../source/main.c **** 		//printf("Received raw buffer: %s\r\n", UART3_recBuf);
 140:../source/main.c **** 		UART3_strReady = 0;
 141:../source/main.c **** 		memset(UART3_recBuf, 0, strlen(UART3_recBuf));
 300              		.loc 1 141 0
 301 000e 0648     		ldr	r0, .L17+4
 140:../source/main.c **** 		memset(UART3_recBuf, 0, strlen(UART3_recBuf));
 302              		.loc 1 140 0
 303 0010 1C70     		strb	r4, [r3]
 304              		.loc 1 141 0
 305 0012 FFF7FEFF 		bl	strlen
 306              	.LVL21:
 307 0016 2146     		mov	r1, r4
 308 0018 0246     		mov	r2, r0
 309 001a 0348     		ldr	r0, .L17+4
 310 001c FFF7FEFF 		bl	memset
 311              	.LVL22:
 142:../source/main.c **** 
 143:../source/main.c **** 		return 1;
 312              		.loc 1 143 0
 313 0020 0120     		movs	r0, #1
 314              	.L15:
 144:../source/main.c **** 	}
 145:../source/main.c **** 	return 0;
 146:../source/main.c **** }
 315              		.loc 1 146 0
 316 0022 10BD     		pop	{r4, pc}
 317              	.L18:
 318              		.align	2
 319              	.L17:
 320 0024 00000000 		.word	.LANCHOR0
 321 0028 00000000 		.word	UART3_recBuf
 322              		.cfi_endproc
 323              	.LFE224:
 325              		.section	.text.UART2_send,"ax",%progbits
 326              		.align	1
 327              		.global	UART2_send
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	UART2_send:
 334              	.LFB225:
 147:../source/main.c **** 
 148:../source/main.c **** void UART2_send(char *data, uint8_t len) {
 335              		.loc 1 148 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL23:
 340 0000 10B5     		push	{r4, lr}
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 4, -8
 343              		.cfi_offset 14, -4
 344 0002 0131     		adds	r1, r1, #1
 345              	.LVL24:
 149:../source/main.c **** 
 150:../source/main.c **** 	char c = *data++; //assign c a character from the string and post-increment string pointer
 346              		.loc 1 150 0
 347 0004 421C     		adds	r2, r0, #1
 348              	.LVL25:
 349 0006 90F90030 		ldrsb	r3, [r0]
 350              	.LVL26:
 351 000a 0844     		add	r0, r0, r1
 151:../source/main.c **** 
 152:../source/main.c **** 	for (; len > 0; len--) { //loop until c is zero which means string has ended and no more chars has
 153:../source/main.c **** 
 154:../source/main.c **** 		while (!((UART2->S1) & 0x80)) {
 352              		.loc 1 154 0
 353 000c 0549     		ldr	r1, .L24
 354              	.LVL27:
 355              	.L20:
 152:../source/main.c **** 
 356              		.loc 1 152 0 discriminator 1
 357 000e 8242     		cmp	r2, r0
 358 0010 00D1     		bne	.L21
 155:../source/main.c **** 		} //wait until UART3 Transmission Complete flag rises, so we can send new char
 156:../source/main.c **** 		UART2->D = c; //write new character to transmit buffer
 157:../source/main.c **** 		c = *data++; //assign next character to c and post-increment string pointer
 158:../source/main.c **** 	}
 159:../source/main.c **** }
 359              		.loc 1 159 0
 360 0012 10BD     		pop	{r4, pc}
 361              	.L21:
 154:../source/main.c **** 		} //wait until UART3 Transmission Complete flag rises, so we can send new char
 362              		.loc 1 154 0 discriminator 1
 363 0014 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
 364 0016 2406     		lsls	r4, r4, #24
 365 0018 FCD5     		bpl	.L21
 156:../source/main.c **** 		c = *data++; //assign next character to c and post-increment string pointer
 366              		.loc 1 156 0
 367 001a DBB2     		uxtb	r3, r3
 368 001c CB71     		strb	r3, [r1, #7]
 157:../source/main.c **** 	}
 369              		.loc 1 157 0
 370 001e 12F9013B 		ldrsb	r3, [r2], #1
 371              	.LVL28:
 372 0022 F4E7     		b	.L20
 373              	.L25:
 374              		.align	2
 375              	.L24:
 376 0024 00C00640 		.word	1074184192
 377              		.cfi_endproc
 378              	.LFE225:
 380              		.section	.text.startup.main,"ax",%progbits
 381              		.align	1
 382              		.global	main
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu fpv4-sp-d16
 388              	main:
 389              	.LFB226:
 160:../source/main.c **** 
 161:../source/main.c **** int main(void) {
 390              		.loc 1 161 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 528
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 395              		.cfi_def_cfa_offset 28
 396              		.cfi_offset 4, -28
 397              		.cfi_offset 5, -24
 398              		.cfi_offset 6, -20
 399              		.cfi_offset 7, -16
 400              		.cfi_offset 8, -12
 401              		.cfi_offset 9, -8
 402              		.cfi_offset 14, -4
 162:../source/main.c **** 
 163:../source/main.c **** 	PMC->REGSC |= 0x08;	//acknowledge wake up to voltage regulator module, this is needed with LLWU wa
 403              		.loc 1 163 0
 404 0004 B64A     		ldr	r2, .L66
 405 0006 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 406 0008 43F00803 		orr	r3, r3, #8
 407 000c 9370     		strb	r3, [r2, #2]
 408              	.LVL29:
 409              	.LBB133:
 410              	.LBB134:
 411              	.LBB135:
 412              		.loc 2 1676 0
 413 000e B54B     		ldr	r3, .L66+4
 414 0010 4FF40012 		mov	r2, #2097152
 415 0014 1A60     		str	r2, [r3]
 416              	.LVL30:
 417              	.LBE135:
 418              	.LBE134:
 419              	.LBE133:
 161:../source/main.c **** 
 420              		.loc 1 161 0
 421 0016 ADF5057D 		sub	sp, sp, #532
 422              		.cfi_def_cfa_offset 560
 164:../source/main.c **** 	EnableIRQ(LLWU_IRQn);//enable LLWU interrupts. if we wake up from VLLS mode, it means that next MC
 165:../source/main.c **** 						 //will jump to the LLWU interrupt vector
 166:../source/main.c **** 
 167:../source/main.c **** 	struct reindeerData_t reindeerData; //create struct for our reindeer data that will be sent
 168:../source/main.c **** 	char mqttMessage[450];
 169:../source/main.c **** 
 170:../source/main.c **** 	BOARD_InitPins();	//init all physical pins
 423              		.loc 1 170 0
 424 001a FFF7FEFF 		bl	BOARD_InitPins
 425              	.LVL31:
 171:../source/main.c **** 	//BOARD_BootClockRUN();  //by uncommenting this we can use FRDM 50Mhz external clock, but will not
 172:../source/main.c **** 	BOARD_InitDebugConsole();
 426              		.loc 1 172 0
 427 001e FFF7FEFF 		bl	BOARD_InitDebugConsole
 428              	.LVL32:
 173:../source/main.c **** 
 174:../source/main.c **** 	/*
 175:../source/main.c **** 	 * Calculate how many processor ticks are in 1 ms to make accurate delay_ms function
 176:../source/main.c **** 	 * first take MCU clock frequency, divide by 1000ms and divide by 7 because our delay_ms loop take
 177:../source/main.c **** 	 */
 178:../source/main.c **** 	ms_ticks = BOARD_DEBUG_UART_CLK_FREQ / 1000 / 7;
 429              		.loc 1 178 0
 430 0022 FFF7FEFF 		bl	CLOCK_GetCoreSysClkFreq
 431              	.LVL33:
 432 0026 41F65833 		movw	r3, #7000
 433 002a B0FBF3F0 		udiv	r0, r0, r3
 434 002e AE4B     		ldr	r3, .L66+8
 435 0030 1860     		str	r0, [r3]
 179:../source/main.c **** 
 180:../source/main.c **** 	SysTick_Config(BOARD_DEBUG_UART_CLK_FREQ / 1000); //setup SysTick timer for 1ms interval for delay
 436              		.loc 1 180 0
 437 0032 FFF7FEFF 		bl	CLOCK_GetCoreSysClkFreq
 438              	.LVL34:
 439 0036 4FF47A73 		mov	r3, #1000
 440 003a B0FBF3F0 		udiv	r0, r0, r3
 441              	.LVL35:
 442              	.LBB136:
 443              	.LBB137:
1677:../CMSIS/core_cm4.h ****   }
1678:../CMSIS/core_cm4.h **** }
1679:../CMSIS/core_cm4.h **** 
1680:../CMSIS/core_cm4.h **** 
1681:../CMSIS/core_cm4.h **** /**
1682:../CMSIS/core_cm4.h ****   \brief   Get Interrupt Enable status
1683:../CMSIS/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1684:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1685:../CMSIS/core_cm4.h ****   \return             0  Interrupt is not enabled.
1686:../CMSIS/core_cm4.h ****   \return             1  Interrupt is enabled.
1687:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1688:../CMSIS/core_cm4.h ****  */
1689:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1690:../CMSIS/core_cm4.h **** {
1691:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1692:../CMSIS/core_cm4.h ****   {
1693:../CMSIS/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1694:../CMSIS/core_cm4.h ****   }
1695:../CMSIS/core_cm4.h ****   else
1696:../CMSIS/core_cm4.h ****   {
1697:../CMSIS/core_cm4.h ****     return(0U);
1698:../CMSIS/core_cm4.h ****   }
1699:../CMSIS/core_cm4.h **** }
1700:../CMSIS/core_cm4.h **** 
1701:../CMSIS/core_cm4.h **** 
1702:../CMSIS/core_cm4.h **** /**
1703:../CMSIS/core_cm4.h ****   \brief   Disable Interrupt
1704:../CMSIS/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1705:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1706:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1707:../CMSIS/core_cm4.h ****  */
1708:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1709:../CMSIS/core_cm4.h **** {
1710:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1711:../CMSIS/core_cm4.h ****   {
1712:../CMSIS/core_cm4.h ****     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1713:../CMSIS/core_cm4.h ****     __DSB();
1714:../CMSIS/core_cm4.h ****     __ISB();
1715:../CMSIS/core_cm4.h ****   }
1716:../CMSIS/core_cm4.h **** }
1717:../CMSIS/core_cm4.h **** 
1718:../CMSIS/core_cm4.h **** 
1719:../CMSIS/core_cm4.h **** /**
1720:../CMSIS/core_cm4.h ****   \brief   Get Pending Interrupt
1721:../CMSIS/core_cm4.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1722:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1723:../CMSIS/core_cm4.h ****   \return             0  Interrupt status is not pending.
1724:../CMSIS/core_cm4.h ****   \return             1  Interrupt status is pending.
1725:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1726:../CMSIS/core_cm4.h ****  */
1727:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1728:../CMSIS/core_cm4.h **** {
1729:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1730:../CMSIS/core_cm4.h ****   {
1731:../CMSIS/core_cm4.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1732:../CMSIS/core_cm4.h ****   }
1733:../CMSIS/core_cm4.h ****   else
1734:../CMSIS/core_cm4.h ****   {
1735:../CMSIS/core_cm4.h ****     return(0U);
1736:../CMSIS/core_cm4.h ****   }
1737:../CMSIS/core_cm4.h **** }
1738:../CMSIS/core_cm4.h **** 
1739:../CMSIS/core_cm4.h **** 
1740:../CMSIS/core_cm4.h **** /**
1741:../CMSIS/core_cm4.h ****   \brief   Set Pending Interrupt
1742:../CMSIS/core_cm4.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1743:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1744:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1745:../CMSIS/core_cm4.h ****  */
1746:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1747:../CMSIS/core_cm4.h **** {
1748:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1749:../CMSIS/core_cm4.h ****   {
1750:../CMSIS/core_cm4.h ****     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1751:../CMSIS/core_cm4.h ****   }
1752:../CMSIS/core_cm4.h **** }
1753:../CMSIS/core_cm4.h **** 
1754:../CMSIS/core_cm4.h **** 
1755:../CMSIS/core_cm4.h **** /**
1756:../CMSIS/core_cm4.h ****   \brief   Clear Pending Interrupt
1757:../CMSIS/core_cm4.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1758:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1759:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1760:../CMSIS/core_cm4.h ****  */
1761:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1762:../CMSIS/core_cm4.h **** {
1763:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1764:../CMSIS/core_cm4.h ****   {
1765:../CMSIS/core_cm4.h ****     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) &
1766:../CMSIS/core_cm4.h ****   }
1767:../CMSIS/core_cm4.h **** }
1768:../CMSIS/core_cm4.h **** 
1769:../CMSIS/core_cm4.h **** 
1770:../CMSIS/core_cm4.h **** /**
1771:../CMSIS/core_cm4.h ****   \brief   Get Active Interrupt
1772:../CMSIS/core_cm4.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1773:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1774:../CMSIS/core_cm4.h ****   \return             0  Interrupt status is not active.
1775:../CMSIS/core_cm4.h ****   \return             1  Interrupt status is active.
1776:../CMSIS/core_cm4.h ****   \note    IRQn must not be negative.
1777:../CMSIS/core_cm4.h ****  */
1778:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1779:../CMSIS/core_cm4.h **** {
1780:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1781:../CMSIS/core_cm4.h ****   {
1782:../CMSIS/core_cm4.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32
1783:../CMSIS/core_cm4.h ****   }
1784:../CMSIS/core_cm4.h ****   else
1785:../CMSIS/core_cm4.h ****   {
1786:../CMSIS/core_cm4.h ****     return(0U);
1787:../CMSIS/core_cm4.h ****   }
1788:../CMSIS/core_cm4.h **** }
1789:../CMSIS/core_cm4.h **** 
1790:../CMSIS/core_cm4.h **** 
1791:../CMSIS/core_cm4.h **** /**
1792:../CMSIS/core_cm4.h ****   \brief   Set Interrupt Priority
1793:../CMSIS/core_cm4.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1794:../CMSIS/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1795:../CMSIS/core_cm4.h ****            or negative to specify a processor exception.
1796:../CMSIS/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1797:../CMSIS/core_cm4.h ****   \param [in]  priority  Priority to set.
1798:../CMSIS/core_cm4.h ****   \note    The priority cannot be set for every processor exception.
1799:../CMSIS/core_cm4.h ****  */
1800:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1801:../CMSIS/core_cm4.h **** {
1802:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1803:../CMSIS/core_cm4.h ****   {
1804:../CMSIS/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1805:../CMSIS/core_cm4.h ****   }
1806:../CMSIS/core_cm4.h ****   else
1807:../CMSIS/core_cm4.h ****   {
1808:../CMSIS/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1809:../CMSIS/core_cm4.h ****   }
1810:../CMSIS/core_cm4.h **** }
1811:../CMSIS/core_cm4.h **** 
1812:../CMSIS/core_cm4.h **** 
1813:../CMSIS/core_cm4.h **** /**
1814:../CMSIS/core_cm4.h ****   \brief   Get Interrupt Priority
1815:../CMSIS/core_cm4.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1816:../CMSIS/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1817:../CMSIS/core_cm4.h ****            or negative to specify a processor exception.
1818:../CMSIS/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1819:../CMSIS/core_cm4.h ****   \return             Interrupt Priority.
1820:../CMSIS/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1821:../CMSIS/core_cm4.h ****  */
1822:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1823:../CMSIS/core_cm4.h **** {
1824:../CMSIS/core_cm4.h **** 
1825:../CMSIS/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1826:../CMSIS/core_cm4.h ****   {
1827:../CMSIS/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1828:../CMSIS/core_cm4.h ****   }
1829:../CMSIS/core_cm4.h ****   else
1830:../CMSIS/core_cm4.h ****   {
1831:../CMSIS/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1832:../CMSIS/core_cm4.h ****   }
1833:../CMSIS/core_cm4.h **** }
1834:../CMSIS/core_cm4.h **** 
1835:../CMSIS/core_cm4.h **** 
1836:../CMSIS/core_cm4.h **** /**
1837:../CMSIS/core_cm4.h ****   \brief   Encode Priority
1838:../CMSIS/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1839:../CMSIS/core_cm4.h ****            preemptive priority value, and subpriority value.
1840:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1841:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1842:../CMSIS/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1843:../CMSIS/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1844:../CMSIS/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1845:../CMSIS/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1846:../CMSIS/core_cm4.h ****  */
1847:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1848:../CMSIS/core_cm4.h **** {
1849:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1850:../CMSIS/core_cm4.h ****   uint32_t PreemptPriorityBits;
1851:../CMSIS/core_cm4.h ****   uint32_t SubPriorityBits;
1852:../CMSIS/core_cm4.h **** 
1853:../CMSIS/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1854:../CMSIS/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1855:../CMSIS/core_cm4.h **** 
1856:../CMSIS/core_cm4.h ****   return (
1857:../CMSIS/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1858:../CMSIS/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1859:../CMSIS/core_cm4.h ****          );
1860:../CMSIS/core_cm4.h **** }
1861:../CMSIS/core_cm4.h **** 
1862:../CMSIS/core_cm4.h **** 
1863:../CMSIS/core_cm4.h **** /**
1864:../CMSIS/core_cm4.h ****   \brief   Decode Priority
1865:../CMSIS/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1866:../CMSIS/core_cm4.h ****            preemptive priority value and subpriority value.
1867:../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1868:../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1869:../CMSIS/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1870:../CMSIS/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1871:../CMSIS/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1872:../CMSIS/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1873:../CMSIS/core_cm4.h ****  */
1874:../CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1875:../CMSIS/core_cm4.h **** {
1876:../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1877:../CMSIS/core_cm4.h ****   uint32_t PreemptPriorityBits;
1878:../CMSIS/core_cm4.h ****   uint32_t SubPriorityBits;
1879:../CMSIS/core_cm4.h **** 
1880:../CMSIS/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1881:../CMSIS/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1882:../CMSIS/core_cm4.h **** 
1883:../CMSIS/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1884:../CMSIS/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1885:../CMSIS/core_cm4.h **** }
1886:../CMSIS/core_cm4.h **** 
1887:../CMSIS/core_cm4.h **** 
1888:../CMSIS/core_cm4.h **** /**
1889:../CMSIS/core_cm4.h ****   \brief   Set Interrupt Vector
1890:../CMSIS/core_cm4.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1891:../CMSIS/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1892:../CMSIS/core_cm4.h ****            or negative to specify a processor exception.
1893:../CMSIS/core_cm4.h ****            VTOR must been relocated to SRAM before.
1894:../CMSIS/core_cm4.h ****   \param [in]   IRQn      Interrupt number
1895:../CMSIS/core_cm4.h ****   \param [in]   vector    Address of interrupt handler function
1896:../CMSIS/core_cm4.h ****  */
1897:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1898:../CMSIS/core_cm4.h **** {
1899:../CMSIS/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1900:../CMSIS/core_cm4.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1901:../CMSIS/core_cm4.h **** }
1902:../CMSIS/core_cm4.h **** 
1903:../CMSIS/core_cm4.h **** 
1904:../CMSIS/core_cm4.h **** /**
1905:../CMSIS/core_cm4.h ****   \brief   Get Interrupt Vector
1906:../CMSIS/core_cm4.h ****   \details Reads an interrupt vector from interrupt vector table.
1907:../CMSIS/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1908:../CMSIS/core_cm4.h ****            or negative to specify a processor exception.
1909:../CMSIS/core_cm4.h ****   \param [in]   IRQn      Interrupt number.
1910:../CMSIS/core_cm4.h ****   \return                 Address of interrupt handler function
1911:../CMSIS/core_cm4.h ****  */
1912:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1913:../CMSIS/core_cm4.h **** {
1914:../CMSIS/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1915:../CMSIS/core_cm4.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1916:../CMSIS/core_cm4.h **** }
1917:../CMSIS/core_cm4.h **** 
1918:../CMSIS/core_cm4.h **** 
1919:../CMSIS/core_cm4.h **** /**
1920:../CMSIS/core_cm4.h ****   \brief   System Reset
1921:../CMSIS/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
1922:../CMSIS/core_cm4.h ****  */
1923:../CMSIS/core_cm4.h **** __STATIC_INLINE void __NVIC_SystemReset(void)
1924:../CMSIS/core_cm4.h **** {
1925:../CMSIS/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
1926:../CMSIS/core_cm4.h ****                                                                        buffered write are completed
1927:../CMSIS/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1928:../CMSIS/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1929:../CMSIS/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1930:../CMSIS/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
1931:../CMSIS/core_cm4.h **** 
1932:../CMSIS/core_cm4.h ****   for(;;)                                                           /* wait until reset */
1933:../CMSIS/core_cm4.h ****   {
1934:../CMSIS/core_cm4.h ****     __NOP();
1935:../CMSIS/core_cm4.h ****   }
1936:../CMSIS/core_cm4.h **** }
1937:../CMSIS/core_cm4.h **** 
1938:../CMSIS/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1939:../CMSIS/core_cm4.h **** 
1940:../CMSIS/core_cm4.h **** /* ##########################  MPU functions  #################################### */
1941:../CMSIS/core_cm4.h **** 
1942:../CMSIS/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1943:../CMSIS/core_cm4.h **** 
1944:../CMSIS/core_cm4.h **** #include "mpu_armv7.h"
1945:../CMSIS/core_cm4.h **** 
1946:../CMSIS/core_cm4.h **** #endif
1947:../CMSIS/core_cm4.h **** 
1948:../CMSIS/core_cm4.h **** 
1949:../CMSIS/core_cm4.h **** /* ##########################  FPU functions  #################################### */
1950:../CMSIS/core_cm4.h **** /**
1951:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1952:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1953:../CMSIS/core_cm4.h ****   \brief    Function that provides FPU type.
1954:../CMSIS/core_cm4.h ****   @{
1955:../CMSIS/core_cm4.h ****  */
1956:../CMSIS/core_cm4.h **** 
1957:../CMSIS/core_cm4.h **** /**
1958:../CMSIS/core_cm4.h ****   \brief   get FPU type
1959:../CMSIS/core_cm4.h ****   \details returns the FPU type
1960:../CMSIS/core_cm4.h ****   \returns
1961:../CMSIS/core_cm4.h ****    - \b  0: No FPU
1962:../CMSIS/core_cm4.h ****    - \b  1: Single precision FPU
1963:../CMSIS/core_cm4.h ****    - \b  2: Double + Single precision FPU
1964:../CMSIS/core_cm4.h ****  */
1965:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1966:../CMSIS/core_cm4.h **** {
1967:../CMSIS/core_cm4.h ****   uint32_t mvfr0;
1968:../CMSIS/core_cm4.h **** 
1969:../CMSIS/core_cm4.h ****   mvfr0 = FPU->MVFR0;
1970:../CMSIS/core_cm4.h ****   if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1971:../CMSIS/core_cm4.h ****   {
1972:../CMSIS/core_cm4.h ****     return 1U;           /* Single precision FPU */
1973:../CMSIS/core_cm4.h ****   }
1974:../CMSIS/core_cm4.h ****   else
1975:../CMSIS/core_cm4.h ****   {
1976:../CMSIS/core_cm4.h ****     return 0U;           /* No FPU */
1977:../CMSIS/core_cm4.h ****   }
1978:../CMSIS/core_cm4.h **** }
1979:../CMSIS/core_cm4.h **** 
1980:../CMSIS/core_cm4.h **** 
1981:../CMSIS/core_cm4.h **** /*@} end of CMSIS_Core_FpuFunctions */
1982:../CMSIS/core_cm4.h **** 
1983:../CMSIS/core_cm4.h **** 
1984:../CMSIS/core_cm4.h **** 
1985:../CMSIS/core_cm4.h **** /* ##################################    SysTick function  ########################################
1986:../CMSIS/core_cm4.h **** /**
1987:../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1988:../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1989:../CMSIS/core_cm4.h ****   \brief    Functions that configure the System.
1990:../CMSIS/core_cm4.h ****   @{
1991:../CMSIS/core_cm4.h ****  */
1992:../CMSIS/core_cm4.h **** 
1993:../CMSIS/core_cm4.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1994:../CMSIS/core_cm4.h **** 
1995:../CMSIS/core_cm4.h **** /**
1996:../CMSIS/core_cm4.h ****   \brief   System Tick Configuration
1997:../CMSIS/core_cm4.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1998:../CMSIS/core_cm4.h ****            Counter is in free running mode to generate periodic interrupts.
1999:../CMSIS/core_cm4.h ****   \param [in]  ticks  Number of ticks between two interrupts.
2000:../CMSIS/core_cm4.h ****   \return          0  Function succeeded.
2001:../CMSIS/core_cm4.h ****   \return          1  Function failed.
2002:../CMSIS/core_cm4.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
2003:../CMSIS/core_cm4.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
2004:../CMSIS/core_cm4.h ****            must contain a vendor-specific implementation of this function.
2005:../CMSIS/core_cm4.h ****  */
2006:../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
2007:../CMSIS/core_cm4.h **** {
2008:../CMSIS/core_cm4.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 444              		.loc 2 2008 0
 445 003e 0138     		subs	r0, r0, #1
 446              	.LVL36:
 447 0040 B0F1807F 		cmp	r0, #16777216
 448 0044 09D2     		bcs	.L27
2009:../CMSIS/core_cm4.h ****   {
2010:../CMSIS/core_cm4.h ****     return (1UL);                                                   /* Reload value impossible */
2011:../CMSIS/core_cm4.h ****   }
2012:../CMSIS/core_cm4.h **** 
2013:../CMSIS/core_cm4.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 449              		.loc 2 2013 0
 450 0046 A94B     		ldr	r3, .L66+12
 451              	.LBB138:
 452              	.LBB139:
1808:../CMSIS/core_cm4.h ****   }
 453              		.loc 2 1808 0
 454 0048 A94A     		ldr	r2, .L66+16
 455              	.LBE139:
 456              	.LBE138:
 457              		.loc 2 2013 0
 458 004a 5860     		str	r0, [r3, #4]
 459              	.LVL37:
 460              	.LBB141:
 461              	.LBB140:
1808:../CMSIS/core_cm4.h ****   }
 462              		.loc 2 1808 0
 463 004c F021     		movs	r1, #240
 464 004e 82F82310 		strb	r1, [r2, #35]
 465              	.LVL38:
 466              	.LBE140:
 467              	.LBE141:
2014:../CMSIS/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
2015:../CMSIS/core_cm4.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 468              		.loc 2 2015 0
 469 0052 0022     		movs	r2, #0
 470 0054 9A60     		str	r2, [r3, #8]
2016:../CMSIS/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 471              		.loc 2 2016 0
 472 0056 0722     		movs	r2, #7
 473 0058 1A60     		str	r2, [r3]
 474              	.L27:
 475              	.LVL39:
 476              	.LBE137:
 477              	.LBE136:
 181:../source/main.c **** 
 182:../source/main.c **** 	initI2C();
 478              		.loc 1 182 0
 479 005a FFF7FEFF 		bl	initI2C
 480              	.LVL40:
 183:../source/main.c **** 	initAdc();
 481              		.loc 1 183 0
 482 005e FFF7FEFF 		bl	initAdc
 483              	.LVL41:
 184:../source/main.c **** 	initUART();
 484              		.loc 1 184 0
 485 0062 FFF7FEFF 		bl	initUART
 486              	.LVL42:
 185:../source/main.c **** 	configure_acc();
 487              		.loc 1 185 0
 488 0066 FFF7FEFF 		bl	configure_acc
 489              	.LVL43:
 186:../source/main.c **** 	acc_init();
 490              		.loc 1 186 0
 491 006a FFF7FEFF 		bl	acc_init
 492              	.LVL44:
 187:../source/main.c **** 	initTimer();
 493              		.loc 1 187 0
 494 006e FFF7FEFF 		bl	initTimer
 495              	.LVL45:
 496              	.LBB142:
 497              	.LBB143:
 498              		.file 4 "../drivers/fsl_smc.h"
   1:../drivers/fsl_smc.h **** /*
   2:../drivers/fsl_smc.h ****  * The Clear BSD License
   3:../drivers/fsl_smc.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_smc.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_smc.h ****  * All rights reserved.
   6:../drivers/fsl_smc.h ****  *
   7:../drivers/fsl_smc.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_smc.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_smc.h ****  * that the following conditions are met:
  10:../drivers/fsl_smc.h ****  *
  11:../drivers/fsl_smc.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_smc.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_smc.h ****  *
  14:../drivers/fsl_smc.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_smc.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_smc.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_smc.h ****  *
  18:../drivers/fsl_smc.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_smc.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_smc.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_smc.h ****  *
  22:../drivers/fsl_smc.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_smc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_smc.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_smc.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_smc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_smc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_smc.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_smc.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_smc.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_smc.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_smc.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_smc.h ****  */
  34:../drivers/fsl_smc.h **** 
  35:../drivers/fsl_smc.h **** #ifndef _FSL_SMC_H_
  36:../drivers/fsl_smc.h **** #define _FSL_SMC_H_
  37:../drivers/fsl_smc.h **** 
  38:../drivers/fsl_smc.h **** #include "fsl_common.h"
  39:../drivers/fsl_smc.h **** 
  40:../drivers/fsl_smc.h **** /*! @addtogroup smc */
  41:../drivers/fsl_smc.h **** /*! @{ */
  42:../drivers/fsl_smc.h **** 
  43:../drivers/fsl_smc.h **** /*******************************************************************************
  44:../drivers/fsl_smc.h ****  * Definitions
  45:../drivers/fsl_smc.h ****  ******************************************************************************/
  46:../drivers/fsl_smc.h **** 
  47:../drivers/fsl_smc.h **** /*! @name Driver version */
  48:../drivers/fsl_smc.h **** /*@{*/
  49:../drivers/fsl_smc.h **** /*! @brief SMC driver version 2.0.3. */
  50:../drivers/fsl_smc.h **** #define FSL_SMC_DRIVER_VERSION (MAKE_VERSION(2, 0, 3))
  51:../drivers/fsl_smc.h **** /*@}*/
  52:../drivers/fsl_smc.h **** 
  53:../drivers/fsl_smc.h **** /*!
  54:../drivers/fsl_smc.h ****  * @brief Power Modes Protection
  55:../drivers/fsl_smc.h ****  */
  56:../drivers/fsl_smc.h **** typedef enum _smc_power_mode_protection
  57:../drivers/fsl_smc.h **** {
  58:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAG
  59:../drivers/fsl_smc.h ****     kSMC_AllowPowerModeVlls = SMC_PMPROT_AVLLS_MASK, /*!< Allow Very-low-leakage Stop Mode. */
  60:../drivers/fsl_smc.h **** #endif
  61:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MOD
  62:../drivers/fsl_smc.h ****     kSMC_AllowPowerModeLls = SMC_PMPROT_ALLS_MASK, /*!< Allow Low-leakage Stop Mode.      */
  63:../drivers/fsl_smc.h **** #endif                                             /* FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE */
  64:../drivers/fsl_smc.h ****     kSMC_AllowPowerModeVlp = SMC_PMPROT_AVLP_MASK, /*!< Allow Very-Low-power Mode.        */
  65:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE) && FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE)
  66:../drivers/fsl_smc.h ****     kSMC_AllowPowerModeHsrun = SMC_PMPROT_AHSRUN_MASK, /*!< Allow High-speed Run mode.        */
  67:../drivers/fsl_smc.h **** #endif                                                 /* FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE *
  68:../drivers/fsl_smc.h ****     kSMC_AllowPowerModeAll = (0U
  69:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAG
  70:../drivers/fsl_smc.h ****                               |
  71:../drivers/fsl_smc.h ****                               SMC_PMPROT_AVLLS_MASK
  72:../drivers/fsl_smc.h **** #endif
  73:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MOD
  74:../drivers/fsl_smc.h ****                               |
  75:../drivers/fsl_smc.h ****                               SMC_PMPROT_ALLS_MASK
  76:../drivers/fsl_smc.h **** #endif /* FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE */
  77:../drivers/fsl_smc.h ****                               |
  78:../drivers/fsl_smc.h ****                               SMC_PMPROT_AVLP_MASK
  79:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE) && FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE)
  80:../drivers/fsl_smc.h ****                               |
  81:../drivers/fsl_smc.h ****                               kSMC_AllowPowerModeHsrun
  82:../drivers/fsl_smc.h **** #endif                          /* FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE */
  83:../drivers/fsl_smc.h ****                               ) /*!< Allow all power mode.              */
  84:../drivers/fsl_smc.h **** } smc_power_mode_protection_t;
  85:../drivers/fsl_smc.h **** 
  86:../drivers/fsl_smc.h **** /*!
  87:../drivers/fsl_smc.h ****  * @brief Power Modes in PMSTAT
  88:../drivers/fsl_smc.h ****  */
  89:../drivers/fsl_smc.h **** typedef enum _smc_power_state
  90:../drivers/fsl_smc.h **** {
  91:../drivers/fsl_smc.h ****     kSMC_PowerStateRun = 0x01U << 0U,  /*!< 0000_0001 - Current power mode is RUN   */
  92:../drivers/fsl_smc.h ****     kSMC_PowerStateStop = 0x01U << 1U, /*!< 0000_0010 - Current power mode is STOP  */
  93:../drivers/fsl_smc.h ****     kSMC_PowerStateVlpr = 0x01U << 2U, /*!< 0000_0100 - Current power mode is VLPR  */
  94:../drivers/fsl_smc.h ****     kSMC_PowerStateVlpw = 0x01U << 3U, /*!< 0000_1000 - Current power mode is VLPW  */
  95:../drivers/fsl_smc.h ****     kSMC_PowerStateVlps = 0x01U << 4U, /*!< 0001_0000 - Current power mode is VLPS  */
  96:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MOD
  97:../drivers/fsl_smc.h ****     kSMC_PowerStateLls = 0x01U << 5U, /*!< 0010_0000 - Current power mode is LLS   */
  98:../drivers/fsl_smc.h **** #endif                                /* FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE */
  99:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAG
 100:../drivers/fsl_smc.h ****     kSMC_PowerStateVlls = 0x01U << 6U, /*!< 0100_0000 - Current power mode is VLLS  */
 101:../drivers/fsl_smc.h **** #endif
 102:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE) && FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE)
 103:../drivers/fsl_smc.h ****     kSMC_PowerStateHsrun = 0x01U << 7U /*!< 1000_0000 - Current power mode is HSRUN */
 104:../drivers/fsl_smc.h **** #endif                                 /* FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE */
 105:../drivers/fsl_smc.h **** } smc_power_state_t;
 106:../drivers/fsl_smc.h **** 
 107:../drivers/fsl_smc.h **** /*!
 108:../drivers/fsl_smc.h ****  * @brief Run mode definition
 109:../drivers/fsl_smc.h ****  */
 110:../drivers/fsl_smc.h **** typedef enum _smc_run_mode
 111:../drivers/fsl_smc.h **** {
 112:../drivers/fsl_smc.h ****     kSMC_RunNormal = 0U, /*!< Normal RUN mode.             */
 113:../drivers/fsl_smc.h ****     kSMC_RunVlpr = 2U,   /*!< Very-low-power RUN mode.     */
 114:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE) && FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE)
 115:../drivers/fsl_smc.h ****     kSMC_Hsrun = 3U /*!< High-speed Run mode (HSRUN). */
 116:../drivers/fsl_smc.h **** #endif              /* FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE */
 117:../drivers/fsl_smc.h **** } smc_run_mode_t;
 118:../drivers/fsl_smc.h **** 
 119:../drivers/fsl_smc.h **** /*!
 120:../drivers/fsl_smc.h ****  * @brief Stop mode definition
 121:../drivers/fsl_smc.h ****  */
 122:../drivers/fsl_smc.h **** typedef enum _smc_stop_mode
 123:../drivers/fsl_smc.h **** {
 124:../drivers/fsl_smc.h ****     kSMC_StopNormal = 0U, /*!< Normal STOP mode.           */
 125:../drivers/fsl_smc.h ****     kSMC_StopVlps = 2U,   /*!< Very-low-power STOP mode.   */
 126:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MOD
 127:../drivers/fsl_smc.h ****     kSMC_StopLls = 3U, /*!< Low-leakage Stop mode.      */
 128:../drivers/fsl_smc.h **** #endif                 /* FSL_FEATURE_SMC_HAS_LOW_LEAKAGE_STOP_MODE */
 129:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAG
 130:../drivers/fsl_smc.h ****     kSMC_StopVlls = 4U /*!< Very-low-leakage Stop mode. */
 131:../drivers/fsl_smc.h **** #endif
 132:../drivers/fsl_smc.h **** } smc_stop_mode_t;
 133:../drivers/fsl_smc.h **** 
 134:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_USE_VLLSCTRL_REG) && FSL_FEATURE_SMC_USE_VLLSCTRL_REG) ||     \
 135:../drivers/fsl_smc.h ****     (defined(FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM) && FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM) || \
 136:../drivers/fsl_smc.h ****     (defined(FSL_FEATURE_SMC_HAS_LLS_SUBMODE) && FSL_FEATURE_SMC_HAS_LLS_SUBMODE)
 137:../drivers/fsl_smc.h **** /*!
 138:../drivers/fsl_smc.h ****  * @brief VLLS/LLS stop sub mode definition
 139:../drivers/fsl_smc.h ****  */
 140:../drivers/fsl_smc.h **** typedef enum _smc_stop_submode
 141:../drivers/fsl_smc.h **** {
 142:../drivers/fsl_smc.h ****     kSMC_StopSub0 = 0U, /*!< Stop submode 0, for VLLS0/LLS0. */
 143:../drivers/fsl_smc.h ****     kSMC_StopSub1 = 1U, /*!< Stop submode 1, for VLLS1/LLS1. */
 144:../drivers/fsl_smc.h ****     kSMC_StopSub2 = 2U, /*!< Stop submode 2, for VLLS2/LLS2. */
 145:../drivers/fsl_smc.h ****     kSMC_StopSub3 = 3U  /*!< Stop submode 3, for VLLS3/LLS3. */
 146:../drivers/fsl_smc.h **** } smc_stop_submode_t;
 147:../drivers/fsl_smc.h **** #endif
 148:../drivers/fsl_smc.h **** 
 149:../drivers/fsl_smc.h **** /*!
 150:../drivers/fsl_smc.h ****  * @brief Partial STOP option
 151:../drivers/fsl_smc.h ****  */
 152:../drivers/fsl_smc.h **** typedef enum _smc_partial_stop_mode
 153:../drivers/fsl_smc.h **** {
 154:../drivers/fsl_smc.h ****     kSMC_PartialStop = 0U,  /*!< STOP - Normal Stop mode*/
 155:../drivers/fsl_smc.h ****     kSMC_PartialStop1 = 1U, /*!< Partial Stop with both system and bus clocks disabled*/
 156:../drivers/fsl_smc.h ****     kSMC_PartialStop2 = 2U, /*!< Partial Stop with system clock disabled and bus clock enabled*/
 157:../drivers/fsl_smc.h **** } smc_partial_stop_option_t;
 158:../drivers/fsl_smc.h **** 
 159:../drivers/fsl_smc.h **** /*!
 160:../drivers/fsl_smc.h ****  * @brief SMC configuration status.
 161:../drivers/fsl_smc.h ****  */
 162:../drivers/fsl_smc.h **** enum _smc_status
 163:../drivers/fsl_smc.h **** {
 164:../drivers/fsl_smc.h ****     kStatus_SMC_StopAbort = MAKE_STATUS(kStatusGroup_POWER, 0) /*!< Entering Stop mode is abort*/
 165:../drivers/fsl_smc.h **** };
 166:../drivers/fsl_smc.h **** 
 167:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_VERID) && FSL_FEATURE_SMC_HAS_VERID)
 168:../drivers/fsl_smc.h **** /*!
 169:../drivers/fsl_smc.h ****  * @brief IP version ID definition.
 170:../drivers/fsl_smc.h ****  */
 171:../drivers/fsl_smc.h **** typedef struct _smc_version_id
 172:../drivers/fsl_smc.h **** {
 173:../drivers/fsl_smc.h ****     uint16_t feature; /*!< Feature Specification Number. */
 174:../drivers/fsl_smc.h ****     uint8_t minor;    /*!< Minor version number.         */
 175:../drivers/fsl_smc.h ****     uint8_t major;    /*!< Major version number.         */
 176:../drivers/fsl_smc.h **** } smc_version_id_t;
 177:../drivers/fsl_smc.h **** #endif /* FSL_FEATURE_SMC_HAS_VERID */
 178:../drivers/fsl_smc.h **** 
 179:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_PARAM) && FSL_FEATURE_SMC_HAS_PARAM)
 180:../drivers/fsl_smc.h **** /*!
 181:../drivers/fsl_smc.h ****  * @brief IP parameter definition.
 182:../drivers/fsl_smc.h ****  */
 183:../drivers/fsl_smc.h **** typedef struct _smc_param
 184:../drivers/fsl_smc.h **** {
 185:../drivers/fsl_smc.h ****     bool hsrunEnable; /*!< HSRUN mode enable. */
 186:../drivers/fsl_smc.h ****     bool llsEnable;   /*!< LLS mode enable.   */
 187:../drivers/fsl_smc.h ****     bool lls2Enable;  /*!< LLS2 mode enable.  */
 188:../drivers/fsl_smc.h ****     bool vlls0Enable; /*!< VLLS0 mode enable. */
 189:../drivers/fsl_smc.h **** } smc_param_t;
 190:../drivers/fsl_smc.h **** #endif /* FSL_FEATURE_SMC_HAS_PARAM */
 191:../drivers/fsl_smc.h **** 
 192:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LLS_SUBMODE) && FSL_FEATURE_SMC_HAS_LLS_SUBMODE) || \
 193:../drivers/fsl_smc.h ****     (defined(FSL_FEATURE_SMC_HAS_LPOPO) && FSL_FEATURE_SMC_HAS_LPOPO)
 194:../drivers/fsl_smc.h **** /*!
 195:../drivers/fsl_smc.h ****  * @brief SMC Low-Leakage Stop power mode configuration.
 196:../drivers/fsl_smc.h ****  */
 197:../drivers/fsl_smc.h **** typedef struct _smc_power_mode_lls_config
 198:../drivers/fsl_smc.h **** {
 199:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LLS_SUBMODE) && FSL_FEATURE_SMC_HAS_LLS_SUBMODE)
 200:../drivers/fsl_smc.h ****     smc_stop_submode_t subMode; /*!< Low-leakage Stop sub-mode */
 201:../drivers/fsl_smc.h **** #endif
 202:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LPOPO) && FSL_FEATURE_SMC_HAS_LPOPO)
 203:../drivers/fsl_smc.h ****     bool enableLpoClock; /*!< Enable LPO clock in LLS mode */
 204:../drivers/fsl_smc.h **** #endif
 205:../drivers/fsl_smc.h **** } smc_power_mode_lls_config_t;
 206:../drivers/fsl_smc.h **** #endif /* (FSL_FEATURE_SMC_HAS_LLS_SUBMODE || FSL_FEATURE_SMC_HAS_LPOPO) */
 207:../drivers/fsl_smc.h **** 
 208:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAGE_STOP_MODE) && FSL_FEATURE_SMC_HAS_VERY_LOW_LEAKAG
 209:../drivers/fsl_smc.h **** /*!
 210:../drivers/fsl_smc.h ****  * @brief SMC Very Low-Leakage Stop power mode configuration.
 211:../drivers/fsl_smc.h ****  */
 212:../drivers/fsl_smc.h **** typedef struct _smc_power_mode_vlls_config
 213:../drivers/fsl_smc.h **** {
 214:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_USE_VLLSCTRL_REG) && FSL_FEATURE_SMC_USE_VLLSCTRL_REG) ||     \
 215:../drivers/fsl_smc.h ****     (defined(FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM) && FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM) || \
 216:../drivers/fsl_smc.h ****     (defined(FSL_FEATURE_SMC_HAS_LLS_SUBMODE) && FSL_FEATURE_SMC_HAS_LLS_SUBMODE)
 217:../drivers/fsl_smc.h ****     smc_stop_submode_t subMode; /*!< Very Low-leakage Stop sub-mode */
 218:../drivers/fsl_smc.h **** #endif
 219:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_PORPO) && FSL_FEATURE_SMC_HAS_PORPO)
 220:../drivers/fsl_smc.h ****     bool enablePorDetectInVlls0; /*!< Enable Power on reset detect in VLLS mode */
 221:../drivers/fsl_smc.h **** #endif
 222:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_RAM2_POWER_OPTION) && FSL_FEATURE_SMC_HAS_RAM2_POWER_OPTION)
 223:../drivers/fsl_smc.h ****     bool enableRam2InVlls2; /*!< Enable RAM2 power in VLLS2 */
 224:../drivers/fsl_smc.h **** #endif
 225:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_LPOPO) && FSL_FEATURE_SMC_HAS_LPOPO)
 226:../drivers/fsl_smc.h ****     bool enableLpoClock; /*!< Enable LPO clock in VLLS mode */
 227:../drivers/fsl_smc.h **** #endif
 228:../drivers/fsl_smc.h **** } smc_power_mode_vlls_config_t;
 229:../drivers/fsl_smc.h **** #endif
 230:../drivers/fsl_smc.h **** 
 231:../drivers/fsl_smc.h **** /*******************************************************************************
 232:../drivers/fsl_smc.h ****  * API
 233:../drivers/fsl_smc.h ****  ******************************************************************************/
 234:../drivers/fsl_smc.h **** 
 235:../drivers/fsl_smc.h **** #if defined(__cplusplus)
 236:../drivers/fsl_smc.h **** extern "C" {
 237:../drivers/fsl_smc.h **** #endif /* __cplusplus */
 238:../drivers/fsl_smc.h **** 
 239:../drivers/fsl_smc.h **** /*! @name System mode controller APIs*/
 240:../drivers/fsl_smc.h **** /*@{*/
 241:../drivers/fsl_smc.h **** 
 242:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_VERID) && FSL_FEATURE_SMC_HAS_VERID)
 243:../drivers/fsl_smc.h **** /*!
 244:../drivers/fsl_smc.h ****  * @brief Gets the SMC version ID.
 245:../drivers/fsl_smc.h ****  *
 246:../drivers/fsl_smc.h ****  * This function gets the SMC version ID, including major version number,
 247:../drivers/fsl_smc.h ****  * minor version number, and feature specification number.
 248:../drivers/fsl_smc.h ****  *
 249:../drivers/fsl_smc.h ****  * @param base SMC peripheral base address.
 250:../drivers/fsl_smc.h ****  * @param versionId     Pointer to the version ID structure.
 251:../drivers/fsl_smc.h ****  */
 252:../drivers/fsl_smc.h **** static inline void SMC_GetVersionId(SMC_Type *base, smc_version_id_t *versionId)
 253:../drivers/fsl_smc.h **** {
 254:../drivers/fsl_smc.h ****     *((uint32_t *)versionId) = base->VERID;
 255:../drivers/fsl_smc.h **** }
 256:../drivers/fsl_smc.h **** #endif /* FSL_FEATURE_SMC_HAS_VERID */
 257:../drivers/fsl_smc.h **** 
 258:../drivers/fsl_smc.h **** #if (defined(FSL_FEATURE_SMC_HAS_PARAM) && FSL_FEATURE_SMC_HAS_PARAM)
 259:../drivers/fsl_smc.h **** /*!
 260:../drivers/fsl_smc.h ****  * @brief Gets the SMC parameter.
 261:../drivers/fsl_smc.h ****  *
 262:../drivers/fsl_smc.h ****  * This function gets the SMC parameter including the enabled power mdoes.
 263:../drivers/fsl_smc.h ****  *
 264:../drivers/fsl_smc.h ****  * @param base SMC peripheral base address.
 265:../drivers/fsl_smc.h ****  * @param param         Pointer to the SMC param structure.
 266:../drivers/fsl_smc.h ****  */
 267:../drivers/fsl_smc.h **** void SMC_GetParam(SMC_Type *base, smc_param_t *param);
 268:../drivers/fsl_smc.h **** #endif
 269:../drivers/fsl_smc.h **** 
 270:../drivers/fsl_smc.h **** /*!
 271:../drivers/fsl_smc.h ****  * @brief Configures all power mode protection settings.
 272:../drivers/fsl_smc.h ****  *
 273:../drivers/fsl_smc.h ****  * This function  configures the power mode protection settings for
 274:../drivers/fsl_smc.h ****  * supported power modes in the specified chip family. The available power modes
 275:../drivers/fsl_smc.h ****  * are defined in the smc_power_mode_protection_t. This should be done at an early
 276:../drivers/fsl_smc.h ****  * system level initialization stage. See the reference manual for details.
 277:../drivers/fsl_smc.h ****  * This register can only write once after the power reset.
 278:../drivers/fsl_smc.h ****  *
 279:../drivers/fsl_smc.h ****  * The allowed modes are passed as bit map. For example, to allow LLS and VLLS,
 280:../drivers/fsl_smc.h ****  * use SMC_SetPowerModeProtection(kSMC_AllowPowerModeVlls | kSMC_AllowPowerModeVlps).
 281:../drivers/fsl_smc.h ****  * To allow all modes, use SMC_SetPowerModeProtection(kSMC_AllowPowerModeAll).
 282:../drivers/fsl_smc.h ****  *
 283:../drivers/fsl_smc.h ****  * @param base SMC peripheral base address.
 284:../drivers/fsl_smc.h ****  * @param allowedModes Bitmap of the allowed power modes.
 285:../drivers/fsl_smc.h ****  */
 286:../drivers/fsl_smc.h **** static inline void SMC_SetPowerModeProtection(SMC_Type *base, uint8_t allowedModes)
 287:../drivers/fsl_smc.h **** {
 288:../drivers/fsl_smc.h ****     base->PMPROT = allowedModes;
 499              		.loc 4 288 0
 500 0072 A04B     		ldr	r3, .L66+20
 501              	.LBE143:
 502              	.LBE142:
 188:../source/main.c **** 
 189:../source/main.c **** 	static const gpio_pin_config_t LED_configOutput = { kGPIO_DigitalOutput, /* use as output pin */
 190:../source/main.c **** 	1, /* initial value */
 191:../source/main.c **** 	};
 192:../source/main.c **** 
 193:../source/main.c **** 	SMC_SetPowerModeProtection(SMC, kSMC_AllowPowerModeVlls);
 194:../source/main.c **** 	smc_power_mode_vlls_config.subMode = kSMC_StopSub1; /*!< Stop submode 1, for VLLS1/LLS1. */
 195:../source/main.c **** 
 196:../source/main.c **** 	LLWU->ME |= 0x01; 		// enable LLWU wakeup source from LPTMR module
 197:../source/main.c **** 	LLWU->PE3 |= 0x01; // enable LLWU wakeup source from accelerometer interrupt pin
 198:../source/main.c **** 					   // 0x20 for stock frdm pin enable,
 199:../source/main.c **** 	LLWU->FILT1 |= 0x28;	// set pin wakeup from rising edge, 0x2A for frdm
 200:../source/main.c **** 
 201:../source/main.c **** 	EnableIRQ(PORTC_IRQn);
 202:../source/main.c **** 
 203:../source/main.c **** 	LPTMR_EnableInterrupts(LPTMR0, LPTMR_CSR_TIE_MASK);	//Sets Timer Interrupt Enable bit to 1
 204:../source/main.c **** 	LPTMR_StartTimer(LPTMR0);
 205:../source/main.c **** 
 206:../source/main.c **** 	GPIO_PinInit(GPIOB, 21u, &LED_configOutput);	//blue led as output
 503              		.loc 1 206 0
 504 0074 A04C     		ldr	r4, .L66+24
 207:../source/main.c **** 	GPIO_PinInit(GPIOB, 22u, &LED_configOutput);	//red led as output
 208:../source/main.c **** 
 209:../source/main.c **** 	/*
 210:../source/main.c **** 	 * set boost regulator enable pin as output. This pin will control the power to RF modules
 211:../source/main.c **** 	 */
 212:../source/main.c **** 	GPIO_PinInit(GPIOB, 11u, &LED_configOutput);
 213:../source/main.c **** 	GPIO_PinInit(GPIOD, 1u, &LED_configOutput);
 214:../source/main.c **** 
 215:../source/main.c **** 	GPIO_ClearPinsOutput(GPIOB, 1 << 11u); //Power on RF modules
 216:../source/main.c **** 
 217:../source/main.c **** 	//fletcher8(PMC_set, 14);
 218:../source/main.c **** 	//fletcher8(ubx_cfg_prt, 7);
 219:../source/main.c **** 	//ubx_send(ubx_cfg_prt);
 220:../source/main.c **** 
 221:../source/main.c **** 	printf(
 222:../source/main.c **** 			"Reindeer IoT has started\r\nCommand \"iot\" to start executing reindeer track cycle\r\n"
 223:../source/main.c **** 					"Command \"gpsinfo=1\" or \"gpsinfo=0\" to switch GPS data on/off\r\n");
 224:../source/main.c **** 	printf(
 225:../source/main.c **** 			"Or enter normal AT commands here for SARA-N2\r\nModules powered on and booting now!\r\n");
 226:../source/main.c **** 
 227:../source/main.c **** 	/*
 228:../source/main.c **** 	 * Copy all reindeer variables to struct before starting network operations
 229:../source/main.c **** 	 */
 230:../source/main.c **** 
 231:../source/main.c **** char testLat[11] = ("6500.53");
 232:../source/main.c **** char testLon[11] = ("02534.554");
 233:../source/main.c **** 	strcpy(reindeerData.serialNum, "66666");
 234:../source/main.c **** 
 235:../source/main.c **** 	strcpy(reindeerData.latitude, testLat);
 236:../source/main.c **** 	strcpy(reindeerData.longitude, testLon);
 237:../source/main.c **** 	strcpy(reindeerData.dead, "false");
 238:../source/main.c **** 	reindeerData.batteryLevel = 45;
 239:../source/main.c **** 	/*
 240:../source/main.c **** 	 while (true) {
 241:../source/main.c **** 
 242:../source/main.c **** 	 int16_t acc_val_x = read_acc_axis(0);
 243:../source/main.c **** 	 int16_t acc_val_y = read_acc_axis(1);
 244:../source/main.c **** 	 int16_t acc_val_z = read_acc_axis(2);
 245:../source/main.c **** 	 printf("Akseloreometer x: %d y: %d z: %d\r\n", acc_val_x, acc_val_y, acc_val_z);
 246:../source/main.c **** 	 delay_ms(500);
 247:../source/main.c **** 	 }
 248:../source/main.c **** 	 */
 249:../source/main.c **** 	/*if (wake == 2) {
 250:../source/main.c **** 		printf("Woken by ACCEL, reindeer is !!!ALIVE!!!\r\n");
 251:../source/main.c **** 		SMC_PreEnterStopModes();
 252:../source/main.c **** 		SMC_SetPowerModeVlls(SMC, &smc_power_mode_vlls_config);
 253:../source/main.c **** 	}*/
 254:../source/main.c **** 
 255:../source/main.c **** 	while (1) {
 256:../source/main.c **** 
 257:../source/main.c **** 		//int16_t acc_val = read_acc_axis(0);
 258:../source/main.c **** 		//printf("Accelereometer %d\r\n",acc_val);
 259:../source/main.c **** 		//break;
 260:../source/main.c **** 		/*
 261:../source/main.c **** 		 * Check if a string has arrived from PC (with CR line end)
 262:../source/main.c **** 		 */
 263:../source/main.c **** 
 264:../source/main.c **** 		if (wake == 5) {
 265:../source/main.c **** 			strcpy(reindeerData.dead, "true");
 266:../source/main.c **** 			printf("Woken by LPTMR, reindeer is !!!%s!!\r\n",
 267:../source/main.c **** 					reindeerData.dead);
 268:../source/main.c **** 
 269:../source/main.c **** 			while (true) {
 270:../source/main.c **** 				if (GPS_strReady) {
 271:../source/main.c **** 					printf(GPS_recBuf);
 272:../source/main.c **** 					printf("\r\n"); //First print out whole buffer
 273:../source/main.c **** 
 274:../source/main.c **** 					char testLat[12] = ("6500.02359");
 275:../source/main.c **** 					char testLon[12] = ("02530.56951");
 276:../source/main.c **** 
 277:../source/main.c **** 					strcpy(reindeerData.latitude, testLat);
 278:../source/main.c **** 					strcpy(reindeerData.longitude, testLon);
 279:../source/main.c **** 					break;
 280:../source/main.c **** 
 281:../source/main.c **** 					if (getGPS()) {
 282:../source/main.c **** 						//char testLat[12] = ("6500.02359");
 283:../source/main.c **** 						//char testLon[12] = ("02530.56951");
 284:../source/main.c **** 
 285:../source/main.c **** 						//parseData(testLat,testLon);
 286:../source/main.c **** 
 287:../source/main.c **** 						strcpy(reindeerData.latitude, parsedLat);
 288:../source/main.c **** 						strcpy(reindeerData.longitude, parsedLon);
 289:../source/main.c **** 						break;
 290:../source/main.c **** 					}
 291:../source/main.c **** 					memset(GPS_recBuf, 0, 600);
 292:../source/main.c **** 					GPS_bufPtr = 0;
 293:../source/main.c **** 					GPS_strReady = 0;
 294:../source/main.c **** 				}
 295:../source/main.c **** 
 296:../source/main.c **** 			}
 297:../source/main.c **** 			printf("Parsed latitude: %s\r\n", reindeerData.latitude);
 298:../source/main.c **** 			printf("Parsed longitude: %s\r\n", reindeerData.longitude);
 299:../source/main.c **** 			break;
 300:../source/main.c **** 		}
 301:../source/main.c **** 
 302:../source/main.c **** 		if (PC_strReady) {
 505              		.loc 1 302 0
 506 0076 A14F     		ldr	r7, .L66+28
 507              	.LBB145:
 508              	.LBB146:
 509              	.LBB147:
 510              		.file 5 "../drivers/fsl_gpio.h"
   1:../drivers/fsl_gpio.h **** /*
   2:../drivers/fsl_gpio.h ****  * The Clear BSD License
   3:../drivers/fsl_gpio.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_gpio.h ****  * Copyright 2016-2017 NXP
   5:../drivers/fsl_gpio.h ****  * All rights reserved.
   6:../drivers/fsl_gpio.h ****  *
   7:../drivers/fsl_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,
   8:../drivers/fsl_gpio.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
   9:../drivers/fsl_gpio.h ****  * that the following conditions are met:
  10:../drivers/fsl_gpio.h ****  *
  11:../drivers/fsl_gpio.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  12:../drivers/fsl_gpio.h ****  *   of conditions and the following disclaimer.
  13:../drivers/fsl_gpio.h ****  *
  14:../drivers/fsl_gpio.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  15:../drivers/fsl_gpio.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  16:../drivers/fsl_gpio.h ****  *   other materials provided with the distribution.
  17:../drivers/fsl_gpio.h ****  *
  18:../drivers/fsl_gpio.h ****  * o Neither the name of the copyright holder nor the names of its
  19:../drivers/fsl_gpio.h ****  *   contributors may be used to endorse or promote products derived from this
  20:../drivers/fsl_gpio.h ****  *   software without specific prior written permission.
  21:../drivers/fsl_gpio.h ****  *
  22:../drivers/fsl_gpio.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  23:../drivers/fsl_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:../drivers/fsl_gpio.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../drivers/fsl_gpio.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../drivers/fsl_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  27:../drivers/fsl_gpio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:../drivers/fsl_gpio.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:../drivers/fsl_gpio.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  30:../drivers/fsl_gpio.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:../drivers/fsl_gpio.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:../drivers/fsl_gpio.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../drivers/fsl_gpio.h ****  */
  34:../drivers/fsl_gpio.h **** 
  35:../drivers/fsl_gpio.h **** #ifndef _FSL_GPIO_H_
  36:../drivers/fsl_gpio.h **** #define _FSL_GPIO_H_
  37:../drivers/fsl_gpio.h **** 
  38:../drivers/fsl_gpio.h **** #include "fsl_common.h"
  39:../drivers/fsl_gpio.h **** 
  40:../drivers/fsl_gpio.h **** /*!
  41:../drivers/fsl_gpio.h ****  * @addtogroup gpio
  42:../drivers/fsl_gpio.h ****  * @{
  43:../drivers/fsl_gpio.h ****  */
  44:../drivers/fsl_gpio.h **** 
  45:../drivers/fsl_gpio.h **** /*******************************************************************************
  46:../drivers/fsl_gpio.h ****  * Definitions
  47:../drivers/fsl_gpio.h ****  ******************************************************************************/
  48:../drivers/fsl_gpio.h **** 
  49:../drivers/fsl_gpio.h **** /*! @name Driver version */
  50:../drivers/fsl_gpio.h **** /*@{*/
  51:../drivers/fsl_gpio.h **** /*! @brief GPIO driver version 2.2.1. */
  52:../drivers/fsl_gpio.h **** #define FSL_GPIO_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  53:../drivers/fsl_gpio.h **** /*@}*/
  54:../drivers/fsl_gpio.h **** 
  55:../drivers/fsl_gpio.h **** /*! @brief GPIO direction definition */
  56:../drivers/fsl_gpio.h **** typedef enum _gpio_pin_direction
  57:../drivers/fsl_gpio.h **** {
  58:../drivers/fsl_gpio.h ****     kGPIO_DigitalInput = 0U,  /*!< Set current pin as digital input*/
  59:../drivers/fsl_gpio.h ****     kGPIO_DigitalOutput = 1U, /*!< Set current pin as digital output*/
  60:../drivers/fsl_gpio.h **** } gpio_pin_direction_t;
  61:../drivers/fsl_gpio.h **** 
  62:../drivers/fsl_gpio.h **** #if defined(FSL_FEATURE_GPIO_HAS_ATTRIBUTE_CHECKER) && FSL_FEATURE_GPIO_HAS_ATTRIBUTE_CHECKER
  63:../drivers/fsl_gpio.h **** /*! @brief GPIO checker attribute */
  64:../drivers/fsl_gpio.h **** typedef enum _gpio_checker_attribute
  65:../drivers/fsl_gpio.h **** {
  66:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureRWUsersecureRWPrivilegedsecureRW =
  67:../drivers/fsl_gpio.h ****         0x00U, /*!< User nonsecure:Read+Write; User Secure:Read+Write; Privileged Secure:Read+Write
  68:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureRUsersecureRWPrivilegedsecureRW =
  69:../drivers/fsl_gpio.h ****         0x01U, /*!< User nonsecure:Read;       User Secure:Read+Write; Privileged Secure:Read+Write
  70:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureNUsersecureRWPrivilegedsecureRW =
  71:../drivers/fsl_gpio.h ****         0x02U, /*!< User nonsecure:None;       User Secure:Read+Write; Privileged Secure:Read+Write
  72:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureRUsersecureRPrivilegedsecureRW =
  73:../drivers/fsl_gpio.h ****         0x03U, /*!< User nonsecure:Read;       User Secure:Read;       Privileged Secure:Read+Write
  74:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureNUsersecureRPrivilegedsecureRW =
  75:../drivers/fsl_gpio.h ****         0x04U, /*!< User nonsecure:None;       User Secure:Read;       Privileged Secure:Read+Write
  76:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureNUsersecureNPrivilegedsecureRW =
  77:../drivers/fsl_gpio.h ****         0x05U, /*!< User nonsecure:None;       User Secure:None;       Privileged Secure:Read+Write
  78:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureNUsersecureNPrivilegedsecureR =
  79:../drivers/fsl_gpio.h ****         0x06U, /*!< User nonsecure:None;       User Secure:None;       Privileged Secure:Read */
  80:../drivers/fsl_gpio.h ****     kGPIO_UsernonsecureNUsersecureNPrivilegedsecureN =
  81:../drivers/fsl_gpio.h ****         0x07U, /*!< User nonsecure:None;       User Secure:None;       Privileged Secure:None */
  82:../drivers/fsl_gpio.h ****     kGPIO_IgnoreAttributeCheck = 0x80U, /*!< Ignores the attribute check */
  83:../drivers/fsl_gpio.h **** } gpio_checker_attribute_t;
  84:../drivers/fsl_gpio.h **** #endif
  85:../drivers/fsl_gpio.h **** 
  86:../drivers/fsl_gpio.h **** /*!
  87:../drivers/fsl_gpio.h ****  * @brief The GPIO pin configuration structure.
  88:../drivers/fsl_gpio.h ****  *
  89:../drivers/fsl_gpio.h ****  * Each pin can only be configured as either an output pin or an input pin at a time.
  90:../drivers/fsl_gpio.h ****  * If configured as an input pin, leave the outputConfig unused.
  91:../drivers/fsl_gpio.h ****  * Note that in some use cases, the corresponding port property should be configured in advance
  92:../drivers/fsl_gpio.h ****  *        with the PORT_SetPinConfig().
  93:../drivers/fsl_gpio.h ****  */
  94:../drivers/fsl_gpio.h **** typedef struct _gpio_pin_config
  95:../drivers/fsl_gpio.h **** {
  96:../drivers/fsl_gpio.h ****     gpio_pin_direction_t pinDirection; /*!< GPIO direction, input or output */
  97:../drivers/fsl_gpio.h ****     /* Output configurations; ignore if configured as an input pin */
  98:../drivers/fsl_gpio.h ****     uint8_t outputLogic; /*!< Set a default output logic, which has no use in input */
  99:../drivers/fsl_gpio.h **** } gpio_pin_config_t;
 100:../drivers/fsl_gpio.h **** 
 101:../drivers/fsl_gpio.h **** /*! @} */
 102:../drivers/fsl_gpio.h **** 
 103:../drivers/fsl_gpio.h **** /*******************************************************************************
 104:../drivers/fsl_gpio.h ****  * API
 105:../drivers/fsl_gpio.h ****  ******************************************************************************/
 106:../drivers/fsl_gpio.h **** 
 107:../drivers/fsl_gpio.h **** #if defined(__cplusplus)
 108:../drivers/fsl_gpio.h **** extern "C" {
 109:../drivers/fsl_gpio.h **** #endif
 110:../drivers/fsl_gpio.h **** 
 111:../drivers/fsl_gpio.h **** /*!
 112:../drivers/fsl_gpio.h ****  * @addtogroup gpio_driver
 113:../drivers/fsl_gpio.h ****  * @{
 114:../drivers/fsl_gpio.h ****  */
 115:../drivers/fsl_gpio.h **** 
 116:../drivers/fsl_gpio.h **** /*! @name GPIO Configuration */
 117:../drivers/fsl_gpio.h **** /*@{*/
 118:../drivers/fsl_gpio.h **** 
 119:../drivers/fsl_gpio.h **** /*!
 120:../drivers/fsl_gpio.h ****  * @brief Initializes a GPIO pin used by the board.
 121:../drivers/fsl_gpio.h ****  *
 122:../drivers/fsl_gpio.h ****  * To initialize the GPIO, define a pin configuration, as either input or output, in the user file.
 123:../drivers/fsl_gpio.h ****  * Then, call the GPIO_PinInit() function.
 124:../drivers/fsl_gpio.h ****  *
 125:../drivers/fsl_gpio.h ****  * This is an example to define an input pin or an output pin configuration.
 126:../drivers/fsl_gpio.h ****  * @code
 127:../drivers/fsl_gpio.h ****  * // Define a digital input pin configuration,
 128:../drivers/fsl_gpio.h ****  * gpio_pin_config_t config =
 129:../drivers/fsl_gpio.h ****  * {
 130:../drivers/fsl_gpio.h ****  *   kGPIO_DigitalInput,
 131:../drivers/fsl_gpio.h ****  *   0,
 132:../drivers/fsl_gpio.h ****  * }
 133:../drivers/fsl_gpio.h ****  * //Define a digital output pin configuration,
 134:../drivers/fsl_gpio.h ****  * gpio_pin_config_t config =
 135:../drivers/fsl_gpio.h ****  * {
 136:../drivers/fsl_gpio.h ****  *   kGPIO_DigitalOutput,
 137:../drivers/fsl_gpio.h ****  *   0,
 138:../drivers/fsl_gpio.h ****  * }
 139:../drivers/fsl_gpio.h ****  * @endcode
 140:../drivers/fsl_gpio.h ****  *
 141:../drivers/fsl_gpio.h ****  * @param base   GPIO peripheral base pointer (GPIOA, GPIOB, GPIOC, and so on.)
 142:../drivers/fsl_gpio.h ****  * @param pin    GPIO port pin number
 143:../drivers/fsl_gpio.h ****  * @param config GPIO pin configuration pointer
 144:../drivers/fsl_gpio.h ****  */
 145:../drivers/fsl_gpio.h **** void GPIO_PinInit(GPIO_Type *base, uint32_t pin, const gpio_pin_config_t *config);
 146:../drivers/fsl_gpio.h **** 
 147:../drivers/fsl_gpio.h **** /*@}*/
 148:../drivers/fsl_gpio.h **** 
 149:../drivers/fsl_gpio.h **** /*! @name GPIO Output Operations */
 150:../drivers/fsl_gpio.h **** /*@{*/
 151:../drivers/fsl_gpio.h **** 
 152:../drivers/fsl_gpio.h **** /*!
 153:../drivers/fsl_gpio.h ****  * @brief Sets the output level of the multiple GPIO pins to the logic 1 or 0.
 154:../drivers/fsl_gpio.h ****  *
 155:../drivers/fsl_gpio.h ****  * @param base    GPIO peripheral base pointer (GPIOA, GPIOB, GPIOC, and so on.)
 156:../drivers/fsl_gpio.h ****  * @param pin     GPIO pin number
 157:../drivers/fsl_gpio.h ****  * @param output  GPIO pin output logic level.
 158:../drivers/fsl_gpio.h ****  *        - 0: corresponding pin output low-logic level.
 159:../drivers/fsl_gpio.h ****  *        - 1: corresponding pin output high-logic level.
 160:../drivers/fsl_gpio.h ****  */
 161:../drivers/fsl_gpio.h **** static inline void GPIO_PinWrite(GPIO_Type *base, uint32_t pin, uint8_t output)
 162:../drivers/fsl_gpio.h **** {
 163:../drivers/fsl_gpio.h ****     if (output == 0U)
 164:../drivers/fsl_gpio.h ****     {
 165:../drivers/fsl_gpio.h ****         base->PCOR = 1U << pin;
 166:../drivers/fsl_gpio.h ****     }
 167:../drivers/fsl_gpio.h ****     else
 168:../drivers/fsl_gpio.h ****     {
 169:../drivers/fsl_gpio.h ****         base->PSOR = 1U << pin;
 170:../drivers/fsl_gpio.h ****     }
 171:../drivers/fsl_gpio.h **** }
 172:../drivers/fsl_gpio.h **** 
 173:../drivers/fsl_gpio.h **** /*!
 174:../drivers/fsl_gpio.h ****  * @brief Sets the output level of the multiple GPIO pins to the logic 1 or 0.
 175:../drivers/fsl_gpio.h ****  * @deprecated Do not use this function.  It has been superceded by @ref GPIO_PinWrite.
 176:../drivers/fsl_gpio.h ****  */
 177:../drivers/fsl_gpio.h **** static inline void GPIO_WritePinOutput(GPIO_Type *base, uint32_t pin, uint8_t output)
 178:../drivers/fsl_gpio.h **** {
 179:../drivers/fsl_gpio.h ****     GPIO_PinWrite(base, pin, output);
 180:../drivers/fsl_gpio.h **** }
 181:../drivers/fsl_gpio.h **** 
 182:../drivers/fsl_gpio.h **** /*!
 183:../drivers/fsl_gpio.h ****  * @brief Sets the output level of the multiple GPIO pins to the logic 1.
 184:../drivers/fsl_gpio.h ****  *
 185:../drivers/fsl_gpio.h ****  * @param base GPIO peripheral base pointer (GPIOA, GPIOB, GPIOC, and so on.)
 186:../drivers/fsl_gpio.h ****  * @param mask GPIO pin number macro
 187:../drivers/fsl_gpio.h ****  */
 188:../drivers/fsl_gpio.h **** static inline void GPIO_PortSet(GPIO_Type *base, uint32_t mask)
 189:../drivers/fsl_gpio.h **** {
 190:../drivers/fsl_gpio.h ****     base->PSOR = mask;
 511              		.loc 5 190 0
 512 0078 DFF89482 		ldr	r8, .L66+48
 513              	.LBE147:
 514              	.LBE146:
 515              	.LBE145:
 516              	.LBB150:
 517              	.LBB144:
 518              		.loc 4 288 0
 519 007c 0222     		movs	r2, #2
 520 007e 1A70     		strb	r2, [r3]
 521              	.LVL46:
 522              	.LBE144:
 523              	.LBE150:
 194:../source/main.c **** 
 524              		.loc 1 194 0
 525 0080 9F4B     		ldr	r3, .L66+32
 526 0082 0125     		movs	r5, #1
 527 0084 1D70     		strb	r5, [r3]
 196:../source/main.c **** 	LLWU->PE3 |= 0x01; // enable LLWU wakeup source from accelerometer interrupt pin
 528              		.loc 1 196 0
 529 0086 9F4B     		ldr	r3, .L66+36
 530 0088 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 531 008a 2A43     		orrs	r2, r2, r5
 532 008c 1A71     		strb	r2, [r3, #4]
 197:../source/main.c **** 					   // 0x20 for stock frdm pin enable,
 533              		.loc 1 197 0
 534 008e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 535 0090 2A43     		orrs	r2, r2, r5
 536 0092 9A70     		strb	r2, [r3, #2]
 199:../source/main.c **** 
 537              		.loc 1 199 0
 538 0094 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 539 0096 42F02802 		orr	r2, r2, #40
 540 009a 1A72     		strb	r2, [r3, #8]
 541              	.LVL47:
 542              	.LBB151:
 543              	.LBB152:
 544              	.LBB153:
1676:../CMSIS/core_cm4.h ****   }
 545              		.loc 2 1676 0
 546 009c 914B     		ldr	r3, .L66+4
 547 009e 4FF00052 		mov	r2, #536870912
 548 00a2 5A60     		str	r2, [r3, #4]
 549              	.LVL48:
 550              	.LBE153:
 551              	.LBE152:
 552              	.LBE151:
 553              	.LBB154:
 554              	.LBB155:
 205:../drivers/fsl_lptmr.h **** 
 555              		.loc 3 205 0
 556 00a4 984A     		ldr	r2, .L66+40
 557 00a6 1368     		ldr	r3, [r2]
 558              	.LVL49:
 208:../drivers/fsl_lptmr.h ****     reg |= mask;
 559              		.loc 3 208 0
 560 00a8 23F08003 		bic	r3, r3, #128
 561              	.LVL50:
 209:../drivers/fsl_lptmr.h ****     base->CSR = reg;
 562              		.loc 3 209 0
 563 00ac 43F04003 		orr	r3, r3, #64
 564              	.LVL51:
 210:../drivers/fsl_lptmr.h **** }
 565              		.loc 3 210 0
 566 00b0 1360     		str	r3, [r2]
 567              	.LVL52:
 568              	.LBE155:
 569              	.LBE154:
 570              	.LBB156:
 571              	.LBB157:
 319:../drivers/fsl_lptmr.h **** }
 320:../drivers/fsl_lptmr.h **** 
 321:../drivers/fsl_lptmr.h **** /*!
 322:../drivers/fsl_lptmr.h ****  * @brief Reads the current timer counting value.
 323:../drivers/fsl_lptmr.h ****  *
 324:../drivers/fsl_lptmr.h ****  * This function returns the real-time timer counting value in a range from 0 to a
 325:../drivers/fsl_lptmr.h ****  * timer period.
 326:../drivers/fsl_lptmr.h ****  *
 327:../drivers/fsl_lptmr.h ****  * @note Call the utility macros provided in the fsl_common.h to convert ticks to usec or msec.
 328:../drivers/fsl_lptmr.h ****  *
 329:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 330:../drivers/fsl_lptmr.h ****  *
 331:../drivers/fsl_lptmr.h ****  * @return The current counter value in ticks
 332:../drivers/fsl_lptmr.h ****  */
 333:../drivers/fsl_lptmr.h **** static inline uint32_t LPTMR_GetCurrentTimerCount(LPTMR_Type *base)
 334:../drivers/fsl_lptmr.h **** {
 335:../drivers/fsl_lptmr.h ****     /* Must first write any value to the CNR. This synchronizes and registers the current value
 336:../drivers/fsl_lptmr.h ****      * of the CNR into a temporary register which can then be read
 337:../drivers/fsl_lptmr.h ****      */
 338:../drivers/fsl_lptmr.h ****     base->CNR = 0U;
 339:../drivers/fsl_lptmr.h ****     return (uint32_t)((base->CNR & LPTMR_CNR_COUNTER_MASK) >> LPTMR_CNR_COUNTER_SHIFT);
 340:../drivers/fsl_lptmr.h **** }
 341:../drivers/fsl_lptmr.h **** 
 342:../drivers/fsl_lptmr.h **** /*! @}*/
 343:../drivers/fsl_lptmr.h **** 
 344:../drivers/fsl_lptmr.h **** /*!
 345:../drivers/fsl_lptmr.h ****  * @name Timer Start and Stop
 346:../drivers/fsl_lptmr.h ****  * @{
 347:../drivers/fsl_lptmr.h ****  */
 348:../drivers/fsl_lptmr.h **** 
 349:../drivers/fsl_lptmr.h **** /*!
 350:../drivers/fsl_lptmr.h ****  * @brief Starts the timer.
 351:../drivers/fsl_lptmr.h ****  *
 352:../drivers/fsl_lptmr.h ****  * After calling this function, the timer counts up to the CMR register value.
 353:../drivers/fsl_lptmr.h ****  * Each time the timer reaches the CMR value and then increments, it generates a
 354:../drivers/fsl_lptmr.h ****  * trigger pulse and sets the timeout interrupt flag. An interrupt is also
 355:../drivers/fsl_lptmr.h ****  * triggered if the timer interrupt is enabled.
 356:../drivers/fsl_lptmr.h ****  *
 357:../drivers/fsl_lptmr.h ****  * @param base LPTMR peripheral base address
 358:../drivers/fsl_lptmr.h ****  */
 359:../drivers/fsl_lptmr.h **** static inline void LPTMR_StartTimer(LPTMR_Type *base)
 360:../drivers/fsl_lptmr.h **** {
 361:../drivers/fsl_lptmr.h ****     uint32_t reg = base->CSR;
 572              		.loc 3 361 0
 573 00b2 1368     		ldr	r3, [r2]
 574              	.LVL53:
 362:../drivers/fsl_lptmr.h **** 
 363:../drivers/fsl_lptmr.h ****     /* Clear the TCF bit to avoid clearing the w1c bit when writing back. */
 364:../drivers/fsl_lptmr.h ****     reg &= ~(LPTMR_CSR_TCF_MASK);
 575              		.loc 3 364 0
 576 00b4 23F08003 		bic	r3, r3, #128
 577              	.LVL54:
 365:../drivers/fsl_lptmr.h ****     reg |= LPTMR_CSR_TEN_MASK;
 578              		.loc 3 365 0
 579 00b8 2B43     		orrs	r3, r3, r5
 580              	.LVL55:
 366:../drivers/fsl_lptmr.h ****     base->CSR = reg;
 581              		.loc 3 366 0
 582 00ba 1360     		str	r3, [r2]
 583              	.LVL56:
 584              	.LBE157:
 585              	.LBE156:
 206:../source/main.c **** 	GPIO_PinInit(GPIOB, 22u, &LED_configOutput);	//red led as output
 586              		.loc 1 206 0
 587 00bc 1521     		movs	r1, #21
 588 00be 934A     		ldr	r2, .L66+44
 589 00c0 2046     		mov	r0, r4
 590 00c2 FFF7FEFF 		bl	GPIO_PinInit
 591              	.LVL57:
 207:../source/main.c **** 
 592              		.loc 1 207 0
 593 00c6 914A     		ldr	r2, .L66+44
 594 00c8 1621     		movs	r1, #22
 595 00ca 2046     		mov	r0, r4
 596 00cc FFF7FEFF 		bl	GPIO_PinInit
 597              	.LVL58:
 212:../source/main.c **** 	GPIO_PinInit(GPIOD, 1u, &LED_configOutput);
 598              		.loc 1 212 0
 599 00d0 8E4A     		ldr	r2, .L66+44
 600 00d2 0B21     		movs	r1, #11
 601 00d4 2046     		mov	r0, r4
 602 00d6 FFF7FEFF 		bl	GPIO_PinInit
 603              	.LVL59:
 213:../source/main.c **** 
 604              		.loc 1 213 0
 605 00da 2946     		mov	r1, r5
 606 00dc 8B4A     		ldr	r2, .L66+44
 607 00de 8C48     		ldr	r0, .L66+48
 608 00e0 FFF7FEFF 		bl	GPIO_PinInit
 609              	.LVL60:
 610              	.LBB158:
 611              	.LBB159:
 612              	.LBB160:
 191:../drivers/fsl_gpio.h **** }
 192:../drivers/fsl_gpio.h **** 
 193:../drivers/fsl_gpio.h **** /*!
 194:../drivers/fsl_gpio.h ****  * @brief Sets the output level of the multiple GPIO pins to the logic 1.
 195:../drivers/fsl_gpio.h ****  * @deprecated Do not use this function.  It has been superceded by @ref GPIO_PortSet.
 196:../drivers/fsl_gpio.h ****  */
 197:../drivers/fsl_gpio.h **** static inline void GPIO_SetPinsOutput(GPIO_Type *base, uint32_t mask)
 198:../drivers/fsl_gpio.h **** {
 199:../drivers/fsl_gpio.h ****     GPIO_PortSet(base, mask);
 200:../drivers/fsl_gpio.h **** }
 201:../drivers/fsl_gpio.h **** 
 202:../drivers/fsl_gpio.h **** /*!
 203:../drivers/fsl_gpio.h ****  * @brief Sets the output level of the multiple GPIO pins to the logic 0.
 204:../drivers/fsl_gpio.h ****  *
 205:../drivers/fsl_gpio.h ****  * @param base GPIO peripheral base pointer (GPIOA, GPIOB, GPIOC, and so on.)
 206:../drivers/fsl_gpio.h ****  * @param mask GPIO pin number macro
 207:../drivers/fsl_gpio.h ****  */
 208:../drivers/fsl_gpio.h **** static inline void GPIO_PortClear(GPIO_Type *base, uint32_t mask)
 209:../drivers/fsl_gpio.h **** {
 210:../drivers/fsl_gpio.h ****     base->PCOR = mask;
 613              		.loc 5 210 0
 614 00e4 4FF40063 		mov	r3, #2048
 615 00e8 A360     		str	r3, [r4, #8]
 616              	.LVL61:
 617              	.LBE160:
 618              	.LBE159:
 619              	.LBE158:
 221:../source/main.c **** 			"Reindeer IoT has started\r\nCommand \"iot\" to start executing reindeer track cycle\r\n"
 620              		.loc 1 221 0
 621 00ea 8A48     		ldr	r0, .L66+52
 622 00ec FFF7FEFF 		bl	puts
 623              	.LVL62:
 224:../source/main.c **** 			"Or enter normal AT commands here for SARA-N2\r\nModules powered on and booting now!\r\n");
 624              		.loc 1 224 0
 625 00f0 8948     		ldr	r0, .L66+56
 626 00f2 FFF7FEFF 		bl	puts
 627              	.LVL63:
 231:../source/main.c **** char testLon[11] = ("02534.554");
 628              		.loc 1 231 0
 629 00f6 894B     		ldr	r3, .L66+60
 630 00f8 5968     		ldr	r1, [r3, #4]	@ unaligned
 631 00fa 1868     		ldr	r0, [r3]	@ unaligned
 632 00fc 6A46     		mov	r2, sp
 633 00fe 03C2     		stmia	r2!, {r0, r1}
 232:../source/main.c **** 	strcpy(reindeerData.serialNum, "66666");
 634              		.loc 1 232 0
 635 0100 53F80B0F 		ldr	r0, [r3, #11]!	@ unaligned
 636 0104 5968     		ldr	r1, [r3, #4]	@ unaligned
 637 0106 1B89     		ldrh	r3, [r3, #8]	@ unaligned
 638 0108 03AA     		add	r2, sp, #12
 639 010a 03C2     		stmia	r2!, {r0, r1}
 231:../source/main.c **** char testLon[11] = ("02534.554");
 640              		.loc 1 231 0
 641 010c 0025     		movs	r5, #0
 233:../source/main.c **** 
 642              		.loc 1 233 0
 643 010e 8449     		ldr	r1, .L66+64
 232:../source/main.c **** 	strcpy(reindeerData.serialNum, "66666");
 644              		.loc 1 232 0
 645 0110 1380     		strh	r3, [r2]	@ unaligned
 233:../source/main.c **** 
 646              		.loc 1 233 0
 647 0112 09A8     		add	r0, sp, #36
 231:../source/main.c **** char testLon[11] = ("02534.554");
 648              		.loc 1 231 0
 649 0114 ADF80850 		strh	r5, [sp, #8]	@ movhi
 650 0118 8DF80A50 		strb	r5, [sp, #10]
 232:../source/main.c **** 	strcpy(reindeerData.serialNum, "66666");
 651              		.loc 1 232 0
 652 011c 8DF81650 		strb	r5, [sp, #22]
 233:../source/main.c **** 
 653              		.loc 1 233 0
 654 0120 FFF7FEFF 		bl	strcpy
 655              	.LVL64:
 235:../source/main.c **** 	strcpy(reindeerData.longitude, testLon);
 656              		.loc 1 235 0
 657 0124 6946     		mov	r1, sp
 658 0126 0DF12A00 		add	r0, sp, #42
 659 012a FFF7FEFF 		bl	strcpy
 660              	.LVL65:
 236:../source/main.c **** 	strcpy(reindeerData.dead, "false");
 661              		.loc 1 236 0
 662 012e 03A9     		add	r1, sp, #12
 663 0130 0DF13600 		add	r0, sp, #54
 664 0134 FFF7FEFF 		bl	strcpy
 665              	.LVL66:
 237:../source/main.c **** 	reindeerData.batteryLevel = 45;
 666              		.loc 1 237 0
 667 0138 7A49     		ldr	r1, .L66+68
 668 013a 0DF14200 		add	r0, sp, #66
 669 013e FFF7FEFF 		bl	strcpy
 670              	.LVL67:
 238:../source/main.c **** 	/*
 671              		.loc 1 238 0
 672 0142 2D23     		movs	r3, #45
 673 0144 8DF84830 		strb	r3, [sp, #72]
 674              	.L28:
 264:../source/main.c **** 			strcpy(reindeerData.dead, "true");
 675              		.loc 1 264 0
 676 0148 774B     		ldr	r3, .L66+72
 677 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 678 014c 052B     		cmp	r3, #5
 679 014e 4AD1     		bne	.L29
 265:../source/main.c **** 			printf("Woken by LPTMR, reindeer is !!!%s!!\r\n",
 680              		.loc 1 265 0
 681 0150 7649     		ldr	r1, .L66+76
 682 0152 0DF14200 		add	r0, sp, #66
 683 0156 FFF7FEFF 		bl	strcpy
 684              	.LVL68:
 266:../source/main.c **** 					reindeerData.dead);
 685              		.loc 1 266 0
 686 015a 0DF14201 		add	r1, sp, #66
 687 015e 7448     		ldr	r0, .L66+80
 688 0160 FFF7FEFF 		bl	printf
 689              	.LVL69:
 270:../source/main.c **** 					printf(GPS_recBuf);
 690              		.loc 1 270 0
 691 0164 734A     		ldr	r2, .L66+84
 692              	.L30:
 693 0166 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 694 0168 002B     		cmp	r3, #0
 695 016a FCD0     		beq	.L30
 696              	.LBB161:
 271:../source/main.c **** 					printf("\r\n"); //First print out whole buffer
 697              		.loc 1 271 0
 698 016c 7248     		ldr	r0, .L66+88
 699 016e FFF7FEFF 		bl	printf
 700              	.LVL70:
 272:../source/main.c **** 
 701              		.loc 1 272 0
 702 0172 7248     		ldr	r0, .L66+92
 703 0174 FFF7FEFF 		bl	puts
 704              	.LVL71:
 274:../source/main.c **** 					char testLon[12] = ("02530.56951");
 705              		.loc 1 274 0
 706 0178 714A     		ldr	r2, .L66+96
 707 017a 1068     		ldr	r0, [r2]	@ unaligned
 708 017c 5168     		ldr	r1, [r2, #4]	@ unaligned
 709 017e 06AB     		add	r3, sp, #24
 710 0180 03C3     		stmia	r3!, {r0, r1}
 711 0182 1189     		ldrh	r1, [r2, #8]	@ unaligned
 712 0184 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 713 0186 9A70     		strb	r2, [r3, #2]
 275:../source/main.c **** 
 714              		.loc 1 275 0
 715 0188 6E4A     		ldr	r2, .L66+100
 274:../source/main.c **** 					char testLon[12] = ("02530.56951");
 716              		.loc 1 274 0
 717 018a 1980     		strh	r1, [r3]	@ unaligned
 275:../source/main.c **** 
 718              		.loc 1 275 0
 719 018c 1068     		ldr	r0, [r2]	@ unaligned
 720 018e 5168     		ldr	r1, [r2, #4]	@ unaligned
 274:../source/main.c **** 					char testLon[12] = ("02530.56951");
 721              		.loc 1 274 0
 722 0190 0023     		movs	r3, #0
 723 0192 8DF82330 		strb	r3, [sp, #35]
 275:../source/main.c **** 
 724              		.loc 1 275 0
 725 0196 13AB     		add	r3, sp, #76
 726 0198 03C3     		stmia	r3!, {r0, r1}
 727 019a 9068     		ldr	r0, [r2, #8]	@ unaligned
 728 019c 1860     		str	r0, [r3]
 277:../source/main.c **** 					strcpy(reindeerData.longitude, testLon);
 729              		.loc 1 277 0
 730 019e 06A9     		add	r1, sp, #24
 731 01a0 0DF12A00 		add	r0, sp, #42
 732 01a4 FFF7FEFF 		bl	strcpy
 733              	.LVL72:
 278:../source/main.c **** 					break;
 734              		.loc 1 278 0
 735 01a8 13A9     		add	r1, sp, #76
 736 01aa 0DF13600 		add	r0, sp, #54
 737 01ae FFF7FEFF 		bl	strcpy
 738              	.LVL73:
 739              	.LBE161:
 297:../source/main.c **** 			printf("Parsed longitude: %s\r\n", reindeerData.longitude);
 740              		.loc 1 297 0
 741 01b2 0DF12A01 		add	r1, sp, #42
 742 01b6 6448     		ldr	r0, .L66+104
 743 01b8 FFF7FEFF 		bl	printf
 744              	.LVL74:
 298:../source/main.c **** 			break;
 745              		.loc 1 298 0
 746 01bc 0DF13601 		add	r1, sp, #54
 747 01c0 6248     		ldr	r0, .L66+108
 748 01c2 FFF7FEFF 		bl	printf
 749              	.LVL75:
 750              	.L31:
 303:../source/main.c **** 
 304:../source/main.c **** 			if (strstr(PC_recBuf, "iot") != NULL) {
 305:../source/main.c **** 				printf("Starting Reindeer IoT cycle\r\n");
 306:../source/main.c **** 				break;
 307:../source/main.c **** 			} else if (strstr(PC_recBuf, "gpsinfo=1") != NULL) {
 308:../source/main.c **** 				GPIO_ClearPinsOutput(GPIOD, 1 << 1u);
 309:../source/main.c **** 				streamGps = 1;
 310:../source/main.c **** 			} else if (strstr(PC_recBuf, "gpsinfo=0") != NULL) {
 311:../source/main.c **** 				GPIO_SetPinsOutput(GPIOD, 1 << 1u);
 312:../source/main.c **** 				streamGps = 0;
 313:../source/main.c **** 			} else if (strstr(PC_recBuf, "rfoff") != NULL) {
 314:../source/main.c **** 				GPIO_ClearPinsOutput(GPIOB, 1 << 11u); //Power on RF modules
 315:../source/main.c **** 			} else if (strstr(PC_recBuf, "rfon") != NULL) {
 316:../source/main.c **** 				GPIO_SetPinsOutput(GPIOB, 1 << 11u); //Power on RF modules
 317:../source/main.c **** 			} else if (strstr(PC_recBuf, "\xb5\x62") != NULL) //if input is UBX command!
 318:../source/main.c **** 			{
 319:../source/main.c **** 				printf("send to gps\r\n");
 320:../source/main.c **** 				uint8_t ubxMsgLen = calcUbxCrc(PC_recBuf + 2); //Calculate UBX checksum and add it to the messa
 321:../source/main.c **** 				UART2_send(PC_recBuf, ubxMsgLen); //Send UBX message to module
 322:../source/main.c **** 			} else {
 323:../source/main.c **** 
 324:../source/main.c **** 				UART3_send(PC_recBuf);
 325:../source/main.c **** 
 326:../source/main.c **** 			}
 327:../source/main.c **** 			memset(PC_recBuf, 0, strlen(PC_recBuf));
 328:../source/main.c **** 			PC_strReady = 0;
 329:../source/main.c **** 			PC_bufPtr = 0;
 330:../source/main.c **** 		}
 331:../source/main.c **** 
 332:../source/main.c **** 		if (UART3_strReady) {
 333:../source/main.c **** 			moduleResponseTimeout = millis() + RESPONSE_TIMEOUT_NORMAL_VALUE; //reset timeout to initial val
 334:../source/main.c **** 
 335:../source/main.c **** 			while (millis() < moduleResponseTimeout)
 336:../source/main.c **** 
 337:../source/main.c **** 			{
 338:../source/main.c **** 
 339:../source/main.c **** 				if (breakIfAtOk()) {
 340:../source/main.c **** 					break;
 341:../source/main.c **** 				}
 342:../source/main.c **** 
 343:../source/main.c **** 			}
 344:../source/main.c **** 
 345:../source/main.c **** 			//now the timeout has expired since last character had arrived, so we can process data
 346:../source/main.c **** 
 347:../source/main.c **** 			printf(UART3_recBuf);
 348:../source/main.c **** 			printf("\r\n");
 349:../source/main.c **** 			memset(UART3_recBuf, 0, 500);
 350:../source/main.c **** 			UART3_bufPtr = 0;
 351:../source/main.c **** 			UART3_strReady = 0;
 352:../source/main.c **** 		}
 353:../source/main.c **** 
 354:../source/main.c **** 		/*
 355:../source/main.c **** 		 * If GPS string is ready and GPS data streaming is enabled, enter here to process GPS data buffe
 356:../source/main.c **** 		 */
 357:../source/main.c **** 		if (GPS_strReady && streamGps) {
 358:../source/main.c **** 
 359:../source/main.c **** 			printf(GPS_recBuf);
 360:../source/main.c **** 			printf("\r\n"); //First print out whole buffer
 361:../source/main.c **** 
 362:../source/main.c **** 			if (getGPS()) {
 363:../source/main.c **** 				//char testLat[12] = ("6500.02359");
 364:../source/main.c **** 				//char testLon[12] = ("02530.56951");
 365:../source/main.c **** 
 366:../source/main.c **** 				//parseData(testLat,testLon);
 367:../source/main.c **** 
 368:../source/main.c **** 				strcpy(reindeerData.latitude, parsedLat);
 369:../source/main.c **** 				strcpy(reindeerData.longitude, parsedLon);
 370:../source/main.c **** 				break;
 371:../source/main.c **** 			}
 372:../source/main.c **** 
 373:../source/main.c **** 			printf("Parsed latitude: %s\r\n", reindeerData.latitude);
 374:../source/main.c **** 			printf("Parsed longitude: %s\r\n", reindeerData.longitude);
 375:../source/main.c **** 
 376:../source/main.c **** 			char* ubxResponseStartPtr = strstr(GPS_recBuf, "\xb5\x62"); //Find pointer to UBX header. If the
 377:../source/main.c **** 																		//will be NULL
 378:../source/main.c **** 
 379:../source/main.c **** 			if (ubxResponseStartPtr != NULL) //If pointer is not null, it means UBX response header is found
 380:../source/main.c **** 			{
 381:../source/main.c **** 				printf("Found UBX response\r\n");
 382:../source/main.c **** 
 383:../source/main.c **** 				uint8_t responseLength = *(ubxResponseStartPtr + 4); //Find out UBX response length, it is alwa
 384:../source/main.c **** 																	 //from beginning of the packet. * means dereferencing pointer
 385:../source/main.c **** 				//dereferencing means "accessing the value where pointer points"
 386:../source/main.c **** 
 387:../source/main.c **** 				printf("UBX response length: %02x\r\n", responseLength);
 388:../source/main.c **** 
 389:../source/main.c **** 				printUbxResponseHex(ubxResponseStartPtr,
 390:../source/main.c **** 						responseLength + 6 + 2); //Print UBX response message. Function wants to know
 391:../source/main.c **** 				//how many chars to print. We must add 6+2 to print header and crc too
 392:../source/main.c **** 			}
 393:../source/main.c **** 
 394:../source/main.c **** 			memset(GPS_recBuf, 0, 600);
 395:../source/main.c **** 			GPS_bufPtr = 0;
 396:../source/main.c **** 			GPS_strReady = 0;
 397:../source/main.c **** 		}
 398:../source/main.c **** 
 399:../source/main.c **** 	}
 400:../source/main.c **** 
 401:../source/main.c **** 	/*
 402:../source/main.c **** 	 * Assemble data to json format and then to POST message
 403:../source/main.c **** 	 */
 404:../source/main.c **** 
 405:../source/main.c **** 	uint8_t msgLen = assembleMqtt(&reindeerData, mqttMessage);
 751              		.loc 1 405 0
 752 01c6 13A9     		add	r1, sp, #76
 753 01c8 09A8     		add	r0, sp, #36
 754 01ca FFF7FEFF 		bl	assembleMqtt
 755              	.LVL76:
 406:../source/main.c **** 
 407:../source/main.c **** 	//NB_send_msg(mqttMessage, msgLen);
 408:../source/main.c **** 
 409:../source/main.c **** 	NB_create_pdp_send(mqttMessage, msgLen);
 756              		.loc 1 409 0
 757 01ce 0146     		mov	r1, r0
 758 01d0 13A8     		add	r0, sp, #76
 759              	.LVL77:
 760 01d2 FFF7FEFF 		bl	NB_create_pdp_send
 761              	.LVL78:
 410:../source/main.c **** 	printf("Roger\r\n");
 762              		.loc 1 410 0
 763 01d6 5E48     		ldr	r0, .L66+112
 764 01d8 FFF7FEFF 		bl	puts
 765              	.LVL79:
 411:../source/main.c **** 	//parseData(testLat, testLon);
 412:../source/main.c **** }
 766              		.loc 1 412 0
 767 01dc 0020     		movs	r0, #0
 768 01de 0DF5057D 		add	sp, sp, #532
 769              		.cfi_remember_state
 770              		.cfi_def_cfa_offset 28
 771              		@ sp needed
 772 01e2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 773              	.L29:
 774              		.cfi_restore_state
 302:../source/main.c **** 
 775              		.loc 1 302 0
 776 01e6 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 777 01e8 0BB3     		cbz	r3, .L32
 304:../source/main.c **** 				printf("Starting Reindeer IoT cycle\r\n");
 778              		.loc 1 304 0
 779 01ea 5A49     		ldr	r1, .L66+116
 780 01ec 5A48     		ldr	r0, .L66+120
 781 01ee FFF7FEFF 		bl	strstr
 782              	.LVL80:
 783 01f2 18B1     		cbz	r0, .L33
 305:../source/main.c **** 				break;
 784              		.loc 1 305 0
 785 01f4 5948     		ldr	r0, .L66+124
 786 01f6 FFF7FEFF 		bl	puts
 787              	.LVL81:
 306:../source/main.c **** 			} else if (strstr(PC_recBuf, "gpsinfo=1") != NULL) {
 788              		.loc 1 306 0
 789 01fa E4E7     		b	.L31
 790              	.L33:
 307:../source/main.c **** 				GPIO_ClearPinsOutput(GPIOD, 1 << 1u);
 791              		.loc 1 307 0
 792 01fc 5849     		ldr	r1, .L66+128
 793 01fe 5648     		ldr	r0, .L66+120
 794 0200 FFF7FEFF 		bl	strstr
 795              	.LVL82:
 796 0204 0546     		mov	r5, r0
 797 0206 0028     		cmp	r0, #0
 798 0208 55D0     		beq	.L34
 799              	.LVL83:
 800              	.LBB162:
 801              	.LBB163:
 802              	.LBB164:
 803              		.loc 5 210 0
 804 020a 0223     		movs	r3, #2
 805 020c C8F80830 		str	r3, [r8, #8]
 806              	.LVL84:
 807              	.LBE164:
 808              	.LBE163:
 809              	.LBE162:
 309:../source/main.c **** 			} else if (strstr(PC_recBuf, "gpsinfo=0") != NULL) {
 810              		.loc 1 309 0
 811 0210 544B     		ldr	r3, .L66+132
 812 0212 0122     		movs	r2, #1
 813 0214 1A70     		strb	r2, [r3]
 814              	.L35:
 327:../source/main.c **** 			PC_strReady = 0;
 815              		.loc 1 327 0
 816 0216 5048     		ldr	r0, .L66+120
 817 0218 FFF7FEFF 		bl	strlen
 818              	.LVL85:
 819 021c 0021     		movs	r1, #0
 820 021e 0246     		mov	r2, r0
 821 0220 4D48     		ldr	r0, .L66+120
 822 0222 FFF7FEFF 		bl	memset
 823              	.LVL86:
 329:../source/main.c **** 		}
 824              		.loc 1 329 0
 825 0226 504A     		ldr	r2, .L66+136
 328:../source/main.c **** 			PC_bufPtr = 0;
 826              		.loc 1 328 0
 827 0228 0023     		movs	r3, #0
 828 022a 3B70     		strb	r3, [r7]
 329:../source/main.c **** 		}
 829              		.loc 1 329 0
 830 022c 1380     		strh	r3, [r2]	@ movhi
 831              	.L32:
 332:../source/main.c **** 			moduleResponseTimeout = millis() + RESPONSE_TIMEOUT_NORMAL_VALUE; //reset timeout to initial val
 832              		.loc 1 332 0
 833 022e 4F4E     		ldr	r6, .L66+140
 834 0230 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 835 0232 F3B1     		cbz	r3, .L40
 333:../source/main.c **** 
 836              		.loc 1 333 0
 837 0234 FFF7FEFF 		bl	millis
 838              	.LVL87:
 839 0238 4D4D     		ldr	r5, .L66+144
 840 023a 00F5FA60 		add	r0, r0, #2000
 841 023e 2860     		str	r0, [r5]
 842              	.L41:
 335:../source/main.c **** 
 843              		.loc 1 335 0
 844 0240 FFF7FEFF 		bl	millis
 845              	.LVL88:
 846 0244 2B68     		ldr	r3, [r5]
 847 0246 9842     		cmp	r0, r3
 848 0248 03D2     		bcs	.L43
 339:../source/main.c **** 					break;
 849              		.loc 1 339 0
 850 024a FFF7FEFF 		bl	breakIfAtOk
 851              	.LVL89:
 852 024e 0028     		cmp	r0, #0
 853 0250 F6D0     		beq	.L41
 854              	.L43:
 347:../source/main.c **** 			printf("\r\n");
 855              		.loc 1 347 0
 856 0252 4848     		ldr	r0, .L66+148
 857 0254 FFF7FEFF 		bl	printf
 858              	.LVL90:
 348:../source/main.c **** 			memset(UART3_recBuf, 0, 500);
 859              		.loc 1 348 0
 860 0258 3848     		ldr	r0, .L66+92
 861 025a FFF7FEFF 		bl	puts
 862              	.LVL91:
 349:../source/main.c **** 			UART3_bufPtr = 0;
 863              		.loc 1 349 0
 864 025e 4FF4FA72 		mov	r2, #500
 865 0262 0021     		movs	r1, #0
 866 0264 4348     		ldr	r0, .L66+148
 867 0266 FFF7FEFF 		bl	memset
 868              	.LVL92:
 350:../source/main.c **** 			UART3_strReady = 0;
 869              		.loc 1 350 0
 870 026a 434A     		ldr	r2, .L66+152
 871 026c 0023     		movs	r3, #0
 872 026e 1380     		strh	r3, [r2]	@ movhi
 351:../source/main.c **** 		}
 873              		.loc 1 351 0
 874 0270 3370     		strb	r3, [r6]
 875              	.L40:
 357:../source/main.c **** 
 876              		.loc 1 357 0
 877 0272 DFF8C090 		ldr	r9, .L66+84
 878 0276 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 879 027a 002B     		cmp	r3, #0
 880 027c 3FF464AF 		beq	.L28
 357:../source/main.c **** 
 881              		.loc 1 357 0 is_stmt 0 discriminator 1
 882 0280 384B     		ldr	r3, .L66+132
 883 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 884 0284 002B     		cmp	r3, #0
 885 0286 3FF45FAF 		beq	.L28
 886              	.LBB165:
 359:../source/main.c **** 			printf("\r\n"); //First print out whole buffer
 887              		.loc 1 359 0 is_stmt 1
 888 028a 2B48     		ldr	r0, .L66+88
 889 028c FFF7FEFF 		bl	printf
 890              	.LVL93:
 360:../source/main.c **** 
 891              		.loc 1 360 0
 892 0290 2A48     		ldr	r0, .L66+92
 893 0292 FFF7FEFF 		bl	puts
 894              	.LVL94:
 362:../source/main.c **** 				//char testLat[12] = ("6500.02359");
 895              		.loc 1 362 0
 896 0296 FFF7FEFF 		bl	getGPS
 897              	.LVL95:
 898 029a 0028     		cmp	r0, #0
 899 029c 00F09380 		beq	.L45
 368:../source/main.c **** 				strcpy(reindeerData.longitude, parsedLon);
 900              		.loc 1 368 0
 901 02a0 3649     		ldr	r1, .L66+156
 902 02a2 0DF12A00 		add	r0, sp, #42
 903 02a6 FFF7FEFF 		bl	strcpy
 904              	.LVL96:
 369:../source/main.c **** 				break;
 905              		.loc 1 369 0
 906 02aa 3549     		ldr	r1, .L66+160
 907 02ac 0DF13600 		add	r0, sp, #54
 908 02b0 FFF7FEFF 		bl	strcpy
 909              	.LVL97:
 370:../source/main.c **** 			}
 910              		.loc 1 370 0
 911 02b4 87E7     		b	.L31
 912              	.L34:
 913              	.LBE165:
 310:../source/main.c **** 				GPIO_SetPinsOutput(GPIOD, 1 << 1u);
 914              		.loc 1 310 0
 915 02b6 3349     		ldr	r1, .L66+164
 916 02b8 2748     		ldr	r0, .L66+120
 917 02ba FFF7FEFF 		bl	strstr
 918              	.LVL98:
 919 02be 28B1     		cbz	r0, .L36
 920              	.LVL99:
 921              	.LBB167:
 922              	.LBB149:
 923              	.LBB148:
 190:../drivers/fsl_gpio.h **** }
 924              		.loc 5 190 0
 925 02c0 0223     		movs	r3, #2
 926 02c2 C8F80430 		str	r3, [r8, #4]
 927              	.LVL100:
 928              	.LBE148:
 929              	.LBE149:
 930              	.LBE167:
 312:../source/main.c **** 			} else if (strstr(PC_recBuf, "rfoff") != NULL) {
 931              		.loc 1 312 0
 932 02c6 274B     		ldr	r3, .L66+132
 933 02c8 1D70     		strb	r5, [r3]
 934 02ca A4E7     		b	.L35
 935              	.L36:
 313:../source/main.c **** 				GPIO_ClearPinsOutput(GPIOB, 1 << 11u); //Power on RF modules
 936              		.loc 1 313 0
 937 02cc 2E49     		ldr	r1, .L66+168
 938 02ce 2248     		ldr	r0, .L66+120
 939 02d0 FFF7FEFF 		bl	strstr
 940              	.LVL101:
 941 02d4 0028     		cmp	r0, #0
 942 02d6 59D0     		beq	.L37
 943              	.LVL102:
 944              	.LBB168:
 945              	.LBB169:
 946              	.LBB170:
 947              		.loc 5 210 0
 948 02d8 4FF40063 		mov	r3, #2048
 949 02dc A360     		str	r3, [r4, #8]
 950              	.LVL103:
 951 02de 9AE7     		b	.L35
 952              	.L67:
 953              		.align	2
 954              	.L66:
 955 02e0 00D00740 		.word	1074253824
 956 02e4 00E100E0 		.word	-536813312
 957 02e8 00000000 		.word	ms_ticks
 958 02ec 10E000E0 		.word	-536813552
 959 02f0 00ED00E0 		.word	-536810240
 960 02f4 00E00740 		.word	1074257920
 961 02f8 40F00F40 		.word	1074786368
 962 02fc 00000000 		.word	.LANCHOR5
 963 0300 00000000 		.word	smc_power_mode_vlls_config
 964 0304 00C00740 		.word	1074249728
 965 0308 00000440 		.word	1074003968
 966 030c 00000000 		.word	.LANCHOR1
 967 0310 C0F00F40 		.word	1074786496
 968 0314 00000000 		.word	.LC0
 969 0318 8F000000 		.word	.LC1
 970 031c 00000000 		.word	.LANCHOR2
 971 0320 E2000000 		.word	.LC4
 972 0324 E8000000 		.word	.LC5
 973 0328 00000000 		.word	.LANCHOR3
 974 032c EE000000 		.word	.LC6
 975 0330 F3000000 		.word	.LC7
 976 0334 00000000 		.word	.LANCHOR4
 977 0338 00000000 		.word	GPS_recBuf
 978 033c 19010000 		.word	.LC8
 979 0340 16000000 		.word	.LANCHOR2+22
 980 0344 CF010000 		.word	.LC10
 981 0348 1B010000 		.word	.LC11
 982 034c 31010000 		.word	.LC12
 983 0350 C8010000 		.word	.LC23
 984 0354 48010000 		.word	.LC13
 985 0358 00000000 		.word	.LANCHOR6
 986 035c 4C010000 		.word	.LC14
 987 0360 69010000 		.word	.LC15
 988 0364 00000000 		.word	.LANCHOR7
 989 0368 00000000 		.word	.LANCHOR8
 990 036c 00000000 		.word	.LANCHOR0
 991 0370 00000000 		.word	.LANCHOR9
 992 0374 00000000 		.word	UART3_recBuf
 993 0378 00000000 		.word	.LANCHOR10
 994 037c 00000000 		.word	parsedLat
 995 0380 00000000 		.word	parsedLon
 996 0384 73010000 		.word	.LC16
 997 0388 7D010000 		.word	.LC17
 998              	.LVL104:
 999              	.L37:
 1000              	.LBE170:
 1001              	.LBE169:
 1002              	.LBE168:
 315:../source/main.c **** 				GPIO_SetPinsOutput(GPIOB, 1 << 11u); //Power on RF modules
 1003              		.loc 1 315 0
 1004 038c 2349     		ldr	r1, .L68
 1005 038e 2448     		ldr	r0, .L68+4
 1006 0390 FFF7FEFF 		bl	strstr
 1007              	.LVL105:
 1008 0394 18B1     		cbz	r0, .L38
 1009              	.LVL106:
 1010              	.LBB171:
 1011              	.LBB172:
 1012              	.LBB173:
 190:../drivers/fsl_gpio.h **** }
 1013              		.loc 5 190 0
 1014 0396 4FF40063 		mov	r3, #2048
 1015 039a 6360     		str	r3, [r4, #4]
 1016              	.LVL107:
 1017 039c 3BE7     		b	.L35
 1018              	.LVL108:
 1019              	.L38:
 1020              	.LBE173:
 1021              	.LBE172:
 1022              	.LBE171:
 317:../source/main.c **** 			{
 1023              		.loc 1 317 0
 1024 039e 2149     		ldr	r1, .L68+8
 1025 03a0 1F48     		ldr	r0, .L68+4
 1026 03a2 FFF7FEFF 		bl	strstr
 1027              	.LVL109:
 1028 03a6 50B1     		cbz	r0, .L39
 1029              	.LBB174:
 319:../source/main.c **** 				uint8_t ubxMsgLen = calcUbxCrc(PC_recBuf + 2); //Calculate UBX checksum and add it to the messa
 1030              		.loc 1 319 0
 1031 03a8 1F48     		ldr	r0, .L68+12
 1032 03aa FFF7FEFF 		bl	puts
 1033              	.LVL110:
 320:../source/main.c **** 				UART2_send(PC_recBuf, ubxMsgLen); //Send UBX message to module
 1034              		.loc 1 320 0
 1035 03ae 1F48     		ldr	r0, .L68+16
 1036 03b0 FFF7FEFF 		bl	calcUbxCrc
 1037              	.LVL111:
 321:../source/main.c **** 			} else {
 1038              		.loc 1 321 0
 1039 03b4 0146     		mov	r1, r0
 1040 03b6 1A48     		ldr	r0, .L68+4
 1041              	.LVL112:
 1042 03b8 FFF7FEFF 		bl	UART2_send
 1043              	.LVL113:
 1044              	.LBE174:
 1045 03bc 2BE7     		b	.L35
 1046              	.L39:
 324:../source/main.c **** 
 1047              		.loc 1 324 0
 1048 03be 1848     		ldr	r0, .L68+4
 1049 03c0 FFF7FEFF 		bl	UART3_send
 1050              	.LVL114:
 1051 03c4 27E7     		b	.L35
 1052              	.L45:
 1053              	.LBB175:
 373:../source/main.c **** 			printf("Parsed longitude: %s\r\n", reindeerData.longitude);
 1054              		.loc 1 373 0
 1055 03c6 0DF12A01 		add	r1, sp, #42
 1056 03ca 1948     		ldr	r0, .L68+20
 1057 03cc FFF7FEFF 		bl	printf
 1058              	.LVL115:
 374:../source/main.c **** 
 1059              		.loc 1 374 0
 1060 03d0 0DF13601 		add	r1, sp, #54
 1061 03d4 1748     		ldr	r0, .L68+24
 1062 03d6 FFF7FEFF 		bl	printf
 1063              	.LVL116:
 376:../source/main.c **** 																		//will be NULL
 1064              		.loc 1 376 0
 1065 03da 1249     		ldr	r1, .L68+8
 1066 03dc 1648     		ldr	r0, .L68+28
 1067 03de FFF7FEFF 		bl	strstr
 1068              	.LVL117:
 379:../source/main.c **** 			{
 1069              		.loc 1 379 0
 1070 03e2 0646     		mov	r6, r0
 1071 03e4 68B1     		cbz	r0, .L46
 1072              	.LBB166:
 381:../source/main.c **** 
 1073              		.loc 1 381 0
 1074 03e6 1548     		ldr	r0, .L68+32
 1075              	.LVL118:
 1076 03e8 FFF7FEFF 		bl	puts
 1077              	.LVL119:
 383:../source/main.c **** 																	 //from beginning of the packet. * means dereferencing pointer
 1078              		.loc 1 383 0
 1079 03ec 3579     		ldrb	r5, [r6, #4]	@ zero_extendqisi2
 1080              	.LVL120:
 387:../source/main.c **** 
 1081              		.loc 1 387 0
 1082 03ee 1448     		ldr	r0, .L68+36
 1083 03f0 2946     		mov	r1, r5
 1084 03f2 FFF7FEFF 		bl	printf
 1085              	.LVL121:
 389:../source/main.c **** 						responseLength + 6 + 2); //Print UBX response message. Function wants to know
 1086              		.loc 1 389 0
 1087 03f6 05F10801 		add	r1, r5, #8
 1088 03fa C9B2     		uxtb	r1, r1
 1089 03fc 3046     		mov	r0, r6
 1090 03fe FFF7FEFF 		bl	printUbxResponseHex
 1091              	.LVL122:
 1092              	.L46:
 1093              	.LBE166:
 394:../source/main.c **** 			GPS_bufPtr = 0;
 1094              		.loc 1 394 0
 1095 0402 4FF41672 		mov	r2, #600
 1096 0406 0021     		movs	r1, #0
 1097 0408 0B48     		ldr	r0, .L68+28
 1098 040a FFF7FEFF 		bl	memset
 1099              	.LVL123:
 395:../source/main.c **** 			GPS_strReady = 0;
 1100              		.loc 1 395 0
 1101 040e 0D4A     		ldr	r2, .L68+40
 1102 0410 0023     		movs	r3, #0
 1103 0412 1380     		strh	r3, [r2]	@ movhi
 396:../source/main.c **** 		}
 1104              		.loc 1 396 0
 1105 0414 89F80030 		strb	r3, [r9]
 1106 0418 96E6     		b	.L28
 1107              	.L69:
 1108 041a 00BF     		.align	2
 1109              	.L68:
 1110 041c 83010000 		.word	.LC18
 1111 0420 00000000 		.word	.LANCHOR6
 1112 0424 88010000 		.word	.LC19
 1113 0428 8B010000 		.word	.LC20
 1114 042c 02000000 		.word	.LANCHOR6+2
 1115 0430 1B010000 		.word	.LC11
 1116 0434 31010000 		.word	.LC12
 1117 0438 00000000 		.word	GPS_recBuf
 1118 043c 98010000 		.word	.LC21
 1119 0440 AC010000 		.word	.LC22
 1120 0444 00000000 		.word	.LANCHOR11
 1121              	.LBE175:
 1122              		.cfi_endproc
 1123              	.LFE226:
 1125              		.section	.text.LLWU_IRQHandler,"ax",%progbits
 1126              		.align	1
 1127              		.global	LLWU_IRQHandler
 1128              		.syntax unified
 1129              		.thumb
 1130              		.thumb_func
 1131              		.fpu fpv4-sp-d16
 1133              	LLWU_IRQHandler:
 1134              	.LFB227:
 413:../source/main.c **** /*
 414:../source/main.c ****  void PORTC_IRQHandler() {
 415:../source/main.c **** 
 416:../source/main.c ****  PORTC->PCR[6] |= 0x01000000;
 417:../source/main.c **** 
 418:../source/main.c ****  while ( PORTC->PCR[6] & 0x01000000) {
 419:../source/main.c **** 
 420:../source/main.c ****  }
 421:../source/main.c **** 
 422:../source/main.c **** 			GPIO_PortToggle(GPIOB, 1 << 21u); //toggle BLUE led to indicate data arrived from computer
 423:../source/main.c **** 
 424:../source/main.c **** 
 425:../source/main.c **** 
 426:../source/main.c **** 
 427:../source/main.c **** 	LPTMR_Deinit(LPTMR0);			// Deinitiate timer to reset timer counte
 428:../source/main.c **** 	LPTMR_Init(LPTMR0, &lptmr_config);
 429:../source/main.c **** 	LPTMR_SetTimerPeriod(LPTMR0, 5000);  // 3000 for 20hz data rat
 430:../source/main.c **** 	LPTMR_EnableInterrupts(LPTMR0, LPTMR_CSR_TIE_MASK);	//Sets Timer Interrupt Enable bit to 1
 431:../source/main.c **** 	LPTMR_StartTimer(LPTMR0);
 432:../source/main.c **** 
 433:../source/main.c **** 
 434:../source/main.c **** 
 435:../source/main.c **** }
 436:../source/main.c **** 
 437:../source/main.c **** 
 438:../source/main.c ****  }
 439:../source/main.c **** 
 440:../source/main.c ****  */
 441:../source/main.c **** 
 442:../source/main.c **** void LLWU_IRQHandler() {
 1135              		.loc 1 442 0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 0
 1138              		@ frame_needed = 0, uses_anonymous_args = 0
 1139              		@ link register save eliminated.
 443:../source/main.c **** 
 444:../source/main.c **** 	if ( LLWU->F3 & 0x01) {	// 1 = LPTMR interrupt, 2 = Accel interrupt, 0 = No interrupts
 1140              		.loc 1 444 0
 1141 0000 0F4B     		ldr	r3, .L76
 1142 0002 DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 1143 0004 D107     		lsls	r1, r2, #31
 1144 0006 10D5     		bpl	.L71
 445:../source/main.c **** 		wake = 1;
 1145              		.loc 1 445 0
 1146 0008 0E4B     		ldr	r3, .L76+4
 1147 000a 0122     		movs	r2, #1
 1148 000c 1A70     		strb	r2, [r3]
 1149              	.LVL124:
 1150              	.LBB178:
 1151              	.LBB179:
 1152              		.file 6 "../drivers/fsl_clock.h"
   1:../drivers/fsl_clock.h **** /*
   2:../drivers/fsl_clock.h ****  * The Clear BSD License
   3:../drivers/fsl_clock.h ****  * Copyright (c) 2015, Freescale Semiconductor, Inc.
   4:../drivers/fsl_clock.h ****  * Copyright (c) 2016 - 2017 , NXP
   5:../drivers/fsl_clock.h ****  * All rights reserved.
   6:../drivers/fsl_clock.h ****  *
   7:../drivers/fsl_clock.h ****  *
   8:../drivers/fsl_clock.h ****  * Redistribution and use in source and binary forms, with or without modification,
   9:../drivers/fsl_clock.h ****  * are permitted (subject to the limitations in the disclaimer below) provided
  10:../drivers/fsl_clock.h ****  * that the following conditions are met:
  11:../drivers/fsl_clock.h ****  *
  12:../drivers/fsl_clock.h ****  * o Redistributions of source code must retain the above copyright notice, this list
  13:../drivers/fsl_clock.h ****  *   of conditions and the following disclaimer.
  14:../drivers/fsl_clock.h ****  *
  15:../drivers/fsl_clock.h ****  * o Redistributions in binary form must reproduce the above copyright notice, this
  16:../drivers/fsl_clock.h ****  *   list of conditions and the following disclaimer in the documentation and/or
  17:../drivers/fsl_clock.h ****  *   other materials provided with the distribution.
  18:../drivers/fsl_clock.h ****  *
  19:../drivers/fsl_clock.h ****  * o Neither the name of copyright holder nor the names of its
  20:../drivers/fsl_clock.h ****  *   contributors may be used to endorse or promote products derived from this
  21:../drivers/fsl_clock.h ****  *   software without specific prior written permission.
  22:../drivers/fsl_clock.h ****  *
  23:../drivers/fsl_clock.h ****  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
  24:../drivers/fsl_clock.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  25:../drivers/fsl_clock.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  26:../drivers/fsl_clock.h ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:../drivers/fsl_clock.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  28:../drivers/fsl_clock.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  29:../drivers/fsl_clock.h ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  30:../drivers/fsl_clock.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  31:../drivers/fsl_clock.h ****  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  32:../drivers/fsl_clock.h ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  33:../drivers/fsl_clock.h ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../drivers/fsl_clock.h ****  */
  35:../drivers/fsl_clock.h **** 
  36:../drivers/fsl_clock.h **** #ifndef _FSL_CLOCK_H_
  37:../drivers/fsl_clock.h **** #define _FSL_CLOCK_H_
  38:../drivers/fsl_clock.h **** 
  39:../drivers/fsl_clock.h **** #include "fsl_common.h"
  40:../drivers/fsl_clock.h **** 
  41:../drivers/fsl_clock.h **** /*! @addtogroup clock */
  42:../drivers/fsl_clock.h **** /*! @{ */
  43:../drivers/fsl_clock.h **** 
  44:../drivers/fsl_clock.h **** /*! @file */
  45:../drivers/fsl_clock.h **** 
  46:../drivers/fsl_clock.h **** /*******************************************************************************
  47:../drivers/fsl_clock.h ****  * Configurations
  48:../drivers/fsl_clock.h ****  ******************************************************************************/
  49:../drivers/fsl_clock.h **** 
  50:../drivers/fsl_clock.h **** /*! @brief Configures whether to check a parameter in a function.
  51:../drivers/fsl_clock.h ****  *
  52:../drivers/fsl_clock.h ****  * Some MCG settings must be changed with conditions, for example:
  53:../drivers/fsl_clock.h ****  *  1. MCGIRCLK settings, such as the source, divider, and the trim value should not change when
  54:../drivers/fsl_clock.h ****  *     MCGIRCLK is used as a system clock source.
  55:../drivers/fsl_clock.h ****  *  2. MCG_C7[OSCSEL] should not be changed  when the external reference clock is used
  56:../drivers/fsl_clock.h ****  *     as a system clock source. For example, in FBE/BLPE/PBE modes.
  57:../drivers/fsl_clock.h ****  *  3. The users should only switch between the supported clock modes.
  58:../drivers/fsl_clock.h ****  *
  59:../drivers/fsl_clock.h ****  * MCG functions check the parameter and MCG status before setting, if not allowed
  60:../drivers/fsl_clock.h ****  * to change, the functions return error. The parameter checking increases code size,
  61:../drivers/fsl_clock.h ****  * if code size is a critical requirement, change #MCG_CONFIG_CHECK_PARAM to 0 to
  62:../drivers/fsl_clock.h ****  * disable parameter checking.
  63:../drivers/fsl_clock.h ****  */
  64:../drivers/fsl_clock.h **** #ifndef MCG_CONFIG_CHECK_PARAM
  65:../drivers/fsl_clock.h **** #define MCG_CONFIG_CHECK_PARAM 0U
  66:../drivers/fsl_clock.h **** #endif
  67:../drivers/fsl_clock.h **** 
  68:../drivers/fsl_clock.h **** /*! @brief Configure whether driver controls clock
  69:../drivers/fsl_clock.h ****  *
  70:../drivers/fsl_clock.h ****  * When set to 0, peripheral drivers will enable clock in initialize function
  71:../drivers/fsl_clock.h ****  * and disable clock in de-initialize function. When set to 1, peripheral
  72:../drivers/fsl_clock.h ****  * driver will not control the clock, application could contol the clock out of
  73:../drivers/fsl_clock.h ****  * the driver.
  74:../drivers/fsl_clock.h ****  *
  75:../drivers/fsl_clock.h ****  * @note All drivers share this feature switcher. If it is set to 1, application
  76:../drivers/fsl_clock.h ****  * should handle clock enable and disable for all drivers.
  77:../drivers/fsl_clock.h ****  */
  78:../drivers/fsl_clock.h **** #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
  79:../drivers/fsl_clock.h **** #define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
  80:../drivers/fsl_clock.h **** #endif
  81:../drivers/fsl_clock.h **** 
  82:../drivers/fsl_clock.h **** /*******************************************************************************
  83:../drivers/fsl_clock.h ****  * Definitions
  84:../drivers/fsl_clock.h ****  ******************************************************************************/
  85:../drivers/fsl_clock.h **** 
  86:../drivers/fsl_clock.h **** /*! @name Driver version */
  87:../drivers/fsl_clock.h **** /*@{*/
  88:../drivers/fsl_clock.h **** /*! @brief CLOCK driver version 2.2.1. */
  89:../drivers/fsl_clock.h **** #define FSL_CLOCK_DRIVER_VERSION (MAKE_VERSION(2, 2, 1))
  90:../drivers/fsl_clock.h **** /*@}*/
  91:../drivers/fsl_clock.h **** 
  92:../drivers/fsl_clock.h **** /*! @brief External XTAL0 (OSC0) clock frequency.
  93:../drivers/fsl_clock.h ****  *
  94:../drivers/fsl_clock.h ****  * The XTAL0/EXTAL0 (OSC0) clock frequency in Hz. When the clock is set up, use the
  95:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal0Freq to set the value in the clock driver. For example,
  96:../drivers/fsl_clock.h ****  * if XTAL0 is 8 MHz:
  97:../drivers/fsl_clock.h ****  * @code
  98:../drivers/fsl_clock.h ****  * CLOCK_InitOsc0(...); // Set up the OSC0
  99:../drivers/fsl_clock.h ****  * CLOCK_SetXtal0Freq(80000000); // Set the XTAL0 value to the clock driver.
 100:../drivers/fsl_clock.h ****  * @endcode
 101:../drivers/fsl_clock.h ****  *
 102:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up the
 103:../drivers/fsl_clock.h ****  * OSC0 using the CLOCK_InitOsc0. All other cores need to call the CLOCK_SetXtal0Freq
 104:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 105:../drivers/fsl_clock.h ****  */
 106:../drivers/fsl_clock.h **** extern uint32_t g_xtal0Freq;
 107:../drivers/fsl_clock.h **** 
 108:../drivers/fsl_clock.h **** /*! @brief External XTAL32/EXTAL32/RTC_CLKIN clock frequency.
 109:../drivers/fsl_clock.h ****  *
 110:../drivers/fsl_clock.h ****  * The XTAL32/EXTAL32/RTC_CLKIN clock frequency in Hz. When the clock is set up, use the
 111:../drivers/fsl_clock.h ****  * function CLOCK_SetXtal32Freq to set the value in the clock driver.
 112:../drivers/fsl_clock.h ****  *
 113:../drivers/fsl_clock.h ****  * This is important for the multicore platforms where only one core needs to set up
 114:../drivers/fsl_clock.h ****  * the clock. All other cores need to call the CLOCK_SetXtal32Freq
 115:../drivers/fsl_clock.h ****  * to get a valid clock frequency.
 116:../drivers/fsl_clock.h ****  */
 117:../drivers/fsl_clock.h **** extern uint32_t g_xtal32Freq;
 118:../drivers/fsl_clock.h **** 
 119:../drivers/fsl_clock.h **** /*! @brief IRC48M clock frequency in Hz. */
 120:../drivers/fsl_clock.h **** #define MCG_INTERNAL_IRC_48M 48000000U
 121:../drivers/fsl_clock.h **** 
 122:../drivers/fsl_clock.h **** #if (defined(OSC) && !(defined(OSC0)))
 123:../drivers/fsl_clock.h **** #define OSC0 OSC
 124:../drivers/fsl_clock.h **** #endif
 125:../drivers/fsl_clock.h **** 
 126:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DMAMUX. */
 127:../drivers/fsl_clock.h **** #define DMAMUX_CLOCKS  \
 128:../drivers/fsl_clock.h ****     {                  \
 129:../drivers/fsl_clock.h ****         kCLOCK_Dmamux0 \
 130:../drivers/fsl_clock.h ****     }
 131:../drivers/fsl_clock.h **** 
 132:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RTC. */
 133:../drivers/fsl_clock.h **** #define RTC_CLOCKS  \
 134:../drivers/fsl_clock.h ****     {               \
 135:../drivers/fsl_clock.h ****         kCLOCK_Rtc0 \
 136:../drivers/fsl_clock.h ****     }
 137:../drivers/fsl_clock.h **** 
 138:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ENET. */
 139:../drivers/fsl_clock.h **** #define ENET_CLOCKS  \
 140:../drivers/fsl_clock.h ****     {                \
 141:../drivers/fsl_clock.h ****         kCLOCK_Enet0 \
 142:../drivers/fsl_clock.h ****     }
 143:../drivers/fsl_clock.h **** 
 144:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PORT. */
 145:../drivers/fsl_clock.h **** #define PORT_CLOCKS                                                          \
 146:../drivers/fsl_clock.h ****     {                                                                        \
 147:../drivers/fsl_clock.h ****         kCLOCK_PortA, kCLOCK_PortB, kCLOCK_PortC, kCLOCK_PortD, kCLOCK_PortE \
 148:../drivers/fsl_clock.h ****     }
 149:../drivers/fsl_clock.h **** 
 150:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SAI. */
 151:../drivers/fsl_clock.h **** #define SAI_CLOCKS  \
 152:../drivers/fsl_clock.h ****     {               \
 153:../drivers/fsl_clock.h ****         kCLOCK_Sai0 \
 154:../drivers/fsl_clock.h ****     }
 155:../drivers/fsl_clock.h **** 
 156:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXBUS. */
 157:../drivers/fsl_clock.h **** #define FLEXBUS_CLOCKS  \
 158:../drivers/fsl_clock.h ****     {                   \
 159:../drivers/fsl_clock.h ****         kCLOCK_Flexbus0 \
 160:../drivers/fsl_clock.h ****     }
 161:../drivers/fsl_clock.h **** 
 162:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EWM. */
 163:../drivers/fsl_clock.h **** #define EWM_CLOCKS  \
 164:../drivers/fsl_clock.h ****     {               \
 165:../drivers/fsl_clock.h ****         kCLOCK_Ewm0 \
 166:../drivers/fsl_clock.h ****     }
 167:../drivers/fsl_clock.h **** 
 168:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PIT. */
 169:../drivers/fsl_clock.h **** #define PIT_CLOCKS  \
 170:../drivers/fsl_clock.h ****     {               \
 171:../drivers/fsl_clock.h ****         kCLOCK_Pit0 \
 172:../drivers/fsl_clock.h ****     }
 173:../drivers/fsl_clock.h **** 
 174:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DSPI. */
 175:../drivers/fsl_clock.h **** #define DSPI_CLOCKS                           \
 176:../drivers/fsl_clock.h ****     {                                         \
 177:../drivers/fsl_clock.h ****         kCLOCK_Spi0, kCLOCK_Spi1, kCLOCK_Spi2 \
 178:../drivers/fsl_clock.h ****     }
 179:../drivers/fsl_clock.h **** 
 180:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for LPTMR. */
 181:../drivers/fsl_clock.h **** #define LPTMR_CLOCKS  \
 182:../drivers/fsl_clock.h ****     {                 \
 183:../drivers/fsl_clock.h ****         kCLOCK_Lptmr0 \
 184:../drivers/fsl_clock.h ****     }
 185:../drivers/fsl_clock.h **** 
 186:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for SDHC. */
 187:../drivers/fsl_clock.h **** #define SDHC_CLOCKS  \
 188:../drivers/fsl_clock.h ****     {                \
 189:../drivers/fsl_clock.h ****         kCLOCK_Sdhc0 \
 190:../drivers/fsl_clock.h ****     }
 191:../drivers/fsl_clock.h **** 
 192:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTM. */
 193:../drivers/fsl_clock.h **** #define FTM_CLOCKS                                         \
 194:../drivers/fsl_clock.h ****     {                                                      \
 195:../drivers/fsl_clock.h ****         kCLOCK_Ftm0, kCLOCK_Ftm1, kCLOCK_Ftm2, kCLOCK_Ftm3 \
 196:../drivers/fsl_clock.h ****     }
 197:../drivers/fsl_clock.h **** 
 198:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for EDMA. */
 199:../drivers/fsl_clock.h **** #define EDMA_CLOCKS \
 200:../drivers/fsl_clock.h ****     {               \
 201:../drivers/fsl_clock.h ****         kCLOCK_Dma0 \
 202:../drivers/fsl_clock.h ****     }
 203:../drivers/fsl_clock.h **** 
 204:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FLEXCAN. */
 205:../drivers/fsl_clock.h **** #define FLEXCAN_CLOCKS  \
 206:../drivers/fsl_clock.h ****     {                   \
 207:../drivers/fsl_clock.h ****         kCLOCK_Flexcan0 \
 208:../drivers/fsl_clock.h ****     }
 209:../drivers/fsl_clock.h **** 
 210:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for DAC. */
 211:../drivers/fsl_clock.h **** #define DAC_CLOCKS               \
 212:../drivers/fsl_clock.h ****     {                            \
 213:../drivers/fsl_clock.h ****         kCLOCK_Dac0, kCLOCK_Dac1 \
 214:../drivers/fsl_clock.h ****     }
 215:../drivers/fsl_clock.h **** 
 216:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for ADC16. */
 217:../drivers/fsl_clock.h **** #define ADC16_CLOCKS             \
 218:../drivers/fsl_clock.h ****     {                            \
 219:../drivers/fsl_clock.h ****         kCLOCK_Adc0, kCLOCK_Adc1 \
 220:../drivers/fsl_clock.h ****     }
 221:../drivers/fsl_clock.h **** 
 222:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for MPU. */
 223:../drivers/fsl_clock.h **** #define SYSMPU_CLOCKS  \
 224:../drivers/fsl_clock.h ****     {                  \
 225:../drivers/fsl_clock.h ****         kCLOCK_Sysmpu0 \
 226:../drivers/fsl_clock.h ****     }
 227:../drivers/fsl_clock.h **** 
 228:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for VREF. */
 229:../drivers/fsl_clock.h **** #define VREF_CLOCKS  \
 230:../drivers/fsl_clock.h ****     {                \
 231:../drivers/fsl_clock.h ****         kCLOCK_Vref0 \
 232:../drivers/fsl_clock.h ****     }
 233:../drivers/fsl_clock.h **** 
 234:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMT. */
 235:../drivers/fsl_clock.h **** #define CMT_CLOCKS  \
 236:../drivers/fsl_clock.h ****     {               \
 237:../drivers/fsl_clock.h ****         kCLOCK_Cmt0 \
 238:../drivers/fsl_clock.h ****     }
 239:../drivers/fsl_clock.h **** 
 240:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for UART. */
 241:../drivers/fsl_clock.h **** #define UART_CLOCKS                                                                        \
 242:../drivers/fsl_clock.h ****     {                                                                                      \
 243:../drivers/fsl_clock.h ****         kCLOCK_Uart0, kCLOCK_Uart1, kCLOCK_Uart2, kCLOCK_Uart3, kCLOCK_Uart4, kCLOCK_Uart5 \
 244:../drivers/fsl_clock.h ****     }
 245:../drivers/fsl_clock.h **** 
 246:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for RNGA. */
 247:../drivers/fsl_clock.h **** #define RNGA_CLOCKS  \
 248:../drivers/fsl_clock.h ****     {                \
 249:../drivers/fsl_clock.h ****         kCLOCK_Rnga0 \
 250:../drivers/fsl_clock.h ****     }
 251:../drivers/fsl_clock.h **** 
 252:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CRC. */
 253:../drivers/fsl_clock.h **** #define CRC_CLOCKS  \
 254:../drivers/fsl_clock.h ****     {               \
 255:../drivers/fsl_clock.h ****         kCLOCK_Crc0 \
 256:../drivers/fsl_clock.h ****     }
 257:../drivers/fsl_clock.h **** 
 258:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for I2C. */
 259:../drivers/fsl_clock.h **** #define I2C_CLOCKS                            \
 260:../drivers/fsl_clock.h ****     {                                         \
 261:../drivers/fsl_clock.h ****         kCLOCK_I2c0, kCLOCK_I2c1, kCLOCK_I2c2 \
 262:../drivers/fsl_clock.h ****     }
 263:../drivers/fsl_clock.h **** 
 264:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for PDB. */
 265:../drivers/fsl_clock.h **** #define PDB_CLOCKS  \
 266:../drivers/fsl_clock.h ****     {               \
 267:../drivers/fsl_clock.h ****         kCLOCK_Pdb0 \
 268:../drivers/fsl_clock.h ****     }
 269:../drivers/fsl_clock.h **** 
 270:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for FTF. */
 271:../drivers/fsl_clock.h **** #define FTF_CLOCKS  \
 272:../drivers/fsl_clock.h ****     {               \
 273:../drivers/fsl_clock.h ****         kCLOCK_Ftf0 \
 274:../drivers/fsl_clock.h ****     }
 275:../drivers/fsl_clock.h **** 
 276:../drivers/fsl_clock.h **** /*! @brief Clock ip name array for CMP. */
 277:../drivers/fsl_clock.h **** #define CMP_CLOCKS                            \
 278:../drivers/fsl_clock.h ****     {                                         \
 279:../drivers/fsl_clock.h ****         kCLOCK_Cmp0, kCLOCK_Cmp1, kCLOCK_Cmp2 \
 280:../drivers/fsl_clock.h ****     }
 281:../drivers/fsl_clock.h **** 
 282:../drivers/fsl_clock.h **** /*!
 283:../drivers/fsl_clock.h ****  * @brief LPO clock frequency.
 284:../drivers/fsl_clock.h ****  */
 285:../drivers/fsl_clock.h **** #define LPO_CLK_FREQ 1000U
 286:../drivers/fsl_clock.h **** 
 287:../drivers/fsl_clock.h **** /*! @brief Peripherals clock source definition. */
 288:../drivers/fsl_clock.h **** #define SYS_CLK kCLOCK_CoreSysClk
 289:../drivers/fsl_clock.h **** #define BUS_CLK kCLOCK_BusClk
 290:../drivers/fsl_clock.h **** 
 291:../drivers/fsl_clock.h **** #define I2C0_CLK_SRC BUS_CLK
 292:../drivers/fsl_clock.h **** #define I2C1_CLK_SRC BUS_CLK
 293:../drivers/fsl_clock.h **** #define I2C2_CLK_SRC BUS_CLK
 294:../drivers/fsl_clock.h **** #define DSPI0_CLK_SRC BUS_CLK
 295:../drivers/fsl_clock.h **** #define DSPI1_CLK_SRC BUS_CLK
 296:../drivers/fsl_clock.h **** #define DSPI2_CLK_SRC BUS_CLK
 297:../drivers/fsl_clock.h **** #define UART0_CLK_SRC SYS_CLK
 298:../drivers/fsl_clock.h **** #define UART1_CLK_SRC SYS_CLK
 299:../drivers/fsl_clock.h **** #define UART2_CLK_SRC BUS_CLK
 300:../drivers/fsl_clock.h **** #define UART3_CLK_SRC BUS_CLK
 301:../drivers/fsl_clock.h **** #define UART4_CLK_SRC BUS_CLK
 302:../drivers/fsl_clock.h **** #define UART5_CLK_SRC BUS_CLK
 303:../drivers/fsl_clock.h **** 
 304:../drivers/fsl_clock.h **** /*! @brief Clock name used to get clock frequency. */
 305:../drivers/fsl_clock.h **** typedef enum _clock_name
 306:../drivers/fsl_clock.h **** {
 307:../drivers/fsl_clock.h **** 
 308:../drivers/fsl_clock.h ****     /* ----------------------------- System layer clock -------------------------------*/
 309:../drivers/fsl_clock.h ****     kCLOCK_CoreSysClk,    /*!< Core/system clock                                         */
 310:../drivers/fsl_clock.h ****     kCLOCK_PlatClk,       /*!< Platform clock                                            */
 311:../drivers/fsl_clock.h ****     kCLOCK_BusClk,        /*!< Bus clock                                                 */
 312:../drivers/fsl_clock.h ****     kCLOCK_FlexBusClk,    /*!< FlexBus clock                                             */
 313:../drivers/fsl_clock.h ****     kCLOCK_FlashClk,      /*!< Flash clock                                               */
 314:../drivers/fsl_clock.h ****     kCLOCK_FastPeriphClk, /*!< Fast peripheral clock                                     */
 315:../drivers/fsl_clock.h ****     kCLOCK_PllFllSelClk,  /*!< The clock after SIM[PLLFLLSEL].                           */
 316:../drivers/fsl_clock.h **** 
 317:../drivers/fsl_clock.h ****     /* ---------------------------------- OSC clock -----------------------------------*/
 318:../drivers/fsl_clock.h ****     kCLOCK_Er32kClk,       /*!< External reference 32K clock (ERCLK32K)                   */
 319:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClk,      /*!< OSC0 external reference clock (OSC0ERCLK)                 */
 320:../drivers/fsl_clock.h ****     kCLOCK_Osc1ErClk,      /*!< OSC1 external reference clock (OSC1ERCLK)                 */
 321:../drivers/fsl_clock.h ****     kCLOCK_Osc0ErClkUndiv, /*!< OSC0 external reference undivided clock(OSC0ERCLK_UNDIV). */
 322:../drivers/fsl_clock.h **** 
 323:../drivers/fsl_clock.h ****     /* ----------------------------- MCG and MCG-Lite clock ---------------------------*/
 324:../drivers/fsl_clock.h ****     kCLOCK_McgFixedFreqClk,   /*!< MCG fixed frequency clock (MCGFFCLK)                      */
 325:../drivers/fsl_clock.h ****     kCLOCK_McgInternalRefClk, /*!< MCG internal reference clock (MCGIRCLK)                   */
 326:../drivers/fsl_clock.h ****     kCLOCK_McgFllClk,         /*!< MCGFLLCLK                                                 */
 327:../drivers/fsl_clock.h ****     kCLOCK_McgPll0Clk,        /*!< MCGPLL0CLK                                                */
 328:../drivers/fsl_clock.h ****     kCLOCK_McgPll1Clk,        /*!< MCGPLL1CLK                                                */
 329:../drivers/fsl_clock.h ****     kCLOCK_McgExtPllClk,      /*!< EXT_PLLCLK                                                */
 330:../drivers/fsl_clock.h ****     kCLOCK_McgPeriphClk,      /*!< MCG peripheral clock (MCGPCLK)                            */
 331:../drivers/fsl_clock.h ****     kCLOCK_McgIrc48MClk,      /*!< MCG IRC48M clock                                          */
 332:../drivers/fsl_clock.h **** 
 333:../drivers/fsl_clock.h ****     /* --------------------------------- Other clock ----------------------------------*/
 334:../drivers/fsl_clock.h ****     kCLOCK_LpoClk, /*!< LPO clock                                                 */
 335:../drivers/fsl_clock.h **** 
 336:../drivers/fsl_clock.h **** } clock_name_t;
 337:../drivers/fsl_clock.h **** 
 338:../drivers/fsl_clock.h **** /*! @brief USB clock source definition. */
 339:../drivers/fsl_clock.h **** typedef enum _clock_usb_src
 340:../drivers/fsl_clock.h **** {
 341:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcPll0 = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(1U),   /*!< Use PLL0.      */
 342:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcIrc48M = SIM_SOPT2_USBSRC(1U) | SIM_SOPT2_PLLFLLSEL(3U), /*!< Use IRC48M.    */
 343:../drivers/fsl_clock.h ****     kCLOCK_UsbSrcExt = SIM_SOPT2_USBSRC(0U)                               /*!< Use USB_CLKIN. */
 344:../drivers/fsl_clock.h **** } clock_usb_src_t;
 345:../drivers/fsl_clock.h **** 
 346:../drivers/fsl_clock.h **** /*------------------------------------------------------------------------------
 347:../drivers/fsl_clock.h **** 
 348:../drivers/fsl_clock.h ****  clock_gate_t definition:
 349:../drivers/fsl_clock.h **** 
 350:../drivers/fsl_clock.h ****  31                              16                              0
 351:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 352:../drivers/fsl_clock.h ****  | SIM_SCGC register offset       |   control bit offset in SCGC |
 353:../drivers/fsl_clock.h ****  -----------------------------------------------------------------
 354:../drivers/fsl_clock.h **** 
 355:../drivers/fsl_clock.h ****  For example, the SDHC clock gate is controlled by SIM_SCGC3[17], the
 356:../drivers/fsl_clock.h ****  SIM_SCGC3 offset in SIM is 0x1030, then kCLOCK_GateSdhc0 is defined as
 357:../drivers/fsl_clock.h **** 
 358:../drivers/fsl_clock.h ****               kCLOCK_GateSdhc0 = (0x1030 << 16) | 17;
 359:../drivers/fsl_clock.h **** 
 360:../drivers/fsl_clock.h **** ------------------------------------------------------------------------------*/
 361:../drivers/fsl_clock.h **** 
 362:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_SHIFT 16U
 363:../drivers/fsl_clock.h **** #define CLK_GATE_REG_OFFSET_MASK 0xFFFF0000U
 364:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_SHIFT 0U
 365:../drivers/fsl_clock.h **** #define CLK_GATE_BIT_SHIFT_MASK 0x0000FFFFU
 366:../drivers/fsl_clock.h **** 
 367:../drivers/fsl_clock.h **** #define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
 368:../drivers/fsl_clock.h ****     ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
 369:../drivers/fsl_clock.h ****      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
 370:../drivers/fsl_clock.h **** 
 371:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIF
 372:../drivers/fsl_clock.h **** #define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
 373:../drivers/fsl_clock.h **** 
 374:../drivers/fsl_clock.h **** /*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
 375:../drivers/fsl_clock.h **** typedef enum _clock_ip_name
 376:../drivers/fsl_clock.h **** {
 377:../drivers/fsl_clock.h ****     kCLOCK_IpInvalid = 0U,
 378:../drivers/fsl_clock.h ****     kCLOCK_I2c2 = CLK_GATE_DEFINE(0x1028U, 6U),
 379:../drivers/fsl_clock.h ****     kCLOCK_Uart4 = CLK_GATE_DEFINE(0x1028U, 10U),
 380:../drivers/fsl_clock.h ****     kCLOCK_Uart5 = CLK_GATE_DEFINE(0x1028U, 11U),
 381:../drivers/fsl_clock.h **** 
 382:../drivers/fsl_clock.h ****     kCLOCK_Enet0 = CLK_GATE_DEFINE(0x102CU, 0U),
 383:../drivers/fsl_clock.h ****     kCLOCK_Dac0 = CLK_GATE_DEFINE(0x102CU, 12U),
 384:../drivers/fsl_clock.h ****     kCLOCK_Dac1 = CLK_GATE_DEFINE(0x102CU, 13U),
 385:../drivers/fsl_clock.h **** 
 386:../drivers/fsl_clock.h ****     kCLOCK_Spi2 = CLK_GATE_DEFINE(0x1030U, 12U),
 387:../drivers/fsl_clock.h ****     kCLOCK_Sdhc0 = CLK_GATE_DEFINE(0x1030U, 17U),
 388:../drivers/fsl_clock.h ****     kCLOCK_Ftm3 = CLK_GATE_DEFINE(0x1030U, 25U),
 389:../drivers/fsl_clock.h ****     kCLOCK_Adc1 = CLK_GATE_DEFINE(0x1030U, 27U),
 390:../drivers/fsl_clock.h **** 
 391:../drivers/fsl_clock.h ****     kCLOCK_Ewm0 = CLK_GATE_DEFINE(0x1034U, 1U),
 392:../drivers/fsl_clock.h ****     kCLOCK_Cmt0 = CLK_GATE_DEFINE(0x1034U, 2U),
 393:../drivers/fsl_clock.h ****     kCLOCK_I2c0 = CLK_GATE_DEFINE(0x1034U, 6U),
 394:../drivers/fsl_clock.h ****     kCLOCK_I2c1 = CLK_GATE_DEFINE(0x1034U, 7U),
 395:../drivers/fsl_clock.h ****     kCLOCK_Uart0 = CLK_GATE_DEFINE(0x1034U, 10U),
 396:../drivers/fsl_clock.h ****     kCLOCK_Uart1 = CLK_GATE_DEFINE(0x1034U, 11U),
 397:../drivers/fsl_clock.h ****     kCLOCK_Uart2 = CLK_GATE_DEFINE(0x1034U, 12U),
 398:../drivers/fsl_clock.h ****     kCLOCK_Uart3 = CLK_GATE_DEFINE(0x1034U, 13U),
 399:../drivers/fsl_clock.h ****     kCLOCK_Usbfs0 = CLK_GATE_DEFINE(0x1034U, 18U),
 400:../drivers/fsl_clock.h ****     kCLOCK_Cmp0 = CLK_GATE_DEFINE(0x1034U, 19U),
 401:../drivers/fsl_clock.h ****     kCLOCK_Cmp1 = CLK_GATE_DEFINE(0x1034U, 19U),
 402:../drivers/fsl_clock.h ****     kCLOCK_Cmp2 = CLK_GATE_DEFINE(0x1034U, 19U),
 403:../drivers/fsl_clock.h ****     kCLOCK_Vref0 = CLK_GATE_DEFINE(0x1034U, 20U),
 404:../drivers/fsl_clock.h **** 
 405:../drivers/fsl_clock.h ****     kCLOCK_Lptmr0 = CLK_GATE_DEFINE(0x1038U, 0U),
 406:../drivers/fsl_clock.h ****     kCLOCK_PortA = CLK_GATE_DEFINE(0x1038U, 9U),
 407:../drivers/fsl_clock.h ****     kCLOCK_PortB = CLK_GATE_DEFINE(0x1038U, 10U),
 408:../drivers/fsl_clock.h ****     kCLOCK_PortC = CLK_GATE_DEFINE(0x1038U, 11U),
 409:../drivers/fsl_clock.h ****     kCLOCK_PortD = CLK_GATE_DEFINE(0x1038U, 12U),
 410:../drivers/fsl_clock.h ****     kCLOCK_PortE = CLK_GATE_DEFINE(0x1038U, 13U),
 411:../drivers/fsl_clock.h **** 
 412:../drivers/fsl_clock.h ****     kCLOCK_Ftf0 = CLK_GATE_DEFINE(0x103CU, 0U),
 413:../drivers/fsl_clock.h ****     kCLOCK_Dmamux0 = CLK_GATE_DEFINE(0x103CU, 1U),
 414:../drivers/fsl_clock.h ****     kCLOCK_Flexcan0 = CLK_GATE_DEFINE(0x103CU, 4U),
 415:../drivers/fsl_clock.h ****     kCLOCK_Rnga0 = CLK_GATE_DEFINE(0x103CU, 9U),
 416:../drivers/fsl_clock.h ****     kCLOCK_Spi0 = CLK_GATE_DEFINE(0x103CU, 12U),
 417:../drivers/fsl_clock.h ****     kCLOCK_Spi1 = CLK_GATE_DEFINE(0x103CU, 13U),
 418:../drivers/fsl_clock.h ****     kCLOCK_Sai0 = CLK_GATE_DEFINE(0x103CU, 15U),
 419:../drivers/fsl_clock.h ****     kCLOCK_Crc0 = CLK_GATE_DEFINE(0x103CU, 18U),
 420:../drivers/fsl_clock.h ****     kCLOCK_Usbdcd0 = CLK_GATE_DEFINE(0x103CU, 21U),
 421:../drivers/fsl_clock.h ****     kCLOCK_Pdb0 = CLK_GATE_DEFINE(0x103CU, 22U),
 422:../drivers/fsl_clock.h ****     kCLOCK_Pit0 = CLK_GATE_DEFINE(0x103CU, 23U),
 423:../drivers/fsl_clock.h ****     kCLOCK_Ftm0 = CLK_GATE_DEFINE(0x103CU, 24U),
 424:../drivers/fsl_clock.h ****     kCLOCK_Ftm1 = CLK_GATE_DEFINE(0x103CU, 25U),
 425:../drivers/fsl_clock.h ****     kCLOCK_Ftm2 = CLK_GATE_DEFINE(0x103CU, 26U),
 426:../drivers/fsl_clock.h ****     kCLOCK_Adc0 = CLK_GATE_DEFINE(0x103CU, 27U),
 427:../drivers/fsl_clock.h ****     kCLOCK_Rtc0 = CLK_GATE_DEFINE(0x103CU, 29U),
 428:../drivers/fsl_clock.h **** 
 429:../drivers/fsl_clock.h ****     kCLOCK_Flexbus0 = CLK_GATE_DEFINE(0x1040U, 0U),
 430:../drivers/fsl_clock.h ****     kCLOCK_Dma0 = CLK_GATE_DEFINE(0x1040U, 1U),
 431:../drivers/fsl_clock.h ****     kCLOCK_Sysmpu0 = CLK_GATE_DEFINE(0x1040U, 2U),
 432:../drivers/fsl_clock.h **** } clock_ip_name_t;
 433:../drivers/fsl_clock.h **** 
 434:../drivers/fsl_clock.h **** /*!@brief SIM configuration structure for clock setting. */
 435:../drivers/fsl_clock.h **** typedef struct _sim_clock_config
 436:../drivers/fsl_clock.h **** {
 437:../drivers/fsl_clock.h ****     uint8_t pllFllSel; /*!< PLL/FLL/IRC48M selection.    */
 438:../drivers/fsl_clock.h ****     uint8_t er32kSrc;  /*!< ERCLK32K source selection.   */
 439:../drivers/fsl_clock.h ****     uint32_t clkdiv1;  /*!< SIM_CLKDIV1.                 */
 440:../drivers/fsl_clock.h **** } sim_clock_config_t;
 441:../drivers/fsl_clock.h **** 
 442:../drivers/fsl_clock.h **** /*! @brief OSC work mode. */
 443:../drivers/fsl_clock.h **** typedef enum _osc_mode
 444:../drivers/fsl_clock.h **** {
 445:../drivers/fsl_clock.h ****     kOSC_ModeExt = 0U, /*!< Use an external clock.   */
 446:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 447:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS_MASK, /*!< Oscillator low power. */
 448:../drivers/fsl_clock.h **** #else
 449:../drivers/fsl_clock.h ****     kOSC_ModeOscLowPower = MCG_C2_EREFS0_MASK, /*!< Oscillator low power. */
 450:../drivers/fsl_clock.h **** #endif
 451:../drivers/fsl_clock.h ****     kOSC_ModeOscHighGain = 0U
 452:../drivers/fsl_clock.h **** #if (defined(MCG_C2_EREFS_MASK) && !(defined(MCG_C2_EREFS0_MASK)))
 453:../drivers/fsl_clock.h ****                            |
 454:../drivers/fsl_clock.h ****                            MCG_C2_EREFS_MASK
 455:../drivers/fsl_clock.h **** #else
 456:../drivers/fsl_clock.h ****                            |
 457:../drivers/fsl_clock.h ****                            MCG_C2_EREFS0_MASK
 458:../drivers/fsl_clock.h **** #endif
 459:../drivers/fsl_clock.h **** #if (defined(MCG_C2_HGO_MASK) && !(defined(MCG_C2_HGO0_MASK)))
 460:../drivers/fsl_clock.h ****                            |
 461:../drivers/fsl_clock.h ****                            MCG_C2_HGO_MASK, /*!< Oscillator high gain. */
 462:../drivers/fsl_clock.h **** #else
 463:../drivers/fsl_clock.h ****                            |
 464:../drivers/fsl_clock.h ****                            MCG_C2_HGO0_MASK, /*!< Oscillator high gain. */
 465:../drivers/fsl_clock.h **** #endif
 466:../drivers/fsl_clock.h **** } osc_mode_t;
 467:../drivers/fsl_clock.h **** 
 468:../drivers/fsl_clock.h **** /*! @brief Oscillator capacitor load setting.*/
 469:../drivers/fsl_clock.h **** enum _osc_cap_load
 470:../drivers/fsl_clock.h **** {
 471:../drivers/fsl_clock.h ****     kOSC_Cap2P = OSC_CR_SC2P_MASK,  /*!< 2  pF capacitor load */
 472:../drivers/fsl_clock.h ****     kOSC_Cap4P = OSC_CR_SC4P_MASK,  /*!< 4  pF capacitor load */
 473:../drivers/fsl_clock.h ****     kOSC_Cap8P = OSC_CR_SC8P_MASK,  /*!< 8  pF capacitor load */
 474:../drivers/fsl_clock.h ****     kOSC_Cap16P = OSC_CR_SC16P_MASK /*!< 16 pF capacitor load */
 475:../drivers/fsl_clock.h **** };
 476:../drivers/fsl_clock.h **** 
 477:../drivers/fsl_clock.h **** /*! @brief OSCERCLK enable mode. */
 478:../drivers/fsl_clock.h **** enum _oscer_enable_mode
 479:../drivers/fsl_clock.h **** {
 480:../drivers/fsl_clock.h ****     kOSC_ErClkEnable = OSC_CR_ERCLKEN_MASK,       /*!< Enable.              */
 481:../drivers/fsl_clock.h ****     kOSC_ErClkEnableInStop = OSC_CR_EREFSTEN_MASK /*!< Enable in stop mode. */
 482:../drivers/fsl_clock.h **** };
 483:../drivers/fsl_clock.h **** 
 484:../drivers/fsl_clock.h **** /*! @brief OSC configuration for OSCERCLK. */
 485:../drivers/fsl_clock.h **** typedef struct _oscer_config
 486:../drivers/fsl_clock.h **** {
 487:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< OSCERCLK enable mode. OR'ed value of @ref _oscer_enable_mode. */
 488:../drivers/fsl_clock.h **** 
 489:../drivers/fsl_clock.h **** } oscer_config_t;
 490:../drivers/fsl_clock.h **** 
 491:../drivers/fsl_clock.h **** /*!
 492:../drivers/fsl_clock.h ****  * @brief OSC Initialization Configuration Structure
 493:../drivers/fsl_clock.h ****  *
 494:../drivers/fsl_clock.h ****  * Defines the configuration data structure to initialize the OSC.
 495:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 496:../drivers/fsl_clock.h ****  * according to the board setting:
 497:../drivers/fsl_clock.h ****  * 1. freq: The external frequency.
 498:../drivers/fsl_clock.h ****  * 2. workMode: The OSC module mode.
 499:../drivers/fsl_clock.h ****  */
 500:../drivers/fsl_clock.h **** typedef struct _osc_config
 501:../drivers/fsl_clock.h **** {
 502:../drivers/fsl_clock.h ****     uint32_t freq;              /*!< External clock frequency.    */
 503:../drivers/fsl_clock.h ****     uint8_t capLoad;            /*!< Capacitor load setting.      */
 504:../drivers/fsl_clock.h ****     osc_mode_t workMode;        /*!< OSC work mode setting.       */
 505:../drivers/fsl_clock.h ****     oscer_config_t oscerConfig; /*!< Configuration for OSCERCLK.  */
 506:../drivers/fsl_clock.h **** } osc_config_t;
 507:../drivers/fsl_clock.h **** 
 508:../drivers/fsl_clock.h **** /*! @brief MCG FLL reference clock source select. */
 509:../drivers/fsl_clock.h **** typedef enum _mcg_fll_src
 510:../drivers/fsl_clock.h **** {
 511:../drivers/fsl_clock.h ****     kMCG_FllSrcExternal, /*!< External reference clock is selected          */
 512:../drivers/fsl_clock.h ****     kMCG_FllSrcInternal  /*!< The slow internal reference clock is selected */
 513:../drivers/fsl_clock.h **** } mcg_fll_src_t;
 514:../drivers/fsl_clock.h **** 
 515:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock select */
 516:../drivers/fsl_clock.h **** typedef enum _mcg_irc_mode
 517:../drivers/fsl_clock.h **** {
 518:../drivers/fsl_clock.h ****     kMCG_IrcSlow, /*!< Slow internal reference clock selected */
 519:../drivers/fsl_clock.h ****     kMCG_IrcFast  /*!< Fast internal reference clock selected */
 520:../drivers/fsl_clock.h **** } mcg_irc_mode_t;
 521:../drivers/fsl_clock.h **** 
 522:../drivers/fsl_clock.h **** /*! @brief MCG DCO Maximum Frequency with 32.768 kHz Reference */
 523:../drivers/fsl_clock.h **** typedef enum _mcg_dmx32
 524:../drivers/fsl_clock.h **** {
 525:../drivers/fsl_clock.h ****     kMCG_Dmx32Default, /*!< DCO has a default range of 25% */
 526:../drivers/fsl_clock.h ****     kMCG_Dmx32Fine     /*!< DCO is fine-tuned for maximum frequency with 32.768 kHz reference */
 527:../drivers/fsl_clock.h **** } mcg_dmx32_t;
 528:../drivers/fsl_clock.h **** 
 529:../drivers/fsl_clock.h **** /*! @brief MCG DCO range select */
 530:../drivers/fsl_clock.h **** typedef enum _mcg_drs
 531:../drivers/fsl_clock.h **** {
 532:../drivers/fsl_clock.h ****     kMCG_DrsLow,     /*!< Low frequency range       */
 533:../drivers/fsl_clock.h ****     kMCG_DrsMid,     /*!< Mid frequency range       */
 534:../drivers/fsl_clock.h ****     kMCG_DrsMidHigh, /*!< Mid-High frequency range  */
 535:../drivers/fsl_clock.h ****     kMCG_DrsHigh     /*!< High frequency range      */
 536:../drivers/fsl_clock.h **** } mcg_drs_t;
 537:../drivers/fsl_clock.h **** 
 538:../drivers/fsl_clock.h **** /*! @brief MCG PLL reference clock select */
 539:../drivers/fsl_clock.h **** typedef enum _mcg_pll_ref_src
 540:../drivers/fsl_clock.h **** {
 541:../drivers/fsl_clock.h ****     kMCG_PllRefOsc0, /*!< Selects OSC0 as PLL reference clock                 */
 542:../drivers/fsl_clock.h ****     kMCG_PllRefOsc1  /*!< Selects OSC1 as PLL reference clock                 */
 543:../drivers/fsl_clock.h **** } mcg_pll_ref_src_t;
 544:../drivers/fsl_clock.h **** 
 545:../drivers/fsl_clock.h **** /*! @brief MCGOUT clock source. */
 546:../drivers/fsl_clock.h **** typedef enum _mcg_clkout_src
 547:../drivers/fsl_clock.h **** {
 548:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcOut,      /*!< Output of the FLL is selected (reset default)  */
 549:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcInternal, /*!< Internal reference clock is selected           */
 550:../drivers/fsl_clock.h ****     kMCG_ClkOutSrcExternal, /*!< External reference clock is selected           */
 551:../drivers/fsl_clock.h **** } mcg_clkout_src_t;
 552:../drivers/fsl_clock.h **** 
 553:../drivers/fsl_clock.h **** /*! @brief MCG Automatic Trim Machine Select */
 554:../drivers/fsl_clock.h **** typedef enum _mcg_atm_select
 555:../drivers/fsl_clock.h **** {
 556:../drivers/fsl_clock.h ****     kMCG_AtmSel32k, /*!< 32 kHz Internal Reference Clock selected  */
 557:../drivers/fsl_clock.h ****     kMCG_AtmSel4m   /*!< 4 MHz Internal Reference Clock selected   */
 558:../drivers/fsl_clock.h **** } mcg_atm_select_t;
 559:../drivers/fsl_clock.h **** 
 560:../drivers/fsl_clock.h **** /*! @brief MCG OSC Clock Select */
 561:../drivers/fsl_clock.h **** typedef enum _mcg_oscsel
 562:../drivers/fsl_clock.h **** {
 563:../drivers/fsl_clock.h ****     kMCG_OscselOsc, /*!< Selects System Oscillator (OSCCLK) */
 564:../drivers/fsl_clock.h ****     kMCG_OscselRtc, /*!< Selects 32 kHz RTC Oscillator      */
 565:../drivers/fsl_clock.h ****     kMCG_OscselIrc  /*!< Selects 48 MHz IRC Oscillator      */
 566:../drivers/fsl_clock.h **** } mcg_oscsel_t;
 567:../drivers/fsl_clock.h **** 
 568:../drivers/fsl_clock.h **** /*! @brief MCG PLLCS select */
 569:../drivers/fsl_clock.h **** typedef enum _mcg_pll_clk_select
 570:../drivers/fsl_clock.h **** {
 571:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll0, /*!< PLL0 output clock is selected  */
 572:../drivers/fsl_clock.h ****     kMCG_PllClkSelPll1  /* PLL1 output clock is selected    */
 573:../drivers/fsl_clock.h **** } mcg_pll_clk_select_t;
 574:../drivers/fsl_clock.h **** 
 575:../drivers/fsl_clock.h **** /*! @brief MCG clock monitor mode. */
 576:../drivers/fsl_clock.h **** typedef enum _mcg_monitor_mode
 577:../drivers/fsl_clock.h **** {
 578:../drivers/fsl_clock.h ****     kMCG_MonitorNone, /*!< Clock monitor is disabled.         */
 579:../drivers/fsl_clock.h ****     kMCG_MonitorInt,  /*!< Trigger interrupt when clock lost. */
 580:../drivers/fsl_clock.h ****     kMCG_MonitorReset /*!< System reset when clock lost.      */
 581:../drivers/fsl_clock.h **** } mcg_monitor_mode_t;
 582:../drivers/fsl_clock.h **** 
 583:../drivers/fsl_clock.h **** /*! @brief MCG status. */
 584:../drivers/fsl_clock.h **** enum _mcg_status
 585:../drivers/fsl_clock.h **** {
 586:../drivers/fsl_clock.h ****     kStatus_MCG_ModeUnreachable = MAKE_STATUS(kStatusGroup_MCG, 0),       /*!< Can't switch to targ
 587:../drivers/fsl_clock.h ****     kStatus_MCG_ModeInvalid = MAKE_STATUS(kStatusGroup_MCG, 1),           /*!< Current mode invalid
 588:../drivers/fsl_clock.h ****                                                                                function. */
 589:../drivers/fsl_clock.h ****     kStatus_MCG_AtmBusClockInvalid = MAKE_STATUS(kStatusGroup_MCG, 2),    /*!< Invalid bus clock fo
 590:../drivers/fsl_clock.h ****     kStatus_MCG_AtmDesiredFreqInvalid = MAKE_STATUS(kStatusGroup_MCG, 3), /*!< Invalid desired freq
 591:../drivers/fsl_clock.h ****     kStatus_MCG_AtmIrcUsed = MAKE_STATUS(kStatusGroup_MCG, 4),            /*!< IRC is used when usi
 592:../drivers/fsl_clock.h ****     kStatus_MCG_AtmHardwareFail = MAKE_STATUS(kStatusGroup_MCG, 5),       /*!< Hardware fail occurs
 593:../drivers/fsl_clock.h ****     kStatus_MCG_SourceUsed = MAKE_STATUS(kStatusGroup_MCG, 6)             /*!< Can't change the clo
 594:../drivers/fsl_clock.h ****                                                                                it is in use. */
 595:../drivers/fsl_clock.h **** };
 596:../drivers/fsl_clock.h **** 
 597:../drivers/fsl_clock.h **** /*! @brief MCG status flags. */
 598:../drivers/fsl_clock.h **** enum _mcg_status_flags_t
 599:../drivers/fsl_clock.h **** {
 600:../drivers/fsl_clock.h ****     kMCG_Osc0LostFlag = (1U << 0U),   /*!< OSC0 lost.         */
 601:../drivers/fsl_clock.h ****     kMCG_Osc0InitFlag = (1U << 1U),   /*!< OSC0 crystal initialized. */
 602:../drivers/fsl_clock.h ****     kMCG_RtcOscLostFlag = (1U << 4U), /*!< RTC OSC lost.      */
 603:../drivers/fsl_clock.h ****     kMCG_Pll0LostFlag = (1U << 5U),   /*!< PLL0 lost.         */
 604:../drivers/fsl_clock.h ****     kMCG_Pll0LockFlag = (1U << 6U),   /*!< PLL0 locked.       */
 605:../drivers/fsl_clock.h **** };
 606:../drivers/fsl_clock.h **** 
 607:../drivers/fsl_clock.h **** /*! @brief MCG internal reference clock (MCGIRCLK) enable mode definition. */
 608:../drivers/fsl_clock.h **** enum _mcg_irclk_enable_mode
 609:../drivers/fsl_clock.h **** {
 610:../drivers/fsl_clock.h ****     kMCG_IrclkEnable = MCG_C1_IRCLKEN_MASK,       /*!< MCGIRCLK enable.              */
 611:../drivers/fsl_clock.h ****     kMCG_IrclkEnableInStop = MCG_C1_IREFSTEN_MASK /*!< MCGIRCLK enable in stop mode. */
 612:../drivers/fsl_clock.h **** };
 613:../drivers/fsl_clock.h **** 
 614:../drivers/fsl_clock.h **** /*! @brief MCG PLL clock enable mode definition. */
 615:../drivers/fsl_clock.h **** enum _mcg_pll_enable_mode
 616:../drivers/fsl_clock.h **** {
 617:../drivers/fsl_clock.h ****     kMCG_PllEnableIndependent = MCG_C5_PLLCLKEN0_MASK, /*!< MCGPLLCLK enable independent of the
 618:../drivers/fsl_clock.h ****                                                            MCG clock mode. Generally, the PLL
 619:../drivers/fsl_clock.h ****                                                            is disabled in FLL modes
 620:../drivers/fsl_clock.h ****                                                            (FEI/FBI/FEE/FBE). Setting the PLL clock
 621:../drivers/fsl_clock.h ****                                                            enable independent, enables the
 622:../drivers/fsl_clock.h ****                                                            PLL in the FLL modes.          */
 623:../drivers/fsl_clock.h ****     kMCG_PllEnableInStop = MCG_C5_PLLSTEN0_MASK        /*!< MCGPLLCLK enable in STOP mode. */
 624:../drivers/fsl_clock.h **** };
 625:../drivers/fsl_clock.h **** 
 626:../drivers/fsl_clock.h **** /*! @brief MCG mode definitions */
 627:../drivers/fsl_clock.h **** typedef enum _mcg_mode
 628:../drivers/fsl_clock.h **** {
 629:../drivers/fsl_clock.h ****     kMCG_ModeFEI = 0U, /*!< FEI   - FLL Engaged Internal         */
 630:../drivers/fsl_clock.h ****     kMCG_ModeFBI,      /*!< FBI   - FLL Bypassed Internal        */
 631:../drivers/fsl_clock.h ****     kMCG_ModeBLPI,     /*!< BLPI  - Bypassed Low Power Internal  */
 632:../drivers/fsl_clock.h ****     kMCG_ModeFEE,      /*!< FEE   - FLL Engaged External         */
 633:../drivers/fsl_clock.h ****     kMCG_ModeFBE,      /*!< FBE   - FLL Bypassed External        */
 634:../drivers/fsl_clock.h ****     kMCG_ModeBLPE,     /*!< BLPE  - Bypassed Low Power External  */
 635:../drivers/fsl_clock.h ****     kMCG_ModePBE,      /*!< PBE   - PLL Bypassed External        */
 636:../drivers/fsl_clock.h ****     kMCG_ModePEE,      /*!< PEE   - PLL Engaged External         */
 637:../drivers/fsl_clock.h ****     kMCG_ModeError     /*!< Unknown mode                         */
 638:../drivers/fsl_clock.h **** } mcg_mode_t;
 639:../drivers/fsl_clock.h **** 
 640:../drivers/fsl_clock.h **** /*! @brief MCG PLL configuration. */
 641:../drivers/fsl_clock.h **** typedef struct _mcg_pll_config
 642:../drivers/fsl_clock.h **** {
 643:../drivers/fsl_clock.h ****     uint8_t enableMode; /*!< Enable mode. OR'ed value of @ref _mcg_pll_enable_mode. */
 644:../drivers/fsl_clock.h ****     uint8_t prdiv;      /*!< Reference divider PRDIV.    */
 645:../drivers/fsl_clock.h ****     uint8_t vdiv;       /*!< VCO divider VDIV.           */
 646:../drivers/fsl_clock.h **** } mcg_pll_config_t;
 647:../drivers/fsl_clock.h **** 
 648:../drivers/fsl_clock.h **** /*! @brief MCG mode change configuration structure
 649:../drivers/fsl_clock.h ****  *
 650:../drivers/fsl_clock.h ****  * When porting to a new board, set the following members
 651:../drivers/fsl_clock.h ****  * according to the board setting:
 652:../drivers/fsl_clock.h ****  * 1. frdiv: If the FLL uses the external reference clock, set this
 653:../drivers/fsl_clock.h ****  *    value to ensure that the external reference clock divided by frdiv is
 654:../drivers/fsl_clock.h ****  *    in the 31.25 kHz to 39.0625 kHz range.
 655:../drivers/fsl_clock.h ****  * 2. The PLL reference clock divider PRDIV: PLL reference clock frequency after
 656:../drivers/fsl_clock.h ****  *    PRDIV should be in the FSL_FEATURE_MCG_PLL_REF_MIN to
 657:../drivers/fsl_clock.h ****  *    FSL_FEATURE_MCG_PLL_REF_MAX range.
 658:../drivers/fsl_clock.h ****  */
 659:../drivers/fsl_clock.h **** typedef struct _mcg_config
 660:../drivers/fsl_clock.h **** {
 661:../drivers/fsl_clock.h ****     mcg_mode_t mcgMode; /*!< MCG mode.                   */
 662:../drivers/fsl_clock.h **** 
 663:../drivers/fsl_clock.h ****     /* ----------------------- MCGIRCCLK settings ------------------------ */
 664:../drivers/fsl_clock.h ****     uint8_t irclkEnableMode; /*!< MCGIRCLK enable mode.       */
 665:../drivers/fsl_clock.h ****     mcg_irc_mode_t ircs;     /*!< Source, MCG_C2[IRCS].       */
 666:../drivers/fsl_clock.h ****     uint8_t fcrdiv;          /*!< Divider, MCG_SC[FCRDIV].    */
 667:../drivers/fsl_clock.h **** 
 668:../drivers/fsl_clock.h ****     /* ------------------------ MCG FLL settings ------------------------- */
 669:../drivers/fsl_clock.h ****     uint8_t frdiv;       /*!< Divider MCG_C1[FRDIV].      */
 670:../drivers/fsl_clock.h ****     mcg_drs_t drs;       /*!< DCO range MCG_C4[DRST_DRS]. */
 671:../drivers/fsl_clock.h ****     mcg_dmx32_t dmx32;   /*!< MCG_C4[DMX32].              */
 672:../drivers/fsl_clock.h ****     mcg_oscsel_t oscsel; /*!< OSC select MCG_C7[OSCSEL].  */
 673:../drivers/fsl_clock.h **** 
 674:../drivers/fsl_clock.h ****     /* ------------------------ MCG PLL settings ------------------------- */
 675:../drivers/fsl_clock.h ****     mcg_pll_config_t pll0Config; /*!< MCGPLL0CLK configuration.   */
 676:../drivers/fsl_clock.h **** 
 677:../drivers/fsl_clock.h **** } mcg_config_t;
 678:../drivers/fsl_clock.h **** 
 679:../drivers/fsl_clock.h **** /*******************************************************************************
 680:../drivers/fsl_clock.h ****  * API
 681:../drivers/fsl_clock.h ****  ******************************************************************************/
 682:../drivers/fsl_clock.h **** 
 683:../drivers/fsl_clock.h **** #if defined(__cplusplus)
 684:../drivers/fsl_clock.h **** extern "C" {
 685:../drivers/fsl_clock.h **** #endif /* __cplusplus */
 686:../drivers/fsl_clock.h **** 
 687:../drivers/fsl_clock.h **** /*!
 688:../drivers/fsl_clock.h ****  * @brief Enable the clock for specific IP.
 689:../drivers/fsl_clock.h ****  *
 690:../drivers/fsl_clock.h ****  * @param name  Which clock to enable, see \ref clock_ip_name_t.
 691:../drivers/fsl_clock.h ****  */
 692:../drivers/fsl_clock.h **** static inline void CLOCK_EnableClock(clock_ip_name_t name)
 693:../drivers/fsl_clock.h **** {
 694:../drivers/fsl_clock.h ****     uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
 695:../drivers/fsl_clock.h ****     (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
 1153              		.loc 6 695 0
 1154 000e 0E4A     		ldr	r2, .L76+8
 1155 0010 1368     		ldr	r3, [r2]
 1156 0012 43F00103 		orr	r3, r3, #1
 1157 0016 1360     		str	r3, [r2]
 1158              	.LVL125:
 1159              	.LBE179:
 1160              	.LBE178:
 446:../source/main.c **** 		CLOCK_EnableClock(kCLOCK_Lptmr0);
 447:../source/main.c **** 		LPTMR0->CSR |= LPTMR_CSR_TCF_MASK;
 1161              		.loc 1 447 0
 1162 0018 0C4A     		ldr	r2, .L76+12
 1163 001a 1368     		ldr	r3, [r2]
 1164 001c 43F08003 		orr	r3, r3, #128
 1165 0020 1360     		str	r3, [r2]
 1166              	.L72:
 448:../source/main.c **** 
 449:../source/main.c **** 	}
 450:../source/main.c **** 
 451:../source/main.c **** 	else if ( LLWU->F2 & 0x01) {// 0x04 for stock frdm acc wakeup reg, 0x01 for customized
 452:../source/main.c **** 		wake = 2;
 453:../source/main.c **** 		LLWU->F2 |= 0x01;
 454:../source/main.c **** 	}
 455:../source/main.c **** 
 456:../source/main.c **** 	LLWU->F2 = 0x01;
 1167              		.loc 1 456 0
 1168 0022 074B     		ldr	r3, .L76
 1169 0024 0122     		movs	r2, #1
 1170 0026 9A71     		strb	r2, [r3, #6]
 457:../source/main.c **** }
 1171              		.loc 1 457 0
 1172 0028 7047     		bx	lr
 1173              	.L71:
 451:../source/main.c **** 		wake = 2;
 1174              		.loc 1 451 0
 1175 002a 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 1176 002c D207     		lsls	r2, r2, #31
 1177 002e F8D5     		bpl	.L72
 452:../source/main.c **** 		LLWU->F2 |= 0x01;
 1178              		.loc 1 452 0
 1179 0030 044A     		ldr	r2, .L76+4
 1180 0032 0221     		movs	r1, #2
 1181 0034 1170     		strb	r1, [r2]
 453:../source/main.c **** 	}
 1182              		.loc 1 453 0
 1183 0036 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 1184 0038 42F00102 		orr	r2, r2, #1
 1185 003c 9A71     		strb	r2, [r3, #6]
 1186 003e F0E7     		b	.L72
 1187              	.L77:
 1188              		.align	2
 1189              	.L76:
 1190 0040 00C00740 		.word	1074249728
 1191 0044 00000000 		.word	.LANCHOR3
 1192 0048 38800440 		.word	1074036792
 1193 004c 00000440 		.word	1074003968
 1194              		.cfi_endproc
 1195              	.LFE227:
 1197              		.section	.text.LPTMR0_IRQHandler,"ax",%progbits
 1198              		.align	1
 1199              		.global	LPTMR0_IRQHandler
 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1203              		.fpu fpv4-sp-d16
 1205              	LPTMR0_IRQHandler:
 1206              	.LFB228:
 458:../source/main.c **** 
 459:../source/main.c **** void LPTMR0_IRQHandler() {
 1207              		.loc 1 459 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              		@ link register save eliminated.
 460:../source/main.c **** 
 461:../source/main.c **** 	LPTMR0->CSR |= LPTMR_CSR_TCF_MASK;		// Clear the interrupt flag
 1212              		.loc 1 461 0
 1213 0000 084B     		ldr	r3, .L81
 1214 0002 1A68     		ldr	r2, [r3]
 1215 0004 42F08002 		orr	r2, r2, #128
 1216 0008 1A60     		str	r2, [r3]
 1217              	.L79:
 462:../source/main.c **** 	while ( LPTMR0->CSR & LPTMR_CSR_TCF_MASK) {
 1218              		.loc 1 462 0 discriminator 1
 1219 000a 1A68     		ldr	r2, [r3]
 1220 000c 1206     		lsls	r2, r2, #24
 1221 000e FCD4     		bmi	.L79
 463:../source/main.c **** 
 464:../source/main.c **** 	}
 465:../source/main.c **** 
 466:../source/main.c **** 	PMC->REGSC |= 0x08;
 1222              		.loc 1 466 0
 1223 0010 054A     		ldr	r2, .L81+4
 1224 0012 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1225 0014 43F00803 		orr	r3, r3, #8
 1226 0018 9370     		strb	r3, [r2, #2]
 1227              	.LVL126:
 1228              	.LBB180:
 1229              	.LBB181:
 211:../drivers/fsl_gpio.h **** }
 212:../drivers/fsl_gpio.h **** 
 213:../drivers/fsl_gpio.h **** /*!
 214:../drivers/fsl_gpio.h ****  * @brief Sets the output level of the multiple GPIO pins to the logic 0.
 215:../drivers/fsl_gpio.h ****  * @deprecated Do not use this function.  It has been superceded by @ref GPIO_PortClear.
 216:../drivers/fsl_gpio.h ****  *
 217:../drivers/fsl_gpio.h ****  * @param base GPIO peripheral base pointer (GPIOA, GPIOB, GPIOC, and so on.)
 218:../drivers/fsl_gpio.h ****  * @param mask GPIO pin number macro
 219:../drivers/fsl_gpio.h ****  */
 220:../drivers/fsl_gpio.h **** static inline void GPIO_ClearPinsOutput(GPIO_Type *base, uint32_t mask)
 221:../drivers/fsl_gpio.h **** {
 222:../drivers/fsl_gpio.h ****     GPIO_PortClear(base, mask);
 223:../drivers/fsl_gpio.h **** }
 224:../drivers/fsl_gpio.h **** 
 225:../drivers/fsl_gpio.h **** /*!
 226:../drivers/fsl_gpio.h ****  * @brief Reverses the current output logic of the multiple GPIO pins.
 227:../drivers/fsl_gpio.h ****  *
 228:../drivers/fsl_gpio.h ****  * @param base GPIO peripheral base pointer (GPIOA, GPIOB, GPIOC, and so on.)
 229:../drivers/fsl_gpio.h ****  * @param mask GPIO pin number macro
 230:../drivers/fsl_gpio.h ****  */
 231:../drivers/fsl_gpio.h **** static inline void GPIO_PortToggle(GPIO_Type *base, uint32_t mask)
 232:../drivers/fsl_gpio.h **** {
 233:../drivers/fsl_gpio.h ****     base->PTOR = mask;
 1230              		.loc 5 233 0
 1231 001a 044B     		ldr	r3, .L81+8
 1232 001c 4FF40012 		mov	r2, #2097152
 1233 0020 DA60     		str	r2, [r3, #12]
 1234              	.LVL127:
 1235              	.LBE181:
 1236              	.LBE180:
 467:../source/main.c **** 
 468:../source/main.c **** 	GPIO_PortToggle(GPIOB, 1 << 21u); //light blue LED
 469:../source/main.c **** }
 1237              		.loc 1 469 0
 1238 0022 7047     		bx	lr
 1239              	.L82:
 1240              		.align	2
 1241              	.L81:
 1242 0024 00000440 		.word	1074003968
 1243 0028 00D00740 		.word	1074253824
 1244 002c 40F00F40 		.word	1074786368
 1245              		.cfi_endproc
 1246              	.LFE228:
 1248              		.section	.text.UART3_RX_TX_IRQHandler,"ax",%progbits
 1249              		.align	1
 1250              		.global	UART3_RX_TX_IRQHandler
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1254              		.fpu fpv4-sp-d16
 1256              	UART3_RX_TX_IRQHandler:
 1257              	.LFB229:
 470:../source/main.c **** 
 471:../source/main.c **** void UART3_RX_TX_IRQHandler() {
 1258              		.loc 1 471 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262 0000 10B5     		push	{r4, lr}
 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 4, -8
 1265              		.cfi_offset 14, -4
 472:../source/main.c **** 
 473:../source/main.c **** 	UART_ClearStatusFlags(UART3, kUART_RxDataRegFullFlag);
 1266              		.loc 1 473 0
 1267 0002 0E4C     		ldr	r4, .L87
 1268 0004 2021     		movs	r1, #32
 1269 0006 2046     		mov	r0, r4
 1270 0008 FFF7FEFF 		bl	UART_ClearStatusFlags
 1271              	.LVL128:
 1272              	.LBB182:
 1273              	.LBB183:
 1274              		.loc 5 233 0
 1275 000c 0C4B     		ldr	r3, .L87+4
 1276 000e 4FF48002 		mov	r2, #4194304
 1277 0012 DA60     		str	r2, [r3, #12]
 1278              	.LVL129:
 1279              	.LBE183:
 1280              	.LBE182:
 474:../source/main.c **** 	GPIO_PortToggle(GPIOB, 1 << 22u); //toggle RED led to indicate data arrived from NB Iiootee module
 475:../source/main.c **** 
 476:../source/main.c **** 	uint8_t uartData = UART3->D;
 1281              		.loc 1 476 0
 1282 0014 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1283              	.LVL130:
 477:../source/main.c **** 	if (uartData != 0) {
 1284              		.loc 1 477 0
 1285 0016 03F0FF01 		and	r1, r3, #255
 1286 001a 73B1     		cbz	r3, .L83
 478:../source/main.c **** 
 479:../source/main.c **** 		UART3_recBuf[UART3_bufPtr] = uartData;
 1287              		.loc 1 479 0
 1288 001c 094A     		ldr	r2, .L87+8
 1289 001e 0A48     		ldr	r0, .L87+12
 1290 0020 1388     		ldrh	r3, [r2]
 1291              	.LVL131:
 1292 0022 9BB2     		uxth	r3, r3
 480:../source/main.c **** 		UART3_bufPtr++;
 481:../source/main.c **** 
 482:../source/main.c **** 		if (uartData == 0x0d) {
 1293              		.loc 1 482 0
 1294 0024 0D29     		cmp	r1, #13
 479:../source/main.c **** 		UART3_bufPtr++;
 1295              		.loc 1 479 0
 1296 0026 C154     		strb	r1, [r0, r3]
 480:../source/main.c **** 		UART3_bufPtr++;
 1297              		.loc 1 480 0
 1298 0028 1388     		ldrh	r3, [r2]
 1299 002a 03F10103 		add	r3, r3, #1
 1300 002e 9BB2     		uxth	r3, r3
 1301 0030 1380     		strh	r3, [r2]	@ movhi
 483:../source/main.c **** 			UART3_strReady = 1;
 1302              		.loc 1 483 0
 1303 0032 02BF     		ittt	eq
 1304 0034 054B     		ldreq	r3, .L87+16
 1305 0036 0122     		moveq	r2, #1
 1306 0038 1A70     		strbeq	r2, [r3]
 1307              	.L83:
 484:../source/main.c **** 			//UART3_bufPtr = 0;
 485:../source/main.c **** 		}
 486:../source/main.c **** 
 487:../source/main.c **** 	}
 488:../source/main.c **** 
 489:../source/main.c **** }
 1308              		.loc 1 489 0
 1309 003a 10BD     		pop	{r4, pc}
 1310              	.L88:
 1311              		.align	2
 1312              	.L87:
 1313 003c 00D00640 		.word	1074188288
 1314 0040 40F00F40 		.word	1074786368
 1315 0044 00000000 		.word	.LANCHOR10
 1316 0048 00000000 		.word	UART3_recBuf
 1317 004c 00000000 		.word	.LANCHOR0
 1318              		.cfi_endproc
 1319              	.LFE229:
 1321              		.section	.text.UART2_RX_TX_IRQHandler,"ax",%progbits
 1322              		.align	1
 1323              		.global	UART2_RX_TX_IRQHandler
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1327              		.fpu fpv4-sp-d16
 1329              	UART2_RX_TX_IRQHandler:
 1330              	.LFB230:
 490:../source/main.c **** 
 491:../source/main.c **** void UART2_RX_TX_IRQHandler() {
 1331              		.loc 1 491 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335 0000 10B5     		push	{r4, lr}
 1336              		.cfi_def_cfa_offset 8
 1337              		.cfi_offset 4, -8
 1338              		.cfi_offset 14, -4
 492:../source/main.c **** 
 493:../source/main.c **** 	UART_ClearStatusFlags(UART2, kUART_RxDataRegFullFlag);
 1339              		.loc 1 493 0
 1340 0002 104C     		ldr	r4, .L92
 1341 0004 2021     		movs	r1, #32
 1342 0006 2046     		mov	r0, r4
 1343 0008 FFF7FEFF 		bl	UART_ClearStatusFlags
 1344              	.LVL132:
 1345              	.LBB184:
 1346              	.LBB185:
 1347              		.loc 5 233 0
 1348 000c 0E4B     		ldr	r3, .L92+4
 1349 000e 0F48     		ldr	r0, .L92+8
 1350 0010 4FF48002 		mov	r2, #4194304
 1351 0014 DA60     		str	r2, [r3, #12]
 1352              	.LVL133:
 1353              	.LBE185:
 1354              	.LBE184:
 494:../source/main.c **** 	GPIO_PortToggle(GPIOB, 1 << 22u); //toggle RED led to indicate data arrived from GPS module
 495:../source/main.c **** 
 496:../source/main.c **** 		uint8_t uartData = UART2->D;
 497:../source/main.c **** 		/*
 498:../source/main.c **** 		 * Here we use different method for collecting GPS data. because there can be other data than cha
 499:../source/main.c **** 		 * like 0x00 in UBX messages, normal string functions would fail (mistaken null terminator)
 500:../source/main.c **** 		 * so we must collect every byte from the gps module
 501:../source/main.c **** 		 * so fill buffer to almost full with GPS data, then put GPS_strReady high and stop filling.
 502:../source/main.c **** 		 * Start filling again when data has been read and GPS_strReady is low.
 503:../source/main.c **** 		 *
 504:../source/main.c **** 		 */
 505:../source/main.c **** 		if(GPS_strReady == 0)
 1355              		.loc 1 505 0
 1356 0016 0E4A     		ldr	r2, .L92+12
 496:../source/main.c **** 		/*
 1357              		.loc 1 496 0
 1358 0018 E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 1359              		.loc 1 505 0
 1360 001a 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 496:../source/main.c **** 		/*
 1361              		.loc 1 496 0
 1362 001c C9B2     		uxtb	r1, r1
 1363              	.LVL134:
 1364              		.loc 1 505 0
 1365 001e 3CB9     		cbnz	r4, .L90
 506:../source/main.c **** 		{
 507:../source/main.c **** 
 508:../source/main.c **** 			GPS_recBuf[GPS_bufPtr] = uartData; //put new byte to buffer
 1366              		.loc 1 508 0
 1367 0020 0388     		ldrh	r3, [r0]
 1368 0022 0C4C     		ldr	r4, .L92+16
 1369 0024 9BB2     		uxth	r3, r3
 1370 0026 E154     		strb	r1, [r4, r3]
 509:../source/main.c **** 			GPS_bufPtr++;
 1371              		.loc 1 509 0
 1372 0028 0388     		ldrh	r3, [r0]
 1373 002a 0133     		adds	r3, r3, #1
 1374 002c 9BB2     		uxth	r3, r3
 1375 002e 0380     		strh	r3, [r0]	@ movhi
 1376              	.L90:
 510:../source/main.c **** 		}
 511:../source/main.c **** 
 512:../source/main.c **** 		if(GPS_bufPtr > 500)
 1377              		.loc 1 512 0
 1378 0030 0388     		ldrh	r3, [r0]
 1379 0032 B3F5FA7F 		cmp	r3, #500
 1380 0036 03D9     		bls	.L89
 513:../source/main.c **** 		{
 514:../source/main.c **** 			if(uartData == 0x0a)
 1381              		.loc 1 514 0
 1382 0038 0A29     		cmp	r1, #10
 515:../source/main.c **** 			{
 516:../source/main.c **** 				GPS_strReady = 1;
 1383              		.loc 1 516 0
 1384 003a 04BF     		itt	eq
 1385 003c 0123     		moveq	r3, #1
 1386 003e 1370     		strbeq	r3, [r2]
 1387              	.L89:
 517:../source/main.c **** 			}
 518:../source/main.c **** 		}
 519:../source/main.c **** 
 520:../source/main.c **** 		/*
 521:../source/main.c **** 		 * When buffer is almost full, put strReady high and stop filling it
 522:../source/main.c **** 		 */
 523:../source/main.c **** 		/*if (GPS_bufPtr > 499) {
 524:../source/main.c **** 			GPS_strReady = 1;
 525:../source/main.c **** 		}*/
 526:../source/main.c **** 
 527:../source/main.c **** 
 528:../source/main.c **** }
 1388              		.loc 1 528 0
 1389 0040 10BD     		pop	{r4, pc}
 1390              	.L93:
 1391 0042 00BF     		.align	2
 1392              	.L92:
 1393 0044 00C00640 		.word	1074184192
 1394 0048 40F00F40 		.word	1074786368
 1395 004c 00000000 		.word	.LANCHOR11
 1396 0050 00000000 		.word	.LANCHOR4
 1397 0054 00000000 		.word	GPS_recBuf
 1398              		.cfi_endproc
 1399              	.LFE230:
 1401              		.section	.text.UART0_RX_TX_IRQHandler,"ax",%progbits
 1402              		.align	1
 1403              		.global	UART0_RX_TX_IRQHandler
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu fpv4-sp-d16
 1409              	UART0_RX_TX_IRQHandler:
 1410              	.LFB231:
 529:../source/main.c **** 
 530:../source/main.c **** void UART0_RX_TX_IRQHandler() {
 1411              		.loc 1 530 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415 0000 10B5     		push	{r4, lr}
 1416              		.cfi_def_cfa_offset 8
 1417              		.cfi_offset 4, -8
 1418              		.cfi_offset 14, -4
 531:../source/main.c **** 
 532:../source/main.c **** 	UART_ClearStatusFlags(UART0, kUART_RxDataRegFullFlag);
 1419              		.loc 1 532 0
 1420 0002 0D4C     		ldr	r4, .L96
 1421 0004 2021     		movs	r1, #32
 1422 0006 2046     		mov	r0, r4
 1423 0008 FFF7FEFF 		bl	UART_ClearStatusFlags
 1424              	.LVL135:
 1425              	.LBB186:
 1426              	.LBB187:
 1427              		.loc 5 233 0
 1428 000c 0B4B     		ldr	r3, .L96+4
 1429              	.LBE187:
 1430              	.LBE186:
 533:../source/main.c **** 	GPIO_PortToggle(GPIOB, 1 << 21u); //toggle BLUE led to indicate data arrived from computer
 534:../source/main.c **** 
 535:../source/main.c **** 	uint8_t uartData = UART0->D;
 536:../source/main.c **** 
 537:../source/main.c **** 	PC_recBuf[PC_bufPtr] = uartData;
 1431              		.loc 1 537 0
 1432 000e 0C49     		ldr	r1, .L96+8
 1433 0010 0C48     		ldr	r0, .L96+12
 1434              	.LBB189:
 1435              	.LBB188:
 1436              		.loc 5 233 0
 1437 0012 4FF40012 		mov	r2, #2097152
 1438 0016 DA60     		str	r2, [r3, #12]
 1439              	.LVL136:
 1440              	.LBE188:
 1441              	.LBE189:
 535:../source/main.c **** 
 1442              		.loc 1 535 0
 1443 0018 E279     		ldrb	r2, [r4, #7]	@ zero_extendqisi2
 1444              		.loc 1 537 0
 1445 001a 0B88     		ldrh	r3, [r1]
 1446 001c 9BB2     		uxth	r3, r3
 535:../source/main.c **** 
 1447              		.loc 1 535 0
 1448 001e D2B2     		uxtb	r2, r2
 1449              	.LVL137:
 1450              		.loc 1 537 0
 1451 0020 C254     		strb	r2, [r0, r3]
 538:../source/main.c **** 	PC_bufPtr++;
 1452              		.loc 1 538 0
 1453 0022 0B88     		ldrh	r3, [r1]
 1454 0024 0133     		adds	r3, r3, #1
 1455 0026 9BB2     		uxth	r3, r3
 539:../source/main.c **** 
 540:../source/main.c **** 	if (uartData == 0x0d) {
 1456              		.loc 1 540 0
 1457 0028 0D2A     		cmp	r2, #13
 538:../source/main.c **** 	PC_bufPtr++;
 1458              		.loc 1 538 0
 1459 002a 0B80     		strh	r3, [r1]	@ movhi
 541:../source/main.c **** 		PC_strReady = 1;
 1460              		.loc 1 541 0
 1461 002c 02BF     		ittt	eq
 1462 002e 064B     		ldreq	r3, .L96+16
 1463 0030 0122     		moveq	r2, #1
 1464              	.LVL138:
 1465 0032 1A70     		strbeq	r2, [r3]
 542:../source/main.c **** 
 543:../source/main.c **** 	}
 544:../source/main.c **** 
 545:../source/main.c **** }
 1466              		.loc 1 545 0
 1467 0034 10BD     		pop	{r4, pc}
 1468              	.L97:
 1469 0036 00BF     		.align	2
 1470              	.L96:
 1471 0038 00A00640 		.word	1074176000
 1472 003c 40F00F40 		.word	1074786368
 1473 0040 00000000 		.word	.LANCHOR8
 1474 0044 00000000 		.word	.LANCHOR6
 1475 0048 00000000 		.word	.LANCHOR5
 1476              		.cfi_endproc
 1477              	.LFE231:
 1479              		.comm	ms_ticks,4,4
 1480              		.global	moduleResponseTimeout
 1481              		.comm	parsedLon,15,1
 1482              		.comm	parsedLat,15,1
 1483              		.global	streamGps
 1484              		.global	GPS_strReady
 1485              		.global	GPS_bufPtr
 1486              		.comm	GPS_recBuf,600,1
 1487              		.global	PC_strReady
 1488              		.global	PC_bufPtr
 1489              		.comm	UART3_recBuf,500,1
 1490              		.global	UART3_bufPtr
 1491              		.global	UART3_strReady
 1492              		.global	wake
 1493              		.comm	uart_config,16,4
 1494              		.comm	smc_power_mode_vlls_config,2,1
 1495              		.comm	lptmr_config,7,1
 1496              		.section	.rodata
 1497              		.set	.LANCHOR2,. + 0
 1498              	.LC2:
 1499 0000 36353030 		.ascii	"6500.53\000"
 1499      2E353300 
 1500 0008 000000   		.space	3
 1501              	.LC3:
 1502 000b 30323533 		.ascii	"02534.554\000"
 1502      342E3535 
 1502      3400
 1503 0015 00       		.space	1
 1504              	.LC9:
 1505 0016 36353030 		.ascii	"6500.02359\000"
 1505      2E303233 
 1505      353900
 1506 0021 00       		.space	1
 1507              		.section	.bss.GPS_bufPtr,"aw",%nobits
 1508              		.align	1
 1509              		.set	.LANCHOR11,. + 0
 1512              	GPS_bufPtr:
 1513 0000 0000     		.space	2
 1514              		.section	.bss.GPS_strReady,"aw",%nobits
 1515              		.set	.LANCHOR4,. + 0
 1518              	GPS_strReady:
 1519 0000 00       		.space	1
 1520              		.section	.bss.PC_bufPtr,"aw",%nobits
 1521              		.align	1
 1522              		.set	.LANCHOR8,. + 0
 1525              	PC_bufPtr:
 1526 0000 0000     		.space	2
 1527              		.section	.bss.PC_recBuf,"aw",%nobits
 1528              		.set	.LANCHOR6,. + 0
 1531              	PC_recBuf:
 1532 0000 00000000 		.space	500
 1532      00000000 
 1532      00000000 
 1532      00000000 
 1532      00000000 
 1533              		.section	.bss.PC_strReady,"aw",%nobits
 1534              		.set	.LANCHOR5,. + 0
 1537              	PC_strReady:
 1538 0000 00       		.space	1
 1539              		.section	.bss.UART3_bufPtr,"aw",%nobits
 1540              		.align	1
 1541              		.set	.LANCHOR10,. + 0
 1544              	UART3_bufPtr:
 1545 0000 0000     		.space	2
 1546              		.section	.bss.UART3_strReady,"aw",%nobits
 1547              		.set	.LANCHOR0,. + 0
 1550              	UART3_strReady:
 1551 0000 00       		.space	1
 1552              		.section	.bss.streamGps,"aw",%nobits
 1553              		.set	.LANCHOR7,. + 0
 1556              	streamGps:
 1557 0000 00       		.space	1
 1558              		.section	.data.moduleResponseTimeout,"aw",%progbits
 1559              		.align	2
 1560              		.set	.LANCHOR9,. + 0
 1563              	moduleResponseTimeout:
 1564 0000 D0070000 		.word	2000
 1565              		.section	.data.wake,"aw",%progbits
 1566              		.set	.LANCHOR3,. + 0
 1569              	wake:
 1570 0000 02       		.byte	2
 1571              		.section	.rodata.LED_configOutput.10761,"a",%progbits
 1572              		.set	.LANCHOR1,. + 0
 1575              	LED_configOutput.10761:
 1576 0000 01       		.byte	1
 1577 0001 01       		.byte	1
 1578              		.section	.rodata.main.str1.1,"aMS",%progbits,1
 1579              	.LC0:
 1580 0000 5265696E 		.ascii	"Reindeer IoT has started\015\012Command \"iot\" to "
 1580      64656572 
 1580      20496F54 
 1580      20686173 
 1580      20737461 
 1581 002b 73746172 		.ascii	"start executing reindeer track cycle\015\012Command"
 1581      74206578 
 1581      65637574 
 1581      696E6720 
 1581      7265696E 
 1582 0058 20226770 		.ascii	" \"gpsinfo=1\" or \"gpsinfo=0\" to switch GPS data "
 1582      73696E66 
 1582      6F3D3122 
 1582      206F7220 
 1582      22677073 
 1583 0087 6F6E2F6F 		.ascii	"on/off\015\000"
 1583      66660D00 
 1584              	.LC1:
 1585 008f 4F722065 		.ascii	"Or enter normal AT commands here for SARA-N2\015\012"
 1585      6E746572 
 1585      206E6F72 
 1585      6D616C20 
 1585      41542063 
 1586 00bd 4D6F6475 		.ascii	"Modules powered on and booting now!\015\000"
 1586      6C657320 
 1586      706F7765 
 1586      72656420 
 1586      6F6E2061 
 1587              	.LC4:
 1588 00e2 36363636 		.ascii	"66666\000"
 1588      3600
 1589              	.LC5:
 1590 00e8 66616C73 		.ascii	"false\000"
 1590      6500
 1591              	.LC6:
 1592 00ee 74727565 		.ascii	"true\000"
 1592      00
 1593              	.LC7:
 1594 00f3 576F6B65 		.ascii	"Woken by LPTMR, reindeer is !!!%s!!\015\012\000"
 1594      6E206279 
 1594      204C5054 
 1594      4D522C20 
 1594      7265696E 
 1595              	.LC8:
 1596 0119 0D00     		.ascii	"\015\000"
 1597              	.LC11:
 1598 011b 50617273 		.ascii	"Parsed latitude: %s\015\012\000"
 1598      6564206C 
 1598      61746974 
 1598      7564653A 
 1598      2025730D 
 1599              	.LC12:
 1600 0131 50617273 		.ascii	"Parsed longitude: %s\015\012\000"
 1600      6564206C 
 1600      6F6E6769 
 1600      74756465 
 1600      3A202573 
 1601              	.LC13:
 1602 0148 696F7400 		.ascii	"iot\000"
 1603              	.LC14:
 1604 014c 53746172 		.ascii	"Starting Reindeer IoT cycle\015\000"
 1604      74696E67 
 1604      20526569 
 1604      6E646565 
 1604      7220496F 
 1605              	.LC15:
 1606 0169 67707369 		.ascii	"gpsinfo=1\000"
 1606      6E666F3D 
 1606      3100
 1607              	.LC16:
 1608 0173 67707369 		.ascii	"gpsinfo=0\000"
 1608      6E666F3D 
 1608      3000
 1609              	.LC17:
 1610 017d 72666F66 		.ascii	"rfoff\000"
 1610      6600
 1611              	.LC18:
 1612 0183 72666F6E 		.ascii	"rfon\000"
 1612      00
 1613              	.LC19:
 1614 0188 B56200   		.ascii	"\265b\000"
 1615              	.LC20:
 1616 018b 73656E64 		.ascii	"send to gps\015\000"
 1616      20746F20 
 1616      6770730D 
 1616      00
 1617              	.LC21:
 1618 0198 466F756E 		.ascii	"Found UBX response\015\000"
 1618      64205542 
 1618      58207265 
 1618      73706F6E 
 1618      73650D00 
 1619              	.LC22:
 1620 01ac 55425820 		.ascii	"UBX response length: %02x\015\012\000"
 1620      72657370 
 1620      6F6E7365 
 1620      206C656E 
 1620      6774683A 
 1621              	.LC23:
 1622 01c8 526F6765 		.ascii	"Roger\015\000"
 1622      720D00
 1623              	.LC10:
 1624 01cf 30323533 		.ascii	"02530.56951\000"
 1624      302E3536 
 1624      39353100 
 1625              		.text
 1626              	.Letext0:
 1627              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 1628              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1629              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 1630              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 1631              		.file 11 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 1632              		.file 12 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 1633              		.file 13 "../CMSIS/MK64F12.h"
 1634              		.file 14 "../CMSIS/system_MK64F12.h"
 1635              		.file 15 "../drivers/fsl_common.h"
 1636              		.file 16 "../board/clock_config.h"
 1637              		.file 17 "../drivers/fsl_uart.h"
 1638              		.file 18 "../source/at_func.h"
 1639              		.file 19 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdlib.h"
 1640              		.file 20 "../source/gps_func.h"
 1641              		.file 21 "../source/nbiot_func.h"
 1642              		.file 22 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdio.h"
 1643              		.file 23 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h"
 1644              		.file 24 "<built-in>"
 1645              		.file 25 "../board/pin_mux.h"
 1646              		.file 26 "../board/board.h"
 1647              		.file 27 "../source/i2c_func.h"
 1648              		.file 28 "../source/adc_func.h"
 1649              		.file 29 "../source/acc_func.h"
 1650              		.file 30 "../source/timing.h"
